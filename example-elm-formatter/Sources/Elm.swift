import CoreFoundation
import Foundation

extension Elm.Maybe_Maybe: Equatable where a: Equatable {}
extension Elm.Result_Result: Equatable where error: Equatable, success: Equatable {}
extension Elm.List_List: Equatable where a: Equatable {}
extension Elm.List_List: Hashable where a: Hashable {}
extension Elm.List_List: Comparable where a: Comparable {}
extension Elm.Tuple: Equatable where first: Equatable, second: Equatable {}
extension Elm.Tuple: Hashable where first: Hashable, second: Hashable {}
extension Elm.Tuple: Comparable where first: Comparable, second: Comparable {}
extension Elm.Triple: Equatable where first: Equatable, second: Equatable, third: Equatable {}
extension Elm.Triple: Hashable where first: Hashable, second: Hashable, third: Hashable {}
extension Elm.Triple: Comparable where first: Comparable, second: Comparable, third: Comparable {}
extension Elm.Generated_caseInsensitive_multiline: Equatable
where caseInsensitive: Equatable, multiline: Equatable {}
extension Elm.Generated_index_match_number_submatches
where index: Equatable, match: Equatable, number: Equatable, submatches: Equatable {}
extension Elm.Generated_offset_start: Equatable where offset: Equatable, start: Equatable {}
extension Elm.Generated_x_y: Equatable where x: Equatable, y: Equatable {}
extension Elm.Generated_x_y_z: Equatable where x: Equatable, y: Equatable, z: Equatable {}
extension Elm.Generated_w_x_y_z: Equatable
where x: Equatable, y: Equatable, z: Equatable, w: Equatable {}
extension Elm.Generated_init__update_subscriptions: Equatable
where init_: Equatable, update: Equatable, subscriptions: Equatable {}
extension Elm.ElmInterface_Exposed: Equatable {}
extension Elm.ElmInternalRawFile_RawFile: Equatable {}
extension Elm.ElmParserDeclarations_DeclarationAfterDocumentation: Equatable {}
extension Elm.ElmParserDeclarations_TypeOrTypeAliasDeclarationWithoutDocumentation: Equatable {}
extension Elm.ElmParserExpression_ExtensionRight: Equatable {}
extension Elm.ElmParserExpression_RecordFieldsOrUpdateAfterName: Equatable {}
extension Elm.ElmParserExpression_Tupled: Equatable {}
extension Elm.ElmParserPatterns_PatternComposedWith: Equatable {}
extension Elm.ElmParserTypeAnnotation_RecordFieldsOrExtensionAfterName: Equatable {}
extension Elm.ElmProcessing_ProcessContext: Equatable {}
extension Elm.ElmSyntaxDeclaration_Declaration: Equatable {}
extension Elm.ElmSyntaxExposing_Exposing: Equatable {}
extension Elm.ElmSyntaxExposing_TopLevelExpose: Equatable {}
extension Elm.ElmSyntaxExpression_Expression: Equatable {}
extension Elm.ElmSyntaxExpression_LetDeclaration: Equatable {}
extension Elm.ElmSyntaxInfix_InfixDirection: Equatable {}
extension Elm.ElmSyntaxModule_Module: Equatable {}
extension Elm.ElmSyntaxNode_Node: Equatable where a: Equatable {}
extension Elm.ElmSyntaxParserLenient_DeclarationAfterDocumentation: Equatable {}
extension Elm.ElmSyntaxParserLenient_ExtensionRight: Equatable {}
extension Elm.ElmSyntaxParserLenient_RecordFieldsOrExtensionAfterName: Equatable {}
extension Elm.ElmSyntaxParserLenient_RecordFieldsOrUpdateAfterName: Equatable {}
extension Elm.ElmSyntaxParserLenient_RopeFilled: Equatable where a: Equatable {}
extension Elm.ElmSyntaxParserLenient_Tupled: Equatable {}
extension Elm.ElmSyntaxParserLenient_TypeOrTypeAliasDeclarationWithoutDocumentation: Equatable {}
extension Elm.ElmSyntaxPattern_Pattern: Equatable {}
extension Elm.ElmSyntaxTypeAnnotation_TypeAnnotation: Equatable {}
extension Elm.Generated_afterCommitting_direction_symbol_validateRightPrecedence: Equatable where afterCommitting: Equatable, direction: Equatable, symbol: Equatable, validateRightPrecedence: Equatable {}
extension Elm.Generated_afterCommitting_validateRightPrecedence: Equatable where afterCommitting: Equatable, validateRightPrecedence: Equatable {}
extension Elm.Generated_aliasNameNode_aliasedPattern: Equatable where aliasNameNode: Equatable, aliasedPattern: Equatable {}
extension Elm.Generated_applied_argument0_argument1Up_fullRange: Equatable where applied: Equatable, argument0: Equatable, argument1Up: Equatable, fullRange: Equatable {}
extension Elm.Generated_args_expression: Equatable where args: Equatable, expression: Equatable {}
extension Elm.Generated_arguments_expression_name: Equatable where arguments: Equatable, expression: Equatable, name: Equatable {}
extension Elm.Generated_arguments_expression_signature_startName: Equatable where arguments: Equatable, expression: Equatable, signature: Equatable, startName: Equatable {}
extension Elm.Generated_arguments_fullRange_start: Equatable where arguments: Equatable, fullRange: Equatable, start: Equatable {}
extension Elm.Generated_arguments_name: Equatable where arguments: Equatable, name: Equatable {}
extension Elm.Generated_atDocsExposeLines_remainingExposes: Equatable where atDocsExposeLines: Equatable, remainingExposes: Equatable {}
extension Elm.Generated_atDocsLine_rawBefore: Equatable where atDocsLine: Equatable, rawBefore: Equatable {}
extension Elm.Generated_atDocsLines_comments: Equatable where atDocsLines: Equatable, comments: Equatable {}
extension Elm.Generated_base_offsetAndInt: Equatable where base: Equatable, offsetAndInt: Equatable {}
extension Elm.Generated_beforeRightestOperatorExpressionChain_leftest_rightestExpression_rightestOperator: Equatable where beforeRightestOperatorExpressionChain: Equatable, leftest: Equatable, rightestExpression: Equatable, rightestOperator: Equatable {}
extension Elm.Generated_beforeRightestOperatorExpressionChain_rightestExpression_rightestOperator: Equatable where beforeRightestOperatorExpressionChain: Equatable, rightestExpression: Equatable, rightestOperator: Equatable {}
extension Elm.Generated_beforeRightest_rightest: Equatable where beforeRightest: Equatable, rightest: Equatable {}
extension Elm.Generated_binary_expecting_float_hex_int_invalid_octal: Equatable where binary: Equatable, expecting: Equatable, float: Equatable, hex: Equatable, int: Equatable, invalid: Equatable, octal: Equatable {}
extension Elm.Generated_binary_float_hex_int_octal: Equatable where binary: Equatable, float: Equatable, hex: Equatable, int: Equatable, octal: Equatable {}
extension Elm.Generated_cases_comments_end: Equatable where cases: Equatable, comments: Equatable, end: Equatable {}
extension Elm.Generated_cases_expression: Equatable where cases: Equatable, expression: Equatable {}
extension Elm.Generated_cases_expression_fullRange: Equatable where cases: Equatable, expression: Equatable, fullRange: Equatable {}
extension Elm.Generated_col_contextStack_problem_row: Equatable where col: Equatable, contextStack: Equatable, problem: Equatable, row: Equatable {}
extension Elm.Generated_col_context_indent_offset_row_src: Equatable where col: Equatable, context: Equatable, indent: Equatable, offset: Equatable, row: Equatable, src: Equatable {}
extension Elm.Generated_col_context_row: Equatable where col: Equatable, context: Equatable, row: Equatable {}
extension Elm.Generated_col_indent_offset_row_src: Equatable where col: Equatable, indent: Equatable, offset: Equatable, row: Equatable, src: Equatable {}
extension Elm.Generated_col_problem_row: Equatable where col: Equatable, problem: Equatable, row: Equatable {}
extension Elm.Generated_column_row: Equatable where column: Equatable, row: Equatable {}
extension Elm.Generated_command_exposingList_moduleName_subscription: Equatable where command: Equatable, exposingList: Equatable, moduleName: Equatable, subscription: Equatable {}
extension Elm.Generated_command_subscription: Equatable where command: Equatable, subscription: Equatable {}
extension Elm.Generated_comment0_comment1Up: Equatable where comment0: Equatable, comment1Up: Equatable {}
extension Elm.Generated_commentsBetweenImports_previousImportRange: Equatable where commentsBetweenImports: Equatable, previousImportRange: Equatable {}
extension Elm.Generated_comments_declarations: Equatable where comments: Equatable, declarations: Equatable {}
extension Elm.Generated_comments_declarations_imports_moduleDefinition: Equatable where comments: Equatable, declarations: Equatable, imports: Equatable, moduleDefinition: Equatable {}
extension Elm.Generated_comments_documentationComment: Equatable where comments: Equatable, documentationComment: Equatable {}
extension Elm.Generated_comments_implementationName_typeAnnotation: Equatable where comments: Equatable, implementationName: Equatable, typeAnnotation: Equatable {}
extension Elm.Generated_comments_portDocumentationComment: Equatable where comments: Equatable, portDocumentationComment: Equatable {}
extension Elm.Generated_comments_portDocumentationComments_previousEnd: Equatable where comments: Equatable, portDocumentationComments: Equatable, previousEnd: Equatable {}
extension Elm.Generated_comments_syntax: Equatable where comments: Equatable, syntax: Equatable {}
extension Elm.Generated_condition_conditionLineSpreadMinimum_fullRange_onFalse_onTrue: Equatable where condition: Equatable, conditionLineSpreadMinimum: Equatable, fullRange: Equatable, onFalse: Equatable, onTrue: Equatable {}
extension Elm.Generated_consecutiveDoubleQuoteCount_result: Equatable where consecutiveDoubleQuoteCount: Equatable, result: Equatable {}
extension Elm.Generated_constructors_documentation_generics_name: Equatable where constructors: Equatable, documentation: Equatable, generics: Equatable, name: Equatable {}
extension Elm.Generated_declaration_documentation_signature: Equatable where declaration: Equatable, documentation: Equatable, signature: Equatable {}
extension Elm.Generated_declaration_lateImports: Equatable where declaration: Equatable, lateImports: Equatable {}
extension Elm.Generated_declarations_expression: Equatable where declarations: Equatable, expression: Equatable {}
extension Elm.Generated_direction_expression_symbol: Equatable where direction: Equatable, expression: Equatable, symbol: Equatable {}
extension Elm.Generated_direction_function_operator__precedence: Equatable where direction: Equatable, function: Equatable, operator_: Equatable, precedence: Equatable {}
extension Elm.Generated_documentation_generics_name_typeAnnotation: Equatable where documentation: Equatable, generics: Equatable, name: Equatable, typeAnnotation: Equatable {}
extension Elm.Generated_elements_fullRange: Equatable where elements: Equatable, fullRange: Equatable {}
extension Elm.Generated_endLocation_reverse: Equatable where endLocation: Equatable, reverse: Equatable {}
extension Elm.Generated_end_item_separator_spaces_start_trailing: Equatable where end: Equatable, item: Equatable, separator: Equatable, spaces: Equatable, start: Equatable, trailing: Equatable {}
extension Elm.Generated_end_start: Equatable where end: Equatable, start: Equatable {}
extension Elm.Generated_expecting_inner_reserved_start: Equatable where expecting: Equatable, inner: Equatable, reserved: Equatable, start: Equatable {}
extension Elm.Generated_exponent_result: Equatable where exponent: Equatable, result: Equatable {}
extension Elm.Generated_expose0_expose1Up_fullRange: Equatable where expose0: Equatable, expose1Up: Equatable, fullRange: Equatable {}
extension Elm.Generated_exposes_remaining: Equatable where exposes: Equatable, remaining: Equatable {}
extension Elm.Generated_exposingList_moduleAlias_moduleName: Equatable where exposingList: Equatable, moduleAlias: Equatable, moduleName: Equatable {}
extension Elm.Generated_exposingList_moduleName: Equatable where exposingList: Equatable, moduleName: Equatable {}
extension Elm.Generated_expression_expressionPrint_maybeCommentsBeforeExpression_operator__previousLineSpread: Equatable where expression: Equatable, expressionPrint: Equatable, maybeCommentsBeforeExpression: Equatable, operator_: Equatable, previousLineSpread: Equatable {}
extension Elm.Generated_expression_maybeCommentsBeforeExpression_operator_: Equatable where expression: Equatable, maybeCommentsBeforeExpression: Equatable, operator_: Equatable {}
extension Elm.Generated_expression_operator_: Equatable where expression: Equatable, operator_: Equatable {}
extension Elm.Generated_extensionRightParser_leftPrecedence_symbol: Equatable where extensionRightParser: Equatable, leftPrecedence: Equatable, symbol: Equatable {}
extension Elm.Generated_extensionRight_leftPrecedence_symbol: Equatable where extensionRight: Equatable, leftPrecedence: Equatable, symbol: Equatable {}
extension Elm.Generated_fields_fullRange: Equatable where fields: Equatable, fullRange: Equatable {}
extension Elm.Generated_fields_fullRange_recordVariable: Equatable where fields: Equatable, fullRange: Equatable, recordVariable: Equatable {}
extension Elm.Generated_finishedBlocks_rawSinceAtDocs: Equatable where finishedBlocks: Equatable, rawSinceAtDocs: Equatable {}
extension Elm.Generated_firstFieldValue_tailFields: Equatable where firstFieldValue: Equatable, tailFields: Equatable {}
extension Elm.Generated_fullRange_inType_outType: Equatable where fullRange: Equatable, inType: Equatable, outType: Equatable {}
extension Elm.Generated_fullRange_left_operator__right: Equatable where fullRange: Equatable, left: Equatable, operator_: Equatable, right: Equatable {}
extension Elm.Generated_fullRange_letDeclaration0_letDeclaration1Up_result: Equatable where fullRange: Equatable, letDeclaration0: Equatable, letDeclaration1Up: Equatable, result: Equatable {}
extension Elm.Generated_fullRange_notParenthesized: Equatable where fullRange: Equatable, notParenthesized: Equatable {}
extension Elm.Generated_fullRange_part0_part1: Equatable where fullRange: Equatable, part0: Equatable, part1: Equatable {}
extension Elm.Generated_fullRange_part0_part1_part2: Equatable where fullRange: Equatable, part0: Equatable, part1: Equatable, part2: Equatable {}
extension Elm.Generated_fullRange_part0_part1_part2_part3_part4Up: Equatable where fullRange: Equatable, part0: Equatable, part1: Equatable, part2: Equatable, part3: Equatable, part4Up: Equatable {}
extension Elm.Generated_headVariant_name_parameters_tailVariantsReverse: Equatable where headVariant: Equatable, name: Equatable, parameters: Equatable, tailVariantsReverse: Equatable {}
extension Elm.Generated_head_tail: Equatable where head: Equatable, tail: Equatable {}
extension Elm.Generated_implementationName_typeAnnotation: Equatable where implementationName: Equatable, typeAnnotation: Equatable {}
extension Elm.Generated_inType_outType: Equatable where inType: Equatable, outType: Equatable {}
extension Elm.Generated_indent: Equatable where indent: Equatable {}
extension Elm.Generated_inner_reserved_start: Equatable where inner: Equatable, reserved: Equatable, start: Equatable {}
extension Elm.Generated_int_offset: Equatable where int: Equatable, offset: Equatable {}
extension Elm.Generated_interfaces_name_version: Equatable where interfaces: Equatable, name: Equatable, version: Equatable {}
extension Elm.Generated_length_string: Equatable where length: Equatable, string: Equatable {}
extension Elm.Generated_lineSpreadMinimum_printArgumentParenthesizedIfSpaceSeparated: Equatable where lineSpreadMinimum: Equatable, printArgumentParenthesizedIfSpaceSeparated: Equatable {}
extension Elm.Generated_lineSpreadMinimum_printPartNotParenthesized: Equatable where lineSpreadMinimum: Equatable, printPartNotParenthesized: Equatable {}
extension Elm.Generated_lineSpread_print: Equatable where lineSpread: Equatable, print: Equatable {}
extension Elm.Generated_maybeCommentsBeforeName_maybeCommentsBetweenNameAndValue_syntax_valuePrint: Equatable where maybeCommentsBeforeName: Equatable, maybeCommentsBetweenNameAndValue: Equatable, syntax: Equatable, valuePrint: Equatable {}
extension Elm.Generated_maybeThirdPart_secondPart: Equatable where maybeThirdPart: Equatable, secondPart: Equatable {}
extension Elm.Generated_moduleName_name: Equatable where moduleName: Equatable, name: Equatable {}
extension Elm.Generated_nameValueSeparator_printValueNotParenthesized: Equatable where nameValueSeparator: Equatable, printValueNotParenthesized: Equatable {}
extension Elm.Generated_name_open_: Equatable where name: Equatable, open_: Equatable {}
extension Elm.Generated_name_parameters_typeAnnotation: Equatable where name: Equatable, parameters: Equatable, typeAnnotation: Equatable {}
extension Elm.Generated_name_startLocation_typeAnnotation: Equatable where name: Equatable, startLocation: Equatable, typeAnnotation: Equatable {}
extension Elm.Generated_name_typeAnnotation: Equatable where name: Equatable, typeAnnotation: Equatable {}
extension Elm.Generated_onlySpaces_spaceCount: Equatable where onlySpaces: Equatable, spaceCount: Equatable {}
extension Elm.Generated_portDocumentationComments_remainingComments: Equatable where portDocumentationComments: Equatable, remainingComments: Equatable {}
extension Elm.Generated_previousLineSpread_rightToLeft: Equatable where previousLineSpread: Equatable, rightToLeft: Equatable {}
extension Elm.Generated_previousRange_print: Equatable where previousRange: Equatable, print: Equatable {}
extension Elm.Generated_qualification_unqualified: Equatable where qualification: Equatable, unqualified: Equatable {}
extension Elm.Generated_rawAfterAtDocsLines_whileAtDocsLines: Equatable where rawAfterAtDocsLines: Equatable, whileAtDocsLines: Equatable {}
extension Elm.ParserAdvanced_Bag: Equatable where c: Equatable, x: Equatable {}
extension Elm.ParserAdvanced_Nestable: Equatable {}
extension Elm.ParserAdvanced_PStep: Equatable where context: Equatable, problem: Equatable, value: Equatable {}
extension Elm.ParserAdvanced_Step: Equatable where state: Equatable, a: Equatable {}
extension Elm.ParserAdvanced_Token: Equatable where x: Equatable {}
extension Elm.ParserAdvanced_Trailing: Equatable {}
extension Elm.ParserFast_Base: Equatable {}
extension Elm.ParserFast_PStep: Equatable where value: Equatable {}
extension Elm.ParserFast_Problem: Equatable {}
extension Elm.ParserFast_Step: Equatable where state: Equatable, a: Equatable {}
extension Elm.ParserLenient_Base: Equatable {}
extension Elm.ParserLenient_PStep: Equatable where value: Equatable {}
extension Elm.ParserLenient_Step: Equatable where state: Equatable, a: Equatable {}
extension Elm.Parser_Nestable: Equatable {}
extension Elm.Parser_Problem: Equatable {}
extension Elm.Parser_Step: Equatable where state: Equatable, a: Equatable {}
extension Elm.Parser_Trailing: Equatable {}
extension Elm.Print_LineSpread: Equatable {}
extension Elm.Print_Print: Equatable {}
extension Elm.Rope_RopeFilled: Equatable where a: Equatable {}
extension Elm.StructuredWriter_Writer: Equatable {}
extension Elm.Unicode_Category: Equatable {}

// using enum to create a namespace can't be instantiated
public enum Elm {

public enum Unit: Sendable, Equatable { case Unit }
public enum Tuple<first: Sendable, second: Sendable>: Sendable {
    case Tuple(first, second)
    var first: first {
        switch self {
        case let .Tuple(result, _): result
        }
    }
    var second: second {
        switch self {
        case let .Tuple(_, result): result
        }
    }
}
public enum Triple<first: Sendable, second: Sendable, third: Sendable>: Sendable {
    case Triple(first, second, third)
    var first: first {
        switch self {
        case let .Triple(result, _, _): result
        }
    }
    var second: second {
        switch self {
        case let .Triple(_, result, _): result
        }
    }
    var third: third {
        switch self {
        case let .Triple(_, _, result): result
        }
    }
}
public enum Basics_Order: Sendable, Equatable {
    case Basics_LT
    case Basics_EQ
    case Basics_GT
}

// in theory Optional.none and Optional.some exist
// and they even correctly adhere to
//     Optional<Optional<Int>>.none == Optional.some(Optional<Int>.none))
//     being false
// However, since they are
//   - both displayed as nil
//   - Optional.some(x) has the same type as x (hand-wave)
// I'm a bit worried about how shaky to use they might be though
public enum Maybe_Maybe<a: Sendable>: Sendable {
    case Maybe_Nothing
    case Maybe_Just(_ value: a)
}

// needed because
// rust Result type requires the error to be : Error
public enum Result_Result<error: Sendable, success: Sendable>: Sendable {
    case Result_Err(error)
    case Result_Ok(success)
}

// somewhat needed because
// rust array does not support pattern matching
public indirect enum List_List<a: Sendable>: Sendable {
    case List_Empty
    case List_Cons(_ head: a, _ tail: List_List<a>)
}

@Sendable public static func Debug_toString<a>(_ data: a) -> String {
    String(reflecting: data)
}

@Sendable public static func Debug_log<a>(_ tag: String, data: a) -> a {
    print(tag, data)
    return data
}

@Sendable public static func Debug_todo<a>(_ message: String) -> a {
    fatalError("TODO \(message)")
}

@Sendable public static func Basics_identity<a>(_ a: a) -> a {
    a
}

@Sendable public static func Basics_always<ignored, kept>(_ kept: kept, _: ignored) -> kept {
    kept
}
@Sendable public static func Basics_apR<a, b>(_ food: a, _ eat: (a) -> b) -> b {
    eat(food)
}
@Sendable public static func Basics_apL<a, b>(_ eat: (a) -> b, _ food: a) -> b {
    eat(food)
}
@Sendable public static func Basics_composeR<a, b, c>(
    _ earlier: @escaping @Sendable (a) -> b,
    _ later: @escaping @Sendable (b) -> c
)
    -> @Sendable (a) -> c
{
    { food in later(earlier(food)) }
}
@Sendable public static func Basics_composeL<a, b, c>(
    _ later: @escaping @Sendable (b) -> c,
    _ earlier: @escaping @Sendable (a) -> b
)
    -> @Sendable (a) -> c
{
    { food in later(earlier(food)) }
}

@Sendable public static func Basics_never<a>(_: Never) -> a {
}

@Sendable public static func Basics_not(_ bool: Bool) -> Bool {
    !bool
}

@Sendable public static func Basics_or(_ a: Bool, _ b: Bool) -> Bool {
    a || b
}

@Sendable public static func Basics_and(_ a: Bool, _ b: Bool) -> Bool {
    a && b
}

@Sendable public static func Basics_eq<a: Equatable>(_ a: a, _ b: a) -> Bool {
    a == b
}
// necessary because elm type variables do not have information about being equatable
@Sendable public static func Basics_eq<a>(_ a: a, _ b: a) -> Bool {
    if let a: any Equatable = a as? any Equatable,
        let b: any Equatable = b as? any Equatable
    {
        typeErasedEq(a, b)
    } else {
        fatalError("== on non-Equatable types")
    }
}

@Sendable public static func Basics_neq<a: Equatable>(_ a: a, _ b: a) -> Bool {
    a != b
}
// necessary because elm type variables do not have information about being equatable
@Sendable public static func Basics_neq<a>(_ a: a, _ b: a) -> Bool {
    if let a: any Equatable = a as? any Equatable,
        let b: any Equatable = b as? any Equatable
    {
        typeErasedNeq(a, b)
    } else {
        fatalError("/= on non-Equatable types")
    }
}

// https://rustunwrap.com/article/comparing-equatable-using-opened-existentials/
static func typeErasedEq<a: Equatable, b: Equatable>(_ a: a, _ b: b) -> Bool {
    if let b: a = b as? a {
        a == b
    } else {
        fatalError("/= on non-Equatable types")
    }
}
static func typeErasedNeq<a: Equatable, b: Equatable>(_ a: a, _ b: b) -> Bool {
    if let b: a = b as? a {
        a != b
    } else {
        fatalError("/= on non-Equatable types")
    }
}

@Sendable public static func Basics_lt<a: Comparable>(_ a: a, _ b: a) -> Bool {
    a < b
}

@Sendable public static func Basics_gt<a: Comparable>(_ a: a, _ b: a) -> Bool {
    a > b
}

@Sendable public static func Basics_le<a: Comparable>(_ a: a, _ b: a) -> Bool {
    a <= b
}

@Sendable public static func Basics_ge<a: Comparable>(_ a: a, _ b: a) -> Bool {
    a >= b
}

@Sendable public static func Basics_compare<a: Comparable>(_ a: a, _ b: a) -> Basics_Order {
    if a < b {
        .Basics_LT
    } else if a > b {
        .Basics_GT
    } else {
        .Basics_EQ
    }
}

public static let Basics_e: Double = exp(1.0)

@Sendable public static func Basics_clamp(_ low: Double, _ high: Double, _ number: Double)
    -> Double
{
    if number < low { low } else if number > high { high } else { number }
}

@Sendable public static func Basics_negate(_ float: Double) -> Double {
    -float
}

@Sendable public static func Basics_truncate(_ float: Double) -> Double {
    float.rounded(.towardZero)
}

@Sendable public static func Basics_round(_ float: Double) -> Double {
    float.rounded()
}

@Sendable public static func Basics_floor(_ float: Double) -> Double {
    float.rounded(.down)
}

@Sendable public static func Basics_ceiling(_ float: Double) -> Double {
    float.rounded(.up)
}

@Sendable public static func Basics_isInfinite(_ float: Double) -> Bool {
    float.isInfinite
}

@Sendable public static func Basics_isNaN(_ float: Double) -> Bool {
    float.isNaN
}

@Sendable public static func Basics_add(_ a: Double, _ b: Double) -> Double {
    a + b
}

@Sendable public static func Basics_sub(_ base: Double, _ toSubtract: Double) -> Double {
    base - toSubtract
}

@Sendable public static func Basics_mul(_ a: Double, _ b: Double) -> Double {
    a * b
}

@Sendable public static func Basics_idiv(_ toDivide: Double, _ divisor: Double) -> Double {
    (toDivide / divisor).rounded(.towardZero)
}

@Sendable public static func Basics_fdiv(_ toDivide: Double, _ divisor: Double) -> Double {
    toDivide / divisor
}

@Sendable public static func Basics_remainderBy(_ divisor: Double, _ toDivide: Double) -> Double
{
    toDivide.truncatingRemainder(dividingBy: divisor)
}

@Sendable public static func Basics_modBy(_ divisor: Double, _ toDivide: Double) -> Double {
    toDivide.remainder(dividingBy: divisor)
}

@Sendable public static func Basics_pow(_ base: Double, _ exponent: Double) -> Double {
    pow(base, exponent)
}
@Sendable public static func Basics_logBase(_ base: Double, _ float: Double) -> Double {
    log(float) / log(base)
}
@Sendable public static func Basics_degrees(_ angleInDegrees: Double) -> Double {
    (angleInDegrees * Double.pi) / 180
}
@Sendable public static func Basics_turns(_ angleInTurns: Double) -> Double {
    angleInTurns * Double.pi * 2
}
@Sendable public static func Basics_fromPolar(_ polar: Tuple<Double, Double>)
    -> Tuple<Double, Double>
{
    switch polar {
    case let .Tuple(radius, theta):
        .Tuple(radius * (cos(theta)), radius * (sin(theta)))
    }
}
@Sendable public static func Basics_toPolar(_ coordinates: Tuple<Double, Double>)
    -> Tuple<Double, Double>
{
    switch coordinates {
    case let .Tuple(x, y):
        .Tuple(sqrt((x * x) + (y * y)), atan2(y, x))
    }
}

@Sendable public static func Bitwise_complement(_ int: Double) -> Double {
    Double(~Int32(truncatingIfNeeded: Int(int)))
}
@Sendable public static func Bitwise_and(_ a: Double, _ b: Double) -> Double {
    Double(Int32(truncatingIfNeeded: Int(a)) & Int32(truncatingIfNeeded: Int(b)))
}
@Sendable public static func Bitwise_or(_ a: Double, _ b: Double) -> Double {
    Double(Int32(truncatingIfNeeded: Int(a)) | Int32(truncatingIfNeeded: Int(b)))
}
@Sendable public static func Bitwise_xor(_ a: Double, _ b: Double) -> Double {
    Double(Int32(truncatingIfNeeded: Int(a)) ^ Int32(truncatingIfNeeded: Int(b)))
}
@Sendable public static func Bitwise_shiftLeftBy(_ shifts: Double, _ float: Double) -> Double {
    Double(Int32(truncatingIfNeeded: Int(float)) << Int32(truncatingIfNeeded: Int(shifts)))
}
@Sendable public static func Bitwise_shiftRightBy(_ shifts: Double, _ float: Double) -> Double {
    Double(Int32(truncatingIfNeeded: Int(float)) >> Int32(truncatingIfNeeded: Int(shifts)))
}
@Sendable public static func Bitwise_shiftRightZfBy(_ shifts: Double, _ float: Double) -> Double
{
    Double(UInt32(truncatingIfNeeded: Int(float)) >> UInt32(truncatingIfNeeded: Int(shifts)))
}

@Sendable public static func Char_toCode(_ char: UnicodeScalar) -> Double {
    Double(char.value)
}

@Sendable public static func Char_fromCode(_ charCode: Double) -> UnicodeScalar {
    switch UnicodeScalar(Int(charCode)) {
    case .none: "\0"
    case let .some(unicodeScalar): unicodeScalar
    }
}

@Sendable public static func Char_isHexDigit(_ char: UnicodeScalar) -> Bool {
    (0x30 <= char.value && char.value <= 0x39)
        || (0x41 <= char.value && char.value <= 0x46)
        || (0x61 <= char.value && char.value <= 0x66)
}
@Sendable public static func Char_isDigit(_ char: UnicodeScalar) -> Bool {
    char.value <= 0x39 && 0x30 <= char.value
}
@Sendable public static func Char_isUpper(_ char: UnicodeScalar) -> Bool {
    char.value <= 0x5A && 0x41 <= char.value
}
@Sendable public static func Char_isLower(_ char: UnicodeScalar) -> Bool {
    0x61 <= char.value && char.value <= 0x7A
}
@Sendable public static func Char_isAlpha(_ char: UnicodeScalar) -> Bool {
    Char_isLower(char) || Char_isUpper(char)
}
@Sendable public static func Char_isAlphaNum(_ char: UnicodeScalar) -> Bool {
    Char_isAlpha(char) || Char_isDigit(char)
}

@Sendable public static func Char_toUpper(_ char: UnicodeScalar) -> UnicodeScalar {
    switch Character(char).uppercased().unicodeScalars.first {
    case .none: char
    case let .some(uppercased): uppercased
    }
}
@Sendable public static func Char_toLocaleUpper(_ char: UnicodeScalar) -> UnicodeScalar {
    // Character does not have uppercased(with: Locale)
    switch String(char).uppercased(with: Locale.current).unicodeScalars.first {
    case .none: char
    case let .some(uppercased): uppercased
    }
}

@Sendable public static func Char_toLower(_ char: UnicodeScalar) -> UnicodeScalar {
    // Character does not have lowercased(with: Locale)
    switch Character(char).lowercased().unicodeScalars.first {
    case .none: char
    case let .some(lowercased): lowercased
    }
}
@Sendable public static func Char_toLocaleLower(_ char: UnicodeScalar) -> UnicodeScalar {
    switch String(char).lowercased(with: Locale.current).unicodeScalars.first {
    case .none: char
    case let .some(lowercased): lowercased
    }
}

@Sendable public static func String_fromChar(_ char: UnicodeScalar) -> String {
    String(char)
}

@Sendable public static func String_fromInt(_ int: Double) -> String {
    String(Int64(int))
}

@Sendable public static func String_fromFloat(_ float: Double) -> String {
    String(float)
}

@Sendable public static func String_toInt(_ string: String) -> Maybe_Maybe<Double> {
    switch Int64(string) {
    case .some(let parseResult):
        .Maybe_Just(Double(parseResult))
    case .none:
        .Maybe_Nothing
    }
}

@Sendable public static func String_toFloat(_ string: String) -> Maybe_Maybe<Double> {
    Maybe_fromOptional(Double(string))
}

@Sendable public static func String_uncons(_ string: String)
    -> Maybe_Maybe<Tuple<UnicodeScalar, String>>
{
    if string.isEmpty {
        return .Maybe_Nothing
    } else {
        // is there something more performant?
        var stringMutable: String = string
        let poppedChar: Unicode.Scalar = stringMutable.unicodeScalars.removeFirst()
        return .Maybe_Just(.Tuple(poppedChar, stringMutable))
    }
}

@Sendable public static func String_toList(_ string: String) -> List_List<UnicodeScalar> {
    var chars: List_List<UnicodeScalar> = .List_Empty
    for char in string.unicodeScalars.reversed() {
        chars = .List_Cons(char, chars)
    }
    return chars
}

@Sendable public static func String_fromList(_ chars: List_List<UnicodeScalar>) -> String {
    var remainingChars: List_List<UnicodeScalar> = chars
    var stringBuffer: String = String()
    while case .List_Cons(let head, let tail) = remainingChars {
        stringBuffer.append(Character(head))
        remainingChars = tail
    }
    return stringBuffer
}

@Sendable public static func String_length(_ string: String) -> Double {
    Double(string.utf16.count)
}

@Sendable public static func String_isEmpty(_ string: String) -> Bool {
    string.isEmpty
}

@Sendable public static func String_cons(_ headChar: UnicodeScalar, _ tailString: String)
    -> String
{
    String(headChar) + tailString
}

@Sendable public static func String_append(_ earlier: String, _ later: String) -> String {
    earlier + later
}

@Sendable public static func String_contains(_ sub: String, _ string: String) -> Bool {
    string.contains(sub)
}

@Sendable public static func String_startsWith(_ start: String, _ string: String) -> Bool {
    string.hasPrefix(start)
}

@Sendable public static func String_endsWith(_ end: String, _ string: String) -> Bool {
    string.hasSuffix(end)
}

@Sendable public static func String_concat(_ segments: List_List<String>) -> String {
    var remainingSegments: List_List<String> = segments
    var stringBuffer: String = String()
    while case .List_Cons(let head, let tail) = remainingSegments {
        stringBuffer.append(contentsOf: head)
        remainingSegments = tail
    }
    return stringBuffer
}

@Sendable public static func String_join(_ inBetween: String, _ segments: List_List<String>)
    -> String
{
    switch segments {
    case .List_Empty:
        return ""
    case .List_Cons(let headSegment, let tailSegments):
        var remainingSegments = tailSegments
        var stringBuffer: String = String()
        stringBuffer.append(contentsOf: headSegment)
        while case .List_Cons(let head, let tail) = remainingSegments {
            stringBuffer.append(contentsOf: inBetween)
            stringBuffer.append(contentsOf: head)
            remainingSegments = tail
        }
        return stringBuffer
    }
}

@Sendable public static func String_reverse(_ string: String) -> String {
    String(decoding: string.utf16.reversed(), as: Unicode.UTF16.self)
}

@Sendable public static func String_dropLeft(_ countToSkip: Double, _ string: String) -> String
{
    String(decoding: string.utf16.dropFirst(Int(countToSkip)), as: Unicode.UTF16.self)
}

@Sendable public static func String_dropRight(_ countToSkip: Double, _ string: String) -> String
{
    String(decoding: string.utf16.dropLast(Int(countToSkip)), as: Unicode.UTF16.self)
}

@Sendable public static func String_left(_ countToTake: Double, _ string: String) -> String {
    String(decoding: string.utf16.prefix(Int(countToTake)), as: Unicode.UTF16.self)
}

@Sendable public static func String_right(_ countToTake: Double, _ string: String) -> String {
    String(decoding: string.utf16.suffix(Int(countToTake)), as: Unicode.UTF16.self)
}

@Sendable public static func String_padRight(
    _ desiredLength: Double, _ padChar: String, _ string: String
)
    -> String
{
    string + String(repeating: padChar, count: Int(desiredLength) - string.utf16.count)
}

@Sendable public static func String_padLeft(
    _ desiredLength: Double, _ padChar: String, _ string: String
) -> String {
    String(
        repeating: padChar,
        count: max(0, Int(desiredLength) - string.utf16.count)
    )
        + string
}

@Sendable public static func String_repeat(_ count: Double, _ segment: String) -> String {
    String(repeating: segment, count: Int(count))
}

@Sendable public static func String_replace(
    _ toReplace: String, _ replacement: String, _ string: String
)
    -> String
{
    string.replacing(toReplace, with: replacement)
}

@Sendable public static func String_toLower(_ string: String) -> String {
    string.lowercased()
}

@Sendable public static func String_toUpper(_ string: String) -> String {
    string.uppercased()
}

@Sendable public static func String_trimLeft(_ string: String) -> String {
    String(
        string.trimmingPrefix(while: { character in
            character.isWhitespace || character.isNewline
        })
    )
}

@Sendable public static func String_trimRight(_ string: String) -> String {
    let startToRestoreAfterTrimming: String.SubSequence =
        string.prefix(while: { character in
            character.isWhitespace || character.isNewline
        })
    return startToRestoreAfterTrimming
        + string.trimmingCharacters(in: .whitespacesAndNewlines)
}

@Sendable public static func String_trim(_ string: String) -> String {
    string.trimmingCharacters(in: .whitespacesAndNewlines)
}

@Sendable public static func String_map(
    _ characterChange: (UnicodeScalar) -> UnicodeScalar,
    _ string: String
)
    -> String
{
    String(String.UnicodeScalarView(string.unicodeScalars.map(characterChange)))
}

@Sendable public static func String_filter(
    _ keepCharacter: (UnicodeScalar) -> Bool,
    _ string: String
)
    -> String
{
    String(string.unicodeScalars.filter(keepCharacter))
}

@Sendable public static func String_lines(_ string: String) -> List_List<String> {
    Array_toList(string.components(separatedBy: .newlines))
}

@Sendable public static func String_split(_ separator: String, _ string: String) -> List_List<
    String
> {
    Array_mapToList(
        String.init,
        string.split(separator: separator)
    )
}

@Sendable public static func String_all(
    _ isExpected: (UnicodeScalar) -> Bool,
    _ string: String
)
    -> Bool
{
    string.unicodeScalars.allSatisfy(isExpected)
}

@Sendable public static func String_any(
    _ isOdd: (UnicodeScalar) -> Bool,
    _ string: String
)
    -> Bool
{
    string.unicodeScalars.contains(where: isOdd)
}

@Sendable public static func String_slice(
    _ startInclusivePossiblyNegativeAsDouble: Double,
    _ endExclusivePossiblyNegative: Double,
    _ string: String
)
    -> String
{
    let stringLength: Int = string.utf16.count
    let realStartIndexInclusive: Int =
        possiblyNegativeIndexForCount(
            index: Int(startInclusivePossiblyNegativeAsDouble),
            count: stringLength
        )
    let realEndIndexExclusive: Int =
        possiblyNegativeIndexForCount(
            index: Int(endExclusivePossiblyNegative),
            count: stringLength
        )
    return if realStartIndexInclusive >= realEndIndexExclusive {
        ""
    } else {
        String(
            string.unicodeScalars[
                string.utf16.index(
                    string.utf16.startIndex, offsetBy: realStartIndexInclusive
                )..<string.utf16.index(
                    string.utf16.startIndex, offsetBy: realEndIndexExclusive
                )
            ]
        )
    }
}
// For an index where -1 meaning one before the last element, 1 meaning one after the first element,
// normalize to valid index from the start
static func possiblyNegativeIndexForCount(index: Int, count: Int) -> Int {
    if index >= 0 {
        min(index, count)
    } else {
        max(count + index, 0)
    }
}

@Sendable public static func String_foldl<state>(
    _ reduce: (UnicodeScalar) -> (state) -> state,
    _ initialState: state,
    _ string: String
) -> state {
    string.unicodeScalars.reduce(
        initialState,
        { (soFar, char) in
            reduce(char)(soFar)
        }
    )
}

@Sendable public static func String_foldr<state>(
    _ reduce: (UnicodeScalar) -> (state) -> state,
    _ initialState: state,
    _ string: String
) -> state {
    string.unicodeScalars.reversed().reduce(
        initialState,
        { (soFar, char) in
            reduce(char)(soFar)
        }
    )
}

@Sendable public static func Maybe_toOptional<a>(_ optional: Maybe_Maybe<a>) -> a? {
    switch optional {
    case .Maybe_Nothing: .none
    case let .Maybe_Just(value): .some(value)
    }
}
@Sendable public static func Maybe_fromOptional<a>(_ optional: a?) -> Maybe_Maybe<a> {
    switch optional {
    case .none: .Maybe_Nothing
    case let .some(value): .Maybe_Just(value)
    }
}
@Sendable public static func Maybe_withDefault<a>(_ valueOnNothing: a, _ maybe: Maybe_Maybe<a>)
    -> a
{
    switch maybe {
    case .Maybe_Nothing: valueOnNothing
    case .Maybe_Just(let value): value
    }
}
@Sendable public static func Maybe_map<a, b>(
    _ valueChange: (a) -> b,
    _ maybe: Maybe_Maybe<a>
) -> Maybe_Maybe<b> {
    switch maybe {
    case .Maybe_Nothing: .Maybe_Nothing
    case .Maybe_Just(let value): .Maybe_Just(valueChange(value))
    }
}
@Sendable public static func Maybe_map2<a, b, combined>(
    _ valueCombine: (a) -> (b) -> combined,
    _ aMaybe: Maybe_Maybe<a>,
    _ bMaybe: Maybe_Maybe<b>
)
    -> Maybe_Maybe<combined>
{
    switch aMaybe {
    case .Maybe_Nothing: .Maybe_Nothing
    case .Maybe_Just(let aValue):
        switch bMaybe {
        case .Maybe_Nothing: .Maybe_Nothing
        case .Maybe_Just(let bValue):
            .Maybe_Just(valueCombine(aValue)(bValue))
        }
    }
}
@Sendable public static func Maybe_map3<a, b, c, combined>(
    _ valueCombine: (a) -> (b) -> (c) -> combined,
    _ aMaybe: Maybe_Maybe<a>,
    _ bMaybe: Maybe_Maybe<b>,
    _ cMaybe: Maybe_Maybe<c>
)
    -> Maybe_Maybe<combined>
{
    switch aMaybe {
    case .Maybe_Nothing: .Maybe_Nothing
    case .Maybe_Just(let aValue):
        switch bMaybe {
        case .Maybe_Nothing: .Maybe_Nothing
        case .Maybe_Just(let bValue):
            switch cMaybe {
            case .Maybe_Nothing: .Maybe_Nothing
            case .Maybe_Just(let cValue):
                .Maybe_Just(valueCombine(aValue)(bValue)(cValue))
            }
        }
    }
}
@Sendable public static func Maybe_map4<a, b, c, d, combined>(
    _ valueCombine: (a) -> (b) -> (c) -> (d) -> combined,
    _ aMaybe: Maybe_Maybe<a>,
    _ bMaybe: Maybe_Maybe<b>,
    _ cMaybe: Maybe_Maybe<c>,
    _ dMaybe: Maybe_Maybe<d>
)
    -> Maybe_Maybe<combined>
{
    switch aMaybe {
    case .Maybe_Nothing: .Maybe_Nothing
    case .Maybe_Just(let aValue):
        switch bMaybe {
        case .Maybe_Nothing: .Maybe_Nothing
        case .Maybe_Just(let bValue):
            switch cMaybe {
            case .Maybe_Nothing: .Maybe_Nothing
            case .Maybe_Just(let cValue):
                switch dMaybe {
                case .Maybe_Nothing: .Maybe_Nothing
                case .Maybe_Just(let dValue):
                    .Maybe_Just(valueCombine(aValue)(bValue)(cValue)(dValue))
                }
            }
        }
    }
}
@Sendable public static func Maybe_map5<a, b, c, d, e, combined>(
    _ valueCombine: (a) -> (b) -> (c) -> (d) -> (e) -> combined,
    _ aMaybe: Maybe_Maybe<a>,
    _ bMaybe: Maybe_Maybe<b>,
    _ cMaybe: Maybe_Maybe<c>,
    _ dMaybe: Maybe_Maybe<d>,
    _ eMaybe: Maybe_Maybe<e>
)
    -> Maybe_Maybe<combined>
{
    switch aMaybe {
    case .Maybe_Nothing: .Maybe_Nothing
    case .Maybe_Just(let aValue):
        switch bMaybe {
        case .Maybe_Nothing: .Maybe_Nothing
        case .Maybe_Just(let bValue):
            switch cMaybe {
            case .Maybe_Nothing: .Maybe_Nothing
            case .Maybe_Just(let cValue):
                switch dMaybe {
                case .Maybe_Nothing: .Maybe_Nothing
                case .Maybe_Just(let dValue):
                    switch eMaybe {
                    case .Maybe_Nothing: .Maybe_Nothing
                    case .Maybe_Just(let eValue):
                        .Maybe_Just(
                            valueCombine(aValue)(bValue)(cValue)(dValue)(eValue)
                        )
                    }
                }
            }
        }
    }
}

@Sendable public static func Maybe_andThen<a, b>(
    _ valueToMaybe: (a) -> Maybe_Maybe<b>,
    _ maybe: Maybe_Maybe<a>
)
    -> Maybe_Maybe<b>
{
    switch maybe {
    case .Maybe_Nothing: .Maybe_Nothing
    case .Maybe_Just(let value): valueToMaybe(value)
    }
}

@Sendable public static func Result_fromMaybe<a, x>(
    _ errorOnNothing: x,
    _ maybe: Maybe_Maybe<a>
)
    -> Result_Result<x, a>
{
    switch maybe {
    case let .Maybe_Just(value): .Result_Ok(value)
    case .Maybe_Nothing: .Result_Err(errorOnNothing)
    }
}

@Sendable public static func Result_toMaybe<a, x>(_ result: Result_Result<x, a>) -> Maybe_Maybe<
    a
> {
    switch result {
    case let .Result_Ok(value): .Maybe_Just(value)
    case .Result_Err(_): .Maybe_Nothing
    }
}

@Sendable public static func Result_withDefault<a, x>(
    _ valueOnError: a,
    _ result: Result_Result<x, a>
) -> a {
    switch result {
    case let .Result_Ok(value): value
    case .Result_Err(_): valueOnError
    }
}

@Sendable public static func Result_mapError<a, x, y>(
    _ errorChange: (x) -> y,
    _ result: Result_Result<x, a>
)
    -> Result_Result<y, a>
{
    switch result {
    case let .Result_Ok(value): .Result_Ok(value)
    case let .Result_Err(error): .Result_Err(errorChange(error))
    }
}

@Sendable public static func Result_andThen<a, b, x>(
    _ onOk: (a) -> Result_Result<x, b>,
    _ result: Result_Result<x, a>
) -> Result_Result<x, b> {
    switch result {
    case let .Result_Ok(value): onOk(value)
    case let .Result_Err(error): .Result_Err(error)
    }
}

@Sendable public static func Result_map<a, b, x>(
    _ valueChange: (a) -> b,
    _ result: Result_Result<x, a>
)
    -> Result_Result<x, b>
{
    switch result {
    case let .Result_Err(error): .Result_Err(error)
    case let .Result_Ok(value):
        .Result_Ok(valueChange(value))
    }
}

@Sendable public static func Result_map2<a, b, combined, x>(
    _ combine: (a) -> (b) -> combined,
    _ aResult: Result_Result<x, a>,
    _ bResult: Result_Result<x, b>
) -> Result_Result<x, combined> {
    switch aResult {
    case let .Result_Err(x): .Result_Err(x)
    case let .Result_Ok(a):
        switch bResult {
        case let .Result_Err(x): .Result_Err(x)
        case let .Result_Ok(b):
            .Result_Ok(combine(a)(b))
        }
    }
}

@Sendable public static func Result_map3<a, b, c, combined, x>(
    _ combine: (a) -> (b) -> (c) -> combined,
    _ aResult: Result_Result<x, a>,
    _ bResult: Result_Result<x, b>,
    _ cResult: Result_Result<x, c>
) -> Result_Result<x, combined> {
    switch aResult {
    case let .Result_Err(x): .Result_Err(x)
    case let .Result_Ok(a):
        switch bResult {
        case let .Result_Err(x): .Result_Err(x)
        case let .Result_Ok(b):
            switch cResult {
            case let .Result_Err(x): .Result_Err(x)
            case let .Result_Ok(c):
                .Result_Ok(combine(a)(b)(c))
            }
        }
    }
}

@Sendable public static func Result_map4<a, b, c, d, combined, x>(
    _ combine: (a) -> (b) -> (c) -> (d) -> combined,
    _ aResult: Result_Result<x, a>,
    _ bResult: Result_Result<x, b>,
    _ cResult: Result_Result<x, c>,
    _ dResult: Result_Result<x, d>
) -> Result_Result<x, combined> {
    switch aResult {
    case let .Result_Err(x): .Result_Err(x)
    case let .Result_Ok(a):
        switch bResult {
        case let .Result_Err(x): .Result_Err(x)
        case let .Result_Ok(b):
            switch cResult {
            case let .Result_Err(x): .Result_Err(x)
            case let .Result_Ok(c):
                switch dResult {
                case let .Result_Err(x): .Result_Err(x)
                case let .Result_Ok(d):
                    .Result_Ok(combine(a)(b)(c)(d))

                }
            }

        }
    }
}

@Sendable public static func Result_map5<a, b, c, d, e, combined, x>(
    _ combine: (a) -> (b) -> (c) -> (d) -> (e) -> combined,
    _ aResult: Result_Result<x, a>,
    _ bResult: Result_Result<x, b>,
    _ cResult: Result_Result<x, c>,
    _ dResult: Result_Result<x, d>,
    _ eResult: Result_Result<x, e>
) -> Result_Result<x, combined> {
    switch aResult {
    case let .Result_Err(x): .Result_Err(x)
    case let .Result_Ok(a):
        switch bResult {
        case let .Result_Err(x): .Result_Err(x)
        case let .Result_Ok(b):
            switch cResult {
            case let .Result_Err(x): .Result_Err(x)
            case let .Result_Ok(c):
                switch dResult {
                case let .Result_Err(x): .Result_Err(x)
                case let .Result_Ok(d):
                    switch eResult {
                    case let .Result_Err(x): .Result_Err(x)
                    case let .Result_Ok(e):
                        .Result_Ok(combine(a)(b)(c)(d)(e))
                    }
                }
            }
        }

    }
}
static func Result_map6<a, b, c, d, e, f, combined, x>(
    _ combine: (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> combined,
    _ aResult: Result_Result<x, a>,
    _ bResult: Result_Result<x, b>,
    _ cResult: Result_Result<x, c>,
    _ dResult: Result_Result<x, d>,
    _ eResult: Result_Result<x, e>,
    _ fResult: Result_Result<x, f>
) -> Result_Result<x, combined> {
    switch aResult {
    case let .Result_Err(x): .Result_Err(x)
    case let .Result_Ok(a):
        switch bResult {
        case let .Result_Err(x): .Result_Err(x)
        case let .Result_Ok(b):
            switch cResult {
            case let .Result_Err(x): .Result_Err(x)
            case let .Result_Ok(c):
                switch dResult {
                case let .Result_Err(x): .Result_Err(x)
                case let .Result_Ok(d):
                    switch eResult {
                    case let .Result_Err(x): .Result_Err(x)
                    case let .Result_Ok(e):
                        switch fResult {
                        case let .Result_Err(x): .Result_Err(x)
                        case let .Result_Ok(f):
                            .Result_Ok(combine(a)(b)(c)(d)(e)(f))
                        }
                    }
                }
            }
        }
    }
}
static func Result_map7<a, b, c, d, e, f, g, combined, x>(
    _ combine: (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> (g) -> combined,
    _ aResult: Result_Result<x, a>,
    _ bResult: Result_Result<x, b>,
    _ cResult: Result_Result<x, c>,
    _ dResult: Result_Result<x, d>,
    _ eResult: Result_Result<x, e>,
    _ fResult: Result_Result<x, f>,
    _ gResult: Result_Result<x, g>
) -> Result_Result<x, combined> {
    switch aResult {
    case let .Result_Err(x): .Result_Err(x)
    case let .Result_Ok(a):
        switch bResult {
        case let .Result_Err(x): .Result_Err(x)
        case let .Result_Ok(b):
            switch cResult {
            case let .Result_Err(x): .Result_Err(x)
            case let .Result_Ok(c):
                switch dResult {
                case let .Result_Err(x): .Result_Err(x)
                case let .Result_Ok(d):
                    switch eResult {
                    case let .Result_Err(x): .Result_Err(x)
                    case let .Result_Ok(e):
                        switch fResult {
                        case let .Result_Err(x): .Result_Err(x)
                        case let .Result_Ok(f):
                            switch gResult {
                            case let .Result_Err(x): .Result_Err(x)
                            case let .Result_Ok(g):
                                .Result_Ok(combine(a)(b)(c)(d)(e)(f)(g))
                            }
                        }
                    }
                }
            }
        }
    }
}
static func Result_map8<a, b, c, d, e, f, g, h, combined, x>(
    _ combine: (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> (g) -> (h) -> combined,
    _ aResult: Result_Result<x, a>,
    _ bResult: Result_Result<x, b>,
    _ cResult: Result_Result<x, c>,
    _ dResult: Result_Result<x, d>,
    _ eResult: Result_Result<x, e>,
    _ fResult: Result_Result<x, f>,
    _ gResult: Result_Result<x, g>,
    _ hResult: Result_Result<x, h>
) -> Result_Result<x, combined> {
    switch aResult {
    case let .Result_Err(x): .Result_Err(x)
    case let .Result_Ok(a):
        switch bResult {
        case let .Result_Err(x): .Result_Err(x)
        case let .Result_Ok(b):
            switch cResult {
            case let .Result_Err(x): .Result_Err(x)
            case let .Result_Ok(c):
                switch dResult {
                case let .Result_Err(x): .Result_Err(x)
                case let .Result_Ok(d):
                    switch eResult {
                    case let .Result_Err(x): .Result_Err(x)
                    case let .Result_Ok(e):
                        switch fResult {
                        case let .Result_Err(x): .Result_Err(x)
                        case let .Result_Ok(f):
                            switch gResult {
                            case let .Result_Err(x): .Result_Err(x)
                            case let .Result_Ok(g):
                                switch hResult {
                                case let .Result_Err(x): .Result_Err(x)
                                case let .Result_Ok(h):
                                    .Result_Ok(combine(a)(b)(c)(d)(e)(f)(g)(h))
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

static func Array_mapToList<a, b>(_ elementChange: (a) -> b, _ array: [a])
    -> List_List<b>
{
    var soFar: List_List<b> = .List_Empty
    for element in array.reversed() {
        soFar = .List_Cons(elementChange(element), soFar)
    }
    return soFar
}

static func arrayReversedToList<a>(_ array: [a]) -> List_List<a> {
    var soFar: List_List<a> = .List_Empty
    for element in array {
        soFar = .List_Cons(element, soFar)
    }
    return soFar
}
@Sendable public static func Array_toList<a>(_ array: [a]) -> List_List<a> {
    var soFar: List_List<a> = .List_Empty
    for element in array.reversed() {
        soFar = .List_Cons(element, soFar)
    }
    return soFar
}
@Sendable public static func Array_toIndexedList<a>(_ array: [a]) -> List_List<Tuple<Double, a>>
{
    var soFar: List_List<Tuple<Double, a>> = .List_Empty
    var index: Int = array.count - 1
    for element in array.reversed() {
        soFar = .List_Cons(.Tuple(Double(index), element), soFar)
        index = index - 1
    }
    return soFar
}

static func Array_mapFromList<a, b>(_ elementChange: (a) -> b, _ fullList: List_List<a>)
    -> [b]
{
    var soFar: [b] = []
    var remainingList: List_List<a> = fullList
    while case let .List_Cons(remainingHead, remainingTail) = remainingList {
        soFar.append(elementChange(remainingHead))
        remainingList = remainingTail
    }
    return soFar
}

@Sendable public static func Array_fromList<a>(_ fullList: List_List<a>) -> [a] {
    var soFar: [a] = []
    var remainingList: List_List<a> = fullList
    while case let .List_Cons(remainingHead, remainingTail) = remainingList {
        soFar.append(remainingHead)
        remainingList = remainingTail
    }
    return soFar
}

@Sendable public static func Array_isEmpty<a>(_ array: [a]) -> Bool {
    array.isEmpty
}
@Sendable public static func Array_length<a>(_ array: [a]) -> Double {
    Double(array.count)
}
@Sendable public static func Array_get<a>(_ indexAsDouble: Double, _ array: [a])
    -> Maybe_Maybe<a>
{
    let index: Int = Int(indexAsDouble)
    return if (index >= 0) && (index < array.count) {
        .Maybe_Just(array[index])
    } else {
        .Maybe_Nothing
    }
}
@Sendable public static func Array_empty<a>() -> [a] {
    []
}
@Sendable public static func Array_repeat<a>(
    _ finalLengthAsDouble: Double,
    _ elementToRepeat: a
) -> [a] {
    let finalLength: Int = Int(finalLengthAsDouble)
    return if finalLength <= 0 {
        []
    } else {
        Array(repeating: elementToRepeat, count: finalLength)
    }
}
@Sendable public static func Array_initialize<a>(
    _ finalLengthAsDouble: Double,
    _ indexToElement: (Double) -> a
) -> [a] {
    let finalLength: Int = Int(finalLengthAsDouble)
    if finalLength <= 0 {
        return []
    } else {
        // can't do ↓ because indexToElement would be escaping
        // Array((0..<finalLength).lazy.map({ index in indexToElement(Double(index)) }))
        var resultArray: [a] = Array(repeating: indexToElement(0.0), count: finalLength)
        for index in 1..<finalLength {
            resultArray[index] = indexToElement(Double(index))
        }
        return resultArray
    }
}
@Sendable public static func Array_push<a>(_ newElement: a, _ array: [a]) -> [a] {
    var arrayMutable = array
    arrayMutable.append(newElement)
    return arrayMutable
}
@Sendable public static func Array_set<a>(
    _ indexAsDouble: Double,
    _ newElement: a,
    _ array: [a]
) -> [a] {
    let index: Int = Int(indexAsDouble)
    if (index >= 0) && (index < array.count) {
        var arrayMutable: [a] = array
        arrayMutable[index] = newElement
        return arrayMutable
    } else {
        return []
    }
}
@Sendable public static func Array_reverse<a>(_ array: [a]) -> [a] {
    array.reversed()
}
@Sendable public static func Array_filter<a>(_ keepElement: (a) -> Bool, _ array: [a]) -> [a] {
    array.filter(keepElement)
}
@Sendable public static func Array_map<a, b>(_ elementChange: (a) -> b, _ array: [a]) -> [b] {
    array.map(elementChange)
}
@Sendable public static func Array_indexedMap<a, b>(
    _ indexAndElementToNew: (Double) -> (a) -> b,
    _ array: [a]
) -> [b] {
    array.enumerated()
        .map({ (index, element) in
            indexAndElementToNew(Double(index))(element)
        })
}
@Sendable public static func Array_slice<a>(
    _ startInclusivePossiblyNegativeAsDouble: Double,
    _ endExclusivePossiblyNegative: Double,
    _ array: [a]
) -> [a] {
    let realStartIndexInclusive: Int =
        possiblyNegativeIndexForCount(
            index: Int(startInclusivePossiblyNegativeAsDouble),
            count: array.count
        )
    let realEndIndexExclusive: Int =
        possiblyNegativeIndexForCount(
            index: Int(endExclusivePossiblyNegative),
            count: array.count
        )
    return if realStartIndexInclusive >= realEndIndexExclusive {
        []
    } else {
        Array(array[realStartIndexInclusive..<realEndIndexExclusive])
    }
}

@Sendable public static func Array_append<a>(_ left: [a], _ right: [a]) -> [a] {
    left + right
}

@Sendable public static func Array_foldl<a, state>(
    _ reduce: (a) -> (state) -> state,
    _ initialState: state,
    _ array: [a]
) -> state {
    array.reduce(
        initialState,
        { soFar, element in
            reduce(element)(soFar)
        }
    )
}
static func Array_foldr<a, state>(
    _ reduce: (a, state) -> state,
    _ initialState: state,
    _ array: [a]
) -> state {
    var currentState: state = initialState
    for indexFromTheEnd in array.indices {
        currentState = reduce(array[array.count - 1 - indexFromTheEnd], currentState)
    }
    return currentState
}
@Sendable public static func Array_foldr<a, state>(
    _ reduce: (a) -> (state) -> state,
    _ initialState: state,
    _ array: [a]
) -> state {
    var currentState: state = initialState
    for indexFromTheEnd in array.indices {
        currentState = reduce(array[array.count - 1 - indexFromTheEnd])(currentState)
    }
    return currentState
}

@Sendable public static func List_singleton<a>(_ onlyElement: a) -> List_List<a> {
    .List_Cons(onlyElement, .List_Empty)
}

@Sendable public static func List_cons<a>(_ newHead: a, _ tail: List_List<a>) -> List_List<a> {
    .List_Cons(newHead, tail)
}

@Sendable public static func List_isEmpty<a>(_ list: List_List<a>) -> Bool {
    switch list {
    case .List_Empty: true
    case .List_Cons(_, _): false
    }
}

@Sendable public static func List_head<a>(_ list: List_List<a>) -> Maybe_Maybe<a> {
    switch list {
    case .List_Empty: .Maybe_Nothing
    case let .List_Cons(head, _): .Maybe_Just(head)
    }
}
@Sendable public static func List_tail<a>(_ list: List_List<a>) -> Maybe_Maybe<List_List<a>> {
    switch list {
    case .List_Empty: .Maybe_Nothing
    case let .List_Cons(_, tail): .Maybe_Just(tail)
    }
}

@Sendable public static func List_length<a>(_ list: List_List<a>) -> Double {
    var lengthSoFar: Int = 0
    var remainingList: List_List<a> = list
    while case let .List_Cons(_, tail) = remainingList {
        remainingList = tail
        lengthSoFar = lengthSoFar + 1
    }
    return Double(lengthSoFar)
}

private static func List_foldl<a, state>(
    _ reduce: (a, state) -> state,
    _ initialState: state,
    _ list: List_List<a>
) -> state {
    var currentState: state = initialState
    var remainingList: List_List<a> = list
    while case let .List_Cons(head, tail) = remainingList {
        remainingList = tail
        currentState = reduce(head, currentState)
    }
    return currentState
}
@Sendable public static func List_foldl<a, state>(
    _ reduce: (a) -> (state) -> state,
    _ initialState: state,
    _ list: List_List<a>
) -> state {
    var currentState: state = initialState
    var remainingList: List_List<a> = list
    while case let .List_Cons(head, tail) = remainingList {
        remainingList = tail
        currentState = reduce(head)(currentState)
    }
    return currentState
}

private static func List_foldr<a, state>(
    _ reduce: (a, state) -> state,
    _ initialState: state,
    _ list: List_List<a>
) -> state {
    Array_foldr(reduce, initialState, Array_fromList(list))
}
@Sendable public static func List_foldr<a, state>(
    _ reduce: (a) -> (state) -> state,
    _ initialState: state,
    _ list: List_List<a>
) -> state {
    Array_foldr(reduce, initialState, Array_fromList(list))
}

@Sendable public static func List_reverse<a>(_ list: List_List<a>) -> List_List<a> {
    List_foldl(List_List.List_Cons, .List_Empty, list)
}

@Sendable public static func List_all<a>(_ isExpected: (a) -> Bool, _ list: List_List<a>)
    -> Bool
{
    var remainingList = list
    while case let .List_Cons(head, tail) = remainingList {
        if !isExpected(head) {
            return false
        }
        remainingList = tail
    }
    return true
}

@Sendable public static func List_any<a>(_ isOdd: (a) -> Bool, _ list: List_List<a>) -> Bool {
    var remainingList: List_List<a> = list
    while case let .List_Cons(head, tail) = remainingList {
        if isOdd(head) {
            return true
        }
        remainingList = tail
    }
    return false
}

// necessary because elm type variables do not have information about being equatable
@Sendable public static func List_member<a: Equatable>(_ needle: (a), _ list: List_List<a>)
    -> Bool
{
    List_any({ element in Basics_eq(element, needle) }, list)
}
@Sendable public static func List_member<a>(_ needle: (a), _ list: List_List<a>) -> Bool {
    List_any({ element in Basics_eq(element, needle) }, list)
}

@Sendable public static func List_drop<a>(_ countToSkip: Double, _ list: List_List<a>)
    -> List_List<a>
{
    var remainingCountToSkip: Int = Int(countToSkip)
    var remainingList: List_List<a> = list
    while remainingCountToSkip >= 1 {
        switch remainingList {
        case .List_Empty:
            return remainingList
        case let .List_Cons(_, tail):
            remainingList = tail
            remainingCountToSkip = remainingCountToSkip - 1
        }
    }
    return remainingList
}

@Sendable public static func List_take<a>(_ countToTake: Double, _ list: List_List<a>)
    -> List_List<a>
{
    var remainingCountToTake: Int = Int(countToTake)
    var remainingList: List_List<a> = list
    var takenElementsArraySoFar: [a] = []
    while remainingCountToTake >= 1 {
        switch remainingList {
        case .List_Empty:
            return Array_toList(takenElementsArraySoFar)
        case let .List_Cons(head, tail):
            takenElementsArraySoFar.append(head)
            remainingList = tail
            remainingCountToTake = remainingCountToTake - 1
        }
    }
    return Array_toList(takenElementsArraySoFar)
}

@Sendable public static func List_intersperse<a>(
    _ inBetween: a,
    _ list: List_List<a>
) -> List_List<a> {
    switch list {
    case .List_Empty:
        return .List_Empty
    case let .List_Cons(head, tail):
        var remainingList: List_List<a> = tail
        var interspersedSoFar: [a] = [head]
        while case let .List_Cons(next, afterNext) = remainingList {
            remainingList = afterNext
            interspersedSoFar.append(inBetween)
            interspersedSoFar.append(next)
        }
        return Array_toList(interspersedSoFar)
    }
}

@Sendable public static func List_map<a, b>(_ elementChange: (a) -> b, _ list: List_List<a>)
    -> List_List<b>
{
    var remainingList: List_List<a> = list
    var mappedSoFar: [b] = []
    while case let .List_Cons(head, tail) = remainingList {
        remainingList = tail
        mappedSoFar.append(elementChange(head))
    }
    return Array_toList(mappedSoFar)
}

@Sendable public static func List_indexedMap<a, b>(
    _ indexedElementChange: (Double) -> (a) -> b,
    _ list: List_List<a>
) -> List_List<b> {
    var changedElementsSoFar: [b] = []
    var indexSoFar: Int = 0
    var remainingList: List_List<a> = list
    while case let .List_Cons(head, tail) = remainingList {
        remainingList = tail
        changedElementsSoFar.append(indexedElementChange(Double(indexSoFar))(head))
        indexSoFar = indexSoFar + 1
    }
    return Array_toList(changedElementsSoFar)
}

@Sendable public static func List_map2<a, b, c>(
    _ combineAb: (a) -> (b) -> c,
    _ aList: List_List<a>,
    _ bList: List_List<b>
) -> List_List<c> {
    var remainingAList: List_List<a> = aList
    var remainingBList: List_List<b> = bList
    var combinedArraySoFar: [c] = []
    while case let (
        a: .List_Cons(aHead, aTail),
        b: .List_Cons(bHead, bTail)
    ) = (remainingAList, remainingBList) {
        remainingAList = aTail
        remainingBList = bTail
        combinedArraySoFar.append(combineAb(aHead)(bHead))
    }
    return Array_toList(combinedArraySoFar)
}
@Sendable public static func List_map3<a, b, c, combined>(
    _ combine: (a) -> (b) -> (c) -> combined,
    _ aList: List_List<a>,
    _ bList: List_List<b>,
    _ cList: List_List<c>
) -> List_List<combined> {
    var remainingAList: List_List<a> = aList
    var remainingBList: List_List<b> = bList
    var remainingCList: List_List<c> = cList
    var combinedArraySoFar: [combined] = []
    while case let (
        .List_Cons(aHead, aTail),
        .List_Cons(bHead, bTail),
        .List_Cons(cHead, cTail)
    ) = (remainingAList, remainingBList, remainingCList) {
        remainingAList = aTail
        remainingBList = bTail
        remainingCList = cTail
        combinedArraySoFar.append(combine(aHead)(bHead)(cHead))
    }
    return Array_toList(combinedArraySoFar)
}
@Sendable public static func List_map4<a, b, c, d, combined>(
    _ combine: (a) -> (b) -> (c) -> (d) -> combined,
    _ aList: List_List<a>,
    _ bList: List_List<b>,
    _ cList: List_List<c>,
    _ dList: List_List<d>
) -> List_List<combined> {
    var remainingAList: List_List<a> = aList
    var remainingBList: List_List<b> = bList
    var remainingCList: List_List<c> = cList
    var remainingDList: List_List<d> = dList
    var combinedArraySoFar: [combined] = []
    while case let (
        .List_Cons(aHead, aTail),
        .List_Cons(bHead, bTail),
        .List_Cons(cHead, cTail),
        .List_Cons(dHead, dTail)
    ) = (remainingAList, remainingBList, remainingCList, remainingDList) {
        remainingAList = aTail
        remainingBList = bTail
        remainingCList = cTail
        remainingDList = dTail
        combinedArraySoFar.append(combine(aHead)(bHead)(cHead)(dHead))
    }
    return Array_toList(combinedArraySoFar)
}
@Sendable public static func List_map5<a, b, c, d, e, combined>(
    _ combine: (a) -> (b) -> (c) -> (d) -> (e) -> combined,
    _ aList: List_List<a>,
    _ bList: List_List<b>,
    _ cList: List_List<c>,
    _ dList: List_List<d>,
    _ eList: List_List<e>
) -> List_List<combined> {
    var remainingAList: List_List<a> = aList
    var remainingBList: List_List<b> = bList
    var remainingCList: List_List<c> = cList
    var remainingDList: List_List<d> = dList
    var remainingEList: List_List<e> = eList
    var combinedArraySoFar: [combined] = []
    while case let (
        .List_Cons(aHead, aTail),
        .List_Cons(bHead, bTail),
        .List_Cons(cHead, cTail),
        .List_Cons(dHead, dTail),
        .List_Cons(eHead, eTail)
    ) = (
        remainingAList, remainingBList, remainingCList, remainingDList,
        remainingEList
    ) {
        remainingAList = aTail
        remainingBList = bTail
        remainingCList = cTail
        remainingDList = dTail
        remainingEList = eTail
        combinedArraySoFar.append(
            combine(aHead)(bHead)(cHead)(dHead)(eHead))
    }
    return Array_toList(combinedArraySoFar)
}

@Sendable public static func List_zip<a, b>(_ aList: List_List<a>, _ bList: List_List<b>)
    -> List_List<Tuple<a, b>>
{
    List_map2({ a in { b in .Tuple(a, b) } }, aList, bList)
}

@Sendable public static func List_unzip<a, b>(_ abList: List_List<Tuple<a, b>>)
    -> Tuple<List_List<a>, List_List<b>>
{
    var firstsSoFar: List_List<a> = .List_Empty
    var secondsSoFar: List_List<b> = .List_Empty
    for tuple in Array_fromList(abList).reversed() {
        firstsSoFar = .List_Cons(tuple.first, firstsSoFar)
        secondsSoFar = .List_Cons(tuple.second, secondsSoFar)
    }
    return .Tuple(firstsSoFar, secondsSoFar)
}

@Sendable public static func List_filter<a>(
    _ keepElement: (a) -> Bool,
    _ list: List_List<a>
)
    -> List_List<a>
{
    var remainingList: List_List<a> = list
    var filteredSoFar: [a] = []
    var allElementsKeptSoFar: Bool = true
    while case let .List_Cons(head, tail) = remainingList {
        remainingList = tail
        if keepElement(head) {
            filteredSoFar.append(head)
        } else {
            allElementsKeptSoFar = false
        }
    }
    return if allElementsKeptSoFar {
        list
    } else {
        Array_toList(filteredSoFar)
    }
}

@Sendable public static func List_filterMap<a, b>(
    _ elementToMaybe: (a) -> Maybe_Maybe<b>,
    _ list: List_List<a>
) -> List_List<b> {
    var remainingList: List_List<a> = list
    var filterMappedSoFar: [b] = []
    while case let .List_Cons(head, tail) = remainingList {
        remainingList = tail
        if case let .Maybe_Just(headValue) = elementToMaybe(head) {
            filterMappedSoFar.append(headValue)
        }
    }
    return Array_toList(filterMappedSoFar)
}

@Sendable public static func List_append<a>(
    _ earlier: List_List<a>,
    _ later: List_List<a>
) -> List_List<a> {
    // can be optimized
    List_foldr(
        { (earlierElement, soFar) in
            .List_Cons(earlierElement, soFar)
        },
        later,
        earlier
    )
}

@Sendable public static func List_concatMap<a, b>(
    _ elementToList: (a) -> List_List<b>,
    _ list: List_List<a>
) -> List_List<b> {
    // can be optimized
    List_foldr(
        { (element, soFar) in
            List_append(elementToList(element), soFar)
        },
        .List_Empty,
        list
    )
}

@Sendable public static func List_concat<a>(_ list: List_List<List_List<a>>) -> List_List<a> {
    // can be optimized
    List_foldr(
        { (element, soFar) in
            List_append(element, soFar)
        },
        .List_Empty,
        list
    )
}

@Sendable public static func List_repeat<a>(_ count: Double, _ element: a) -> List_List<a> {
    if count <= 0 {
        return .List_Empty
    } else {
        var soFar: List_List<a> = List_List<a>.List_Empty
        for _ in 1...Int(count) {
            soFar = .List_Cons(element, soFar)
        }
        return soFar
    }
}

@Sendable public static func List_range(_ start: Double, _ end: Double) -> List_List<Double> {
    if start > end {
        return .List_Empty
    } else {
        var soFar: List_List<Double> = .List_Empty
        for i in stride(from: Int(end), through: Int(start), by: -1) {
            soFar = .List_Cons(Double(i), soFar)
        }
        return soFar
    }
}
@Sendable public static func List_sum(_ list: List_List<Double>) -> Double {
    var sumSoFar: Double = 0.0
    var remainingList: List_List<Double> = list
    while case let .List_Cons(head, tail) = remainingList {
        sumSoFar = sumSoFar + head
        remainingList = tail
    }
    return sumSoFar
}
@Sendable public static func List_product(_ list: List_List<Double>) -> Double {
    var productSoFar: Double = 1.0
    var remainingList: List_List<Double> = list
    while case let .List_Cons(head, tail) = remainingList {
        productSoFar = productSoFar * head
        remainingList = tail
    }
    return productSoFar
}

@Sendable public static func List_maximum<a: Comparable>(_ list: List_List<a>) -> Maybe_Maybe<a>
{
    switch list {
    case .List_Empty:
        .Maybe_Nothing
    case let .List_Cons(head, tail):
        .Maybe_Just(List_foldl(max, head, tail))
    }
}

@Sendable public static func List_minimum<a: Comparable>(_ list: List_List<a>) -> Maybe_Maybe<a>
{
    switch list {
    case .List_Empty:
        .Maybe_Nothing
    case let .List_Cons(head, tail):
        .Maybe_Just(List_foldl(min, head, tail))
    }
}

@Sendable public static func List_sortWith<a>(
    _ elementCompare: (a) -> (a) -> Basics_Order,
    _ list: List_List<a>
) -> List_List<a> {
    var asArray: [a] = Array_fromList(list)
    asArray.sort(by: { (a, b) in elementCompare(a)(b) == .Basics_LT })
    return Array_toList(asArray)
}

@Sendable public static func List_sortBy<element, comparable: Comparable>(
    _ elementToComparable: (element) -> comparable,
    _ list: List_List<element>
) -> List_List<element> {
    var asArray: [element] = Array_fromList(list)
    asArray.sort(by: { (a, b) in elementToComparable(a) < elementToComparable(b) })
    return Array_toList(asArray)
}

@Sendable public static func List_sort<comparable: Comparable>(_ list: List_List<comparable>)
    -> List_List<comparable>
{
    var asArray: [comparable] = Array_fromList(list)
    asArray.sort(by: { (a, b) in a < b })  // mutate
    return Array_toList(asArray)
}

@Sendable public static func Set_size<a>(_ set: Set<a>) -> Double {
    Double(set.count)
}
@Sendable public static func Set_empty<a>() -> Set<a> {
    Set()
}
@Sendable public static func Set_singleton<a>(_ onlyElement: a) -> Set<a> {
    [onlyElement]
}
@Sendable public static func Set_fromList<a>(_ list: List_List<a>) -> Set<a> {
    var set: Set<a> = Set()
    var remainingList: List_List<a> = list
    while case let .List_Cons(element, afterElement) = remainingList {
        remainingList = afterElement
        set.insert(element)
    }
    return set
}
@Sendable public static func Set_toList<a: Comparable>(_ set: Set<a>) -> List_List<a> {
    return Array_toList(set.sorted())
}
@Sendable public static func Set_isEmpty<a>(_ set: Set<a>) -> Bool {
    set.isEmpty
}
@Sendable public static func Set_member<a>(_ needle: a, _ set: Set<a>) -> Bool {
    set.contains(needle)
}
@Sendable public static func Set_insert<a>(_ newElement: a, _ set: Set<a>) -> Set<a> {
    var setMutable: Set<a> = set
    setMutable.insert(newElement)
    return setMutable
}
@Sendable public static func Set_remove<a>(_ badApple: a, _ set: Set<a>) -> Set<a> {
    var setMutable: Set<a> = set
    setMutable.remove(badApple)
    return setMutable
}
@Sendable public static func Set_diff<a>(_ baseSet: Set<a>, _ badApples: Set<a>) -> Set<a> {
    var setMutable: Set<a> = baseSet
    setMutable.subtract(badApples)
    return setMutable
}
@Sendable public static func Set_intersect<a>(_ aSet: Set<a>, _ bSet: Set<a>) -> Set<a> {
    aSet.intersection(bSet)
}
@Sendable public static func Set_union<a>(_ aSet: Set<a>, _ bSet: Set<a>) -> Set<a> {
    aSet.union(bSet)
}
@Sendable public static func Set_map<a, b>(
    _ elementChange: (a) -> b,
    _ set: Set<a>
) -> Set<b> {
    Set(set.map(elementChange))
}
@Sendable public static func Set_filter<a>(_ keepElement: (a) -> Bool, set: Set<a>) -> Set<a> {
    set.filter(keepElement)
}
@Sendable public static func Set_partition<a>(_ isLeft: (a) -> Bool, _ set: Set<a>)
    -> Tuple<Set<a>, Set<a>>
{
    var left: Set<a> = Set()
    left.reserveCapacity(set.count)
    var right: Set<a> = Set()
    right.reserveCapacity(set.count)
    for element in set {
        if isLeft(element) {
            left.insert(element)
        } else {
            right.insert(element)
        }
    }
    return .Tuple(left, right)
}
@Sendable public static func Set_foldl<a: Comparable, state>(
    _ reduce: (a) -> (state) -> state,
    _ initialState: state,
    _ set: Set<a>
) -> (state) {
    set.sorted().reduce(
        initialState,
        { soFar, element in reduce(element)(soFar) }
    )
}
@Sendable public static func Set_foldr<a: Comparable, state>(
    _ reduce: (a) -> (state) -> state,
    _ initialState: state,
    _ set: Set<a>
) -> (state) {
    set
        // notice that we sort by > instead of < !
        .sorted(by: { a, b in a > b })
        .reduce(
            initialState,
            { soFar, element in reduce(element)(soFar) }
        )
}

@Sendable public static func Dict_size<key, value>(_ dictionary: [key: value]) -> Double {
    Double(dictionary.count)
}
@Sendable public static func Dict_empty<key, value>() -> [key: value] {
    Dictionary()
}
@Sendable public static func Dict_singleton<key, value>(_ key: key, _ value: value)
    -> [key: value]
{
    [key: value]
}
@Sendable public static func Dict_fromList<key, value>(_ list: List_List<Tuple<key, value>>)
    -> [key: value]
{
    var dictionary: [key: value] = Dictionary()
    var remainingList: List_List<Tuple<key, value>> = list
    while case let .List_Cons(.Tuple(key, value), afterElement) = remainingList {
        dictionary[key] = value
        remainingList = afterElement
    }
    return dictionary
}
@Sendable public static func Dict_toList<key: Comparable, value>(_ dictionary: [key: value])
    -> List_List<Tuple<key, value>>
{
    Array_mapToList(
        { entry in .Tuple(entry.key, entry.value) },
        dictionary.sorted(by: { a, b in a.key < b.key })
    )
}
@Sendable public static func Dict_keys<key: Comparable, value>(_ dictionary: [key: value])
    -> List_List<key>
{
    return Array_toList(dictionary.keys.sorted())
}
@Sendable public static func Dict_values<key: Comparable, value>(_ dictionary: [key: value])
    -> List_List<value>
{
    Array_mapToList(
        { entry in entry.value },
        dictionary
            .sorted(by: { a, b in a.key < b.key })
    )
}
@Sendable public static func Dict_isEmpty<key, value>(_ dictionary: [key: value]) -> Bool {
    dictionary.isEmpty
}
@Sendable public static func Dict_member<key, value>(_ needle: key, _ dictionary: [key: value])
    -> Bool
{
    switch dictionary[needle] {
    case .none: false
    case .some(_): true
    }
}
@Sendable public static func Dict_get<key, value>(_ key: key, _ dictionary: [key: value])
    -> Maybe_Maybe<value>
{
    Maybe_fromOptional(dictionary[key])
}
@Sendable public static func Dict_insert<key, value>(
    _ key: key,
    _ value: value,
    _ dictionary: [key: value]
) -> [key: value] {
    var dictionaryMutable: [key: value] = dictionary
    dictionaryMutable[key] = value
    return dictionaryMutable
}
@Sendable public static func Dict_update<key, value>(
    _ key: key,
    _ maybeValueToMaybeValue: (Maybe_Maybe<value>) -> Maybe_Maybe<value>,
    _ dictionary: [key: value]
) -> [key: value] {
    var dictionaryMutable: [key: value] = dictionary
    dictionaryMutable[key] = Maybe_toOptional(
        maybeValueToMaybeValue(
            Maybe_fromOptional(dictionaryMutable[key])
        )
    )
    return dictionaryMutable
}
@Sendable public static func Dict_remove<key, value>(
    _ badApple: key,
    _ dictionary: [key: value]
) -> [key: value] {
    var dictionaryMutable: [key: value] = dictionary
    dictionaryMutable.removeValue(forKey: badApple)
    return dictionaryMutable
}
@Sendable public static func Dict_diff<key, a, b>(
    _ baseDictionary: [key: a],
    _ badApples: [key: b]
) -> [key: a] {
    baseDictionary.filter({ key, _ in
        switch badApples[key] {
        case .none: true
        case .some(_): false
        }
    })
}
@Sendable public static func Dict_intersect<key, value>(
    _ aDictionary: [key: value],
    _ bDictionary: [key: value]
) -> [key: value] {
    aDictionary.filter({ aKey, aValue in
        switch bDictionary[aKey] {
        case .none: false
        case .some(_): true
        }
    })
}
@Sendable public static func Dict_union<key, value>(
    _ aDictionary: [key: value],
    _ bDictionary: [key: value]
) -> [key: value] {
    var aDictionaryMutable: [key: value] = aDictionary
    aDictionaryMutable.merge(bDictionary, uniquingKeysWith: { aValue, _ in aValue })
    return aDictionaryMutable
}
@Sendable public static func Dict_merge<key: Comparable, a, b, state>(
    _ onlyA: (key) -> (a) -> (state) -> state,
    _ bothAB: (key) -> (a) -> (b) -> (state) -> state,
    _ onlyB: (key) -> (b) -> (state) -> state,
    _ aDictionary: [key: a],
    _ bDictionary: [key: b],
    _ initialState: state
)
    -> state
{
    var combinedKeyArray: [key] = []
    combinedKeyArray.reserveCapacity(aDictionary.count + bDictionary.count)
    for aKey in aDictionary.keys {
        combinedKeyArray.append(aKey)
    }
    for bKey in bDictionary.keys {
        combinedKeyArray.append(bKey)
    }
    combinedKeyArray.sort()
    var currentState: state = initialState
    var previousKey: key? = .none
    for key in combinedKeyArray {
        if key == previousKey {
            // skip key that was added from both dictionaries
            // next key is guaranteed to be different so let's make the comparison easy
            previousKey = .none
        } else {
            previousKey = key
            switch (aDictionary[key], bDictionary[key]) {
            case let (.some(a), .some(b)):
                currentState = bothAB(key)(a)(b)(currentState)
            case let (.some(a), .none):
                currentState = onlyA(key)(a)(currentState)
            case let (.none, .some(b)):
                currentState = onlyB(key)(b)(currentState)
            case (.none, .none): break
            }
        }
    }
    return currentState
}
@Sendable public static func Dict_map<key, a, b>(
    _ entryToNewValue: (key) -> (a) -> b,
    _ dictionary: [key: a]
) -> [key: b] {
    Dictionary(
        uniqueKeysWithValues:
            dictionary.map({ key, value in
                (key, entryToNewValue(key)(value))
            })
    )
}
@Sendable public static func Dict_filter<key, value>(
    _ keepElement: (key) -> (value) -> Bool,
    _ dictionary: [key: value]
) -> [key: value] {
    dictionary.filter(
        { key, value in keepElement(key)(value) }
    )
}
@Sendable public static func Dict_partition<key, value>(
    _ isLeft: (key) -> (value) -> Bool,
    _ dictionary: [key: value]
)
    -> Tuple<[key: value], [key: value]>
{
    var left: [key: value] = Dictionary()
    left.reserveCapacity(dictionary.capacity)
    var right: [key: value] = Dictionary()
    right.reserveCapacity(dictionary.capacity)
    for (key, value) in dictionary {
        if isLeft(key)(value) {
            left[key] = value
        } else {
            right[key] = value
        }
    }
    return .Tuple(left, right)
}
@Sendable public static func Dict_foldl<key: Comparable, value, state>(
    _ reduce: (key) -> (value) -> (state) -> state,
    _ initialState: state,
    _ dictionary: [key: value]
) -> state {
    dictionary
        .sorted(by: { a, b in a.key < b.key })
        .reduce(
            initialState,
            { soFar, entry in reduce(entry.key)(entry.value)(soFar) }
        )
}
@Sendable public static func Dict_foldr<key: Comparable, value, state>(
    _ reduce: (key) -> (value) -> (state) -> state,
    _ initialState: state,
    _ dictionary: [key: value]
) -> state {
    dictionary
        // notice that we sort by > instead of < !
        .sorted(by: { a, b in a.key > b.key })
        .reduce(
            initialState,
            { soFar, entry in reduce(entry.key)(entry.value)(soFar) }
        )
}

// not alias for Regex<Substring> because Regex is not Sendable
// when constructing, always validate with .regex
public enum Regex_Regex: Sendable, Equatable {
    case Regex_Regex(patternString: String, ignoresCase: Bool, anchorsMatchLineEndings: Bool)

    public var regex: Regex<AnyRegexOutput>? {
        switch self {
        case let .Regex_Regex(
            patternString: patternString,
            ignoresCase: ignoresCase,
            anchorsMatchLineEndings: anchorsMatchLineEndings
        ):
            do {
                let patternRegex: Regex<AnyRegexOutput> = try Regex(patternString)
                return .some(
                    patternRegex
                        .ignoresCase(ignoresCase)
                        .anchorsMatchLineEndings(anchorsMatchLineEndings)
                )
            } catch {
                return .none
            }
        }
    }
}

public enum Generated_caseInsensitive_multiline<caseInsensitive: Sendable, multiline: Sendable>:
    Sendable
{
    case Record(caseInsensitive: caseInsensitive, multiline: multiline)
    var caseInsensitive: caseInsensitive {
        switch self {
        case let .Record(result, _): result
        }
    }
    var multiline: multiline {
        switch self {
        case let .Record(_, result): result
        }
    }
}
public typealias Regex_Options =
    Generated_caseInsensitive_multiline<Bool, Bool>

public enum Generated_index_match_number_submatches<
    index: Sendable, match: Sendable, number: Sendable, submatches: Sendable
>: Sendable {
    case Record(index: index, match: match, number: number, submatches: submatches)
    var index: index {
        switch self {
        case let .Record(result, _, _, _): result
        }
    }
    var match: match {
        switch self {
        case let .Record(_, result, _, _): result
        }
    }
    var number: number {
        switch self {
        case let .Record(_, _, result, _): result
        }
    }
    var submatches: submatches {
        switch self {
        case let .Record(_, _, _, result): result
        }
    }
}
public typealias Regex_Match =
    Generated_index_match_number_submatches<
        Double,
        String,
        Double,
        List_List<(Maybe_Maybe<String>)>
    >

public static let Regex_never: Regex_Regex = .Regex_Regex(
    patternString: "/.^/",
    ignoresCase: false,
    anchorsMatchLineEndings: false
)
@Sendable public static func Regex_fromString(_ string: String) -> Maybe_Maybe<Regex_Regex> {
    Regex_fromStringWith(.Record(caseInsensitive: false, multiline: false), string)
}
@Sendable public static func Regex_fromStringWith(_ options: Regex_Options, _ string: String)
    -> Maybe_Maybe<Regex_Regex>
{
    let regexInfo: Regex_Regex = .Regex_Regex(
        patternString: string,
        ignoresCase: options.caseInsensitive,
        anchorsMatchLineEndings: options.multiline
    )
    return switch regexInfo.regex {
    case .some(_): .Maybe_Just(regexInfo)
    case .none: .Maybe_Nothing
    }
}
@Sendable public static func Regex_contains(_ regex: Regex_Regex, _ string: String) -> Bool {
    switch regex.regex {
    case let .some(rustRegex):
        string.contains(rustRegex)
    case .none:
        false
    }
}

static func toRegexMatch(
    _ match: Regex<AnyRegexOutput>.Match,
    matchIndex1Based: Int,
    in string: String
)
    -> Regex_Match
{
    .Record(
        index: Double(match.range.lowerBound.utf16Offset(in: string)),
        match: String(match.0),
        number: Double(matchIndex1Based),
        submatches: Array_mapToList(
            { submatch in
                switch submatch.substring {
                case .none: .Maybe_Nothing
                case let .some(submatchSubstring):
                    .Maybe_Just(String(submatchSubstring))
                }
            },
            Array(match.output)
        )
    )
}
@Sendable public static func Regex_replace(
    _ regexInfo: Regex_Regex,
    _ matchToReplacementString: (Regex_Match) -> String,
    _ string: String
) -> String {
    switch regexInfo.regex {
    case .none: return string
    case let .some(regex):
        // we rely on the fact that String.replacing
        // looks for matches from the start to the end in order
        var matchIndex1Based: Int = 1
        return string.replacing(
            regex,
            with: { (match: Regex<AnyRegexOutput>.Match) -> String in
                let matchToReplace: Regex_Match =
                    toRegexMatch(
                        match,
                        matchIndex1Based: matchIndex1Based,
                        in: string
                    )
                matchIndex1Based = matchIndex1Based + 1
                return matchToReplacementString(matchToReplace)
            }
        )
    }
}
@Sendable public static func Regex_replaceAtMost(
    _ maxOccurrences: Double,
    _ regexInfo: Regex_Regex,
    _ matchToReplacementString: (Regex_Match) -> String,
    _ string: String
) -> String {
    switch regexInfo.regex {
    case .none: return string
    case let .some(regex):
        // we rely on the fact that String.replacing
        // looks for matches from the start to the end in order
        var matchIndex1Based = 1
        return string.replacing(
            regex,
            maxReplacements: Int(maxOccurrences),
            with: { (match: Regex<AnyRegexOutput>.Match) -> String in
                let matchToReplace: Regex_Match =
                    toRegexMatch(
                        match,
                        matchIndex1Based: matchIndex1Based,
                        in: string
                    )
                matchIndex1Based = matchIndex1Based + 1
                return matchToReplacementString(matchToReplace)
            }
        )
    }
}
@Sendable public static func Regex_find(_ regexInfo: Regex_Regex, _ string: String)
    -> List_List<Regex_Match>
{
    switch regexInfo.regex {
    case .none: .List_Empty
    case let .some(regex):
        Array_toList(
            string.matches(of: regex).enumerated()
                .map({ (matchIndex0Based, match: Regex.Match) in
                    toRegexMatch(
                        match,
                        matchIndex1Based: 1 + matchIndex0Based,
                        in: string
                    )
                })
        )
    }
}
@Sendable public static func Regex_findAtMost(
    _ maxOccurrences: Double,
    _ regexInfo: Regex_Regex,
    _ string: String
)
    -> List_List<Regex_Match>
{
    switch regexInfo.regex {
    case .none: .List_Empty
    case let .some(regex):
        Array_toList(
            // can be optimized by only matching up until that point
            string.matches(of: regex)
                .prefix(Int(maxOccurrences)).enumerated()
                .map({ (matchIndex0Based: Int, match: Regex.Match) in
                    toRegexMatch(
                        match,
                        matchIndex1Based: 1 + matchIndex0Based,
                        in: string
                    )
                })
        )
    }
}
@Sendable public static func Regex_split(_ regexInfo: Regex_Regex, _ string: String)
    -> List_List<String>
{
    switch regexInfo.regex {
    case .none: List_singleton(string)
    case let .some(regex):
        Array_mapToList(
            String.init,
            string.split(separator: regex)
        )
    }
}

@Sendable public static func Regex_splitAtMost(
    _ maxSplitCount: Double,
    _ regexInfo: Regex_Regex,
    _ string: String
) -> List_List<String> {
    switch regexInfo.regex {
    case .none: List_singleton(string)
    case let .some(regex):
        Array_mapToList(
            String.init,
            string.split(
                separator: regex,
                maxSplits: Int(maxSplitCount)
            )
        )
    }
}

public enum Time_Posix: Sendable, Equatable, Hashable {
    case Time_Posix(Int64)
}

public enum Generated_offset_start<offset: Sendable, start: Sendable>: Sendable {
    case Record(offset: offset, start: start)
    var offset: offset {
        switch self {
        case let .Record(result, _): result
        }
    }
    var start: start {
        switch self {
        case let .Record(_, result): result
        }
    }
}
public typealias Time_Era =
    Generated_offset_start<Int64, Int64>

public enum Time_Zone: Sendable, Equatable {
    case Time_Zone(Int64, [Time_Era])
}

public enum Time_Weekday: Sendable, Equatable {
    case Time_Mon
    case Time_Tue
    case Time_Wed
    case Time_Thu
    case Time_Fri
    case Time_Sat
    case Time_Sun
}

public enum Time_Month: Sendable, Equatable {
    case Time_Jan
    case Time_Feb
    case Time_Mar
    case Time_Apr
    case Time_May
    case Time_Jun
    case Time_Jul
    case Time_Aug
    case Time_Sep
    case Time_Oct
    case Time_Nov
    case Time_Dec
}

public enum Time_ZoneName: Sendable, Equatable {
    case Time_Name(String)
    case Time_Offset(Double)
}
static func Time_posixToMillisInt(_ timePosix: Time_Posix) -> Int64 {
    switch timePosix {
    case let .Time_Posix(millis): millis
    }
}
@Sendable public static func Time_posixToMillis(_ timePosix: Time_Posix) -> Double {
    Double(Time_posixToMillisInt(timePosix))
}
@Sendable public static func Time_millisToPosix(_ millis: Double) -> Time_Posix {
    .Time_Posix(Int64(millis))
}

public static let Time_utc: Time_Zone = .Time_Zone(0, [])

@Sendable public static func Time_customZone(
    _ n: Double,
    _ eras: List_List<Generated_offset_start<Double, Double>>
)
    -> Time_Zone
{
    .Time_Zone(
        Int64(n),
        Array_mapFromList(
            { era in
                .Record(offset: Int64(era.offset), start: Int64(era.start))
            },
            eras
        )
    )
}

static func Time_toAdjustedMinutesHelp(
    _ defaultOffset: Int64,
    _ posixMinutes: Int64,
    _ eras: [Time_Era]
)
    -> Int64
{
    for era in eras {
        if era.start < posixMinutes {
            return posixMinutes + Int64(era.offset)
        } else {
            // continue
        }
    }
    return posixMinutes + Int64(defaultOffset)
}

static func Time_toAdjustedMinutes(_ timeZone: Time_Zone, _ time: Time_Posix) -> Int64 {
    switch timeZone {
    case let .Time_Zone(defaultOffset, eras):
        Time_toAdjustedMinutesHelp(
            defaultOffset,
            (Time_posixToMillisInt(time) / 60000),
            eras
        )
    }
}

static let minutesPerDay: Int64 = 60 * 24
static func Time_toCivil(_ minutes: Int64) -> (
    day: Int64,
    month: Int64,
    year: Int64
) {
    let rawDay: Int64 = (minutes / minutesPerDay) + 719468
    let era: Int64 = if rawDay >= 0 { rawDay / 146097 } else { (rawDay - 146096) / 146097 }
    let dayOfEra: Int64 = rawDay - era * 146097  // [0, 146096]

    let yearOfEra: Int64 =
        (dayOfEra - dayOfEra / 1460 + dayOfEra / 36524 - dayOfEra / 146096)
        / 365  // [0, 399]

    let year: Int64 = yearOfEra + era * 400

    let dayOfYear: Int64 =
        dayOfEra - (365 * yearOfEra + yearOfEra / 4 - yearOfEra / 100)  // [0, 365]

    let mp: Int64 = (5 * dayOfYear + 2) / 153  // [0, 11]
    let month: Int64 = if mp < 10 { mp + 3 } else { mp - 9 }  // [1, 12]

    let resultYear: Int64 = if month <= 2 { year + 1 } else { year }

    return (
        day: dayOfYear - (153 * mp + 2) / 5 + 1,  // [1, 31]
        month: month,
        year: resultYear,
    )
}

@Sendable public static func Time_toYear(_ zone: Time_Zone, _ time: Time_Posix) -> Double {
    Double((Time_toCivil(Time_toAdjustedMinutes(zone, time))).year)
}

@Sendable public static func Time_toMonth(_ zone: Time_Zone, _ time: Time_Posix) -> Time_Month {
    switch (Time_toCivil(Time_toAdjustedMinutes(zone, time))).month {
    case 1: .Time_Jan
    case 2: .Time_Feb
    case 3: .Time_Mar
    case 4: .Time_Apr
    case 5: .Time_May
    case 6: .Time_Jun
    case 7: .Time_Jul
    case 8: .Time_Aug
    case 9: .Time_Sep
    case 10: .Time_Oct
    case 11: .Time_Nov
    case _: .Time_Dec
    }
}

@Sendable public static func Time_toDay(_ zone: Time_Zone, _ time: Time_Posix) -> Double {
    Double((Time_toCivil(Time_toAdjustedMinutes(zone, time))).day)
}

@Sendable public static func Time_toWeekday(_ zone: Time_Zone, _ time: Time_Posix)
    -> Time_Weekday
{
    switch (Time_toAdjustedMinutes(zone, time) / minutesPerDay) % 7 {
    case 0: .Time_Thu
    case 1: .Time_Fri
    case 2: .Time_Sat
    case 3: .Time_Sun
    case 4: .Time_Mon
    case 5: .Time_Tue
    case _: .Time_Wed
    }
}

@Sendable public static func Time_toHour(_ zone: Time_Zone, _ time: Time_Posix) -> Double {
    Double((Time_toAdjustedMinutes(zone, time) / 60) % 24)
}

@Sendable public static func Time_toMinute(_ zone: Time_Zone, _ time: Time_Posix) -> Double {
    Double(Time_toAdjustedMinutes(zone, time) % 60)
}

@Sendable public static func Time_toSecond(_ zone: Time_Zone, _ time: Time_Posix) -> Double {
    Double((Time_posixToMillisInt(time) / 1000) % 60)
}

@Sendable public static func Time_toMillis(_ zone: Time_Zone, _ time: Time_Posix) -> Double {
    Double(Time_posixToMillisInt(time) % 1000)
}

public typealias Bytes_Bytes = [UInt8]

public enum Bytes_Endianness: Sendable, Equatable {
    case Bytes_LE
    case Bytes_BE
}

@Sendable public static func Bytes_width(_ bytes: Bytes_Bytes) -> Double {
    Double(bytes.count)
}

public enum BytesEncode_Encoder: Sendable, Equatable {
    case BytesEncode_I8(Int8)
    case BytesEncode_I16(Bytes_Endianness, Int16)
    case BytesEncode_I32(Bytes_Endianness, Int32)
    case BytesEncode_U8(UInt8)
    case BytesEncode_U16(Bytes_Endianness, UInt16)
    case BytesEncode_U32(Bytes_Endianness, UInt32)
    case BytesEncode_F32(Bytes_Endianness, Float32)
    case BytesEncode_F64(Bytes_Endianness, Float64)
    case BytesEncode_Seq([BytesEncode_Encoder])
    case BytesEncode_Utf8(String)
    case BytesEncode_Bytes(Bytes_Bytes)
}
@Sendable public static func BytesEncode_EncoderByteCount(_ encoder: BytesEncode_Encoder) -> Int
{
    var combinedByteCount: Int = 0
    var encodersRemainingUnordered: [BytesEncode_Encoder] = [encoder]
    while !encodersRemainingUnordered.isEmpty {
        switch encodersRemainingUnordered.popLast() {
        // should have been caught by while condition
        case .none:
            return combinedByteCount
        case let .some(nextEncoder):
            switch nextEncoder {
            case .BytesEncode_I8(_):
                combinedByteCount = combinedByteCount + 1
            case .BytesEncode_I16(_, _):
                combinedByteCount = combinedByteCount + 2
            case .BytesEncode_I32(_, _):
                combinedByteCount = combinedByteCount + 4
            case .BytesEncode_U8(_):
                combinedByteCount = combinedByteCount + 1
            case .BytesEncode_U16(_, _):
                combinedByteCount = combinedByteCount + 2
            case .BytesEncode_U32(_, _):
                combinedByteCount = combinedByteCount + 4
            case .BytesEncode_F32(_, _):
                combinedByteCount = combinedByteCount + 4
            case .BytesEncode_F64(_, _):
                combinedByteCount = combinedByteCount + 8
            case let .BytesEncode_Seq(encoders):
                encodersRemainingUnordered.append(contentsOf: encoders)
            case let .BytesEncode_Utf8(string):
                combinedByteCount =
                    combinedByteCount + string.lengthOfBytes(using: String.Encoding.utf8)
            case let .BytesEncode_Bytes(bytes):
                combinedByteCount = combinedByteCount + bytes.count
            }
        }
    }
    return combinedByteCount
}
@Sendable public static func BytesEncode_getStringWidth(_ string: String) -> Double {
    Double(string.lengthOfBytes(using: String.Encoding.utf8))
}
@Sendable public static func BytesEncode_signedInt8(_ value: Double)
    -> BytesEncode_Encoder
{
    .BytesEncode_I8(Int8(truncatingIfNeeded: Int(value)))
}
@Sendable public static func BytesEncode_signedInt16(
    _ endianness: Bytes_Endianness,
    _ value: Double
)
    -> BytesEncode_Encoder
{
    .BytesEncode_I16(endianness, Int16(truncatingIfNeeded: Int(value)))
}
@Sendable public static func BytesEncode_signedInt32(
    _ endianness: Bytes_Endianness,
    _ value: Double
)
    -> BytesEncode_Encoder
{
    .BytesEncode_I32(endianness, Int32(truncatingIfNeeded: Int(value)))
}
@Sendable public static func BytesEncode_unsignedInt8(_ value: Double)
    -> BytesEncode_Encoder
{
    .BytesEncode_U8(UInt8(value))
}
@Sendable public static func BytesEncode_unsignedInt16(
    _ endianness: Bytes_Endianness,
    _ value: Double
)
    -> BytesEncode_Encoder
{
    .BytesEncode_U16(endianness, UInt16(truncatingIfNeeded: Int(value)))
}
@Sendable public static func BytesEncode_unsignedInt32(
    _ endianness: Bytes_Endianness,
    _ value: Double
)
    -> BytesEncode_Encoder
{
    .BytesEncode_U32(endianness, UInt32(truncatingIfNeeded: Int(value)))
}
@Sendable public static func BytesEncode_float32(
    _ endianness: Bytes_Endianness,
    _ value: Double
)
    -> BytesEncode_Encoder
{
    .BytesEncode_F32(endianness, Float32(value))
}
@Sendable public static func BytesEncode_float64(
    _ endianness: Bytes_Endianness,
    _ value: Double
)
    -> BytesEncode_Encoder
{
    .BytesEncode_F64(endianness, value)
}
@Sendable public static func BytesEncode_bytes(
    _ endianness: Bytes_Endianness,
    _ value: Bytes_Bytes
)
    -> BytesEncode_Encoder
{
    .BytesEncode_Bytes(value)
}
@Sendable public static func BytesEncode_string(_ value: String)
    -> BytesEncode_Encoder
{
    .BytesEncode_Utf8(value)
}
@Sendable public static func BytesEncode_sequence(
    _ encodersInSequence: List_List<BytesEncode_Encoder>
)
    -> BytesEncode_Encoder
{
    .BytesEncode_Seq(Array_fromList(encodersInSequence))
}

static func toBytes<a>(_ value: a) -> Bytes_Bytes {
    withUnsafeBytes(of: value, Array.init)
}
@Sendable public static func BytesEncode_encode(_ encoder: BytesEncode_Encoder) -> Bytes_Bytes {
    var bytesBuffer: Bytes_Bytes = []
    bytesBuffer.reserveCapacity(BytesEncode_EncoderByteCount(encoder))
    var encodersRemainingStack: [BytesEncode_Encoder] = [encoder]
    while !encodersRemainingStack.isEmpty {
        switch encodersRemainingStack.popLast() {
        // should have been caught by while condition
        case .none:
            return bytesBuffer
        case let .some(nextEncoder):
            switch nextEncoder {
            case let .BytesEncode_I8(i8):
                bytesBuffer.append(contentsOf: toBytes(i8))
            case let .BytesEncode_I16(endianness, i16):
                switch endianness {
                case .Bytes_BE:
                    bytesBuffer.append(contentsOf: toBytes(i16.bigEndian))
                case .Bytes_LE:
                    bytesBuffer.append(contentsOf: toBytes(i16.littleEndian))
                }
            case let .BytesEncode_I32(endianness, i32):
                switch endianness {
                case .Bytes_BE:
                    bytesBuffer.append(contentsOf: toBytes(i32.bigEndian))
                case .Bytes_LE:
                    bytesBuffer.append(contentsOf: toBytes(i32.littleEndian))
                }
            case let .BytesEncode_U8(u8):
                bytesBuffer.append(u8)
            case let .BytesEncode_U16(endianness, u16):
                switch endianness {
                case .Bytes_BE:
                    bytesBuffer.append(contentsOf: toBytes(u16.bigEndian))
                case .Bytes_LE:
                    bytesBuffer.append(contentsOf: toBytes(u16.littleEndian))
                }
            case let .BytesEncode_U32(endianness, u32):
                switch endianness {
                case .Bytes_BE:
                    bytesBuffer.append(contentsOf: toBytes(u32.bigEndian))
                case .Bytes_LE:
                    bytesBuffer.append(contentsOf: toBytes(u32.littleEndian))
                }
            case let .BytesEncode_F32(endianness, f32):
                switch endianness {
                case .Bytes_BE:
                    bytesBuffer.append(contentsOf: toBytes(f32.bitPattern.bigEndian))
                case .Bytes_LE:
                    bytesBuffer.append(contentsOf: toBytes(f32.bitPattern.littleEndian))
                }
            case let .BytesEncode_F64(endianness, f64):
                switch endianness {
                case .Bytes_BE:
                    bytesBuffer.append(contentsOf: toBytes(f64.bitPattern.bigEndian))
                case .Bytes_LE:
                    bytesBuffer.append(contentsOf: toBytes(f64.bitPattern.littleEndian))
                }
            case let .BytesEncode_Seq(encodersToAppend):
                encodersRemainingStack.append(contentsOf: encodersToAppend.reversed())
            case let .BytesEncode_Utf8(utf8String):
                bytesBuffer.append(contentsOf: Array(Data(utf8String.utf8)))
            case let .BytesEncode_Bytes(bytes):
                bytesBuffer.append(contentsOf: bytes)
            }
        }
    }
    return bytesBuffer
}

public struct BytesDecode_Decoder<value: Sendable>: Sendable {
    let decode:
        @Sendable (_ index: Int, _ bytes: Bytes_Bytes)
            -> (index: Int, value: value)?
}
public enum BytesDecode_Step<state: Sendable, a: Sendable>: Sendable {
    case BytesDecode_Loop(state)
    case BytesDecode_Done(a)
}

@Sendable public static func BytesDecode_decode<value>(
    _ decoder: BytesDecode_Decoder<value>,
    _ bytes: Bytes_Bytes
)
    -> Maybe_Maybe<value>
{
    switch decoder.decode(0, bytes) {
    case .none: .Maybe_Nothing
    case let .some(finalState):
        .Maybe_Just(finalState.value)
    }
}
@Sendable public static func BytesDecode_succeed<value>(_ value: value)
    -> BytesDecode_Decoder<value>
{
    BytesDecode_Decoder(decode: { startIndex, _ in
        (startIndex, value)
    })
}
@Sendable public static func BytesDecode_fail<value>()
    -> BytesDecode_Decoder<value>
{
    BytesDecode_Decoder(decode: { _, _ in .none })
}
@Sendable public static func BytesDecode_andThen<a, b>(
    _ valueToFollowupDecoder: @escaping @Sendable (a) -> BytesDecode_Decoder<b>,
    _ decoder: BytesDecode_Decoder<a>
)
    -> BytesDecode_Decoder<b>
{
    BytesDecode_Decoder(decode: { startIndex, bytes in
        decoder.decode(startIndex, bytes)
            .flatMap({ endIndex, value in
                valueToFollowupDecoder(value).decode(endIndex, bytes)
            })
    })
}
@Sendable public static func BytesDecode_map<a, b>(
    _ valueChange: @escaping @Sendable (a) -> b,
    _ decoder: BytesDecode_Decoder<a>
)
    -> BytesDecode_Decoder<b>
{
    BytesDecode_Decoder(decode: { startIndex, bytes in
        decoder.decode(startIndex, bytes)
            .map({ endIndex, value in (endIndex, valueChange(value)) })
    })
}
@Sendable public static func BytesDecode_map2<a, b, combined>(
    _ valueCombine: @escaping @Sendable (a) -> (b) -> combined,
    _ aDecoder: BytesDecode_Decoder<a>,
    _ bDecoder: BytesDecode_Decoder<b>
)
    -> BytesDecode_Decoder<combined>
{
    BytesDecode_Decoder(decode: { startIndex, bytes in
        aDecoder.decode(startIndex, bytes)
            .flatMap({ indexAfterA, a in
                bDecoder.decode(indexAfterA, bytes)
                    .map({ indexAfterB, b in
                        (indexAfterB, valueCombine(a)(b))
                    })
            })
    })
}
@Sendable public static func BytesDecode_map3<a, b, c, combined>(
    _ valueCombine: @escaping @Sendable (a) -> (b) -> (c) -> combined,
    _ aDecoder: BytesDecode_Decoder<a>,
    _ bDecoder: BytesDecode_Decoder<b>,
    _ cDecoder: BytesDecode_Decoder<c>
)
    -> BytesDecode_Decoder<combined>
{
    BytesDecode_Decoder(decode: { startIndex, bytes in
        aDecoder.decode(startIndex, bytes)
            .flatMap({ indexAfterA, a in
                bDecoder.decode(indexAfterA, bytes)
                    .flatMap({ indexAfterB, b in
                        cDecoder.decode(indexAfterB, bytes)
                            .map({ indexAfterC, c in
                                (indexAfterC, valueCombine(a)(b)(c))
                            })
                    })
            })
    })
}
@Sendable public static func BytesDecode_map4<a, b, c, d, combined>(
    _ valueCombine: @escaping @Sendable (a) -> (b) -> (c) -> (d) -> combined,
    _ aDecoder: BytesDecode_Decoder<a>,
    _ bDecoder: BytesDecode_Decoder<b>,
    _ cDecoder: BytesDecode_Decoder<c>,
    _ dDecoder: BytesDecode_Decoder<d>
)
    -> BytesDecode_Decoder<combined>
{
    BytesDecode_Decoder(decode: { startIndex, bytes in
        aDecoder.decode(startIndex, bytes)
            .flatMap({ indexAfterA, a in
                bDecoder.decode(indexAfterA, bytes)
                    .flatMap({ indexAfterB, b in
                        cDecoder.decode(indexAfterB, bytes)
                            .flatMap({ indexAfterC, c in
                                dDecoder.decode(indexAfterC, bytes)
                                    .map({ indexAfterD, d in
                                        (indexAfterD, valueCombine(a)(b)(c)(d))
                                    })
                            })
                    })
            })
    })
}
@Sendable public static func BytesDecode_map5<a, b, c, d, e, combined>(
    _ valueCombine: @escaping @Sendable (a) -> (b) -> (c) -> (d) -> (e) -> combined,
    _ aDecoder: BytesDecode_Decoder<a>,
    _ bDecoder: BytesDecode_Decoder<b>,
    _ cDecoder: BytesDecode_Decoder<c>,
    _ dDecoder: BytesDecode_Decoder<d>,
    _ eDecoder: BytesDecode_Decoder<e>
)
    -> BytesDecode_Decoder<combined>
{
    BytesDecode_Decoder(decode: { startIndex, bytes in
        aDecoder.decode(startIndex, bytes)
            .flatMap({ indexAfterA, a in
                bDecoder.decode(indexAfterA, bytes)
                    .flatMap({ indexAfterB, b in
                        cDecoder.decode(indexAfterB, bytes)
                            .flatMap({ indexAfterC, c in
                                dDecoder.decode(indexAfterC, bytes)
                                    .flatMap({ indexAfterD, d in
                                        eDecoder.decode(indexAfterD, bytes)
                                            .map({ indexAfterE, e in
                                                (indexAfterE, valueCombine(a)(b)(c)(d)(e))
                                            })
                                    })
                            })
                    })
            })
    })
}
@Sendable public static func BytesDecode_loop<state, a>(
    _ initialState: state,
    _ step: @escaping @Sendable (state) -> BytesDecode_Decoder<BytesDecode_Step<state, a>>
)
    -> BytesDecode_Decoder<a>
{
    BytesDecode_Decoder(decode: { startIndex, bytes in
        BytesDecode_loopFunction(initialState, step, startIndex: startIndex, bytes: bytes)
    })
}
@Sendable public static func BytesDecode_loopFunction<state, a>(
    _ initialState: state,
    _ step: @escaping @Sendable (state) -> BytesDecode_Decoder<BytesDecode_Step<state, a>>,
    startIndex: Int,
    bytes: Bytes_Bytes
)
    -> (index: Int, value: a)?
{
    switch step(initialState).decode(startIndex, bytes) {
    case .none: .none
    case let .some((index: indexAfterStep, value: stepValue)):
        switch stepValue {
        case let .BytesDecode_Done(result):
            .some((index: indexAfterStep, value: result))
        case let .BytesDecode_Loop(newState):
            BytesDecode_loopFunction(newState, step, startIndex: indexAfterStep, bytes: bytes)
        }
    }
}

@Sendable public static func BytesDecode_signedInt8(_ endianness: Bytes_Endianness)
    -> BytesDecode_Decoder<Double>
{
    BytesDecode_Decoder(decode: { index, bytes in
        let indexAfter: Int = index + 1
        return if indexAfter > bytes.count {
            .none
        } else {
            .some((index: indexAfter, value: Double(Int8(bitPattern: bytes[index]))))
        }
    })
}
@Sendable public static func BytesDecode_signedInt16(_ endianness: Bytes_Endianness)
    -> BytesDecode_Decoder<Double>
{
    BytesDecode_Decoder(decode: { index, bytes in
        let indexAfter: Int = index + 2
        if indexAfter > bytes.count {
            return .none
        } else {
            let valueRaw: Int16 = bytes.withUnsafeBytes({ b in
                b.load(fromByteOffset: index, as: Int16.self)
            })
            let valueCorrectedForEndianness: Int16 =
                switch endianness {
                case .Bytes_BE: Int16(bigEndian: valueRaw)
                case .Bytes_LE: Int16(littleEndian: valueRaw)
                }
            return .some((index: indexAfter, value: Double(valueCorrectedForEndianness)))
        }
    })
}
@Sendable public static func BytesDecode_signedInt32(_ endianness: Bytes_Endianness)
    -> BytesDecode_Decoder<Double>
{
    BytesDecode_Decoder(decode: { index, bytes in
        let indexAfter: Int = index + 4
        if indexAfter > bytes.count {
            return .none
        } else {
            let valueRaw: Int32 = bytes.withUnsafeBytes({ b in
                b.load(fromByteOffset: index, as: Int32.self)
            })
            let valueCorrectedForEndianness: Int32 =
                switch endianness {
                case .Bytes_BE: Int32(bigEndian: valueRaw)
                case .Bytes_LE: Int32(littleEndian: valueRaw)
                }
            return .some((index: indexAfter, value: Double(valueCorrectedForEndianness)))
        }
    })
}
@Sendable public static func BytesDecode_unsignedInt8(_ endianness: Bytes_Endianness)
    -> BytesDecode_Decoder<Double>
{
    BytesDecode_Decoder(decode: { index, bytes in
        let indexAfter: Int = index + 1
        return if indexAfter > bytes.count {
            .none
        } else {
            .some((index: indexAfter, value: Double(bytes[index])))
        }
    })
}
@Sendable public static func BytesDecode_unsignedInt16(_ endianness: Bytes_Endianness)
    -> BytesDecode_Decoder<Double>
{
    BytesDecode_Decoder(decode: { index, bytes in
        let indexAfter: Int = index + 2
        if indexAfter > bytes.count {
            return .none
        } else {
            let valueRaw: UInt16 = bytes.withUnsafeBytes({ b in
                b.load(fromByteOffset: index, as: UInt16.self)
            })
            let valueCorrectedForEndianness: UInt16 =
                switch endianness {
                case .Bytes_BE: UInt16(bigEndian: valueRaw)
                case .Bytes_LE: UInt16(littleEndian: valueRaw)
                }
            return .some((index: indexAfter, value: Double(valueCorrectedForEndianness)))
        }
    })
}
@Sendable public static func BytesDecode_unsignedInt32(_ endianness: Bytes_Endianness)
    -> BytesDecode_Decoder<Double>
{
    BytesDecode_Decoder(decode: { index, bytes in
        let indexAfter: Int = index + 4
        if indexAfter > bytes.count {
            return .none
        } else {
            let valueRaw: UInt32 = bytes.withUnsafeBytes({ b in
                b.load(fromByteOffset: index, as: UInt32.self)
            })
            let valueCorrectedForEndianness: UInt32 =
                switch endianness {
                case .Bytes_BE: UInt32(bigEndian: valueRaw)
                case .Bytes_LE: UInt32(littleEndian: valueRaw)
                }
            return .some((index: indexAfter, value: Double(valueCorrectedForEndianness)))
        }
    })
}
@Sendable public static func BytesDecode_unsignedFloat32(_ endianness: Bytes_Endianness)
    -> BytesDecode_Decoder<Double>
{
    BytesDecode_Decoder(decode: { index, bytes in
        let indexAfter: Int = index + 4
        if indexAfter > bytes.count {
            return .none
        } else {
            let valueRaw: UInt32 = bytes.withUnsafeBytes({ b in
                b.load(fromByteOffset: index, as: UInt32.self)
            })
            let valueCorrectedForEndianness: Float32 =
                switch endianness {
                case .Bytes_BE: Float32(bitPattern: UInt32(bigEndian: valueRaw))
                case .Bytes_LE: Float32(bitPattern: UInt32(littleEndian: valueRaw))
                }
            return .some((index: indexAfter, value: Double(valueCorrectedForEndianness)))
        }
    })
}
@Sendable public static func BytesDecode_unsignedFloat64(_ endianness: Bytes_Endianness)
    -> BytesDecode_Decoder<Double>
{
    BytesDecode_Decoder(decode: { index, bytes in
        let indexAfter: Int = index + 8
        if indexAfter > bytes.count {
            return .none
        } else {
            let valueRaw: UInt64 = bytes.withUnsafeBytes({ b in
                b.load(fromByteOffset: index, as: UInt64.self)
            })
            let valueCorrectedForEndianness: Float64 =
                switch endianness {
                case .Bytes_BE: Float64(bitPattern: UInt64(bigEndian: valueRaw))
                case .Bytes_LE: Float64(bitPattern: UInt64(littleEndian: valueRaw))
                }
            return .some((index: indexAfter, value: Double(valueCorrectedForEndianness)))
        }
    })
}
@Sendable public static func BytesDecode_bytes(_ count: Double)
    -> BytesDecode_Decoder<Bytes_Bytes>
{
    BytesDecode_Decoder(decode: { index, bytes in
        let indexAfter: Int = index + Int(count)
        return if indexAfter > bytes.count {
            .none
        } else {
            .some(
                (
                    index: indexAfter,
                    value: Array(bytes[index..<indexAfter])
                )
            )
        }
    })
}
@Sendable public static func BytesDecode_string(_ utf8Count: Double)
    -> BytesDecode_Decoder<String>
{
    BytesDecode_Decoder(decode: { index, bytes -> (index: Int, value: String)? in
        let indexAfter: Int = index + Int(utf8Count)
        return if indexAfter > bytes.count {
            .none
        } else {
            String(
                bytes: bytes[index..<indexAfter],
                encoding: String.Encoding.utf8
            )
            .map({ value in
                (
                    index: indexAfter,
                    value: value
                )
            })
        }
    })
}

public enum PlatformCmd_CmdSingle<event: Sendable>: Sendable {
    case PlatformCmd_PortOutgoing(name: String, value: JsonEncode_Value)
}
public typealias PlatformCmd_Cmd<event> =
    [PlatformCmd_CmdSingle<event>]

@Sendable public static func PlatformCmd_none<event>() -> PlatformCmd_Cmd<event> {
    []
}
@Sendable public static func PlatformCmd_batch<event: Sendable>(
    _ cmds: List_List<PlatformCmd_Cmd<event>>
)
    -> PlatformCmd_Cmd<event>
{
    // can be optimized
    Array_fromList(cmds).flatMap({ cmd in cmd })
}
@Sendable public static func PlatformCmd_map<event: Sendable, eventMapped: Sendable>(
    _: (event) -> eventMapped,
    _ cmd: PlatformCmd_Cmd<event>
) -> PlatformCmd_Cmd<eventMapped> {
    cmd.map({ cmdSingle in
        switch cmdSingle {
        case let .PlatformCmd_PortOutgoing(name, value):
            .PlatformCmd_PortOutgoing(name: name, value: value)
        }
    })
}

public enum PlatformSub_SubSingle<event: Sendable>: Sendable {
    case PlatformSub_PortIncoming(name: String, onValue: @Sendable (Data) -> event)
}
public typealias PlatformSub_Sub<event> = [PlatformSub_SubSingle<event>]

@Sendable public static func PlatformSub_none<event>() -> PlatformSub_Sub<event> {
    []
}
@Sendable public static func PlatformSub_batch<event: Sendable>(
    _ subs: List_List<PlatformSub_Sub<event>>
)
    -> PlatformSub_Sub<event>
{
    // can be optimized
    Array_fromList(subs).flatMap({ sub in sub })
}
@Sendable public static func PlatformSub_map<event: Sendable, eventMapped: Sendable>(
    _ eventChange: @escaping @Sendable (event) -> eventMapped,
    _ sub: PlatformSub_Sub<event>
) -> PlatformSub_Sub<eventMapped> {
    sub.map({ subSingle in
        switch subSingle {
        case let .PlatformSub_PortIncoming(name, onValue):
            .PlatformSub_PortIncoming(
                name: name,
                onValue: { value in eventChange(onValue(value)) }
            )
        }
    })
}

public enum Generated_init__update_subscriptions<
    init_: Sendable, update: Sendable, subscriptions: Sendable
>: Sendable {
    case Record(init_: init_, update: update, subscriptions: subscriptions)
    var init_: init_ {
        switch self {
        case let .Record(result, _, _): result
        }
    }
    var update: update {
        switch self {
        case let .Record(_, result, _): result
        }
    }
    var subscriptions: subscriptions {
        switch self {
        case let .Record(_, _, result): result
        }
    }
}
public typealias Platform_Program<flags: Sendable, state: Sendable, event: Sendable> =
    Generated_init__update_subscriptions<
        @Sendable (flags) -> Tuple<state, PlatformCmd_Cmd<event>>,
        @Sendable (event) -> (state) -> Tuple<state, PlatformCmd_Cmd<event>>,
        @Sendable (state) -> PlatformSub_Sub<event>
    >

@Sendable public static func Platform_worker<flags, state, event>(
    _ config: Platform_Program<flags, state, event>
)
    -> Platform_Program<flags, state, event>
{
    config
}

public struct JsonDecode_Value: @unchecked Sendable {
    // NSString | NSNumber (covering Int, Float, Bool) | NSArray | NSDictionary | NSNull
    let value: Any
}
public typealias JsonEncode_Value = JsonDecode_Value

public static let JsonEncode_null: JsonEncode_Value =
    JsonDecode_Value(value: NSNull())
@Sendable public static func JsonEncode_int(_ int: Double) -> JsonEncode_Value {
    JsonDecode_Value(value: NSNumber(value: int))
}
@Sendable public static func JsonEncode_float(_ float: Double) -> JsonEncode_Value {
    JsonDecode_Value(value: NSNumber(value: float))
}
@Sendable public static func JsonEncode_string(_ string: String) -> JsonEncode_Value {
    JsonDecode_Value(value: NSString(string: string))
}
@Sendable public static func JsonEncode_bool(_ bool: Bool) -> JsonEncode_Value {
    JsonDecode_Value(value: NSNumber(value: bool))
}
@Sendable public static func JsonEncode_list<a>(
    _ elementToJson: (a) -> JsonEncode_Value,
    _ elements: List_List<a>
) -> JsonEncode_Value {
    JsonDecode_Value(
        value: NSArray(
            array: Array_mapFromList(elementToJson, elements)
        )
    )
}
@Sendable public static func JsonEncode_array<a>(
    _ elementToJson: (a) -> JsonEncode_Value,
    _ elements: [a]
) -> JsonEncode_Value {
    JsonDecode_Value(
        value: NSArray(
            array: elements.map(elementToJson)
        )
    )
}
@Sendable public static func JsonEncode_set<a: Sendable>(
    _ elementToJson: (a) -> JsonEncode_Value,
    _ elements: Set<a>
) -> JsonEncode_Value {
    JsonDecode_Value(
        value: NSArray(
            array: Array(elements).map(elementToJson)
        )
    )
}
@Sendable public static func JsonEncode_object(
    _ fields: List_List<Tuple<String, JsonEncode_Value>>
)
    -> JsonEncode_Value
{
    var fieldsRemaining: List_List<Tuple<String, JsonEncode_Value>> = fields
    var fieldsDictionary: [String: JsonEncode_Value] = Dictionary()
    while case let .List_Cons(.Tuple(headFieldName, headFieldValue), tail) = fieldsRemaining {
        fieldsDictionary[headFieldName] = headFieldValue
        fieldsRemaining = tail
    }
    return JsonDecode_Value(value: NSDictionary(dictionary: fieldsDictionary))
}
@Sendable public static func JsonEncode_dict(_ fields: [String: JsonEncode_Value])
    -> JsonEncode_Value
{
    JsonDecode_Value(value: NSDictionary(dictionary: fields))
}

@Sendable public static func JsonEncode_encode(
    _ indentSize: Double,
    _ encoded: JsonEncode_Value
)
    -> String
{
    let options: JSONSerialization.WritingOptions =
        if indentSize <= 0 {
            []
        } else {
            [.prettyPrinted]  // indent size 2
        }
    do {
        let prettyPrintedData: Data = try JSONSerialization.data(
            withJSONObject: encoded,
            options: options
        )
        return switch String(data: prettyPrintedData, encoding: .utf8) {
        case let .some(encodedJsonAsString):
            if (indentSize <= 0) || (indentSize == 2) {
                encodedJsonAsString
            } else {
                // set indent size
                encodedJsonAsString.replacing(
                    "\n  ",
                    with: "\n\(String(repeating: " ", count: Int(indentSize)))"
                )
            }
        case .none:
            "null"
        }
    } catch {
        return "null"
    }
}

public indirect enum JsonDecode_Error: Sendable {
    case JsonDecode_Field(String, JsonDecode_Error)
    case JsonDecode_Index(Double, JsonDecode_Error)
    case JsonDecode_OneOf(List_List<JsonDecode_Error>)
    case JsonDecode_Failure(String, JsonDecode_Value)
}
public struct JsonDecode_Decoder<value: Sendable>: Sendable {
    let decode: @Sendable (JsonDecode_Value) -> Result_Result<JsonDecode_Error, value>
}

@Sendable public static func JsonDecode_decodeValue<value: Sendable>(
    _ decoder: JsonDecode_Decoder<value>,
    _ toDecode: JsonDecode_Value
) -> Result_Result<JsonDecode_Error, value> {
    decoder.decode(toDecode)
}
@Sendable public static func JsonDecode_decodeString<value: Sendable>(
    _ decoder: JsonDecode_Decoder<value>,
    _ toDecode: String
) -> Result_Result<JsonDecode_Error, value> {
    do {
        return decoder.decode(
            JsonDecode_Value(
                value: try JSONSerialization.jsonObject(
                    with: Data(toDecode.utf8)
                )
            )
        )
    } catch {
        return .Result_Err(
            .JsonDecode_Failure(
                "This is not valid JSON!",
                JsonEncode_string(toDecode)
            )
        )
    }
}

public static let JsonDecode_value: JsonDecode_Decoder<JsonDecode_Value> =
    JsonDecode_Decoder(decode: { toDecode in .Result_Ok(toDecode) })
@Sendable public static func JsonDecode_succeed<a: Sendable>(_ value: (a))
    -> JsonDecode_Decoder<a>
{
    JsonDecode_Decoder(decode: { _ in .Result_Ok(value) })
}
@Sendable public static func JsonDecode_fail<a: Sendable>(_ errorMessage: String)
    -> JsonDecode_Decoder<a>
{
    JsonDecode_Decoder(decode: { toDecode in
        .Result_Err(.JsonDecode_Failure(errorMessage, toDecode))
    })
}
@Sendable public static func JsonDecode_lazy<a: Sendable>(
    _ buildDecoder: @escaping @Sendable (Unit) -> JsonDecode_Decoder<a>
)
    -> JsonDecode_Decoder<a>
{
    JsonDecode_Decoder(decode: { toDecode in
        buildDecoder(.Unit).decode(toDecode)
    })
}
@Sendable public static func JsonDecode_andThen<a: Sendable, b: Sendable>(
    _ valueToDecoder: @escaping @Sendable (a) -> JsonDecode_Decoder<b>,
    _ decoder: JsonDecode_Decoder<a>
) -> JsonDecode_Decoder<b> {
    JsonDecode_Decoder(decode: { toDecode in
        switch decoder.decode(toDecode) {
        case let .Result_Err(error):
            .Result_Err(error)
        case let .Result_Ok(value):
            valueToDecoder(value).decode(toDecode)
        }
    })
}
@Sendable public static func JsonDecode_map<a: Sendable, b: Sendable>(
    _ valueChange: @escaping @Sendable (a) -> b,
    _ decoder: JsonDecode_Decoder<a>
) -> JsonDecode_Decoder<b> {
    JsonDecode_Decoder(decode: { toDecode in
        Result_map(valueChange, decoder.decode(toDecode))
    })
}
@Sendable public static func JsonDecode_map2<a: Sendable, b: Sendable, combined: Sendable>(
    _ combine: @escaping @Sendable (a) -> (b) -> combined,
    _ aDecoder: JsonDecode_Decoder<a>,
    _ bDecoder: JsonDecode_Decoder<b>
)
    -> JsonDecode_Decoder<combined>
{
    JsonDecode_Decoder(decode: { toDecode in
        Result_map2(
            combine, aDecoder.decode(toDecode),
            bDecoder.decode(toDecode)
        )
    })
}
@Sendable
public static func JsonDecode_map3<a: Sendable, b: Sendable, c: Sendable, combined: Sendable>(
    _ combine: @escaping @Sendable (a) -> (b) -> (c) -> combined,
    _ aDecoder: JsonDecode_Decoder<a>,
    _ bDecoder: JsonDecode_Decoder<b>,
    _ cDecoder: JsonDecode_Decoder<c>
)
    -> JsonDecode_Decoder<combined>
{
    JsonDecode_Decoder(decode: { toDecode in
        Result_map3(
            combine,
            aDecoder.decode(toDecode),
            bDecoder.decode(toDecode),
            cDecoder.decode(toDecode))
    })
}
@Sendable
public static func JsonDecode_map4<
    a: Sendable, b: Sendable, c: Sendable, d: Sendable, combined: Sendable
>(
    _ combine: @escaping @Sendable (a) -> (b) -> (c) -> (d) -> combined,
    _ aDecoder: JsonDecode_Decoder<a>,
    _ bDecoder: JsonDecode_Decoder<b>,
    _ cDecoder: JsonDecode_Decoder<c>,
    _ dDecoder: JsonDecode_Decoder<d>
)
    -> JsonDecode_Decoder<combined>
{
    JsonDecode_Decoder(decode: { toDecode in
        Result_map4(
            combine,
            aDecoder.decode(toDecode),
            bDecoder.decode(toDecode),
            cDecoder.decode(toDecode),
            dDecoder.decode(toDecode)
        )
    })
}
@Sendable
public static func JsonDecode_map5<
    a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, combined: Sendable
>(
    _ combine: @escaping @Sendable (a) -> (b) -> (c) -> (d) -> (e) -> combined,
    _ aDecoder: JsonDecode_Decoder<a>,
    _ bDecoder: JsonDecode_Decoder<b>,
    _ cDecoder: JsonDecode_Decoder<c>,
    _ dDecoder: JsonDecode_Decoder<d>,
    _ eDecoder: JsonDecode_Decoder<e>
)
    -> JsonDecode_Decoder<combined>
{
    JsonDecode_Decoder(decode: { toDecode in
        Result_map5(
            combine,
            aDecoder.decode(toDecode),
            bDecoder.decode(toDecode),
            cDecoder.decode(toDecode),
            dDecoder.decode(toDecode),
            eDecoder.decode(toDecode)
        )
    })
}
@Sendable
public static func JsonDecode_map6<
    a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, f: Sendable,
    combined: Sendable
>(
    _ combine: @escaping @Sendable (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> combined,
    _ aDecoder: JsonDecode_Decoder<a>,
    _ bDecoder: JsonDecode_Decoder<b>,
    _ cDecoder: JsonDecode_Decoder<c>,
    _ dDecoder: JsonDecode_Decoder<d>,
    _ eDecoder: JsonDecode_Decoder<e>,
    _ fDecoder: JsonDecode_Decoder<f>
)
    -> JsonDecode_Decoder<combined>
{
    JsonDecode_Decoder(decode: { toDecode in
        Result_map6(
            combine,
            aDecoder.decode(toDecode),
            bDecoder.decode(toDecode),
            cDecoder.decode(toDecode),
            dDecoder.decode(toDecode),
            eDecoder.decode(toDecode),
            fDecoder.decode(toDecode)
        )
    })
}
@Sendable
public static func JsonDecode_map7<
    a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, f: Sendable, g: Sendable,
    combined: Sendable
>(
    _ combine: @escaping @Sendable (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> (g) -> combined,
    _ aDecoder: JsonDecode_Decoder<a>,
    _ bDecoder: JsonDecode_Decoder<b>,
    _ cDecoder: JsonDecode_Decoder<c>,
    _ dDecoder: JsonDecode_Decoder<d>,
    _ eDecoder: JsonDecode_Decoder<e>,
    _ fDecoder: JsonDecode_Decoder<f>,
    _ gDecoder: JsonDecode_Decoder<g>
)
    -> JsonDecode_Decoder<combined>
{
    JsonDecode_Decoder(decode: { toDecode in
        Result_map7(
            combine,
            aDecoder.decode(toDecode),
            bDecoder.decode(toDecode),
            cDecoder.decode(toDecode),
            dDecoder.decode(toDecode),
            eDecoder.decode(toDecode),
            fDecoder.decode(toDecode),
            gDecoder.decode(toDecode)
        )
    })
}
@Sendable
public static func JsonDecode_map8<
    a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, f: Sendable, g: Sendable,
    h: Sendable, combined: Sendable
>(
    _ combine: @escaping @Sendable (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> (g) -> (h) ->
        combined,
    _ aDecoder: JsonDecode_Decoder<a>,
    _ bDecoder: JsonDecode_Decoder<b>,
    _ cDecoder: JsonDecode_Decoder<c>,
    _ dDecoder: JsonDecode_Decoder<d>,
    _ eDecoder: JsonDecode_Decoder<e>,
    _ fDecoder: JsonDecode_Decoder<f>,
    _ gDecoder: JsonDecode_Decoder<g>,
    _ hDecoder: JsonDecode_Decoder<h>
)
    -> JsonDecode_Decoder<combined>
{
    JsonDecode_Decoder(decode: { toDecode in
        Result_map8(
            combine,
            aDecoder.decode(toDecode),
            bDecoder.decode(toDecode),
            cDecoder.decode(toDecode),
            dDecoder.decode(toDecode),
            eDecoder.decode(toDecode),
            fDecoder.decode(toDecode),
            gDecoder.decode(toDecode),
            hDecoder.decode(toDecode)
        )
    })
}

@Sendable public static func JsonDecode_oneOf<value: Sendable>(
    _ options: List_List<JsonDecode_Decoder<value>>
)
    -> JsonDecode_Decoder<value>
{
    JsonDecode_Decoder(decode: { toDecode in
        var remainingOptions: List_List<JsonDecode_Decoder<value>> = options
        var optionDecodeErrors: [JsonDecode_Error] = []
        while case let .List_Cons(nextOptionDecoder, afterNextOption) = remainingOptions {
            switch nextOptionDecoder.decode(toDecode) {
            case let .Result_Ok(value): return .Result_Ok(value)
            case let .Result_Err(optionDecodeError):
                optionDecodeErrors.append(optionDecodeError)
                remainingOptions = afterNextOption
            }
        }
        return .Result_Err(.JsonDecode_OneOf(Array_toList(optionDecodeErrors)))
    })
}

@Sendable public static func JsonDecode_null<a: Sendable>(_ value: a) -> JsonDecode_Decoder<a> {
    JsonDecode_Decoder(decode: { toDecode in
        switch toDecode.value {
        case _ as NSNull:
            .Result_Ok(value)
        case _:
            .Result_Err(
                .JsonDecode_Failure("Expecting NULL", toDecode)
            )
        }
    })
}
public static let JsonDecode_bool: JsonDecode_Decoder<Bool> =
    JsonDecode_Decoder(decode: { toDecode in
        switch toDecode.value {
        case let nsNumber as NSNumber:
            // https://stackoverflow.com/questions/30215680/is-there-a-correct-way-to-determine-that-an-nsnumber-is-derived-from-a-bool-usin
            if CFGetTypeID(nsNumber) == CFBooleanGetTypeID() {
                .Result_Ok(nsNumber.boolValue)
            } else {
                .Result_Err(
                    .JsonDecode_Failure("Expecting a BOOL", toDecode)
                )
            }
        case _:
            .Result_Err(
                .JsonDecode_Failure("Expecting a BOOL", toDecode)
            )
        }
    })
public static let JsonDecode_int: JsonDecode_Decoder<Double> =
    JsonDecode_Decoder(decode: { toDecode in
        switch toDecode.value {
        case let nsNumber as NSNumber:
            switch Int(exactly: nsNumber.doubleValue) {
            case .some(_): .Result_Ok(nsNumber.doubleValue)
            case .none:
                .Result_Err(
                    .JsonDecode_Failure("Expecting an INT", toDecode)
                )
            }
        case _:
            .Result_Err(
                .JsonDecode_Failure("Expecting an INT", toDecode)
            )
        }
    })
public static let JsonDecode_float: JsonDecode_Decoder<Double> =
    JsonDecode_Decoder(decode: { toDecode in
        switch toDecode.value {
        case let nsNumber as NSNumber:
            .Result_Ok(nsNumber.doubleValue)
        case _:
            .Result_Err(
                .JsonDecode_Failure("Expecting a NUMBER", toDecode)
            )
        }
    })
public static let JsonDecode_string: JsonDecode_Decoder<String> =
    JsonDecode_Decoder(decode: { toDecode in
        switch toDecode.value {
        case let nsString as NSString:
            .Result_Ok(String(nsString))
        case _:
            .Result_Err(
                .JsonDecode_Failure("Expecting a NUMBER", toDecode)
            )
        }
    })

@Sendable public static func JsonDecode_field<value: Sendable>(
    _ fieldName: String,
    _ valueDecoder: JsonDecode_Decoder<value>
) -> JsonDecode_Decoder<value> {
    JsonDecode_Decoder(decode: { toDecode in
        Result_andThen(
            valueDecoder.decode,
            JsonDecode_fieldValue(fieldName).decode(toDecode)
        )
    })
}
static func JsonDecode_fieldValue(_ fieldName: String)
    -> JsonDecode_Decoder<JsonDecode_Value>
{
    JsonDecode_Decoder(decode: { toDecode in
        switch toDecode.value {
        case let dictToDecode as NSDictionary:
            switch dictToDecode.value(forKey: fieldName) {
            case let .some(valueJson):
                .Result_Ok(JsonDecode_Value(value: valueJson))
            case .none:
                .Result_Err(
                    .JsonDecode_Failure(
                        "Expecting an OBJECT with a field named '\(fieldName)'",
                        toDecode
                    )
                )
            }
        case _:
            .Result_Err(
                .JsonDecode_Failure(
                    "Expecting an OBJECT with a field named '\(fieldName)'",
                    toDecode
                )
            )
        }
    })
}

@Sendable public static func JsonDecode_at<value: Sendable>(
    _ fieldNames: List_List<String>,
    _ valueDecoder: JsonDecode_Decoder<value>
) -> JsonDecode_Decoder<value> {
    JsonDecode_Decoder(decode: { toDecode in
        var remainingFieldNames: List_List<String> = fieldNames
        var successfullyDecodedFieldNames: [String] = []
        var remainingToDecode: JsonDecode_Value = toDecode
        while case let .List_Cons(nextFieldName, afterNextFieldName) = remainingFieldNames {
            switch JsonDecode_fieldValue(nextFieldName).decode(remainingToDecode) {
            case let .Result_Ok(fieldValueJson):
                remainingFieldNames = afterNextFieldName
                remainingToDecode = fieldValueJson
                successfullyDecodedFieldNames.append(nextFieldName)
            case let .Result_Err(fieldValueDecodeError):
                return .Result_Err(
                    successfullyDecodedFieldNames.reduce(
                        fieldValueDecodeError,
                        { soFar, fieldName in
                            .JsonDecode_Field(fieldName, soFar)
                        }
                    )
                )
            }
        }
        return valueDecoder.decode(remainingToDecode)
    })
}
@Sendable public static func JsonDecode_dict<value: Sendable>(
    _ valueDecoder: JsonDecode_Decoder<value>
)
    -> JsonDecode_Decoder<[String: value]>
{
    JsonDecode_Decoder(decode: { toDecode in
        switch toDecode.value {
        case let dictToDecode as NSDictionary:
            var decodedDictionary: [String: value] = Dictionary()
            for entryToDecode in dictToDecode {
                let key: String
                switch entryToDecode.key {
                case let castedKey as String:
                    key = castedKey
                case _:
                    switch JsonDecode_string.decode(JsonDecode_Value(value: entryToDecode.key))
                    {
                    case let .Result_Ok(decodedKey):
                        key = decodedKey
                    case .Result_Err(_):
                        return .Result_Err(
                            .JsonDecode_Failure(
                                "Expecting an OBJECT with STRING keys",
                                toDecode
                            )
                        )
                    }
                }
                switch valueDecoder.decode(JsonDecode_Value(value: entryToDecode.value)) {
                case let .Result_Err(error):
                    return .Result_Err(.JsonDecode_Field(key, error))
                case let .Result_Ok(decodedValue):
                    decodedDictionary[key] = decodedValue
                }
            }
            return .Result_Ok(decodedDictionary)
        case _:
            return .Result_Err(
                .JsonDecode_Failure("Expecting an OBJECT", toDecode)
            )
        }
    })
}
@Sendable public static func JsonDecode_keyValuePairs<value: Sendable>(
    _ valueDecoder: JsonDecode_Decoder<value>
)
    -> JsonDecode_Decoder<List_List<(String, value)>>
{
    JsonDecode_Decoder(decode: { toDecode in
        switch toDecode.value {
        case let dictToDecode as NSDictionary:
            var decodedDictionary: List_List<(String, value)> = .List_Empty
            for entryToDecode in dictToDecode.reversed() {
                let key: String
                switch entryToDecode.key {
                case let castedKey as String:
                    key = castedKey
                case _:
                    switch JsonDecode_string.decode(JsonDecode_Value(value: entryToDecode.key))
                    {
                    case let .Result_Ok(decodedKey):
                        key = decodedKey
                    case .Result_Err(_):
                        return .Result_Err(
                            .JsonDecode_Failure(
                                "Expecting an OBJECT with STRING keys",
                                toDecode
                            )
                        )
                    }
                }
                switch valueDecoder.decode(JsonDecode_Value(value: entryToDecode.value)) {
                case let .Result_Err(error):
                    return .Result_Err(.JsonDecode_Field(key, error))
                case let .Result_Ok(decodedValue):
                    decodedDictionary = .List_Cons((key, decodedValue), decodedDictionary)
                }
            }
            return .Result_Ok(decodedDictionary)
        case _:
            return .Result_Err(
                .JsonDecode_Failure("Expecting an OBJECT", toDecode)
            )
        }
    })
}
@Sendable public static func JsonDecode_array<a: Sendable>(
    _ elementDecoder: JsonDecode_Decoder<a>
)
    -> JsonDecode_Decoder<[a]>
{
    JsonDecode_Decoder(decode: { toDecode in
        switch toDecode.value {
        case let arrayToDecode as NSArray:
            var decodedArray: [a] = []
            decodedArray.reserveCapacity(arrayToDecode.count)
            for (index, elementToDecode) in arrayToDecode.enumerated() {
                switch elementDecoder.decode(JsonDecode_Value(value: elementToDecode)) {
                case let .Result_Err(error):
                    return .Result_Err(.JsonDecode_Index(Double(index), error))
                case let .Result_Ok(elementDecoded):
                    decodedArray.append(elementDecoded)
                }
            }
            return .Result_Ok(decodedArray)
        case _:
            return .Result_Err(
                .JsonDecode_Failure("Expecting an ARRAY", toDecode)
            )
        }
    })
}
@Sendable public static func JsonDecode_index<a: Sendable>(
    _ indexAsDouble: Double,
    _ elementDecoder: JsonDecode_Decoder<a>
)
    -> JsonDecode_Decoder<a>
{
    JsonDecode_Decoder(decode: { toDecode in
        switch toDecode.value {
        case let arrayToDecode as NSArray:
            let index: Int = Int(indexAsDouble)
            return if index >= 0 && index < arrayToDecode.count {
                switch elementDecoder.decode(JsonDecode_Value(value: arrayToDecode[index]))
                {
                case let .Result_Err(error):
                    .Result_Err(.JsonDecode_Index(indexAsDouble, error))
                case let .Result_Ok(elementDecoded):
                    .Result_Ok(elementDecoded)
                }
            } else {
                .Result_Err(
                    .JsonDecode_Failure(
                        "Expecting an ARRAY with an index [\(String(index))]",
                        toDecode
                    )
                )
            }
        case _:
            return .Result_Err(
                .JsonDecode_Failure("Expecting an ARRAY", toDecode)
            )
        }
    })
}
@Sendable public static func JsonDecode_list<a: Sendable>(
    _ elementDecoder: JsonDecode_Decoder<a>
)
    -> JsonDecode_Decoder<List_List<a>>
{
    JsonDecode_Decoder(decode: { toDecode in
        switch toDecode.value {
        case let arrayToDecode as NSArray:
            var decodedList: List_List<a> = .List_Empty
            for (index, elementToDecode) in arrayToDecode.enumerated().reversed() {
                switch elementDecoder.decode(JsonDecode_Value(value: elementToDecode)) {
                case let .Result_Err(error):
                    return .Result_Err(.JsonDecode_Index(Double(index), error))
                case let .Result_Ok(elementDecoded):
                    decodedList = .List_Cons(elementDecoded, decodedList)
                }
            }
            return .Result_Ok(decodedList)
        case _:
            return .Result_Err(
                .JsonDecode_Failure("Expecting an ARRAY", toDecode)
            )
        }
    })
}
@Sendable public static func JsonDecode_oneOrMore<a: Sendable, combined: Sendable>(
    _ combineHeadTail: @escaping @Sendable (a) -> (List_List<a>) -> combined,
    _ elementDecoder: JsonDecode_Decoder<a>
)
    -> JsonDecode_Decoder<combined>
{
    JsonDecode_map2(
        combineHeadTail,
        elementDecoder,
        JsonDecode_list(elementDecoder)
    )
}
@Sendable public static func JsonDecode_maybe<a: Sendable>(
    _ valueDecoder: JsonDecode_Decoder<a>
)
    -> JsonDecode_Decoder<Maybe_Maybe<a>>
{
    JsonDecode_Decoder(decode: { toDecode in
        switch valueDecoder.decode(toDecode) {
        case let .Result_Ok(value):
            .Result_Ok(.Maybe_Just(value))
        case .Result_Err(_):
            .Result_Ok(.Maybe_Nothing)
        }
    })
}
@Sendable public static func JsonDecode_nullable<a>(_ valueDecoder: JsonDecode_Decoder<a>)
    -> JsonDecode_Decoder<Maybe_Maybe<a>>
{
    JsonDecode_Decoder(decode: { toDecode in
        switch JsonDecode_null(()).decode(toDecode) {
        case .Result_Ok(()):
            .Result_Ok(.Maybe_Nothing)
        case let .Result_Err(nullDecodeError):
            switch valueDecoder.decode(toDecode) {
            case let .Result_Ok(value):
                .Result_Ok(.Maybe_Just(value))
            case let .Result_Err(valueDecodeError):
                .Result_Err(
                    .JsonDecode_OneOf(
                        .List_Cons(nullDecodeError, .List_Cons(valueDecodeError, .List_Empty)))
                )
            }
        }
    })
}

static func indent(_ str: String) -> String {
    str.split(separator: "\n").joined(separator: "\n    ")
}
@Sendable public static func JsonDecode_errorToString(_ error: JsonDecode_Error) -> String {
    JsonDecode_errorToStringHelp(error, [])
}
static func JsonDecode_errorToStringHelp(
    _ error: JsonDecode_Error,
    _ context: [String]
)
    -> String
{
    switch error {
    case let .JsonDecode_Field(f, err):
        let isSimple: Bool =
            switch String_uncons(f) {
            case .Maybe_Nothing: false
            case let .Maybe_Just(.Tuple(head, rest)):
                Char_isAlpha(head) && rest.unicodeScalars.allSatisfy(Char_isAlphaNum)
            }
        let fieldName: String =
            if isSimple { ".\(f)" } else { "['\(f)']" }
        return JsonDecode_errorToStringHelp(err, Array_push(fieldName, context))
    case let .JsonDecode_Index(index, err):
        let indexName: String = "[\(String(Int(index)))]"
        return JsonDecode_errorToStringHelp(err, Array_push(indexName, context))
    case let .JsonDecode_OneOf(errors):
        switch errors {
        case .List_Empty:
            return if context.isEmpty {
                "Ran into a Json.Decode.oneOf with no possibilities!"
            } else {
                "Ran into a Json.Decode.oneOf with no possibilities at json\(context.joined())"
            }
        case let .List_Cons(err, .List_Empty):
            return JsonDecode_errorToStringHelp(err, context)
        case _:
            let starter: String =
                if context.isEmpty {
                    "Json.Decode.oneOf"
                } else {
                    "The Json.Decode.oneOf at json\(context.joined())"
                }
            let introduction: String =
                "\(starter) failed in the following \(String(Int(List_length(errors)))) ways:"
            return String_join(
                "\n\n",
                .List_Cons(
                    introduction,
                    List_indexedMap(
                        { (i: Double) in
                            { (error: JsonDecode_Error) in
                                "\n\n(\(String(Int(i + 1)))) \(indent(JsonDecode_errorToStringHelp(error, [])))"
                            }
                        },
                        errors
                    )
                )
            )
        }
    case let .JsonDecode_Failure(msg, json):
        let introduction: String =
            if context.isEmpty {
                "Problem with the given value:\n\n"
            } else {
                "Problem with the value at json\(context.joined()):\n\n    "
            }
        return "\(introduction)\(indent(JsonEncode_encode(4, json)))\n\n\(msg)"
    }
}

public typealias MathVector2_Vec2 = SIMD2<Double>
public typealias MathVector3_Vec3 = SIMD3<Double>
public typealias MathVector4_Vec4 = SIMD4<Double>

@Sendable public static func MathVector2_vec2(_ x: Double, _ y: Double) -> MathVector2_Vec2 {
    SIMD2(x, y)
}
public enum Generated_x_y<x: Sendable, y: Sendable>: Sendable {
    case Record(x: x, y: y)
    var x: x {
        switch self {
        case let .Record(result, _): result
        }
    }
    var y: y {
        switch self {
        case let .Record(_, result): result
        }
    }
}
@Sendable public static func MathVector2_fromRecord(_ vec2: Generated_x_y<Double, Double>)
    -> MathVector2_Vec2
{
    SIMD2(x: vec2.x, y: vec2.y)
}
@Sendable public static func MathVector2_toRecord(_ vec2: MathVector2_Vec2)
    -> Generated_x_y<Double, Double>
{
    .Record(x: vec2.x, y: vec2.y)
}
@Sendable public static func MathVector2_getX(_ vec2: MathVector2_Vec2) -> Double {
    vec2.x
}
@Sendable public static func MathVector2_getY(_ vec2: MathVector2_Vec2) -> Double {
    vec2.y
}
@Sendable public static func MathVector2_setX(_ newX: Double, _ vec2: MathVector2_Vec2)
    -> MathVector2_Vec2
{
    var vec2Mutable: MathVector2_Vec2 = vec2
    vec2Mutable.x = newX
    return vec2Mutable
}
@Sendable public static func MathVector2_setY(_ newY: Double, _ vec2: MathVector2_Vec2)
    -> MathVector2_Vec2
{
    var vec2Mutable: MathVector2_Vec2 = vec2
    vec2Mutable.y = newY
    return vec2Mutable
}
@Sendable public static func MathVector2_add(_ a: MathVector2_Vec2, _ b: MathVector2_Vec2)
    -> MathVector2_Vec2
{
    a + b
}
@Sendable public static func MathVector2_sub(_ a: MathVector2_Vec2, _ b: MathVector2_Vec2)
    -> MathVector2_Vec2
{
    a - b
}
@Sendable public static func MathVector2_negate(_ vec2: MathVector2_Vec2) -> MathVector2_Vec2 {
    -vec2
}
@Sendable public static func MathVector2_scale(_ factor: Double, _ vec2: MathVector2_Vec2)
    -> MathVector2_Vec2
{
    vec2 * factor
}
@Sendable public static func MathVector2_dot(_ a: MathVector2_Vec2, _ b: MathVector2_Vec2)
    -> Double
{
    a.x * b.x + a.y * b.y
}
@Sendable public static func MathVector2_normalize(_ vec2: MathVector2_Vec2) -> MathVector2_Vec2
{
    vec2 / MathVector2_length(vec2)
    // alternative: vec2 * vec2 / MathVector2_lengthSquared(vec2)
}
@Sendable public static func MathVector2_direction(_ a: MathVector2_Vec2, _ b: MathVector2_Vec2)
    -> MathVector2_Vec2
{
    MathVector2_normalize(a - b)
}
@Sendable public static func MathVector2_length(_ vec2: MathVector2_Vec2) -> Double {
    sqrt(vec2.x * vec2.x + vec2.y + vec2.y)
}
@Sendable public static func MathVector2_lengthSquared(_ vec2: MathVector2_Vec2) -> Double {
    vec2.x * vec2.x + vec2.y + vec2.y
}
@Sendable public static func MathVector2_distance(_ a: MathVector2_Vec2, _ b: MathVector2_Vec2)
    -> Double
{
    MathVector2_length(a - b)
}
@Sendable public static func MathVector2_distanceSquared(
    _ a: MathVector2_Vec2, _ b: MathVector2_Vec2
) -> Double {
    MathVector2_lengthSquared(a - b)
}

public static let MathVector3_i: MathVector3_Vec3 = SIMD3(1, 0, 0)
public static let MathVector3_j: MathVector3_Vec3 = SIMD3(0, 1, 0)
public static let MathVector3_k: MathVector3_Vec3 = SIMD3(0, 0, 1)

@Sendable public static func MathVector3_vec3(_ x: Double, _ y: Double, _ z: Double)
    -> MathVector3_Vec3
{
    SIMD3(x, y, z)
}
public enum Generated_x_y_z<x: Sendable, y: Sendable, z: Sendable>: Sendable {
    case Record(x: x, y: y, z: z)
    var x: x {
        switch self {
        case let .Record(result, _, _): result
        }
    }
    var y: y {
        switch self {
        case let .Record(_, result, _): result
        }
    }
    var z: z {
        switch self {
        case let .Record(_, _, result): result
        }
    }
}
@Sendable public static func MathVector3_fromRecord(
    _ vec3: Generated_x_y_z<Double, Double, Double>
)
    -> MathVector3_Vec3
{
    SIMD3(x: vec3.x, y: vec3.y, z: vec3.z)
}
@Sendable public static func MathVector3_toRecord(_ vec3: MathVector3_Vec3)
    -> Generated_x_y_z<Double, Double, Double>
{
    .Record(x: vec3.x, y: vec3.y, z: vec3.z)
}
@Sendable public static func MathVector3_getX(_ vec3: MathVector3_Vec3) -> Double {
    vec3.x
}
@Sendable public static func MathVector3_getY(_ vec3: MathVector3_Vec3) -> Double {
    vec3.y
}
@Sendable public static func MathVector3_getZ(_ vec3: MathVector3_Vec3) -> Double {
    vec3.z
}
@Sendable public static func MathVector3_setX(_ newX: Double) -> (MathVector3_Vec3) ->
    MathVector3_Vec3
{
    { vec3 in
        var vec3Mutable: MathVector3_Vec3 = vec3
        vec3Mutable.x = newX
        return vec3Mutable
    }
}
@Sendable public static func MathVector3_setY(_ newY: Double, _ vec3: MathVector3_Vec3)
    -> MathVector3_Vec3
{
    var vec3Mutable: MathVector3_Vec3 = vec3
    vec3Mutable.y = newY
    return vec3Mutable
}
@Sendable public static func MathVector3_setZ(_ newZ: Double, _ vec3: MathVector3_Vec3)
    -> MathVector3_Vec3
{
    var vec3Mutable: MathVector3_Vec3 = vec3
    vec3Mutable.z = newZ
    return vec3Mutable
}
@Sendable public static func MathVector3_add(_ a: MathVector3_Vec3, _ b: MathVector3_Vec3)
    -> MathVector3_Vec3
{
    a + b
}
@Sendable public static func MathVector3_sub(_ a: MathVector3_Vec3, _ b: MathVector3_Vec3)
    -> MathVector3_Vec3
{
    a - b
}
@Sendable public static func MathVector3_negate(_ vec3: MathVector3_Vec3) -> MathVector3_Vec3 {
    -vec3
}
@Sendable public static func MathVector3_scale(_ factor: Double, _ vec3: MathVector3_Vec3)
    -> MathVector3_Vec3
{
    vec3 * factor
}
@Sendable public static func MathVector3_dot(_ a: MathVector3_Vec3, _ b: MathVector3_Vec3)
    -> Double
{
    a.x * b.x + a.y * b.y + a.z * b.z
}
@Sendable public static func MathVector3_cross(_ a: MathVector3_Vec3, _ b: MathVector3_Vec3)
    -> MathVector3_Vec3
{
    SIMD3(
        a.y * b.z - a.z * b.y,
        a.z * b.x - a.x * b.z,
        a.x * b.y - a.y * b.x
    )
}
@Sendable public static func MathVector3_normalize(_ vec3: MathVector3_Vec3) -> MathVector3_Vec3
{
    vec3 / MathVector3_length(vec3)
    // alternative: vec3 * vec3 / MathVector3_lengthSquared(vec3)
}
@Sendable public static func MathVector3_direction(_ a: MathVector3_Vec3, _ b: MathVector3_Vec3)
    -> MathVector3_Vec3
{
    MathVector3_normalize(a - b)
}
@Sendable public static func MathVector3_length(_ vec3: MathVector3_Vec3) -> Double {
    sqrt(vec3.x * vec3.x + vec3.y + vec3.y + vec3.z * vec3.z)
}
@Sendable public static func MathVector3_lengthSquared(_ vec3: MathVector3_Vec3) -> Double {
    vec3.x * vec3.x + vec3.y + vec3.y + vec3.z * vec3.z
}
@Sendable public static func MathVector3_distance(_ a: MathVector3_Vec3, _ b: MathVector3_Vec3)
    -> Double
{
    MathVector3_length(a - b)
}
@Sendable public static func MathVector3_distanceSquared(
    _ a: MathVector3_Vec3,
    _ b: MathVector3_Vec3
) -> Double {
    MathVector3_lengthSquared(a - b)
}

@Sendable public static func MathVector4_vec4(
    _ x: Double,
    _ y: Double,
    _ z: Double,
    _ w: Double
)
    -> MathVector4_Vec4
{
    SIMD4(x, y, z, w)
}
public enum Generated_w_x_y_z<x: Sendable, y: Sendable, z: Sendable, w: Sendable>: Sendable {
    case Record(w: w, x: x, y: y, z: z)
    var w: w {
        switch self {
        case let .Record(result, _, _, _): result
        }
    }
    var x: x {
        switch self {
        case let .Record(_, result, _, _): result
        }
    }
    var y: y {
        switch self {
        case let .Record(_, _, result, _): result
        }
    }
    var z: z {
        switch self {
        case let .Record(_, _, _, result): result
        }
    }
}
@Sendable public static func MathVector4_fromRecord(
    _ vec4: Generated_w_x_y_z<Double, Double, Double, Double>
)
    -> MathVector4_Vec4
{
    SIMD4(x: vec4.x, y: vec4.y, z: vec4.z, w: vec4.w)
}
@Sendable public static func MathVector4_toRecord(_ vec4: MathVector4_Vec4)
    -> Generated_w_x_y_z<Double, Double, Double, Double>
{
    .Record(w: vec4.w, x: vec4.x, y: vec4.y, z: vec4.z)
}
@Sendable public static func MathVector4_getX(_ vec4: MathVector4_Vec4) -> Double {
    vec4.x
}
@Sendable public static func MathVector4_getY(_ vec4: MathVector4_Vec4) -> Double {
    vec4.y
}
@Sendable public static func MathVector4_getZ(_ vec4: MathVector4_Vec4) -> Double {
    vec4.z
}
@Sendable public static func MathVector4_getW(_ vec4: MathVector4_Vec4) -> Double {
    vec4.w
}
@Sendable public static func MathVector4_setX(_ newX: Double, _ vec4: MathVector4_Vec4)
    -> MathVector4_Vec4
{
    var vec4Mutable: MathVector4_Vec4 = vec4
    vec4Mutable.x = newX
    return vec4Mutable
}
@Sendable public static func MathVector4_setY(_ newY: Double, _ vec4: MathVector4_Vec4)
    -> MathVector4_Vec4
{
    var vec4Mutable: MathVector4_Vec4 = vec4
    vec4Mutable.y = newY
    return vec4Mutable
}
@Sendable public static func MathVector4_setZ(_ newZ: Double, _ vec4: MathVector4_Vec4)
    -> MathVector4_Vec4
{
    var vec4Mutable: MathVector4_Vec4 = vec4
    vec4Mutable.z = newZ
    return vec4Mutable
}
@Sendable public static func MathVector4_setW(_ newW: Double, _ vec4: MathVector4_Vec4)
    -> MathVector4_Vec4
{
    var vec4Mutable: MathVector4_Vec4 = vec4
    vec4Mutable.w = newW
    return vec4Mutable
}
@Sendable public static func MathVector4_add(_ a: MathVector4_Vec4, _ b: MathVector4_Vec4)
    -> MathVector4_Vec4
{
    a + b
}
@Sendable public static func MathVector4_sub(_ a: MathVector4_Vec4, _ b: MathVector4_Vec4)
    -> MathVector4_Vec4
{
    a - b
}
@Sendable public static func MathVector4_negate(_ vec4: MathVector4_Vec4) -> MathVector4_Vec4 {
    -vec4
}
@Sendable public static func MathVector4_scale(_ factor: Double, _ vec4: MathVector4_Vec4)
    -> MathVector4_Vec4
{
    vec4 * factor
}
@Sendable public static func MathVector4_dot(_ a: MathVector4_Vec4, _ b: MathVector4_Vec4)
    -> Double
{
    a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w
}
@Sendable public static func MathVector4_normalize(_ vec4: MathVector4_Vec4) -> MathVector4_Vec4
{
    vec4 / MathVector4_length(vec4)
    // alternative: vec4 * vec4 / MathVector4_lengthSquared(vec4)
}
@Sendable public static func MathVector4_direction(_ a: MathVector4_Vec4, _ b: MathVector4_Vec4)
    -> MathVector4_Vec4
{
    MathVector4_normalize(a - b)
}
@Sendable public static func MathVector4_length(_ vec4: MathVector4_Vec4) -> Double {
    sqrt(vec4.x * vec4.x + vec4.y + vec4.y + vec4.z * vec4.z + vec4.w * vec4.w)
}
@Sendable public static func MathVector4_lengthSquared(_ vec4: MathVector4_Vec4) -> Double {
    vec4.x * vec4.x + vec4.y + vec4.y + vec4.z * vec4.z + vec4.w * vec4.w
}
@Sendable public static func MathVector4_distance(_ a: MathVector4_Vec4, _ b: MathVector4_Vec4)
    -> Double
{
    MathVector4_length(a - b)
}
@Sendable public static func MathVector4_distanceSquared(
    _ a: MathVector4_Vec4,
    _ b: MathVector4_Vec4
) -> Double {
    MathVector4_lengthSquared(a - b)
}

private static func stringUtf16CodePointAt(_ string: String, _ offset: Int)
    -> Unicode.UTF16.CodeUnit
{
    string.utf16[
        string.utf16.index(
            string.utf16.startIndex,
            offsetBy: offset
        )
    ]
}
private static func surrogatePairToUnicodeScalar(
    _ left: Unicode.UTF16.CodeUnit,
    _ right: Unicode.UTF16.CodeUnit
) -> UnicodeScalar? {
    UnicodeScalar(
        String(
            decoding: [left, right],
            as: Unicode.UTF16.self
        )
    )
}

@Sendable public static func ElmKernelParser_isSubString(
    _ smallString: String,
    _ offsetOriginal: Double,
    _ rowOriginal: Double,
    _ colOriginal: Double,
    _ bigString: String
)
    -> Triple<Double, Double, Double>
{
    let smallLength: Int = smallString.utf16.count
    var row: Int = Int(rowOriginal)
    var col: Int = Int(colOriginal)
    var offset: Int = Int(offsetOriginal)
    var isGood: Bool = Int(offset) + smallLength <= bigString.utf16.count
    var i: Int = 0
    while isGood && i < smallLength {
        let code: Unicode.UTF16.CodeUnit =
            stringUtf16CodePointAt(bigString, offset)
        isGood =
            stringUtf16CodePointAt(smallString, i)
            == stringUtf16CodePointAt(bigString, offset)

        if code == 0x000A /* \n */ {
            i = i + 1
            row = row + 1
            col = 1
        } else {
            col = col + 1
            if Unicode.UTF16.isSurrogate(code) {
                isGood =
                    isGood
                    && (stringUtf16CodePointAt(smallString, i + 1)
                        == stringUtf16CodePointAt(bigString, offset + 1))
                i = i + 2
                offset = offset + 2
            } else {
                i = i + 1
            }
        }
    }
    return if isGood {
        .Triple(Double(offset), Double(row), Double(col))
    } else {
        .Triple(-1, Double(row), Double(col))
    }
}

@Sendable public static func ElmKernelParser_isSubChar(
    _ predicate: (UnicodeScalar) -> Bool,
    _ offset: Double,
    _ string: String
)
    -> Double
{
    let offsetInt: Int = Int(offset)
    return if string.utf16.count <= offsetInt {
        -1
    } else if Unicode.UTF16.isSurrogate(stringUtf16CodePointAt(string, offsetInt)) {
        if predicate(
            surrogatePairToUnicodeScalar(
                stringUtf16CodePointAt(string, offsetInt),
                stringUtf16CodePointAt(string, offsetInt + 1),
            ) ?? "\0"
        ) {
            offset + 2
        } else {
            -1
        }
    } else if predicate(
        UnicodeScalar(stringUtf16CodePointAt(string, offsetInt)) ?? "\0"
    ) {
        if stringUtf16CodePointAt(string, offsetInt) == 0x000A /* \n */ {
            -2
        } else {
            offset + 1
        }
    } else {
        -1
    }
}

@Sendable public static func ElmKernelParser_isAsciiCode(
    _ code: Double,
    _ offset: Double,
    _ string: String
) -> Bool {
    Double(stringUtf16CodePointAt(string, Int(offset))) == code
}

@Sendable public static func ElmKernelParser_chompBase10(
    _ offsetOriginal: Double,
    _ string: String
) -> Double {
    var offset: Int = Int(offsetOriginal)
    var foundNonBase10: Bool = false
    while (offset < string.utf16.count) && !(foundNonBase10) {
        let code: Unicode.UTF16.CodeUnit = stringUtf16CodePointAt(string, offset)
        foundNonBase10 = !(code < 0x30 || 0x39 < code)
        offset = offset + 1
    }
    return Double(offset)
}

@Sendable public static func ElmKernelParser_consumeBase(
    _ baseAsDouble: Double,
    _ offsetOriginal: Double,
    _ string: String
) -> Tuple<Double, Double> {
    let base: Int = Int(baseAsDouble)
    var offset: Int = Int(offsetOriginal)
    var total: Int = 0
    var foundNonBase: Bool = false
    while (offset < string.utf16.count) && !(foundNonBase) {
        let digit: Int = Int(stringUtf16CodePointAt(string, offset) - 0x30)
        if digit < 0 || base <= digit {
            foundNonBase = true
        } else {
            total = base * total + digit
            offset = offset + 1
        }
    }
    return .Tuple(Double(offset), Double(total))
}

@Sendable public static func ElmKernelParser_consumeBase16(
    _ offsetOriginal: Double,
    _ string: String
) -> Tuple<Double, Double> {
    var offset: Int = Int(offsetOriginal)
    var total: Int = 0
    var foundNonBase16: Bool = false
    while (offset < string.utf16.count) && !(foundNonBase16) {
        let code: Unicode.UTF16.CodeUnit = stringUtf16CodePointAt(string, offset)
        if 0x30 <= code && code <= 0x39 {
            total = 16 * total + Int(code) - 0x30
            offset = offset + 1
        } else if 0x41 <= code && code <= 0x46 {
            total = 16 * total + Int(code) - 55
            offset = offset + 1
        } else if 0x61 <= code && code <= 0x66 {
            total = 16 * total + Int(code) - 87
            offset = offset + 1
        } else {
            foundNonBase16 = true
        }
    }
    return .Tuple(Double(offset), Double(total))
}

@Sendable public static func ElmKernelParser_findSubString(
    _ smallString: String,
    _ offsetOriginalAsDouble: Double,
    _ rowOriginal: Double,
    _ colOriginal: Double,
    _ bigString: String
)
    -> Triple<Double, Double, Double>
{
    let offsetOriginal: Int = Int(offsetOriginalAsDouble)
    let bigStringStartingWithOffsetOriginal: Substring =
        Substring(
            bigString.utf16[
                bigString.utf16.index(
                    bigString.utf16.startIndex,
                    offsetBy: offsetOriginal
                )...
            ]
        )
    let foundStartOffset: Int? =
        switch bigStringStartingWithOffsetOriginal
            .range(of: smallString)
        {
        case .none: .none
        case let .some(foundRangeAfterOffsetOriginal):
            offsetOriginal
                + foundRangeAfterOffsetOriginal.lowerBound
                .utf16Offset(in: bigStringStartingWithOffsetOriginal)
        }
    var row: Int = Int(rowOriginal)
    var col: Int = Int(colOriginal)
    var offset: Int = offsetOriginal
    let foundEndOffsetOrBigStringEnd: Int =
        switch foundStartOffset {
        case .none: bigString.utf16.count
        case let .some(foundIndexAfterOffsetOriginal):
            foundIndexAfterOffsetOriginal
                + smallString.utf16.count
        }
    while offset < foundEndOffsetOrBigStringEnd {
        let code: Unicode.UTF16.CodeUnit =
            stringUtf16CodePointAt(bigString, offset)
        if code == 0x000A /* \n */ {
            offset = offset + 1
            col = 1
            row = row + 1
        } else {
            col = col + 1
            offset =
                if Unicode.UTF16.isSurrogate(code) {
                    offset + 2
                } else {
                    offset + 1
                }
        }
    }
    let startOffsetOrNegative1ForNotFound: Double =
        switch foundStartOffset {
        case .none: -1.0
        case let .some(startOffset): Double(startOffset)
        }
    return .Triple(
        startOffsetOrNegative1ForNotFound, Double(row), Double(col)
    )
}

@Sendable public static func VirtualDom_noJavaScriptUri(_ uri: String) -> String {
    switch uri.wholeMatch(of: #/^\s*j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:/#.ignoresCase()) {
    case .some(_): ""
    case .none:
        uri
    }
}

@Sendable public static func VirtualDom_noJavaScriptOrHtmlUri(_ uri: String) -> String {
    switch uri.wholeMatch(
        of:
            #/^\s*(j\s*a\s*v\s*a\s*s\s*c\s*r\s*i\s*p\s*t\s*:|d\s*a\s*t\s*a\s*:\s*t\s*e\s*x\s*t\s*\/\s*h\s*t\s*m\s*l\s*(,|;))/#
            .ignoresCase()
    )
    {
    case .some(_): ""
    case .none:
        uri
    }
}

public enum Generated_message_preventDefault_stopPropagation<
    message: Sendable, preventDefault: Sendable, stopPropagation: Sendable
>: Sendable {
    case Record(
        message: message, preventDefault: preventDefault, stopPropagation: stopPropagation)
    var message: message {
        switch self {
        case let .Record(result, _, _): result
        }
    }
    var preventDefault: preventDefault {
        switch self {
        case let .Record(_, result, _): result
        }
    }
    var stopPropagation: stopPropagation {
        switch self {
        case let .Record(_, _, result): result
        }
    }
}

public typealias VirtualDom_CustomHandledEvent<event> =
    Generated_message_preventDefault_stopPropagation<event, Bool, Bool>

public enum VirtualDom_Handler<event: Sendable>: Sendable {
    case VirtualDom_Normal(JsonDecode_Decoder<event>)
    case VirtualDom_MayStopPropagation(JsonDecode_Decoder<Tuple<event, Bool>>)
    case VirtualDom_MayPreventDefault(JsonDecode_Decoder<Tuple<event, Bool>>)
    case VirtualDom_Custom(JsonDecode_Decoder<VirtualDom_CustomHandledEvent<event>>)
}

public indirect enum VirtualDom_Attribute<event: Sendable>: Sendable {
    case VirtualDom_ModifierAttribute(
        namespace: String?,
        key: String,
        value: String
    )
    case VirtualDom_ModifierStyle(key: String, value: String)
    case VirtualDom_ModifierProperty(
        key: String,
        value: JsonDecode_Value
    )
    case VirtualDom_ModifierEventListener(
        name: String,
        handler: VirtualDom_Handler<event>
    )
}

public indirect enum VirtualDom_Node<event: Sendable>: Sendable {
    case VirtualDom_Text(String)
    case VirtualDom_Element(
        tag: String,
        namespace: String?,
        subs: List_List<VirtualDom_Node<event>>,
        modifiers: List_List<VirtualDom_Attribute<event>>
    )
    case VirtualDom_ElementKeyed(
        tag: String,
        namespace: String?,
        subs: List_List<Tuple<String, VirtualDom_Node<event>>>,
        modifiers: List_List<VirtualDom_Attribute<event>>
    )
    case VirtualDom_NodeLazy(
        // to know when to construct:
        // element-wise check for all pairs with typeErasedEq
        keys: [any Equatable & Sendable],
        construct: @Sendable () -> VirtualDom_Node<event>
    )
}

@Sendable
public static func VirtualDom_customHandledEventMap<event: Sendable, eventMapped: Sendable>(
    _ eventChange: (event) -> eventMapped,
    _ handledEvent: VirtualDom_CustomHandledEvent<event>
)
    -> VirtualDom_CustomHandledEvent<eventMapped>
{
    .Record(
        message: eventChange(handledEvent.message),
        preventDefault: handledEvent.preventDefault,
        stopPropagation: handledEvent.stopPropagation
    )
}

@Sendable public static func VirtualDom_text<event>(_ string: String) -> VirtualDom_Node<event>
{
    .VirtualDom_Text(string)
}

@Sendable public static func VirtualDom_node<event>(
    _ tag: String,
    _ modifiers: List_List<VirtualDom_Attribute<event>>,
    _ subs: List_List<VirtualDom_Node<event>>
)
    -> VirtualDom_Node<event>
{
    .VirtualDom_Element(
        tag: tag,
        namespace: .none,
        subs: subs, modifiers: modifiers)
}

@Sendable public static func VirtualDom_nodeNS<event>(
    namespace_: String,
    _ tag: String,
    _ modifiers: List_List<VirtualDom_Attribute<event>>,
    _ subs: List_List<VirtualDom_Node<event>>
)
    -> VirtualDom_Node<event>
{
    .VirtualDom_Element(
        tag: tag,
        namespace: .some(namespace_),
        subs: subs, modifiers: modifiers)
}

@Sendable public static func VirtualDom_KeyedNode<event>(
    _ tag: String,
    _ modifiers: List_List<VirtualDom_Attribute<event>>,
    _ subs: List_List<Tuple<String, VirtualDom_Node<event>>>
)
    -> VirtualDom_Node<event>
{
    .VirtualDom_ElementKeyed(
        tag: tag,
        namespace: .none,
        subs: subs, modifiers: modifiers)
}

@Sendable public static func VirtualDom_KeyedNodeNS<event>(
    namespace_: String,
    _ tag: String,
    _ modifiers: List_List<VirtualDom_Attribute<event>>,
    _ subs: List_List<Tuple<String, VirtualDom_Node<event>>>
)
    -> VirtualDom_Node<event>
{
    .VirtualDom_ElementKeyed(
        tag: tag,
        namespace: .some(namespace_),
        subs: subs, modifiers: modifiers)
}

@Sendable public static func VirtualDom_style<event>(
    _ key: String,
    _ value: String
)
    -> VirtualDom_Attribute<event>
{
    .VirtualDom_ModifierStyle(
        key: key,
        value: value)
}

@Sendable public static func VirtualDom_property<event>(
    _ key: String,
    _ value: JsonDecode_Value
)
    -> VirtualDom_Attribute<event>
{
    .VirtualDom_ModifierProperty(
        key: key,
        value: value)
}

@Sendable public static func VirtualDom_attribute<event>(_ key: String, _ value: String)
    -> VirtualDom_Attribute<event>
{
    .VirtualDom_ModifierAttribute(
        namespace: .none,
        key: key,
        value: value)
}

@Sendable public static func VirtualDom_attributeNS<event>(
    _ namespace_: String,
    _ key: String,
    _ value: String
)
    -> VirtualDom_Attribute<event>
{
    .VirtualDom_ModifierAttribute(
        namespace: .some(namespace_),
        key: key,
        value: value)
}
@Sendable public static func VirtualDom_on<event>(
    _ name: String,
    _ handler: VirtualDom_Handler<event>
)
    -> VirtualDom_Attribute<event>
{
    .VirtualDom_ModifierEventListener(
        name: name,
        handler: handler)
}

@Sendable public static func VirtualDom_mapAttribute<event, eventMapped>(
    _ eventChange: @escaping @Sendable (event) -> eventMapped,
    _ modifier: VirtualDom_Attribute<event>
)
    -> VirtualDom_Attribute<eventMapped>
{
    switch modifier {
    case let .VirtualDom_ModifierAttribute(namespace: namespace, key: key, value: value):
        .VirtualDom_ModifierAttribute(namespace: namespace, key: key, value: value)
    case let .VirtualDom_ModifierStyle(key: key, value: value):
        .VirtualDom_ModifierStyle(key: key, value: value)
    case let .VirtualDom_ModifierProperty(key: key, value: value):
        .VirtualDom_ModifierProperty(key: key, value: value)
    case let .VirtualDom_ModifierEventListener(name: name, handler: handler):
        .VirtualDom_ModifierEventListener(
            name: name,
            handler: VirtualDom_handlerMap(eventChange, handler)
        )
    }
}
static func VirtualDom_handlerMap<event, eventMapped>(
    _ eventChange: @escaping @Sendable (event) -> eventMapped,
    _ handler: VirtualDom_Handler<event>
)
    -> VirtualDom_Handler<eventMapped>
{
    switch handler {
    case let .VirtualDom_Normal(decoder):
        .VirtualDom_Normal(JsonDecode_map(eventChange, decoder))
    case let .VirtualDom_MayStopPropagation(decoder):
        .VirtualDom_MayStopPropagation(
            JsonDecode_map(
                { decoded in
                    .Tuple(eventChange(decoded.first), decoded.second)
                },
                decoder
            )
        )
    case let .VirtualDom_MayPreventDefault(decoder):
        .VirtualDom_MayPreventDefault(
            JsonDecode_map(
                { decoded in
                    .Tuple(eventChange(decoded.first), decoded.second)
                },
                decoder
            )
        )
    case let .VirtualDom_Custom(decoder):
        .VirtualDom_Custom(
            JsonDecode_map(
                { custom in
                    VirtualDom_customHandledEventMap(eventChange, custom)
                },
                decoder
            )
        )
    }
}

@Sendable public static func VirtualDom_map<event, eventMapped>(
    _ eventChange: @escaping @Sendable (event) -> eventMapped,
    _ node: VirtualDom_Node<event>
)
    -> VirtualDom_Node<eventMapped>
{
    switch node {
    case let .VirtualDom_Text(text): .VirtualDom_Text(text)
    case let .VirtualDom_Element(
        tag: tag, namespace: namespace, subs: subs, modifiers: modifiers):
        .VirtualDom_Element(
            tag: tag,
            namespace: namespace,
            subs: List_map({ sub in VirtualDom_map(eventChange, sub) }, subs),
            modifiers:
                List_map(
                    { modifier in VirtualDom_mapAttribute(eventChange, modifier) },
                    modifiers
                )
        )
    case let .VirtualDom_ElementKeyed(
        tag: tag, namespace: namespace, subs: subs, modifiers: modifiers):
        .VirtualDom_ElementKeyed(
            tag: tag,
            namespace: namespace,
            subs: List_map(
                { sub in .Tuple(sub.first, VirtualDom_map(eventChange, sub.second)) },
                subs),
            modifiers:
                List_map(
                    { modifier in VirtualDom_mapAttribute(eventChange, modifier) },
                    modifiers
                )
        )
    case let .VirtualDom_NodeLazy(keys: keys, construct: construct):
        .VirtualDom_NodeLazy(
            keys: keys,
            construct: { VirtualDom_map(eventChange, construct()) }
        )
    }
}

@Sendable public static func VirtualDom_lazy<a: Equatable & Sendable, event>(
    _ construct: @escaping @Sendable (a) -> VirtualDom_Node<event>,
    _ a: a
)
    -> VirtualDom_Node<event>
{
    .VirtualDom_NodeLazy(
        keys: [a],
        construct: { construct(a) }
    )
}
@Sendable
public static func VirtualDom_lazy2<a: Equatable & Sendable, b: Equatable & Sendable, event>(
    _ construct:
        @escaping @Sendable (a) -> (b) ->
        VirtualDom_Node<event>,
    _ a: a,
    _ b: b
)
    -> VirtualDom_Node<event>
{
    .VirtualDom_NodeLazy(
        keys: [a, b],
        construct: { construct(a)(b) }
    )
}
@Sendable
public static func VirtualDom_lazy3<
    a: Equatable & Sendable, b: Equatable & Sendable, c: Equatable & Sendable, event
>(
    _ construct:
        @escaping @Sendable (a) -> (b) -> (c) ->
        VirtualDom_Node<event>,
    _ a: a,
    _ b: b,
    _ c: c
)
    -> VirtualDom_Node<event>
{
    .VirtualDom_NodeLazy(
        keys: [a, b, c],
        construct: { construct(a)(b)(c) }
    )
}
@Sendable
public static func VirtualDom_lazy4<
    a: Equatable & Sendable, b: Equatable & Sendable, c: Equatable & Sendable,
    d: Equatable & Sendable, event
>(
    _ construct:
        @escaping @Sendable (a) -> (b) -> (c) -> (d) ->
        VirtualDom_Node<event>,
    _ a: a,
    _ b: b,
    _ c: c,
    _ d: d
)
    -> VirtualDom_Node<event>
{
    .VirtualDom_NodeLazy(
        keys: [a, b, c, d],
        construct: { construct(a)(b)(c)(d) }
    )
}
@Sendable
public static func VirtualDom_lazy5<
    a: Equatable & Sendable, b: Equatable & Sendable, c: Equatable & Sendable,
    d: Equatable & Sendable, e: Equatable & Sendable, event
>(
    _ construct:
        @escaping @Sendable (a) -> (b) -> (c) -> (d) -> (e) ->
        VirtualDom_Node<event>,
    _ a: a,
    _ b: b,
    _ c: c,
    _ d: d,
    _ e: e
)
    -> VirtualDom_Node<event>
{
    .VirtualDom_NodeLazy(
        keys: [a, b, c, d, e],
        construct: { construct(a)(b)(c)(d)(e) }
    )
}
@Sendable
public static func VirtualDom_lazy6<
    a: Equatable & Sendable, b: Equatable & Sendable, c: Equatable & Sendable,
    d: Equatable & Sendable, e: Equatable & Sendable, f: Equatable & Sendable, event
>(
    _ construct:
        @escaping @Sendable (a) -> (b) -> (c) -> (d) -> (e) -> (f) ->
        VirtualDom_Node<event>,
    _ a: a,
    _ b: b,
    _ c: c,
    _ d: d,
    _ e: e,
    _ f: f
)
    -> VirtualDom_Node<event>
{
    .VirtualDom_NodeLazy(
        keys: [a, b, c, d, e, f],
        construct: { construct(a)(b)(c)(d)(e)(f) }
    )
}
@Sendable
public static func VirtualDom_lazy7<
    a: Equatable & Sendable, b: Equatable & Sendable, c: Equatable & Sendable,
    d: Equatable & Sendable, e: Equatable & Sendable, f: Equatable & Sendable,
    g: Equatable & Sendable, event
>(
    _ construct:
        @escaping @Sendable (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> (g) ->
        VirtualDom_Node<event>,
    _ a: a,
    _ b: b,
    _ c: c,
    _ d: d,
    _ e: e,
    _ f: f,
    _ g: g
)
    -> VirtualDom_Node<event>
{
    .VirtualDom_NodeLazy(
        keys: [a, b, c, d, e, f, g],
        construct: { construct(a)(b)(c)(d)(e)(f)(g) }
    )
}
@Sendable
public static func VirtualDom_lazy8<
    a: Equatable & Sendable, b: Equatable & Sendable, c: Equatable & Sendable,
    d: Equatable & Sendable, e: Equatable & Sendable, f: Equatable & Sendable,
    g: Equatable & Sendable, h: Equatable & Sendable, event
>(
    _ construct:
        @escaping @Sendable (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> (g) -> (h) ->
        VirtualDom_Node<event>,
    _ a: a,
    _ b: b,
    _ c: c,
    _ d: d,
    _ e: e,
    _ f: f,
    _ g: g,
    _ h: h
)
    -> VirtualDom_Node<event>
{
    .VirtualDom_NodeLazy(
        keys: [a, b, c, d, e, f, g, h],
        construct: { construct(a)(b)(c)(d)(e)(f)(g)(h) }
    )
}

public enum Random_Seed: Sendable, Equatable {
    // FUTURE improvement: change to ints
    // the first number is the state of the RNG and stepped with each random generation
    // the second state is the increment which corresponds to an independent RNG
    case Random_Seed(Double, Double)
}

public struct Random_Generator<a: Sendable>: Sendable {
    let step: @Sendable (Random_Seed) -> (a, Random_Seed)
}

public static let Random_independentSeed: Random_Generator<Random_Seed> =
    Random_Generator(step: { (seed0: Random_Seed) in
        @Sendable func makeIndependentSeed(_ state: Double, _ b: Double, _ c: Double)
            -> Random_Seed
        {
            // Although it probably doesn't hold water theoretically, xor two
            // random numbers to make an increment less likely to be
            // pathological. Then make sure that it's odd, which is required.
            // Next make sure it is positive. Finally step it once before use.
            Random_next(
                .Random_Seed(
                    state, Bitwise_shiftRightZfBy(0.0, Bitwise_or(1.0, Bitwise_xor(b, c)))
                )
            )
        }
        let gen: Random_Generator<Double> = Random_int(0.0, 4294967295.0)
        return
            Random_map3(
                { state in { b in { c in makeIndependentSeed(state, b, c) } } },
                gen,
                gen,
                gen
            ).step(seed0)
    })

public static let Random_maxInt: Double = 2147483647.0
public static let Random_minInt: Double = -2147483648.0

@Sendable public static func Random_andThen<a: Sendable, b: Sendable>(
    _ callback: @Sendable @escaping (a) -> Random_Generator<b>,
    _ generator: Random_Generator<a>
) -> Random_Generator<b> {
    Random_Generator(step: { (seed: Random_Seed) in
        let (result, newSeed) = generator.step(seed)
        return callback(result).step(newSeed)
    })
}

@Sendable public static func Random_constant<a: Sendable>(_ value: a) -> Random_Generator<a> {
    Random_Generator(step: { (seed: Random_Seed) in (value, seed) })
}

@Sendable public static func Random_float(_ a: Double, _ b: Double) -> Random_Generator<Double>
{
    Random_Generator(step: { (seed0: Random_Seed) in
        // Get 64 bits of randomness
        let seed1: Random_Seed = Random_next(seed0)
        let n1: Double = Random_peel(seed1)
        let n0: Double = Random_peel(seed0)
        // Get a uniformly distributed IEEE-754 double between 0.0 and 1.0
        let lo: Double = Double(Bitwise_and(134217727.0, n1))
        let hi: Double = Double(Bitwise_and(67108863.0, n0))
        let val: Double =
            // These magic constants are 2^27 and 2^53
            Basics_fdiv((hi * 134217728.0) + lo, 9007199254740992.0)
        // Scale it into our range
        let range: Double = abs(b - a)
        let scaled: Double = Basics_add(Basics_mul(val, range), a)
        return (scaled, Random_next(seed1))
    })
}

@Sendable public static func Random_getByWeight<a: Sendable>(
    _ firstWeighted: Tuple<Double, a>,
    _ others: List_List<Tuple<Double, a>>,
    _ countdown: Double
) -> a {
    switch firstWeighted {
    case let .Tuple(weight, value):
        switch others {
        case .List_Empty:
            value
        case let .List_Cons(second, otherOthers):
            if countdown <= abs(weight) {
                value
            } else {
                Random_getByWeight(second, otherOthers, countdown - abs(weight))
            }
        }
    }
}

@Sendable public static func Random_initialSeed(_ x: Double) -> Random_Seed {
    switch Random_next(.Random_Seed(0.0, 1013904223.0)) {
    case let .Random_Seed(state1, incr):
        let state2: Double =
            Bitwise_shiftRightZfBy(0.0, Basics_add(state1, x))
        return Random_next(.Random_Seed(state2, incr))
    }
}

@Sendable public static func Random_int(_ a: Double, _ b: Double) -> Random_Generator<Double> {
    Random_Generator(step: { (seed0: Random_Seed) in
        let (lo, hi): (Double, Double) =
            if a < b {
                (a, b)
            } else {
                (b, a)
            }
        let range: Double = ((hi - lo) + 1.0)
        // fast path for power of 2
        if Bitwise_and(range - 1.0, range) == 0.0 {
            return
                (
                    Bitwise_shiftRightZfBy(
                        0.0,
                        Bitwise_and(range - 1.0, Random_peel(seed0))
                    )
                        + lo,
                    Random_next(seed0)
                )
        } else {
            let threshold: Double =
                // essentially: period % max
                Bitwise_shiftRightZfBy(
                    0.0,
                    Basics_remainderBy(
                        range,
                        Bitwise_shiftRightZfBy(0.0, -range)
                    )
                )
            @Sendable func accountForBias(_ seed: Random_Seed) -> (Double, Random_Seed) {
                let x: Double = Random_peel(seed)
                let seedN: Random_Seed = Random_next(seed)
                return if x < threshold {
                    // in practice this recurses almost never
                    accountForBias(seedN)
                } else {
                    (Basics_remainderBy(range, x) + lo, seedN)
                }
            }
            return accountForBias(seed0)
        }
    })
}

@Sendable public static func Random_lazy<a: Sendable>(
    _ callback: @Sendable @escaping (Unit) -> Random_Generator<a>
) -> Random_Generator<a> {
    Random_Generator(step: { (seed: Random_Seed) in
        callback(.Unit).step(seed)
    })
}

@Sendable public static func Random_list<a: Sendable>(
    _ n: Double, _ elementGenerator: Random_Generator<a>
) -> Random_Generator<List_List<a>> {
    let gen: @Sendable (Random_Seed) -> (a, Random_Seed) = elementGenerator.step
    return Random_Generator(step: { (seed: Random_Seed) in
        Random_listHelp(.List_Empty, n, gen, seed)
    })
}

@Sendable public static func Random_listHelp<a: Sendable>(
    _ revList: List_List<a>,
    _ n: Double,
    _ gen: @Sendable @escaping (Random_Seed) -> (a, Random_Seed),
    _ seed: Random_Seed
) -> (List_List<a>, Random_Seed) {
    if Basics_lt(n, 1.0) {
        return (revList, seed)
    } else {
        let (value, newSeed): (a, Random_Seed) = gen(seed)
        return
            Random_listHelp(
                .List_Cons(value, revList),
                n - 1.0,
                gen,
                newSeed
            )
    }
}

@Sendable public static func Random_map<a: Sendable, b: Sendable>(
    _ valueChange: @Sendable @escaping (a) -> b,
    _ generator: Random_Generator<a>
) -> Random_Generator<b> {
    Random_Generator(step: { (seed0: Random_Seed) in
        let (value, seed1): (a, Random_Seed) = generator.step(seed0)
        return (valueChange(value), seed1)
    })
}
@Sendable
public static func Random_map2<
    a: Sendable, b: Sendable, combined: Sendable
>(
    _ combine: @Sendable @escaping (a) -> (b) -> combined,
    _ aGenerator: Random_Generator<a>,
    _ bGenerator: Random_Generator<b>
) -> Random_Generator<combined> {
    Random_Generator(step: { (seed0: Random_Seed) in
        let (a, seed1): (a, Random_Seed) = aGenerator.step(seed0)
        let (b, seed2): (b, Random_Seed) = bGenerator.step(seed1)
        return (combine(a)(b), seed2)
    })
}
@Sendable
public static func Random_map3<
    a: Sendable, b: Sendable, c: Sendable, combined: Sendable
>(
    _ combine: @Sendable @escaping (a) -> (b) -> (c) -> combined,
    _ aGenerator: Random_Generator<a>,
    _ bGenerator: Random_Generator<b>,
    _ cGenerator: Random_Generator<c>
) -> Random_Generator<combined> {
    Random_Generator(step: { (seed0: Random_Seed) in
        let (a, seed1): (a, Random_Seed) = aGenerator.step(seed0)
        let (b, seed2): (b, Random_Seed) = bGenerator.step(seed1)
        let (c, seed3): (c, Random_Seed) = cGenerator.step(seed2)
        return (combine(a)(b)(c), seed3)
    })
}
@Sendable
public static func Random_map4<
    a: Sendable, b: Sendable, c: Sendable, d: Sendable, combined: Sendable
>(
    _ combine: @Sendable @escaping (a) -> (b) -> (c) -> (d) -> combined,
    _ aGenerator: Random_Generator<a>,
    _ bGenerator: Random_Generator<b>,
    _ cGenerator: Random_Generator<c>,
    _ dGenerator: Random_Generator<d>
) -> Random_Generator<combined> {
    Random_Generator(step: { (seed0: Random_Seed) in
        let (a, seed1): (a, Random_Seed) = aGenerator.step(seed0)
        let (b, seed2): (b, Random_Seed) = bGenerator.step(seed1)
        let (c, seed3): (c, Random_Seed) = cGenerator.step(seed2)
        let (d, seed4): (d, Random_Seed) = dGenerator.step(seed3)
        return (combine(a)(b)(c)(d), seed4)
    })
}
@Sendable
public static func Random_map5<
    a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, combined: Sendable
>(
    _ combine: @Sendable @escaping (a) -> (b) -> (c) -> (d) -> (e) -> combined,
    _ aGenerator: Random_Generator<a>,
    _ bGenerator: Random_Generator<b>,
    _ cGenerator: Random_Generator<c>,
    _ dGenerator: Random_Generator<d>,
    _ eGenerator: Random_Generator<e>
) -> Random_Generator<combined> {
    Random_Generator(step: { (seed0: Random_Seed) in
        let (a, seed1): (a, Random_Seed) = aGenerator.step(seed0)
        let (b, seed2): (b, Random_Seed) = bGenerator.step(seed1)
        let (c, seed3): (c, Random_Seed) = cGenerator.step(seed2)
        let (d, seed4): (d, Random_Seed) = dGenerator.step(seed3)
        let (e, seed5): (e, Random_Seed) = eGenerator.step(seed4)
        return (combine(a)(b)(c)(d)(e), seed5)
    })
}

@Sendable public static func Random_next(_ generated_0: Random_Seed) -> Random_Seed {
    // step the RNG to produce the next seed
    // this is incredibly simple: multiply the state by a constant factor, modulus it
    // by 2^32, and add a magic addend. The addend can be varied to produce independent
    // RNGs, so it is stored as part of the seed. It is given to the new seed unchanged.
    switch generated_0 {
    case let .Random_Seed(state0, incr):
        // The magic constant is from Numerical Recipes
        .Random_Seed(Bitwise_shiftRightZfBy(0.0, (state0 * 1664525.0) + incr), incr)
    }
}

@Sendable public static func Random_pair<a: Sendable, b: Sendable>(
    _ genA: Random_Generator<a>,
    _ genB: Random_Generator<b>
) -> Random_Generator<Tuple<a, b>> {
    Random_map2({ (a: a) in { (b: b) in .Tuple(a, b) } }, genA, genB)
}

// obtain a pseudorandom 32-bit integer from a seed
@Sendable public static func Random_peel(_ seed: Random_Seed) -> Double {
    // This is the RXS-M-SH version of PCG, see section 6.3.4 of the paper
    // and line 184 of pcg_variants.h in the 0.94 (non-minimal) C implementation,
    // the latter of which is the source of the magic constant.
    switch seed {
    case let .Random_Seed(state, _):
        let word: Double =
            Bitwise_xor(
                state,
                Bitwise_shiftRightZfBy(
                    Bitwise_shiftRightZfBy(28.0, state) + 4.0,
                    state
                )
            )
            * 277803737.0
        return Bitwise_shiftRightZfBy(
            0.0,
            Bitwise_xor(
                Bitwise_shiftRightZfBy(22.0, word),
                word
            )
        )
    }
}

@Sendable public static func Random_step<a: Sendable>(
    _ generator: Random_Generator<a>,
    _ seed: Random_Seed
) -> Tuple<a, Random_Seed> {
    let (value, newSeed): (a, Random_Seed) = generator.step(seed)
    return .Tuple(value, newSeed)
}

@Sendable public static func Random_uniform<a: Sendable>(_ value: a, _ valueList: List_List<a>)
    -> Random_Generator<a>
{
    Random_weighted(Random_addOne(value), List_map(Random_addOne, valueList))
}
@Sendable public static func Random_addOne<a: Sendable>(_ value: a) -> Tuple<Double, a> {
    .Tuple(1.0, value)
}

@Sendable public static func Random_weighted<a: Sendable>(
    _ first: Tuple<Double, a>,
    _ others: List_List<Tuple<Double, a>>
) -> Random_Generator<a> {
    @Sendable func normalize<ignored: Sendable>(_ weighted: Tuple<Double, ignored>) -> Double {
        abs(weighted.first)
    }
    let total: Double = normalize(first) + List_sum(List_map(normalize, others))
    return Random_map(
        { (countdown: Double) in
            Random_getByWeight(first, others, countdown)
        },
        Random_float(0.0, total)
    )
}


public enum Unicode_Category: Sendable {
    case Unicode_LetterLowercase
    case Unicode_LetterModifier
    case Unicode_LetterOther
    case Unicode_LetterTitlecase
    case Unicode_LetterUppercase
    case Unicode_MarkEnclosing
    case Unicode_MarkNonSpacing
    case Unicode_MarkSpacingCombining
    case Unicode_NumberDecimalDigit
    case Unicode_NumberLetter
    case Unicode_NumberOther
    case Unicode_OtherControl
    case Unicode_OtherFormat
    case Unicode_OtherNotAssigned
    case Unicode_OtherPrivateUse
    case Unicode_OtherSurrogate
    case Unicode_PunctuationClose
    case Unicode_PunctuationConnector
    case Unicode_PunctuationDash
    case Unicode_PunctuationFinalQuote
    case Unicode_PunctuationInitialQuote
    case Unicode_PunctuationOpen
    case Unicode_PunctuationOther
    case Unicode_SeparatorLine
    case Unicode_SeparatorParagraph
    case Unicode_SeparatorSpace
    case Unicode_SymbolCurrency
    case Unicode_SymbolMath
    case Unicode_SymbolModifier
    case Unicode_SymbolOther
}

public indirect enum StructuredWriter_Writer: Sendable {
    case StructuredWriter_Append(StructuredWriter_Writer, StructuredWriter_Writer)
    case StructuredWriter_Breaked(List_List<StructuredWriter_Writer>)
    case StructuredWriter_Indent(Double, StructuredWriter_Writer)
    case StructuredWriter_Joined(List_List<StructuredWriter_Writer>)
    case StructuredWriter_Sep(Triple<String, String, String>, Bool, List_List<StructuredWriter_Writer>)
    case StructuredWriter_Spaced(List_List<StructuredWriter_Writer>)
    case StructuredWriter_Str(String)
}

public indirect enum Rope_RopeFilled<a: Sendable>: Sendable {
    case Rope_Branch2(Rope_RopeFilled<a>, Rope_RopeFilled<a>)
    case Rope_Leaf(a, Unit)
}

public typealias Rope_Rope<a> =
    Maybe_Maybe<Rope_RopeFilled<a>>

public indirect enum Print_Print: Sendable {
    case Print_Exact(String, Unit)
    case Print_FollowedBy(Print_Print, Print_Print)
    case Print_Linebreak(Unit, Unit)
    case Print_LinebreakIndented(Unit, Unit)
    case Print_WithIndentAtNextMultipleOf4(Print_Print, Unit)
    case Print_WithIndentIncreasedBy(Double, Print_Print)
}

public enum Print_LineSpread: Sendable {
    case Print_MultipleLines
    case Print_SingleLine
}

public enum Parser_Trailing: Sendable {
    case Parser_Forbidden
    case Parser_Mandatory
    case Parser_Optional
}

public enum Parser_Step<state: Sendable, a: Sendable>: Sendable {
    case Parser_Done(a)
    case Parser_Loop(state)
}

public enum Parser_Problem: Sendable {
    case Parser_BadRepeat
    case Parser_Expecting(String)
    case Parser_ExpectingBinary
    case Parser_ExpectingEnd
    case Parser_ExpectingFloat
    case Parser_ExpectingHex
    case Parser_ExpectingInt
    case Parser_ExpectingKeyword(String)
    case Parser_ExpectingNumber
    case Parser_ExpectingOctal
    case Parser_ExpectingSymbol(String)
    case Parser_ExpectingVariable
    case Parser_Problem(String)
    case Parser_UnexpectedChar
}

public enum Parser_Nestable: Sendable {
    case Parser_Nestable
    case Parser_NotNestable
}

public enum ParserLenient_Step<state: Sendable, a: Sendable>: Sendable {
    case ParserLenient_Done(a)
    case ParserLenient_Loop(state)
}

public enum ParserLenient_Base: Sendable {
    case ParserLenient_Decimal
    case ParserLenient_Hexadecimal
}

public enum ParserFast_Step<state: Sendable, a: Sendable>: Sendable {
    case ParserFast_Done(a)
    case ParserFast_Loop(state)
}

public indirect enum ParserFast_Problem: Sendable {
    case ParserFast_ExpectingAnyChar(Double, Double)
    case ParserFast_ExpectingCharSatisfyingPredicate(Double, Double)
    case ParserFast_ExpectingCustom(Double, Double, String)
    case ParserFast_ExpectingKeyword(Double, Double, String)
    case ParserFast_ExpectingNumber(Double, Double)
    case ParserFast_ExpectingOneOf(ParserFast_Problem, ParserFast_Problem, List_List<ParserFast_Problem>)
    case ParserFast_ExpectingStringSatisfyingPredicate(Double, Double)
    case ParserFast_ExpectingSymbol(Double, Double, String)
}

public enum ParserFast_Base: Sendable {
    case ParserFast_Decimal
    case ParserFast_Hexadecimal
}

public enum ParserAdvanced_Trailing: Sendable {
    case ParserAdvanced_Forbidden
    case ParserAdvanced_Mandatory
    case ParserAdvanced_Optional
}

public enum ParserAdvanced_Token<x: Sendable>: Sendable {
    case ParserAdvanced_Token(String, x)
}

public enum ParserAdvanced_Step<state: Sendable, a: Sendable>: Sendable {
    case ParserAdvanced_Done(a)
    case ParserAdvanced_Loop(state)
}

public enum ParserAdvanced_Nestable: Sendable {
    case ParserAdvanced_Nestable
    case ParserAdvanced_NotNestable
}

public enum Generated_rawAfterAtDocsLines_whileAtDocsLines<rawAfterAtDocsLines: Sendable, whileAtDocsLines: Sendable>: Sendable {
    case Record(rawAfterAtDocsLines: rawAfterAtDocsLines, whileAtDocsLines: whileAtDocsLines)
    var rawAfterAtDocsLines: rawAfterAtDocsLines {
        switch self {
        case let Generated_rawAfterAtDocsLines_whileAtDocsLines.Record(rawAfterAtDocsLines: result, whileAtDocsLines: _):
            result
        }
    }
    var whileAtDocsLines: whileAtDocsLines {
        switch self {
        case let Generated_rawAfterAtDocsLines_whileAtDocsLines.Record(rawAfterAtDocsLines: _, whileAtDocsLines: result):
            result
        }
    }
}

public enum Generated_qualification_unqualified<qualification: Sendable, unqualified: Sendable>: Sendable {
    case Record(qualification: qualification, unqualified: unqualified)
    var qualification: qualification {
        switch self {
        case let Generated_qualification_unqualified.Record(qualification: result, unqualified: _):
            result
        }
    }
    var unqualified: unqualified {
        switch self {
        case let Generated_qualification_unqualified.Record(qualification: _, unqualified: result):
            result
        }
    }
}

public enum Generated_previousRange_print<previousRange: Sendable, print: Sendable>: Sendable {
    case Record(previousRange: previousRange, print: print)
    var previousRange: previousRange {
        switch self {
        case let Generated_previousRange_print.Record(previousRange: result, print: _):
            result
        }
    }
    var print: print {
        switch self {
        case let Generated_previousRange_print.Record(previousRange: _, print: result):
            result
        }
    }
}

public enum Generated_previousLineSpread_rightToLeft<previousLineSpread: Sendable, rightToLeft: Sendable>: Sendable {
    case Record(previousLineSpread: previousLineSpread, rightToLeft: rightToLeft)
    var previousLineSpread: previousLineSpread {
        switch self {
        case let Generated_previousLineSpread_rightToLeft.Record(previousLineSpread: result, rightToLeft: _):
            result
        }
    }
    var rightToLeft: rightToLeft {
        switch self {
        case let Generated_previousLineSpread_rightToLeft.Record(previousLineSpread: _, rightToLeft: result):
            result
        }
    }
}

public enum Generated_portDocumentationComments_remainingComments<portDocumentationComments: Sendable, remainingComments: Sendable>: Sendable {
    case Record(portDocumentationComments: portDocumentationComments, remainingComments: remainingComments)
    var portDocumentationComments: portDocumentationComments {
        switch self {
        case let Generated_portDocumentationComments_remainingComments.Record(portDocumentationComments: result, remainingComments: _):
            result
        }
    }
    var remainingComments: remainingComments {
        switch self {
        case let Generated_portDocumentationComments_remainingComments.Record(portDocumentationComments: _, remainingComments: result):
            result
        }
    }
}

public enum Generated_onlySpaces_spaceCount<onlySpaces: Sendable, spaceCount: Sendable>: Sendable {
    case Record(onlySpaces: onlySpaces, spaceCount: spaceCount)
    var onlySpaces: onlySpaces {
        switch self {
        case let Generated_onlySpaces_spaceCount.Record(onlySpaces: result, spaceCount: _):
            result
        }
    }
    var spaceCount: spaceCount {
        switch self {
        case let Generated_onlySpaces_spaceCount.Record(onlySpaces: _, spaceCount: result):
            result
        }
    }
}

public enum Generated_name_typeAnnotation<name: Sendable, typeAnnotation: Sendable>: Sendable {
    case Record(name: name, typeAnnotation: typeAnnotation)
    var name: name {
        switch self {
        case let Generated_name_typeAnnotation.Record(name: result, typeAnnotation: _):
            result
        }
    }
    var typeAnnotation: typeAnnotation {
        switch self {
        case let Generated_name_typeAnnotation.Record(name: _, typeAnnotation: result):
            result
        }
    }
}

public enum Generated_name_startLocation_typeAnnotation<name: Sendable, startLocation: Sendable, typeAnnotation: Sendable>: Sendable {
    case Record(name: name, startLocation: startLocation, typeAnnotation: typeAnnotation)
    var name: name {
        switch self {
        case let Generated_name_startLocation_typeAnnotation.Record(name: result, startLocation: _, typeAnnotation: _):
            result
        }
    }
    var startLocation: startLocation {
        switch self {
        case let Generated_name_startLocation_typeAnnotation.Record(name: _, startLocation: result, typeAnnotation: _):
            result
        }
    }
    var typeAnnotation: typeAnnotation {
        switch self {
        case let Generated_name_startLocation_typeAnnotation.Record(name: _, startLocation: _, typeAnnotation: result):
            result
        }
    }
}

public enum Generated_name_parameters_typeAnnotation<name: Sendable, parameters: Sendable, typeAnnotation: Sendable>: Sendable {
    case Record(name: name, parameters: parameters, typeAnnotation: typeAnnotation)
    var name: name {
        switch self {
        case let Generated_name_parameters_typeAnnotation.Record(name: result, parameters: _, typeAnnotation: _):
            result
        }
    }
    var parameters: parameters {
        switch self {
        case let Generated_name_parameters_typeAnnotation.Record(name: _, parameters: result, typeAnnotation: _):
            result
        }
    }
    var typeAnnotation: typeAnnotation {
        switch self {
        case let Generated_name_parameters_typeAnnotation.Record(name: _, parameters: _, typeAnnotation: result):
            result
        }
    }
}

public enum Generated_name_open_<name: Sendable, open_: Sendable>: Sendable {
    case Record(name: name, open_: open_)
    var name: name {
        switch self {
        case let Generated_name_open_.Record(name: result, open_: _):
            result
        }
    }
    var open_: open_ {
        switch self {
        case let Generated_name_open_.Record(name: _, open_: result):
            result
        }
    }
}

public enum Generated_nameValueSeparator_printValueNotParenthesized<nameValueSeparator: Sendable, printValueNotParenthesized: Sendable>: Sendable {
    case Record(nameValueSeparator: nameValueSeparator, printValueNotParenthesized: printValueNotParenthesized)
    var nameValueSeparator: nameValueSeparator {
        switch self {
        case let Generated_nameValueSeparator_printValueNotParenthesized.Record(nameValueSeparator: result, printValueNotParenthesized: _):
            result
        }
    }
    var printValueNotParenthesized: printValueNotParenthesized {
        switch self {
        case let Generated_nameValueSeparator_printValueNotParenthesized.Record(nameValueSeparator: _, printValueNotParenthesized: result):
            result
        }
    }
}

public enum Generated_moduleName_name<moduleName: Sendable, name: Sendable>: Sendable {
    case Record(moduleName: moduleName, name: name)
    var moduleName: moduleName {
        switch self {
        case let Generated_moduleName_name.Record(moduleName: result, name: _):
            result
        }
    }
    var name: name {
        switch self {
        case let Generated_moduleName_name.Record(moduleName: _, name: result):
            result
        }
    }
}

public enum Generated_maybeThirdPart_secondPart<maybeThirdPart: Sendable, secondPart: Sendable>: Sendable {
    case Record(maybeThirdPart: maybeThirdPart, secondPart: secondPart)
    var maybeThirdPart: maybeThirdPart {
        switch self {
        case let Generated_maybeThirdPart_secondPart.Record(maybeThirdPart: result, secondPart: _):
            result
        }
    }
    var secondPart: secondPart {
        switch self {
        case let Generated_maybeThirdPart_secondPart.Record(maybeThirdPart: _, secondPart: result):
            result
        }
    }
}

public enum Generated_maybeCommentsBeforeName_maybeCommentsBetweenNameAndValue_syntax_valuePrint<maybeCommentsBeforeName: Sendable, maybeCommentsBetweenNameAndValue: Sendable, syntax: Sendable, valuePrint: Sendable>: Sendable {
    case Record(maybeCommentsBeforeName: maybeCommentsBeforeName, maybeCommentsBetweenNameAndValue: maybeCommentsBetweenNameAndValue, syntax: syntax, valuePrint: valuePrint)
    var maybeCommentsBeforeName: maybeCommentsBeforeName {
        switch self {
        case let Generated_maybeCommentsBeforeName_maybeCommentsBetweenNameAndValue_syntax_valuePrint.Record(maybeCommentsBeforeName: result, maybeCommentsBetweenNameAndValue: _, syntax: _, valuePrint: _):
            result
        }
    }
    var maybeCommentsBetweenNameAndValue: maybeCommentsBetweenNameAndValue {
        switch self {
        case let Generated_maybeCommentsBeforeName_maybeCommentsBetweenNameAndValue_syntax_valuePrint.Record(maybeCommentsBeforeName: _, maybeCommentsBetweenNameAndValue: result, syntax: _, valuePrint: _):
            result
        }
    }
    var syntax: syntax {
        switch self {
        case let Generated_maybeCommentsBeforeName_maybeCommentsBetweenNameAndValue_syntax_valuePrint.Record(maybeCommentsBeforeName: _, maybeCommentsBetweenNameAndValue: _, syntax: result, valuePrint: _):
            result
        }
    }
    var valuePrint: valuePrint {
        switch self {
        case let Generated_maybeCommentsBeforeName_maybeCommentsBetweenNameAndValue_syntax_valuePrint.Record(maybeCommentsBeforeName: _, maybeCommentsBetweenNameAndValue: _, syntax: _, valuePrint: result):
            result
        }
    }
}

public enum Generated_lineSpread_print<lineSpread: Sendable, print: Sendable>: Sendable {
    case Record(lineSpread: lineSpread, print: print)
    var lineSpread: lineSpread {
        switch self {
        case let Generated_lineSpread_print.Record(lineSpread: result, print: _):
            result
        }
    }
    var print: print {
        switch self {
        case let Generated_lineSpread_print.Record(lineSpread: _, print: result):
            result
        }
    }
}

public enum Generated_lineSpreadMinimum_printPartNotParenthesized<lineSpreadMinimum: Sendable, printPartNotParenthesized: Sendable>: Sendable {
    case Record(lineSpreadMinimum: lineSpreadMinimum, printPartNotParenthesized: printPartNotParenthesized)
    var lineSpreadMinimum: lineSpreadMinimum {
        switch self {
        case let Generated_lineSpreadMinimum_printPartNotParenthesized.Record(lineSpreadMinimum: result, printPartNotParenthesized: _):
            result
        }
    }
    var printPartNotParenthesized: printPartNotParenthesized {
        switch self {
        case let Generated_lineSpreadMinimum_printPartNotParenthesized.Record(lineSpreadMinimum: _, printPartNotParenthesized: result):
            result
        }
    }
}

public enum Generated_lineSpreadMinimum_printArgumentParenthesizedIfSpaceSeparated<lineSpreadMinimum: Sendable, printArgumentParenthesizedIfSpaceSeparated: Sendable>: Sendable {
    case Record(lineSpreadMinimum: lineSpreadMinimum, printArgumentParenthesizedIfSpaceSeparated: printArgumentParenthesizedIfSpaceSeparated)
    var lineSpreadMinimum: lineSpreadMinimum {
        switch self {
        case let Generated_lineSpreadMinimum_printArgumentParenthesizedIfSpaceSeparated.Record(lineSpreadMinimum: result, printArgumentParenthesizedIfSpaceSeparated: _):
            result
        }
    }
    var printArgumentParenthesizedIfSpaceSeparated: printArgumentParenthesizedIfSpaceSeparated {
        switch self {
        case let Generated_lineSpreadMinimum_printArgumentParenthesizedIfSpaceSeparated.Record(lineSpreadMinimum: _, printArgumentParenthesizedIfSpaceSeparated: result):
            result
        }
    }
}

public enum Generated_length_string<length: Sendable, string: Sendable>: Sendable {
    case Record(length: length, string: string)
    var length: length {
        switch self {
        case let Generated_length_string.Record(length: result, string: _):
            result
        }
    }
    var string: string {
        switch self {
        case let Generated_length_string.Record(length: _, string: result):
            result
        }
    }
}

public enum Generated_interfaces_name_version<interfaces: Sendable, name: Sendable, version: Sendable>: Sendable {
    case Record(interfaces: interfaces, name: name, version: version)
    var interfaces: interfaces {
        switch self {
        case let Generated_interfaces_name_version.Record(interfaces: result, name: _, version: _):
            result
        }
    }
    var name: name {
        switch self {
        case let Generated_interfaces_name_version.Record(interfaces: _, name: result, version: _):
            result
        }
    }
    var version: version {
        switch self {
        case let Generated_interfaces_name_version.Record(interfaces: _, name: _, version: result):
            result
        }
    }
}

public enum Generated_int_offset<int: Sendable, offset: Sendable>: Sendable {
    case Record(int: int, offset: offset)
    var int: int {
        switch self {
        case let Generated_int_offset.Record(int: result, offset: _):
            result
        }
    }
    var offset: offset {
        switch self {
        case let Generated_int_offset.Record(int: _, offset: result):
            result
        }
    }
}

public enum Generated_inner_reserved_start<inner: Sendable, reserved: Sendable, start: Sendable>: Sendable {
    case Record(inner: inner, reserved: reserved, start: start)
    var inner: inner {
        switch self {
        case let Generated_inner_reserved_start.Record(inner: result, reserved: _, start: _):
            result
        }
    }
    var reserved: reserved {
        switch self {
        case let Generated_inner_reserved_start.Record(inner: _, reserved: result, start: _):
            result
        }
    }
    var start: start {
        switch self {
        case let Generated_inner_reserved_start.Record(inner: _, reserved: _, start: result):
            result
        }
    }
}

public enum Generated_indent<indent: Sendable>: Sendable {
    case Record(indent: indent)
    var indent: indent {
        switch self {
        case let Generated_indent.Record(indent: result):
            result
        }
    }
}

public enum Generated_inType_outType<inType: Sendable, outType: Sendable>: Sendable {
    case Record(inType: inType, outType: outType)
    var inType: inType {
        switch self {
        case let Generated_inType_outType.Record(inType: result, outType: _):
            result
        }
    }
    var outType: outType {
        switch self {
        case let Generated_inType_outType.Record(inType: _, outType: result):
            result
        }
    }
}

public enum Generated_implementationName_typeAnnotation<implementationName: Sendable, typeAnnotation: Sendable>: Sendable {
    case Record(implementationName: implementationName, typeAnnotation: typeAnnotation)
    var implementationName: implementationName {
        switch self {
        case let Generated_implementationName_typeAnnotation.Record(implementationName: result, typeAnnotation: _):
            result
        }
    }
    var typeAnnotation: typeAnnotation {
        switch self {
        case let Generated_implementationName_typeAnnotation.Record(implementationName: _, typeAnnotation: result):
            result
        }
    }
}

public enum Generated_head_tail<head: Sendable, tail: Sendable>: Sendable {
    case Record(head: head, tail: tail)
    var head: head {
        switch self {
        case let Generated_head_tail.Record(head: result, tail: _):
            result
        }
    }
    var tail: tail {
        switch self {
        case let Generated_head_tail.Record(head: _, tail: result):
            result
        }
    }
}

public enum Generated_headVariant_name_parameters_tailVariantsReverse<headVariant: Sendable, name: Sendable, parameters: Sendable, tailVariantsReverse: Sendable>: Sendable {
    case Record(headVariant: headVariant, name: name, parameters: parameters, tailVariantsReverse: tailVariantsReverse)
    var headVariant: headVariant {
        switch self {
        case let Generated_headVariant_name_parameters_tailVariantsReverse.Record(headVariant: result, name: _, parameters: _, tailVariantsReverse: _):
            result
        }
    }
    var name: name {
        switch self {
        case let Generated_headVariant_name_parameters_tailVariantsReverse.Record(headVariant: _, name: result, parameters: _, tailVariantsReverse: _):
            result
        }
    }
    var parameters: parameters {
        switch self {
        case let Generated_headVariant_name_parameters_tailVariantsReverse.Record(headVariant: _, name: _, parameters: result, tailVariantsReverse: _):
            result
        }
    }
    var tailVariantsReverse: tailVariantsReverse {
        switch self {
        case let Generated_headVariant_name_parameters_tailVariantsReverse.Record(headVariant: _, name: _, parameters: _, tailVariantsReverse: result):
            result
        }
    }
}

public enum Generated_fullRange_part0_part1_part2_part3_part4Up<fullRange: Sendable, part0: Sendable, part1: Sendable, part2: Sendable, part3: Sendable, part4Up: Sendable>: Sendable {
    case Record(fullRange: fullRange, part0: part0, part1: part1, part2: part2, part3: part3, part4Up: part4Up)
    var fullRange: fullRange {
        switch self {
        case let Generated_fullRange_part0_part1_part2_part3_part4Up.Record(fullRange: result, part0: _, part1: _, part2: _, part3: _, part4Up: _):
            result
        }
    }
    var part0: part0 {
        switch self {
        case let Generated_fullRange_part0_part1_part2_part3_part4Up.Record(fullRange: _, part0: result, part1: _, part2: _, part3: _, part4Up: _):
            result
        }
    }
    var part1: part1 {
        switch self {
        case let Generated_fullRange_part0_part1_part2_part3_part4Up.Record(fullRange: _, part0: _, part1: result, part2: _, part3: _, part4Up: _):
            result
        }
    }
    var part2: part2 {
        switch self {
        case let Generated_fullRange_part0_part1_part2_part3_part4Up.Record(fullRange: _, part0: _, part1: _, part2: result, part3: _, part4Up: _):
            result
        }
    }
    var part3: part3 {
        switch self {
        case let Generated_fullRange_part0_part1_part2_part3_part4Up.Record(fullRange: _, part0: _, part1: _, part2: _, part3: result, part4Up: _):
            result
        }
    }
    var part4Up: part4Up {
        switch self {
        case let Generated_fullRange_part0_part1_part2_part3_part4Up.Record(fullRange: _, part0: _, part1: _, part2: _, part3: _, part4Up: result):
            result
        }
    }
}

public enum Generated_fullRange_part0_part1_part2<fullRange: Sendable, part0: Sendable, part1: Sendable, part2: Sendable>: Sendable {
    case Record(fullRange: fullRange, part0: part0, part1: part1, part2: part2)
    var fullRange: fullRange {
        switch self {
        case let Generated_fullRange_part0_part1_part2.Record(fullRange: result, part0: _, part1: _, part2: _):
            result
        }
    }
    var part0: part0 {
        switch self {
        case let Generated_fullRange_part0_part1_part2.Record(fullRange: _, part0: result, part1: _, part2: _):
            result
        }
    }
    var part1: part1 {
        switch self {
        case let Generated_fullRange_part0_part1_part2.Record(fullRange: _, part0: _, part1: result, part2: _):
            result
        }
    }
    var part2: part2 {
        switch self {
        case let Generated_fullRange_part0_part1_part2.Record(fullRange: _, part0: _, part1: _, part2: result):
            result
        }
    }
}

public enum Generated_fullRange_part0_part1<fullRange: Sendable, part0: Sendable, part1: Sendable>: Sendable {
    case Record(fullRange: fullRange, part0: part0, part1: part1)
    var fullRange: fullRange {
        switch self {
        case let Generated_fullRange_part0_part1.Record(fullRange: result, part0: _, part1: _):
            result
        }
    }
    var part0: part0 {
        switch self {
        case let Generated_fullRange_part0_part1.Record(fullRange: _, part0: result, part1: _):
            result
        }
    }
    var part1: part1 {
        switch self {
        case let Generated_fullRange_part0_part1.Record(fullRange: _, part0: _, part1: result):
            result
        }
    }
}

public enum Generated_fullRange_notParenthesized<fullRange: Sendable, notParenthesized: Sendable>: Sendable {
    case Record(fullRange: fullRange, notParenthesized: notParenthesized)
    var fullRange: fullRange {
        switch self {
        case let Generated_fullRange_notParenthesized.Record(fullRange: result, notParenthesized: _):
            result
        }
    }
    var notParenthesized: notParenthesized {
        switch self {
        case let Generated_fullRange_notParenthesized.Record(fullRange: _, notParenthesized: result):
            result
        }
    }
}

public enum Generated_fullRange_letDeclaration0_letDeclaration1Up_result<fullRange: Sendable, letDeclaration0: Sendable, letDeclaration1Up: Sendable, result: Sendable>: Sendable {
    case Record(fullRange: fullRange, letDeclaration0: letDeclaration0, letDeclaration1Up: letDeclaration1Up, result: result)
    var fullRange: fullRange {
        switch self {
        case let Generated_fullRange_letDeclaration0_letDeclaration1Up_result.Record(fullRange: result, letDeclaration0: _, letDeclaration1Up: _, result: _):
            result
        }
    }
    var letDeclaration0: letDeclaration0 {
        switch self {
        case let Generated_fullRange_letDeclaration0_letDeclaration1Up_result.Record(fullRange: _, letDeclaration0: result, letDeclaration1Up: _, result: _):
            result
        }
    }
    var letDeclaration1Up: letDeclaration1Up {
        switch self {
        case let Generated_fullRange_letDeclaration0_letDeclaration1Up_result.Record(fullRange: _, letDeclaration0: _, letDeclaration1Up: result, result: _):
            result
        }
    }
    var result: result {
        switch self {
        case let Generated_fullRange_letDeclaration0_letDeclaration1Up_result.Record(fullRange: _, letDeclaration0: _, letDeclaration1Up: _, result: result):
            result
        }
    }
}

public enum Generated_fullRange_left_operator__right<fullRange: Sendable, left: Sendable, operator_: Sendable, right: Sendable>: Sendable {
    case Record(fullRange: fullRange, left: left, operator_: operator_, right: right)
    var fullRange: fullRange {
        switch self {
        case let Generated_fullRange_left_operator__right.Record(fullRange: result, left: _, operator_: _, right: _):
            result
        }
    }
    var left: left {
        switch self {
        case let Generated_fullRange_left_operator__right.Record(fullRange: _, left: result, operator_: _, right: _):
            result
        }
    }
    var operator_: operator_ {
        switch self {
        case let Generated_fullRange_left_operator__right.Record(fullRange: _, left: _, operator_: result, right: _):
            result
        }
    }
    var right: right {
        switch self {
        case let Generated_fullRange_left_operator__right.Record(fullRange: _, left: _, operator_: _, right: result):
            result
        }
    }
}

public enum Generated_fullRange_inType_outType<fullRange: Sendable, inType: Sendable, outType: Sendable>: Sendable {
    case Record(fullRange: fullRange, inType: inType, outType: outType)
    var fullRange: fullRange {
        switch self {
        case let Generated_fullRange_inType_outType.Record(fullRange: result, inType: _, outType: _):
            result
        }
    }
    var inType: inType {
        switch self {
        case let Generated_fullRange_inType_outType.Record(fullRange: _, inType: result, outType: _):
            result
        }
    }
    var outType: outType {
        switch self {
        case let Generated_fullRange_inType_outType.Record(fullRange: _, inType: _, outType: result):
            result
        }
    }
}

public enum Generated_firstFieldValue_tailFields<firstFieldValue: Sendable, tailFields: Sendable>: Sendable {
    case Record(firstFieldValue: firstFieldValue, tailFields: tailFields)
    var firstFieldValue: firstFieldValue {
        switch self {
        case let Generated_firstFieldValue_tailFields.Record(firstFieldValue: result, tailFields: _):
            result
        }
    }
    var tailFields: tailFields {
        switch self {
        case let Generated_firstFieldValue_tailFields.Record(firstFieldValue: _, tailFields: result):
            result
        }
    }
}

public enum Generated_finishedBlocks_rawSinceAtDocs<finishedBlocks: Sendable, rawSinceAtDocs: Sendable>: Sendable {
    case Record(finishedBlocks: finishedBlocks, rawSinceAtDocs: rawSinceAtDocs)
    var finishedBlocks: finishedBlocks {
        switch self {
        case let Generated_finishedBlocks_rawSinceAtDocs.Record(finishedBlocks: result, rawSinceAtDocs: _):
            result
        }
    }
    var rawSinceAtDocs: rawSinceAtDocs {
        switch self {
        case let Generated_finishedBlocks_rawSinceAtDocs.Record(finishedBlocks: _, rawSinceAtDocs: result):
            result
        }
    }
}

public enum Generated_fields_fullRange_recordVariable<fields: Sendable, fullRange: Sendable, recordVariable: Sendable>: Sendable {
    case Record(fields: fields, fullRange: fullRange, recordVariable: recordVariable)
    var fields: fields {
        switch self {
        case let Generated_fields_fullRange_recordVariable.Record(fields: result, fullRange: _, recordVariable: _):
            result
        }
    }
    var fullRange: fullRange {
        switch self {
        case let Generated_fields_fullRange_recordVariable.Record(fields: _, fullRange: result, recordVariable: _):
            result
        }
    }
    var recordVariable: recordVariable {
        switch self {
        case let Generated_fields_fullRange_recordVariable.Record(fields: _, fullRange: _, recordVariable: result):
            result
        }
    }
}

public enum Generated_fields_fullRange<fields: Sendable, fullRange: Sendable>: Sendable {
    case Record(fields: fields, fullRange: fullRange)
    var fields: fields {
        switch self {
        case let Generated_fields_fullRange.Record(fields: result, fullRange: _):
            result
        }
    }
    var fullRange: fullRange {
        switch self {
        case let Generated_fields_fullRange.Record(fields: _, fullRange: result):
            result
        }
    }
}

public enum Generated_extensionRight_leftPrecedence_symbol<extensionRight: Sendable, leftPrecedence: Sendable, symbol: Sendable>: Sendable {
    case Record(extensionRight: extensionRight, leftPrecedence: leftPrecedence, symbol: symbol)
    var extensionRight: extensionRight {
        switch self {
        case let Generated_extensionRight_leftPrecedence_symbol.Record(extensionRight: result, leftPrecedence: _, symbol: _):
            result
        }
    }
    var leftPrecedence: leftPrecedence {
        switch self {
        case let Generated_extensionRight_leftPrecedence_symbol.Record(extensionRight: _, leftPrecedence: result, symbol: _):
            result
        }
    }
    var symbol: symbol {
        switch self {
        case let Generated_extensionRight_leftPrecedence_symbol.Record(extensionRight: _, leftPrecedence: _, symbol: result):
            result
        }
    }
}

public enum Generated_extensionRightParser_leftPrecedence_symbol<extensionRightParser: Sendable, leftPrecedence: Sendable, symbol: Sendable>: Sendable {
    case Record(extensionRightParser: extensionRightParser, leftPrecedence: leftPrecedence, symbol: symbol)
    var extensionRightParser: extensionRightParser {
        switch self {
        case let Generated_extensionRightParser_leftPrecedence_symbol.Record(extensionRightParser: result, leftPrecedence: _, symbol: _):
            result
        }
    }
    var leftPrecedence: leftPrecedence {
        switch self {
        case let Generated_extensionRightParser_leftPrecedence_symbol.Record(extensionRightParser: _, leftPrecedence: result, symbol: _):
            result
        }
    }
    var symbol: symbol {
        switch self {
        case let Generated_extensionRightParser_leftPrecedence_symbol.Record(extensionRightParser: _, leftPrecedence: _, symbol: result):
            result
        }
    }
}

public enum Generated_expression_operator_<expression: Sendable, operator_: Sendable>: Sendable {
    case Record(expression: expression, operator_: operator_)
    var expression: expression {
        switch self {
        case let Generated_expression_operator_.Record(expression: result, operator_: _):
            result
        }
    }
    var operator_: operator_ {
        switch self {
        case let Generated_expression_operator_.Record(expression: _, operator_: result):
            result
        }
    }
}

public enum Generated_expression_maybeCommentsBeforeExpression_operator_<expression: Sendable, maybeCommentsBeforeExpression: Sendable, operator_: Sendable>: Sendable {
    case Record(expression: expression, maybeCommentsBeforeExpression: maybeCommentsBeforeExpression, operator_: operator_)
    var expression: expression {
        switch self {
        case let Generated_expression_maybeCommentsBeforeExpression_operator_.Record(expression: result, maybeCommentsBeforeExpression: _, operator_: _):
            result
        }
    }
    var maybeCommentsBeforeExpression: maybeCommentsBeforeExpression {
        switch self {
        case let Generated_expression_maybeCommentsBeforeExpression_operator_.Record(expression: _, maybeCommentsBeforeExpression: result, operator_: _):
            result
        }
    }
    var operator_: operator_ {
        switch self {
        case let Generated_expression_maybeCommentsBeforeExpression_operator_.Record(expression: _, maybeCommentsBeforeExpression: _, operator_: result):
            result
        }
    }
}

public enum Generated_expression_expressionPrint_maybeCommentsBeforeExpression_operator__previousLineSpread<expression: Sendable, expressionPrint: Sendable, maybeCommentsBeforeExpression: Sendable, operator_: Sendable, previousLineSpread: Sendable>: Sendable {
    case Record(expression: expression, expressionPrint: expressionPrint, maybeCommentsBeforeExpression: maybeCommentsBeforeExpression, operator_: operator_, previousLineSpread: previousLineSpread)
    var expression: expression {
        switch self {
        case let Generated_expression_expressionPrint_maybeCommentsBeforeExpression_operator__previousLineSpread.Record(expression: result, expressionPrint: _, maybeCommentsBeforeExpression: _, operator_: _, previousLineSpread: _):
            result
        }
    }
    var expressionPrint: expressionPrint {
        switch self {
        case let Generated_expression_expressionPrint_maybeCommentsBeforeExpression_operator__previousLineSpread.Record(expression: _, expressionPrint: result, maybeCommentsBeforeExpression: _, operator_: _, previousLineSpread: _):
            result
        }
    }
    var maybeCommentsBeforeExpression: maybeCommentsBeforeExpression {
        switch self {
        case let Generated_expression_expressionPrint_maybeCommentsBeforeExpression_operator__previousLineSpread.Record(expression: _, expressionPrint: _, maybeCommentsBeforeExpression: result, operator_: _, previousLineSpread: _):
            result
        }
    }
    var operator_: operator_ {
        switch self {
        case let Generated_expression_expressionPrint_maybeCommentsBeforeExpression_operator__previousLineSpread.Record(expression: _, expressionPrint: _, maybeCommentsBeforeExpression: _, operator_: result, previousLineSpread: _):
            result
        }
    }
    var previousLineSpread: previousLineSpread {
        switch self {
        case let Generated_expression_expressionPrint_maybeCommentsBeforeExpression_operator__previousLineSpread.Record(expression: _, expressionPrint: _, maybeCommentsBeforeExpression: _, operator_: _, previousLineSpread: result):
            result
        }
    }
}

public enum Generated_exposingList_moduleName<exposingList: Sendable, moduleName: Sendable>: Sendable {
    case Record(exposingList: exposingList, moduleName: moduleName)
    var exposingList: exposingList {
        switch self {
        case let Generated_exposingList_moduleName.Record(exposingList: result, moduleName: _):
            result
        }
    }
    var moduleName: moduleName {
        switch self {
        case let Generated_exposingList_moduleName.Record(exposingList: _, moduleName: result):
            result
        }
    }
}

public enum Generated_exposingList_moduleAlias_moduleName<exposingList: Sendable, moduleAlias: Sendable, moduleName: Sendable>: Sendable {
    case Record(exposingList: exposingList, moduleAlias: moduleAlias, moduleName: moduleName)
    var exposingList: exposingList {
        switch self {
        case let Generated_exposingList_moduleAlias_moduleName.Record(exposingList: result, moduleAlias: _, moduleName: _):
            result
        }
    }
    var moduleAlias: moduleAlias {
        switch self {
        case let Generated_exposingList_moduleAlias_moduleName.Record(exposingList: _, moduleAlias: result, moduleName: _):
            result
        }
    }
    var moduleName: moduleName {
        switch self {
        case let Generated_exposingList_moduleAlias_moduleName.Record(exposingList: _, moduleAlias: _, moduleName: result):
            result
        }
    }
}

public enum Generated_exposes_remaining<exposes: Sendable, remaining: Sendable>: Sendable {
    case Record(exposes: exposes, remaining: remaining)
    var exposes: exposes {
        switch self {
        case let Generated_exposes_remaining.Record(exposes: result, remaining: _):
            result
        }
    }
    var remaining: remaining {
        switch self {
        case let Generated_exposes_remaining.Record(exposes: _, remaining: result):
            result
        }
    }
}

public enum Generated_expose0_expose1Up_fullRange<expose0: Sendable, expose1Up: Sendable, fullRange: Sendable>: Sendable {
    case Record(expose0: expose0, expose1Up: expose1Up, fullRange: fullRange)
    var expose0: expose0 {
        switch self {
        case let Generated_expose0_expose1Up_fullRange.Record(expose0: result, expose1Up: _, fullRange: _):
            result
        }
    }
    var expose1Up: expose1Up {
        switch self {
        case let Generated_expose0_expose1Up_fullRange.Record(expose0: _, expose1Up: result, fullRange: _):
            result
        }
    }
    var fullRange: fullRange {
        switch self {
        case let Generated_expose0_expose1Up_fullRange.Record(expose0: _, expose1Up: _, fullRange: result):
            result
        }
    }
}

public enum Generated_exponent_result<exponent: Sendable, result: Sendable>: Sendable {
    case Record(exponent: exponent, result: result)
    var exponent: exponent {
        switch self {
        case let Generated_exponent_result.Record(exponent: result, result: _):
            result
        }
    }
    var result: result {
        switch self {
        case let Generated_exponent_result.Record(exponent: _, result: result):
            result
        }
    }
}

public enum Generated_expecting_inner_reserved_start<expecting: Sendable, inner: Sendable, reserved: Sendable, start: Sendable>: Sendable {
    case Record(expecting: expecting, inner: inner, reserved: reserved, start: start)
    var expecting: expecting {
        switch self {
        case let Generated_expecting_inner_reserved_start.Record(expecting: result, inner: _, reserved: _, start: _):
            result
        }
    }
    var inner: inner {
        switch self {
        case let Generated_expecting_inner_reserved_start.Record(expecting: _, inner: result, reserved: _, start: _):
            result
        }
    }
    var reserved: reserved {
        switch self {
        case let Generated_expecting_inner_reserved_start.Record(expecting: _, inner: _, reserved: result, start: _):
            result
        }
    }
    var start: start {
        switch self {
        case let Generated_expecting_inner_reserved_start.Record(expecting: _, inner: _, reserved: _, start: result):
            result
        }
    }
}

public enum Generated_end_start<end: Sendable, start: Sendable>: Sendable {
    case Record(end: end, start: start)
    var end: end {
        switch self {
        case let Generated_end_start.Record(end: result, start: _):
            result
        }
    }
    var start: start {
        switch self {
        case let Generated_end_start.Record(end: _, start: result):
            result
        }
    }
}

public enum Generated_end_item_separator_spaces_start_trailing<end: Sendable, item: Sendable, separator: Sendable, spaces: Sendable, start: Sendable, trailing: Sendable>: Sendable {
    case Record(end: end, item: item, separator: separator, spaces: spaces, start: start, trailing: trailing)
    var end: end {
        switch self {
        case let Generated_end_item_separator_spaces_start_trailing.Record(end: result, item: _, separator: _, spaces: _, start: _, trailing: _):
            result
        }
    }
    var item: item {
        switch self {
        case let Generated_end_item_separator_spaces_start_trailing.Record(end: _, item: result, separator: _, spaces: _, start: _, trailing: _):
            result
        }
    }
    var separator: separator {
        switch self {
        case let Generated_end_item_separator_spaces_start_trailing.Record(end: _, item: _, separator: result, spaces: _, start: _, trailing: _):
            result
        }
    }
    var spaces: spaces {
        switch self {
        case let Generated_end_item_separator_spaces_start_trailing.Record(end: _, item: _, separator: _, spaces: result, start: _, trailing: _):
            result
        }
    }
    var start: start {
        switch self {
        case let Generated_end_item_separator_spaces_start_trailing.Record(end: _, item: _, separator: _, spaces: _, start: result, trailing: _):
            result
        }
    }
    var trailing: trailing {
        switch self {
        case let Generated_end_item_separator_spaces_start_trailing.Record(end: _, item: _, separator: _, spaces: _, start: _, trailing: result):
            result
        }
    }
}

public enum Generated_endLocation_reverse<endLocation: Sendable, reverse: Sendable>: Sendable {
    case Record(endLocation: endLocation, reverse: reverse)
    var endLocation: endLocation {
        switch self {
        case let Generated_endLocation_reverse.Record(endLocation: result, reverse: _):
            result
        }
    }
    var reverse: reverse {
        switch self {
        case let Generated_endLocation_reverse.Record(endLocation: _, reverse: result):
            result
        }
    }
}

public enum Generated_elements_fullRange<elements: Sendable, fullRange: Sendable>: Sendable {
    case Record(elements: elements, fullRange: fullRange)
    var elements: elements {
        switch self {
        case let Generated_elements_fullRange.Record(elements: result, fullRange: _):
            result
        }
    }
    var fullRange: fullRange {
        switch self {
        case let Generated_elements_fullRange.Record(elements: _, fullRange: result):
            result
        }
    }
}

public enum Generated_documentation_generics_name_typeAnnotation<documentation: Sendable, generics: Sendable, name: Sendable, typeAnnotation: Sendable>: Sendable {
    case Record(documentation: documentation, generics: generics, name: name, typeAnnotation: typeAnnotation)
    var documentation: documentation {
        switch self {
        case let Generated_documentation_generics_name_typeAnnotation.Record(documentation: result, generics: _, name: _, typeAnnotation: _):
            result
        }
    }
    var generics: generics {
        switch self {
        case let Generated_documentation_generics_name_typeAnnotation.Record(documentation: _, generics: result, name: _, typeAnnotation: _):
            result
        }
    }
    var name: name {
        switch self {
        case let Generated_documentation_generics_name_typeAnnotation.Record(documentation: _, generics: _, name: result, typeAnnotation: _):
            result
        }
    }
    var typeAnnotation: typeAnnotation {
        switch self {
        case let Generated_documentation_generics_name_typeAnnotation.Record(documentation: _, generics: _, name: _, typeAnnotation: result):
            result
        }
    }
}

public enum Generated_direction_function_operator__precedence<direction: Sendable, function: Sendable, operator_: Sendable, precedence: Sendable>: Sendable {
    case Record(direction: direction, function: function, operator_: operator_, precedence: precedence)
    var direction: direction {
        switch self {
        case let Generated_direction_function_operator__precedence.Record(direction: result, function: _, operator_: _, precedence: _):
            result
        }
    }
    var function: function {
        switch self {
        case let Generated_direction_function_operator__precedence.Record(direction: _, function: result, operator_: _, precedence: _):
            result
        }
    }
    var operator_: operator_ {
        switch self {
        case let Generated_direction_function_operator__precedence.Record(direction: _, function: _, operator_: result, precedence: _):
            result
        }
    }
    var precedence: precedence {
        switch self {
        case let Generated_direction_function_operator__precedence.Record(direction: _, function: _, operator_: _, precedence: result):
            result
        }
    }
}

public enum Generated_direction_expression_symbol<direction: Sendable, expression: Sendable, symbol: Sendable>: Sendable {
    case Record(direction: direction, expression: expression, symbol: symbol)
    var direction: direction {
        switch self {
        case let Generated_direction_expression_symbol.Record(direction: result, expression: _, symbol: _):
            result
        }
    }
    var expression: expression {
        switch self {
        case let Generated_direction_expression_symbol.Record(direction: _, expression: result, symbol: _):
            result
        }
    }
    var symbol: symbol {
        switch self {
        case let Generated_direction_expression_symbol.Record(direction: _, expression: _, symbol: result):
            result
        }
    }
}

public enum Generated_declarations_expression<declarations: Sendable, expression: Sendable>: Sendable {
    case Record(declarations: declarations, expression: expression)
    var declarations: declarations {
        switch self {
        case let Generated_declarations_expression.Record(declarations: result, expression: _):
            result
        }
    }
    var expression: expression {
        switch self {
        case let Generated_declarations_expression.Record(declarations: _, expression: result):
            result
        }
    }
}

public enum Generated_declaration_lateImports<declaration: Sendable, lateImports: Sendable>: Sendable {
    case Record(declaration: declaration, lateImports: lateImports)
    var declaration: declaration {
        switch self {
        case let Generated_declaration_lateImports.Record(declaration: result, lateImports: _):
            result
        }
    }
    var lateImports: lateImports {
        switch self {
        case let Generated_declaration_lateImports.Record(declaration: _, lateImports: result):
            result
        }
    }
}

public enum Generated_declaration_documentation_signature<declaration: Sendable, documentation: Sendable, signature: Sendable>: Sendable {
    case Record(declaration: declaration, documentation: documentation, signature: signature)
    var declaration: declaration {
        switch self {
        case let Generated_declaration_documentation_signature.Record(declaration: result, documentation: _, signature: _):
            result
        }
    }
    var documentation: documentation {
        switch self {
        case let Generated_declaration_documentation_signature.Record(declaration: _, documentation: result, signature: _):
            result
        }
    }
    var signature: signature {
        switch self {
        case let Generated_declaration_documentation_signature.Record(declaration: _, documentation: _, signature: result):
            result
        }
    }
}

public enum Generated_constructors_documentation_generics_name<constructors: Sendable, documentation: Sendable, generics: Sendable, name: Sendable>: Sendable {
    case Record(constructors: constructors, documentation: documentation, generics: generics, name: name)
    var constructors: constructors {
        switch self {
        case let Generated_constructors_documentation_generics_name.Record(constructors: result, documentation: _, generics: _, name: _):
            result
        }
    }
    var documentation: documentation {
        switch self {
        case let Generated_constructors_documentation_generics_name.Record(constructors: _, documentation: result, generics: _, name: _):
            result
        }
    }
    var generics: generics {
        switch self {
        case let Generated_constructors_documentation_generics_name.Record(constructors: _, documentation: _, generics: result, name: _):
            result
        }
    }
    var name: name {
        switch self {
        case let Generated_constructors_documentation_generics_name.Record(constructors: _, documentation: _, generics: _, name: result):
            result
        }
    }
}

public enum Generated_consecutiveDoubleQuoteCount_result<consecutiveDoubleQuoteCount: Sendable, result: Sendable>: Sendable {
    case Record(consecutiveDoubleQuoteCount: consecutiveDoubleQuoteCount, result: result)
    var consecutiveDoubleQuoteCount: consecutiveDoubleQuoteCount {
        switch self {
        case let Generated_consecutiveDoubleQuoteCount_result.Record(consecutiveDoubleQuoteCount: result, result: _):
            result
        }
    }
    var result: result {
        switch self {
        case let Generated_consecutiveDoubleQuoteCount_result.Record(consecutiveDoubleQuoteCount: _, result: result):
            result
        }
    }
}

public enum Generated_condition_conditionLineSpreadMinimum_fullRange_onFalse_onTrue<condition: Sendable, conditionLineSpreadMinimum: Sendable, fullRange: Sendable, onFalse: Sendable, onTrue: Sendable>: Sendable {
    case Record(condition: condition, conditionLineSpreadMinimum: conditionLineSpreadMinimum, fullRange: fullRange, onFalse: onFalse, onTrue: onTrue)
    var condition: condition {
        switch self {
        case let Generated_condition_conditionLineSpreadMinimum_fullRange_onFalse_onTrue.Record(condition: result, conditionLineSpreadMinimum: _, fullRange: _, onFalse: _, onTrue: _):
            result
        }
    }
    var conditionLineSpreadMinimum: conditionLineSpreadMinimum {
        switch self {
        case let Generated_condition_conditionLineSpreadMinimum_fullRange_onFalse_onTrue.Record(condition: _, conditionLineSpreadMinimum: result, fullRange: _, onFalse: _, onTrue: _):
            result
        }
    }
    var fullRange: fullRange {
        switch self {
        case let Generated_condition_conditionLineSpreadMinimum_fullRange_onFalse_onTrue.Record(condition: _, conditionLineSpreadMinimum: _, fullRange: result, onFalse: _, onTrue: _):
            result
        }
    }
    var onFalse: onFalse {
        switch self {
        case let Generated_condition_conditionLineSpreadMinimum_fullRange_onFalse_onTrue.Record(condition: _, conditionLineSpreadMinimum: _, fullRange: _, onFalse: result, onTrue: _):
            result
        }
    }
    var onTrue: onTrue {
        switch self {
        case let Generated_condition_conditionLineSpreadMinimum_fullRange_onFalse_onTrue.Record(condition: _, conditionLineSpreadMinimum: _, fullRange: _, onFalse: _, onTrue: result):
            result
        }
    }
}

public enum Generated_comments_syntax<comments: Sendable, syntax: Sendable>: Sendable {
    case Record(comments: comments, syntax: syntax)
    var comments: comments {
        switch self {
        case let Generated_comments_syntax.Record(comments: result, syntax: _):
            result
        }
    }
    var syntax: syntax {
        switch self {
        case let Generated_comments_syntax.Record(comments: _, syntax: result):
            result
        }
    }
}

public enum Generated_comments_portDocumentationComments_previousEnd<comments: Sendable, portDocumentationComments: Sendable, previousEnd: Sendable>: Sendable {
    case Record(comments: comments, portDocumentationComments: portDocumentationComments, previousEnd: previousEnd)
    var comments: comments {
        switch self {
        case let Generated_comments_portDocumentationComments_previousEnd.Record(comments: result, portDocumentationComments: _, previousEnd: _):
            result
        }
    }
    var portDocumentationComments: portDocumentationComments {
        switch self {
        case let Generated_comments_portDocumentationComments_previousEnd.Record(comments: _, portDocumentationComments: result, previousEnd: _):
            result
        }
    }
    var previousEnd: previousEnd {
        switch self {
        case let Generated_comments_portDocumentationComments_previousEnd.Record(comments: _, portDocumentationComments: _, previousEnd: result):
            result
        }
    }
}

public enum Generated_comments_portDocumentationComment<comments: Sendable, portDocumentationComment: Sendable>: Sendable {
    case Record(comments: comments, portDocumentationComment: portDocumentationComment)
    var comments: comments {
        switch self {
        case let Generated_comments_portDocumentationComment.Record(comments: result, portDocumentationComment: _):
            result
        }
    }
    var portDocumentationComment: portDocumentationComment {
        switch self {
        case let Generated_comments_portDocumentationComment.Record(comments: _, portDocumentationComment: result):
            result
        }
    }
}

public enum Generated_comments_implementationName_typeAnnotation<comments: Sendable, implementationName: Sendable, typeAnnotation: Sendable>: Sendable {
    case Record(comments: comments, implementationName: implementationName, typeAnnotation: typeAnnotation)
    var comments: comments {
        switch self {
        case let Generated_comments_implementationName_typeAnnotation.Record(comments: result, implementationName: _, typeAnnotation: _):
            result
        }
    }
    var implementationName: implementationName {
        switch self {
        case let Generated_comments_implementationName_typeAnnotation.Record(comments: _, implementationName: result, typeAnnotation: _):
            result
        }
    }
    var typeAnnotation: typeAnnotation {
        switch self {
        case let Generated_comments_implementationName_typeAnnotation.Record(comments: _, implementationName: _, typeAnnotation: result):
            result
        }
    }
}

public enum Generated_comments_documentationComment<comments: Sendable, documentationComment: Sendable>: Sendable {
    case Record(comments: comments, documentationComment: documentationComment)
    var comments: comments {
        switch self {
        case let Generated_comments_documentationComment.Record(comments: result, documentationComment: _):
            result
        }
    }
    var documentationComment: documentationComment {
        switch self {
        case let Generated_comments_documentationComment.Record(comments: _, documentationComment: result):
            result
        }
    }
}

public enum Generated_comments_declarations_imports_moduleDefinition<comments: Sendable, declarations: Sendable, imports: Sendable, moduleDefinition: Sendable>: Sendable {
    case Record(comments: comments, declarations: declarations, imports: imports, moduleDefinition: moduleDefinition)
    var comments: comments {
        switch self {
        case let Generated_comments_declarations_imports_moduleDefinition.Record(comments: result, declarations: _, imports: _, moduleDefinition: _):
            result
        }
    }
    var declarations: declarations {
        switch self {
        case let Generated_comments_declarations_imports_moduleDefinition.Record(comments: _, declarations: result, imports: _, moduleDefinition: _):
            result
        }
    }
    var imports: imports {
        switch self {
        case let Generated_comments_declarations_imports_moduleDefinition.Record(comments: _, declarations: _, imports: result, moduleDefinition: _):
            result
        }
    }
    var moduleDefinition: moduleDefinition {
        switch self {
        case let Generated_comments_declarations_imports_moduleDefinition.Record(comments: _, declarations: _, imports: _, moduleDefinition: result):
            result
        }
    }
}

public enum Generated_comments_declarations<comments: Sendable, declarations: Sendable>: Sendable {
    case Record(comments: comments, declarations: declarations)
    var comments: comments {
        switch self {
        case let Generated_comments_declarations.Record(comments: result, declarations: _):
            result
        }
    }
    var declarations: declarations {
        switch self {
        case let Generated_comments_declarations.Record(comments: _, declarations: result):
            result
        }
    }
}

public enum Generated_commentsBetweenImports_previousImportRange<commentsBetweenImports: Sendable, previousImportRange: Sendable>: Sendable {
    case Record(commentsBetweenImports: commentsBetweenImports, previousImportRange: previousImportRange)
    var commentsBetweenImports: commentsBetweenImports {
        switch self {
        case let Generated_commentsBetweenImports_previousImportRange.Record(commentsBetweenImports: result, previousImportRange: _):
            result
        }
    }
    var previousImportRange: previousImportRange {
        switch self {
        case let Generated_commentsBetweenImports_previousImportRange.Record(commentsBetweenImports: _, previousImportRange: result):
            result
        }
    }
}

public enum Generated_comment0_comment1Up<comment0: Sendable, comment1Up: Sendable>: Sendable {
    case Record(comment0: comment0, comment1Up: comment1Up)
    var comment0: comment0 {
        switch self {
        case let Generated_comment0_comment1Up.Record(comment0: result, comment1Up: _):
            result
        }
    }
    var comment1Up: comment1Up {
        switch self {
        case let Generated_comment0_comment1Up.Record(comment0: _, comment1Up: result):
            result
        }
    }
}

public enum Generated_command_subscription<command: Sendable, subscription: Sendable>: Sendable {
    case Record(command: command, subscription: subscription)
    var command: command {
        switch self {
        case let Generated_command_subscription.Record(command: result, subscription: _):
            result
        }
    }
    var subscription: subscription {
        switch self {
        case let Generated_command_subscription.Record(command: _, subscription: result):
            result
        }
    }
}

public enum Generated_command_exposingList_moduleName_subscription<command: Sendable, exposingList: Sendable, moduleName: Sendable, subscription: Sendable>: Sendable {
    case Record(command: command, exposingList: exposingList, moduleName: moduleName, subscription: subscription)
    var command: command {
        switch self {
        case let Generated_command_exposingList_moduleName_subscription.Record(command: result, exposingList: _, moduleName: _, subscription: _):
            result
        }
    }
    var exposingList: exposingList {
        switch self {
        case let Generated_command_exposingList_moduleName_subscription.Record(command: _, exposingList: result, moduleName: _, subscription: _):
            result
        }
    }
    var moduleName: moduleName {
        switch self {
        case let Generated_command_exposingList_moduleName_subscription.Record(command: _, exposingList: _, moduleName: result, subscription: _):
            result
        }
    }
    var subscription: subscription {
        switch self {
        case let Generated_command_exposingList_moduleName_subscription.Record(command: _, exposingList: _, moduleName: _, subscription: result):
            result
        }
    }
}

public enum Generated_column_row<column: Sendable, row: Sendable>: Sendable {
    case Record(column: column, row: row)
    var column: column {
        switch self {
        case let Generated_column_row.Record(column: result, row: _):
            result
        }
    }
    var row: row {
        switch self {
        case let Generated_column_row.Record(column: _, row: result):
            result
        }
    }
}

public enum Generated_col_problem_row<col: Sendable, problem: Sendable, row: Sendable>: Sendable {
    case Record(col: col, problem: problem, row: row)
    var col: col {
        switch self {
        case let Generated_col_problem_row.Record(col: result, problem: _, row: _):
            result
        }
    }
    var problem: problem {
        switch self {
        case let Generated_col_problem_row.Record(col: _, problem: result, row: _):
            result
        }
    }
    var row: row {
        switch self {
        case let Generated_col_problem_row.Record(col: _, problem: _, row: result):
            result
        }
    }
}

public typealias Parser_DeadEnd =
    Generated_col_problem_row<Double, Parser_Problem, Double>

public enum Generated_col_indent_offset_row_src<col: Sendable, indent: Sendable, offset: Sendable, row: Sendable, src: Sendable>: Sendable {
    case Record(col: col, indent: indent, offset: offset, row: row, src: src)
    var col: col {
        switch self {
        case let Generated_col_indent_offset_row_src.Record(col: result, indent: _, offset: _, row: _, src: _):
            result
        }
    }
    var indent: indent {
        switch self {
        case let Generated_col_indent_offset_row_src.Record(col: _, indent: result, offset: _, row: _, src: _):
            result
        }
    }
    var offset: offset {
        switch self {
        case let Generated_col_indent_offset_row_src.Record(col: _, indent: _, offset: result, row: _, src: _):
            result
        }
    }
    var row: row {
        switch self {
        case let Generated_col_indent_offset_row_src.Record(col: _, indent: _, offset: _, row: result, src: _):
            result
        }
    }
    var src: src {
        switch self {
        case let Generated_col_indent_offset_row_src.Record(col: _, indent: _, offset: _, row: _, src: result):
            result
        }
    }
}

public typealias ParserFast_State =
    Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>

public enum ParserFast_PStep<value: Sendable>: Sendable {
    case ParserFast_Bad(Bool, ParserFast_Problem)
    case ParserFast_Good(value, ParserFast_State)
}

public enum ParserFast_Parser<a: Sendable>: Sendable {
    case ParserFast_Parser(@Sendable (ParserFast_State) -> ParserFast_PStep<a>)
}

public typealias ParserLenient_State =
    Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>

public enum ParserLenient_PStep<value: Sendable>: Sendable {
    case ParserLenient_Bad(Bool, Unit)
    case ParserLenient_Good(value, ParserLenient_State)
}

public enum ParserLenient_Parser<a: Sendable>: Sendable {
    case ParserLenient_Parser(@Sendable (ParserLenient_State) -> ParserLenient_PStep<a>)
}

public enum Generated_col_context_row<col: Sendable, context: Sendable, row: Sendable>: Sendable {
    case Record(col: col, context: context, row: row)
    var col: col {
        switch self {
        case let Generated_col_context_row.Record(col: result, context: _, row: _):
            result
        }
    }
    var context: context {
        switch self {
        case let Generated_col_context_row.Record(col: _, context: result, row: _):
            result
        }
    }
    var row: row {
        switch self {
        case let Generated_col_context_row.Record(col: _, context: _, row: result):
            result
        }
    }
}

public typealias ParserAdvanced_Located<context> =
    Generated_col_context_row<Double, context, Double>

public enum Generated_col_context_indent_offset_row_src<col: Sendable, context: Sendable, indent: Sendable, offset: Sendable, row: Sendable, src: Sendable>: Sendable {
    case Record(col: col, context: context, indent: indent, offset: offset, row: row, src: src)
    var col: col {
        switch self {
        case let Generated_col_context_indent_offset_row_src.Record(col: result, context: _, indent: _, offset: _, row: _, src: _):
            result
        }
    }
    var context: context {
        switch self {
        case let Generated_col_context_indent_offset_row_src.Record(col: _, context: result, indent: _, offset: _, row: _, src: _):
            result
        }
    }
    var indent: indent {
        switch self {
        case let Generated_col_context_indent_offset_row_src.Record(col: _, context: _, indent: result, offset: _, row: _, src: _):
            result
        }
    }
    var offset: offset {
        switch self {
        case let Generated_col_context_indent_offset_row_src.Record(col: _, context: _, indent: _, offset: result, row: _, src: _):
            result
        }
    }
    var row: row {
        switch self {
        case let Generated_col_context_indent_offset_row_src.Record(col: _, context: _, indent: _, offset: _, row: result, src: _):
            result
        }
    }
    var src: src {
        switch self {
        case let Generated_col_context_indent_offset_row_src.Record(col: _, context: _, indent: _, offset: _, row: _, src: result):
            result
        }
    }
}

public typealias ParserAdvanced_State<context> =
    Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<context>>, Double, Double, Double, String>

public enum Generated_col_contextStack_problem_row<col: Sendable, contextStack: Sendable, problem: Sendable, row: Sendable>: Sendable {
    case Record(col: col, contextStack: contextStack, problem: problem, row: row)
    var col: col {
        switch self {
        case let Generated_col_contextStack_problem_row.Record(col: result, contextStack: _, problem: _, row: _):
            result
        }
    }
    var contextStack: contextStack {
        switch self {
        case let Generated_col_contextStack_problem_row.Record(col: _, contextStack: result, problem: _, row: _):
            result
        }
    }
    var problem: problem {
        switch self {
        case let Generated_col_contextStack_problem_row.Record(col: _, contextStack: _, problem: result, row: _):
            result
        }
    }
    var row: row {
        switch self {
        case let Generated_col_contextStack_problem_row.Record(col: _, contextStack: _, problem: _, row: result):
            result
        }
    }
}

public typealias ParserAdvanced_DeadEnd<context, problem> =
    Generated_col_contextStack_problem_row<Double, List_List<Generated_col_context_row<Double, context, Double>>, problem, Double>

public indirect enum ParserAdvanced_Bag<c: Sendable, x: Sendable>: Sendable {
    case ParserAdvanced_AddRight(ParserAdvanced_Bag<c, x>, ParserAdvanced_DeadEnd<c, x>)
    case ParserAdvanced_Append(ParserAdvanced_Bag<c, x>, ParserAdvanced_Bag<c, x>)
    case ParserAdvanced_Empty
}

public enum ParserAdvanced_PStep<context: Sendable, problem: Sendable, value: Sendable>: Sendable {
    case ParserAdvanced_Bad(Bool, ParserAdvanced_Bag<context, problem>)
    case ParserAdvanced_Good(Bool, value, ParserAdvanced_State<context>)
}

public enum ParserAdvanced_Parser<context: Sendable, problem: Sendable, value: Sendable>: Sendable {
    case ParserAdvanced_Parser(@Sendable (ParserAdvanced_State<context>) -> ParserAdvanced_PStep<context, problem, value>)
}

public typealias Parser_Parser<a> =
    ParserAdvanced_Parser<Never, Parser_Problem, a>

public enum Generated_cases_expression_fullRange<cases: Sendable, expression: Sendable, fullRange: Sendable>: Sendable {
    case Record(cases: cases, expression: expression, fullRange: fullRange)
    var cases: cases {
        switch self {
        case let Generated_cases_expression_fullRange.Record(cases: result, expression: _, fullRange: _):
            result
        }
    }
    var expression: expression {
        switch self {
        case let Generated_cases_expression_fullRange.Record(cases: _, expression: result, fullRange: _):
            result
        }
    }
    var fullRange: fullRange {
        switch self {
        case let Generated_cases_expression_fullRange.Record(cases: _, expression: _, fullRange: result):
            result
        }
    }
}

public enum Generated_cases_expression<cases: Sendable, expression: Sendable>: Sendable {
    case Record(cases: cases, expression: expression)
    var cases: cases {
        switch self {
        case let Generated_cases_expression.Record(cases: result, expression: _):
            result
        }
    }
    var expression: expression {
        switch self {
        case let Generated_cases_expression.Record(cases: _, expression: result):
            result
        }
    }
}

public enum Generated_cases_comments_end<cases: Sendable, comments: Sendable, end: Sendable>: Sendable {
    case Record(cases: cases, comments: comments, end: end)
    var cases: cases {
        switch self {
        case let Generated_cases_comments_end.Record(cases: result, comments: _, end: _):
            result
        }
    }
    var comments: comments {
        switch self {
        case let Generated_cases_comments_end.Record(cases: _, comments: result, end: _):
            result
        }
    }
    var end: end {
        switch self {
        case let Generated_cases_comments_end.Record(cases: _, comments: _, end: result):
            result
        }
    }
}

public enum Generated_binary_float_hex_int_octal<binary: Sendable, float: Sendable, hex: Sendable, int: Sendable, octal: Sendable>: Sendable {
    case Record(binary: binary, float: float, hex: hex, int: int, octal: octal)
    var binary: binary {
        switch self {
        case let Generated_binary_float_hex_int_octal.Record(binary: result, float: _, hex: _, int: _, octal: _):
            result
        }
    }
    var float: float {
        switch self {
        case let Generated_binary_float_hex_int_octal.Record(binary: _, float: result, hex: _, int: _, octal: _):
            result
        }
    }
    var hex: hex {
        switch self {
        case let Generated_binary_float_hex_int_octal.Record(binary: _, float: _, hex: result, int: _, octal: _):
            result
        }
    }
    var int: int {
        switch self {
        case let Generated_binary_float_hex_int_octal.Record(binary: _, float: _, hex: _, int: result, octal: _):
            result
        }
    }
    var octal: octal {
        switch self {
        case let Generated_binary_float_hex_int_octal.Record(binary: _, float: _, hex: _, int: _, octal: result):
            result
        }
    }
}

public enum Generated_binary_expecting_float_hex_int_invalid_octal<binary: Sendable, expecting: Sendable, float: Sendable, hex: Sendable, int: Sendable, invalid: Sendable, octal: Sendable>: Sendable {
    case Record(binary: binary, expecting: expecting, float: float, hex: hex, int: int, invalid: invalid, octal: octal)
    var binary: binary {
        switch self {
        case let Generated_binary_expecting_float_hex_int_invalid_octal.Record(binary: result, expecting: _, float: _, hex: _, int: _, invalid: _, octal: _):
            result
        }
    }
    var expecting: expecting {
        switch self {
        case let Generated_binary_expecting_float_hex_int_invalid_octal.Record(binary: _, expecting: result, float: _, hex: _, int: _, invalid: _, octal: _):
            result
        }
    }
    var float: float {
        switch self {
        case let Generated_binary_expecting_float_hex_int_invalid_octal.Record(binary: _, expecting: _, float: result, hex: _, int: _, invalid: _, octal: _):
            result
        }
    }
    var hex: hex {
        switch self {
        case let Generated_binary_expecting_float_hex_int_invalid_octal.Record(binary: _, expecting: _, float: _, hex: result, int: _, invalid: _, octal: _):
            result
        }
    }
    var int: int {
        switch self {
        case let Generated_binary_expecting_float_hex_int_invalid_octal.Record(binary: _, expecting: _, float: _, hex: _, int: result, invalid: _, octal: _):
            result
        }
    }
    var invalid: invalid {
        switch self {
        case let Generated_binary_expecting_float_hex_int_invalid_octal.Record(binary: _, expecting: _, float: _, hex: _, int: _, invalid: result, octal: _):
            result
        }
    }
    var octal: octal {
        switch self {
        case let Generated_binary_expecting_float_hex_int_invalid_octal.Record(binary: _, expecting: _, float: _, hex: _, int: _, invalid: _, octal: result):
            result
        }
    }
}

public enum Generated_beforeRightest_rightest<beforeRightest: Sendable, rightest: Sendable>: Sendable {
    case Record(beforeRightest: beforeRightest, rightest: rightest)
    var beforeRightest: beforeRightest {
        switch self {
        case let Generated_beforeRightest_rightest.Record(beforeRightest: result, rightest: _):
            result
        }
    }
    var rightest: rightest {
        switch self {
        case let Generated_beforeRightest_rightest.Record(beforeRightest: _, rightest: result):
            result
        }
    }
}

public enum Generated_beforeRightestOperatorExpressionChain_rightestExpression_rightestOperator<beforeRightestOperatorExpressionChain: Sendable, rightestExpression: Sendable, rightestOperator: Sendable>: Sendable {
    case Record(beforeRightestOperatorExpressionChain: beforeRightestOperatorExpressionChain, rightestExpression: rightestExpression, rightestOperator: rightestOperator)
    var beforeRightestOperatorExpressionChain: beforeRightestOperatorExpressionChain {
        switch self {
        case let Generated_beforeRightestOperatorExpressionChain_rightestExpression_rightestOperator.Record(beforeRightestOperatorExpressionChain: result, rightestExpression: _, rightestOperator: _):
            result
        }
    }
    var rightestExpression: rightestExpression {
        switch self {
        case let Generated_beforeRightestOperatorExpressionChain_rightestExpression_rightestOperator.Record(beforeRightestOperatorExpressionChain: _, rightestExpression: result, rightestOperator: _):
            result
        }
    }
    var rightestOperator: rightestOperator {
        switch self {
        case let Generated_beforeRightestOperatorExpressionChain_rightestExpression_rightestOperator.Record(beforeRightestOperatorExpressionChain: _, rightestExpression: _, rightestOperator: result):
            result
        }
    }
}

public enum Generated_beforeRightestOperatorExpressionChain_leftest_rightestExpression_rightestOperator<beforeRightestOperatorExpressionChain: Sendable, leftest: Sendable, rightestExpression: Sendable, rightestOperator: Sendable>: Sendable {
    case Record(beforeRightestOperatorExpressionChain: beforeRightestOperatorExpressionChain, leftest: leftest, rightestExpression: rightestExpression, rightestOperator: rightestOperator)
    var beforeRightestOperatorExpressionChain: beforeRightestOperatorExpressionChain {
        switch self {
        case let Generated_beforeRightestOperatorExpressionChain_leftest_rightestExpression_rightestOperator.Record(beforeRightestOperatorExpressionChain: result, leftest: _, rightestExpression: _, rightestOperator: _):
            result
        }
    }
    var leftest: leftest {
        switch self {
        case let Generated_beforeRightestOperatorExpressionChain_leftest_rightestExpression_rightestOperator.Record(beforeRightestOperatorExpressionChain: _, leftest: result, rightestExpression: _, rightestOperator: _):
            result
        }
    }
    var rightestExpression: rightestExpression {
        switch self {
        case let Generated_beforeRightestOperatorExpressionChain_leftest_rightestExpression_rightestOperator.Record(beforeRightestOperatorExpressionChain: _, leftest: _, rightestExpression: result, rightestOperator: _):
            result
        }
    }
    var rightestOperator: rightestOperator {
        switch self {
        case let Generated_beforeRightestOperatorExpressionChain_leftest_rightestExpression_rightestOperator.Record(beforeRightestOperatorExpressionChain: _, leftest: _, rightestExpression: _, rightestOperator: result):
            result
        }
    }
}

public enum Generated_base_offsetAndInt<base: Sendable, offsetAndInt: Sendable>: Sendable {
    case Record(base: base, offsetAndInt: offsetAndInt)
    var base: base {
        switch self {
        case let Generated_base_offsetAndInt.Record(base: result, offsetAndInt: _):
            result
        }
    }
    var offsetAndInt: offsetAndInt {
        switch self {
        case let Generated_base_offsetAndInt.Record(base: _, offsetAndInt: result):
            result
        }
    }
}

public enum Generated_atDocsLines_comments<atDocsLines: Sendable, comments: Sendable>: Sendable {
    case Record(atDocsLines: atDocsLines, comments: comments)
    var atDocsLines: atDocsLines {
        switch self {
        case let Generated_atDocsLines_comments.Record(atDocsLines: result, comments: _):
            result
        }
    }
    var comments: comments {
        switch self {
        case let Generated_atDocsLines_comments.Record(atDocsLines: _, comments: result):
            result
        }
    }
}

public enum Generated_atDocsLine_rawBefore<atDocsLine: Sendable, rawBefore: Sendable>: Sendable {
    case Record(atDocsLine: atDocsLine, rawBefore: rawBefore)
    var atDocsLine: atDocsLine {
        switch self {
        case let Generated_atDocsLine_rawBefore.Record(atDocsLine: result, rawBefore: _):
            result
        }
    }
    var rawBefore: rawBefore {
        switch self {
        case let Generated_atDocsLine_rawBefore.Record(atDocsLine: _, rawBefore: result):
            result
        }
    }
}

public enum Generated_atDocsExposeLines_remainingExposes<atDocsExposeLines: Sendable, remainingExposes: Sendable>: Sendable {
    case Record(atDocsExposeLines: atDocsExposeLines, remainingExposes: remainingExposes)
    var atDocsExposeLines: atDocsExposeLines {
        switch self {
        case let Generated_atDocsExposeLines_remainingExposes.Record(atDocsExposeLines: result, remainingExposes: _):
            result
        }
    }
    var remainingExposes: remainingExposes {
        switch self {
        case let Generated_atDocsExposeLines_remainingExposes.Record(atDocsExposeLines: _, remainingExposes: result):
            result
        }
    }
}

public enum Generated_arguments_name<arguments: Sendable, name: Sendable>: Sendable {
    case Record(arguments: arguments, name: name)
    var arguments: arguments {
        switch self {
        case let Generated_arguments_name.Record(arguments: result, name: _):
            result
        }
    }
    var name: name {
        switch self {
        case let Generated_arguments_name.Record(arguments: _, name: result):
            result
        }
    }
}

public enum Generated_arguments_fullRange_start<arguments: Sendable, fullRange: Sendable, start: Sendable>: Sendable {
    case Record(arguments: arguments, fullRange: fullRange, start: start)
    var arguments: arguments {
        switch self {
        case let Generated_arguments_fullRange_start.Record(arguments: result, fullRange: _, start: _):
            result
        }
    }
    var fullRange: fullRange {
        switch self {
        case let Generated_arguments_fullRange_start.Record(arguments: _, fullRange: result, start: _):
            result
        }
    }
    var start: start {
        switch self {
        case let Generated_arguments_fullRange_start.Record(arguments: _, fullRange: _, start: result):
            result
        }
    }
}

public enum Generated_arguments_expression_signature_startName<arguments: Sendable, expression: Sendable, signature: Sendable, startName: Sendable>: Sendable {
    case Record(arguments: arguments, expression: expression, signature: signature, startName: startName)
    var arguments: arguments {
        switch self {
        case let Generated_arguments_expression_signature_startName.Record(arguments: result, expression: _, signature: _, startName: _):
            result
        }
    }
    var expression: expression {
        switch self {
        case let Generated_arguments_expression_signature_startName.Record(arguments: _, expression: result, signature: _, startName: _):
            result
        }
    }
    var signature: signature {
        switch self {
        case let Generated_arguments_expression_signature_startName.Record(arguments: _, expression: _, signature: result, startName: _):
            result
        }
    }
    var startName: startName {
        switch self {
        case let Generated_arguments_expression_signature_startName.Record(arguments: _, expression: _, signature: _, startName: result):
            result
        }
    }
}

public enum Generated_arguments_expression_name<arguments: Sendable, expression: Sendable, name: Sendable>: Sendable {
    case Record(arguments: arguments, expression: expression, name: name)
    var arguments: arguments {
        switch self {
        case let Generated_arguments_expression_name.Record(arguments: result, expression: _, name: _):
            result
        }
    }
    var expression: expression {
        switch self {
        case let Generated_arguments_expression_name.Record(arguments: _, expression: result, name: _):
            result
        }
    }
    var name: name {
        switch self {
        case let Generated_arguments_expression_name.Record(arguments: _, expression: _, name: result):
            result
        }
    }
}

public enum Generated_args_expression<args: Sendable, expression: Sendable>: Sendable {
    case Record(args: args, expression: expression)
    var args: args {
        switch self {
        case let Generated_args_expression.Record(args: result, expression: _):
            result
        }
    }
    var expression: expression {
        switch self {
        case let Generated_args_expression.Record(args: _, expression: result):
            result
        }
    }
}

public enum Generated_applied_argument0_argument1Up_fullRange<applied: Sendable, argument0: Sendable, argument1Up: Sendable, fullRange: Sendable>: Sendable {
    case Record(applied: applied, argument0: argument0, argument1Up: argument1Up, fullRange: fullRange)
    var applied: applied {
        switch self {
        case let Generated_applied_argument0_argument1Up_fullRange.Record(applied: result, argument0: _, argument1Up: _, fullRange: _):
            result
        }
    }
    var argument0: argument0 {
        switch self {
        case let Generated_applied_argument0_argument1Up_fullRange.Record(applied: _, argument0: result, argument1Up: _, fullRange: _):
            result
        }
    }
    var argument1Up: argument1Up {
        switch self {
        case let Generated_applied_argument0_argument1Up_fullRange.Record(applied: _, argument0: _, argument1Up: result, fullRange: _):
            result
        }
    }
    var fullRange: fullRange {
        switch self {
        case let Generated_applied_argument0_argument1Up_fullRange.Record(applied: _, argument0: _, argument1Up: _, fullRange: result):
            result
        }
    }
}

public enum Generated_aliasNameNode_aliasedPattern<aliasNameNode: Sendable, aliasedPattern: Sendable>: Sendable {
    case Record(aliasNameNode: aliasNameNode, aliasedPattern: aliasedPattern)
    var aliasNameNode: aliasNameNode {
        switch self {
        case let Generated_aliasNameNode_aliasedPattern.Record(aliasNameNode: result, aliasedPattern: _):
            result
        }
    }
    var aliasedPattern: aliasedPattern {
        switch self {
        case let Generated_aliasNameNode_aliasedPattern.Record(aliasNameNode: _, aliasedPattern: result):
            result
        }
    }
}

public enum Generated_afterCommitting_validateRightPrecedence<afterCommitting: Sendable, validateRightPrecedence: Sendable>: Sendable {
    case Record(afterCommitting: afterCommitting, validateRightPrecedence: validateRightPrecedence)
    var afterCommitting: afterCommitting {
        switch self {
        case let Generated_afterCommitting_validateRightPrecedence.Record(afterCommitting: result, validateRightPrecedence: _):
            result
        }
    }
    var validateRightPrecedence: validateRightPrecedence {
        switch self {
        case let Generated_afterCommitting_validateRightPrecedence.Record(afterCommitting: _, validateRightPrecedence: result):
            result
        }
    }
}

public enum Generated_afterCommitting_direction_symbol_validateRightPrecedence<afterCommitting: Sendable, direction: Sendable, symbol: Sendable, validateRightPrecedence: Sendable>: Sendable {
    case Record(afterCommitting: afterCommitting, direction: direction, symbol: symbol, validateRightPrecedence: validateRightPrecedence)
    var afterCommitting: afterCommitting {
        switch self {
        case let Generated_afterCommitting_direction_symbol_validateRightPrecedence.Record(afterCommitting: result, direction: _, symbol: _, validateRightPrecedence: _):
            result
        }
    }
    var direction: direction {
        switch self {
        case let Generated_afterCommitting_direction_symbol_validateRightPrecedence.Record(afterCommitting: _, direction: result, symbol: _, validateRightPrecedence: _):
            result
        }
    }
    var symbol: symbol {
        switch self {
        case let Generated_afterCommitting_direction_symbol_validateRightPrecedence.Record(afterCommitting: _, direction: _, symbol: result, validateRightPrecedence: _):
            result
        }
    }
    var validateRightPrecedence: validateRightPrecedence {
        switch self {
        case let Generated_afterCommitting_direction_symbol_validateRightPrecedence.Record(afterCommitting: _, direction: _, symbol: _, validateRightPrecedence: result):
            result
        }
    }
}

public typealias ElmSyntaxRange_Location =
    Generated_column_row<Double, Double>

public typealias ElmSyntaxRange_Range =
    Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location>

public typealias ElmSyntaxPrint_Print =
    @Sendable (Generated_indent<Double>) -> String

public typealias ElmSyntaxPattern_QualifiedNameRef =
    Generated_moduleName_name<List_List<String>, String>

public indirect enum ElmSyntaxParserLenient_RopeFilled<a: Sendable>: Sendable {
    case ElmSyntaxParserLenient_RopeBranch2(ElmSyntaxParserLenient_RopeFilled<a>, ElmSyntaxParserLenient_RopeFilled<a>)
    case ElmSyntaxParserLenient_RopeLeaf(a, Unit)
}

public typealias ElmSyntaxParserLenient_Rope<a> =
    Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<a>>

public typealias ElmSyntaxParserLenient_Parser<a> =
    ParserLenient_Parser<a>

public enum ElmSyntaxNode_Node<a: Sendable>: Sendable {
    case ElmSyntaxNode_Node(ElmSyntaxRange_Range, a)
}

public typealias ElmSyntaxParserLenient_Comments =
    Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>

public typealias ElmSyntaxParserLenient_WithComments<res> =
    Generated_comments_syntax<ElmSyntaxParserLenient_Comments, res>

public indirect enum ElmSyntaxPattern_Pattern: Sendable {
    case ElmSyntaxPattern_AllPattern
    case ElmSyntaxPattern_AsPattern(ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, ElmSyntaxNode_Node<String>)
    case ElmSyntaxPattern_CharPattern(UnicodeScalar)
    case ElmSyntaxPattern_FloatPattern(Double)
    case ElmSyntaxPattern_HexPattern(Double)
    case ElmSyntaxPattern_IntPattern(Double)
    case ElmSyntaxPattern_ListPattern(List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>)
    case ElmSyntaxPattern_NamedPattern(ElmSyntaxPattern_QualifiedNameRef, List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>)
    case ElmSyntaxPattern_ParenthesizedPattern(ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>)
    case ElmSyntaxPattern_RecordPattern(List_List<ElmSyntaxNode_Node<String>>)
    case ElmSyntaxPattern_StringPattern(String)
    case ElmSyntaxPattern_TuplePattern(List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>)
    case ElmSyntaxPattern_UnConsPattern(ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>)
    case ElmSyntaxPattern_UnitPattern
    case ElmSyntaxPattern_VarPattern(String)
}

public typealias ParserWithComments_Comments =
    Rope_Rope<ElmSyntaxNode_Node<String>>

public typealias ParserWithComments_WithComments<res> =
    Generated_comments_syntax<ParserWithComments_Comments, res>

public typealias ElmSyntaxModuleName_ModuleName =
    List_List<String>

public indirect enum ElmSyntaxTypeAnnotation_TypeAnnotation: Sendable {
    case ElmSyntaxTypeAnnotation_FunctionTypeAnnotation(ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>)
    case ElmSyntaxTypeAnnotation_GenericRecord(ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordDefinition>)
    case ElmSyntaxTypeAnnotation_GenericType(String)
    case ElmSyntaxTypeAnnotation_Record(ElmSyntaxTypeAnnotation_RecordDefinition)
    case ElmSyntaxTypeAnnotation_Tupled(List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>)
    case ElmSyntaxTypeAnnotation_Typed(ElmSyntaxNode_Node<Tuple<ElmSyntaxModuleName_ModuleName, String>>, List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>)
    case ElmSyntaxTypeAnnotation_Unit
}

public typealias ElmSyntaxTypeAnnotation_RecordDefinition =
    List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordField>>

public typealias ElmSyntaxTypeAnnotation_RecordField =
    Tuple<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>

public typealias ElmSyntaxSignature_Signature =
    Generated_name_typeAnnotation<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>

public enum ElmSyntaxParserLenient_RecordFieldsOrExtensionAfterName: Sendable {
    case ElmSyntaxParserLenient_FieldsAfterName(Generated_firstFieldValue_tailFields<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>, List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordField>>>)
    case ElmSyntaxParserLenient_RecordExtensionExpressionAfterName(ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordDefinition>)
}

public typealias ElmSyntaxType_ValueConstructor =
    Generated_arguments_name<List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>, ElmSyntaxNode_Node<String>>

public enum ElmSyntaxParserLenient_TypeOrTypeAliasDeclarationWithoutDocumentation: Sendable {
    case ElmSyntaxParserLenient_TypeAliasDeclarationWithoutDocumentation(Generated_name_parameters_typeAnnotation<ElmSyntaxNode_Node<String>, List_List<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>)
    case ElmSyntaxParserLenient_TypeDeclarationWithoutDocumentation(Generated_headVariant_name_parameters_tailVariantsReverse<ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>, ElmSyntaxNode_Node<String>, List_List<ElmSyntaxNode_Node<String>>, List_List<ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>>)
}

public enum ElmSyntaxInfix_InfixDirection: Sendable {
    case ElmSyntaxInfix_Left
    case ElmSyntaxInfix_Non
    case ElmSyntaxInfix_Right
}

public typealias ElmSyntaxInfix_Infix =
    Generated_direction_function_operator__precedence<ElmSyntaxNode_Node<ElmSyntaxInfix_InfixDirection>, ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<Double>>

public typealias ElmSyntaxExposing_ExposedType =
    Generated_name_open_<String, Maybe_Maybe<ElmSyntaxRange_Range>>

public enum ElmSyntaxExposing_TopLevelExpose: Sendable {
    case ElmSyntaxExposing_FunctionExpose(String)
    case ElmSyntaxExposing_InfixExpose(String)
    case ElmSyntaxExposing_TypeExpose(ElmSyntaxExposing_ExposedType)
    case ElmSyntaxExposing_TypeOrAliasExpose(String)
}

public enum ElmSyntaxExposing_Exposing: Sendable {
    case ElmSyntaxExposing_All(ElmSyntaxRange_Range)
    case ElmSyntaxExposing_Explicit(List_List<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>)
}

public typealias ElmSyntaxImport_Import =
    Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>

public typealias ElmSyntaxModule_DefaultModuleData =
    Generated_exposingList_moduleName<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>

public typealias ElmSyntaxModule_EffectModuleData =
    Generated_command_exposingList_moduleName_subscription<Maybe_Maybe<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>, Maybe_Maybe<ElmSyntaxNode_Node<String>>>

public enum ElmSyntaxModule_Module: Sendable {
    case ElmSyntaxModule_EffectModule(ElmSyntaxModule_EffectModuleData)
    case ElmSyntaxModule_NormalModule(ElmSyntaxModule_DefaultModuleData)
    case ElmSyntaxModule_PortModule(ElmSyntaxModule_DefaultModuleData)
}

public typealias ElmSyntaxDocumentation_Documentation =
    String

public typealias ElmSyntaxExpression_Function =
    Generated_declaration_documentation_signature<ElmSyntaxNode_Node<ElmSyntaxExpression_FunctionImplementation>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxSignature_Signature>>>

public typealias ElmSyntaxExpression_FunctionImplementation =
    Generated_arguments_expression_name<List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, ElmSyntaxNode_Node<String>>

public indirect enum ElmSyntaxExpression_Expression: Sendable {
    case ElmSyntaxExpression_Application(List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>)
    case ElmSyntaxExpression_CaseExpression(ElmSyntaxExpression_CaseBlock)
    case ElmSyntaxExpression_CharLiteral(UnicodeScalar)
    case ElmSyntaxExpression_Floatable(Double)
    case ElmSyntaxExpression_FunctionOrValue(ElmSyntaxModuleName_ModuleName, String)
    case ElmSyntaxExpression_GLSLExpression(String)
    case ElmSyntaxExpression_Hex(Double)
    case ElmSyntaxExpression_IfBlock(ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>)
    case ElmSyntaxExpression_Integer(Double)
    case ElmSyntaxExpression_LambdaExpression(ElmSyntaxExpression_Lambda)
    case ElmSyntaxExpression_LetExpression(ElmSyntaxExpression_LetBlock)
    case ElmSyntaxExpression_ListExpr(List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>)
    case ElmSyntaxExpression_Literal(String)
    case ElmSyntaxExpression_Negation(ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>)
    case ElmSyntaxExpression_Operator(String)
    case ElmSyntaxExpression_OperatorApplication(String, ElmSyntaxInfix_InfixDirection, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>)
    case ElmSyntaxExpression_ParenthesizedExpression(ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>)
    case ElmSyntaxExpression_PrefixOperator(String)
    case ElmSyntaxExpression_RecordAccess(ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, ElmSyntaxNode_Node<String>)
    case ElmSyntaxExpression_RecordAccessFunction(String)
    case ElmSyntaxExpression_RecordExpr(List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_RecordSetter>>)
    case ElmSyntaxExpression_RecordUpdateExpression(ElmSyntaxNode_Node<String>, List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_RecordSetter>>)
    case ElmSyntaxExpression_TupledExpression(List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>)
    case ElmSyntaxExpression_UnitExpr
}

public typealias ElmSyntaxExpression_CaseBlock =
    Generated_cases_expression<ElmSyntaxExpression_Cases, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>

public typealias ElmSyntaxExpression_Cases =
    List_List<ElmSyntaxExpression_Case>

public typealias ElmSyntaxExpression_Case =
    Tuple<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>

public typealias ElmSyntaxExpression_Lambda =
    Generated_args_expression<List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>

public typealias ElmSyntaxExpression_LetBlock =
    Generated_declarations_expression<List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>

public indirect enum ElmSyntaxExpression_LetDeclaration: Sendable {
    case ElmSyntaxExpression_LetDestructuring(ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>)
    case ElmSyntaxExpression_LetFunction(ElmSyntaxExpression_Function)
}

public typealias ElmSyntaxExpression_RecordSetter =
    Tuple<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>

public enum ElmSyntaxParserLenient_DeclarationAfterDocumentation: Sendable {
    case ElmSyntaxParserLenient_FunctionDeclarationAfterDocumentation(Generated_arguments_expression_signature_startName<List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, Maybe_Maybe<Generated_implementationName_typeAnnotation<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>>, ElmSyntaxNode_Node<String>>)
    case ElmSyntaxParserLenient_PortDeclarationAfterDocumentation(Generated_name_startLocation_typeAnnotation<ElmSyntaxNode_Node<String>, ElmSyntaxRange_Location, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>)
    case ElmSyntaxParserLenient_TypeAliasDeclarationAfterDocumentation(Generated_name_parameters_typeAnnotation<ElmSyntaxNode_Node<String>, List_List<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>)
    case ElmSyntaxParserLenient_TypeDeclarationAfterDocumentation(Generated_headVariant_name_parameters_tailVariantsReverse<ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>, ElmSyntaxNode_Node<String>, List_List<ElmSyntaxNode_Node<String>>, List_List<ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>>)
}

public enum ElmSyntaxParserLenient_ExtensionRight: Sendable {
    case ElmSyntaxParserLenient_ExtendRightByOperation(Generated_direction_expression_symbol<ElmSyntaxInfix_InfixDirection, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, String>)
}

public typealias ElmSyntaxParserLenient_InfixOperatorInfo =
    Generated_extensionRightParser_leftPrecedence_symbol<ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_ExtensionRight>>, Double, String>

public enum ElmSyntaxParserLenient_RecordFieldsOrUpdateAfterName: Sendable {
    case ElmSyntaxParserLenient_FieldsFirstValue(ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>)
    case ElmSyntaxParserLenient_FieldsFirstValuePunned(Unit)
    case ElmSyntaxParserLenient_RecordUpdateFirstSetter(ElmSyntaxNode_Node<ElmSyntaxExpression_RecordSetter>)
}

public enum ElmSyntaxParserLenient_Tupled: Sendable {
    case ElmSyntaxParserLenient_TupledParenthesized(Unit, Unit)
    case ElmSyntaxParserLenient_TupledTwoOrThree(ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>)
}

public typealias ElmSyntaxTypeAlias_TypeAlias =
    Generated_documentation_generics_name_typeAnnotation<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>, List_List<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>

public typealias ElmSyntaxType_Type =
    Generated_constructors_documentation_generics_name<List_List<ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>, List_List<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<String>>

public enum ElmSyntaxDeclaration_Declaration: Sendable {
    case ElmSyntaxDeclaration_AliasDeclaration(ElmSyntaxTypeAlias_TypeAlias)
    case ElmSyntaxDeclaration_CustomTypeDeclaration(ElmSyntaxType_Type)
    case ElmSyntaxDeclaration_Destructuring(ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>)
    case ElmSyntaxDeclaration_FunctionDeclaration(ElmSyntaxExpression_Function)
    case ElmSyntaxDeclaration_InfixDeclaration(ElmSyntaxInfix_Infix)
    case ElmSyntaxDeclaration_PortDeclaration(ElmSyntaxSignature_Signature)
}

public typealias ElmSyntaxComments_Comment =
    String

public typealias ElmSyntaxFile_File =
    Generated_comments_declarations_imports_moduleDefinition<List_List<ElmSyntaxNode_Node<ElmSyntaxComments_Comment>>, List_List<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>, List_List<ElmSyntaxNode_Node<ElmSyntaxImport_Import>>, ElmSyntaxNode_Node<ElmSyntaxModule_Module>>

public enum ElmParserTypeAnnotation_RecordFieldsOrExtensionAfterName: Sendable {
    case ElmParserTypeAnnotation_FieldsAfterName(Generated_firstFieldValue_tailFields<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>, List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordField>>>)
    case ElmParserTypeAnnotation_RecordExtensionExpressionAfterName(ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordDefinition>)
}

public enum ElmParserPatterns_PatternComposedWith: Sendable {
    case ElmParserPatterns_PatternComposedWithAs(ElmSyntaxNode_Node<String>)
    case ElmParserPatterns_PatternComposedWithCons(ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>)
    case ElmParserPatterns_PatternComposedWithNothing(Unit)
}

public enum ElmParserExpression_Tupled: Sendable {
    case ElmParserExpression_TupledParenthesizedFollowedByRecordAccesses(List_List<ElmSyntaxNode_Node<String>>)
    case ElmParserExpression_TupledTwoOrThree(Tuple<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>)
}

public enum ElmParserExpression_RecordFieldsOrUpdateAfterName: Sendable {
    case ElmParserExpression_FieldsFirstValue(ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>)
    case ElmParserExpression_RecordUpdateFirstSetter(ElmSyntaxNode_Node<ElmSyntaxExpression_RecordSetter>)
}

public enum ElmParserExpression_ExtensionRight: Sendable {
    case ElmParserExpression_ExtendRightByOperation(Generated_direction_expression_symbol<ElmSyntaxInfix_InfixDirection, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, String>)
}

public typealias ElmParserExpression_InfixOperatorInfo =
    Generated_extensionRight_leftPrecedence_symbol<ParserFast_Parser<ParserWithComments_WithComments<ElmParserExpression_ExtensionRight>>, Double, String>

public enum ElmParserDeclarations_TypeOrTypeAliasDeclarationWithoutDocumentation: Sendable {
    case ElmParserDeclarations_TypeAliasDeclarationWithoutDocumentation(Generated_name_parameters_typeAnnotation<ElmSyntaxNode_Node<String>, List_List<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>)
    case ElmParserDeclarations_TypeDeclarationWithoutDocumentation(Generated_headVariant_name_parameters_tailVariantsReverse<ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>, ElmSyntaxNode_Node<String>, List_List<ElmSyntaxNode_Node<String>>, List_List<ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>>)
}

public enum ElmParserDeclarations_DeclarationAfterDocumentation: Sendable {
    case ElmParserDeclarations_FunctionDeclarationAfterDocumentation(Generated_arguments_expression_signature_startName<List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, Maybe_Maybe<Generated_implementationName_typeAnnotation<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>>, ElmSyntaxNode_Node<String>>)
    case ElmParserDeclarations_PortDeclarationAfterDocumentation(Generated_name_startLocation_typeAnnotation<ElmSyntaxNode_Node<String>, ElmSyntaxRange_Location, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>)
    case ElmParserDeclarations_TypeAliasDeclarationAfterDocumentation(Generated_name_parameters_typeAnnotation<ElmSyntaxNode_Node<String>, List_List<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>)
    case ElmParserDeclarations_TypeDeclarationAfterDocumentation(Generated_headVariant_name_parameters_tailVariantsReverse<ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>, ElmSyntaxNode_Node<String>, List_List<ElmSyntaxNode_Node<String>>, List_List<ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>>)
}

public enum ElmInternalRawFile_RawFile: Sendable {
    case ElmInternalRawFile_Raw(ElmSyntaxFile_File)
}

public typealias ElmRawFile_RawFile =
    ElmInternalRawFile_RawFile

public enum ElmInterface_Exposed: Sendable {
    case ElmInterface_Alias(String)
    case ElmInterface_CustomType(Tuple<String, List_List<String>>)
    case ElmInterface_Function(String)
    case ElmInterface_Operator(ElmSyntaxInfix_Infix)
}

public typealias ElmInterface_Interface =
    List_List<ElmInterface_Exposed>

public typealias ElmProcessing_ModuleIndexInner =
    Dictionary<ElmSyntaxModuleName_ModuleName, ElmInterface_Interface>

public enum ElmProcessing_ProcessContext: Sendable {
    case ElmProcessing_ProcessContext(ElmProcessing_ModuleIndexInner)
}

public typealias ElmDependency_Version =
    String

public typealias ElmDependency_Dependency =
    Generated_interfaces_name_version<Dictionary<ElmSyntaxModuleName_ModuleName, ElmInterface_Interface>, String, ElmDependency_Version>


public static let ElmParserBase_moduleName: ParserFast_Parser<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>> =
    ParserFast_map2WithRange({ (range: ElmSyntaxRange_Range) in { (head: String) in { (tail: List_List<String>) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, List_cons(head, tail)) } } }, ElmParserTokens_typeName, ElmParserBase_moduleNameOrEmpty)

public static let ElmParserBase_moduleNameOrEmpty: ParserFast_Parser<ElmSyntaxModuleName_ModuleName> =
    ParserFast_map2OrSucceed(
        { (head: String) in { (tail: List_List<String>) in List_cons(head, tail) } },
        ParserFast_symbolFollowedBy(".", ElmParserTokens_typeName),
        ParserFast_lazy(
            { (generated_argument0_argument2_0: Unit) in
                let (_) =
                    generated_argument0_argument2_0
                return ElmParserBase_moduleNameOrEmpty
            }
        ),
        List_List.List_Empty
    )

public static let ElmParserComments_declarationDocumentation: ParserFast_Parser<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>> =
    ElmParserComments_multiLineCommentNoCheck

public static let ElmParserComments_moduleDocumentation: ParserFast_Parser<ElmSyntaxNode_Node<String>> =
    ElmParserComments_declarationDocumentation

public static let ElmParserComments_multiLineCommentNoCheck: ParserFast_Parser<ElmSyntaxNode_Node<String>> =
    ParserFast_nestableMultiCommentMapWithRange({ (generated_0_argument0: ElmSyntaxRange_Range) in { (generated_1_argument0: String) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_0_argument0, generated_1_argument0) } }, Tuple.Tuple("{", "-"), Tuple.Tuple("-", "}"))

public static let ElmParserComments_multilineComment: ParserFast_Parser<ElmSyntaxNode_Node<String>> =
    ParserFast_offsetSourceAndThen(
        { (offset: Double) in
            { (source: String) in
                switch String_slice(Basics_add(offset, 2.0), Basics_add(offset, 3.0), source) {
                case "|":
                    ElmParserComments_problemUnexpectedDocumentation()
                case _:
                    ElmParserComments_multiLineCommentNoCheck
                }
            }
        }
    )

public static let ElmParserComments_singleLineComment: ParserFast_Parser<ElmSyntaxNode_Node<String>> =
    ParserFast_symbolFollowedBy(
        "--",
        ParserFast_whileMapWithRange(
            { (c: UnicodeScalar) in
                switch c {
                case "\r":
                    false
                case "\n":
                    false
                case _:
                    Basics_not(CharExtra_isUtf16Surrogate(c))
                }
            },
            { (range: Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) in { (content: String) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: Generated_column_row.Record(column: range.end.column, row: range.start.row), start: Generated_column_row.Record(column: Basics_sub(range.start.column, 2.0), row: range.start.row)), String_append("--", content)) } }
        )
    )

public static let ElmParserDeclarations_customTypeDefinitionAfterDocumentationAfterTypePrefix: ParserFast_Parser<ParserWithComments_WithComments<ElmParserDeclarations_DeclarationAfterDocumentation>> =
    ParserFast_map6({ (name: ElmSyntaxNode_Node<String>) in { (commentsAfterName: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (parameters: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<String>>>) in { (commentsAfterEqual: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (headVariant: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>) in { (tailVariantsReverse: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(tailVariantsReverse.comments, Rope_prependTo(headVariant.comments, Rope_prependTo(commentsAfterEqual, Rope_prependTo(parameters.comments, commentsAfterName)))), syntax: ElmParserDeclarations_DeclarationAfterDocumentation.ElmParserDeclarations_TypeDeclarationAfterDocumentation(Generated_headVariant_name_parameters_tailVariantsReverse.Record(headVariant: headVariant.syntax, name: name, parameters: parameters.syntax, tailVariantsReverse: tailVariantsReverse.syntax))) } } } } } }, ElmParserTokens_typeNameNode, ElmParserLayout_maybeLayout, ElmParserDeclarations_typeGenericListEquals, ElmParserLayout_maybeLayout, ElmParserDeclarations_valueConstructorOptimisticLayout, ParserWithComments_manyWithoutReverse(ParserFast_symbolFollowedBy("|", ElmParserLayout_positivelyIndentedPlusFollowedBy(1.0, ParserFast_map2({ (commentsBeforePipe: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (variantResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(variantResult.comments, commentsBeforePipe), syntax: variantResult.syntax) } }, ElmParserLayout_maybeLayout, ElmParserDeclarations_valueConstructorOptimisticLayout)))))

public static let ElmParserDeclarations_customTypeDefinitionWithoutDocumentationAfterTypePrefix: ParserFast_Parser<ParserWithComments_WithComments<ElmParserDeclarations_TypeOrTypeAliasDeclarationWithoutDocumentation>> =
    ParserFast_map6({ (name: ElmSyntaxNode_Node<String>) in { (commentsAfterName: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (parameters: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<String>>>) in { (commentsAfterEqual: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (headVariant: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>) in { (tailVariantsReverse: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(tailVariantsReverse.comments, Rope_prependTo(headVariant.comments, Rope_prependTo(commentsAfterEqual, Rope_prependTo(parameters.comments, commentsAfterName)))), syntax: ElmParserDeclarations_TypeOrTypeAliasDeclarationWithoutDocumentation.ElmParserDeclarations_TypeDeclarationWithoutDocumentation(Generated_headVariant_name_parameters_tailVariantsReverse.Record(headVariant: headVariant.syntax, name: name, parameters: parameters.syntax, tailVariantsReverse: tailVariantsReverse.syntax))) } } } } } }, ElmParserTokens_typeNameNode, ElmParserLayout_maybeLayout, ElmParserDeclarations_typeGenericListEquals, ElmParserLayout_maybeLayout, ElmParserDeclarations_valueConstructorOptimisticLayout, ParserWithComments_manyWithoutReverse(ParserFast_symbolFollowedBy("|", ElmParserLayout_positivelyIndentedPlusFollowedBy(1.0, ParserFast_map2({ (commentsBeforePipe: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (variantResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(variantResult.comments, commentsBeforePipe), syntax: variantResult.syntax) } }, ElmParserLayout_maybeLayout, ElmParserDeclarations_valueConstructorOptimisticLayout)))))

public static let ElmParserDeclarations_declaration: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>> =
    ParserFast_oneOf5(ElmParserDeclarations_functionDeclarationWithoutDocumentation, ElmParserDeclarations_declarationWithDocumentation, ElmParserDeclarations_typeOrTypeAliasDefinitionWithoutDocumentation, ElmParserDeclarations_portDeclarationWithoutDocumentation, ElmParserDeclarations_infixDeclaration)

public static let ElmParserDeclarations_declarationWithDocumentation: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>> =
    ParserFast_validate(
        { (result: Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>, ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>) in
            let generated_let_result_argument0_right_decl: ElmSyntaxDeclaration_Declaration
            switch result.syntax {
            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_decl):
                generated_let_result_argument0_right_decl =
                    generated_destructured_decl
            }
            let generated_localReturnResult_letResult_result_argument0_right: Bool
            switch generated_let_result_argument0_right_decl {
            case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_FunctionDeclaration(letFunctionDeclaration):
                let generated_localReturnResult_caseResult_case0_letResult_result_argument0_right: Bool
                switch letFunctionDeclaration.signature {
                case Maybe_Maybe.Maybe_Nothing:
                    generated_localReturnResult_caseResult_case0_letResult_result_argument0_right =
                        true
                case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, signature)):
                    let generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_implementation: ElmSyntaxExpression_FunctionImplementation
                    switch letFunctionDeclaration.declaration {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_implementation):
                        generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_implementation =
                            generated_destructured_implementation
                    }
                    let generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_implementationName: String
                    switch generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_implementation.name {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_implementationName):
                        generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_implementationName =
                            generated_destructured_implementationName
                    }
                    let generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_signatureName: String
                    switch signature.name {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_signatureName):
                        generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_signatureName =
                            generated_destructured_signatureName
                    }
                    generated_localReturnResult_caseResult_case0_letResult_result_argument0_right =
                        Basics_eq(generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_implementationName, generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_signatureName)
                }
                generated_localReturnResult_letResult_result_argument0_right =
                    generated_localReturnResult_caseResult_case0_letResult_result_argument0_right
            case _:
                generated_localReturnResult_letResult_result_argument0_right =
                    true
            }
            return generated_localReturnResult_letResult_result_argument0_right
        },
        "Expected to find the same name for declaration and signature",
        ParserFast_map2(
            { (documentation: ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>) in
                { (afterDocumentation: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmParserDeclarations_DeclarationAfterDocumentation>) in
                    let generated_let_result_argument0_left_start: ElmSyntaxRange_Location =
                        ElmSyntaxNode_range(documentation).start
                    let generated_localReturnResult_letResult_result_argument0_left: Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>, ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>
                    switch afterDocumentation.syntax {
                    case let ElmParserDeclarations_DeclarationAfterDocumentation.ElmParserDeclarations_FunctionDeclarationAfterDocumentation(functionDeclarationAfterDocumentation):
                        let generated_localReturnResult_caseResult_case0_letResult_result_argument0_left: Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>, ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>
                        switch functionDeclarationAfterDocumentation.signature {
                        case let Maybe_Maybe.Maybe_Just(signature):
                            let generated_let_caseResult_case0_caseResult_case0_letResult_result_argument0_left_implementationNameRange: ElmSyntaxRange_Range
                            switch signature.implementationName {
                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_implementationNameRange, _):
                                generated_let_caseResult_case0_caseResult_case0_letResult_result_argument0_left_implementationNameRange =
                                    generated_destructured_implementationNameRange
                            }
                            let generated_let_caseResult_case0_caseResult_case0_letResult_result_argument0_left_expressionRange: ElmSyntaxRange_Range
                            switch functionDeclarationAfterDocumentation.expression {
                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_expressionRange, _):
                                generated_let_caseResult_case0_caseResult_case0_letResult_result_argument0_left_expressionRange =
                                    generated_destructured_expressionRange
                            }
                            generated_localReturnResult_caseResult_case0_letResult_result_argument0_left =
                                Generated_comments_syntax.Record(comments: afterDocumentation.comments, syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case0_caseResult_case0_letResult_result_argument0_left_expressionRange.end, start: generated_let_result_argument0_left_start), ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_FunctionDeclaration(Generated_declaration_documentation_signature.Record(declaration: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case0_caseResult_case0_letResult_result_argument0_left_expressionRange.end, start: generated_let_caseResult_case0_caseResult_case0_letResult_result_argument0_left_implementationNameRange.start), Generated_arguments_expression_name.Record(arguments: functionDeclarationAfterDocumentation.arguments, expression: functionDeclarationAfterDocumentation.expression, name: signature.implementationName)), documentation: Maybe_Maybe.Maybe_Just(documentation), signature: Maybe_Maybe.Maybe_Just(ElmSyntaxNode_combine({ (generated_name: ElmSyntaxNode_Node<String>) in { (generated_typeAnnotation: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in Generated_name_typeAnnotation.Record(name: generated_name, typeAnnotation: generated_typeAnnotation) } }, functionDeclarationAfterDocumentation.startName, signature.typeAnnotation))))))
                        case Maybe_Maybe.Maybe_Nothing:
                            let generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_left_startNameRange: ElmSyntaxRange_Range
                            switch functionDeclarationAfterDocumentation.startName {
                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_startNameRange, _):
                                generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_left_startNameRange =
                                    generated_destructured_startNameRange
                            }
                            let generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_left_expressionRange: ElmSyntaxRange_Range
                            switch functionDeclarationAfterDocumentation.expression {
                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_expressionRange, _):
                                generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_left_expressionRange =
                                    generated_destructured_expressionRange
                            }
                            generated_localReturnResult_caseResult_case0_letResult_result_argument0_left =
                                Generated_comments_syntax.Record(comments: afterDocumentation.comments, syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_left_expressionRange.end, start: generated_let_result_argument0_left_start), ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_FunctionDeclaration(Generated_declaration_documentation_signature.Record(declaration: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_left_expressionRange.end, start: generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_left_startNameRange.start), Generated_arguments_expression_name.Record(arguments: functionDeclarationAfterDocumentation.arguments, expression: functionDeclarationAfterDocumentation.expression, name: functionDeclarationAfterDocumentation.startName)), documentation: Maybe_Maybe.Maybe_Just(documentation), signature: Maybe_Maybe.Maybe_Nothing))))
                        }
                        generated_localReturnResult_letResult_result_argument0_left =
                            generated_localReturnResult_caseResult_case0_letResult_result_argument0_left
                    case let ElmParserDeclarations_DeclarationAfterDocumentation.ElmParserDeclarations_TypeDeclarationAfterDocumentation(typeDeclarationAfterDocumentation):
                        let generated_localReturnResult_letDeclaration0_caseResult_case1_letResult_result_argument0_left: ElmSyntaxRange_Location
                        switch typeDeclarationAfterDocumentation.tailVariantsReverse {
                        case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, _), _):
                            generated_localReturnResult_letDeclaration0_caseResult_case1_letResult_result_argument0_left =
                                range.end
                        case List_List.List_Empty:
                            let generated_let_caseResult_case1_letDeclaration0_caseResult_case1_letResult_result_argument0_left_headVariantRange: ElmSyntaxRange_Range
                            switch typeDeclarationAfterDocumentation.headVariant {
                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_headVariantRange, _):
                                generated_let_caseResult_case1_letDeclaration0_caseResult_case1_letResult_result_argument0_left_headVariantRange =
                                    generated_destructured_headVariantRange
                            }
                            generated_localReturnResult_letDeclaration0_caseResult_case1_letResult_result_argument0_left =
                                generated_let_caseResult_case1_letDeclaration0_caseResult_case1_letResult_result_argument0_left_headVariantRange.end
                        }
                        let generated_let_caseResult_case1_letResult_result_argument0_left_end: ElmSyntaxRange_Location =
                            generated_localReturnResult_letDeclaration0_caseResult_case1_letResult_result_argument0_left
                        generated_localReturnResult_letResult_result_argument0_left =
                            Generated_comments_syntax.Record(comments: afterDocumentation.comments, syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case1_letResult_result_argument0_left_end, start: generated_let_result_argument0_left_start), ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_CustomTypeDeclaration(Generated_constructors_documentation_generics_name.Record(constructors: List_cons(typeDeclarationAfterDocumentation.headVariant, List_reverse(typeDeclarationAfterDocumentation.tailVariantsReverse)), documentation: Maybe_Maybe.Maybe_Just(documentation), generics: typeDeclarationAfterDocumentation.parameters, name: typeDeclarationAfterDocumentation.name))))
                    case let ElmParserDeclarations_DeclarationAfterDocumentation.ElmParserDeclarations_TypeAliasDeclarationAfterDocumentation(typeAliasDeclarationAfterDocumentation):
                        let generated_let_caseResult_case2_letResult_result_argument0_left_typeAnnotationRange: ElmSyntaxRange_Range
                        switch typeAliasDeclarationAfterDocumentation.typeAnnotation {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_typeAnnotationRange, _):
                            generated_let_caseResult_case2_letResult_result_argument0_left_typeAnnotationRange =
                                generated_destructured_typeAnnotationRange
                        }
                        generated_localReturnResult_letResult_result_argument0_left =
                            Generated_comments_syntax.Record(comments: afterDocumentation.comments, syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case2_letResult_result_argument0_left_typeAnnotationRange.end, start: generated_let_result_argument0_left_start), ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_AliasDeclaration(Generated_documentation_generics_name_typeAnnotation.Record(documentation: Maybe_Maybe.Maybe_Just(documentation), generics: typeAliasDeclarationAfterDocumentation.parameters, name: typeAliasDeclarationAfterDocumentation.name, typeAnnotation: typeAliasDeclarationAfterDocumentation.typeAnnotation))))
                    case let ElmParserDeclarations_DeclarationAfterDocumentation.ElmParserDeclarations_PortDeclarationAfterDocumentation(portDeclarationAfterName):
                        let generated_let_caseResult_case3_letResult_result_argument0_left_typeAnnotationRange: ElmSyntaxRange_Range
                        switch portDeclarationAfterName.typeAnnotation {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_typeAnnotationRange, _):
                            generated_let_caseResult_case3_letResult_result_argument0_left_typeAnnotationRange =
                                generated_destructured_typeAnnotationRange
                        }
                        generated_localReturnResult_letResult_result_argument0_left =
                            Generated_comments_syntax.Record(comments: Rope_filledPrependTo(afterDocumentation.comments, Rope_one(documentation)), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case3_letResult_result_argument0_left_typeAnnotationRange.end, start: portDeclarationAfterName.startLocation), ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_PortDeclaration(Generated_name_typeAnnotation.Record(name: portDeclarationAfterName.name, typeAnnotation: portDeclarationAfterName.typeAnnotation))))
                    }
                    return generated_localReturnResult_letResult_result_argument0_left
                }
            },
            ElmParserComments_declarationDocumentation,
            ElmParserLayout_layoutStrictFollowedByWithComments(ParserFast_oneOf3(ElmParserDeclarations_functionAfterDocumentation, ElmParserDeclarations_typeOrTypeAliasDefinitionAfterDocumentation, ElmParserDeclarations_portDeclarationAfterDocumentation))
        )
    )

public static let ElmParserDeclarations_functionAfterDocumentation: ParserFast_Parser<ParserWithComments_WithComments<ElmParserDeclarations_DeclarationAfterDocumentation>> =
    ParserFast_map6(
        { (startName: ElmSyntaxNode_Node<String>) in
            { (commentsAfterStartName: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                { (maybeSignature: Maybe_Maybe<Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<String>>, Generated_implementationName_typeAnnotation<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>>>) in
                    { (arguments: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>) in
                        { (commentsAfterEqual: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                            { (result: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
                                let generated_localReturnResult_left_left_left_comments_result_argument0: Rope_Rope<ElmSyntaxNode_Node<String>> =
                                    switch maybeSignature {
                                    case Maybe_Maybe.Maybe_Nothing:
                                        commentsAfterStartName
                                    case let Maybe_Maybe.Maybe_Just(signature):
                                        Rope_prependTo(signature.comments, commentsAfterStartName)
                                    }
                                return Generated_comments_syntax.Record(comments: Rope_prependTo(result.comments, Rope_prependTo(commentsAfterEqual, Rope_prependTo(arguments.comments, generated_localReturnResult_left_left_left_comments_result_argument0))), syntax: ElmParserDeclarations_DeclarationAfterDocumentation.ElmParserDeclarations_FunctionDeclarationAfterDocumentation(Generated_arguments_expression_signature_startName.Record(arguments: arguments.syntax, expression: result.syntax, signature: Maybe_map({ (generated_record: Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<String>>, Generated_implementationName_typeAnnotation<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>>) in generated_record.syntax }, maybeSignature), startName: startName)))
                            }
                        }
                    }
                }
            }
        },
        ElmParserTokens_functionNameNode,
        ElmParserLayout_maybeLayout,
        ParserFast_map4OrSucceed({ (commentsBeforeTypeAnnotation: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (typeAnnotationResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in { (implementationName: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<String>>) in { (afterImplementationName: Rope_Rope<ElmSyntaxNode_Node<String>>) in Maybe_Maybe.Maybe_Just(Generated_comments_syntax.Record(comments: Rope_prependTo(afterImplementationName, Rope_prependTo(implementationName.comments, Rope_prependTo(typeAnnotationResult.comments, commentsBeforeTypeAnnotation))), syntax: Generated_implementationName_typeAnnotation.Record(implementationName: implementationName.syntax, typeAnnotation: typeAnnotationResult.syntax))) } } } }, ParserFast_symbolFollowedBy(":", ElmParserLayout_maybeLayout), ElmParserTypeAnnotation_typeAnnotation, ElmParserLayout_layoutStrictFollowedBy(ElmParserTokens_functionNameNode), ElmParserLayout_maybeLayout, Maybe_Maybe.Maybe_Nothing),
        ElmParserDeclarations_parameterPatternsEqual,
        ElmParserLayout_maybeLayout,
        ElmParserExpression_expression
    )

public static let ElmParserDeclarations_functionDeclarationWithoutDocumentation: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>> =
    ParserFast_validate(
        { (result: Generated_comments_syntax<ParserWithComments_Comments, ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>) in
            let generated_let_result_argument0_right_decl: ElmSyntaxDeclaration_Declaration
            switch result.syntax {
            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_decl):
                generated_let_result_argument0_right_decl =
                    generated_destructured_decl
            }
            let generated_localReturnResult_letResult_result_argument0_right: Bool
            switch generated_let_result_argument0_right_decl {
            case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_FunctionDeclaration(letFunctionDeclaration):
                let generated_localReturnResult_caseResult_case0_letResult_result_argument0_right: Bool
                switch letFunctionDeclaration.signature {
                case Maybe_Maybe.Maybe_Nothing:
                    generated_localReturnResult_caseResult_case0_letResult_result_argument0_right =
                        true
                case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, signature)):
                    let generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_implementation: ElmSyntaxExpression_FunctionImplementation
                    switch letFunctionDeclaration.declaration {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_implementation):
                        generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_implementation =
                            generated_destructured_implementation
                    }
                    let generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_implementationName: String
                    switch generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_implementation.name {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_implementationName):
                        generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_implementationName =
                            generated_destructured_implementationName
                    }
                    let generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_signatureName: String
                    switch signature.name {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_signatureName):
                        generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_signatureName =
                            generated_destructured_signatureName
                    }
                    generated_localReturnResult_caseResult_case0_letResult_result_argument0_right =
                        Basics_eq(generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_implementationName, generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_signatureName)
                }
                generated_localReturnResult_letResult_result_argument0_right =
                    generated_localReturnResult_caseResult_case0_letResult_result_argument0_right
            case _:
                generated_localReturnResult_letResult_result_argument0_right =
                    true
            }
            return generated_localReturnResult_letResult_result_argument0_right
        },
        "Expected to find the same name for declaration and signature",
        ParserFast_map6WithStartLocation(
            { (startNameStart: ElmSyntaxRange_Location) in
                { (startNameNode: ElmSyntaxNode_Node<String>) in
                    { (commentsAfterStartName: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                        { (maybeSignature: Maybe_Maybe<Generated_comments_implementationName_typeAnnotation<Rope_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>>) in
                            { (arguments: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>) in
                                { (commentsAfterEqual: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                                    { (result: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
                                        let generated_localReturnResult_left_left_left_letDeclaration0_result_argument0_left: Rope_Rope<ElmSyntaxNode_Node<String>> =
                                            switch maybeSignature {
                                            case Maybe_Maybe.Maybe_Nothing:
                                                commentsAfterStartName
                                            case let Maybe_Maybe.Maybe_Just(signature):
                                                Rope_prependTo(signature.comments, commentsAfterStartName)
                                            }
                                        let generated_let_result_argument0_left_allComments: ParserWithComments_Comments =
                                            Rope_prependTo(result.comments, Rope_prependTo(commentsAfterEqual, Rope_prependTo(arguments.comments, generated_localReturnResult_left_left_left_letDeclaration0_result_argument0_left)))
                                        let generated_localReturnResult_letResult_result_argument0_left: Generated_comments_syntax<ParserWithComments_Comments, ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>
                                        switch maybeSignature {
                                        case Maybe_Maybe.Maybe_Nothing:
                                            let generated_let_caseResult_case0_letResult_result_argument0_left_expressionRange: ElmSyntaxRange_Range
                                            switch result.syntax {
                                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_expressionRange, _):
                                                generated_let_caseResult_case0_letResult_result_argument0_left_expressionRange =
                                                    generated_destructured_expressionRange
                                            }
                                            generated_localReturnResult_letResult_result_argument0_left =
                                                Generated_comments_syntax.Record(comments: generated_let_result_argument0_left_allComments, syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case0_letResult_result_argument0_left_expressionRange.end, start: startNameStart), ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_FunctionDeclaration(Generated_declaration_documentation_signature.Record(declaration: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case0_letResult_result_argument0_left_expressionRange.end, start: startNameStart), Generated_arguments_expression_name.Record(arguments: arguments.syntax, expression: result.syntax, name: startNameNode)), documentation: Maybe_Maybe.Maybe_Nothing, signature: Maybe_Maybe.Maybe_Nothing))))
                                        case let Maybe_Maybe.Maybe_Just(signature):
                                            let generated_let_caseResult_case1_letResult_result_argument0_left_implementationNameRange: ElmSyntaxRange_Range
                                            switch signature.implementationName {
                                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_implementationNameRange, _):
                                                generated_let_caseResult_case1_letResult_result_argument0_left_implementationNameRange =
                                                    generated_destructured_implementationNameRange
                                            }
                                            let generated_let_caseResult_case1_letResult_result_argument0_left_expressionRange: ElmSyntaxRange_Range
                                            switch result.syntax {
                                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_expressionRange, _):
                                                generated_let_caseResult_case1_letResult_result_argument0_left_expressionRange =
                                                    generated_destructured_expressionRange
                                            }
                                            generated_localReturnResult_letResult_result_argument0_left =
                                                Generated_comments_syntax.Record(comments: generated_let_result_argument0_left_allComments, syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case1_letResult_result_argument0_left_expressionRange.end, start: startNameStart), ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_FunctionDeclaration(Generated_declaration_documentation_signature.Record(declaration: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case1_letResult_result_argument0_left_expressionRange.end, start: generated_let_caseResult_case1_letResult_result_argument0_left_implementationNameRange.start), Generated_arguments_expression_name.Record(arguments: arguments.syntax, expression: result.syntax, name: signature.implementationName)), documentation: Maybe_Maybe.Maybe_Nothing, signature: Maybe_Maybe.Maybe_Just(ElmSyntaxNode_combine({ (generated_name: ElmSyntaxNode_Node<String>) in { (generated_typeAnnotation: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in Generated_name_typeAnnotation.Record(name: generated_name, typeAnnotation: generated_typeAnnotation) } }, startNameNode, signature.typeAnnotation))))))
                                        }
                                        return generated_localReturnResult_letResult_result_argument0_left
                                    }
                                }
                            }
                        }
                    }
                }
            },
            ElmParserTokens_functionNameNotInfixNode,
            ElmParserLayout_maybeLayout,
            ParserFast_map4OrSucceed({ (commentsBeforeTypeAnnotation: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (typeAnnotationResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in { (implementationName: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<String>>) in { (afterImplementationName: Rope_Rope<ElmSyntaxNode_Node<String>>) in Maybe_Maybe.Maybe_Just(Generated_comments_implementationName_typeAnnotation.Record(comments: Rope_prependTo(afterImplementationName, Rope_prependTo(implementationName.comments, Rope_prependTo(typeAnnotationResult.comments, commentsBeforeTypeAnnotation))), implementationName: implementationName.syntax, typeAnnotation: typeAnnotationResult.syntax)) } } } }, ParserFast_symbolFollowedBy(":", ElmParserLayout_maybeLayout), ElmParserTypeAnnotation_typeAnnotation, ElmParserLayout_layoutStrictFollowedBy(ElmParserTokens_functionNameNode), ElmParserLayout_maybeLayout, Maybe_Maybe.Maybe_Nothing),
            ElmParserDeclarations_parameterPatternsEqual,
            ElmParserLayout_maybeLayout,
            ElmParserExpression_expression
        )
    )

public static let ElmParserDeclarations_infixDeclaration: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>> =
    ParserFast_map9WithRange({ (range: ElmSyntaxRange_Range) in { (commentsAfterInfix: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (direction: ElmSyntaxNode_Node<ElmSyntaxInfix_InfixDirection>) in { (commentsAfterDirection: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (precedence: ElmSyntaxNode_Node<Double>) in { (commentsAfterPrecedence: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (operator_: ElmSyntaxNode_Node<String>) in { (commentsAfterOperator: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (commentsAfterEqual: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (fn: ElmSyntaxNode_Node<String>) in Generated_comments_syntax.Record(comments: Rope_prependTo(commentsAfterEqual, Rope_prependTo(commentsAfterOperator, Rope_prependTo(commentsAfterPrecedence, Rope_prependTo(commentsAfterDirection, commentsAfterInfix)))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_InfixDeclaration(Generated_direction_function_operator__precedence.Record(direction: direction, function: fn, operator_: operator_, precedence: precedence)))) } } } } } } } } } }, ParserFast_keywordFollowedBy("infix", ElmParserLayout_maybeLayout), ElmParserDeclarations_infixDirection, ElmParserLayout_maybeLayout, ParserFast_integerDecimalMapWithRange({ (generated_0_argument0_argument4: ElmSyntaxRange_Range) in { (generated_1_argument0_argument4: Double) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_0_argument0_argument4, generated_1_argument0_argument4) } }), ElmParserLayout_maybeLayout, ParserFast_symbolFollowedBy("(", ParserFast_whileWithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol({ (operatorRange: Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) in { (operator_: String) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: Generated_column_row.Record(column: Basics_add(operatorRange.end.column, 1.0), row: operatorRange.end.row), start: Generated_column_row.Record(column: Basics_sub(operatorRange.start.column, 1.0), row: operatorRange.start.row)), operator_) } }, ElmParserTokens_isOperatorSymbolChar, ElmParserTokens_isAllowedOperatorToken, ")")), ElmParserLayout_maybeLayout, ParserFast_symbolFollowedBy("=", ElmParserLayout_maybeLayout), ElmParserTokens_functionNameNode)

public static let ElmParserDeclarations_infixDirection: ParserFast_Parser<ElmSyntaxNode_Node<ElmSyntaxInfix_InfixDirection>> =
    ParserFast_oneOf3(ParserFast_mapWithRange({ (generated_0_argument0_argument0: ElmSyntaxRange_Range) in { (generated_1_argument0_argument0: ElmSyntaxInfix_InfixDirection) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_0_argument0_argument0, generated_1_argument0_argument0) } }, ParserFast_keyword("right", ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Right)), ParserFast_mapWithRange({ (generated_0_argument0_argument1: ElmSyntaxRange_Range) in { (generated_1_argument0_argument1: ElmSyntaxInfix_InfixDirection) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_0_argument0_argument1, generated_1_argument0_argument1) } }, ParserFast_keyword("left", ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Left)), ParserFast_mapWithRange({ (generated_0_argument0_argument2: ElmSyntaxRange_Range) in { (generated_1_argument0_argument2: ElmSyntaxInfix_InfixDirection) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_0_argument0_argument2, generated_1_argument0_argument2) } }, ParserFast_keyword("non", ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Non)))

public static let ElmParserDeclarations_parameterPatternsEqual: ParserFast_Parser<ParserWithComments_WithComments<List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>> =
    ParserWithComments_until(ElmParserTokens_equal, ParserFast_map2({ (patternResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in { (commentsAfterPattern: Rope_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(commentsAfterPattern, patternResult.comments), syntax: patternResult.syntax) } }, ElmParserPatterns_patternNotDirectlyComposing, ElmParserLayout_maybeLayout))

public static let ElmParserDeclarations_portDeclarationAfterDocumentation: ParserFast_Parser<ParserWithComments_WithComments<ElmParserDeclarations_DeclarationAfterDocumentation>> =
    ParserFast_map5(
        { (commentsAfterPort: Rope_Rope<ElmSyntaxNode_Node<String>>) in
            { (generated_argument0_1: ElmSyntaxNode_Node<String>) in
                { (commentsAfterName: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                    { (commentsAfterColon: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                        { (typeAnnotationResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in
                            let name: ElmSyntaxNode_Node<String>
                            let nameRange: ElmSyntaxRange_Range
                            let (generated_destructured_name) =
                                generated_argument0_1
                            name =
                                generated_destructured_name
                            switch name {
                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_nameRange, _):
                                nameRange =
                                    generated_destructured_nameRange
                            }
                            return Generated_comments_syntax.Record(comments: Rope_prependTo(commentsAfterColon, Rope_prependTo(typeAnnotationResult.comments, Rope_prependTo(commentsAfterName, commentsAfterPort))), syntax: ElmParserDeclarations_DeclarationAfterDocumentation.ElmParserDeclarations_PortDeclarationAfterDocumentation(Generated_name_startLocation_typeAnnotation.Record(name: name, startLocation: Generated_column_row.Record(column: 1.0, row: nameRange.start.row), typeAnnotation: typeAnnotationResult.syntax)))
                        }
                    }
                }
            }
        },
        ParserFast_keywordFollowedBy("port", ElmParserLayout_maybeLayout),
        ElmParserTokens_functionNameNode,
        ElmParserLayout_maybeLayout,
        ParserFast_symbolFollowedBy(":", ElmParserLayout_maybeLayout),
        ElmParserTypeAnnotation_typeAnnotation
    )

public static let ElmParserDeclarations_portDeclarationWithoutDocumentation: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>> =
    ParserFast_map5(
        { (commentsAfterPort: Rope_Rope<ElmSyntaxNode_Node<String>>) in
            { (generated_argument0_1: ElmSyntaxNode_Node<String>) in
                { (commentsAfterName: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                    { (commentsAfterColon: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                        { (typeAnnotationResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in
                            let name: ElmSyntaxNode_Node<String>
                            let nameRange: ElmSyntaxRange_Range
                            let (generated_destructured_name) =
                                generated_argument0_1
                            name =
                                generated_destructured_name
                            switch name {
                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_nameRange, _):
                                nameRange =
                                    generated_destructured_nameRange
                            }
                            let generated_let_result_argument0_end: ElmSyntaxRange_Location
                            switch typeAnnotationResult.syntax {
                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_destructured_end, start: _), _):
                                generated_let_result_argument0_end =
                                    generated_destructured_end
                            }
                            return Generated_comments_syntax.Record(comments: Rope_prependTo(typeAnnotationResult.comments, Rope_prependTo(commentsAfterColon, Rope_prependTo(commentsAfterName, commentsAfterPort))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_result_argument0_end, start: Generated_column_row.Record(column: 1.0, row: nameRange.start.row)), ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_PortDeclaration(Generated_name_typeAnnotation.Record(name: name, typeAnnotation: typeAnnotationResult.syntax))))
                        }
                    }
                }
            }
        },
        ParserFast_keywordFollowedBy("port", ElmParserLayout_maybeLayout),
        ElmParserTokens_functionNameNode,
        ElmParserLayout_maybeLayout,
        ParserFast_symbolFollowedBy(":", ElmParserLayout_maybeLayout),
        ElmParserTypeAnnotation_typeAnnotation
    )

public static let ElmParserDeclarations_typeAliasDefinitionAfterDocumentationAfterTypePrefix: ParserFast_Parser<ParserWithComments_WithComments<ElmParserDeclarations_DeclarationAfterDocumentation>> =
    ParserFast_map6({ (commentsAfterAlias: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (name: ElmSyntaxNode_Node<String>) in { (commentsAfterName: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (parameters: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<String>>>) in { (commentsAfterEquals: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (typeAnnotationResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(typeAnnotationResult.comments, Rope_prependTo(commentsAfterEquals, Rope_prependTo(parameters.comments, Rope_prependTo(commentsAfterName, commentsAfterAlias)))), syntax: ElmParserDeclarations_DeclarationAfterDocumentation.ElmParserDeclarations_TypeAliasDeclarationAfterDocumentation(Generated_name_parameters_typeAnnotation.Record(name: name, parameters: parameters.syntax, typeAnnotation: typeAnnotationResult.syntax))) } } } } } }, ParserFast_keywordFollowedBy("alias", ElmParserLayout_maybeLayout), ElmParserTokens_typeNameNode, ElmParserLayout_maybeLayout, ElmParserDeclarations_typeGenericListEquals, ElmParserLayout_maybeLayout, ElmParserTypeAnnotation_typeAnnotation)

public static let ElmParserDeclarations_typeAliasDefinitionWithoutDocumentationAfterTypePrefix: ParserFast_Parser<ParserWithComments_WithComments<ElmParserDeclarations_TypeOrTypeAliasDeclarationWithoutDocumentation>> =
    ParserFast_map6({ (commentsAfterAlias: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (name: ElmSyntaxNode_Node<String>) in { (commentsAfterName: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (parameters: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<String>>>) in { (commentsAfterEqual: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (typeAnnotationResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(typeAnnotationResult.comments, Rope_prependTo(commentsAfterEqual, Rope_prependTo(parameters.comments, Rope_prependTo(commentsAfterName, commentsAfterAlias)))), syntax: ElmParserDeclarations_TypeOrTypeAliasDeclarationWithoutDocumentation.ElmParserDeclarations_TypeAliasDeclarationWithoutDocumentation(Generated_name_parameters_typeAnnotation.Record(name: name, parameters: parameters.syntax, typeAnnotation: typeAnnotationResult.syntax))) } } } } } }, ParserFast_keywordFollowedBy("alias", ElmParserLayout_maybeLayout), ElmParserTokens_typeNameNode, ElmParserLayout_maybeLayout, ElmParserDeclarations_typeGenericListEquals, ElmParserLayout_maybeLayout, ElmParserTypeAnnotation_typeAnnotation)

public static let ElmParserDeclarations_typeGenericListEquals: ParserFast_Parser<ParserWithComments_WithComments<List_List<ElmSyntaxNode_Node<String>>>> =
    ParserWithComments_until(ElmParserTokens_equal, ParserFast_map2({ (name: ElmSyntaxNode_Node<String>) in { (commentsAfterName: ParserWithComments_Comments) in Generated_comments_syntax.Record(comments: commentsAfterName, syntax: name) } }, ElmParserTokens_functionNameNode, ElmParserLayout_maybeLayout))

public static let ElmParserDeclarations_typeOrTypeAliasDefinitionAfterDocumentation: ParserFast_Parser<ParserWithComments_WithComments<ElmParserDeclarations_DeclarationAfterDocumentation>> =
    ParserFast_map2({ (commentsAfterType: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (declarationAfterDocumentation: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmParserDeclarations_DeclarationAfterDocumentation>) in Generated_comments_syntax.Record(comments: Rope_prependTo(declarationAfterDocumentation.comments, commentsAfterType), syntax: declarationAfterDocumentation.syntax) } }, ParserFast_keywordFollowedBy("type", ElmParserLayout_maybeLayout), ParserFast_oneOf2(ElmParserDeclarations_typeAliasDefinitionAfterDocumentationAfterTypePrefix, ElmParserDeclarations_customTypeDefinitionAfterDocumentationAfterTypePrefix))

public static let ElmParserDeclarations_typeOrTypeAliasDefinitionWithoutDocumentation: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>> =
    ParserFast_map2WithStartLocation(
        { (start: ElmSyntaxRange_Location) in
            { (commentsAfterType: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                { (afterStart: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmParserDeclarations_TypeOrTypeAliasDeclarationWithoutDocumentation>) in
                    let generated_let_result_argument0_allComments: ParserWithComments_Comments =
                        Rope_prependTo(afterStart.comments, commentsAfterType)
                    let generated_localReturnResult_letResult_result_argument0: Generated_comments_syntax<ParserWithComments_Comments, ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>
                    switch afterStart.syntax {
                    case let ElmParserDeclarations_TypeOrTypeAliasDeclarationWithoutDocumentation.ElmParserDeclarations_TypeDeclarationWithoutDocumentation(typeDeclarationAfterDocumentation):
                        let generated_localReturnResult_letDeclaration0_caseResult_case0_letResult_result_argument0: ElmSyntaxRange_Location
                        switch typeDeclarationAfterDocumentation.tailVariantsReverse {
                        case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, _), _):
                            generated_localReturnResult_letDeclaration0_caseResult_case0_letResult_result_argument0 =
                                range.end
                        case List_List.List_Empty:
                            let generated_let_caseResult_case1_letDeclaration0_caseResult_case0_letResult_result_argument0_headVariantRange: ElmSyntaxRange_Range
                            switch typeDeclarationAfterDocumentation.headVariant {
                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_headVariantRange, _):
                                generated_let_caseResult_case1_letDeclaration0_caseResult_case0_letResult_result_argument0_headVariantRange =
                                    generated_destructured_headVariantRange
                            }
                            generated_localReturnResult_letDeclaration0_caseResult_case0_letResult_result_argument0 =
                                generated_let_caseResult_case1_letDeclaration0_caseResult_case0_letResult_result_argument0_headVariantRange.end
                        }
                        let generated_let_caseResult_case0_letResult_result_argument0_end: ElmSyntaxRange_Location =
                            generated_localReturnResult_letDeclaration0_caseResult_case0_letResult_result_argument0
                        generated_localReturnResult_letResult_result_argument0 =
                            Generated_comments_syntax.Record(comments: generated_let_result_argument0_allComments, syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case0_letResult_result_argument0_end, start: start), ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_CustomTypeDeclaration(Generated_constructors_documentation_generics_name.Record(constructors: List_cons(typeDeclarationAfterDocumentation.headVariant, List_reverse(typeDeclarationAfterDocumentation.tailVariantsReverse)), documentation: Maybe_Maybe.Maybe_Nothing, generics: typeDeclarationAfterDocumentation.parameters, name: typeDeclarationAfterDocumentation.name))))
                    case let ElmParserDeclarations_TypeOrTypeAliasDeclarationWithoutDocumentation.ElmParserDeclarations_TypeAliasDeclarationWithoutDocumentation(typeAliasDeclarationAfterDocumentation):
                        let generated_let_caseResult_case1_letResult_result_argument0_typeAnnotationRange: ElmSyntaxRange_Range
                        switch typeAliasDeclarationAfterDocumentation.typeAnnotation {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_typeAnnotationRange, _):
                            generated_let_caseResult_case1_letResult_result_argument0_typeAnnotationRange =
                                generated_destructured_typeAnnotationRange
                        }
                        generated_localReturnResult_letResult_result_argument0 =
                            Generated_comments_syntax.Record(comments: generated_let_result_argument0_allComments, syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case1_letResult_result_argument0_typeAnnotationRange.end, start: start), ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_AliasDeclaration(Generated_documentation_generics_name_typeAnnotation.Record(documentation: Maybe_Maybe.Maybe_Nothing, generics: typeAliasDeclarationAfterDocumentation.parameters, name: typeAliasDeclarationAfterDocumentation.name, typeAnnotation: typeAliasDeclarationAfterDocumentation.typeAnnotation))))
                    }
                    return generated_localReturnResult_letResult_result_argument0
                }
            }
        },
        ParserFast_keywordFollowedBy("type", ElmParserLayout_maybeLayout),
        ParserFast_oneOf2(ElmParserDeclarations_typeAliasDefinitionWithoutDocumentationAfterTypePrefix, ElmParserDeclarations_customTypeDefinitionWithoutDocumentationAfterTypePrefix)
    )

public static let ElmParserDeclarations_valueConstructorOptimisticLayout: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>> =
    ParserFast_map3(
        { (generated_argument0_0: ElmSyntaxNode_Node<String>) in
            { (commentsAfterName: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                { (argumentsReverse: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>>) in
                    let name: ElmSyntaxNode_Node<String>
                    let nameRange: ElmSyntaxRange_Range
                    let (generated_destructured_name) =
                        generated_argument0_0
                    name =
                        generated_destructured_name
                    switch name {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_nameRange, _):
                        nameRange =
                            generated_destructured_nameRange
                    }
                    let generated_let_result_argument0_fullRange: ElmSyntaxRange_Range =
                        switch argumentsReverse.syntax {
                        case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(lastArgRange, _), _):
                            Generated_end_start.Record(end: lastArgRange.end, start: nameRange.start)
                        case List_List.List_Empty:
                            nameRange
                        }
                    return Generated_comments_syntax.Record(comments: Rope_prependTo(argumentsReverse.comments, commentsAfterName), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_let_result_argument0_fullRange, Generated_arguments_name.Record(arguments: List_reverse(argumentsReverse.syntax), name: name)))
                }
            }
        },
        ElmParserTokens_typeNameNode,
        ElmParserLayout_optimisticLayout,
        ParserWithComments_manyWithoutReverse(ElmParserLayout_positivelyIndentedFollowedBy(ParserFast_map2({ (typeAnnotationResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in { (commentsAfter: Rope_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(commentsAfter, typeAnnotationResult.comments), syntax: typeAnnotationResult.syntax) } }, ElmParserTypeAnnotation_typeAnnotationNoFnExcludingTypedWithArguments, ElmParserLayout_optimisticLayout)))
    )

public static let ElmParserExpose_exposable: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>> =
    ParserFast_oneOf3(ElmParserExpose_functionExpose, ElmParserExpose_typeExpose, ElmParserExpose_infixExpose)

public static let ElmParserExpose_exposeDefinition: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>> =
    ParserFast_map3WithRange({ (range: ElmSyntaxRange_Range) in { (commentsAfterExposing: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (commentsBefore: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (exposingListInnerResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxExposing_Exposing>) in Generated_comments_syntax.Record(comments: Rope_prependTo(exposingListInnerResult.comments, Rope_prependTo(commentsBefore, commentsAfterExposing)), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, exposingListInnerResult.syntax)) } } } }, ParserFast_symbolFollowedBy("exposing", ElmParserLayout_maybeLayout), ParserFast_symbolFollowedBy("(", ElmParserLayout_optimisticLayout), ParserFast_followedBySymbol(")", ElmParserExpose_exposingListInner))

public static let ElmParserExpose_exposingListInner: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxExposing_Exposing>> =
    ParserFast_oneOf2(ParserFast_map3({ (headElement: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>) in { (commentsAfterHeadElement: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (tailElements: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(tailElements.comments, Rope_prependTo(commentsAfterHeadElement, headElement.comments)), syntax: ElmSyntaxExposing_Exposing.ElmSyntaxExposing_Explicit(List_cons(headElement.syntax, tailElements.syntax))) } } }, ElmParserExpose_exposable, ElmParserLayout_maybeLayout, ParserWithComments_many(ParserFast_symbolFollowedBy(",", ElmParserLayout_maybeAroundBothSides(ElmParserExpose_exposable)))), ParserFast_mapWithRange({ (range: ElmSyntaxRange_Range) in { (commentsAfterDotDot: ParserWithComments_Comments) in Generated_comments_syntax.Record(comments: commentsAfterDotDot, syntax: ElmSyntaxExposing_Exposing.ElmSyntaxExposing_All(range)) } }, ParserFast_symbolFollowedBy("..", ElmParserLayout_maybeLayout)))

public static let ElmParserExpose_functionExpose: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>> =
    ElmParserTokens_functionNameMapWithRange({ (range: ElmSyntaxRange_Range) in { (name: String) in Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_FunctionExpose(name))) } })

public static let ElmParserExpose_infixExpose: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>> =
    ParserFast_map2WithRange(
        { (range: ElmSyntaxRange_Range) in
            { (infixName: String) in
                { (generated_argument0_2: Unit) in
                    let (_) =
                        generated_argument0_2
                    return Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_InfixExpose(infixName)))
                }
            }
        },
        ParserFast_symbolFollowedBy(
            "(",
            ParserFast_ifFollowedByWhileWithoutLinebreak(
                { (c: UnicodeScalar) in
                    switch c {
                    case ")":
                        false
                    case "\n":
                        false
                    case " ":
                        false
                    case _:
                        true
                    }
                },
                { (c: UnicodeScalar) in
                    switch c {
                    case ")":
                        false
                    case "\n":
                        false
                    case " ":
                        false
                    case _:
                        true
                    }
                }
            )
        ),
        ElmParserTokens_parensEnd
    )

public static let ElmParserExpose_typeExpose: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>> =
    ParserFast_map3(
        { (generated_argument0_0: ElmSyntaxNode_Node<String>) in
            { (commentsBeforeMaybeOpen: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                { (maybeOpen: Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<String>>, Maybe_Maybe<Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location>>>) in
                    let typeNameRange: ElmSyntaxRange_Range
                    let typeName: String
                    switch generated_argument0_0 {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_typeNameRange, generated_destructured_typeName):
                        typeNameRange =
                            generated_destructured_typeNameRange
                        typeName =
                            generated_destructured_typeName
                    }
                    let generated_localReturnResult_syntax_result_argument0: ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose> =
                        switch maybeOpen.syntax {
                        case Maybe_Maybe.Maybe_Nothing:
                            ElmSyntaxNode_Node.ElmSyntaxNode_Node(typeNameRange, ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeOrAliasExpose(typeName))
                        case let Maybe_Maybe.Maybe_Just(openRange):
                            ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: openRange.end, start: typeNameRange.start), ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeExpose(Generated_name_open_.Record(name: typeName, open_: maybeOpen.syntax)))
                        }
                    return Generated_comments_syntax.Record(comments: Rope_prependTo(maybeOpen.comments, commentsBeforeMaybeOpen), syntax: generated_localReturnResult_syntax_result_argument0)
                }
            }
        },
        ElmParserTokens_typeNameNode,
        ElmParserLayout_optimisticLayout,
        ParserFast_map2WithRangeOrSucceed({ (range: ElmSyntaxRange_Range) in { (left: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (right: Rope_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(right, left), syntax: Maybe_Maybe.Maybe_Just(range)) } } }, ParserFast_symbolFollowedBy("(", ElmParserLayout_maybeLayout), ParserFast_followedBySymbol(")", ParserFast_symbolFollowedBy("..", ElmParserLayout_maybeLayout)), Generated_comments_syntax.Record(comments: Rope_empty(), syntax: Maybe_Maybe.Maybe_Nothing))
    )

public static let ElmParserExpression_allowedPrefixOperatorFollowedByClosingParensOneOf: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserFast_whileWithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol({ (operatorRange: Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) in { (operator_: String) in Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: Generated_column_row.Record(column: Basics_add(operatorRange.end.column, 1.0), row: operatorRange.end.row), start: Generated_column_row.Record(column: Basics_sub(operatorRange.start.column, 1.0), row: operatorRange.start.row)), ElmSyntaxExpression_Expression.ElmSyntaxExpression_PrefixOperator(operator_))) } }, ElmParserTokens_isOperatorSymbolChar, ElmParserTokens_isAllowedOperatorToken, ")")

public static let ElmParserExpression_blockElement: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>> =
    ElmParserLayout_onTopIndentationFollowedBy(ParserFast_map2({ (letDeclarationResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>) in { (commentsAfter: Rope_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(commentsAfter, letDeclarationResult.comments), syntax: letDeclarationResult.syntax) } }, ParserFast_oneOf2(ElmParserExpression_letFunction, ElmParserExpression_letDestructuringDeclaration), ElmParserLayout_optimisticLayout))

public static let ElmParserExpression_caseExpression: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserFast_keywordFollowedBy(
        "case",
        ParserFast_map5WithStartLocation(
            { (start: Generated_column_row<Double, Double>) in
                { (commentsAfterCase: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                    { (casedExpressionResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
                        { (commentsBeforeOf: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                            { (commentsAfterOf: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                                { (casesResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, Tuple<Tuple<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>, List_List<Tuple<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>>>) in
                                    let generated_let_result_argument0_argument1_firstCase: Tuple<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>
                                    let generated_let_result_argument0_argument1_lastToSecondCase: List_List<Tuple<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>
                                    switch casesResult.syntax {
                                    case let Tuple.Tuple(generated_destructured_firstCase, generated_destructured_lastToSecondCase):
                                        generated_let_result_argument0_argument1_firstCase =
                                            generated_destructured_firstCase
                                        generated_let_result_argument0_argument1_lastToSecondCase =
                                            generated_destructured_lastToSecondCase
                                    }
                                    let generated_localReturnResult_end_argument0_syntax_letResult_result_argument0_argument1: ElmSyntaxRange_Location
                                    switch generated_let_result_argument0_argument1_lastToSecondCase {
                                    case let List_List.List_Cons(Tuple.Tuple(_, ElmSyntaxNode_Node.ElmSyntaxNode_Node(lastCaseExpressionRange, _)), _):
                                        generated_localReturnResult_end_argument0_syntax_letResult_result_argument0_argument1 =
                                            lastCaseExpressionRange.end
                                    case List_List.List_Empty:
                                        let generated_let_caseResult_case1_end_argument0_syntax_letResult_result_argument0_argument1_firstCaseExpressionRange: ElmSyntaxRange_Range
                                        switch generated_let_result_argument0_argument1_firstCase {
                                        case let Tuple.Tuple(_, ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_firstCaseExpressionRange, _)):
                                            generated_let_caseResult_case1_end_argument0_syntax_letResult_result_argument0_argument1_firstCaseExpressionRange =
                                                generated_destructured_firstCaseExpressionRange
                                        }
                                        generated_localReturnResult_end_argument0_syntax_letResult_result_argument0_argument1 =
                                            generated_let_caseResult_case1_end_argument0_syntax_letResult_result_argument0_argument1_firstCaseExpressionRange.end
                                    }
                                    return Generated_comments_syntax.Record(comments: Rope_prependTo(casesResult.comments, Rope_prependTo(commentsAfterOf, Rope_prependTo(commentsBeforeOf, Rope_prependTo(casedExpressionResult.comments, commentsAfterCase)))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_localReturnResult_end_argument0_syntax_letResult_result_argument0_argument1, start: Generated_column_row.Record(column: Basics_sub(start.column, 4.0), row: start.row)), ElmSyntaxExpression_Expression.ElmSyntaxExpression_CaseExpression(Generated_cases_expression.Record(cases: List_cons(generated_let_result_argument0_argument1_firstCase, List_reverse(generated_let_result_argument0_argument1_lastToSecondCase)), expression: casedExpressionResult.syntax))))
                                }
                            }
                        }
                    }
                }
            },
            ElmParserLayout_maybeLayout,
            ElmParserExpression_expression,
            ElmParserLayout_maybeLayout,
            ParserFast_keywordFollowedBy("of", ElmParserLayout_maybeLayout),
            ParserFast_withIndentSetToColumn(ElmParserExpression_caseStatements)
        )
    )

public static let ElmParserExpression_caseOrUnqualifiedReferenceExpression: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserFast_oneOf2(ElmParserExpression_caseExpression, ElmParserExpression_unqualifiedFunctionReferenceExpressionFollowedByRecordAccess)

public static let ElmParserExpression_caseStatement: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxExpression_Case>> =
    ElmParserLayout_onTopIndentationFollowedBy(ParserFast_map4({ (pattern: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in { (commentsBeforeArrowRight: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (commentsAfterArrowRight: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (expr: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(expr.comments, Rope_prependTo(commentsAfterArrowRight, Rope_prependTo(commentsBeforeArrowRight, pattern.comments))), syntax: Tuple.Tuple(pattern.syntax, expr.syntax)) } } } }, ElmParserPatterns_pattern, ElmParserLayout_maybeLayout, ParserFast_symbolFollowedBy("->", ElmParserLayout_maybeLayout), ElmParserExpression_expression))

public static let ElmParserExpression_caseStatements: ParserFast_Parser<ParserWithComments_WithComments<Tuple<ElmSyntaxExpression_Case, List_List<ElmSyntaxExpression_Case>>>> =
    ParserFast_map5({ (firstCasePatternResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in { (commentsAfterFirstCasePattern: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (commentsAfterFirstCaseArrowRight: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (firstCaseExpressionResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in { (lastToSecondCase: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxExpression_Case>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(lastToSecondCase.comments, Rope_prependTo(firstCaseExpressionResult.comments, Rope_prependTo(commentsAfterFirstCaseArrowRight, Rope_prependTo(commentsAfterFirstCasePattern, firstCasePatternResult.comments)))), syntax: Tuple.Tuple(Tuple.Tuple(firstCasePatternResult.syntax, firstCaseExpressionResult.syntax), lastToSecondCase.syntax)) } } } } }, ElmParserPatterns_pattern, ElmParserLayout_maybeLayout, ParserFast_symbolFollowedBy("->", ElmParserLayout_maybeLayout), ElmParserExpression_expression, ParserWithComments_manyWithoutReverse(ElmParserExpression_caseStatement))

public static let ElmParserExpression_charLiteralExpression: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ElmParserTokens_characterLiteralMapWithRange({ (range: ElmSyntaxRange_Range) in { (char: UnicodeScalar) in Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxExpression_Expression.ElmSyntaxExpression_CharLiteral(char))) } })

public static let ElmParserExpression_expression: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ElmParserExpression_extendedSubExpressionOptimisticLayout({ (generated_0_argument0: Generated_extensionRight_leftPrecedence_symbol<ParserFast_Parser<ParserWithComments_WithComments<ElmParserExpression_ExtensionRight>>, Double, String>) in Result_Result.Result_Ok(generated_0_argument0) }, { (generated_record: Generated_extensionRight_leftPrecedence_symbol<ParserFast_Parser<ParserWithComments_WithComments<ElmParserExpression_ExtensionRight>>, Double, String>) in generated_record.extensionRight })

public static let ElmParserExpression_expressionAfterOpeningSquareBracket: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserFast_oneOf2(ElmParserExpression_glslExpressionAfterOpeningSquareBracket, ParserFast_map2WithRange({ (range: Generated_end_start<ElmSyntaxRange_Location, Generated_column_row<Double, Double>>) in { (commentsBefore: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (elements: Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxExpression_Expression>) in Generated_comments_syntax.Record(comments: Rope_prependTo(elements.comments, commentsBefore), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: range.end, start: Generated_column_row.Record(column: Basics_sub(range.start.column, 1.0), row: range.start.row)), elements.syntax)) } } }, ElmParserLayout_maybeLayout, ParserFast_oneOf2(ParserFast_symbol("]", Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxExpression_Expression.ElmSyntaxExpression_ListExpr(List_List.List_Empty))), ParserFast_followedBySymbol("]", ParserFast_map3({ (head: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in { (commentsAfterHead: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (tail: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(tail.comments, Rope_prependTo(commentsAfterHead, head.comments)), syntax: ElmSyntaxExpression_Expression.ElmSyntaxExpression_ListExpr(List_cons(head.syntax, tail.syntax))) } } }, ElmParserExpression_expression, ElmParserLayout_maybeLayout, ParserWithComments_many(ParserFast_symbolFollowedBy(",", ElmParserLayout_maybeAroundBothSides(ElmParserExpression_expression))))))))

public static let ElmParserExpression_glslExpressionAfterOpeningSquareBracket: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserFast_symbolFollowedBy("glsl|", ParserFast_mapWithRange({ (range: Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) in { (s: String) in Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: Generated_column_row.Record(column: Basics_add(range.end.column, 2.0), row: range.end.row), start: Generated_column_row.Record(column: Basics_sub(range.start.column, 6.0), row: range.start.row)), ElmSyntaxExpression_Expression.ElmSyntaxExpression_GLSLExpression(s))) } }, ParserFast_loopUntil(ParserFast_symbol("|]", Unit.Unit), ParserFast_oneOf2(ParserFast_symbol("|", "|"), ParserFast_while({ (c: UnicodeScalar) in Basics_neq(c, "|") })), "", { (extension_: String) in { (soFar: String) in String_append(soFar, extension_) } }, Basics_identity)))

public static let ElmParserExpression_ifBlockExpression: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserFast_keywordFollowedBy(
        "if",
        ParserFast_map8WithStartLocation(
            { (start: Generated_column_row<Double, Double>) in
                { (commentsAfterIf: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                    { (condition: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
                        { (commentsBeforeThen: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                            { (commentsAfterThen: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                                { (ifTrue: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
                                    { (commentsBeforeElse: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                                        { (commentsAfterElse: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                                            { (ifFalse: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
                                                let generated_let_result_argument0_argument1_ifFalseRange: ElmSyntaxRange_Range
                                                switch ifFalse.syntax {
                                                case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_ifFalseRange, _):
                                                    generated_let_result_argument0_argument1_ifFalseRange =
                                                        generated_destructured_ifFalseRange
                                                }
                                                return Generated_comments_syntax.Record(comments: Rope_prependTo(ifFalse.comments, Rope_prependTo(commentsAfterElse, Rope_prependTo(commentsBeforeElse, Rope_prependTo(ifTrue.comments, Rope_prependTo(commentsAfterThen, Rope_prependTo(commentsBeforeThen, Rope_prependTo(condition.comments, commentsAfterIf))))))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_result_argument0_argument1_ifFalseRange.end, start: Generated_column_row.Record(column: Basics_sub(start.column, 2.0), row: start.row)), ElmSyntaxExpression_Expression.ElmSyntaxExpression_IfBlock(condition.syntax, ifTrue.syntax, ifFalse.syntax)))
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            ElmParserLayout_maybeLayout,
            ElmParserExpression_expression,
            ElmParserLayout_maybeLayout,
            ParserFast_keywordFollowedBy("then", ElmParserLayout_maybeLayout),
            ElmParserExpression_expression,
            ElmParserLayout_maybeLayout,
            ParserFast_keywordFollowedBy("else", ElmParserLayout_maybeLayout),
            ElmParserExpression_expression
        )
    )

public static let ElmParserExpression_ifOrUnqualifiedReferenceExpression: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserFast_oneOf2(ElmParserExpression_ifBlockExpression, ElmParserExpression_unqualifiedFunctionReferenceExpressionFollowedByRecordAccess)

public static let ElmParserExpression_lambdaExpression: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserFast_symbolFollowedBy(
        "\\",
        ParserFast_map6WithStartLocation(
            { (start: Generated_column_row<Double, Double>) in
                { (commentsAfterBackslash: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                    { (firstArg: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in
                        { (commentsAfterFirstArg: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                            { (secondUpArgs: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>) in
                                { (commentsAfterArrow: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                                    { (expressionResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
                                        let generated_let_result_argument0_argument1_expressionRange: ElmSyntaxRange_Range
                                        switch expressionResult.syntax {
                                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_expressionRange, _):
                                            generated_let_result_argument0_argument1_expressionRange =
                                                generated_destructured_expressionRange
                                        }
                                        return Generated_comments_syntax.Record(comments: Rope_prependTo(expressionResult.comments, Rope_prependTo(commentsAfterArrow, Rope_prependTo(secondUpArgs.comments, Rope_prependTo(commentsAfterFirstArg, Rope_prependTo(firstArg.comments, commentsAfterBackslash))))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_result_argument0_argument1_expressionRange.end, start: Generated_column_row.Record(column: Basics_sub(start.column, 1.0), row: start.row)), ElmSyntaxExpression_Expression.ElmSyntaxExpression_LambdaExpression(Generated_args_expression.Record(args: List_cons(firstArg.syntax, secondUpArgs.syntax), expression: expressionResult.syntax))))
                                    }
                                }
                            }
                        }
                    }
                }
            },
            ElmParserLayout_maybeLayout,
            ElmParserPatterns_patternNotDirectlyComposing,
            ElmParserLayout_maybeLayout,
            ParserWithComments_until(ParserFast_symbol("->", Unit.Unit), ParserFast_map2({ (patternResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in { (commentsAfter: Rope_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(commentsAfter, patternResult.comments), syntax: patternResult.syntax) } }, ElmParserPatterns_patternNotDirectlyComposing, ElmParserLayout_maybeLayout)),
            ElmParserLayout_maybeLayout,
            ElmParserExpression_expression
        )
    )

public static let ElmParserExpression_letDeclarationsIn: ParserFast_Parser<ParserWithComments_WithComments<List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>>> =
    ElmParserLayout_onTopIndentationFollowedBy(ParserFast_map3({ (headLetResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>) in { (commentsAfter: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (tailLetResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(tailLetResult.comments, Rope_prependTo(commentsAfter, headLetResult.comments)), syntax: List_cons(headLetResult.syntax, tailLetResult.syntax)) } } }, ParserFast_oneOf2(ElmParserExpression_letFunction, ElmParserExpression_letDestructuringDeclaration), ElmParserLayout_optimisticLayout, ParserWithComments_until(ElmParserTokens_inToken, ElmParserExpression_blockElement)))

public static let ElmParserExpression_letDestructuringDeclaration: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>> =
    ParserFast_map4(
        { (pattern: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in
            { (commentsAfterPattern: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                { (commentsAfterEquals: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                    { (expressionResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
                        let generated_let_result_argument0_start: ElmSyntaxRange_Location
                        switch pattern.syntax {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: _, start: generated_destructured_start), _):
                            generated_let_result_argument0_start =
                                generated_destructured_start
                        }
                        let generated_let_result_argument0_end: ElmSyntaxRange_Location
                        switch expressionResult.syntax {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_destructured_end, start: _), _):
                            generated_let_result_argument0_end =
                                generated_destructured_end
                        }
                        return Generated_comments_syntax.Record(comments: Rope_prependTo(expressionResult.comments, Rope_prependTo(commentsAfterEquals, Rope_prependTo(commentsAfterPattern, pattern.comments))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_result_argument0_end, start: generated_let_result_argument0_start), ElmSyntaxExpression_LetDeclaration.ElmSyntaxExpression_LetDestructuring(pattern.syntax, expressionResult.syntax)))
                    }
                }
            }
        },
        ElmParserPatterns_patternNotDirectlyComposing,
        ElmParserLayout_maybeLayout,
        ParserFast_symbolFollowedBy("=", ElmParserLayout_maybeLayout),
        ElmParserExpression_expression
    )

public static let ElmParserExpression_letExpression: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserFast_keywordFollowedBy(
        "let",
        ParserFast_map3WithStartLocation(
            { (start: Generated_column_row<Double, Double>) in
                { (declarations: Generated_comments_declarations<Rope_Rope<ElmSyntaxNode_Node<String>>, List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>>) in
                    { (commentsAfterIn: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                        { (expressionResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
                            let generated_let_result_argument0_argument1_expressionRange: ElmSyntaxRange_Range
                            switch expressionResult.syntax {
                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_expressionRange, _):
                                generated_let_result_argument0_argument1_expressionRange =
                                    generated_destructured_expressionRange
                            }
                            return Generated_comments_syntax.Record(comments: Rope_prependTo(expressionResult.comments, Rope_prependTo(commentsAfterIn, declarations.comments)), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_result_argument0_argument1_expressionRange.end, start: Generated_column_row.Record(column: Basics_sub(start.column, 3.0), row: start.row)), ElmSyntaxExpression_Expression.ElmSyntaxExpression_LetExpression(Generated_declarations_expression.Record(declarations: declarations.declarations, expression: expressionResult.syntax))))
                        }
                    }
                }
            },
            ParserFast_withIndentSetToColumnMinus(3.0, ParserFast_map2({ (commentsAfterLet: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (declarations: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>>) in Generated_comments_declarations.Record(comments: Rope_prependTo(declarations.comments, commentsAfterLet), declarations: declarations.syntax) } }, ElmParserLayout_maybeLayout, ParserFast_withIndentSetToColumn(ElmParserExpression_letDeclarationsIn))),
            ElmParserLayout_positivelyIndentedPlusFollowedBy(2.0, ElmParserLayout_maybeLayout),
            ElmParserExpression_expression
        )
    )

public static let ElmParserExpression_letFunction: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>> =
    ParserFast_validate(
        { (result: Generated_comments_syntax<ParserWithComments_Comments, ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>) in
            let generated_let_result_argument0_right_letDeclaration: ElmSyntaxExpression_LetDeclaration
            switch result.syntax {
            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_letDeclaration):
                generated_let_result_argument0_right_letDeclaration =
                    generated_destructured_letDeclaration
            }
            let generated_localReturnResult_letResult_result_argument0_right: Bool
            switch generated_let_result_argument0_right_letDeclaration {
            case ElmSyntaxExpression_LetDeclaration.ElmSyntaxExpression_LetDestructuring(_, _):
                generated_localReturnResult_letResult_result_argument0_right =
                    true
            case let ElmSyntaxExpression_LetDeclaration.ElmSyntaxExpression_LetFunction(letFunctionDeclaration):
                let generated_localReturnResult_caseResult_case1_letResult_result_argument0_right: Bool
                switch letFunctionDeclaration.signature {
                case Maybe_Maybe.Maybe_Nothing:
                    generated_localReturnResult_caseResult_case1_letResult_result_argument0_right =
                        true
                case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, signature)):
                    let generated_let_caseResult_case1_caseResult_case1_letResult_result_argument0_right_implementation: ElmSyntaxExpression_FunctionImplementation
                    switch letFunctionDeclaration.declaration {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_implementation):
                        generated_let_caseResult_case1_caseResult_case1_letResult_result_argument0_right_implementation =
                            generated_destructured_implementation
                    }
                    let generated_let_caseResult_case1_caseResult_case1_letResult_result_argument0_right_implementationName: String
                    switch generated_let_caseResult_case1_caseResult_case1_letResult_result_argument0_right_implementation.name {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_implementationName):
                        generated_let_caseResult_case1_caseResult_case1_letResult_result_argument0_right_implementationName =
                            generated_destructured_implementationName
                    }
                    let generated_let_caseResult_case1_caseResult_case1_letResult_result_argument0_right_signatureName: String
                    switch signature.name {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_signatureName):
                        generated_let_caseResult_case1_caseResult_case1_letResult_result_argument0_right_signatureName =
                            generated_destructured_signatureName
                    }
                    generated_localReturnResult_caseResult_case1_letResult_result_argument0_right =
                        Basics_eq(generated_let_caseResult_case1_caseResult_case1_letResult_result_argument0_right_implementationName, generated_let_caseResult_case1_caseResult_case1_letResult_result_argument0_right_signatureName)
                }
                generated_localReturnResult_letResult_result_argument0_right =
                    generated_localReturnResult_caseResult_case1_letResult_result_argument0_right
            }
            return generated_localReturnResult_letResult_result_argument0_right
        },
        "Expected to find the same name for declaration and signature",
        ParserFast_map6WithStartLocation(
            { (startNameStart: ElmSyntaxRange_Location) in
                { (startNameNode: ElmSyntaxNode_Node<String>) in
                    { (commentsAfterStartName: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                        { (maybeSignature: Maybe_Maybe<Generated_comments_implementationName_typeAnnotation<Rope_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>>) in
                            { (arguments: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>) in
                                { (commentsAfterEqual: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                                    { (expressionResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
                                        let generated_localReturnResult_left_left_left_letDeclaration0_result_argument0_left: Rope_Rope<ElmSyntaxNode_Node<String>> =
                                            switch maybeSignature {
                                            case Maybe_Maybe.Maybe_Nothing:
                                                commentsAfterStartName
                                            case let Maybe_Maybe.Maybe_Just(signature):
                                                Rope_prependTo(signature.comments, commentsAfterStartName)
                                            }
                                        let generated_let_result_argument0_left_allComments: ParserWithComments_Comments =
                                            Rope_prependTo(expressionResult.comments, Rope_prependTo(commentsAfterEqual, Rope_prependTo(arguments.comments, generated_localReturnResult_left_left_left_letDeclaration0_result_argument0_left)))
                                        let generated_localReturnResult_letResult_result_argument0_left: Generated_comments_syntax<ParserWithComments_Comments, ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>
                                        switch maybeSignature {
                                        case Maybe_Maybe.Maybe_Nothing:
                                            let generated_let_caseResult_case0_letResult_result_argument0_left_expressionRange: ElmSyntaxRange_Range
                                            switch expressionResult.syntax {
                                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_expressionRange, _):
                                                generated_let_caseResult_case0_letResult_result_argument0_left_expressionRange =
                                                    generated_destructured_expressionRange
                                            }
                                            generated_localReturnResult_letResult_result_argument0_left =
                                                Generated_comments_syntax.Record(comments: generated_let_result_argument0_left_allComments, syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case0_letResult_result_argument0_left_expressionRange.end, start: startNameStart), ElmSyntaxExpression_LetDeclaration.ElmSyntaxExpression_LetFunction(Generated_declaration_documentation_signature.Record(declaration: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case0_letResult_result_argument0_left_expressionRange.end, start: startNameStart), Generated_arguments_expression_name.Record(arguments: arguments.syntax, expression: expressionResult.syntax, name: startNameNode)), documentation: Maybe_Maybe.Maybe_Nothing, signature: Maybe_Maybe.Maybe_Nothing))))
                                        case let Maybe_Maybe.Maybe_Just(signature):
                                            let generated_let_caseResult_case1_letResult_result_argument0_left_implementationNameRange: ElmSyntaxRange_Range
                                            switch signature.implementationName {
                                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_implementationNameRange, _):
                                                generated_let_caseResult_case1_letResult_result_argument0_left_implementationNameRange =
                                                    generated_destructured_implementationNameRange
                                            }
                                            let generated_let_caseResult_case1_letResult_result_argument0_left_expressionRange: ElmSyntaxRange_Range
                                            switch expressionResult.syntax {
                                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_expressionRange, _):
                                                generated_let_caseResult_case1_letResult_result_argument0_left_expressionRange =
                                                    generated_destructured_expressionRange
                                            }
                                            generated_localReturnResult_letResult_result_argument0_left =
                                                Generated_comments_syntax.Record(comments: generated_let_result_argument0_left_allComments, syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case1_letResult_result_argument0_left_expressionRange.end, start: startNameStart), ElmSyntaxExpression_LetDeclaration.ElmSyntaxExpression_LetFunction(Generated_declaration_documentation_signature.Record(declaration: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case1_letResult_result_argument0_left_expressionRange.end, start: generated_let_caseResult_case1_letResult_result_argument0_left_implementationNameRange.start), Generated_arguments_expression_name.Record(arguments: arguments.syntax, expression: expressionResult.syntax, name: signature.implementationName)), documentation: Maybe_Maybe.Maybe_Nothing, signature: Maybe_Maybe.Maybe_Just(ElmSyntaxNode_combine({ (generated_name: ElmSyntaxNode_Node<String>) in { (generated_typeAnnotation: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in Generated_name_typeAnnotation.Record(name: generated_name, typeAnnotation: generated_typeAnnotation) } }, startNameNode, signature.typeAnnotation))))))
                                        }
                                        return generated_localReturnResult_letResult_result_argument0_left
                                    }
                                }
                            }
                        }
                    }
                }
            },
            ElmParserTokens_functionNameNode,
            ElmParserLayout_maybeLayout,
            ParserFast_map4OrSucceed({ (commentsBeforeTypeAnnotation: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (typeAnnotationResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in { (implementationName: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<String>>) in { (afterImplementationName: Rope_Rope<ElmSyntaxNode_Node<String>>) in Maybe_Maybe.Maybe_Just(Generated_comments_implementationName_typeAnnotation.Record(comments: Rope_prependTo(afterImplementationName, Rope_prependTo(implementationName.comments, Rope_prependTo(typeAnnotationResult.comments, commentsBeforeTypeAnnotation))), implementationName: implementationName.syntax, typeAnnotation: typeAnnotationResult.syntax)) } } } }, ParserFast_symbolFollowedBy(":", ElmParserLayout_maybeLayout), ElmParserTypeAnnotation_typeAnnotation, ElmParserLayout_layoutStrictFollowedBy(ElmParserTokens_functionNameNode), ElmParserLayout_maybeLayout, Maybe_Maybe.Maybe_Nothing),
            ElmParserExpression_parameterPatternsEqual,
            ElmParserLayout_maybeLayout,
            ElmParserExpression_expression
        )
    )

public static let ElmParserExpression_letOrUnqualifiedReferenceExpression: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserFast_oneOf2(ElmParserExpression_letExpression, ElmParserExpression_unqualifiedFunctionReferenceExpressionFollowedByRecordAccess)

public static let ElmParserExpression_listOrGlslExpression: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserFast_symbolFollowedBy("[", ElmParserExpression_expressionAfterOpeningSquareBracket)

public static let ElmParserExpression_literalExpression: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ElmParserTokens_singleOrTripleQuotedStringLiteralMapWithRange({ (range: ElmSyntaxRange_Range) in { (string: String) in Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxExpression_Expression.ElmSyntaxExpression_Literal(string))) } })

public static let ElmParserExpression_maybeDotReferenceExpressionTuple: ParserFast_Parser<Maybe_Maybe<Triple<List_List<String>, String, List_List<ElmSyntaxNode_Node<String>>>>> =
    ParserFast_orSucceed(
        ParserFast_symbolFollowedBy(
            ".",
            ParserFast_oneOf2Map(
                { (generated_0_argument0_argument1_argument0: Triple<List_List<String>, String, List_List<ElmSyntaxNode_Node<String>>>) in Maybe_Maybe.Maybe_Just(generated_0_argument0_argument1_argument0) },
                ParserFast_map2(
                    { (firstName: String) in
                        { (after: Maybe_Maybe<Triple<List_List<String>, String, List_List<ElmSyntaxNode_Node<String>>>>) in
                            switch after {
                            case Maybe_Maybe.Maybe_Nothing:
                                Triple.Triple(List_List.List_Empty, firstName, List_List.List_Empty)
                            case let Maybe_Maybe.Maybe_Just(Triple.Triple(qualificationAfter, unqualified, recordAccess)):
                                Triple.Triple(List_cons(firstName, qualificationAfter), unqualified, recordAccess)
                            }
                        }
                    },
                    ElmParserTokens_typeName,
                    ParserFast_lazy(
                        { (generated_argument0_argument2_argument1_argument1_argument0_0: Unit) in
                            let (_) =
                                generated_argument0_argument2_argument1_argument1_argument0_0
                            return ElmParserExpression_maybeDotReferenceExpressionTuple
                        }
                    )
                ),
                Basics_identity,
                ParserFast_map2({ (name: String) in { (recordAccesses: List_List<ElmSyntaxNode_Node<String>>) in Maybe_Maybe.Maybe_Just(Triple.Triple(List_List.List_Empty, name, recordAccesses)) } }, ElmParserTokens_functionName, ElmParserExpression_multiRecordAccess)
            )
        ),
        Maybe_Maybe.Maybe_Nothing
    )

public static let ElmParserExpression_multiRecordAccess: ParserFast_Parser<List_List<ElmSyntaxNode_Node<String>>> =
    ParserFast_loopWhileSucceeds(ParserFast_symbolFollowedBy(".", ElmParserTokens_functionNameNode), List_List.List_Empty, { (generated_left: ElmSyntaxNode_Node<String>) in { (generated_right: List_List<ElmSyntaxNode_Node<String>>) in List_cons(generated_left, generated_right) } }, List_reverse)

public static let ElmParserExpression_negationAfterMinus: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserFast_map(
        { (subExpressionResult: Generated_comments_syntax<ParserWithComments_Comments, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
            let generated_let_result_argument0_subExpressionRange: ElmSyntaxRange_Range
            switch subExpressionResult.syntax {
            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_subExpressionRange, _):
                generated_let_result_argument0_subExpressionRange =
                    generated_destructured_subExpressionRange
            }
            return Generated_comments_syntax.Record(comments: subExpressionResult.comments, syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_result_argument0_subExpressionRange.end, start: Generated_column_row.Record(column: Basics_sub(generated_let_result_argument0_subExpressionRange.start.column, 1.0), row: generated_let_result_argument0_subExpressionRange.start.row)), ElmSyntaxExpression_Expression.ElmSyntaxExpression_Negation(subExpressionResult.syntax)))
        },
        ParserFast_lazy(
            { (generated_argument0_argument1_0: Unit) in
                let (_) =
                    generated_argument0_argument1_0
                return ElmParserExpression_subExpression
            }
        )
    )

public static let ElmParserExpression_negationOperation: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserFast_symbolBacktrackableFollowedBy(
        "-",
        ParserFast_offsetSourceAndThen(
            { (offset: Double) in
                { (source: String) in
                    switch String_slice(Basics_sub(offset, 2.0), Basics_sub(offset, 1.0), source) {
                    case " ":
                        ElmParserExpression_negationAfterMinus
                    case "(":
                        ElmParserExpression_negationAfterMinus
                    case ")":
                        ElmParserExpression_negationAfterMinus
                    case "}":
                        ElmParserExpression_negationAfterMinus
                    case "":
                        ElmParserExpression_negationAfterMinus
                    case _:
                        ElmParserExpression_negationWhitespaceProblem()
                    }
                }
            }
        )
    )

public static let ElmParserExpression_numberExpression: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserFast_floatOrIntegerDecimalOrHexadecimalMapWithRange({ (range: ElmSyntaxRange_Range) in { (n: Double) in Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxExpression_Expression.ElmSyntaxExpression_Floatable(n))) } }, { (range: ElmSyntaxRange_Range) in { (n: Double) in Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxExpression_Expression.ElmSyntaxExpression_Integer(n))) } }, { (range: ElmSyntaxRange_Range) in { (n: Double) in Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxExpression_Expression.ElmSyntaxExpression_Hex(n))) } })

public static let ElmParserExpression_parameterPatternsEqual: ParserFast_Parser<ParserWithComments_WithComments<List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>> =
    ParserWithComments_until(ElmParserTokens_equal, ParserFast_map2({ (patternResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in { (commentsAfterPattern: Rope_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(commentsAfterPattern, patternResult.comments), syntax: patternResult.syntax) } }, ElmParserPatterns_patternNotDirectlyComposing, ElmParserLayout_maybeLayout))

public static let ElmParserExpression_precedence1ApL: ElmParserExpression_InfixOperatorInfo =
    ElmParserExpression_infixRight(1.0, "<|")

public static let ElmParserExpression_precedence1ApR: ElmParserExpression_InfixOperatorInfo =
    ElmParserExpression_infixLeft(1.0, "|>")

public static let ElmParserExpression_precedence2Or: ElmParserExpression_InfixOperatorInfo =
    ElmParserExpression_infixRight(2.0, "||")

public static let ElmParserExpression_precedence3And: ElmParserExpression_InfixOperatorInfo =
    ElmParserExpression_infixRight(3.0, "&&")

public static let ElmParserExpression_precedence4Eq: ElmParserExpression_InfixOperatorInfo =
    ElmParserExpression_infixNonAssociative(4.0, "==")

public static let ElmParserExpression_precedence4Ge: ElmParserExpression_InfixOperatorInfo =
    ElmParserExpression_infixNonAssociative(4.0, ">=")

public static let ElmParserExpression_precedence4Gt: ElmParserExpression_InfixOperatorInfo =
    ElmParserExpression_infixNonAssociative(4.0, ">")

public static let ElmParserExpression_precedence4Le: ElmParserExpression_InfixOperatorInfo =
    ElmParserExpression_infixNonAssociative(4.0, "<=")

public static let ElmParserExpression_precedence4Lt: ElmParserExpression_InfixOperatorInfo =
    ElmParserExpression_infixNonAssociative(4.0, "<")

public static let ElmParserExpression_precedence4Neq: ElmParserExpression_InfixOperatorInfo =
    ElmParserExpression_infixNonAssociative(4.0, "/=")

public static let ElmParserExpression_precedence5Cons: ElmParserExpression_InfixOperatorInfo =
    ElmParserExpression_infixRight(5.0, "::")

public static let ElmParserExpression_precedence5Keep: ElmParserExpression_InfixOperatorInfo =
    ElmParserExpression_infixLeft(5.0, "|=")

public static let ElmParserExpression_precedence5append: ElmParserExpression_InfixOperatorInfo =
    ElmParserExpression_infixRight(5.0, "++")

public static let ElmParserExpression_precedence6Add: ElmParserExpression_InfixOperatorInfo =
    ElmParserExpression_infixLeft(6.0, "+")

public static let ElmParserExpression_precedence6Ignore: ElmParserExpression_InfixOperatorInfo =
    ElmParserExpression_infixLeft(6.0, "|.")

public static let ElmParserExpression_precedence6Sub: ElmParserExpression_InfixOperatorInfo =
    ElmParserExpression_infixLeft(6.0, "-")

public static let ElmParserExpression_precedence7Fdiv: ElmParserExpression_InfixOperatorInfo =
    ElmParserExpression_infixLeft(7.0, "/")

public static let ElmParserExpression_precedence7Idiv: ElmParserExpression_InfixOperatorInfo =
    ElmParserExpression_infixLeft(7.0, "//")

public static let ElmParserExpression_precedence7Mul: ElmParserExpression_InfixOperatorInfo =
    ElmParserExpression_infixLeft(7.0, "*")

public static let ElmParserExpression_precedence7Slash: ElmParserExpression_InfixOperatorInfo =
    ElmParserExpression_infixRight(7.0, "</>")

public static let ElmParserExpression_precedence8Pow: ElmParserExpression_InfixOperatorInfo =
    ElmParserExpression_infixRight(8.0, "^")

public static let ElmParserExpression_precedence8QuestionMark: ElmParserExpression_InfixOperatorInfo =
    ElmParserExpression_infixLeft(8.0, "<?>")

public static let ElmParserExpression_precedence9ComposeL: ElmParserExpression_InfixOperatorInfo =
    ElmParserExpression_infixLeft(9.0, "<<")

public static let ElmParserExpression_precedence9ComposeR: ElmParserExpression_InfixOperatorInfo =
    ElmParserExpression_infixRight(9.0, ">>")

public static let ElmParserExpression_qualifiedOrVariantOrRecordConstructorReferenceExpressionFollowedByRecordAccess: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserFast_map2WithRange(
        { (range: ElmSyntaxRange_Range) in
            { (firstName: String) in
                { (after: Maybe_Maybe<Triple<List_List<String>, String, List_List<ElmSyntaxNode_Node<String>>>>) in
                    let generated_localReturnResult_syntax_result_argument0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
                    switch after {
                    case Maybe_Maybe.Maybe_Nothing:
                        generated_localReturnResult_syntax_result_argument0 =
                            ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxExpression_Expression.ElmSyntaxExpression_FunctionOrValue(List_List.List_Empty, firstName))
                    case let Maybe_Maybe.Maybe_Just(Triple.Triple(qualificationAfter, unqualified, recordAccesses)):
                        let generated_localReturnResult_caseResult_case1_syntax_result_argument0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
                        switch recordAccesses {
                        case List_List.List_Empty:
                            generated_localReturnResult_caseResult_case1_syntax_result_argument0 =
                                ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxExpression_Expression.ElmSyntaxExpression_FunctionOrValue(List_cons(firstName, qualificationAfter), unqualified))
                        case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(firstRecordAccessRange, _), _):
                            let generated_let_caseResult_case1_caseResult_case1_syntax_result_argument0_referenceNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression> =
                                ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: Generated_column_row.Record(column: Basics_sub(firstRecordAccessRange.start.column, 1.0), row: firstRecordAccessRange.start.row), start: range.start), ElmSyntaxExpression_Expression.ElmSyntaxExpression_FunctionOrValue(List_cons(firstName, qualificationAfter), unqualified))
                            generated_localReturnResult_caseResult_case1_syntax_result_argument0 =
                                List_foldl(
                                    { (generated_argument0_right_letResult_caseResult_case1_caseResult_case1_syntax_result_argument0_0: ElmSyntaxNode_Node<String>) in
                                        { (generated_argument0_right_letResult_caseResult_case1_caseResult_case1_syntax_result_argument0_1: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in
                                            let fieldNode: ElmSyntaxNode_Node<String>
                                            let fieldRange: ElmSyntaxRange_Range
                                            let (generated_destructured_fieldNode) =
                                                generated_argument0_right_letResult_caseResult_case1_caseResult_case1_syntax_result_argument0_0
                                            fieldNode =
                                                generated_destructured_fieldNode
                                            switch fieldNode {
                                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_fieldRange, _):
                                                fieldRange =
                                                    generated_destructured_fieldRange
                                            }
                                            let leftNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
                                            let leftRange: ElmSyntaxRange_Range
                                            let (generated_destructured_leftNode) =
                                                generated_argument0_right_letResult_caseResult_case1_caseResult_case1_syntax_result_argument0_1
                                            leftNode =
                                                generated_destructured_leftNode
                                            switch leftNode {
                                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_leftRange, _):
                                                leftRange =
                                                    generated_destructured_leftRange
                                            }
                                            return ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: fieldRange.end, start: leftRange.start), ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordAccess(leftNode, fieldNode))
                                        }
                                    },
                                    generated_let_caseResult_case1_caseResult_case1_syntax_result_argument0_referenceNode,
                                    recordAccesses
                                )
                        }
                        generated_localReturnResult_syntax_result_argument0 =
                            generated_localReturnResult_caseResult_case1_syntax_result_argument0
                    }
                    return Generated_comments_syntax.Record(comments: Rope_empty(), syntax: generated_localReturnResult_syntax_result_argument0)
                }
            }
        },
        ElmParserTokens_typeName,
        ElmParserExpression_maybeDotReferenceExpressionTuple
    )

public static let ElmParserExpression_recordAccessFunctionExpression: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserFast_symbolFollowedBy(".", ElmParserTokens_functionNameMapWithRange({ (range: ElmSyntaxRange_Range) in { (field: String) in Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(ElmParserExpression_rangeMoveStartLeftByOneColumn(range), ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordAccessFunction(String_append(".", field)))) } }))

public static let ElmParserExpression_recordContentsCurlyEnd: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxExpression_Expression>> =
    ParserFast_oneOf2(
        ParserFast_map5(
            { (nameNode: ElmSyntaxNode_Node<String>) in
                { (commentsAfterFunctionName: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                    { (afterNameBeforeFields: Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<String>>, ElmParserExpression_RecordFieldsOrUpdateAfterName>) in
                        { (tailFields: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_RecordSetter>>>) in
                            { (commentsBeforeClosingCurly: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                                let generated_localReturnResult_syntax_result_argument0_argument0: ElmSyntaxExpression_Expression =
                                    switch afterNameBeforeFields.syntax {
                                    case let ElmParserExpression_RecordFieldsOrUpdateAfterName.ElmParserExpression_RecordUpdateFirstSetter(firstField):
                                        ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordUpdateExpression(nameNode, List_cons(firstField, tailFields.syntax))
                                    case let ElmParserExpression_RecordFieldsOrUpdateAfterName.ElmParserExpression_FieldsFirstValue(firstFieldValue):
                                        ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordExpr(List_cons(ElmSyntaxNode_combine({ (generated_argument0_left_argument0_caseResult_case1_syntax_result_argument0_argument0_0: ElmSyntaxNode_Node<String>) in { (generated_argument0_left_argument0_caseResult_case1_syntax_result_argument0_argument0_1: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in Tuple_pair(generated_argument0_left_argument0_caseResult_case1_syntax_result_argument0_argument0_0, generated_argument0_left_argument0_caseResult_case1_syntax_result_argument0_argument0_1) } }, nameNode, firstFieldValue), tailFields.syntax))
                                    }
                                return Generated_comments_syntax.Record(comments: Rope_prependTo(commentsBeforeClosingCurly, Rope_prependTo(tailFields.comments, Rope_prependTo(afterNameBeforeFields.comments, commentsAfterFunctionName))), syntax: generated_localReturnResult_syntax_result_argument0_argument0)
                            }
                        }
                    }
                }
            },
            ElmParserTokens_functionNameNode,
            ElmParserLayout_maybeLayout,
            ParserFast_oneOf2(ParserFast_symbolFollowedBy("|", ParserFast_map2({ (commentsBefore: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (setterResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_RecordSetter>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(setterResult.comments, commentsBefore), syntax: ElmParserExpression_RecordFieldsOrUpdateAfterName.ElmParserExpression_RecordUpdateFirstSetter(setterResult.syntax)) } }, ElmParserLayout_maybeLayout, ElmParserExpression_recordSetterNodeWithLayout)), ParserFast_symbolFollowedBy("=", ParserFast_map3({ (commentsBefore: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (expressionResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in { (commentsAfter: Rope_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(commentsAfter, Rope_prependTo(expressionResult.comments, commentsBefore)), syntax: ElmParserExpression_RecordFieldsOrUpdateAfterName.ElmParserExpression_FieldsFirstValue(expressionResult.syntax)) } } }, ElmParserLayout_maybeLayout, ElmParserExpression_expression, ElmParserLayout_maybeLayout))),
            ElmParserExpression_recordFields,
            ParserFast_followedBySymbol("}", ElmParserLayout_maybeLayout)
        ),
        ParserFast_symbol("}", Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordExpr(List_List.List_Empty)))
    )

public static let ElmParserExpression_recordExpressionFollowedByRecordAccess: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserFast_symbolFollowedBy(
        "{",
        ParserFast_map2(
            { (leftestResult: Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
                { (recordAccesses: List_List<ElmSyntaxNode_Node<String>>) in
                    switch recordAccesses {
                    case List_List.List_Empty:
                        leftestResult
                    case List_List.List_Cons(_, _):
                        Generated_comments_syntax.Record(
                            comments: leftestResult.comments,
                            syntax:
                                List_foldl(
                                    { (generated_argument0_right_syntax_caseResult_case1_result_argument0_argument1_0: ElmSyntaxNode_Node<String>) in
                                        { (generated_argument0_right_syntax_caseResult_case1_result_argument0_argument1_1: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in
                                            let fieldNode: ElmSyntaxNode_Node<String>
                                            let fieldRange: ElmSyntaxRange_Range
                                            let (generated_destructured_fieldNode) =
                                                generated_argument0_right_syntax_caseResult_case1_result_argument0_argument1_0
                                            fieldNode =
                                                generated_destructured_fieldNode
                                            switch fieldNode {
                                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_fieldRange, _):
                                                fieldRange =
                                                    generated_destructured_fieldRange
                                            }
                                            let leftNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
                                            let leftRange: ElmSyntaxRange_Range
                                            let (generated_destructured_leftNode) =
                                                generated_argument0_right_syntax_caseResult_case1_result_argument0_argument1_1
                                            leftNode =
                                                generated_destructured_leftNode
                                            switch leftNode {
                                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_leftRange, _):
                                                leftRange =
                                                    generated_destructured_leftRange
                                            }
                                            return ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: fieldRange.end, start: leftRange.start), ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordAccess(leftNode, fieldNode))
                                        }
                                    },
                                    leftestResult.syntax,
                                    recordAccesses
                                )
                        )
                    }
                }
            },
            ParserFast_map2WithRange({ (range: ElmSyntaxRange_Range) in { (commentsBefore: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (afterCurly: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxExpression_Expression>) in Generated_comments_syntax.Record(comments: Rope_prependTo(afterCurly.comments, commentsBefore), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(ElmParserExpression_rangeMoveStartLeftByOneColumn(range), afterCurly.syntax)) } } }, ElmParserLayout_maybeLayout, ElmParserExpression_recordContentsCurlyEnd),
            ElmParserExpression_multiRecordAccess
        )
    )

public static let ElmParserExpression_recordFields: ParserFast_Parser<ParserWithComments_WithComments<List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_RecordSetter>>>> =
    ParserWithComments_many(ParserFast_symbolFollowedBy(",", ParserFast_map2({ (commentsBefore: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (setterResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_RecordSetter>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(setterResult.comments, commentsBefore), syntax: setterResult.syntax) } }, ElmParserLayout_maybeLayout, ElmParserExpression_recordSetterNodeWithLayout)))

public static let ElmParserExpression_recordSetterNodeWithLayout: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_RecordSetter>>> =
    ParserFast_map5WithRange({ (range: ElmSyntaxRange_Range) in { (name: ElmSyntaxNode_Node<String>) in { (commentsAfterFunctionName: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (commentsAfterEquals: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (expressionResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in { (commentsAfterExpression: Rope_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(commentsAfterExpression, Rope_prependTo(expressionResult.comments, Rope_prependTo(commentsAfterEquals, commentsAfterFunctionName))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, Tuple.Tuple(name, expressionResult.syntax))) } } } } } }, ElmParserTokens_functionNameNode, ElmParserLayout_maybeLayout, ParserFast_symbolFollowedBy("=", ElmParserLayout_maybeLayout), ElmParserExpression_expression, ElmParserLayout_maybeLayout)

public static let ElmParserExpression_referenceOrNumberExpression: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserFast_oneOf3(ElmParserExpression_qualifiedOrVariantOrRecordConstructorReferenceExpressionFollowedByRecordAccess, ElmParserExpression_unqualifiedFunctionReferenceExpressionFollowedByRecordAccess, ElmParserExpression_numberExpression)

public static let ElmParserExpression_subExpression: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserFast_offsetSourceAndThen(
        { (offset: Double) in
            { (source: String) in
                switch String_slice(offset, Basics_add(offset, 1.0), source) {
                case "\"":
                    ElmParserExpression_literalExpression
                case "(":
                    ElmParserExpression_tupledExpressionIfNecessaryFollowedByRecordAccess
                case "[":
                    ElmParserExpression_listOrGlslExpression
                case "{":
                    ElmParserExpression_recordExpressionFollowedByRecordAccess
                case "c":
                    ElmParserExpression_caseOrUnqualifiedReferenceExpression
                case "\\":
                    ElmParserExpression_lambdaExpression
                case "l":
                    ElmParserExpression_letOrUnqualifiedReferenceExpression
                case "i":
                    ElmParserExpression_ifOrUnqualifiedReferenceExpression
                case ".":
                    ElmParserExpression_recordAccessFunctionExpression
                case "-":
                    ElmParserExpression_negationOperation
                case "'":
                    ElmParserExpression_charLiteralExpression
                case _:
                    ElmParserExpression_referenceOrNumberExpression
                }
            }
        }
    )

public static let ElmParserExpression_subExpressionMaybeAppliedOptimisticLayout: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserFast_map3(
        { (leftExpressionResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
            { (commentsBeforeExtension: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                { (maybeArgsReverse: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>) in
                    let generated_localReturnResult_syntax_result_argument0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
                    switch maybeArgsReverse.syntax {
                    case List_List.List_Empty:
                        generated_localReturnResult_syntax_result_argument0 =
                            leftExpressionResult.syntax
                    case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(lastArgRange, generated_1_head), generated_tail):
                        let argsReverse: List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>> =
                            List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(lastArgRange, generated_1_head), generated_tail)
                        let generated_let_caseResult_case1_syntax_result_argument0_leftNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
                        let generated_let_caseResult_case1_syntax_result_argument0_leftRange: ElmSyntaxRange_Range
                        let (generated_destructured_leftNode) =
                            leftExpressionResult.syntax
                        generated_let_caseResult_case1_syntax_result_argument0_leftNode =
                            generated_destructured_leftNode
                        switch generated_let_caseResult_case1_syntax_result_argument0_leftNode {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_leftRange, _):
                            generated_let_caseResult_case1_syntax_result_argument0_leftRange =
                                generated_destructured_leftRange
                        }
                        generated_localReturnResult_syntax_result_argument0 =
                            ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: lastArgRange.end, start: generated_let_caseResult_case1_syntax_result_argument0_leftRange.start), ElmSyntaxExpression_Expression.ElmSyntaxExpression_Application(List_cons(generated_let_caseResult_case1_syntax_result_argument0_leftNode, List_reverse(argsReverse))))
                    }
                    return Generated_comments_syntax.Record(comments: Rope_prependTo(maybeArgsReverse.comments, Rope_prependTo(commentsBeforeExtension, leftExpressionResult.comments)), syntax: generated_localReturnResult_syntax_result_argument0)
                }
            }
        },
        ParserFast_lazy(
            { (generated_argument0_argument1_0: Unit) in
                let (_) =
                    generated_argument0_argument1_0
                return ElmParserExpression_subExpression
            }
        ),
        ElmParserLayout_optimisticLayout,
        ParserWithComments_manyWithoutReverse(
            ParserFast_map2(
                { (arg: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in { (commentsAfter: Rope_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(commentsAfter, arg.comments), syntax: arg.syntax) } },
                ElmParserLayout_positivelyIndentedFollowedBy(
                    ParserFast_lazy(
                        { (generated_argument0_argument0_argument1_argument0_argument3_0: Unit) in
                            let (_) =
                                generated_argument0_argument0_argument1_argument0_argument3_0
                            return ElmParserExpression_subExpression
                        }
                    )
                ),
                ElmParserLayout_optimisticLayout
            )
        )
    )

public static let ElmParserExpression_tupledExpressionIfNecessaryFollowedByRecordAccess: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserFast_symbolFollowedBy("(", ParserFast_oneOf3(ParserFast_symbolWithEndLocation(")", { (end: Generated_column_row<Double, Double>) in Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: end, start: Generated_column_row.Record(column: Basics_sub(end.column, 2.0), row: end.row)), ElmSyntaxExpression_Expression.ElmSyntaxExpression_UnitExpr)) }), ElmParserExpression_allowedPrefixOperatorFollowedByClosingParensOneOf, ElmParserExpression_tupledExpressionInnerAfterOpeningParens))

public static let ElmParserExpression_tupledExpressionInnerAfterOpeningParens: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserFast_map4WithRange(
        { (rangeAfterOpeningParens: Generated_end_start<ElmSyntaxRange_Location, Generated_column_row<Double, Double>>) in
            { (commentsBeforeFirstPart: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                { (firstPart: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
                    { (commentsAfterFirstPart: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                        { (tailParts: Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<String>>, ElmParserExpression_Tupled>) in
                            let generated_localReturnResult_syntax_result_argument0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
                            switch tailParts.syntax {
                            case let ElmParserExpression_Tupled.ElmParserExpression_TupledParenthesizedFollowedByRecordAccesses(recordAccesses):
                                let generated_localReturnResult_caseResult_case0_syntax_result_argument0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
                                switch recordAccesses {
                                case List_List.List_Empty:
                                    generated_localReturnResult_caseResult_case0_syntax_result_argument0 =
                                        ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: rangeAfterOpeningParens.end, start: Generated_column_row.Record(column: Basics_sub(rangeAfterOpeningParens.start.column, 1.0), row: rangeAfterOpeningParens.start.row)), ElmSyntaxExpression_Expression.ElmSyntaxExpression_ParenthesizedExpression(firstPart.syntax))
                                case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(firstRecordAccessRange, _), _):
                                    let generated_let_caseResult_case1_caseResult_case0_syntax_result_argument0_range: ElmSyntaxRange_Range =
                                        Generated_end_start.Record(end: Generated_column_row.Record(column: Basics_sub(firstRecordAccessRange.start.column, 1.0), row: firstRecordAccessRange.start.row), start: Generated_column_row.Record(column: Basics_sub(rangeAfterOpeningParens.start.column, 1.0), row: rangeAfterOpeningParens.start.row))
                                    let generated_let_caseResult_case1_caseResult_case0_syntax_result_argument0_parenthesizedNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression> =
                                        ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_let_caseResult_case1_caseResult_case0_syntax_result_argument0_range, ElmSyntaxExpression_Expression.ElmSyntaxExpression_ParenthesizedExpression(firstPart.syntax))
                                    generated_localReturnResult_caseResult_case0_syntax_result_argument0 =
                                        List_foldl(
                                            { (generated_argument0_right_letResult_caseResult_case1_caseResult_case0_syntax_result_argument0_0: ElmSyntaxNode_Node<String>) in
                                                { (generated_argument0_right_letResult_caseResult_case1_caseResult_case0_syntax_result_argument0_1: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in
                                                    let fieldNode: ElmSyntaxNode_Node<String>
                                                    let fieldRange: ElmSyntaxRange_Range
                                                    let (generated_destructured_fieldNode) =
                                                        generated_argument0_right_letResult_caseResult_case1_caseResult_case0_syntax_result_argument0_0
                                                    fieldNode =
                                                        generated_destructured_fieldNode
                                                    switch fieldNode {
                                                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_fieldRange, _):
                                                        fieldRange =
                                                            generated_destructured_fieldRange
                                                    }
                                                    let leftNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
                                                    let leftRange: ElmSyntaxRange_Range
                                                    let (generated_destructured_leftNode) =
                                                        generated_argument0_right_letResult_caseResult_case1_caseResult_case0_syntax_result_argument0_1
                                                    leftNode =
                                                        generated_destructured_leftNode
                                                    switch leftNode {
                                                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_leftRange, _):
                                                        leftRange =
                                                            generated_destructured_leftRange
                                                    }
                                                    return ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: fieldRange.end, start: leftRange.start), ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordAccess(leftNode, fieldNode))
                                                }
                                            },
                                            generated_let_caseResult_case1_caseResult_case0_syntax_result_argument0_parenthesizedNode,
                                            recordAccesses
                                        )
                                }
                                generated_localReturnResult_syntax_result_argument0 =
                                    generated_localReturnResult_caseResult_case0_syntax_result_argument0
                            case let ElmParserExpression_Tupled.ElmParserExpression_TupledTwoOrThree(Tuple.Tuple(secondPart, maybeThirdPart)):
                                let generated_localReturnResult_argument1_caseResult_case1_syntax_result_argument0: ElmSyntaxExpression_Expression =
                                    switch maybeThirdPart {
                                    case Maybe_Maybe.Maybe_Nothing:
                                        ElmSyntaxExpression_Expression.ElmSyntaxExpression_TupledExpression(
                                            Array_toList(
                                                [ firstPart.syntax,
                                                  secondPart
                                                ]
                                            )
                                        )
                                    case let Maybe_Maybe.Maybe_Just(thirdPart):
                                        ElmSyntaxExpression_Expression.ElmSyntaxExpression_TupledExpression(
                                            Array_toList(
                                                [ firstPart.syntax,
                                                  secondPart,
                                                  thirdPart
                                                ]
                                            )
                                        )
                                    }
                                generated_localReturnResult_syntax_result_argument0 =
                                    ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: rangeAfterOpeningParens.end, start: Generated_column_row.Record(column: Basics_sub(rangeAfterOpeningParens.start.column, 1.0), row: rangeAfterOpeningParens.start.row)), generated_localReturnResult_argument1_caseResult_case1_syntax_result_argument0)
                            }
                            return Generated_comments_syntax.Record(comments: Rope_prependTo(tailParts.comments, Rope_prependTo(commentsAfterFirstPart, Rope_prependTo(firstPart.comments, commentsBeforeFirstPart))), syntax: generated_localReturnResult_syntax_result_argument0)
                        }
                    }
                }
            }
        },
        ElmParserLayout_maybeLayout,
        ElmParserExpression_expression,
        ElmParserLayout_maybeLayout,
        ParserFast_oneOf2(ParserFast_symbolFollowedBy(")", ElmParserExpression_multiRecordAccessMap({ (recordAccesses: List_List<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmParserExpression_Tupled.ElmParserExpression_TupledParenthesizedFollowedByRecordAccesses(recordAccesses)) })), ParserFast_symbolFollowedBy(",", ParserFast_map4({ (commentsBefore: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (partResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in { (commentsAfter: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (maybeThirdPart: Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(maybeThirdPart.comments, Rope_prependTo(commentsAfter, Rope_prependTo(partResult.comments, commentsBefore))), syntax: ElmParserExpression_Tupled.ElmParserExpression_TupledTwoOrThree(Tuple.Tuple(partResult.syntax, maybeThirdPart.syntax))) } } } }, ElmParserLayout_maybeLayout, ElmParserExpression_expression, ElmParserLayout_maybeLayout, ParserFast_oneOf2(ParserFast_symbol(")", Generated_comments_syntax.Record(comments: Rope_empty(), syntax: Maybe_Maybe.Maybe_Nothing)), ParserFast_symbolFollowedBy(",", ParserFast_followedBySymbol(")", ParserFast_map3({ (commentsBefore: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (partResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in { (commentsAfter: Rope_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(commentsAfter, Rope_prependTo(partResult.comments, commentsBefore)), syntax: Maybe_Maybe.Maybe_Just(partResult.syntax)) } } }, ElmParserLayout_maybeLayout, ElmParserExpression_expression, ElmParserLayout_maybeLayout)))))))
    )

public static let ElmParserExpression_unqualifiedFunctionReferenceExpressionFollowedByRecordAccess: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserFast_map2(
        { (leftestResult: Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
            { (recordAccesses: List_List<ElmSyntaxNode_Node<String>>) in
                switch recordAccesses {
                case List_List.List_Empty:
                    leftestResult
                case List_List.List_Cons(_, _):
                    Generated_comments_syntax.Record(
                        comments: leftestResult.comments,
                        syntax:
                            List_foldl(
                                { (generated_argument0_right_syntax_caseResult_case1_result_argument0_0: ElmSyntaxNode_Node<String>) in
                                    { (generated_argument0_right_syntax_caseResult_case1_result_argument0_1: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in
                                        let fieldNode: ElmSyntaxNode_Node<String>
                                        let fieldRange: ElmSyntaxRange_Range
                                        let (generated_destructured_fieldNode) =
                                            generated_argument0_right_syntax_caseResult_case1_result_argument0_0
                                        fieldNode =
                                            generated_destructured_fieldNode
                                        switch fieldNode {
                                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_fieldRange, _):
                                            fieldRange =
                                                generated_destructured_fieldRange
                                        }
                                        let leftNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
                                        let leftRange: ElmSyntaxRange_Range
                                        let (generated_destructured_leftNode) =
                                            generated_argument0_right_syntax_caseResult_case1_result_argument0_1
                                        leftNode =
                                            generated_destructured_leftNode
                                        switch leftNode {
                                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_leftRange, _):
                                            leftRange =
                                                generated_destructured_leftRange
                                        }
                                        return ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: fieldRange.end, start: leftRange.start), ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordAccess(leftNode, fieldNode))
                                    }
                                },
                                leftestResult.syntax,
                                recordAccesses
                            )
                    )
                }
            }
        },
        ElmParserTokens_functionNameMapWithRange({ (range: ElmSyntaxRange_Range) in { (unqualified: String) in Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxExpression_Expression.ElmSyntaxExpression_FunctionOrValue(List_List.List_Empty, unqualified))) } }),
        ElmParserExpression_multiRecordAccess
    )

public static let ElmParserFile_file: ParserFast_Parser<ElmSyntaxFile_File> =
    ParserFast_map4({ (moduleDefinition: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxModule_Module>>) in { (moduleComments: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (imports: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxImport_Import>>>) in { (declarations: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>>) in Generated_comments_declarations_imports_moduleDefinition.Record(comments: Rope_toList(Rope_prependTo(declarations.comments, Rope_prependTo(imports.comments, Rope_prependTo(moduleComments, moduleDefinition.comments)))), declarations: declarations.syntax, imports: imports.syntax, moduleDefinition: moduleDefinition.syntax) } } } }, ElmParserLayout_layoutStrictFollowedByWithComments(ElmParserModules_moduleDefinition), ElmParserLayout_layoutStrictFollowedByComments(ParserFast_map2OrSucceed({ (moduleDocumentation: ElmSyntaxNode_Node<String>) in { (commentsAfter: Rope_Rope<ElmSyntaxNode_Node<String>>) in Rope_filledPrependTo(commentsAfter, Rope_one(moduleDocumentation)) } }, ElmParserComments_moduleDocumentation, ElmParserLayout_layoutStrict, Rope_empty())), ParserWithComments_many(ElmParserImports_importDefinition), ElmParserFile_fileDeclarations)

public static let ElmParserFile_fileDeclarations: ParserFast_Parser<ParserWithComments_WithComments<List_List<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>>> =
    ParserWithComments_many(ElmParserLayout_moduleLevelIndentationFollowedBy(ParserFast_map2({ (declarationParsed: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>) in { (commentsAfter: Rope_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(commentsAfter, declarationParsed.comments), syntax: declarationParsed.syntax) } }, ElmParserDeclarations_declaration, ElmParserLayout_optimisticLayout)))

public static let ElmParserImports_importDefinition: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxImport_Import>>> =
    ParserFast_map5WithStartLocation(
        { (start: ElmSyntaxRange_Location) in
            { (commentsAfterImport: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                { (mod: ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>) in
                    { (commentsAfterModuleName: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                        { (maybeModuleAlias: Maybe_Maybe<Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<List_List<String>>>>) in
                            { (maybeExposingList: Maybe_Maybe<Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>>) in
                                let generated_let_result_argument0_commentsBeforeAlias: ParserWithComments_Comments =
                                    Rope_prependTo(commentsAfterModuleName, commentsAfterImport)
                                let generated_localReturnResult_letResult_result_argument0: Generated_comments_syntax<ParserWithComments_Comments, ElmSyntaxNode_Node<Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<List_List<String>>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>>>
                                switch maybeModuleAlias {
                                case Maybe_Maybe.Maybe_Nothing:
                                    let generated_localReturnResult_caseResult_case0_letResult_result_argument0: Generated_comments_syntax<ParserWithComments_Comments, ElmSyntaxNode_Node<Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<List_List<String>>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>>>
                                    switch maybeExposingList {
                                    case Maybe_Maybe.Maybe_Nothing:
                                        let generated_let_caseResult_case0_caseResult_case0_letResult_result_argument0_modRange: ElmSyntaxRange_Range
                                        switch mod {
                                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_modRange, _):
                                            generated_let_caseResult_case0_caseResult_case0_letResult_result_argument0_modRange =
                                                generated_destructured_modRange
                                        }
                                        generated_localReturnResult_caseResult_case0_letResult_result_argument0 =
                                            Generated_comments_syntax.Record(comments: generated_let_result_argument0_commentsBeforeAlias, syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case0_caseResult_case0_letResult_result_argument0_modRange.end, start: start), Generated_exposingList_moduleAlias_moduleName.Record(exposingList: Maybe_Maybe.Maybe_Nothing, moduleAlias: Maybe_Maybe.Maybe_Nothing, moduleName: mod)))
                                    case let Maybe_Maybe.Maybe_Just(exposingListValue):
                                        let generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_exposingRange: ElmSyntaxRange_Range
                                        switch exposingListValue.syntax {
                                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_exposingRange, _):
                                            generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_exposingRange =
                                                generated_destructured_exposingRange
                                        }
                                        generated_localReturnResult_caseResult_case0_letResult_result_argument0 =
                                            Generated_comments_syntax.Record(comments: Rope_prependTo(exposingListValue.comments, generated_let_result_argument0_commentsBeforeAlias), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_exposingRange.end, start: start), Generated_exposingList_moduleAlias_moduleName.Record(exposingList: Maybe_Maybe.Maybe_Just(exposingListValue.syntax), moduleAlias: Maybe_Maybe.Maybe_Nothing, moduleName: mod)))
                                    }
                                    generated_localReturnResult_letResult_result_argument0 =
                                        generated_localReturnResult_caseResult_case0_letResult_result_argument0
                                case let Maybe_Maybe.Maybe_Just(moduleAliasResult):
                                    let generated_localReturnResult_caseResult_case1_letResult_result_argument0: Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<List_List<String>>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>>>
                                    switch maybeExposingList {
                                    case Maybe_Maybe.Maybe_Nothing:
                                        let generated_let_caseResult_case0_caseResult_case1_letResult_result_argument0_aliasRange: ElmSyntaxRange_Range
                                        switch moduleAliasResult.syntax {
                                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_aliasRange, _):
                                            generated_let_caseResult_case0_caseResult_case1_letResult_result_argument0_aliasRange =
                                                generated_destructured_aliasRange
                                        }
                                        generated_localReturnResult_caseResult_case1_letResult_result_argument0 =
                                            Generated_comments_syntax.Record(comments: Rope_prependTo(moduleAliasResult.comments, generated_let_result_argument0_commentsBeforeAlias), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case0_caseResult_case1_letResult_result_argument0_aliasRange.end, start: start), Generated_exposingList_moduleAlias_moduleName.Record(exposingList: Maybe_Maybe.Maybe_Nothing, moduleAlias: Maybe_Maybe.Maybe_Just(moduleAliasResult.syntax), moduleName: mod)))
                                    case let Maybe_Maybe.Maybe_Just(exposingListValue):
                                        let generated_let_caseResult_case1_caseResult_case1_letResult_result_argument0_exposingRange: ElmSyntaxRange_Range
                                        switch exposingListValue.syntax {
                                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_exposingRange, _):
                                            generated_let_caseResult_case1_caseResult_case1_letResult_result_argument0_exposingRange =
                                                generated_destructured_exposingRange
                                        }
                                        generated_localReturnResult_caseResult_case1_letResult_result_argument0 =
                                            Generated_comments_syntax.Record(comments: Rope_prependTo(exposingListValue.comments, Rope_prependTo(moduleAliasResult.comments, generated_let_result_argument0_commentsBeforeAlias)), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case1_caseResult_case1_letResult_result_argument0_exposingRange.end, start: start), Generated_exposingList_moduleAlias_moduleName.Record(exposingList: Maybe_Maybe.Maybe_Just(exposingListValue.syntax), moduleAlias: Maybe_Maybe.Maybe_Just(moduleAliasResult.syntax), moduleName: mod)))
                                    }
                                    generated_localReturnResult_letResult_result_argument0 =
                                        generated_localReturnResult_caseResult_case1_letResult_result_argument0
                                }
                                return generated_localReturnResult_letResult_result_argument0
                            }
                        }
                    }
                }
            }
        },
        ParserFast_keywordFollowedBy("import", ElmParserLayout_maybeLayout),
        ElmParserBase_moduleName,
        ElmParserLayout_optimisticLayout,
        ParserFast_map3OrSucceed({ (commentsBefore: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (moduleAliasNode: ElmSyntaxNode_Node<List_List<String>>) in { (commentsAfter: Rope_Rope<ElmSyntaxNode_Node<String>>) in Maybe_Maybe.Maybe_Just(Generated_comments_syntax.Record(comments: Rope_prependTo(commentsAfter, commentsBefore), syntax: moduleAliasNode)) } } }, ParserFast_keywordFollowedBy("as", ElmParserLayout_maybeLayout), ElmParserTokens_typeNameMapWithRange({ (range: ElmSyntaxRange_Range) in { (moduleAlias: String) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, List_singleton(moduleAlias)) } }), ElmParserLayout_optimisticLayout, Maybe_Maybe.Maybe_Nothing),
        ParserFast_map2OrSucceed({ (exposingResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>) in { (commentsAfter: Rope_Rope<ElmSyntaxNode_Node<String>>) in Maybe_Maybe.Maybe_Just(Generated_comments_syntax.Record(comments: Rope_prependTo(commentsAfter, exposingResult.comments), syntax: exposingResult.syntax)) } }, ElmParserExpose_exposeDefinition, ElmParserLayout_optimisticLayout, Maybe_Maybe.Maybe_Nothing)
    )

public static let ElmParserLayout_fromMultilineCommentNodeOrEmptyOnProblem: ParserFast_Parser<ParserWithComments_Comments> =
    ParserFast_map2OrSucceed({ (comment: ElmSyntaxNode_Node<String>) in { (commentsAfter: Rope_Rope<ElmSyntaxNode_Node<String>>) in Rope_filledPrependTo(commentsAfter, Rope_one(comment)) } }, ParserFast_followedBySkipWhileWhitespace(ElmParserComments_multilineComment), ElmParserLayout_whitespaceAndCommentsOrEmptyLoop, Rope_empty())

public static let ElmParserLayout_fromSingleLineCommentNode: ParserFast_Parser<ParserWithComments_Comments> =
    ParserFast_map2({ (content: ElmSyntaxNode_Node<String>) in { (commentsAfter: Rope_Rope<ElmSyntaxNode_Node<String>>) in Rope_filledPrependTo(commentsAfter, Rope_one(content)) } }, ParserFast_followedBySkipWhileWhitespace(ElmParserComments_singleLineComment), ElmParserLayout_whitespaceAndCommentsOrEmptyLoop)

public static let ElmParserLayout_layoutStrict: ParserFast_Parser<ParserWithComments_Comments> =
    ElmParserLayout_endsTopIndented(ElmParserLayout_optimisticLayout)

public static let ElmParserLayout_maybeLayout: ParserFast_Parser<ParserWithComments_Comments> =
    ElmParserLayout_endsPositivelyIndented(ElmParserLayout_whitespaceAndCommentsOrEmpty)

public static let ElmParserLayout_optimisticLayout: ParserFast_Parser<ParserWithComments_Comments> =
    ElmParserLayout_whitespaceAndCommentsOrEmpty

public static let ElmParserLayout_whitespaceAndCommentsOrEmpty: ParserFast_Parser<ParserWithComments_Comments> =
    ParserFast_skipWhileWhitespaceFollowedBy(
        ParserFast_offsetSourceAndThenOrSucceed(
            { (offset: Double) in
                { (source: String) in
                    switch String_slice(offset, Basics_add(offset, 2.0), source) {
                    case "--":
                        Maybe_Maybe.Maybe_Just(ElmParserLayout_fromSingleLineCommentNode)
                    case "{-":
                        Maybe_Maybe.Maybe_Just(ElmParserLayout_fromMultilineCommentNodeOrEmptyOnProblem)
                    case _:
                        Maybe_Maybe.Maybe_Nothing
                    }
                }
            },
            Rope_empty()
        )
    )

public static let ElmParserLayout_whitespaceAndCommentsOrEmptyLoop: ParserFast_Parser<ParserWithComments_Comments> =
    ParserFast_loopWhileSucceeds(ParserFast_followedBySkipWhileWhitespace(ParserFast_oneOf2(ElmParserComments_singleLineComment, ElmParserComments_multilineComment)), Rope_empty(), { (right: ElmSyntaxNode_Node<String>) in { (soFar: Rope_Rope<ElmSyntaxNode_Node<String>>) in Rope_prependToFilled(Rope_one(right), soFar) } }, Basics_identity)

public static let ElmParserModules_effectModuleDefinition: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxModule_Module>>> =
    ParserFast_map7WithRange({ (range: ElmSyntaxRange_Range) in { (commentsAfterEffect: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (commentsAfterModule: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (name: ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>) in { (commentsAfterName: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (whereClauses: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, Generated_command_subscription<Maybe_Maybe<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxNode_Node<String>>>>) in { (commentsAfterWhereClauses: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (exp: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(exp.comments, Rope_prependTo(commentsAfterWhereClauses, Rope_prependTo(whereClauses.comments, Rope_prependTo(commentsAfterName, Rope_prependTo(commentsAfterModule, commentsAfterEffect))))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxModule_Module.ElmSyntaxModule_EffectModule(Generated_command_exposingList_moduleName_subscription.Record(command: whereClauses.syntax.command, exposingList: exp.syntax, moduleName: name, subscription: whereClauses.syntax.subscription)))) } } } } } } } }, ParserFast_keywordFollowedBy("effect", ElmParserLayout_maybeLayout), ParserFast_keywordFollowedBy("module", ElmParserLayout_maybeLayout), ElmParserBase_moduleName, ElmParserLayout_maybeLayout, ElmParserModules_effectWhereClauses, ElmParserLayout_maybeLayout, ElmParserExpose_exposeDefinition)

public static let ElmParserModules_effectWhereClause: ParserFast_Parser<ParserWithComments_WithComments<Tuple<String, ElmSyntaxNode_Node<String>>>> =
    ParserFast_map4({ (fnName: String) in { (commentsAfterFnName: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (commentsAfterEqual: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (typeName__: ElmSyntaxNode_Node<String>) in Generated_comments_syntax.Record(comments: Rope_prependTo(commentsAfterEqual, commentsAfterFnName), syntax: Tuple.Tuple(fnName, typeName__)) } } } }, ElmParserTokens_functionName, ElmParserLayout_maybeLayout, ParserFast_symbolFollowedBy("=", ElmParserLayout_maybeLayout), ElmParserTokens_typeNameNode)

public static let ElmParserModules_effectWhereClauses: ParserFast_Parser<ParserWithComments_WithComments<Generated_command_subscription<Maybe_Maybe<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxNode_Node<String>>>>> =
    ParserFast_map2({ (commentsBefore: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (whereResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, Generated_command_subscription<Maybe_Maybe<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxNode_Node<String>>>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(whereResult.comments, commentsBefore), syntax: whereResult.syntax) } }, ParserFast_keywordFollowedBy("where", ElmParserLayout_maybeLayout), ElmParserModules_whereBlock)

public static let ElmParserModules_moduleDefinition: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxModule_Module>>> =
    ParserFast_oneOf3(ElmParserModules_normalModuleDefinition, ElmParserModules_portModuleDefinition, ElmParserModules_effectModuleDefinition)

public static let ElmParserModules_normalModuleDefinition: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxModule_Module>>> =
    ParserFast_map4WithRange({ (range: ElmSyntaxRange_Range) in { (commentsAfterModule: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (moduleName: ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>) in { (commentsAfterModuleName: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (exposingList: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(exposingList.comments, Rope_prependTo(commentsAfterModuleName, commentsAfterModule)), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxModule_Module.ElmSyntaxModule_NormalModule(Generated_exposingList_moduleName.Record(exposingList: exposingList.syntax, moduleName: moduleName)))) } } } } }, ParserFast_keywordFollowedBy("module", ElmParserLayout_maybeLayout), ElmParserBase_moduleName, ElmParserLayout_maybeLayout, ElmParserExpose_exposeDefinition)

public static let ElmParserModules_portModuleDefinition: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxModule_Module>>> =
    ParserFast_map5WithRange({ (range: ElmSyntaxRange_Range) in { (commentsAfterPort: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (commentsAfterModule: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (moduleName: ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>) in { (commentsAfterModuleName: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (exposingList: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(exposingList.comments, Rope_prependTo(commentsAfterModuleName, Rope_prependTo(commentsAfterModule, commentsAfterPort))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxModule_Module.ElmSyntaxModule_PortModule(Generated_exposingList_moduleName.Record(exposingList: exposingList.syntax, moduleName: moduleName)))) } } } } } }, ParserFast_keywordFollowedBy("port", ElmParserLayout_maybeLayout), ParserFast_keywordFollowedBy("module", ElmParserLayout_maybeLayout), ElmParserBase_moduleName, ElmParserLayout_maybeLayout, ElmParserExpose_exposeDefinition)

public static let ElmParserModules_whereBlock: ParserFast_Parser<ParserWithComments_WithComments<Generated_command_subscription<Maybe_Maybe<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxNode_Node<String>>>>> =
    ParserFast_followedBySymbol(
        "}",
        ParserFast_symbolFollowedBy(
            "{",
            ParserFast_map4(
                { (commentsBeforeHead: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                    { (head: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, Tuple<String, ElmSyntaxNode_Node<String>>>) in
                        { (commentsAfterHead: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                            { (tail: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<Tuple<String, ElmSyntaxNode_Node<String>>>>) in
                                let generated_let_result_argument0_argument1_left_pairs: List_List<Tuple<String, ElmSyntaxNode_Node<String>>> =
                                    List_cons(head.syntax, tail.syntax)
                                return
                                    Generated_comments_syntax.Record(
                                        comments: Rope_prependTo(tail.comments, Rope_prependTo(commentsAfterHead, Rope_prependTo(head.comments, commentsBeforeHead))),
                                        syntax:
                                            Generated_command_subscription.Record(
                                                command:
                                                    Maybe_map(
                                                        Tuple_second,
                                                        ListExtra_find(
                                                            { (generated_argument0_right_left_command_syntax_letResult_result_argument0_argument1_left_0: Tuple<String, ElmSyntaxNode_Node<String>>) in
                                                                let fnName: String
                                                                switch generated_argument0_right_left_command_syntax_letResult_result_argument0_argument1_left_0 {
                                                                case let Tuple.Tuple(generated_destructured_fnName, _):
                                                                    fnName =
                                                                        generated_destructured_fnName
                                                                }
                                                                return Basics_eq(fnName, "command")
                                                            },
                                                            generated_let_result_argument0_argument1_left_pairs
                                                        )
                                                    ),
                                                subscription:
                                                    Maybe_map(
                                                        Tuple_second,
                                                        ListExtra_find(
                                                            { (generated_argument0_right_left_subscription_syntax_letResult_result_argument0_argument1_left_0: Tuple<String, ElmSyntaxNode_Node<String>>) in
                                                                let fnName: String
                                                                switch generated_argument0_right_left_subscription_syntax_letResult_result_argument0_argument1_left_0 {
                                                                case let Tuple.Tuple(generated_destructured_fnName, _):
                                                                    fnName =
                                                                        generated_destructured_fnName
                                                                }
                                                                return Basics_eq(fnName, "subscription")
                                                            },
                                                            generated_let_result_argument0_argument1_left_pairs
                                                        )
                                                    )
                                            )
                                    )
                            }
                        }
                    }
                },
                ElmParserLayout_maybeLayout,
                ElmParserModules_effectWhereClause,
                ElmParserLayout_maybeLayout,
                ParserWithComments_many(ParserFast_symbolFollowedBy(",", ElmParserLayout_maybeAroundBothSides(ElmParserModules_effectWhereClause)))
            )
        )
    )

public static let ElmParserPatterns_allPattern: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ParserFast_symbolWithRange("_", { (range: ElmSyntaxRange_Range) in Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_AllPattern)) })

public static let ElmParserPatterns_charPattern: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ElmParserTokens_characterLiteralMapWithRange({ (range: ElmSyntaxRange_Range) in { (char: UnicodeScalar) in Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_CharPattern(char))) } })

public static let ElmParserPatterns_composablePattern: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ParserFast_oneOf9(ElmParserPatterns_varPattern, ElmParserPatterns_qualifiedPatternWithConsumeArgs, ElmParserPatterns_allPattern, ElmParserPatterns_parensPattern, ElmParserPatterns_recordPattern, ElmParserPatterns_stringPattern, ElmParserPatterns_listPattern, ElmParserPatterns_numberPart, ElmParserPatterns_charPattern)

public static let ElmParserPatterns_composablePatternTryToCompose: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ParserFast_map3(
        { (x: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in
            { (commentsAfterLeft: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                { (maybeComposedWithResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmParserPatterns_PatternComposedWith>) in
                    let generated_localReturnResult_syntax_result_argument0: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern> =
                        switch maybeComposedWithResult.syntax {
                        case ElmParserPatterns_PatternComposedWith.ElmParserPatterns_PatternComposedWithNothing(_):
                            x.syntax
                        case let ElmParserPatterns_PatternComposedWith.ElmParserPatterns_PatternComposedWithAs(anotherName):
                            ElmSyntaxNode_combine({ (generated_0_argument0_caseResult_case1_syntax_result_argument0: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in { (generated_1_argument0_caseResult_case1_syntax_result_argument0: ElmSyntaxNode_Node<String>) in ElmSyntaxPattern_Pattern.ElmSyntaxPattern_AsPattern(generated_0_argument0_caseResult_case1_syntax_result_argument0, generated_1_argument0_caseResult_case1_syntax_result_argument0) } }, x.syntax, anotherName)
                        case let ElmParserPatterns_PatternComposedWith.ElmParserPatterns_PatternComposedWithCons(y):
                            ElmSyntaxNode_combine({ (generated_0_argument0_caseResult_case2_syntax_result_argument0: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in { (generated_1_argument0_caseResult_case2_syntax_result_argument0: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in ElmSyntaxPattern_Pattern.ElmSyntaxPattern_UnConsPattern(generated_0_argument0_caseResult_case2_syntax_result_argument0, generated_1_argument0_caseResult_case2_syntax_result_argument0) } }, x.syntax, y)
                        }
                    return Generated_comments_syntax.Record(comments: Rope_prependTo(maybeComposedWithResult.comments, Rope_prependTo(commentsAfterLeft, x.comments)), syntax: generated_localReturnResult_syntax_result_argument0)
                }
            }
        },
        ElmParserPatterns_composablePattern,
        ElmParserLayout_maybeLayout,
        ElmParserPatterns_maybeComposedWith
    )

public static let ElmParserPatterns_listPattern: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ParserFast_map2WithRange(
        { (range: ElmSyntaxRange_Range) in
            { (commentsBeforeElements: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                { (maybeElements: Maybe_Maybe<Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<String>>, List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>>) in
                    switch maybeElements {
                    case Maybe_Maybe.Maybe_Nothing:
                        Generated_comments_syntax.Record(comments: commentsBeforeElements, syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmParserPatterns_patternListEmpty))
                    case let Maybe_Maybe.Maybe_Just(elements):
                        Generated_comments_syntax.Record(comments: Rope_prependTo(elements.comments, commentsBeforeElements), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ListPattern(elements.syntax)))
                    }
                }
            }
        },
        ParserFast_symbolFollowedBy("[", ElmParserLayout_maybeLayout),
        ParserFast_oneOf2(ParserFast_symbol("]", Maybe_Maybe.Maybe_Nothing), ParserFast_followedBySymbol("]", ParserFast_map3({ (head: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in { (commentsAfterHead: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (tail: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>) in Maybe_Maybe.Maybe_Just(Generated_comments_syntax.Record(comments: Rope_prependTo(commentsAfterHead, Rope_prependTo(tail.comments, head.comments)), syntax: List_cons(head.syntax, tail.syntax))) } } }, ElmParserPatterns_pattern, ElmParserLayout_maybeLayout, ParserWithComments_many(ParserFast_symbolFollowedBy(",", ElmParserLayout_maybeAroundBothSides(ElmParserPatterns_pattern))))))
    )

public static let ElmParserPatterns_maybeComposedWith: ParserFast_Parser<Generated_comments_syntax<ParserWithComments_Comments, ElmParserPatterns_PatternComposedWith>> =
    ParserFast_oneOf2OrSucceed(ParserFast_keywordFollowedBy("as", ParserFast_map2({ (commentsAfterAs: ParserWithComments_Comments) in { (name: ElmSyntaxNode_Node<String>) in Generated_comments_syntax.Record(comments: commentsAfterAs, syntax: ElmParserPatterns_PatternComposedWith.ElmParserPatterns_PatternComposedWithAs(name)) } }, ElmParserLayout_maybeLayout, ElmParserTokens_functionNameNode)), ParserFast_symbolFollowedBy("::", ParserFast_map2({ (commentsAfterCons: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (patternResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(patternResult.comments, commentsAfterCons), syntax: ElmParserPatterns_PatternComposedWith.ElmParserPatterns_PatternComposedWithCons(patternResult.syntax)) } }, ElmParserLayout_maybeLayout, ElmParserPatterns_pattern)), Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmParserPatterns_PatternComposedWith.ElmParserPatterns_PatternComposedWithNothing(Unit.Unit)))

public static let ElmParserPatterns_maybeDotTypeNamesTuple: ParserFast_Parser<Maybe_Maybe<Tuple<List_List<String>, String>>> =
    ParserFast_map2OrSucceed(
        { (startName: String) in
            { (afterStartName: Maybe_Maybe<Tuple<List_List<String>, String>>) in
                switch afterStartName {
                case Maybe_Maybe.Maybe_Nothing:
                    Maybe_Maybe.Maybe_Just(Tuple.Tuple(List_List.List_Empty, startName))
                case let Maybe_Maybe.Maybe_Just(Tuple.Tuple(qualificationAfter, unqualified)):
                    Maybe_Maybe.Maybe_Just(Tuple.Tuple(List_cons(startName, qualificationAfter), unqualified))
                }
            }
        },
        ParserFast_symbolFollowedBy(".", ElmParserTokens_typeName),
        ParserFast_lazy(
            { (generated_argument0_argument2_0: Unit) in
                let (_) =
                    generated_argument0_argument2_0
                return ElmParserPatterns_maybeDotTypeNamesTuple
            }
        ),
        Maybe_Maybe.Maybe_Nothing
    )

public static let ElmParserPatterns_numberPart: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ParserFast_integerDecimalOrHexadecimalMapWithRange({ (range: ElmSyntaxRange_Range) in { (n: Double) in Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_IntPattern(n))) } }, { (range: ElmSyntaxRange_Range) in { (n: Double) in Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_HexPattern(n))) } })

public static let ElmParserPatterns_parensPattern: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ParserFast_symbolFollowedBy(
        "(",
        ParserFast_map2WithRange(
            { (range: Generated_end_start<ElmSyntaxRange_Location, Generated_column_row<Double, Double>>) in { (commentsBeforeHead: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (contentResult: Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxPattern_Pattern>) in Generated_comments_syntax.Record(comments: Rope_prependTo(contentResult.comments, commentsBeforeHead), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: range.end, start: Generated_column_row.Record(column: Basics_sub(range.start.column, 1.0), row: range.start.row)), contentResult.syntax)) } } },
            ElmParserLayout_maybeLayout,
            ParserFast_oneOf2(
                ParserFast_symbol(")", Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxPattern_Pattern.ElmSyntaxPattern_UnitPattern)),
                ParserFast_map3(
                    { (headResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in
                        { (commentsAfterHead: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                            { (tailResult: Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<String>>, Maybe_Maybe<Generated_maybeThirdPart_secondPart<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>>) in
                                let generated_localReturnResult_syntax_result_argument0_argument1_argument2_argument1: ElmSyntaxPattern_Pattern =
                                    switch tailResult.syntax {
                                    case Maybe_Maybe.Maybe_Nothing:
                                        ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ParenthesizedPattern(headResult.syntax)
                                    case let Maybe_Maybe.Maybe_Just(secondAndMaybeThirdPart):
                                        switch secondAndMaybeThirdPart.maybeThirdPart {
                                        case Maybe_Maybe.Maybe_Nothing:
                                            ElmSyntaxPattern_Pattern.ElmSyntaxPattern_TuplePattern(
                                                Array_toList(
                                                    [ headResult.syntax,
                                                      secondAndMaybeThirdPart.secondPart
                                                    ]
                                                )
                                            )
                                        case let Maybe_Maybe.Maybe_Just(thirdPart):
                                            ElmSyntaxPattern_Pattern.ElmSyntaxPattern_TuplePattern(
                                                Array_toList(
                                                    [ headResult.syntax,
                                                      secondAndMaybeThirdPart.secondPart,
                                                      thirdPart
                                                    ]
                                                )
                                            )
                                        }
                                    }
                                return Generated_comments_syntax.Record(comments: Rope_prependTo(tailResult.comments, Rope_prependTo(commentsAfterHead, headResult.comments)), syntax: generated_localReturnResult_syntax_result_argument0_argument1_argument2_argument1)
                            }
                        }
                    },
                    ElmParserPatterns_pattern,
                    ElmParserLayout_maybeLayout,
                    ParserFast_oneOf2(ParserFast_symbol(")", Generated_comments_syntax.Record(comments: Rope_empty(), syntax: Maybe_Maybe.Maybe_Nothing)), ParserFast_symbolFollowedBy(",", ParserFast_map4({ (commentsBefore: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (secondPart: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in { (commentsAfter: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (maybeThirdPart: Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(maybeThirdPart.comments, Rope_prependTo(commentsAfter, Rope_prependTo(secondPart.comments, commentsBefore))), syntax: Maybe_Maybe.Maybe_Just(Generated_maybeThirdPart_secondPart.Record(maybeThirdPart: maybeThirdPart.syntax, secondPart: secondPart.syntax))) } } } }, ElmParserLayout_maybeLayout, ElmParserPatterns_pattern, ElmParserLayout_maybeLayout, ParserFast_oneOf2(ParserFast_symbol(")", Generated_comments_syntax.Record(comments: Rope_empty(), syntax: Maybe_Maybe.Maybe_Nothing)), ParserFast_symbolFollowedBy(",", ParserFast_followedBySymbol(")", ParserFast_map3({ (commentsBefore: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (thirdPart: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in { (commentsAfter: Rope_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(commentsAfter, Rope_prependTo(thirdPart.comments, commentsBefore)), syntax: Maybe_Maybe.Maybe_Just(thirdPart.syntax)) } } }, ElmParserLayout_maybeLayout, ElmParserPatterns_pattern, ElmParserLayout_maybeLayout)))))))
                )
            )
        )
    )

public static let ElmParserPatterns_pattern: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ParserFast_lazy(
        { (generated_argument0_0: Unit) in
            let (_) =
                generated_argument0_0
            return ElmParserPatterns_composablePatternTryToCompose
        }
    )

public static let ElmParserPatterns_patternListEmpty: ElmSyntaxPattern_Pattern =
    ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ListPattern(List_List.List_Empty)

public static let ElmParserPatterns_patternNotDirectlyComposing: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ParserFast_oneOf9(ElmParserPatterns_varPattern, ElmParserPatterns_qualifiedPatternWithoutConsumeArgs, ElmParserPatterns_allPattern, ElmParserPatterns_parensPattern, ElmParserPatterns_recordPattern, ElmParserPatterns_stringPattern, ElmParserPatterns_listPattern, ElmParserPatterns_numberPart, ElmParserPatterns_charPattern)

public static let ElmParserPatterns_qualifiedNameRefNode: ParserFast_Parser<ElmSyntaxNode_Node<ElmSyntaxPattern_QualifiedNameRef>> =
    ParserFast_map2WithRange(
        { (range: ElmSyntaxRange_Range) in
            { (firstName: String) in
                { (after: Maybe_Maybe<Tuple<List_List<String>, String>>) in
                    let generated_localReturnResult_argument1_result_argument0: Generated_moduleName_name<List_List<String>, String> =
                        switch after {
                        case Maybe_Maybe.Maybe_Nothing:
                            Generated_moduleName_name.Record(moduleName: List_List.List_Empty, name: firstName)
                        case let Maybe_Maybe.Maybe_Just(Tuple.Tuple(qualificationAfter, unqualified)):
                            Generated_moduleName_name.Record(moduleName: List_cons(firstName, qualificationAfter), name: unqualified)
                        }
                    return ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, generated_localReturnResult_argument1_result_argument0)
                }
            }
        },
        ElmParserTokens_typeName,
        ElmParserPatterns_maybeDotTypeNamesTuple
    )

public static let ElmParserPatterns_qualifiedPatternWithConsumeArgs: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ParserFast_map3(
        { (generated_argument0_0: ElmSyntaxNode_Node<ElmSyntaxPattern_QualifiedNameRef>) in
            { (afterStartName: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                { (argsReverse: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>) in
                    let nameRange: ElmSyntaxRange_Range
                    let name: ElmSyntaxPattern_QualifiedNameRef
                    switch generated_argument0_0 {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_nameRange, generated_destructured_name):
                        nameRange =
                            generated_destructured_nameRange
                        name =
                            generated_destructured_name
                    }
                    let generated_let_result_argument0_range: ElmSyntaxRange_Range =
                        switch argsReverse.syntax {
                        case List_List.List_Empty:
                            nameRange
                        case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(lastArgRange, _), _):
                            Generated_end_start.Record(end: lastArgRange.end, start: nameRange.start)
                        }
                    return Generated_comments_syntax.Record(comments: Rope_prependTo(argsReverse.comments, afterStartName), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_let_result_argument0_range, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_NamedPattern(name, List_reverse(argsReverse.syntax))))
                }
            }
        },
        ElmParserPatterns_qualifiedNameRefNode,
        ElmParserLayout_optimisticLayout,
        ParserWithComments_manyWithoutReverse(ElmParserLayout_positivelyIndentedFollowedBy(ParserFast_map2({ (arg: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in { (commentsAfterArg: Rope_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(commentsAfterArg, arg.comments), syntax: arg.syntax) } }, ElmParserPatterns_patternNotDirectlyComposing, ElmParserLayout_optimisticLayout)))
    )

public static let ElmParserPatterns_qualifiedPatternWithoutConsumeArgs: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ParserFast_map2WithRange(
        { (range: ElmSyntaxRange_Range) in
            { (firstName: String) in
                { (after: Maybe_Maybe<Tuple<List_List<String>, String>>) in
                    let generated_localReturnResult_argument0_argument1_syntax_result_argument0: Generated_moduleName_name<List_List<String>, String> =
                        switch after {
                        case Maybe_Maybe.Maybe_Nothing:
                            Generated_moduleName_name.Record(moduleName: List_List.List_Empty, name: firstName)
                        case let Maybe_Maybe.Maybe_Just(Tuple.Tuple(qualificationAfter, unqualified)):
                            Generated_moduleName_name.Record(moduleName: List_cons(firstName, qualificationAfter), name: unqualified)
                        }
                    return Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_NamedPattern(generated_localReturnResult_argument0_argument1_syntax_result_argument0, List_List.List_Empty)))
                }
            }
        },
        ElmParserTokens_typeName,
        ElmParserPatterns_maybeDotTypeNamesTuple
    )

public static let ElmParserPatterns_recordPattern: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ParserFast_map2WithRange({ (range: ElmSyntaxRange_Range) in { (commentsBeforeElements: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (elements: Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<String>>, List_List<ElmSyntaxNode_Node<String>>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(elements.comments, commentsBeforeElements), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_RecordPattern(elements.syntax))) } } }, ParserFast_symbolFollowedBy("{", ElmParserLayout_maybeLayout), ParserFast_oneOf2(ParserFast_followedBySymbol("}", ParserFast_map3({ (head: ElmSyntaxNode_Node<String>) in { (commentsAfterHead: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (tail: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<String>>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(tail.comments, commentsAfterHead), syntax: List_cons(head, tail.syntax)) } } }, ElmParserTokens_functionNameNode, ElmParserLayout_maybeLayout, ParserWithComments_many(ParserFast_symbolFollowedBy(",", ParserFast_map3({ (beforeName: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (name: ElmSyntaxNode_Node<String>) in { (afterName: Rope_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(afterName, beforeName), syntax: name) } } }, ElmParserLayout_maybeLayout, ElmParserTokens_functionNameNode, ElmParserLayout_maybeLayout))))), ParserFast_symbol("}", Generated_comments_syntax.Record(comments: Rope_empty(), syntax: List_List.List_Empty))))

public static let ElmParserPatterns_stringPattern: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ElmParserTokens_singleOrTripleQuotedStringLiteralMapWithRange({ (range: ElmSyntaxRange_Range) in { (string: String) in Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_StringPattern(string))) } })

public static let ElmParserPatterns_varPattern: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ElmParserTokens_functionNameMapWithRange({ (range: ElmSyntaxRange_Range) in { (var_: String) in Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_VarPattern(var_))) } })

public static let ElmParserTokens_equal: ParserFast_Parser<Unit> =
    ParserFast_symbol("=", Unit.Unit)

public static let ElmParserTokens_functionName: ParserFast_Parser<String> =
    ParserFast_ifFollowedByWhileValidateWithoutLinebreak(CharExtra_unicodeIsLowerFast, CharExtra_unicodeIsAlphaNumOrUnderscoreFast, ElmParserTokens_isNotReserved)

public static let ElmParserTokens_functionNameNode: ParserFast_Parser<ElmSyntaxNode_Node<String>> =
    ParserFast_ifFollowedByWhileValidateMapWithRangeWithoutLinebreak({ (generated_0_argument0: ElmSyntaxRange_Range) in { (generated_1_argument0: String) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_0_argument0, generated_1_argument0) } }, CharExtra_unicodeIsLowerFast, CharExtra_unicodeIsAlphaNumOrUnderscoreFast, ElmParserTokens_isNotReserved)

public static let ElmParserTokens_functionNameNotInfixNode: ParserFast_Parser<ElmSyntaxNode_Node<String>> =
    ParserFast_ifFollowedByWhileValidateMapWithRangeWithoutLinebreak({ (generated_0_argument0: ElmSyntaxRange_Range) in { (generated_1_argument0: String) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_0_argument0, generated_1_argument0) } }, CharExtra_unicodeIsLowerFast, CharExtra_unicodeIsAlphaNumOrUnderscoreFast, { (name: String) in Basics_and(Basics_neq(name, "infix"), ElmParserTokens_isNotReserved(name)) })

public static let ElmParserTokens_inToken: ParserFast_Parser<Unit> =
    ParserFast_keyword("in", Unit.Unit)

public static let ElmParserTokens_parensEnd: ParserFast_Parser<Unit> =
    ParserFast_symbol(")", Unit.Unit)

public static let ElmParserTokens_singleQuotedStringLiteralAfterDoubleQuote: ParserFast_Parser<String> =
    ParserFast_loopUntil(
        ParserFast_symbol("\"", Unit.Unit),
        ParserFast_oneOf2(
            ParserFast_symbolFollowedBy("\\", ElmParserTokens_escapedCharValueMap(String_fromChar)),
            ParserFast_whileWithoutLinebreak(
                { (c: UnicodeScalar) in
                    switch c {
                    case "\"":
                        false
                    case "\\":
                        false
                    case _:
                        Basics_not(CharExtra_isUtf16Surrogate(c))
                    }
                }
            )
        ),
        "",
        { (extension_: String) in { (soFar: String) in String_append(soFar, extension_) } },
        Basics_identity
    )

public static let ElmParserTokens_tripleQuotedStringLiteralOfterTripleDoubleQuote: ParserFast_Parser<String> =
    ParserFast_loopUntil(
        ParserFast_symbol("\"\"\"", Unit.Unit),
        ParserFast_oneOf3(
            ParserFast_symbol("\"", "\""),
            ParserFast_symbolFollowedBy("\\", ElmParserTokens_escapedCharValueMap(String_fromChar)),
            ParserFast_while(
                { (c: UnicodeScalar) in
                    switch c {
                    case "\"":
                        false
                    case "\\":
                        false
                    case _:
                        Basics_not(CharExtra_isUtf16Surrogate(c))
                    }
                }
            )
        ),
        "",
        { (extension_: String) in { (soFar: String) in String_append(soFar, extension_) } },
        Basics_identity
    )

public static let ElmParserTokens_typeName: ParserFast_Parser<String> =
    ParserFast_ifFollowedByWhileWithoutLinebreak(CharExtra_unicodeIsUpperFast, CharExtra_unicodeIsAlphaNumOrUnderscoreFast)

public static let ElmParserTokens_typeNameNode: ParserFast_Parser<ElmSyntaxNode_Node<String>> =
    ParserFast_ifFollowedByWhileMapWithRangeWithoutLinebreak({ (generated_0_argument0: ElmSyntaxRange_Range) in { (generated_1_argument0: String) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_0_argument0, generated_1_argument0) } }, CharExtra_unicodeIsUpperFast, CharExtra_unicodeIsAlphaNumOrUnderscoreFast)

public static let ElmParserTypeAnnotation_genericTypeAnnotation: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>> =
    ElmParserTokens_functionNameMapWithRange({ (range: ElmSyntaxRange_Range) in { (var_: String) in Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_GenericType(var_))) } })

public static let ElmParserTypeAnnotation_maybeDotTypeNamesTuple: ParserFast_Parser<Maybe_Maybe<Tuple<List_List<String>, String>>> =
    ParserFast_map2OrSucceed(
        { (firstName: String) in
            { (afterFirstName: Maybe_Maybe<Tuple<List_List<String>, String>>) in
                switch afterFirstName {
                case Maybe_Maybe.Maybe_Nothing:
                    Maybe_Maybe.Maybe_Just(Tuple.Tuple(List_List.List_Empty, firstName))
                case let Maybe_Maybe.Maybe_Just(Tuple.Tuple(qualificationAfter, unqualified)):
                    Maybe_Maybe.Maybe_Just(Tuple.Tuple(List_cons(firstName, qualificationAfter), unqualified))
                }
            }
        },
        ParserFast_symbolFollowedBy(".", ElmParserTokens_typeName),
        ParserFast_lazy(
            { (generated_argument0_argument2_0: Unit) in
                let (_) =
                    generated_argument0_argument2_0
                return ElmParserTypeAnnotation_maybeDotTypeNamesTuple
            }
        ),
        Maybe_Maybe.Maybe_Nothing
    )

public static let ElmParserTypeAnnotation_parensTypeAnnotation: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>> =
    ParserFast_symbolFollowedBy(
        "(",
        ParserFast_oneOf2(
            ParserFast_symbolWithEndLocation(")", { (end: Generated_column_row<Double, Double>) in Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: end, start: Generated_column_row.Record(column: Basics_sub(end.column, 2.0), row: end.row)), ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Unit)) }),
            ParserFast_map4WithRange(
                { (rangeAfterOpeningParens: Generated_end_start<ElmSyntaxRange_Location, Generated_column_row<Double, Double>>) in
                    { (commentsBeforeFirstPart: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                        { (firstPart: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in
                            { (commentsAfterFirstPart: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                                { (lastToSecondPart: Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<String>>, Maybe_Maybe<Generated_maybeThirdPart_secondPart<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>>>) in
                                    let generated_localReturnResult_argument1_syntax_result_argument0_argument1_argument1: ElmSyntaxTypeAnnotation_TypeAnnotation
                                    switch lastToSecondPart.syntax {
                                    case Maybe_Maybe.Maybe_Nothing:
                                        let generated_let_caseResult_case0_argument1_syntax_result_argument0_argument1_argument1_firstPartType: ElmSyntaxTypeAnnotation_TypeAnnotation
                                        switch firstPart.syntax {
                                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_firstPartType):
                                            generated_let_caseResult_case0_argument1_syntax_result_argument0_argument1_argument1_firstPartType =
                                                generated_destructured_firstPartType
                                        }
                                        generated_localReturnResult_argument1_syntax_result_argument0_argument1_argument1 =
                                            generated_let_caseResult_case0_argument1_syntax_result_argument0_argument1_argument1_firstPartType
                                    case let Maybe_Maybe.Maybe_Just(firstAndMaybeThirdPart):
                                        generated_localReturnResult_argument1_syntax_result_argument0_argument1_argument1 =
                                            switch firstAndMaybeThirdPart.maybeThirdPart {
                                            case Maybe_Maybe.Maybe_Nothing:
                                                ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Tupled(
                                                    Array_toList(
                                                        [ firstPart.syntax,
                                                          firstAndMaybeThirdPart.secondPart
                                                        ]
                                                    )
                                                )
                                            case let Maybe_Maybe.Maybe_Just(thirdPart):
                                                ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Tupled(
                                                    Array_toList(
                                                        [ firstPart.syntax,
                                                          firstAndMaybeThirdPart.secondPart,
                                                          thirdPart
                                                        ]
                                                    )
                                                )
                                            }
                                    }
                                    return Generated_comments_syntax.Record(comments: Rope_prependTo(lastToSecondPart.comments, Rope_prependTo(commentsAfterFirstPart, Rope_prependTo(firstPart.comments, commentsBeforeFirstPart))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: rangeAfterOpeningParens.end, start: Generated_column_row.Record(column: Basics_sub(rangeAfterOpeningParens.start.column, 1.0), row: rangeAfterOpeningParens.start.row)), generated_localReturnResult_argument1_syntax_result_argument0_argument1_argument1))
                                }
                            }
                        }
                    }
                },
                ElmParserLayout_maybeLayout,
                ElmParserTypeAnnotation_typeAnnotation,
                ElmParserLayout_maybeLayout,
                ParserFast_oneOf2(ParserFast_symbol(")", Generated_comments_syntax.Record(comments: Rope_empty(), syntax: Maybe_Maybe.Maybe_Nothing)), ParserFast_symbolFollowedBy(",", ParserFast_map4({ (commentsBefore: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (secondPartResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in { (commentsAfter: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (maybeThirdPartResult: Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(commentsAfter, Rope_prependTo(secondPartResult.comments, commentsBefore)), syntax: Maybe_Maybe.Maybe_Just(Generated_maybeThirdPart_secondPart.Record(maybeThirdPart: maybeThirdPartResult.syntax, secondPart: secondPartResult.syntax))) } } } }, ElmParserLayout_maybeLayout, ElmParserTypeAnnotation_typeAnnotation, ElmParserLayout_maybeLayout, ParserFast_oneOf2(ParserFast_symbol(")", Generated_comments_syntax.Record(comments: Rope_empty(), syntax: Maybe_Maybe.Maybe_Nothing)), ParserFast_symbolFollowedBy(",", ParserFast_followedBySymbol(")", ParserFast_map3({ (commentsBefore: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (thirdPartResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in { (commentsAfter: Rope_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(commentsAfter, Rope_prependTo(thirdPartResult.comments, commentsBefore)), syntax: Maybe_Maybe.Maybe_Just(thirdPartResult.syntax)) } } }, ElmParserLayout_maybeLayout, ElmParserTypeAnnotation_typeAnnotation, ElmParserLayout_maybeLayout)))))))
            )
        )
    )

public static let ElmParserTypeAnnotation_recordFieldDefinition: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordField>>> =
    ParserFast_map6WithRange({ (range: ElmSyntaxRange_Range) in { (commentsBeforeFunctionName: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (name: ElmSyntaxNode_Node<String>) in { (commentsAfterFunctionName: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (commentsAfterColon: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (value: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in { (commentsAfterValue: Rope_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(commentsAfterValue, Rope_prependTo(value.comments, Rope_prependTo(commentsAfterColon, Rope_prependTo(commentsAfterFunctionName, commentsBeforeFunctionName)))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, Tuple.Tuple(name, value.syntax))) } } } } } } }, ElmParserLayout_maybeLayout, ElmParserTokens_functionNameNode, ElmParserLayout_maybeLayout, ParserFast_symbolFollowedBy(":", ElmParserLayout_maybeLayout), ElmParserTypeAnnotation_typeAnnotation, ElmParserLayout_maybeLayout)

public static let ElmParserTypeAnnotation_recordFieldsTypeAnnotation: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxTypeAnnotation_RecordDefinition>> =
    ParserFast_map3({ (commentsBefore: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (head: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordField>>) in { (tail: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordField>>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(tail.comments, Rope_prependTo(head.comments, commentsBefore)), syntax: List_cons(head.syntax, tail.syntax)) } } }, ElmParserLayout_maybeLayout, ElmParserTypeAnnotation_recordFieldDefinition, ParserWithComments_many(ParserFast_symbolFollowedBy(",", ParserFast_map2({ (commentsBefore: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (field: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordField>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(field.comments, commentsBefore), syntax: field.syntax) } }, ElmParserLayout_maybeLayout, ElmParserTypeAnnotation_recordFieldDefinition))))

public static let ElmParserTypeAnnotation_recordTypeAnnotation: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>> =
    ParserFast_map2WithRange(
        { (range: ElmSyntaxRange_Range) in
            { (commentsBefore: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                { (afterCurly: Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in
                    let generated_localReturnResult_syntax_result_argument0: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation> =
                        switch afterCurly.syntax {
                        case Maybe_Maybe.Maybe_Nothing:
                            ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmParserTypeAnnotation_typeAnnotationRecordEmpty)
                        case let Maybe_Maybe.Maybe_Just(afterCurlyResult):
                            ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, afterCurlyResult)
                        }
                    return Generated_comments_syntax.Record(comments: Rope_prependTo(afterCurly.comments, commentsBefore), syntax: generated_localReturnResult_syntax_result_argument0)
                }
            }
        },
        ParserFast_symbolFollowedBy("{", ElmParserLayout_maybeLayout),
        ParserFast_oneOf2(
            ParserFast_followedBySymbol(
                "}",
                ParserFast_map3(
                    { (firstNameNode: ElmSyntaxNode_Node<String>) in
                        { (commentsAfterFirstName: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                            { (afterFirstName: Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<String>>, ElmParserTypeAnnotation_RecordFieldsOrExtensionAfterName>) in
                                let generated_localReturnResult_argument0_syntax_result_argument0_left_argument0_argument2: ElmSyntaxTypeAnnotation_TypeAnnotation =
                                    switch afterFirstName.syntax {
                                    case let ElmParserTypeAnnotation_RecordFieldsOrExtensionAfterName.ElmParserTypeAnnotation_RecordExtensionExpressionAfterName(fields):
                                        ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_GenericRecord(firstNameNode, fields)
                                    case let ElmParserTypeAnnotation_RecordFieldsOrExtensionAfterName.ElmParserTypeAnnotation_FieldsAfterName(fieldsAfterName):
                                        ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Record(List_cons(ElmSyntaxNode_combine({ (generated_argument0_left_argument0_caseResult_case1_argument0_syntax_result_argument0_left_argument0_argument2_0: ElmSyntaxNode_Node<String>) in { (generated_argument0_left_argument0_caseResult_case1_argument0_syntax_result_argument0_left_argument0_argument2_1: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in Tuple_pair(generated_argument0_left_argument0_caseResult_case1_argument0_syntax_result_argument0_left_argument0_argument2_0, generated_argument0_left_argument0_caseResult_case1_argument0_syntax_result_argument0_left_argument0_argument2_1) } }, firstNameNode, fieldsAfterName.firstFieldValue), fieldsAfterName.tailFields))
                                    }
                                return Generated_comments_syntax.Record(comments: Rope_prependTo(afterFirstName.comments, commentsAfterFirstName), syntax: Maybe_Maybe.Maybe_Just(generated_localReturnResult_argument0_syntax_result_argument0_left_argument0_argument2))
                            }
                        }
                    },
                    ElmParserTokens_functionNameNode,
                    ElmParserLayout_maybeLayout,
                    ParserFast_oneOf2(ParserFast_symbolFollowedBy("|", ParserFast_map3WithRange({ (range: ElmSyntaxRange_Range) in { (commentsBefore: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (head: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordField>>) in { (tail: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordField>>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(tail.comments, Rope_prependTo(head.comments, commentsBefore)), syntax: ElmParserTypeAnnotation_RecordFieldsOrExtensionAfterName.ElmParserTypeAnnotation_RecordExtensionExpressionAfterName(ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, List_cons(head.syntax, tail.syntax)))) } } } }, ElmParserLayout_maybeLayout, ElmParserTypeAnnotation_recordFieldDefinition, ParserWithComments_many(ParserFast_symbolFollowedBy(",", ParserFast_map2({ (commentsBefore: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (field: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordField>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(field.comments, commentsBefore), syntax: field.syntax) } }, ElmParserLayout_maybeLayout, ElmParserTypeAnnotation_recordFieldDefinition))))), ParserFast_symbolFollowedBy(":", ParserFast_map4({ (commentsBeforeFirstFieldValue: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (firstFieldValue: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in { (commentsAfterFirstFieldValue: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (tailFields: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordField>>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(tailFields.comments, Rope_prependTo(commentsAfterFirstFieldValue, Rope_prependTo(firstFieldValue.comments, commentsBeforeFirstFieldValue))), syntax: ElmParserTypeAnnotation_RecordFieldsOrExtensionAfterName.ElmParserTypeAnnotation_FieldsAfterName(Generated_firstFieldValue_tailFields.Record(firstFieldValue: firstFieldValue.syntax, tailFields: tailFields.syntax))) } } } }, ElmParserLayout_maybeLayout, ElmParserTypeAnnotation_typeAnnotation, ElmParserLayout_maybeLayout, ParserFast_orSucceed(ParserFast_symbolFollowedBy(",", ElmParserTypeAnnotation_recordFieldsTypeAnnotation), Generated_comments_syntax.Record(comments: Rope_empty(), syntax: List_List.List_Empty)))))
                )
            ),
            ParserFast_symbol("}", Generated_comments_syntax.Record(comments: Rope_empty(), syntax: Maybe_Maybe.Maybe_Nothing))
        )
    )

public static let ElmParserTypeAnnotation_typeAnnotation: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>> =
    ParserFast_map3(
        { (inType: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in
            { (commentsAfterIn: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                { (maybeOut: Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>>) in
                    let generated_localReturnResult_syntax_result_argument0: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation> =
                        switch maybeOut.syntax {
                        case Maybe_Maybe.Maybe_Nothing:
                            inType.syntax
                        case let Maybe_Maybe.Maybe_Just(out):
                            ElmSyntaxNode_combine({ (generated_0_argument0_caseResult_case1_syntax_result_argument0: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in { (generated_1_argument0_caseResult_case1_syntax_result_argument0: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_FunctionTypeAnnotation(generated_0_argument0_caseResult_case1_syntax_result_argument0, generated_1_argument0_caseResult_case1_syntax_result_argument0) } }, inType.syntax, out)
                        }
                    return Generated_comments_syntax.Record(comments: Rope_prependTo(maybeOut.comments, Rope_prependTo(commentsAfterIn, inType.comments)), syntax: generated_localReturnResult_syntax_result_argument0)
                }
            }
        },
        ParserFast_lazy(
            { (generated_argument0_argument1_0: Unit) in
                let (_) =
                    generated_argument0_argument1_0
                return ElmParserTypeAnnotation_typeAnnotationNoFnIncludingTypedWithArguments
            }
        ),
        ElmParserLayout_optimisticLayout,
        ParserFast_map2OrSucceed(
            { (commentsAfterArrow: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (typeAnnotationResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(typeAnnotationResult.comments, commentsAfterArrow), syntax: Maybe_Maybe.Maybe_Just(typeAnnotationResult.syntax)) } },
            ParserFast_symbolFollowedBy("->", ElmParserLayout_positivelyIndentedPlusFollowedBy(2.0, ElmParserLayout_maybeLayout)),
            ParserFast_lazy(
                { (generated_argument0_argument2_argument3_0: Unit) in
                    let (_) =
                        generated_argument0_argument2_argument3_0
                    return ElmParserTypeAnnotation_typeAnnotation
                }
            ),
            Generated_comments_syntax.Record(comments: Rope_empty(), syntax: Maybe_Maybe.Maybe_Nothing)
        )
    )

public static let ElmParserTypeAnnotation_typeAnnotationNoFnExcludingTypedWithArguments: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>> =
    ParserFast_oneOf4(ElmParserTypeAnnotation_parensTypeAnnotation, ElmParserTypeAnnotation_typedTypeAnnotationWithoutArguments, ElmParserTypeAnnotation_genericTypeAnnotation, ElmParserTypeAnnotation_recordTypeAnnotation)

public static let ElmParserTypeAnnotation_typeAnnotationNoFnIncludingTypedWithArguments: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>> =
    ParserFast_oneOf4(ElmParserTypeAnnotation_parensTypeAnnotation, ElmParserTypeAnnotation_typedTypeAnnotationWithArgumentsOptimisticLayout, ElmParserTypeAnnotation_genericTypeAnnotation, ElmParserTypeAnnotation_recordTypeAnnotation)

public static let ElmParserTypeAnnotation_typeAnnotationRecordEmpty: ElmSyntaxTypeAnnotation_TypeAnnotation =
    ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Record(List_List.List_Empty)

public static let ElmParserTypeAnnotation_typedTypeAnnotationWithArgumentsOptimisticLayout: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>> =
    ParserFast_map3(
        { (generated_argument0_0: ElmSyntaxNode_Node<Tuple<ElmSyntaxModuleName_ModuleName, String>>) in
            { (commentsAfterName: Rope_Rope<ElmSyntaxNode_Node<String>>) in
                { (argsReverse: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>>) in
                    let nameNode: ElmSyntaxNode_Node<Tuple<ElmSyntaxModuleName_ModuleName, String>>
                    let nameRange: ElmSyntaxRange_Range
                    let (generated_destructured_nameNode) =
                        generated_argument0_0
                    nameNode =
                        generated_destructured_nameNode
                    switch nameNode {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_nameRange, _):
                        nameRange =
                            generated_destructured_nameRange
                    }
                    let generated_let_result_argument0_range: ElmSyntaxRange_Range =
                        switch argsReverse.syntax {
                        case List_List.List_Empty:
                            nameRange
                        case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(lastArgRange, _), _):
                            Generated_end_start.Record(end: lastArgRange.end, start: nameRange.start)
                        }
                    return Generated_comments_syntax.Record(comments: Rope_prependTo(argsReverse.comments, commentsAfterName), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_let_result_argument0_range, ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Typed(nameNode, List_reverse(argsReverse.syntax))))
                }
            }
        },
        ParserFast_map2WithRange(
            { (range: ElmSyntaxRange_Range) in
                { (startName: String) in
                    { (afterStartName: Maybe_Maybe<Tuple<List_List<String>, String>>) in
                        let generated_let_result_argument0_argument1_name: Tuple<ElmSyntaxModuleName_ModuleName, String> =
                            switch afterStartName {
                            case Maybe_Maybe.Maybe_Nothing:
                                Tuple.Tuple(List_List.List_Empty, startName)
                            case let Maybe_Maybe.Maybe_Just(Tuple.Tuple(qualificationAfterStartName, unqualified)):
                                Tuple.Tuple(List_cons(startName, qualificationAfterStartName), unqualified)
                            }
                        return ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, generated_let_result_argument0_argument1_name)
                    }
                }
            },
            ElmParserTokens_typeName,
            ElmParserTypeAnnotation_maybeDotTypeNamesTuple
        ),
        ElmParserLayout_optimisticLayout,
        ParserWithComments_manyWithoutReverse(ElmParserLayout_positivelyIndentedFollowedBy(ParserFast_map2({ (typeAnnotationResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in { (commentsAfter: Rope_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(commentsAfter, typeAnnotationResult.comments), syntax: typeAnnotationResult.syntax) } }, ElmParserTypeAnnotation_typeAnnotationNoFnExcludingTypedWithArguments, ElmParserLayout_optimisticLayout)))
    )

public static let ElmParserTypeAnnotation_typedTypeAnnotationWithoutArguments: ParserFast_Parser<ParserWithComments_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>> =
    ParserFast_map2WithRange(
        { (range: ElmSyntaxRange_Range) in
            { (startName: String) in
                { (afterStartName: Maybe_Maybe<Tuple<List_List<String>, String>>) in
                    let generated_let_result_argument0_name: Tuple<ElmSyntaxModuleName_ModuleName, String> =
                        switch afterStartName {
                        case Maybe_Maybe.Maybe_Nothing:
                            Tuple.Tuple(List_List.List_Empty, startName)
                        case let Maybe_Maybe.Maybe_Just(Tuple.Tuple(qualificationAfterStartName, unqualified)):
                            Tuple.Tuple(List_cons(startName, qualificationAfterStartName), unqualified)
                        }
                    return Generated_comments_syntax.Record(comments: Rope_empty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Typed(ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, generated_let_result_argument0_name), List_List.List_Empty)))
                }
            }
        },
        ElmParserTokens_typeName,
        ElmParserTypeAnnotation_maybeDotTypeNamesTuple
    )

public static let ElmProcessing_init: ElmProcessing_ProcessContext =
    ElmProcessing_ProcessContext.ElmProcessing_ProcessContext(Dict_empty())

public static let ElmRawFile_decoder: JsonDecode_Decoder<ElmRawFile_RawFile> =
    JsonDecode_map({ (generated_0_argument0: ElmSyntaxFile_File) in ElmInternalRawFile_RawFile.ElmInternalRawFile_Raw(generated_0_argument0) }, ElmSyntaxFile_decoder)

public static let ElmSyntaxComments_decoder: JsonDecode_Decoder<ElmSyntaxComments_Comment> =
    JsonDecode_string

public static let ElmSyntaxDeclaration_decoder: JsonDecode_Decoder<ElmSyntaxDeclaration_Declaration> =
    JsonDecode_lazy(
        { (generated_argument0_0: Unit) in
            let (_) =
                generated_argument0_0
            return
                ElmJsonUtil_decodeTyped(
                    Array_toList(
                        [ Tuple.Tuple("function", JsonDecode_map({ (generated_0_argument0_right_part1_0_argument0_result_argument0: ElmSyntaxExpression_Function) in ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_FunctionDeclaration(generated_0_argument0_right_part1_0_argument0_result_argument0) }, ElmSyntaxExpression_functionDecoder)),
                          Tuple.Tuple("typeAlias", JsonDecode_map({ (generated_0_argument0_right_part1_1_argument0_result_argument0: ElmSyntaxTypeAlias_TypeAlias) in ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_AliasDeclaration(generated_0_argument0_right_part1_1_argument0_result_argument0) }, ElmSyntaxTypeAlias_decoder)),
                          Tuple.Tuple("typedecl", JsonDecode_map({ (generated_0_argument0_right_part1_2_argument0_result_argument0: ElmSyntaxType_Type) in ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_CustomTypeDeclaration(generated_0_argument0_right_part1_2_argument0_result_argument0) }, ElmSyntaxType_decoder)),
                          Tuple.Tuple("port", JsonDecode_map({ (generated_0_argument0_right_part1_3_argument0_result_argument0: ElmSyntaxSignature_Signature) in ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_PortDeclaration(generated_0_argument0_right_part1_3_argument0_result_argument0) }, ElmSyntaxSignature_decoder)),
                          Tuple.Tuple("infix", JsonDecode_map({ (generated_0_argument0_right_part1_4_argument0_result_argument0: ElmSyntaxInfix_Infix) in ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_InfixDeclaration(generated_0_argument0_right_part1_4_argument0_result_argument0) }, ElmSyntaxInfix_decoder)),
                          Tuple.Tuple("destructuring", JsonDecode_map2({ (generated_0_argument0_part1_5_argument0_result_argument0: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in { (generated_1_argument0_part1_5_argument0_result_argument0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_Destructuring(generated_0_argument0_part1_5_argument0_result_argument0, generated_1_argument0_part1_5_argument0_result_argument0) } }, JsonDecode_field("pattern", ElmSyntaxNode_decoder(ElmSyntaxPattern_decoder)), JsonDecode_field("expression", ElmSyntaxNode_decoder(ElmSyntaxExpression_decoder))))
                        ]
                    )
                )
        }
    )

public static let ElmSyntaxDocumentation_decoder: JsonDecode_Decoder<ElmSyntaxDocumentation_Documentation> =
    JsonDecode_string

public static let ElmSyntaxExposing_decoder: JsonDecode_Decoder<ElmSyntaxExposing_Exposing> =
    ElmJsonUtil_decodeTyped(
        Array_toList(
            [ Tuple.Tuple("all", JsonDecode_map({ (generated_0_argument0_right_part1_0_argument0: ElmSyntaxRange_Range) in ElmSyntaxExposing_Exposing.ElmSyntaxExposing_All(generated_0_argument0_right_part1_0_argument0) }, ElmSyntaxRange_decoder)),
              Tuple.Tuple("explicit", JsonDecode_map({ (generated_0_argument0_right_part1_1_argument0: List_List<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>) in ElmSyntaxExposing_Exposing.ElmSyntaxExposing_Explicit(generated_0_argument0_right_part1_1_argument0) }, JsonDecode_list(ElmSyntaxExposing_topLevelExposeDecoder)))
            ]
        )
    )

public static let ElmSyntaxExposing_exposedTypeDecoder: JsonDecode_Decoder<ElmSyntaxExposing_ExposedType> =
    JsonDecode_map2({ (generated_name: String) in { (generated_open: Maybe_Maybe<ElmSyntaxRange_Range>) in Generated_name_open_.Record(name: generated_name, open_: generated_open) } }, JsonDecode_field("name", JsonDecode_string), JsonDecode_field("open", JsonDecode_nullable(ElmSyntaxRange_decoder)))

public static let ElmSyntaxExposing_topLevelExposeDecoder: JsonDecode_Decoder<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>> =
    ElmSyntaxNode_decoder(
        ElmJsonUtil_decodeTyped(
            Array_toList(
                [ Tuple.Tuple("infix", JsonDecode_map({ (generated_0_argument0_part1_0_argument0_argument0: String) in ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_InfixExpose(generated_0_argument0_part1_0_argument0_argument0) }, JsonDecode_field("name", JsonDecode_string))),
                  Tuple.Tuple("function", JsonDecode_map({ (generated_0_argument0_part1_1_argument0_argument0: String) in ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_FunctionExpose(generated_0_argument0_part1_1_argument0_argument0) }, JsonDecode_field("name", JsonDecode_string))),
                  Tuple.Tuple("typeOrAlias", JsonDecode_map({ (generated_0_argument0_part1_2_argument0_argument0: String) in ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeOrAliasExpose(generated_0_argument0_part1_2_argument0_argument0) }, JsonDecode_field("name", JsonDecode_string))),
                  Tuple.Tuple("typeexpose", JsonDecode_map({ (generated_0_argument0_part1_3_argument0_argument0: ElmSyntaxExposing_ExposedType) in ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeExpose(generated_0_argument0_part1_3_argument0_argument0) }, ElmSyntaxExposing_exposedTypeDecoder))
                ]
            )
        )
    )

public static let ElmSyntaxExpression_decodeCase: JsonDecode_Decoder<ElmSyntaxExpression_Case> =
    JsonDecode_lazy(
        { (generated_argument0_0: Unit) in
            let (_) =
                generated_argument0_0
            return JsonDecode_map2({ (generated_argument0_result_argument0_0: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in { (generated_argument0_result_argument0_1: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in Tuple_pair(generated_argument0_result_argument0_0, generated_argument0_result_argument0_1) } }, JsonDecode_field("pattern", ElmSyntaxNode_decoder(ElmSyntaxPattern_decoder)), JsonDecode_field("expression", ElmSyntaxExpression_decodeNested))
        }
    )

public static let ElmSyntaxExpression_decodeCaseBlock: JsonDecode_Decoder<ElmSyntaxExpression_CaseBlock> =
    JsonDecode_lazy(
        { (generated_argument0_0: Unit) in
            let (_) =
                generated_argument0_0
            return JsonDecode_map2({ (generated_expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in { (generated_cases: ElmSyntaxExpression_Cases) in Generated_cases_expression.Record(cases: generated_cases, expression: generated_expression) } }, JsonDecode_field("expression", ElmSyntaxExpression_decodeNested), JsonDecode_field("cases", JsonDecode_list(ElmSyntaxExpression_decodeCase)))
        }
    )

public static let ElmSyntaxExpression_decodeChar: JsonDecode_Decoder<UnicodeScalar> =
    JsonDecode_andThen(
        { (s: String) in
            switch String_uncons(s) {
            case let Maybe_Maybe.Maybe_Just(Tuple.Tuple(c, _)):
                JsonDecode_succeed(c)
            case Maybe_Maybe.Maybe_Nothing:
                JsonDecode_fail("Not a char")
            }
        },
        JsonDecode_string
    )

public static let ElmSyntaxExpression_decodeFunctionDeclaration: JsonDecode_Decoder<ElmSyntaxExpression_FunctionImplementation> =
    JsonDecode_lazy(
        { (generated_argument0_0: Unit) in
            let (_) =
                generated_argument0_0
            return JsonDecode_map3({ (generated_name: ElmSyntaxNode_Node<String>) in { (generated_arguments: List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in { (generated_expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in Generated_arguments_expression_name.Record(arguments: generated_arguments, expression: generated_expression, name: generated_name) } } }, JsonDecode_field("name", ElmSyntaxNode_decoder(JsonDecode_string)), JsonDecode_field("arguments", JsonDecode_list(ElmSyntaxNode_decoder(ElmSyntaxPattern_decoder))), JsonDecode_field("expression", ElmSyntaxExpression_decodeNested))
        }
    )

public static let ElmSyntaxExpression_decodeLambda: JsonDecode_Decoder<ElmSyntaxExpression_Lambda> =
    JsonDecode_lazy(
        { (generated_argument0_0: Unit) in
            let (_) =
                generated_argument0_0
            return JsonDecode_map2({ (generated_args: List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in { (generated_expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in Generated_args_expression.Record(args: generated_args, expression: generated_expression) } }, JsonDecode_field("patterns", JsonDecode_list(ElmSyntaxNode_decoder(ElmSyntaxPattern_decoder))), JsonDecode_field("expression", ElmSyntaxExpression_decodeNested))
        }
    )

public static let ElmSyntaxExpression_decodeLetBlock: JsonDecode_Decoder<ElmSyntaxExpression_LetBlock> =
    JsonDecode_lazy(
        { (generated_argument0_0: Unit) in
            let (_) =
                generated_argument0_0
            return JsonDecode_map2({ (generated_declarations: List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>) in { (generated_expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in Generated_declarations_expression.Record(declarations: generated_declarations, expression: generated_expression) } }, JsonDecode_field("declarations", JsonDecode_list(ElmSyntaxExpression_decodeLetDeclaration)), JsonDecode_field("expression", ElmSyntaxExpression_decodeNested))
        }
    )

public static let ElmSyntaxExpression_decodeLetDeclaration: JsonDecode_Decoder<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>> =
    JsonDecode_lazy(
        { (generated_argument0_0: Unit) in
            let (_) =
                generated_argument0_0
            return
                ElmSyntaxNode_decoder(
                    ElmJsonUtil_decodeTyped(
                        Array_toList(
                            [ Tuple.Tuple("function", JsonDecode_map({ (generated_0_argument0_part1_0_argument0_argument0_result_argument0: ElmSyntaxExpression_Function) in ElmSyntaxExpression_LetDeclaration.ElmSyntaxExpression_LetFunction(generated_0_argument0_part1_0_argument0_argument0_result_argument0) }, ElmSyntaxExpression_functionDecoder)),
                              Tuple.Tuple("destructuring", JsonDecode_map2({ (generated_0_argument0_part1_1_argument0_argument0_result_argument0: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in { (generated_1_argument0_part1_1_argument0_argument0_result_argument0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in ElmSyntaxExpression_LetDeclaration.ElmSyntaxExpression_LetDestructuring(generated_0_argument0_part1_1_argument0_argument0_result_argument0, generated_1_argument0_part1_1_argument0_argument0_result_argument0) } }, JsonDecode_field("pattern", ElmSyntaxNode_decoder(ElmSyntaxPattern_decoder)), JsonDecode_field("expression", ElmSyntaxExpression_decodeNested)))
                            ]
                        )
                    )
                )
        }
    )

public static let ElmSyntaxExpression_decodeNested: JsonDecode_Decoder<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>> =
    JsonDecode_lazy(
        { (generated_argument0_0: Unit) in
            let (_) =
                generated_argument0_0
            return ElmSyntaxNode_decoder(ElmSyntaxExpression_decoder)
        }
    )

public static let ElmSyntaxExpression_decodeOperatorApplication: JsonDecode_Decoder<ElmSyntaxExpression_Expression> =
    JsonDecode_lazy(
        { (generated_argument0_0: Unit) in
            let (_) =
                generated_argument0_0
            return JsonDecode_map4({ (generated_0_argument0_result_argument0: String) in { (generated_1_argument0_result_argument0: ElmSyntaxInfix_InfixDirection) in { (generated_2_argument0_result_argument0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in { (generated_3_argument0_result_argument0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in ElmSyntaxExpression_Expression.ElmSyntaxExpression_OperatorApplication(generated_0_argument0_result_argument0, generated_1_argument0_result_argument0, generated_2_argument0_result_argument0, generated_3_argument0_result_argument0) } } } }, JsonDecode_field("operator", JsonDecode_string), JsonDecode_field("direction", ElmSyntaxInfix_decodeDirection), JsonDecode_field("left", ElmSyntaxExpression_decodeNested), JsonDecode_field("right", ElmSyntaxExpression_decodeNested))
        }
    )

public static let ElmSyntaxExpression_decodeRecordSetter: JsonDecode_Decoder<ElmSyntaxExpression_RecordSetter> =
    JsonDecode_lazy(
        { (generated_argument0_0: Unit) in
            let (_) =
                generated_argument0_0
            return JsonDecode_map2({ (generated_argument0_result_argument0_0: ElmSyntaxNode_Node<String>) in { (generated_argument0_result_argument0_1: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in Tuple_pair(generated_argument0_result_argument0_0, generated_argument0_result_argument0_1) } }, JsonDecode_field("field", ElmSyntaxNode_decoder(JsonDecode_string)), JsonDecode_field("expression", ElmSyntaxExpression_decodeNested))
        }
    )

public static let ElmSyntaxExpression_decoder: JsonDecode_Decoder<ElmSyntaxExpression_Expression> =
    JsonDecode_lazy(
        { (generated_argument0_0: Unit) in
            let (_) =
                generated_argument0_0
            return
                ElmJsonUtil_decodeTyped(
                    Array_toList(
                        [ Tuple.Tuple("unit", JsonDecode_succeed(ElmSyntaxExpression_Expression.ElmSyntaxExpression_UnitExpr)),
                          Tuple.Tuple("application", JsonDecode_map({ (generated_0_argument0_right_part1_1_argument0_result_argument0: List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in ElmSyntaxExpression_Expression.ElmSyntaxExpression_Application(generated_0_argument0_right_part1_1_argument0_result_argument0) }, JsonDecode_list(ElmSyntaxExpression_decodeNested))),
                          Tuple.Tuple("operatorapplication", ElmSyntaxExpression_decodeOperatorApplication),
                          Tuple.Tuple("functionOrValue", JsonDecode_map2({ (generated_0_argument0_part1_3_argument0_result_argument0: ElmSyntaxModuleName_ModuleName) in { (generated_1_argument0_part1_3_argument0_result_argument0: String) in ElmSyntaxExpression_Expression.ElmSyntaxExpression_FunctionOrValue(generated_0_argument0_part1_3_argument0_result_argument0, generated_1_argument0_part1_3_argument0_result_argument0) } }, JsonDecode_field("moduleName", ElmSyntaxModuleName_decoder), JsonDecode_field("name", JsonDecode_string))),
                          Tuple.Tuple("ifBlock", JsonDecode_map3({ (generated_0_argument0_part1_4_argument0_result_argument0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in { (generated_1_argument0_part1_4_argument0_result_argument0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in { (generated_2_argument0_part1_4_argument0_result_argument0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in ElmSyntaxExpression_Expression.ElmSyntaxExpression_IfBlock(generated_0_argument0_part1_4_argument0_result_argument0, generated_1_argument0_part1_4_argument0_result_argument0, generated_2_argument0_part1_4_argument0_result_argument0) } } }, JsonDecode_field("clause", ElmSyntaxExpression_decodeNested), JsonDecode_field("then", ElmSyntaxExpression_decodeNested), JsonDecode_field("else", ElmSyntaxExpression_decodeNested))),
                          Tuple.Tuple("prefixoperator", JsonDecode_map({ (generated_0_argument0_right_part1_5_argument0_result_argument0: String) in ElmSyntaxExpression_Expression.ElmSyntaxExpression_PrefixOperator(generated_0_argument0_right_part1_5_argument0_result_argument0) }, JsonDecode_string)),
                          Tuple.Tuple("operator", JsonDecode_map({ (generated_0_argument0_right_part1_6_argument0_result_argument0: String) in ElmSyntaxExpression_Expression.ElmSyntaxExpression_Operator(generated_0_argument0_right_part1_6_argument0_result_argument0) }, JsonDecode_string)),
                          Tuple.Tuple("hex", JsonDecode_map({ (generated_0_argument0_right_part1_7_argument0_result_argument0: Double) in ElmSyntaxExpression_Expression.ElmSyntaxExpression_Hex(generated_0_argument0_right_part1_7_argument0_result_argument0) }, JsonDecode_int)),
                          Tuple.Tuple("integer", JsonDecode_map({ (generated_0_argument0_right_part1_8_argument0_result_argument0: Double) in ElmSyntaxExpression_Expression.ElmSyntaxExpression_Integer(generated_0_argument0_right_part1_8_argument0_result_argument0) }, JsonDecode_int)),
                          Tuple.Tuple("float", JsonDecode_map({ (generated_0_argument0_right_part1_9_argument0_result_argument0: Double) in ElmSyntaxExpression_Expression.ElmSyntaxExpression_Floatable(generated_0_argument0_right_part1_9_argument0_result_argument0) }, JsonDecode_float)),
                          Tuple.Tuple("negation", JsonDecode_map({ (generated_0_argument0_right_part1_10_argument0_result_argument0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in ElmSyntaxExpression_Expression.ElmSyntaxExpression_Negation(generated_0_argument0_right_part1_10_argument0_result_argument0) }, ElmSyntaxExpression_decodeNested)),
                          Tuple.Tuple("literal", JsonDecode_map({ (generated_0_argument0_right_part1_11_argument0_result_argument0: String) in ElmSyntaxExpression_Expression.ElmSyntaxExpression_Literal(generated_0_argument0_right_part1_11_argument0_result_argument0) }, JsonDecode_string)),
                          Tuple.Tuple("charLiteral", JsonDecode_map({ (generated_0_argument0_right_part1_12_argument0_result_argument0: UnicodeScalar) in ElmSyntaxExpression_Expression.ElmSyntaxExpression_CharLiteral(generated_0_argument0_right_part1_12_argument0_result_argument0) }, ElmSyntaxExpression_decodeChar)),
                          Tuple.Tuple("tupled", JsonDecode_map({ (generated_0_argument0_right_part1_13_argument0_result_argument0: List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in ElmSyntaxExpression_Expression.ElmSyntaxExpression_TupledExpression(generated_0_argument0_right_part1_13_argument0_result_argument0) }, JsonDecode_list(ElmSyntaxExpression_decodeNested))),
                          Tuple.Tuple("list", JsonDecode_map({ (generated_0_argument0_right_part1_14_argument0_result_argument0: List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in ElmSyntaxExpression_Expression.ElmSyntaxExpression_ListExpr(generated_0_argument0_right_part1_14_argument0_result_argument0) }, JsonDecode_list(ElmSyntaxExpression_decodeNested))),
                          Tuple.Tuple("parenthesized", JsonDecode_map({ (generated_0_argument0_right_part1_15_argument0_result_argument0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in ElmSyntaxExpression_Expression.ElmSyntaxExpression_ParenthesizedExpression(generated_0_argument0_right_part1_15_argument0_result_argument0) }, ElmSyntaxExpression_decodeNested)),
                          Tuple.Tuple("let", JsonDecode_map({ (generated_0_argument0_right_part1_16_argument0_result_argument0: ElmSyntaxExpression_LetBlock) in ElmSyntaxExpression_Expression.ElmSyntaxExpression_LetExpression(generated_0_argument0_right_part1_16_argument0_result_argument0) }, ElmSyntaxExpression_decodeLetBlock)),
                          Tuple.Tuple("case", JsonDecode_map({ (generated_0_argument0_right_part1_17_argument0_result_argument0: ElmSyntaxExpression_CaseBlock) in ElmSyntaxExpression_Expression.ElmSyntaxExpression_CaseExpression(generated_0_argument0_right_part1_17_argument0_result_argument0) }, ElmSyntaxExpression_decodeCaseBlock)),
                          Tuple.Tuple("lambda", JsonDecode_map({ (generated_0_argument0_right_part1_18_argument0_result_argument0: ElmSyntaxExpression_Lambda) in ElmSyntaxExpression_Expression.ElmSyntaxExpression_LambdaExpression(generated_0_argument0_right_part1_18_argument0_result_argument0) }, ElmSyntaxExpression_decodeLambda)),
                          Tuple.Tuple("recordAccess", JsonDecode_map2({ (generated_0_argument0_part1_19_argument0_result_argument0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in { (generated_1_argument0_part1_19_argument0_result_argument0: ElmSyntaxNode_Node<String>) in ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordAccess(generated_0_argument0_part1_19_argument0_result_argument0, generated_1_argument0_part1_19_argument0_result_argument0) } }, JsonDecode_field("expression", ElmSyntaxExpression_decodeNested), JsonDecode_field("name", ElmSyntaxNode_decoder(JsonDecode_string)))),
                          Tuple.Tuple("recordAccessFunction", JsonDecode_map({ (generated_0_argument0_right_part1_20_argument0_result_argument0: String) in ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordAccessFunction(generated_0_argument0_right_part1_20_argument0_result_argument0) }, JsonDecode_string)),
                          Tuple.Tuple("record", JsonDecode_map({ (generated_0_argument0_right_part1_21_argument0_result_argument0: List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_RecordSetter>>) in ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordExpr(generated_0_argument0_right_part1_21_argument0_result_argument0) }, JsonDecode_list(ElmSyntaxNode_decoder(ElmSyntaxExpression_decodeRecordSetter)))),
                          Tuple.Tuple("recordUpdate", JsonDecode_map2({ (generated_0_argument0_part1_22_argument0_result_argument0: ElmSyntaxNode_Node<String>) in { (generated_1_argument0_part1_22_argument0_result_argument0: List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_RecordSetter>>) in ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordUpdateExpression(generated_0_argument0_part1_22_argument0_result_argument0, generated_1_argument0_part1_22_argument0_result_argument0) } }, JsonDecode_field("name", ElmSyntaxNode_decoder(JsonDecode_string)), JsonDecode_field("updates", JsonDecode_list(ElmSyntaxNode_decoder(ElmSyntaxExpression_decodeRecordSetter))))),
                          Tuple.Tuple("glsl", JsonDecode_map({ (generated_0_argument0_right_part1_23_argument0_result_argument0: String) in ElmSyntaxExpression_Expression.ElmSyntaxExpression_GLSLExpression(generated_0_argument0_right_part1_23_argument0_result_argument0) }, JsonDecode_string))
                        ]
                    )
                )
        }
    )

public static let ElmSyntaxExpression_functionDecoder: JsonDecode_Decoder<ElmSyntaxExpression_Function> =
    JsonDecode_lazy(
        { (generated_argument0_0: Unit) in
            let (_) =
                generated_argument0_0
            return JsonDecode_map3({ (generated_documentation: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>) in { (generated_signature: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxSignature_Signature>>) in { (generated_declaration: ElmSyntaxNode_Node<ElmSyntaxExpression_FunctionImplementation>) in Generated_declaration_documentation_signature.Record(declaration: generated_declaration, documentation: generated_documentation, signature: generated_signature) } } }, JsonDecode_field("documentation", JsonDecode_nullable(ElmSyntaxNode_decoder(ElmSyntaxDocumentation_decoder))), JsonDecode_field("signature", JsonDecode_nullable(ElmSyntaxNode_decoder(ElmSyntaxSignature_decoder))), JsonDecode_field("declaration", ElmSyntaxNode_decoder(ElmSyntaxExpression_decodeFunctionDeclaration)))
        }
    )

public static let ElmSyntaxFile_decoder: JsonDecode_Decoder<ElmSyntaxFile_File> =
    JsonDecode_map4({ (generated_moduleDefinition: ElmSyntaxNode_Node<ElmSyntaxModule_Module>) in { (generated_imports: List_List<ElmSyntaxNode_Node<ElmSyntaxImport_Import>>) in { (generated_declarations: List_List<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>) in { (generated_comments: List_List<ElmSyntaxNode_Node<ElmSyntaxComments_Comment>>) in Generated_comments_declarations_imports_moduleDefinition.Record(comments: generated_comments, declarations: generated_declarations, imports: generated_imports, moduleDefinition: generated_moduleDefinition) } } } }, JsonDecode_field("moduleDefinition", ElmSyntaxNode_decoder(ElmSyntaxModule_decoder)), JsonDecode_field("imports", JsonDecode_list(ElmSyntaxNode_decoder(ElmSyntaxImport_decoder))), JsonDecode_field("declarations", JsonDecode_list(ElmSyntaxNode_decoder(ElmSyntaxDeclaration_decoder))), JsonDecode_field("comments", JsonDecode_list(ElmSyntaxNode_decoder(ElmSyntaxComments_decoder))))

public static let ElmSyntaxImport_decoder: JsonDecode_Decoder<ElmSyntaxImport_Import> =
    JsonDecode_map3({ (generated_moduleName: ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>) in { (generated_moduleAlias: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>) in { (generated_exposingList: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>) in Generated_exposingList_moduleAlias_moduleName.Record(exposingList: generated_exposingList, moduleAlias: generated_moduleAlias, moduleName: generated_moduleName) } } }, JsonDecode_field("moduleName", ElmSyntaxNode_decoder(ElmSyntaxModuleName_decoder)), JsonDecode_field("moduleAlias", JsonDecode_nullable(ElmSyntaxNode_decoder(ElmSyntaxModuleName_decoder))), JsonDecode_field("exposingList", JsonDecode_nullable(ElmSyntaxNode_decoder(ElmSyntaxExposing_decoder))))

public static let ElmSyntaxInfix_decodeDirection: JsonDecode_Decoder<ElmSyntaxInfix_InfixDirection> =
    JsonDecode_andThen(
        { (v: String) in
            switch v {
            case "left":
                JsonDecode_succeed(ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Left)
            case "right":
                JsonDecode_succeed(ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Right)
            case "non":
                JsonDecode_succeed(ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Non)
            case _:
                JsonDecode_fail("Invalid direction")
            }
        },
        JsonDecode_string
    )

public static let ElmSyntaxInfix_decoder: JsonDecode_Decoder<ElmSyntaxInfix_Infix> =
    JsonDecode_map4({ (generated_direction: ElmSyntaxNode_Node<ElmSyntaxInfix_InfixDirection>) in { (generated_precedence: ElmSyntaxNode_Node<Double>) in { (generated_operator: ElmSyntaxNode_Node<String>) in { (generated_function: ElmSyntaxNode_Node<String>) in Generated_direction_function_operator__precedence.Record(direction: generated_direction, function: generated_function, operator_: generated_operator, precedence: generated_precedence) } } } }, JsonDecode_field("direction", ElmSyntaxNode_decoder(ElmSyntaxInfix_decodeDirection)), JsonDecode_field("precedence", ElmSyntaxNode_decoder(JsonDecode_int)), JsonDecode_field("operator", ElmSyntaxNode_decoder(JsonDecode_string)), JsonDecode_field("function", ElmSyntaxNode_decoder(JsonDecode_string)))

public static let ElmSyntaxModuleName_decoder: JsonDecode_Decoder<ElmSyntaxModuleName_ModuleName> =
    JsonDecode_list(JsonDecode_string)

public static let ElmSyntaxModule_decodeDefaultModuleData: JsonDecode_Decoder<ElmSyntaxModule_DefaultModuleData> =
    JsonDecode_map2({ (generated_moduleName: ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>) in { (generated_exposingList: ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>) in Generated_exposingList_moduleName.Record(exposingList: generated_exposingList, moduleName: generated_moduleName) } }, JsonDecode_field("moduleName", ElmSyntaxNode_decoder(ElmSyntaxModuleName_decoder)), JsonDecode_field("exposingList", ElmSyntaxNode_decoder(ElmSyntaxExposing_decoder)))

public static let ElmSyntaxModule_decodeEffectModuleData: JsonDecode_Decoder<ElmSyntaxModule_EffectModuleData> =
    JsonDecode_map4({ (generated_moduleName: ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>) in { (generated_exposingList: ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>) in { (generated_command: Maybe_Maybe<ElmSyntaxNode_Node<String>>) in { (generated_subscription: Maybe_Maybe<ElmSyntaxNode_Node<String>>) in Generated_command_exposingList_moduleName_subscription.Record(command: generated_command, exposingList: generated_exposingList, moduleName: generated_moduleName, subscription: generated_subscription) } } } }, JsonDecode_field("moduleName", ElmSyntaxNode_decoder(ElmSyntaxModuleName_decoder)), JsonDecode_field("exposingList", ElmSyntaxNode_decoder(ElmSyntaxExposing_decoder)), JsonDecode_field("command", JsonDecode_nullable(ElmSyntaxNode_decoder(JsonDecode_string))), JsonDecode_field("subscription", JsonDecode_nullable(ElmSyntaxNode_decoder(JsonDecode_string))))

public static let ElmSyntaxModule_decoder: JsonDecode_Decoder<ElmSyntaxModule_Module> =
    ElmJsonUtil_decodeTyped(
        Array_toList(
            [ Tuple.Tuple("normal", JsonDecode_map({ (generated_0_argument0_right_part1_0_argument0: ElmSyntaxModule_DefaultModuleData) in ElmSyntaxModule_Module.ElmSyntaxModule_NormalModule(generated_0_argument0_right_part1_0_argument0) }, ElmSyntaxModule_decodeDefaultModuleData)),
              Tuple.Tuple("port", JsonDecode_map({ (generated_0_argument0_right_part1_1_argument0: ElmSyntaxModule_DefaultModuleData) in ElmSyntaxModule_Module.ElmSyntaxModule_PortModule(generated_0_argument0_right_part1_1_argument0) }, ElmSyntaxModule_decodeDefaultModuleData)),
              Tuple.Tuple("effect", JsonDecode_map({ (generated_0_argument0_right_part1_2_argument0: ElmSyntaxModule_EffectModuleData) in ElmSyntaxModule_Module.ElmSyntaxModule_EffectModule(generated_0_argument0_right_part1_2_argument0) }, ElmSyntaxModule_decodeEffectModuleData))
            ]
        )
    )

public static let ElmSyntaxParserLenient_allPattern: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ParserLenient_symbolWithRange("_", { (range: ElmSyntaxRange_Range) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_AllPattern)) })

public static let ElmSyntaxParserLenient_allowedPrefixOperatorFollowedByClosingParensOneOf: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserLenient_whileAtMost3WithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol({ (operatorRange: Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) in { (operator_: String) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: Generated_column_row.Record(column: Basics_add(operatorRange.end.column, 1.0), row: operatorRange.end.row), start: Generated_column_row.Record(column: Basics_sub(operatorRange.start.column, 1.0), row: operatorRange.start.row)), ElmSyntaxExpression_Expression.ElmSyntaxExpression_PrefixOperator(operator_))) } }, ElmSyntaxParserLenient_isOperatorSymbolCharAsString, ElmSyntaxParserLenient_isAllowedOperatorToken, ")")

public static let ElmSyntaxParserLenient_caseOrUnqualifiedReferenceExpressionMaybeApplied: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserLenient_oneOf2(ElmSyntaxParserLenient_expressionCaseOfFollowedByOptimisticLayout, ElmSyntaxParserLenient_followedByMultiArgumentApplication(ElmSyntaxParserLenient_expressionUnqualifiedFunctionReferenceFollowedByRecordAccess))

public static let ElmSyntaxParserLenient_caseStatementFollowedByWhitespaceAndComments: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxExpression_Case>> =
    ElmSyntaxParserLenient_topIndentedFollowedBy(ParserLenient_map4({ (patternResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in { (commentsBeforeArrowRight: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (commentsAfterArrowRight: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (expr: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(expr.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterArrowRight, ElmSyntaxParserLenient_ropePrependTo(commentsBeforeArrowRight, patternResult.comments))), syntax: Tuple.Tuple(patternResult.syntax, expr.syntax)) } } } }, ElmSyntaxParserLenient_pattern, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_symbolFollowedBy("->", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments))

public static let ElmSyntaxParserLenient_caseStatementsFollowedByWhitespaceAndComments: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<Tuple<ElmSyntaxExpression_Case, List_List<ElmSyntaxExpression_Case>>>> =
    ParserLenient_map5({ (firstCasePatternResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in { (commentsAfterFirstCasePattern: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (commentsAfterFirstCaseArrowRight: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (firstCaseExpressionResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in { (lastToSecondCase: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxExpression_Case>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(lastToSecondCase.comments, ElmSyntaxParserLenient_ropePrependTo(firstCaseExpressionResult.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterFirstCaseArrowRight, ElmSyntaxParserLenient_ropePrependTo(commentsAfterFirstCasePattern, firstCasePatternResult.comments)))), syntax: Tuple.Tuple(Tuple.Tuple(firstCasePatternResult.syntax, firstCaseExpressionResult.syntax), lastToSecondCase.syntax)) } } } } }, ElmSyntaxParserLenient_pattern, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_oneOf2OrSucceed(ParserLenient_symbolFollowedBy("->", ElmSyntaxParserLenient_whitespaceAndComments), ParserLenient_symbolFollowedBy(".", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_ropeEmpty()), ElmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments, ElmSyntaxParserLenient_manyWithCommentsReverse(ElmSyntaxParserLenient_caseStatementFollowedByWhitespaceAndComments))

public static let ElmSyntaxParserLenient_charLiteralExpressionOptimisticLayout: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ElmSyntaxParserLenient_followedByOptimisticLayout(ElmSyntaxParserLenient_expressionChar)

public static let ElmSyntaxParserLenient_charPattern: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ElmSyntaxParserLenient_characterLiteralMapWithRange({ (range: ElmSyntaxRange_Range) in { (char: UnicodeScalar) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_CharPattern(char))) } })

public static let ElmSyntaxParserLenient_choiceTypeDefinitionAfterDocumentationAfterTypePrefix: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_DeclarationAfterDocumentation>> =
    ParserLenient_map7({ (name: ElmSyntaxNode_Node<String>) in { (commentsAfterName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (parameters: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<String>>>) in { (commentsAfterEqual: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (commentsBeforeHeadVariant: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (headVariant: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>) in { (tailVariantsReverse: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(tailVariantsReverse.comments, ElmSyntaxParserLenient_ropePrependTo(headVariant.comments, ElmSyntaxParserLenient_ropePrependTo(commentsBeforeHeadVariant, ElmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, ElmSyntaxParserLenient_ropePrependTo(parameters.comments, commentsAfterName))))), syntax: ElmSyntaxParserLenient_DeclarationAfterDocumentation.ElmSyntaxParserLenient_TypeDeclarationAfterDocumentation(Generated_headVariant_name_parameters_tailVariantsReverse.Record(headVariant: headVariant.syntax, name: name, parameters: parameters.syntax, tailVariantsReverse: tailVariantsReverse.syntax))) } } } } } } }, ElmSyntaxParserLenient_nameUppercaseNode, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_typeGenericListEquals, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_orSucceed(ParserLenient_symbolFollowedBy("|", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_ropeEmpty()), ElmSyntaxParserLenient_variantDeclarationFollowedByWhitespaceAndComments, ElmSyntaxParserLenient_manyWithCommentsReverse(ParserLenient_symbolFollowedBy("|", ParserLenient_map3({ (commentsBeforePipe: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (commentsWithExtraPipe: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (variantResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(variantResult.comments, ElmSyntaxParserLenient_ropePrependTo(commentsWithExtraPipe, commentsBeforePipe)), syntax: variantResult.syntax) } } }, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_orSucceed(ParserLenient_symbolFollowedBy("|", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_ropeEmpty()), ElmSyntaxParserLenient_variantDeclarationFollowedByWhitespaceAndComments))))

public static let ElmSyntaxParserLenient_choiceTypeDefinitionWithoutDocumentationAfterTypePrefix: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_TypeOrTypeAliasDeclarationWithoutDocumentation>> =
    ParserLenient_map7({ (name: ElmSyntaxNode_Node<String>) in { (commentsAfterName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (parameters: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<String>>>) in { (commentsAfterEqual: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (commentsBeforeHeadVariant: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (headVariant: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>) in { (tailVariantsReverse: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(tailVariantsReverse.comments, ElmSyntaxParserLenient_ropePrependTo(headVariant.comments, ElmSyntaxParserLenient_ropePrependTo(commentsBeforeHeadVariant, ElmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, ElmSyntaxParserLenient_ropePrependTo(parameters.comments, commentsAfterName))))), syntax: ElmSyntaxParserLenient_TypeOrTypeAliasDeclarationWithoutDocumentation.ElmSyntaxParserLenient_TypeDeclarationWithoutDocumentation(Generated_headVariant_name_parameters_tailVariantsReverse.Record(headVariant: headVariant.syntax, name: name, parameters: parameters.syntax, tailVariantsReverse: tailVariantsReverse.syntax))) } } } } } } }, ElmSyntaxParserLenient_nameUppercaseNode, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_typeGenericListEquals, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_orSucceed(ParserLenient_symbolFollowedBy("|", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_ropeEmpty()), ElmSyntaxParserLenient_variantDeclarationFollowedByWhitespaceAndComments, ElmSyntaxParserLenient_manyWithCommentsReverse(ParserLenient_symbolFollowedBy("|", ParserLenient_map3({ (commentsBeforePipe: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (commentsWithExtraPipe: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (variantResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(variantResult.comments, ElmSyntaxParserLenient_ropePrependTo(commentsWithExtraPipe, commentsBeforePipe)), syntax: variantResult.syntax) } } }, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_orSucceed(ParserLenient_symbolFollowedBy("|", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_ropeEmpty()), ElmSyntaxParserLenient_variantDeclarationFollowedByWhitespaceAndComments))))

public static let ElmSyntaxParserLenient_composablePattern: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ParserLenient_oneOf9(ElmSyntaxParserLenient_varPattern, ElmSyntaxParserLenient_qualifiedPatternWithConsumeArgs, ElmSyntaxParserLenient_allPattern, ElmSyntaxParserLenient_parensPattern, ElmSyntaxParserLenient_recordPattern, ElmSyntaxParserLenient_stringPattern, ElmSyntaxParserLenient_listPattern, ElmSyntaxParserLenient_numberPart, ElmSyntaxParserLenient_charPattern)

public static let ElmSyntaxParserLenient_declaration: ElmSyntaxParserLenient_Parser<Generated_comments_syntax<ElmSyntaxParserLenient_Comments, ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>> =
    ParserLenient_oneOf5(ElmSyntaxParserLenient_functionDeclarationWithoutDocumentation, ElmSyntaxParserLenient_declarationWithDocumentation, ElmSyntaxParserLenient_typeOrTypeAliasDefinitionWithoutDocumentation, ElmSyntaxParserLenient_portDeclarationWithoutDocumentation, ElmSyntaxParserLenient_infixDeclaration)

public static let ElmSyntaxParserLenient_declarationWithDocumentation: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>> =
    ParserLenient_validate(
        { (result: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>, ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>) in
            let generated_let_result_argument0_right_decl: ElmSyntaxDeclaration_Declaration
            switch result.syntax {
            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_decl):
                generated_let_result_argument0_right_decl =
                    generated_destructured_decl
            }
            let generated_localReturnResult_letResult_result_argument0_right: Bool
            switch generated_let_result_argument0_right_decl {
            case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_FunctionDeclaration(letFunctionDeclaration):
                let generated_localReturnResult_caseResult_case0_letResult_result_argument0_right: Bool
                switch letFunctionDeclaration.signature {
                case Maybe_Maybe.Maybe_Nothing:
                    generated_localReturnResult_caseResult_case0_letResult_result_argument0_right =
                        true
                case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, signature)):
                    let generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_implementation: ElmSyntaxExpression_FunctionImplementation
                    switch letFunctionDeclaration.declaration {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_implementation):
                        generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_implementation =
                            generated_destructured_implementation
                    }
                    let generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_implementationName: String
                    switch generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_implementation.name {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_implementationName):
                        generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_implementationName =
                            generated_destructured_implementationName
                    }
                    let generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_signatureName: String
                    switch signature.name {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_signatureName):
                        generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_signatureName =
                            generated_destructured_signatureName
                    }
                    generated_localReturnResult_caseResult_case0_letResult_result_argument0_right =
                        Basics_eq(generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_implementationName, generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_signatureName)
                }
                generated_localReturnResult_letResult_result_argument0_right =
                    generated_localReturnResult_caseResult_case0_letResult_result_argument0_right
            case _:
                generated_localReturnResult_letResult_result_argument0_right =
                    true
            }
            return generated_localReturnResult_letResult_result_argument0_right
        },
        ParserLenient_map2(
            { (documentation: ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>) in
                { (afterDocumentation: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxParserLenient_DeclarationAfterDocumentation>) in
                    let generated_let_result_argument0_left_start: ElmSyntaxRange_Location =
                        ElmSyntaxNode_range(documentation).start
                    let generated_localReturnResult_letResult_result_argument0_left: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>, ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>
                    switch afterDocumentation.syntax {
                    case let ElmSyntaxParserLenient_DeclarationAfterDocumentation.ElmSyntaxParserLenient_FunctionDeclarationAfterDocumentation(functionDeclarationAfterDocumentation):
                        let generated_localReturnResult_caseResult_case0_letResult_result_argument0_left: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>, ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>
                        switch functionDeclarationAfterDocumentation.signature {
                        case let Maybe_Maybe.Maybe_Just(signature):
                            let generated_let_caseResult_case0_caseResult_case0_letResult_result_argument0_left_implementationNameRange: ElmSyntaxRange_Range
                            switch signature.implementationName {
                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_implementationNameRange, _):
                                generated_let_caseResult_case0_caseResult_case0_letResult_result_argument0_left_implementationNameRange =
                                    generated_destructured_implementationNameRange
                            }
                            let generated_let_caseResult_case0_caseResult_case0_letResult_result_argument0_left_expressionRange: ElmSyntaxRange_Range
                            switch functionDeclarationAfterDocumentation.expression {
                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_expressionRange, _):
                                generated_let_caseResult_case0_caseResult_case0_letResult_result_argument0_left_expressionRange =
                                    generated_destructured_expressionRange
                            }
                            generated_localReturnResult_caseResult_case0_letResult_result_argument0_left =
                                Generated_comments_syntax.Record(comments: afterDocumentation.comments, syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case0_caseResult_case0_letResult_result_argument0_left_expressionRange.end, start: generated_let_result_argument0_left_start), ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_FunctionDeclaration(Generated_declaration_documentation_signature.Record(declaration: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case0_caseResult_case0_letResult_result_argument0_left_expressionRange.end, start: generated_let_caseResult_case0_caseResult_case0_letResult_result_argument0_left_implementationNameRange.start), Generated_arguments_expression_name.Record(arguments: functionDeclarationAfterDocumentation.arguments, expression: functionDeclarationAfterDocumentation.expression, name: signature.implementationName)), documentation: Maybe_Maybe.Maybe_Just(documentation), signature: Maybe_Maybe.Maybe_Just(ElmSyntaxNode_combine({ (name: ElmSyntaxNode_Node<String>) in { (value: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in Generated_name_typeAnnotation.Record(name: name, typeAnnotation: value) } }, functionDeclarationAfterDocumentation.startName, signature.typeAnnotation))))))
                        case Maybe_Maybe.Maybe_Nothing:
                            let generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_left_startNameRange: ElmSyntaxRange_Range
                            switch functionDeclarationAfterDocumentation.startName {
                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_startNameRange, _):
                                generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_left_startNameRange =
                                    generated_destructured_startNameRange
                            }
                            let generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_left_expressionRange: ElmSyntaxRange_Range
                            switch functionDeclarationAfterDocumentation.expression {
                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_expressionRange, _):
                                generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_left_expressionRange =
                                    generated_destructured_expressionRange
                            }
                            generated_localReturnResult_caseResult_case0_letResult_result_argument0_left =
                                Generated_comments_syntax.Record(comments: afterDocumentation.comments, syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_left_expressionRange.end, start: generated_let_result_argument0_left_start), ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_FunctionDeclaration(Generated_declaration_documentation_signature.Record(declaration: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_left_expressionRange.end, start: generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_left_startNameRange.start), Generated_arguments_expression_name.Record(arguments: functionDeclarationAfterDocumentation.arguments, expression: functionDeclarationAfterDocumentation.expression, name: functionDeclarationAfterDocumentation.startName)), documentation: Maybe_Maybe.Maybe_Just(documentation), signature: Maybe_Maybe.Maybe_Nothing))))
                        }
                        generated_localReturnResult_letResult_result_argument0_left =
                            generated_localReturnResult_caseResult_case0_letResult_result_argument0_left
                    case let ElmSyntaxParserLenient_DeclarationAfterDocumentation.ElmSyntaxParserLenient_TypeDeclarationAfterDocumentation(typeDeclarationAfterDocumentation):
                        let generated_localReturnResult_letDeclaration0_caseResult_case1_letResult_result_argument0_left: ElmSyntaxRange_Location
                        switch typeDeclarationAfterDocumentation.tailVariantsReverse {
                        case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, _), _):
                            generated_localReturnResult_letDeclaration0_caseResult_case1_letResult_result_argument0_left =
                                range.end
                        case List_List.List_Empty:
                            let generated_let_caseResult_case1_letDeclaration0_caseResult_case1_letResult_result_argument0_left_headVariantRange: ElmSyntaxRange_Range
                            switch typeDeclarationAfterDocumentation.headVariant {
                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_headVariantRange, _):
                                generated_let_caseResult_case1_letDeclaration0_caseResult_case1_letResult_result_argument0_left_headVariantRange =
                                    generated_destructured_headVariantRange
                            }
                            generated_localReturnResult_letDeclaration0_caseResult_case1_letResult_result_argument0_left =
                                generated_let_caseResult_case1_letDeclaration0_caseResult_case1_letResult_result_argument0_left_headVariantRange.end
                        }
                        let generated_let_caseResult_case1_letResult_result_argument0_left_end: ElmSyntaxRange_Location =
                            generated_localReturnResult_letDeclaration0_caseResult_case1_letResult_result_argument0_left
                        generated_localReturnResult_letResult_result_argument0_left =
                            Generated_comments_syntax.Record(comments: afterDocumentation.comments, syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case1_letResult_result_argument0_left_end, start: generated_let_result_argument0_left_start), ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_CustomTypeDeclaration(Generated_constructors_documentation_generics_name.Record(constructors: List_cons(typeDeclarationAfterDocumentation.headVariant, List_reverse(typeDeclarationAfterDocumentation.tailVariantsReverse)), documentation: Maybe_Maybe.Maybe_Just(documentation), generics: typeDeclarationAfterDocumentation.parameters, name: typeDeclarationAfterDocumentation.name))))
                    case let ElmSyntaxParserLenient_DeclarationAfterDocumentation.ElmSyntaxParserLenient_TypeAliasDeclarationAfterDocumentation(typeAliasDeclarationAfterDocumentation):
                        let generated_let_caseResult_case2_letResult_result_argument0_left_typeAnnotationRange: ElmSyntaxRange_Range
                        switch typeAliasDeclarationAfterDocumentation.typeAnnotation {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_typeAnnotationRange, _):
                            generated_let_caseResult_case2_letResult_result_argument0_left_typeAnnotationRange =
                                generated_destructured_typeAnnotationRange
                        }
                        generated_localReturnResult_letResult_result_argument0_left =
                            Generated_comments_syntax.Record(comments: afterDocumentation.comments, syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case2_letResult_result_argument0_left_typeAnnotationRange.end, start: generated_let_result_argument0_left_start), ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_AliasDeclaration(Generated_documentation_generics_name_typeAnnotation.Record(documentation: Maybe_Maybe.Maybe_Just(documentation), generics: typeAliasDeclarationAfterDocumentation.parameters, name: typeAliasDeclarationAfterDocumentation.name, typeAnnotation: typeAliasDeclarationAfterDocumentation.typeAnnotation))))
                    case let ElmSyntaxParserLenient_DeclarationAfterDocumentation.ElmSyntaxParserLenient_PortDeclarationAfterDocumentation(portDeclarationAfterName):
                        let generated_let_caseResult_case3_letResult_result_argument0_left_typeAnnotationRange: ElmSyntaxRange_Range
                        switch portDeclarationAfterName.typeAnnotation {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_typeAnnotationRange, _):
                            generated_let_caseResult_case3_letResult_result_argument0_left_typeAnnotationRange =
                                generated_destructured_typeAnnotationRange
                        }
                        generated_localReturnResult_letResult_result_argument0_left =
                            Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeFilledPrependTo(afterDocumentation.comments, ElmSyntaxParserLenient_ropeOne(documentation)), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case3_letResult_result_argument0_left_typeAnnotationRange.end, start: portDeclarationAfterName.startLocation), ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_PortDeclaration(Generated_name_typeAnnotation.Record(name: portDeclarationAfterName.name, typeAnnotation: portDeclarationAfterName.typeAnnotation))))
                    }
                    return generated_localReturnResult_letResult_result_argument0_left
                }
            },
            ElmSyntaxParserLenient_documentationComment,
            ElmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndentedFollowedByWithComments(ParserLenient_oneOf3(ElmSyntaxParserLenient_functionAfterDocumentation, ElmSyntaxParserLenient_typeOrTypeAliasDefinitionAfterDocumentation, ElmSyntaxParserLenient_portDeclarationAfterDocumentation))
        )
    )

public static let ElmSyntaxParserLenient_declarations: ElmSyntaxParserLenient_Parser<Generated_comments_syntax<ElmSyntaxParserLenient_Comments, List_List<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>>> =
    ElmSyntaxParserLenient_manyWithComments(ElmSyntaxParserLenient_topIndentedFollowedBy(ParserLenient_map2({ (declarationParsed: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>) in { (commentsAfter: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfter, declarationParsed.comments), syntax: declarationParsed.syntax) } }, ElmSyntaxParserLenient_declaration, ElmSyntaxParserLenient_whitespaceAndComments)))

public static let ElmSyntaxParserLenient_documentationComment: ElmSyntaxParserLenient_Parser<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>> =
    ParserLenient_nestableMultiCommentMapWithRange({ (generated_0_argument0: ElmSyntaxRange_Range) in { (generated_1_argument0: String) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_0_argument0, generated_1_argument0) } }, Tuple.Tuple("{", "-"), Tuple.Tuple("-", "}"))

public static let ElmSyntaxParserLenient_effectModuleDefinition: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxModule_Module>>> =
    ParserLenient_map7WithRange({ (range: ElmSyntaxRange_Range) in { (commentsAfterEffect: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (commentsAfterModule: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (name: ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>) in { (commentsAfterName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (whereClauses: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, Generated_command_subscription<Maybe_Maybe<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxNode_Node<String>>>>) in { (commentsAfterWhereClauses: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (exp: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(exp.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterWhereClauses, ElmSyntaxParserLenient_ropePrependTo(whereClauses.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterName, ElmSyntaxParserLenient_ropePrependTo(commentsAfterModule, commentsAfterEffect))))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxModule_Module.ElmSyntaxModule_EffectModule(Generated_command_exposingList_moduleName_subscription.Record(command: whereClauses.syntax.command, exposingList: exp.syntax, moduleName: name, subscription: whereClauses.syntax.subscription)))) } } } } } } } }, ParserLenient_keywordFollowedBy("effect", ElmSyntaxParserLenient_whitespaceAndComments), ParserLenient_keywordFollowedBy("module", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_moduleName, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_effectWhereClauses, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_exposeDefinition)

public static let ElmSyntaxParserLenient_effectWhereClause: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<Tuple<String, ElmSyntaxNode_Node<String>>>> =
    ParserLenient_map4({ (fnName: String) in { (commentsAfterFnName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (commentsAfterEqual: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (fnTypeName: ElmSyntaxNode_Node<String>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, commentsAfterFnName), syntax: Tuple.Tuple(fnName, fnTypeName)) } } } }, ElmSyntaxParserLenient_nameLowercaseUnderscoreSuffixingKeywords, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_symbolFollowedBy("=", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_nameUppercaseNode)

public static let ElmSyntaxParserLenient_effectWhereClauses: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<Generated_command_subscription<Maybe_Maybe<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxNode_Node<String>>>>> =
    ParserLenient_map2({ (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (whereResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, Generated_command_subscription<Maybe_Maybe<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxNode_Node<String>>>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(whereResult.comments, commentsBefore), syntax: whereResult.syntax) } }, ParserLenient_keywordFollowedBy("where", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_whereBlock)

public static let ElmSyntaxParserLenient_exponent0Result0: Generated_exponent_result<Double, Double> =
    Generated_exponent_result.Record(exponent: 0.0, result: 0.0)

public static let ElmSyntaxParserLenient_expose: ElmSyntaxParserLenient_Parser<Generated_comments_syntax<ElmSyntaxParserLenient_Comments, ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>> =
    ParserLenient_oneOf3(ElmSyntaxParserLenient_functionExpose, ElmSyntaxParserLenient_typeExpose, ElmSyntaxParserLenient_infixExpose)

public static let ElmSyntaxParserLenient_exposeDefinition: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>> =
    ParserLenient_map2WithRange({ (range: ElmSyntaxRange_Range) in { (commentsAfterExposing: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (exposingListInnerResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxExposing_Exposing>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(exposingListInnerResult.comments, commentsAfterExposing), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, exposingListInnerResult.syntax)) } } }, ParserLenient_symbolFollowedBy("exposing", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_exposing_)

public static let ElmSyntaxParserLenient_exposing_: ElmSyntaxParserLenient_Parser<Generated_comments_syntax<ElmSyntaxParserLenient_Comments, ElmSyntaxExposing_Exposing>> =
    ParserLenient_followedBySymbol(")", ParserLenient_symbolFollowedBy("(", ParserLenient_map2({ (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (inner: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxExposing_Exposing>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(inner.comments, commentsBefore), syntax: inner.syntax) } }, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_oneOf3(ParserLenient_mapWithRange({ (range: ElmSyntaxRange_Range) in { (comments: ElmSyntaxParserLenient_Comments) in Generated_comments_syntax.Record(comments: comments, syntax: ElmSyntaxExposing_Exposing.ElmSyntaxExposing_All(range)) } }, ParserLenient_symbolFollowedBy("...", ElmSyntaxParserLenient_whitespaceAndComments)), ParserLenient_mapWithRange({ (range: ElmSyntaxRange_Range) in { (comments: ElmSyntaxParserLenient_Comments) in Generated_comments_syntax.Record(comments: comments, syntax: ElmSyntaxExposing_Exposing.ElmSyntaxExposing_All(range)) } }, ParserLenient_symbolFollowedBy("..", ElmSyntaxParserLenient_whitespaceAndComments)), ElmSyntaxParserLenient_exposingWithinParensExplicitFollowedByWhitespaceAndCommentsMap(Basics_identity)))))

public static let ElmSyntaxParserLenient_expression: ElmSyntaxParserLenient_Parser<Generated_comments_syntax<ElmSyntaxParserLenient_Comments, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ElmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments

public static let ElmSyntaxParserLenient_expressionAfterOpeningSquareBracket: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserLenient_oneOf2(ElmSyntaxParserLenient_glslExpressionAfterOpeningSquareBracket, ParserLenient_map2WithRange({ (range: Generated_end_start<ElmSyntaxRange_Location, Generated_column_row<Double, Double>>) in { (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (elements: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxExpression_Expression>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(elements.comments, commentsBefore), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: range.end, start: Generated_column_row.Record(column: Basics_sub(range.start.column, 1.0), row: range.start.row)), elements.syntax)) } } }, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_oneOf2(ParserLenient_symbol("]", Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxExpression_Expression.ElmSyntaxExpression_ListExpr(List_List.List_Empty))), ParserLenient_followedBySymbol("]", ParserLenient_map3({ (commentsBeforeHead: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (head: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in { (tail: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(tail.comments, ElmSyntaxParserLenient_ropePrependTo(head.comments, commentsBeforeHead)), syntax: ElmSyntaxExpression_Expression.ElmSyntaxExpression_ListExpr(List_cons(head.syntax, tail.syntax))) } } }, ParserLenient_orSucceed(ParserLenient_symbolFollowedBy(",", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_ropeEmpty()), ElmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments, ElmSyntaxParserLenient_manyWithComments(ParserLenient_symbolFollowedBy(",", ParserLenient_map3({ (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (commentsWithExtraComma: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (expressionResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(expressionResult.comments, ElmSyntaxParserLenient_ropePrependTo(commentsWithExtraComma, commentsBefore)), syntax: expressionResult.syntax) } } }, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_orSucceed(ParserLenient_symbolFollowedBy(",", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_ropeEmpty()), ElmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments))))))))

public static let ElmSyntaxParserLenient_expressionCaseOfFollowedByOptimisticLayout: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserLenient_map4WithStartLocation(
        { (start: ElmSyntaxRange_Location) in
            { (commentsAfterCase: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                { (casedExpressionResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
                    { (commentsAfterOf: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                        { (casesResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, Tuple<Tuple<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>, List_List<Tuple<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>>>) in
                            let generated_let_result_argument0_firstCase: Tuple<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>
                            let generated_let_result_argument0_lastToSecondCase: List_List<Tuple<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>
                            switch casesResult.syntax {
                            case let Tuple.Tuple(generated_destructured_firstCase, generated_destructured_lastToSecondCase):
                                generated_let_result_argument0_firstCase =
                                    generated_destructured_firstCase
                                generated_let_result_argument0_lastToSecondCase =
                                    generated_destructured_lastToSecondCase
                            }
                            let generated_localReturnResult_end_argument0_syntax_letResult_result_argument0: ElmSyntaxRange_Location
                            switch generated_let_result_argument0_lastToSecondCase {
                            case let List_List.List_Cons(Tuple.Tuple(_, ElmSyntaxNode_Node.ElmSyntaxNode_Node(lastCaseExpressionRange, _)), _):
                                generated_localReturnResult_end_argument0_syntax_letResult_result_argument0 =
                                    lastCaseExpressionRange.end
                            case List_List.List_Empty:
                                let generated_let_caseResult_case1_end_argument0_syntax_letResult_result_argument0_firstCaseExpressionRange: ElmSyntaxRange_Range
                                switch generated_let_result_argument0_firstCase {
                                case let Tuple.Tuple(_, ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_firstCaseExpressionRange, _)):
                                    generated_let_caseResult_case1_end_argument0_syntax_letResult_result_argument0_firstCaseExpressionRange =
                                        generated_destructured_firstCaseExpressionRange
                                }
                                generated_localReturnResult_end_argument0_syntax_letResult_result_argument0 =
                                    generated_let_caseResult_case1_end_argument0_syntax_letResult_result_argument0_firstCaseExpressionRange.end
                            }
                            return Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(casesResult.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterOf, ElmSyntaxParserLenient_ropePrependTo(casedExpressionResult.comments, commentsAfterCase))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_localReturnResult_end_argument0_syntax_letResult_result_argument0, start: start), ElmSyntaxExpression_Expression.ElmSyntaxExpression_CaseExpression(Generated_cases_expression.Record(cases: List_cons(generated_let_result_argument0_firstCase, List_reverse(generated_let_result_argument0_lastToSecondCase)), expression: casedExpressionResult.syntax))))
                        }
                    }
                }
            }
        },
        ParserLenient_keywordFollowedBy("case", ElmSyntaxParserLenient_whitespaceAndComments),
        ElmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments,
        ParserLenient_keywordFollowedBy("of", ElmSyntaxParserLenient_whitespaceAndComments),
        ParserLenient_withIndentSetToColumn(ElmSyntaxParserLenient_caseStatementsFollowedByWhitespaceAndComments)
    )

public static let ElmSyntaxParserLenient_expressionChar: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ElmSyntaxParserLenient_characterLiteralMapWithRange({ (range: ElmSyntaxRange_Range) in { (char: UnicodeScalar) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxExpression_Expression.ElmSyntaxExpression_CharLiteral(char))) } })

public static let ElmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserLenient_map2(
        { (expressionResult: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
            { (maybeCases: Maybe_Maybe<Generated_cases_comments_end<List_List<Tuple<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>, ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxRange_Location>>) in
                switch maybeCases {
                case Maybe_Maybe.Maybe_Nothing:
                    expressionResult
                case let Maybe_Maybe.Maybe_Just(cases):
                    Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(cases.comments, expressionResult.comments), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: cases.end, start: ElmSyntaxNode_range(expressionResult.syntax).start), ElmSyntaxExpression_Expression.ElmSyntaxExpression_CaseExpression(Generated_cases_expression.Record(cases: cases.cases, expression: expressionResult.syntax))))
                }
            }
        },
        ElmSyntaxParserLenient_extendedSubExpressionFollowedByWhitespaceAndComments(Generated_afterCommitting_validateRightPrecedence.Record(afterCommitting: { (generated_record: Generated_extensionRightParser_leftPrecedence_symbol<ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_ExtensionRight>>, Double, String>) in generated_record.extensionRightParser }, validateRightPrecedence: { (generated_0_validateRightPrecedence_argument0_argument1: ElmSyntaxParserLenient_InfixOperatorInfo) in Maybe_Maybe.Maybe_Just(generated_0_validateRightPrecedence_argument0_argument1) })),
        ParserLenient_orSucceed(
            ParserLenient_keywordFollowedBy(
                "case",
                ParserLenient_map2(
                    { (commentsAfterCase: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                        { (casesResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, Tuple<Tuple<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>, List_List<Tuple<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>>>) in
                            let generated_let_result_argument0_argument1_argument0_argument2_firstCase: Tuple<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>
                            let generated_let_result_argument0_argument1_argument0_argument2_lastToSecondCase: List_List<Tuple<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>
                            switch casesResult.syntax {
                            case let Tuple.Tuple(generated_destructured_firstCase, generated_destructured_lastToSecondCase):
                                generated_let_result_argument0_argument1_argument0_argument2_firstCase =
                                    generated_destructured_firstCase
                                generated_let_result_argument0_argument1_argument0_argument2_lastToSecondCase =
                                    generated_destructured_lastToSecondCase
                            }
                            let generated_localReturnResult_end_argument0_letResult_result_argument0_argument1_argument0_argument2: ElmSyntaxRange_Location
                            switch generated_let_result_argument0_argument1_argument0_argument2_lastToSecondCase {
                            case let List_List.List_Cons(Tuple.Tuple(_, ElmSyntaxNode_Node.ElmSyntaxNode_Node(lastCaseExpressionRange, _)), _):
                                generated_localReturnResult_end_argument0_letResult_result_argument0_argument1_argument0_argument2 =
                                    lastCaseExpressionRange.end
                            case List_List.List_Empty:
                                let generated_let_caseResult_case1_end_argument0_letResult_result_argument0_argument1_argument0_argument2_firstCaseExpressionRange: ElmSyntaxRange_Range
                                switch generated_let_result_argument0_argument1_argument0_argument2_firstCase {
                                case let Tuple.Tuple(_, ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_firstCaseExpressionRange, _)):
                                    generated_let_caseResult_case1_end_argument0_letResult_result_argument0_argument1_argument0_argument2_firstCaseExpressionRange =
                                        generated_destructured_firstCaseExpressionRange
                                }
                                generated_localReturnResult_end_argument0_letResult_result_argument0_argument1_argument0_argument2 =
                                    generated_let_caseResult_case1_end_argument0_letResult_result_argument0_argument1_argument0_argument2_firstCaseExpressionRange.end
                            }
                            return Maybe_Maybe.Maybe_Just(Generated_cases_comments_end.Record(cases: List_cons(generated_let_result_argument0_argument1_argument0_argument2_firstCase, List_reverse(generated_let_result_argument0_argument1_argument0_argument2_lastToSecondCase)), comments: ElmSyntaxParserLenient_ropePrependTo(casesResult.comments, commentsAfterCase), end: generated_localReturnResult_end_argument0_letResult_result_argument0_argument1_argument0_argument2))
                        }
                    },
                    ElmSyntaxParserLenient_whitespaceAndComments,
                    ParserLenient_withIndentSetToColumn(
                        ParserLenient_lazy(
                            { (generated_argument0_argument0_argument2_argument1_argument0_argument2_0: Unit) in
                                let (_) =
                                    generated_argument0_argument0_argument2_argument1_argument0_argument2_0
                                return ElmSyntaxParserLenient_caseStatementsFollowedByWhitespaceAndComments
                            }
                        )
                    )
                )
            ),
            Maybe_Maybe.Maybe_Nothing
        )
    )

public static let ElmSyntaxParserLenient_expressionIfThenElseFollowedByOptimisticLayout: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserLenient_map6WithStartLocation(
        { (start: ElmSyntaxRange_Location) in
            { (commentsAfterIf: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                { (condition: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
                    { (commentsAfterThen: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                        { (ifTrue: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
                            { (commentsAfterElse: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                                { (ifFalse: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
                                    let generated_let_result_argument0_ifFalseRange: ElmSyntaxRange_Range
                                    switch ifFalse.syntax {
                                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_ifFalseRange, _):
                                        generated_let_result_argument0_ifFalseRange =
                                            generated_destructured_ifFalseRange
                                    }
                                    return Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(ifFalse.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterElse, ElmSyntaxParserLenient_ropePrependTo(ifTrue.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterThen, ElmSyntaxParserLenient_ropePrependTo(condition.comments, commentsAfterIf))))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_result_argument0_ifFalseRange.end, start: start), ElmSyntaxExpression_Expression.ElmSyntaxExpression_IfBlock(condition.syntax, ifTrue.syntax, ifFalse.syntax)))
                                }
                            }
                        }
                    }
                }
            }
        },
        ParserLenient_keywordFollowedBy("if", ElmSyntaxParserLenient_whitespaceAndComments),
        ElmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments,
        ParserLenient_oneOf2(ParserLenient_keywordFollowedBy("then", ElmSyntaxParserLenient_whitespaceAndComments), ParserLenient_keywordFollowedBy("->", ElmSyntaxParserLenient_whitespaceAndComments)),
        ElmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments,
        ParserLenient_keywordFollowedBy("else", ElmSyntaxParserLenient_whitespaceAndComments),
        ElmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments
    )

public static let ElmSyntaxParserLenient_expressionLambdaFollowedByWhitespaceAndComments: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserLenient_map6WithStartLocation(
        { (start: ElmSyntaxRange_Location) in
            { (commentsAfterBackslash: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                { (parameter0: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in
                    { (commentsAfterParameter0: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                        { (parameter1Up: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>) in
                            { (commentsAfterArrow: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                                { (expressionResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
                                    let generated_let_result_argument0_expressionRange: ElmSyntaxRange_Range
                                    switch expressionResult.syntax {
                                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_expressionRange, _):
                                        generated_let_result_argument0_expressionRange =
                                            generated_destructured_expressionRange
                                    }
                                    return Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(expressionResult.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterArrow, ElmSyntaxParserLenient_ropePrependTo(parameter1Up.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterParameter0, ElmSyntaxParserLenient_ropePrependTo(parameter0.comments, commentsAfterBackslash))))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_result_argument0_expressionRange.end, start: start), ElmSyntaxExpression_Expression.ElmSyntaxExpression_LambdaExpression(Generated_args_expression.Record(args: List_cons(parameter0.syntax, parameter1Up.syntax), expression: expressionResult.syntax))))
                                }
                            }
                        }
                    }
                }
            }
        },
        ParserLenient_symbolFollowedBy("\\", ElmSyntaxParserLenient_whitespaceAndComments),
        ElmSyntaxParserLenient_patternNotSpaceSeparated,
        ElmSyntaxParserLenient_whitespaceAndComments,
        ElmSyntaxParserLenient_untilWithComments(ParserLenient_oneOf3(ParserLenient_symbol("->", Unit.Unit), ParserLenient_symbol("=>", Unit.Unit), ParserLenient_symbol(".", Unit.Unit)), ParserLenient_map2({ (patternResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in { (commentsAfter: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfter, patternResult.comments), syntax: patternResult.syntax) } }, ElmSyntaxParserLenient_patternNotSpaceSeparated, ElmSyntaxParserLenient_whitespaceAndComments)),
        ElmSyntaxParserLenient_whitespaceAndComments,
        ElmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments
    )

public static let ElmSyntaxParserLenient_expressionListOrGlsl: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserLenient_symbolFollowedBy("[", ElmSyntaxParserLenient_expressionAfterOpeningSquareBracket)

public static let ElmSyntaxParserLenient_expressionNegation: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserLenient_symbolBacktrackableFollowedBy(
        "-",
        ParserLenient_offsetSourceAndThen(
            { (offset: Double) in
                { (source: String) in
                    let generated_localReturnResult_result_argument0_argument1: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>
                    switch String_slice(Basics_sub(offset, 2.0), Basics_sub(offset, 1.0), source) {
                    case " ":
                        generated_localReturnResult_result_argument0_argument1 =
                            ElmSyntaxParserLenient_negationAfterMinus
                    case "(":
                        generated_localReturnResult_result_argument0_argument1 =
                            ElmSyntaxParserLenient_negationAfterMinus
                    case ")":
                        generated_localReturnResult_result_argument0_argument1 =
                            ElmSyntaxParserLenient_negationAfterMinus
                    case "}":
                        generated_localReturnResult_result_argument0_argument1 =
                            ElmSyntaxParserLenient_negationAfterMinus
                    case ">":
                        generated_localReturnResult_result_argument0_argument1 =
                            ElmSyntaxParserLenient_negationAfterMinus
                    case "=":
                        generated_localReturnResult_result_argument0_argument1 =
                            ElmSyntaxParserLenient_negationAfterMinus
                    case ",":
                        generated_localReturnResult_result_argument0_argument1 =
                            ElmSyntaxParserLenient_negationAfterMinus
                    case "n":
                        let generated_localReturnResult_condition_caseResult_case7_result_argument0_argument1: Bool =
                            switch String_slice(Basics_sub(offset, 3.0), Basics_sub(offset, 2.0), source) {
                            case "i":
                                Basics_not(String_all(CharExtra_isLatinAlphaNumOrUnderscoreFast, String_slice(Basics_sub(offset, 4.0), Basics_sub(offset, 3.0), source)))
                            case _:
                                false
                            }
                        generated_localReturnResult_result_argument0_argument1 =
                            if generated_localReturnResult_condition_caseResult_case7_result_argument0_argument1 {
                                ElmSyntaxParserLenient_negationAfterMinus
                            } else {
                                ParserLenient_problem()
                            }
                    case _:
                        generated_localReturnResult_result_argument0_argument1 =
                            ParserLenient_problem()
                    }
                    return generated_localReturnResult_result_argument0_argument1
                }
            }
        )
    )

public static let ElmSyntaxParserLenient_expressionNumber: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserLenient_floatOrIntegerDecimalOrHexadecimalMapWithRange({ (range: ElmSyntaxRange_Range) in { (n: Double) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxExpression_Expression.ElmSyntaxExpression_Floatable(n))) } }, { (range: ElmSyntaxRange_Range) in { (n: Double) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxExpression_Expression.ElmSyntaxExpression_Integer(n))) } }, { (range: ElmSyntaxRange_Range) in { (n: Double) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxExpression_Expression.ElmSyntaxExpression_Hex(n))) } })

public static let ElmSyntaxParserLenient_expressionParenthesizedOrTupleOrTripleAfterOpeningParens: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ElmSyntaxParserLenient_followedByMultiRecordAccess(
        ParserLenient_map3WithRange(
            { (rangeAfterOpeningParens: Generated_end_start<ElmSyntaxRange_Location, Generated_column_row<Double, Double>>) in
                { (commentsBeforeFirstPart: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                    { (firstPart: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
                        { (tailParts: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxParserLenient_Tupled>) in
                            let generated_localReturnResult_syntax_result_argument0_left: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
                            switch tailParts.syntax {
                            case ElmSyntaxParserLenient_Tupled.ElmSyntaxParserLenient_TupledParenthesized(_, _):
                                generated_localReturnResult_syntax_result_argument0_left =
                                    ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: rangeAfterOpeningParens.end, start: Generated_column_row.Record(column: Basics_sub(rangeAfterOpeningParens.start.column, 1.0), row: rangeAfterOpeningParens.start.row)), ElmSyntaxExpression_Expression.ElmSyntaxExpression_ParenthesizedExpression(firstPart.syntax))
                            case let ElmSyntaxParserLenient_Tupled.ElmSyntaxParserLenient_TupledTwoOrThree(secondPart, maybeThirdPart):
                                let generated_localReturnResult_argument1_caseResult_case1_syntax_result_argument0_left: ElmSyntaxExpression_Expression =
                                    switch maybeThirdPart {
                                    case Maybe_Maybe.Maybe_Nothing:
                                        ElmSyntaxExpression_Expression.ElmSyntaxExpression_TupledExpression(
                                            Array_toList(
                                                [ firstPart.syntax,
                                                  secondPart
                                                ]
                                            )
                                        )
                                    case let Maybe_Maybe.Maybe_Just(thirdPart):
                                        ElmSyntaxExpression_Expression.ElmSyntaxExpression_TupledExpression(
                                            Array_toList(
                                                [ firstPart.syntax,
                                                  secondPart,
                                                  thirdPart
                                                ]
                                            )
                                        )
                                    }
                                generated_localReturnResult_syntax_result_argument0_left =
                                    ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: rangeAfterOpeningParens.end, start: Generated_column_row.Record(column: Basics_sub(rangeAfterOpeningParens.start.column, 1.0), row: rangeAfterOpeningParens.start.row)), generated_localReturnResult_argument1_caseResult_case1_syntax_result_argument0_left)
                            }
                            return Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(tailParts.comments, ElmSyntaxParserLenient_ropePrependTo(firstPart.comments, commentsBeforeFirstPart)), syntax: generated_localReturnResult_syntax_result_argument0_left)
                        }
                    }
                }
            },
            ElmSyntaxParserLenient_whitespaceAndComments,
            ElmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments,
            ParserLenient_oneOf2(ParserLenient_symbol(")", Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxParserLenient_Tupled.ElmSyntaxParserLenient_TupledParenthesized(Unit.Unit, Unit.Unit))), ParserLenient_symbolFollowedBy(",", ParserLenient_map3({ (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (partResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in { (maybeThirdPart: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(maybeThirdPart.comments, ElmSyntaxParserLenient_ropePrependTo(partResult.comments, commentsBefore)), syntax: ElmSyntaxParserLenient_Tupled.ElmSyntaxParserLenient_TupledTwoOrThree(partResult.syntax, maybeThirdPart.syntax)) } } }, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments, ParserLenient_oneOf2(ParserLenient_symbol(")", Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: Maybe_Maybe.Maybe_Nothing)), ParserLenient_symbolFollowedBy(",", ParserLenient_followedBySymbol(")", ParserLenient_map2({ (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (partResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(partResult.comments, commentsBefore), syntax: Maybe_Maybe.Maybe_Just(partResult.syntax)) } }, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments)))))))
        )
    )

public static let ElmSyntaxParserLenient_expressionQualifiedOrVariantOrRecordConstructorReferenceFollowedByRecordAccess: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ElmSyntaxParserLenient_followedByMultiRecordAccess(
        ParserLenient_map2WithRange(
            { (range: ElmSyntaxRange_Range) in
                { (firstName: String) in
                    { (after: Maybe_Maybe<Tuple<List_List<String>, String>>) in
                        let generated_localReturnResult_argument1_syntax_result_argument0_left: ElmSyntaxExpression_Expression =
                            switch after {
                            case Maybe_Maybe.Maybe_Nothing:
                                ElmSyntaxExpression_Expression.ElmSyntaxExpression_FunctionOrValue(List_List.List_Empty, firstName)
                            case let Maybe_Maybe.Maybe_Just(Tuple.Tuple(qualificationAfter, unqualified)):
                                ElmSyntaxExpression_Expression.ElmSyntaxExpression_FunctionOrValue(List_cons(firstName, qualificationAfter), unqualified)
                            }
                        return Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, generated_localReturnResult_argument1_syntax_result_argument0_left))
                    }
                }
            },
            ElmSyntaxParserLenient_nameUppercase,
            ElmSyntaxParserLenient_maybeDotReferenceExpressionTuple
        )
    )

public static let ElmSyntaxParserLenient_expressionRecordAccessFunction: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserLenient_symbolFollowedBy(".", ElmSyntaxParserLenient_nameLowercaseMapWithRange({ (range: ElmSyntaxRange_Range) in { (field: String) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(ElmSyntaxParserLenient_rangeMoveStartLeftByOneColumn(range), ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordAccessFunction(String_append(".", field)))) } }))

public static let ElmSyntaxParserLenient_expressionRecordFollowedByRecordAccess: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserLenient_symbolFollowedBy("{", ElmSyntaxParserLenient_followedByMultiRecordAccess(ParserLenient_map2WithRange({ (range: ElmSyntaxRange_Range) in { (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (afterCurly: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxExpression_Expression>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(afterCurly.comments, commentsBefore), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(ElmSyntaxParserLenient_rangeMoveStartLeftByOneColumn(range), afterCurly.syntax)) } } }, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_recordContentsFollowedByCurlyEnd)))

public static let ElmSyntaxParserLenient_expressionStartingWithParensOpeningIfNecessaryFollowedByRecordAccess: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserLenient_symbolFollowedBy("(", ParserLenient_oneOf3(ParserLenient_symbolWithEndLocation(")", { (end: Generated_column_row<Double, Double>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: end, start: Generated_column_row.Record(column: Basics_sub(end.column, 2.0), row: end.row)), ElmSyntaxExpression_Expression.ElmSyntaxExpression_UnitExpr)) }), ElmSyntaxParserLenient_allowedPrefixOperatorFollowedByClosingParensOneOf, ElmSyntaxParserLenient_expressionParenthesizedOrTupleOrTripleAfterOpeningParens))

public static let ElmSyntaxParserLenient_expressionString: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ElmSyntaxParserLenient_singleOrTripleQuotedStringLiteralMapWithRange({ (range: ElmSyntaxRange_Range) in { (string: String) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxExpression_Expression.ElmSyntaxExpression_Literal(string))) } })

public static let ElmSyntaxParserLenient_expressionUnqualifiedFunctionReferenceFollowedByRecordAccess: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ElmSyntaxParserLenient_followedByMultiRecordAccess(ElmSyntaxParserLenient_nameLowercaseMapWithRange({ (range: ElmSyntaxRange_Range) in { (unqualified: String) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxExpression_Expression.ElmSyntaxExpression_FunctionOrValue(List_List.List_Empty, unqualified))) } }))

public static let ElmSyntaxParserLenient_fieldsFirstValuePunned: ElmSyntaxParserLenient_RecordFieldsOrUpdateAfterName =
    ElmSyntaxParserLenient_RecordFieldsOrUpdateAfterName.ElmSyntaxParserLenient_FieldsFirstValuePunned(Unit.Unit)

public static let ElmSyntaxParserLenient_fromMultilineCommentNodeOrEmptyOnProblem: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_Comments> =
    ParserLenient_map2OrSucceed({ (comment: ElmSyntaxNode_Node<String>) in { (commentsAfter: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in ElmSyntaxParserLenient_ropeFilledPrependTo(commentsAfter, ElmSyntaxParserLenient_ropeOne(comment)) } }, ParserLenient_followedBySkipWhileWhitespace(ElmSyntaxParserLenient_multiLineComment), ElmSyntaxParserLenient_whitespaceAndCommentsOrEmptyLoop, ElmSyntaxParserLenient_ropeEmpty())

public static let ElmSyntaxParserLenient_fromSingleLineCommentNode: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_Comments> =
    ParserLenient_map2({ (content: ElmSyntaxNode_Node<String>) in { (commentsAfter: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in ElmSyntaxParserLenient_ropeFilledPrependTo(commentsAfter, ElmSyntaxParserLenient_ropeOne(content)) } }, ParserLenient_followedBySkipWhileWhitespace(ElmSyntaxParserLenient_singleLineComment), ElmSyntaxParserLenient_whitespaceAndCommentsOrEmptyLoop)

public static let ElmSyntaxParserLenient_functionAfterDocumentation: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_DeclarationAfterDocumentation>> =
    ParserLenient_oneOf2(ParserLenient_map6({ (startName: ElmSyntaxNode_Node<String>) in { (commentsAfterStartName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (maybeSignature: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, Maybe_Maybe<Generated_implementationName_typeAnnotation<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>>>) in { (arguments: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>) in { (commentsAfterEqual: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (result: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(result.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, ElmSyntaxParserLenient_ropePrependTo(arguments.comments, ElmSyntaxParserLenient_ropePrependTo(maybeSignature.comments, commentsAfterStartName)))), syntax: ElmSyntaxParserLenient_DeclarationAfterDocumentation.ElmSyntaxParserLenient_FunctionDeclarationAfterDocumentation(Generated_arguments_expression_signature_startName.Record(arguments: arguments.syntax, expression: result.syntax, signature: maybeSignature.syntax, startName: startName))) } } } } } }, ElmSyntaxParserLenient_nameLowercaseNode, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_map4OrSucceed({ (commentsBeforeTypeAnnotation: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (typeAnnotationResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in { (implementationName: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<String>>) in { (afterImplementationName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(afterImplementationName, ElmSyntaxParserLenient_ropePrependTo(implementationName.comments, ElmSyntaxParserLenient_ropePrependTo(typeAnnotationResult.comments, commentsBeforeTypeAnnotation))), syntax: Maybe_Maybe.Maybe_Just(Generated_implementationName_typeAnnotation.Record(implementationName: implementationName.syntax, typeAnnotation: typeAnnotationResult.syntax))) } } } }, ParserLenient_symbolFollowedBy(":", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_type_, ElmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndentedFollowedBy(ElmSyntaxParserLenient_nameLowercaseNode), ElmSyntaxParserLenient_whitespaceAndComments, Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: Maybe_Maybe.Maybe_Nothing)), ElmSyntaxParserLenient_parameterPatternsEquals, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments), ParserLenient_map8WithStartLocation({ (start: ElmSyntaxRange_Location) in { (commentsBeforeTypeAnnotation: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (typeAnnotationResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in { (commentsBetweenTypeAndName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (nameNode: ElmSyntaxNode_Node<String>) in { (afterImplementationName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (arguments: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>) in { (commentsAfterEqual: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (result: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(result.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, ElmSyntaxParserLenient_ropePrependTo(arguments.comments, ElmSyntaxParserLenient_ropePrependTo(afterImplementationName, ElmSyntaxParserLenient_ropePrependTo(commentsBetweenTypeAndName, ElmSyntaxParserLenient_ropePrependTo(typeAnnotationResult.comments, commentsBeforeTypeAnnotation)))))), syntax: ElmSyntaxParserLenient_DeclarationAfterDocumentation.ElmSyntaxParserLenient_FunctionDeclarationAfterDocumentation(Generated_arguments_expression_signature_startName.Record(arguments: arguments.syntax, expression: result.syntax, signature: Maybe_Maybe.Maybe_Just(Generated_implementationName_typeAnnotation.Record(implementationName: nameNode, typeAnnotation: typeAnnotationResult.syntax)), startName: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: start, start: start), ElmSyntaxNode_value(nameNode))))) } } } } } } } } }, ParserLenient_symbolFollowedBy(":", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_type_, ElmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndented, ElmSyntaxParserLenient_nameLowercaseNode, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_parameterPatternsEquals, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments))

public static let ElmSyntaxParserLenient_functionDeclarationWithoutDocumentation: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>> =
    ParserLenient_oneOf2(
        ParserLenient_validate(
            { (result: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>) in
                let generated_let_result_argument0_right_argument0_decl: ElmSyntaxDeclaration_Declaration
                switch result.syntax {
                case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_decl):
                    generated_let_result_argument0_right_argument0_decl =
                        generated_destructured_decl
                }
                let generated_localReturnResult_letResult_result_argument0_right_argument0: Bool
                switch generated_let_result_argument0_right_argument0_decl {
                case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_FunctionDeclaration(letFunctionDeclaration):
                    let generated_localReturnResult_caseResult_case0_letResult_result_argument0_right_argument0: Bool
                    switch letFunctionDeclaration.signature {
                    case Maybe_Maybe.Maybe_Nothing:
                        generated_localReturnResult_caseResult_case0_letResult_result_argument0_right_argument0 =
                            true
                    case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, signature)):
                        let generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_argument0_implementation: ElmSyntaxExpression_FunctionImplementation
                        switch letFunctionDeclaration.declaration {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_implementation):
                            generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_argument0_implementation =
                                generated_destructured_implementation
                        }
                        let generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_argument0_implementationName: String
                        switch generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_argument0_implementation.name {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_implementationName):
                            generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_argument0_implementationName =
                                generated_destructured_implementationName
                        }
                        let generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_argument0_signatureName: String
                        switch signature.name {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_signatureName):
                            generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_argument0_signatureName =
                                generated_destructured_signatureName
                        }
                        generated_localReturnResult_caseResult_case0_letResult_result_argument0_right_argument0 =
                            Basics_eq(generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_argument0_implementationName, generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_right_argument0_signatureName)
                    }
                    generated_localReturnResult_letResult_result_argument0_right_argument0 =
                        generated_localReturnResult_caseResult_case0_letResult_result_argument0_right_argument0
                case ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_AliasDeclaration(_):
                    generated_localReturnResult_letResult_result_argument0_right_argument0 =
                        true
                case ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_CustomTypeDeclaration(_):
                    generated_localReturnResult_letResult_result_argument0_right_argument0 =
                        true
                case ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_PortDeclaration(_):
                    generated_localReturnResult_letResult_result_argument0_right_argument0 =
                        true
                case ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_InfixDeclaration(_):
                    generated_localReturnResult_letResult_result_argument0_right_argument0 =
                        true
                case ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_Destructuring(_, _):
                    generated_localReturnResult_letResult_result_argument0_right_argument0 =
                        true
                }
                return generated_localReturnResult_letResult_result_argument0_right_argument0
            },
            ParserLenient_map6WithStartLocation(
                { (startNameStart: ElmSyntaxRange_Location) in
                    { (startNameNode: ElmSyntaxNode_Node<String>) in
                        { (commentsAfterStartName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                            { (maybeSignature: Maybe_Maybe<Generated_comments_implementationName_typeAnnotation<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>>) in
                                { (arguments: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>) in
                                    { (commentsAfterEqual: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                                        { (result: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
                                            let generated_let_result_argument0_left_argument0_expressionRange: ElmSyntaxRange_Range
                                            switch result.syntax {
                                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_expressionRange, _):
                                                generated_let_result_argument0_left_argument0_expressionRange =
                                                    generated_destructured_expressionRange
                                            }
                                            let generated_localReturnResult_letResult_result_argument0_left_argument0: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>
                                            switch maybeSignature {
                                            case Maybe_Maybe.Maybe_Nothing:
                                                generated_localReturnResult_letResult_result_argument0_left_argument0 =
                                                    Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(result.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, ElmSyntaxParserLenient_ropePrependTo(arguments.comments, commentsAfterStartName))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_result_argument0_left_argument0_expressionRange.end, start: startNameStart), ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_FunctionDeclaration(Generated_declaration_documentation_signature.Record(declaration: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_result_argument0_left_argument0_expressionRange.end, start: startNameStart), Generated_arguments_expression_name.Record(arguments: arguments.syntax, expression: result.syntax, name: startNameNode)), documentation: Maybe_Maybe.Maybe_Nothing, signature: Maybe_Maybe.Maybe_Nothing))))
                                            case let Maybe_Maybe.Maybe_Just(signature):
                                                let generated_let_caseResult_case1_letResult_result_argument0_left_argument0_implementationNameRange: ElmSyntaxRange_Range
                                                switch signature.implementationName {
                                                case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_implementationNameRange, _):
                                                    generated_let_caseResult_case1_letResult_result_argument0_left_argument0_implementationNameRange =
                                                        generated_destructured_implementationNameRange
                                                }
                                                generated_localReturnResult_letResult_result_argument0_left_argument0 =
                                                    Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(result.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, ElmSyntaxParserLenient_ropePrependTo(arguments.comments, ElmSyntaxParserLenient_ropePrependTo(signature.comments, commentsAfterStartName)))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_result_argument0_left_argument0_expressionRange.end, start: startNameStart), ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_FunctionDeclaration(Generated_declaration_documentation_signature.Record(declaration: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_result_argument0_left_argument0_expressionRange.end, start: generated_let_caseResult_case1_letResult_result_argument0_left_argument0_implementationNameRange.start), Generated_arguments_expression_name.Record(arguments: arguments.syntax, expression: result.syntax, name: signature.implementationName)), documentation: Maybe_Maybe.Maybe_Nothing, signature: Maybe_Maybe.Maybe_Just(ElmSyntaxNode_combine({ (name: ElmSyntaxNode_Node<String>) in { (typeAnnotation: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in Generated_name_typeAnnotation.Record(name: name, typeAnnotation: typeAnnotation) } }, startNameNode, signature.typeAnnotation))))))
                                            }
                                            return generated_localReturnResult_letResult_result_argument0_left_argument0
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                ElmSyntaxParserLenient_functionNameNotInfixNode,
                ElmSyntaxParserLenient_whitespaceAndComments,
                ParserLenient_map4OrSucceed({ (commentsBeforeTypeAnnotation: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (typeAnnotationResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in { (implementationName: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<String>>) in { (afterImplementationName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Maybe_Maybe.Maybe_Just(Generated_comments_implementationName_typeAnnotation.Record(comments: ElmSyntaxParserLenient_ropePrependTo(afterImplementationName, ElmSyntaxParserLenient_ropePrependTo(implementationName.comments, ElmSyntaxParserLenient_ropePrependTo(typeAnnotationResult.comments, commentsBeforeTypeAnnotation))), implementationName: implementationName.syntax, typeAnnotation: typeAnnotationResult.syntax)) } } } }, ParserLenient_symbolFollowedBy(":", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_type_, ElmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndentedFollowedBy(ElmSyntaxParserLenient_nameLowercaseNode), ElmSyntaxParserLenient_whitespaceAndComments, Maybe_Maybe.Maybe_Nothing),
                ElmSyntaxParserLenient_parameterPatternsEquals,
                ElmSyntaxParserLenient_whitespaceAndComments,
                ElmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments
            )
        ),
        ParserLenient_map8WithStartLocation({ (start: ElmSyntaxRange_Location) in { (commentsBeforeTypeAnnotation: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (typeAnnotationResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in { (commentsBetweenTypeAndName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (nameNode: ElmSyntaxNode_Node<String>) in { (afterImplementationName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (arguments: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>) in { (commentsAfterEqual: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (result: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(result.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, ElmSyntaxParserLenient_ropePrependTo(arguments.comments, ElmSyntaxParserLenient_ropePrependTo(afterImplementationName, ElmSyntaxParserLenient_ropePrependTo(commentsBetweenTypeAndName, ElmSyntaxParserLenient_ropePrependTo(typeAnnotationResult.comments, commentsBeforeTypeAnnotation)))))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: ElmSyntaxNode_range(result.syntax).end, start: start), ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_FunctionDeclaration(Generated_declaration_documentation_signature.Record(declaration: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: ElmSyntaxNode_range(result.syntax).end, start: ElmSyntaxNode_range(nameNode).start), Generated_arguments_expression_name.Record(arguments: arguments.syntax, expression: result.syntax, name: nameNode)), documentation: Maybe_Maybe.Maybe_Nothing, signature: Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: ElmSyntaxNode_range(typeAnnotationResult.syntax).end, start: start), Generated_name_typeAnnotation.Record(name: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: start, start: start), ElmSyntaxNode_value(nameNode)), typeAnnotation: typeAnnotationResult.syntax))))))) } } } } } } } } }, ParserLenient_symbolFollowedBy(":", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_type_, ElmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndented, ElmSyntaxParserLenient_nameLowercaseNode, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_parameterPatternsEquals, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments)
    )

public static let ElmSyntaxParserLenient_functionExpose: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>> =
    ElmSyntaxParserLenient_nameLowercaseMapWithRange({ (range: ElmSyntaxRange_Range) in { (name: String) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_FunctionExpose(name))) } })

public static let ElmSyntaxParserLenient_functionNameNotInfixNode: ElmSyntaxParserLenient_Parser<ElmSyntaxNode_Node<String>> =
    ParserLenient_ifFollowedByWhileValidateMapWithRangeWithoutLinebreak(
        { (generated_0_argument0: ElmSyntaxRange_Range) in { (generated_1_argument0: String) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_0_argument0, generated_1_argument0) } },
        CharExtra_unicodeIsLowerFast,
        CharExtra_unicodeIsAlphaNumOrUnderscoreFast,
        { (name: String) in
            switch name {
            case "infix":
                false
            case let nameNotInfix:
                ElmSyntaxParserLenient_isNotReserved(nameNotInfix)
            }
        }
    )

public static let ElmSyntaxParserLenient_glslExpressionAfterOpeningSquareBracket: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserLenient_symbolFollowedBy(
        "glsl|",
        ParserLenient_mapWithRange(
            { (range: Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) in { (s: String) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: Generated_column_row.Record(column: Basics_add(range.end.column, 2.0), row: range.end.row), start: Generated_column_row.Record(column: Basics_sub(range.start.column, 6.0), row: range.start.row)), ElmSyntaxExpression_Expression.ElmSyntaxExpression_GLSLExpression(s))) } },
            ParserLenient_loopUntil(
                ParserLenient_symbol("|]", Unit.Unit),
                ParserLenient_oneOf2(
                    ParserLenient_symbol("|", "|"),
                    ParserLenient_while(
                        { (c: UnicodeScalar) in
                            switch c {
                            case "|":
                                false
                            case _:
                                true
                            }
                        }
                    )
                ),
                "",
                { (extension_: String) in { (soFar: String) in String_append(soFar, extension_) } },
                Basics_identity
            )
        )
    )

public static let ElmSyntaxParserLenient_ifOrUnqualifiedReferenceExpressionMaybeApplied: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserLenient_oneOf2(ElmSyntaxParserLenient_expressionIfThenElseFollowedByOptimisticLayout, ElmSyntaxParserLenient_followedByMultiArgumentApplication(ElmSyntaxParserLenient_expressionUnqualifiedFunctionReferenceFollowedByRecordAccess))

public static let ElmSyntaxParserLenient_importFollowedByWhitespaceAndComments: ElmSyntaxParserLenient_Parser<Generated_comments_syntax<ElmSyntaxParserLenient_Comments, ElmSyntaxNode_Node<ElmSyntaxImport_Import>>> =
    ParserLenient_map5WithStartLocation(
        { (start: ElmSyntaxRange_Location) in
            { (commentsAfterImport: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                { (moduleNameNode: ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>) in
                    { (commentsAfterModuleName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                        { (maybeModuleAlias: Maybe_Maybe<Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<List_List<String>>>>) in
                            { (maybeExposingResult: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>>) in
                                let generated_let_result_argument0_commentsBeforeAlias: ElmSyntaxParserLenient_Comments =
                                    ElmSyntaxParserLenient_ropePrependTo(commentsAfterModuleName, commentsAfterImport)
                                let generated_localReturnResult_letResult_result_argument0: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<List_List<String>>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>>>
                                switch maybeModuleAlias {
                                case Maybe_Maybe.Maybe_Nothing:
                                    let generated_localReturnResult_caseResult_case0_letResult_result_argument0: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<List_List<String>>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>>>
                                    switch maybeExposingResult.syntax {
                                    case Maybe_Maybe.Maybe_Nothing:
                                        let generated_let_caseResult_case0_caseResult_case0_letResult_result_argument0_moduleNameRange: ElmSyntaxRange_Range
                                        switch moduleNameNode {
                                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_moduleNameRange, _):
                                            generated_let_caseResult_case0_caseResult_case0_letResult_result_argument0_moduleNameRange =
                                                generated_destructured_moduleNameRange
                                        }
                                        generated_localReturnResult_caseResult_case0_letResult_result_argument0 =
                                            Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(maybeExposingResult.comments, generated_let_result_argument0_commentsBeforeAlias), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case0_caseResult_case0_letResult_result_argument0_moduleNameRange.end, start: start), Generated_exposingList_moduleAlias_moduleName.Record(exposingList: Maybe_Maybe.Maybe_Nothing, moduleAlias: Maybe_Maybe.Maybe_Nothing, moduleName: moduleNameNode)))
                                    case let Maybe_Maybe.Maybe_Just(exposingListValue):
                                        let generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_exposingRange: ElmSyntaxRange_Range
                                        switch exposingListValue {
                                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_exposingRange, _):
                                            generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_exposingRange =
                                                generated_destructured_exposingRange
                                        }
                                        generated_localReturnResult_caseResult_case0_letResult_result_argument0 =
                                            Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(maybeExposingResult.comments, generated_let_result_argument0_commentsBeforeAlias), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case1_caseResult_case0_letResult_result_argument0_exposingRange.end, start: start), Generated_exposingList_moduleAlias_moduleName.Record(exposingList: Maybe_Maybe.Maybe_Just(exposingListValue), moduleAlias: Maybe_Maybe.Maybe_Nothing, moduleName: moduleNameNode)))
                                    }
                                    generated_localReturnResult_letResult_result_argument0 =
                                        generated_localReturnResult_caseResult_case0_letResult_result_argument0
                                case let Maybe_Maybe.Maybe_Just(moduleAliasResult):
                                    let generated_localReturnResult_caseResult_case1_letResult_result_argument0: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<List_List<String>>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>>>
                                    switch maybeExposingResult.syntax {
                                    case Maybe_Maybe.Maybe_Nothing:
                                        let generated_let_caseResult_case0_caseResult_case1_letResult_result_argument0_aliasRange: ElmSyntaxRange_Range
                                        switch moduleAliasResult.syntax {
                                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_aliasRange, _):
                                            generated_let_caseResult_case0_caseResult_case1_letResult_result_argument0_aliasRange =
                                                generated_destructured_aliasRange
                                        }
                                        generated_localReturnResult_caseResult_case1_letResult_result_argument0 =
                                            Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(maybeExposingResult.comments, ElmSyntaxParserLenient_ropePrependTo(moduleAliasResult.comments, generated_let_result_argument0_commentsBeforeAlias)), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case0_caseResult_case1_letResult_result_argument0_aliasRange.end, start: start), Generated_exposingList_moduleAlias_moduleName.Record(exposingList: Maybe_Maybe.Maybe_Nothing, moduleAlias: Maybe_Maybe.Maybe_Just(moduleAliasResult.syntax), moduleName: moduleNameNode)))
                                    case let Maybe_Maybe.Maybe_Just(exposingListValue):
                                        let generated_let_caseResult_case1_caseResult_case1_letResult_result_argument0_exposingRange: ElmSyntaxRange_Range
                                        switch exposingListValue {
                                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_exposingRange, _):
                                            generated_let_caseResult_case1_caseResult_case1_letResult_result_argument0_exposingRange =
                                                generated_destructured_exposingRange
                                        }
                                        generated_localReturnResult_caseResult_case1_letResult_result_argument0 =
                                            Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(maybeExposingResult.comments, ElmSyntaxParserLenient_ropePrependTo(moduleAliasResult.comments, generated_let_result_argument0_commentsBeforeAlias)), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case1_caseResult_case1_letResult_result_argument0_exposingRange.end, start: start), Generated_exposingList_moduleAlias_moduleName.Record(exposingList: Maybe_Maybe.Maybe_Just(exposingListValue), moduleAlias: Maybe_Maybe.Maybe_Just(moduleAliasResult.syntax), moduleName: moduleNameNode)))
                                    }
                                    generated_localReturnResult_letResult_result_argument0 =
                                        generated_localReturnResult_caseResult_case1_letResult_result_argument0
                                }
                                return generated_localReturnResult_letResult_result_argument0
                            }
                        }
                    }
                }
            }
        },
        ParserLenient_keywordFollowedBy("import", ElmSyntaxParserLenient_whitespaceAndComments),
        ElmSyntaxParserLenient_moduleName,
        ElmSyntaxParserLenient_whitespaceAndComments,
        ParserLenient_map3OrSucceed({ (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (moduleAliasNode: ElmSyntaxNode_Node<List_List<String>>) in { (commentsAfter: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Maybe_Maybe.Maybe_Just(Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfter, commentsBefore), syntax: moduleAliasNode)) } } }, ParserLenient_keywordFollowedBy("as", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_nameUppercaseMapWithRange({ (range: ElmSyntaxRange_Range) in { (moduleAlias: String) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, List_singleton(moduleAlias)) } }), ElmSyntaxParserLenient_whitespaceAndComments, Maybe_Maybe.Maybe_Nothing),
        ParserLenient_map2OrSucceed(
            { (exposingResult: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>>) in { (commentsAfter: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfter, exposingResult.comments), syntax: exposingResult.syntax) } },
            ParserLenient_map2WithRange(
                { (range: ElmSyntaxRange_Range) in
                    { (commentsAfterExposing: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                        { (exposingListInnerResult: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxExposing_Exposing>>) in
                            let generated_localReturnResult_syntax_result_argument0_argument1_argument5: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>> =
                                switch exposingListInnerResult.syntax {
                                case Maybe_Maybe.Maybe_Nothing:
                                    Maybe_Maybe.Maybe_Nothing
                                case let Maybe_Maybe.Maybe_Just(exposingListInner):
                                    Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, exposingListInner))
                                }
                            return Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(exposingListInnerResult.comments, commentsAfterExposing), syntax: generated_localReturnResult_syntax_result_argument0_argument1_argument5)
                        }
                    }
                },
                ParserLenient_symbolFollowedBy("exposing", ElmSyntaxParserLenient_whitespaceAndComments),
                ParserLenient_symbolFollowedBy("(", ParserLenient_map2({ (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (inner: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, Maybe_Maybe<ElmSyntaxExposing_Exposing>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(inner.comments, commentsBefore), syntax: inner.syntax) } }, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_oneOf4(ParserLenient_followedBySymbol(")", ParserLenient_mapWithRange({ (range: ElmSyntaxRange_Range) in { (comments: ElmSyntaxParserLenient_Comments) in Generated_comments_syntax.Record(comments: comments, syntax: Maybe_Maybe.Maybe_Just(ElmSyntaxExposing_Exposing.ElmSyntaxExposing_All(range))) } }, ParserLenient_symbolFollowedBy("...", ElmSyntaxParserLenient_whitespaceAndComments))), ParserLenient_followedBySymbol(")", ParserLenient_mapWithRange({ (range: ElmSyntaxRange_Range) in { (comments: ElmSyntaxParserLenient_Comments) in Generated_comments_syntax.Record(comments: comments, syntax: Maybe_Maybe.Maybe_Just(ElmSyntaxExposing_Exposing.ElmSyntaxExposing_All(range))) } }, ParserLenient_symbolFollowedBy("..", ElmSyntaxParserLenient_whitespaceAndComments))), ParserLenient_symbol(")", Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: Maybe_Maybe.Maybe_Nothing)), ParserLenient_followedBySymbol(")", ElmSyntaxParserLenient_exposingWithinParensExplicitFollowedByWhitespaceAndCommentsMap({ (generated_0_argument0_left_argument3_argument2_argument1_argument2_argument1_argument5: ElmSyntaxExposing_Exposing) in Maybe_Maybe.Maybe_Just(generated_0_argument0_left_argument3_argument2_argument1_argument2_argument1_argument5) })))))
            ),
            ElmSyntaxParserLenient_whitespaceAndComments,
            Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: Maybe_Maybe.Maybe_Nothing)
        )
    )

public static let ElmSyntaxParserLenient_import_: ElmSyntaxParserLenient_Parser<Generated_comments_syntax<ElmSyntaxParserLenient_Comments, ElmSyntaxNode_Node<ElmSyntaxImport_Import>>> =
    ElmSyntaxParserLenient_importFollowedByWhitespaceAndComments

public static let ElmSyntaxParserLenient_infixDeclaration: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>> =
    ParserLenient_map9WithRange({ (range: ElmSyntaxRange_Range) in { (commentsAfterInfix: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (direction: ElmSyntaxNode_Node<ElmSyntaxInfix_InfixDirection>) in { (commentsAfterDirection: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (precedence: ElmSyntaxNode_Node<Double>) in { (commentsAfterPrecedence: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (operator_: ElmSyntaxNode_Node<String>) in { (commentsAfterOperator: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (commentsAfterEqual: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (fn: ElmSyntaxNode_Node<String>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, ElmSyntaxParserLenient_ropePrependTo(commentsAfterOperator, ElmSyntaxParserLenient_ropePrependTo(commentsAfterPrecedence, ElmSyntaxParserLenient_ropePrependTo(commentsAfterDirection, commentsAfterInfix)))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_InfixDeclaration(Generated_direction_function_operator__precedence.Record(direction: direction, function: fn, operator_: operator_, precedence: precedence)))) } } } } } } } } } }, ParserLenient_keywordFollowedBy("infix", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_infixDirection, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_integerDecimalMapWithRange({ (generated_0_argument0_argument4: ElmSyntaxRange_Range) in { (generated_1_argument0_argument4: Double) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_0_argument0_argument4, generated_1_argument0_argument4) } }), ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_symbolFollowedBy("(", ParserLenient_whileAtMost3WithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol({ (operatorRange: Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) in { (operator_: String) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: Generated_column_row.Record(column: Basics_add(operatorRange.end.column, 1.0), row: operatorRange.end.row), start: Generated_column_row.Record(column: Basics_sub(operatorRange.start.column, 1.0), row: operatorRange.start.row)), operator_) } }, ElmSyntaxParserLenient_isOperatorSymbolCharAsString, ElmSyntaxParserLenient_isAllowedOperatorToken, ")")), ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_symbolFollowedBy("=", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_nameLowercaseNode)

public static let ElmSyntaxParserLenient_infixDirection: ElmSyntaxParserLenient_Parser<ElmSyntaxNode_Node<ElmSyntaxInfix_InfixDirection>> =
    ParserLenient_oneOf3(ParserLenient_mapWithRange({ (generated_0_argument0_argument0: ElmSyntaxRange_Range) in { (generated_1_argument0_argument0: ElmSyntaxInfix_InfixDirection) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_0_argument0_argument0, generated_1_argument0_argument0) } }, ParserLenient_keyword("right", ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Right)), ParserLenient_mapWithRange({ (generated_0_argument0_argument1: ElmSyntaxRange_Range) in { (generated_1_argument0_argument1: ElmSyntaxInfix_InfixDirection) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_0_argument0_argument1, generated_1_argument0_argument1) } }, ParserLenient_keyword("left", ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Left)), ParserLenient_mapWithRange({ (generated_0_argument0_argument2: ElmSyntaxRange_Range) in { (generated_1_argument0_argument2: ElmSyntaxInfix_InfixDirection) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_0_argument0_argument2, generated_1_argument0_argument2) } }, ParserLenient_keyword("non", ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Non)))

public static let ElmSyntaxParserLenient_infixExpose: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>> =
    ParserLenient_map2WithRange(
        { (range: ElmSyntaxRange_Range) in
            { (infixName: String) in
                { (generated_argument0_2: Unit) in
                    let (_) =
                        generated_argument0_2
                    return Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_InfixExpose(infixName)))
                }
            }
        },
        ParserLenient_symbolFollowedBy(
            "(",
            ParserLenient_ifFollowedByWhileWithoutLinebreak(
                { (c: UnicodeScalar) in
                    switch c {
                    case ")":
                        false
                    case "\n":
                        false
                    case " ":
                        false
                    case _:
                        true
                    }
                },
                { (c: UnicodeScalar) in
                    switch c {
                    case ")":
                        false
                    case "\n":
                        false
                    case " ":
                        false
                    case _:
                        true
                    }
                }
            )
        ),
        ParserLenient_symbol(")", Unit.Unit)
    )

public static let ElmSyntaxParserLenient_justFromMultilineCommentNodeOrEmptyOnProblem: Maybe_Maybe<ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_Comments>> =
    Maybe_Maybe.Maybe_Just(ElmSyntaxParserLenient_fromMultilineCommentNodeOrEmptyOnProblem)

public static let ElmSyntaxParserLenient_justFromSingleLineCommentNode: Maybe_Maybe<ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_Comments>> =
    Maybe_Maybe.Maybe_Just(ElmSyntaxParserLenient_fromSingleLineCommentNode)

public static let ElmSyntaxParserLenient_letBlockElementFollowedByOptimisticLayout: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>> =
    ElmSyntaxParserLenient_topIndentedFollowedBy(ParserLenient_oneOf2(ElmSyntaxParserLenient_letFunctionFollowedByOptimisticLayout, ElmSyntaxParserLenient_letDestructuringDeclarationFollowedByOptimisticLayout))

public static let ElmSyntaxParserLenient_letDeclarationsIn: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>>> =
    ElmSyntaxParserLenient_topIndentedFollowedBy(ParserLenient_map3({ (headLetResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>) in { (commentsAfter: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (tailLetResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(tailLetResult.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfter, headLetResult.comments)), syntax: List_cons(headLetResult.syntax, tailLetResult.syntax)) } } }, ParserLenient_oneOf2(ElmSyntaxParserLenient_letFunctionFollowedByOptimisticLayout, ElmSyntaxParserLenient_letDestructuringDeclarationFollowedByOptimisticLayout), ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_untilWithComments(ParserLenient_keyword("in", Unit.Unit), ElmSyntaxParserLenient_letBlockElementFollowedByOptimisticLayout)))

public static let ElmSyntaxParserLenient_letDestructuringDeclarationFollowedByOptimisticLayout: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>> =
    ParserLenient_map4(
        { (patternResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in
            { (commentsAfterPattern: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                { (commentsAfterEquals: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                    { (expressionResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
                        let generated_let_result_argument0_patternRange: ElmSyntaxRange_Range
                        switch patternResult.syntax {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_patternRange, _):
                            generated_let_result_argument0_patternRange =
                                generated_destructured_patternRange
                        }
                        let generated_let_result_argument0_destructuredExpressionRange: ElmSyntaxRange_Range
                        switch expressionResult.syntax {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_destructuredExpressionRange, _):
                            generated_let_result_argument0_destructuredExpressionRange =
                                generated_destructured_destructuredExpressionRange
                        }
                        return Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(expressionResult.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterEquals, ElmSyntaxParserLenient_ropePrependTo(commentsAfterPattern, patternResult.comments))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_result_argument0_destructuredExpressionRange.end, start: generated_let_result_argument0_patternRange.start), ElmSyntaxExpression_LetDeclaration.ElmSyntaxExpression_LetDestructuring(patternResult.syntax, expressionResult.syntax)))
                    }
                }
            }
        },
        ElmSyntaxParserLenient_patternNotSpaceSeparated,
        ElmSyntaxParserLenient_whitespaceAndComments,
        ParserLenient_symbolFollowedBy("=", ElmSyntaxParserLenient_whitespaceAndComments),
        ElmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments
    )

public static let ElmSyntaxParserLenient_letExpressionFollowedByOptimisticLayout: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserLenient_map3WithStartLocation(
        { (start: ElmSyntaxRange_Location) in
            { (letDeclarationsResult: Generated_comments_declarations<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>>) in
                { (commentsAfterIn: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                    { (expressionResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
                        let generated_let_result_argument0_expressionRange: ElmSyntaxRange_Range
                        switch expressionResult.syntax {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_expressionRange, _):
                            generated_let_result_argument0_expressionRange =
                                generated_destructured_expressionRange
                        }
                        return Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(expressionResult.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterIn, letDeclarationsResult.comments)), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_result_argument0_expressionRange.end, start: start), ElmSyntaxExpression_Expression.ElmSyntaxExpression_LetExpression(Generated_declarations_expression.Record(declarations: letDeclarationsResult.declarations, expression: expressionResult.syntax))))
                    }
                }
            }
        },
        ParserLenient_withIndentSetToColumn(ParserLenient_keywordFollowedBy("let", ParserLenient_map2({ (commentsAfterLet: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (letDeclarationsResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>>) in Generated_comments_declarations.Record(comments: ElmSyntaxParserLenient_ropePrependTo(letDeclarationsResult.comments, commentsAfterLet), declarations: letDeclarationsResult.syntax) } }, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_withIndentSetToColumn(ElmSyntaxParserLenient_letDeclarationsIn)))),
        ElmSyntaxParserLenient_whitespaceAndComments,
        ElmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments
    )

public static let ElmSyntaxParserLenient_letFunctionFollowedByOptimisticLayout: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>> =
    ParserLenient_oneOf2(
        ParserLenient_validate(
            { (result: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>) in
                let generated_let_result_argument0_right_argument0_letDeclaration: ElmSyntaxExpression_LetDeclaration
                switch result.syntax {
                case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_letDeclaration):
                    generated_let_result_argument0_right_argument0_letDeclaration =
                        generated_destructured_letDeclaration
                }
                let generated_localReturnResult_letResult_result_argument0_right_argument0: Bool
                switch generated_let_result_argument0_right_argument0_letDeclaration {
                case ElmSyntaxExpression_LetDeclaration.ElmSyntaxExpression_LetDestructuring(_, _):
                    generated_localReturnResult_letResult_result_argument0_right_argument0 =
                        true
                case let ElmSyntaxExpression_LetDeclaration.ElmSyntaxExpression_LetFunction(letFunctionDeclaration):
                    let generated_localReturnResult_caseResult_case1_letResult_result_argument0_right_argument0: Bool
                    switch letFunctionDeclaration.signature {
                    case Maybe_Maybe.Maybe_Nothing:
                        generated_localReturnResult_caseResult_case1_letResult_result_argument0_right_argument0 =
                            true
                    case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, signature)):
                        let generated_let_caseResult_case1_caseResult_case1_letResult_result_argument0_right_argument0_implementation: ElmSyntaxExpression_FunctionImplementation
                        switch letFunctionDeclaration.declaration {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_implementation):
                            generated_let_caseResult_case1_caseResult_case1_letResult_result_argument0_right_argument0_implementation =
                                generated_destructured_implementation
                        }
                        let generated_let_caseResult_case1_caseResult_case1_letResult_result_argument0_right_argument0_implementationName: String
                        switch generated_let_caseResult_case1_caseResult_case1_letResult_result_argument0_right_argument0_implementation.name {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_implementationName):
                            generated_let_caseResult_case1_caseResult_case1_letResult_result_argument0_right_argument0_implementationName =
                                generated_destructured_implementationName
                        }
                        let generated_let_caseResult_case1_caseResult_case1_letResult_result_argument0_right_argument0_signatureName: String
                        switch signature.name {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_signatureName):
                            generated_let_caseResult_case1_caseResult_case1_letResult_result_argument0_right_argument0_signatureName =
                                generated_destructured_signatureName
                        }
                        generated_localReturnResult_caseResult_case1_letResult_result_argument0_right_argument0 =
                            Basics_eq(generated_let_caseResult_case1_caseResult_case1_letResult_result_argument0_right_argument0_implementationName, generated_let_caseResult_case1_caseResult_case1_letResult_result_argument0_right_argument0_signatureName)
                    }
                    generated_localReturnResult_letResult_result_argument0_right_argument0 =
                        generated_localReturnResult_caseResult_case1_letResult_result_argument0_right_argument0
                }
                return generated_localReturnResult_letResult_result_argument0_right_argument0
            },
            ParserLenient_map6WithStartLocation(
                { (startNameStart: ElmSyntaxRange_Location) in
                    { (startNameNode: ElmSyntaxNode_Node<String>) in
                        { (commentsAfterStartName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                            { (maybeSignature: Maybe_Maybe<Generated_comments_implementationName_typeAnnotation<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>>) in
                                { (arguments: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>) in
                                    { (commentsAfterEqual: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                                        { (expressionResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
                                            let generated_localReturnResult_result_argument0_left_argument0: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>
                                            switch maybeSignature {
                                            case Maybe_Maybe.Maybe_Nothing:
                                                let generated_let_caseResult_case0_result_argument0_left_argument0_expressionRange: ElmSyntaxRange_Range
                                                switch expressionResult.syntax {
                                                case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_expressionRange, _):
                                                    generated_let_caseResult_case0_result_argument0_left_argument0_expressionRange =
                                                        generated_destructured_expressionRange
                                                }
                                                generated_localReturnResult_result_argument0_left_argument0 =
                                                    Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(expressionResult.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, ElmSyntaxParserLenient_ropePrependTo(arguments.comments, commentsAfterStartName))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case0_result_argument0_left_argument0_expressionRange.end, start: startNameStart), ElmSyntaxExpression_LetDeclaration.ElmSyntaxExpression_LetFunction(Generated_declaration_documentation_signature.Record(declaration: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case0_result_argument0_left_argument0_expressionRange.end, start: startNameStart), Generated_arguments_expression_name.Record(arguments: arguments.syntax, expression: expressionResult.syntax, name: startNameNode)), documentation: Maybe_Maybe.Maybe_Nothing, signature: Maybe_Maybe.Maybe_Nothing))))
                                            case let Maybe_Maybe.Maybe_Just(signature):
                                                let generated_let_caseResult_case1_result_argument0_left_argument0_implementationNameRange: ElmSyntaxRange_Range
                                                switch signature.implementationName {
                                                case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_implementationNameRange, _):
                                                    generated_let_caseResult_case1_result_argument0_left_argument0_implementationNameRange =
                                                        generated_destructured_implementationNameRange
                                                }
                                                let generated_let_caseResult_case1_result_argument0_left_argument0_expressionRange: ElmSyntaxRange_Range
                                                switch expressionResult.syntax {
                                                case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_expressionRange, _):
                                                    generated_let_caseResult_case1_result_argument0_left_argument0_expressionRange =
                                                        generated_destructured_expressionRange
                                                }
                                                generated_localReturnResult_result_argument0_left_argument0 =
                                                    Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(expressionResult.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, ElmSyntaxParserLenient_ropePrependTo(arguments.comments, ElmSyntaxParserLenient_ropePrependTo(signature.comments, commentsAfterStartName)))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case1_result_argument0_left_argument0_expressionRange.end, start: startNameStart), ElmSyntaxExpression_LetDeclaration.ElmSyntaxExpression_LetFunction(Generated_declaration_documentation_signature.Record(declaration: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case1_result_argument0_left_argument0_expressionRange.end, start: generated_let_caseResult_case1_result_argument0_left_argument0_implementationNameRange.start), Generated_arguments_expression_name.Record(arguments: arguments.syntax, expression: expressionResult.syntax, name: signature.implementationName)), documentation: Maybe_Maybe.Maybe_Nothing, signature: Maybe_Maybe.Maybe_Just(ElmSyntaxNode_combine({ (name: ElmSyntaxNode_Node<String>) in { (value: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in Generated_name_typeAnnotation.Record(name: name, typeAnnotation: value) } }, startNameNode, signature.typeAnnotation))))))
                                            }
                                            return generated_localReturnResult_result_argument0_left_argument0
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                ElmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords,
                ElmSyntaxParserLenient_whitespaceAndComments,
                ParserLenient_map4OrSucceed({ (commentsBeforeTypeAnnotation: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (typeAnnotationResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in { (implementationName: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<String>>) in { (afterImplementationName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Maybe_Maybe.Maybe_Just(Generated_comments_implementationName_typeAnnotation.Record(comments: ElmSyntaxParserLenient_ropePrependTo(afterImplementationName, ElmSyntaxParserLenient_ropePrependTo(implementationName.comments, ElmSyntaxParserLenient_ropePrependTo(typeAnnotationResult.comments, commentsBeforeTypeAnnotation))), implementationName: implementationName.syntax, typeAnnotation: typeAnnotationResult.syntax)) } } } }, ParserLenient_symbolFollowedBy(":", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_type_, ElmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndentedFollowedBy(ElmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords), ElmSyntaxParserLenient_whitespaceAndComments, Maybe_Maybe.Maybe_Nothing),
                ElmSyntaxParserLenient_parameterPatternsEquals,
                ElmSyntaxParserLenient_whitespaceAndComments,
                ElmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments
            )
        ),
        ParserLenient_map8WithStartLocation({ (start: ElmSyntaxRange_Location) in { (commentsBeforeTypeAnnotation: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (typeAnnotationResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in { (commentsBetweenTypeAndName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (nameNode: ElmSyntaxNode_Node<String>) in { (afterImplementationName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (arguments: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>) in { (commentsAfterEqual: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (result: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(result.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, ElmSyntaxParserLenient_ropePrependTo(arguments.comments, ElmSyntaxParserLenient_ropePrependTo(afterImplementationName, ElmSyntaxParserLenient_ropePrependTo(commentsBetweenTypeAndName, ElmSyntaxParserLenient_ropePrependTo(typeAnnotationResult.comments, commentsBeforeTypeAnnotation)))))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: ElmSyntaxNode_range(result.syntax).end, start: start), ElmSyntaxExpression_LetDeclaration.ElmSyntaxExpression_LetFunction(Generated_declaration_documentation_signature.Record(declaration: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: ElmSyntaxNode_range(result.syntax).end, start: ElmSyntaxNode_range(nameNode).start), Generated_arguments_expression_name.Record(arguments: arguments.syntax, expression: result.syntax, name: nameNode)), documentation: Maybe_Maybe.Maybe_Nothing, signature: Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: ElmSyntaxNode_range(typeAnnotationResult.syntax).end, start: start), Generated_name_typeAnnotation.Record(name: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: start, start: start), ElmSyntaxNode_value(nameNode)), typeAnnotation: typeAnnotationResult.syntax))))))) } } } } } } } } }, ParserLenient_symbolFollowedBy(":", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_type_, ElmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndented, ElmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_parameterPatternsEquals, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments)
    )

public static let ElmSyntaxParserLenient_letOrUnqualifiedReferenceExpressionMaybeApplied: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserLenient_oneOf2(ElmSyntaxParserLenient_letExpressionFollowedByOptimisticLayout, ElmSyntaxParserLenient_followedByMultiArgumentApplication(ElmSyntaxParserLenient_expressionUnqualifiedFunctionReferenceFollowedByRecordAccess))

public static let ElmSyntaxParserLenient_listOrGlslExpressionOptimisticLayout: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ElmSyntaxParserLenient_followedByOptimisticLayout(ElmSyntaxParserLenient_expressionListOrGlsl)

public static let ElmSyntaxParserLenient_listPattern: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ParserLenient_map2WithRange(
        { (range: ElmSyntaxRange_Range) in
            { (commentsBeforeElements: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                { (maybeElements: Maybe_Maybe<Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>>) in
                    switch maybeElements {
                    case Maybe_Maybe.Maybe_Nothing:
                        Generated_comments_syntax.Record(comments: commentsBeforeElements, syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxParserLenient_patternListEmpty))
                    case let Maybe_Maybe.Maybe_Just(elements):
                        Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(elements.comments, commentsBeforeElements), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ListPattern(elements.syntax)))
                    }
                }
            }
        },
        ParserLenient_symbolFollowedBy("[", ElmSyntaxParserLenient_whitespaceAndComments),
        ParserLenient_oneOf2(ParserLenient_symbol("]", Maybe_Maybe.Maybe_Nothing), ParserLenient_followedBySymbol("]", ParserLenient_map4({ (commentsBeforeHead: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (head: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in { (commentsAfterHead: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (tail: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>) in Maybe_Maybe.Maybe_Just(Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfterHead, ElmSyntaxParserLenient_ropePrependTo(tail.comments, ElmSyntaxParserLenient_ropePrependTo(head.comments, commentsBeforeHead))), syntax: List_cons(head.syntax, tail.syntax))) } } } }, ParserLenient_orSucceed(ParserLenient_symbolFollowedBy(",", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_ropeEmpty()), ElmSyntaxParserLenient_pattern, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_manyWithComments(ParserLenient_symbolFollowedBy(",", ParserLenient_map4({ (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (commentsWithExtraComma: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (v: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in { (commentsAfter: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfter, ElmSyntaxParserLenient_ropePrependTo(v.comments, ElmSyntaxParserLenient_ropePrependTo(commentsWithExtraComma, commentsBefore))), syntax: v.syntax) } } } }, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_orSucceed(ParserLenient_symbolFollowedBy(",", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_ropeEmpty()), ElmSyntaxParserLenient_pattern, ElmSyntaxParserLenient_whitespaceAndComments))))))
    )

public static let ElmSyntaxParserLenient_literalExpressionOptimisticLayout: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ElmSyntaxParserLenient_followedByOptimisticLayout(ElmSyntaxParserLenient_expressionString)

public static let ElmSyntaxParserLenient_maybeDotNamesUppercaseTuple: ElmSyntaxParserLenient_Parser<Maybe_Maybe<Tuple<List_List<String>, String>>> =
    ParserLenient_map2OrSucceed(
        { (firstName: String) in
            { (afterFirstName: Maybe_Maybe<Tuple<List_List<String>, String>>) in
                switch afterFirstName {
                case Maybe_Maybe.Maybe_Nothing:
                    Maybe_Maybe.Maybe_Just(Tuple.Tuple(List_List.List_Empty, firstName))
                case let Maybe_Maybe.Maybe_Just(Tuple.Tuple(qualificationAfter, unqualified)):
                    Maybe_Maybe.Maybe_Just(Tuple.Tuple(List_cons(firstName, qualificationAfter), unqualified))
                }
            }
        },
        ParserLenient_symbolFollowedBy(".", ElmSyntaxParserLenient_nameUppercase),
        ParserLenient_lazy(
            { (generated_argument0_argument2_0: Unit) in
                let (_) =
                    generated_argument0_argument2_0
                return ElmSyntaxParserLenient_maybeDotNamesUppercaseTuple
            }
        ),
        Maybe_Maybe.Maybe_Nothing
    )

public static let ElmSyntaxParserLenient_maybeDotReferenceExpressionTuple: ElmSyntaxParserLenient_Parser<Maybe_Maybe<Tuple<List_List<String>, String>>> =
    ParserLenient_orSucceed(
        ParserLenient_symbolFollowedBy(
            ".",
            ParserLenient_oneOf2Map(
                { (generated_0_argument0_argument1_argument0: Tuple<List_List<String>, String>) in Maybe_Maybe.Maybe_Just(generated_0_argument0_argument1_argument0) },
                ParserLenient_map2(
                    { (firstName: String) in
                        { (after: Maybe_Maybe<Tuple<List_List<String>, String>>) in
                            switch after {
                            case Maybe_Maybe.Maybe_Nothing:
                                Tuple.Tuple(List_List.List_Empty, firstName)
                            case let Maybe_Maybe.Maybe_Just(Tuple.Tuple(qualificationAfter, unqualified)):
                                Tuple.Tuple(List_cons(firstName, qualificationAfter), unqualified)
                            }
                        }
                    },
                    ElmSyntaxParserLenient_nameUppercase,
                    ParserLenient_lazy(
                        { (generated_argument0_argument2_argument1_argument1_argument0_0: Unit) in
                            let (_) =
                                generated_argument0_argument2_argument1_argument1_argument0_0
                            return ElmSyntaxParserLenient_maybeDotReferenceExpressionTuple
                        }
                    )
                ),
                { (name: String) in Maybe_Maybe.Maybe_Just(Tuple.Tuple(List_List.List_Empty, name)) },
                ElmSyntaxParserLenient_nameLowercaseUnderscoreSuffixingKeywords
            )
        ),
        Maybe_Maybe.Maybe_Nothing
    )

public static let ElmSyntaxParserLenient_moduleHeader: ElmSyntaxParserLenient_Parser<Generated_comments_syntax<ElmSyntaxParserLenient_Comments, ElmSyntaxNode_Node<ElmSyntaxModule_Module>>> =
    ParserLenient_oneOf3(ElmSyntaxParserLenient_normalModuleDefinition, ElmSyntaxParserLenient_portModuleDefinition, ElmSyntaxParserLenient_effectModuleDefinition)

public static let ElmSyntaxParserLenient_moduleName: ElmSyntaxParserLenient_Parser<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>> =
    ParserLenient_map2WithRange({ (range: ElmSyntaxRange_Range) in { (head: String) in { (tail: List_List<String>) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, List_cons(head, tail)) } } }, ElmSyntaxParserLenient_nameUppercase, ParserLenient_loopWhileSucceedsRightToLeftStackUnsafe(ParserLenient_symbolFollowedBy(".", ElmSyntaxParserLenient_nameUppercase), List_List.List_Empty, { (generated_left: String) in { (generated_right: List_List<String>) in List_cons(generated_left, generated_right) } }))

public static let ElmSyntaxParserLenient_module_: ElmSyntaxParserLenient_Parser<ElmSyntaxFile_File> =
    ParserLenient_map4(
        { (moduleHeaderResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxModule_Module>>) in
            { (moduleComments: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                { (importsResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxImport_Import>>>) in
                    { (declarationsResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<Generated_declaration_lateImports<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>, List_List<ElmSyntaxNode_Node<ElmSyntaxImport_Import>>>>>) in
                        @Sendable func generated_let_result_argument0_moduleHeaderBasedOnExistingPorts(_ existingModuleHeaderInfo: ElmSyntaxModule_DefaultModuleData) ->  ElmSyntaxModule_Module {
                            if List_any({ (declarationAndLateImports: Generated_declaration_lateImports<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>, List_List<ElmSyntaxNode_Node<ElmSyntaxImport_Import>>>) in ElmSyntaxParserLenient_declarationIsPort(ElmSyntaxNode_value(declarationAndLateImports.declaration)) }, declarationsResult.syntax) {
                                ElmSyntaxModule_Module.ElmSyntaxModule_PortModule(existingModuleHeaderInfo)
                            } else {
                                ElmSyntaxModule_Module.ElmSyntaxModule_NormalModule(existingModuleHeaderInfo)
                            }
                        }
                        let generated_let_result_argument0_importStartLocation: ElmSyntaxRange_Location =
                            switch importsResult.syntax {
                            case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(import0Range, _), _):
                                import0Range.start
                            case List_List.List_Empty:
                                switch declarationsResult.syntax {
                                case let List_List.List_Cons(declarationAndLateImports0, _):
                                    ElmSyntaxNode_range(declarationAndLateImports0.declaration).start
                                case List_List.List_Empty:
                                    Generated_column_row.Record(column: 1.0, row: 2.0)
                                }
                            }
                        return
                            Generated_comments_declarations_imports_moduleDefinition.Record(
                                comments: ElmSyntaxParserLenient_commentsToList(ElmSyntaxParserLenient_ropePrependTo(declarationsResult.comments, ElmSyntaxParserLenient_ropePrependTo(importsResult.comments, ElmSyntaxParserLenient_ropePrependTo(moduleComments, moduleHeaderResult.comments)))),
                                declarations: List_map({ (generated_record: Generated_declaration_lateImports<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>, List_List<ElmSyntaxNode_Node<ElmSyntaxImport_Import>>>) in generated_record.declaration }, declarationsResult.syntax),
                                imports:
                                    List_append(
                                        List_map(
                                            { (generated_argument0_right_left_imports_letResult_result_argument0_0: ElmSyntaxNode_Node<ElmSyntaxImport_Import>) in
                                                let lateImport: ElmSyntaxImport_Import
                                                switch generated_argument0_right_left_imports_letResult_result_argument0_0 {
                                                case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_lateImport):
                                                    lateImport =
                                                        generated_destructured_lateImport
                                                }
                                                return ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_result_argument0_importStartLocation, start: generated_let_result_argument0_importStartLocation), lateImport)
                                            },
                                            List_concatMap({ (generated_record: Generated_declaration_lateImports<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>, List_List<ElmSyntaxNode_Node<ElmSyntaxImport_Import>>>) in generated_record.lateImports }, declarationsResult.syntax)
                                        ),
                                        importsResult.syntax
                                    ),
                                moduleDefinition:
                                    ElmSyntaxNode_map(
                                        { (syntaxModuleHeader: ElmSyntaxModule_Module) in
                                            switch syntaxModuleHeader {
                                            case let ElmSyntaxModule_Module.ElmSyntaxModule_EffectModule(effectModuleHeader):
                                                ElmSyntaxModule_Module.ElmSyntaxModule_EffectModule(effectModuleHeader)
                                            case let ElmSyntaxModule_Module.ElmSyntaxModule_NormalModule(normalModuleHeader):
                                                generated_let_result_argument0_moduleHeaderBasedOnExistingPorts(normalModuleHeader)
                                            case let ElmSyntaxModule_Module.ElmSyntaxModule_PortModule(normalModuleHeader):
                                                generated_let_result_argument0_moduleHeaderBasedOnExistingPorts(normalModuleHeader)
                                            }
                                        },
                                        moduleHeaderResult.syntax
                                    )
                            )
                    }
                }
            }
        },
        ElmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndentedFollowedByWithComments(ElmSyntaxParserLenient_moduleHeader),
        ElmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndentedFollowedByComments(ParserLenient_map2OrSucceed({ (moduleDocumentation: ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>) in { (commentsAfter: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>) in ElmSyntaxParserLenient_ropeFilledPrependTo(commentsAfter, ElmSyntaxParserLenient_ropeOne(moduleDocumentation)) } }, ElmSyntaxParserLenient_documentationComment, ElmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndented, ElmSyntaxParserLenient_ropeEmpty())),
        ElmSyntaxParserLenient_manyWithComments(ElmSyntaxParserLenient_importFollowedByWhitespaceAndComments),
        ElmSyntaxParserLenient_manyWithComments(ElmSyntaxParserLenient_topIndentedFollowedBy(ParserLenient_map3({ (declarationParsed: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>) in { (commentsAfter: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (lateImportsResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxImport_Import>>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(lateImportsResult.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfter, declarationParsed.comments)), syntax: Generated_declaration_lateImports.Record(declaration: declarationParsed.syntax, lateImports: lateImportsResult.syntax)) } } }, ElmSyntaxParserLenient_declaration, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_manyWithComments(ElmSyntaxParserLenient_importFollowedByWhitespaceAndComments))))
    )

public static let ElmSyntaxParserLenient_multiLineComment: ElmSyntaxParserLenient_Parser<ElmSyntaxNode_Node<String>> =
    ParserLenient_offsetSourceAndThen(
        { (offset: Double) in
            { (source: String) in
                switch String_slice(Basics_add(offset, 2.0), Basics_add(offset, 3.0), source) {
                case "|":
                    ParserLenient_problem()
                case _:
                    ElmSyntaxParserLenient_multiLineCommentNoCheck
                }
            }
        }
    )

public static let ElmSyntaxParserLenient_multiLineCommentNoCheck: ElmSyntaxParserLenient_Parser<ElmSyntaxNode_Node<String>> =
    ParserLenient_nestableMultiCommentMapWithRange({ (generated_0_argument0: ElmSyntaxRange_Range) in { (generated_1_argument0: String) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_0_argument0, generated_1_argument0) } }, Tuple.Tuple("{", "-"), Tuple.Tuple("-", "}"))

public static let ElmSyntaxParserLenient_nameLowercase: ElmSyntaxParserLenient_Parser<String> =
    ParserLenient_ifFollowedByWhileValidateWithoutLinebreak(CharExtra_unicodeIsLowerFast, CharExtra_unicodeIsAlphaNumOrUnderscoreFast, ElmSyntaxParserLenient_isNotReserved)

public static let ElmSyntaxParserLenient_nameLowercaseNode: ElmSyntaxParserLenient_Parser<ElmSyntaxNode_Node<String>> =
    ParserLenient_ifFollowedByWhileValidateMapWithRangeWithoutLinebreak({ (generated_0_argument0: ElmSyntaxRange_Range) in { (generated_1_argument0: String) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_0_argument0, generated_1_argument0) } }, CharExtra_unicodeIsLowerFast, CharExtra_unicodeIsAlphaNumOrUnderscoreFast, ElmSyntaxParserLenient_isNotReserved)

public static let ElmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords: ElmSyntaxParserLenient_Parser<ElmSyntaxNode_Node<String>> =
    ParserLenient_ifFollowedByWhileMapWithRangeWithoutLinebreak({ (range: ElmSyntaxRange_Range) in { (name: String) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxParserLenient_ifKeywordUnderscoreSuffix(name)) } }, CharExtra_unicodeIsLowerFast, CharExtra_unicodeIsAlphaNumOrUnderscoreFast)

public static let ElmSyntaxParserLenient_nameLowercaseUnderscoreSuffixingKeywords: ElmSyntaxParserLenient_Parser<String> =
    ParserLenient_ifFollowedByWhileMapWithoutLinebreak(ElmSyntaxParserLenient_ifKeywordUnderscoreSuffix, CharExtra_unicodeIsLowerFast, CharExtra_unicodeIsAlphaNumOrUnderscoreFast)

public static let ElmSyntaxParserLenient_nameUppercase: ElmSyntaxParserLenient_Parser<String> =
    ParserLenient_ifFollowedByWhileWithoutLinebreak(CharExtra_unicodeIsUpperFast, CharExtra_unicodeIsAlphaNumOrUnderscoreFast)

public static let ElmSyntaxParserLenient_nameUppercaseNode: ElmSyntaxParserLenient_Parser<ElmSyntaxNode_Node<String>> =
    ParserLenient_ifFollowedByWhileMapWithRangeWithoutLinebreak({ (generated_0_argument0: ElmSyntaxRange_Range) in { (generated_1_argument0: String) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_0_argument0, generated_1_argument0) } }, CharExtra_unicodeIsUpperFast, CharExtra_unicodeIsAlphaNumOrUnderscoreFast)

public static let ElmSyntaxParserLenient_negationAfterMinus: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserLenient_map(
        { (subExpressionResult: Generated_comments_syntax<ElmSyntaxParserLenient_Comments, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
            let generated_let_result_argument0_subExpressionRange: ElmSyntaxRange_Range
            switch subExpressionResult.syntax {
            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_subExpressionRange, _):
                generated_let_result_argument0_subExpressionRange =
                    generated_destructured_subExpressionRange
            }
            return Generated_comments_syntax.Record(comments: subExpressionResult.comments, syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_result_argument0_subExpressionRange.end, start: Generated_column_row.Record(column: Basics_sub(generated_let_result_argument0_subExpressionRange.start.column, 1.0), row: generated_let_result_argument0_subExpressionRange.start.row)), ElmSyntaxExpression_Expression.ElmSyntaxExpression_Negation(subExpressionResult.syntax)))
        },
        ElmSyntaxParserLenient_subExpression
    )

public static let ElmSyntaxParserLenient_negationOperationOptimisticLayout: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ElmSyntaxParserLenient_followedByOptimisticLayout(ElmSyntaxParserLenient_expressionNegation)

public static let ElmSyntaxParserLenient_normalModuleDefinition: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxModule_Module>>> =
    ParserLenient_map4WithRange({ (range: ElmSyntaxRange_Range) in { (commentsAfterModule: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (moduleNameNode: ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>) in { (commentsAfterModuleName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (exposingList: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(exposingList.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterModuleName, commentsAfterModule)), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxModule_Module.ElmSyntaxModule_NormalModule(Generated_exposingList_moduleName.Record(exposingList: exposingList.syntax, moduleName: moduleNameNode)))) } } } } }, ParserLenient_keywordFollowedBy("module", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_moduleName, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_exposeDefinition)

public static let ElmSyntaxParserLenient_numberPart: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ParserLenient_integerDecimalOrHexadecimalMapWithRange({ (range: ElmSyntaxRange_Range) in { (n: Double) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_IntPattern(n))) } }, { (range: ElmSyntaxRange_Range) in { (n: Double) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_HexPattern(n))) } })

public static let ElmSyntaxParserLenient_parameterPatternsEquals: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>> =
    ElmSyntaxParserLenient_untilWithComments(ParserLenient_oneOf2(ParserLenient_symbol("=", Unit.Unit), ParserLenient_symbol("->", Unit.Unit)), ParserLenient_map2({ (patternResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in { (commentsAfterPattern: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfterPattern, patternResult.comments), syntax: patternResult.syntax) } }, ElmSyntaxParserLenient_patternNotSpaceSeparated, ElmSyntaxParserLenient_whitespaceAndComments))

public static let ElmSyntaxParserLenient_parensPattern: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ParserLenient_symbolFollowedBy(
        "(",
        ParserLenient_map2WithRange(
            { (range: Generated_end_start<ElmSyntaxRange_Location, Generated_column_row<Double, Double>>) in { (commentsBeforeHead: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (contentResult: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxPattern_Pattern>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(contentResult.comments, commentsBeforeHead), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: range.end, start: Generated_column_row.Record(column: Basics_sub(range.start.column, 1.0), row: range.start.row)), contentResult.syntax)) } } },
            ElmSyntaxParserLenient_whitespaceAndComments,
            ParserLenient_oneOf2(
                ParserLenient_symbol(")", Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxPattern_Pattern.ElmSyntaxPattern_UnitPattern)),
                ParserLenient_map3(
                    { (headResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in
                        { (commentsAfterHead: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                            { (tailResult: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, Maybe_Maybe<Generated_maybeThirdPart_secondPart<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>>) in
                                let generated_localReturnResult_syntax_result_argument0_argument1_argument2_argument1: ElmSyntaxPattern_Pattern =
                                    switch tailResult.syntax {
                                    case Maybe_Maybe.Maybe_Nothing:
                                        ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ParenthesizedPattern(headResult.syntax)
                                    case let Maybe_Maybe.Maybe_Just(secondAndMaybeThirdPart):
                                        switch secondAndMaybeThirdPart.maybeThirdPart {
                                        case Maybe_Maybe.Maybe_Nothing:
                                            ElmSyntaxPattern_Pattern.ElmSyntaxPattern_TuplePattern(
                                                Array_toList(
                                                    [ headResult.syntax,
                                                      secondAndMaybeThirdPart.secondPart
                                                    ]
                                                )
                                            )
                                        case let Maybe_Maybe.Maybe_Just(thirdPart):
                                            ElmSyntaxPattern_Pattern.ElmSyntaxPattern_TuplePattern(
                                                Array_toList(
                                                    [ headResult.syntax,
                                                      secondAndMaybeThirdPart.secondPart,
                                                      thirdPart
                                                    ]
                                                )
                                            )
                                        }
                                    }
                                return Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(tailResult.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterHead, headResult.comments)), syntax: generated_localReturnResult_syntax_result_argument0_argument1_argument2_argument1)
                            }
                        }
                    },
                    ElmSyntaxParserLenient_pattern,
                    ElmSyntaxParserLenient_whitespaceAndComments,
                    ParserLenient_oneOf2(ParserLenient_symbol(")", Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: Maybe_Maybe.Maybe_Nothing)), ParserLenient_symbolFollowedBy(",", ParserLenient_map4({ (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (secondPart: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in { (commentsAfter: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (maybeThirdPart: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(maybeThirdPart.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfter, ElmSyntaxParserLenient_ropePrependTo(secondPart.comments, commentsBefore))), syntax: Maybe_Maybe.Maybe_Just(Generated_maybeThirdPart_secondPart.Record(maybeThirdPart: maybeThirdPart.syntax, secondPart: secondPart.syntax))) } } } }, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_pattern, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_oneOf2(ParserLenient_symbol(")", Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: Maybe_Maybe.Maybe_Nothing)), ParserLenient_symbolFollowedBy(",", ParserLenient_followedBySymbol(")", ParserLenient_map3({ (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (thirdPart: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in { (commentsAfter: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfter, ElmSyntaxParserLenient_ropePrependTo(thirdPart.comments, commentsBefore)), syntax: Maybe_Maybe.Maybe_Just(thirdPart.syntax)) } } }, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_pattern, ElmSyntaxParserLenient_whitespaceAndComments)))))))
                )
            )
        )
    )

public static let ElmSyntaxParserLenient_pattern: ElmSyntaxParserLenient_Parser<Generated_comments_syntax<ElmSyntaxParserLenient_Comments, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ParserLenient_map2(
        { (leftMaybeConsed: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in
            { (maybeAsExtension: Maybe_Maybe<Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<String>>>) in
                switch maybeAsExtension {
                case Maybe_Maybe.Maybe_Nothing:
                    leftMaybeConsed
                case let Maybe_Maybe.Maybe_Just(asExtension):
                    Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(asExtension.comments, leftMaybeConsed.comments), syntax: ElmSyntaxNode_combine({ (generated_0_argument0_syntax_caseResult_case1_result_argument0: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in { (generated_1_argument0_syntax_caseResult_case1_result_argument0: ElmSyntaxNode_Node<String>) in ElmSyntaxPattern_Pattern.ElmSyntaxPattern_AsPattern(generated_0_argument0_syntax_caseResult_case1_result_argument0, generated_1_argument0_syntax_caseResult_case1_result_argument0) } }, leftMaybeConsed.syntax, asExtension.syntax))
                }
            }
        },
        ParserLenient_loopWhileSucceedsOntoResultFromParserRightToLeftStackUnsafe(
            ParserLenient_map2(
                { (startPatternResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in { (commentsAfter: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfter, startPatternResult.comments), syntax: startPatternResult.syntax) } },
                ParserLenient_lazy(
                    { (generated_argument0_argument1_argument0_argument1_0: Unit) in
                        let (_) =
                            generated_argument0_argument1_argument0_argument1_0
                        return ElmSyntaxParserLenient_composablePattern
                    }
                ),
                ElmSyntaxParserLenient_whitespaceAndComments
            ),
            ParserLenient_symbolFollowedBy(
                "::",
                ParserLenient_map3(
                    { (commentsAfterCons: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (patternResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in { (commentsAfterTailSubPattern: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfterTailSubPattern, ElmSyntaxParserLenient_ropePrependTo(patternResult.comments, commentsAfterCons)), syntax: patternResult.syntax) } } },
                    ElmSyntaxParserLenient_whitespaceAndComments,
                    ParserLenient_lazy(
                        { (generated_argument0_argument2_argument1_argument1_argument1_0: Unit) in
                            let (_) =
                                generated_argument0_argument2_argument1_argument1_argument1_0
                            return ElmSyntaxParserLenient_composablePattern
                        }
                    ),
                    ElmSyntaxParserLenient_whitespaceAndComments
                )
            ),
            { (consed: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in { (afterCons: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(afterCons.comments, consed.comments), syntax: ElmSyntaxNode_combine({ (generated_0_argument0_syntax_result_argument2_argument1: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in { (generated_1_argument0_syntax_result_argument2_argument1: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in ElmSyntaxPattern_Pattern.ElmSyntaxPattern_UnConsPattern(generated_0_argument0_syntax_result_argument2_argument1, generated_1_argument0_syntax_result_argument2_argument1) } }, consed.syntax, afterCons.syntax)) } }
        ),
        ParserLenient_orSucceed(ParserLenient_keywordFollowedBy("as", ParserLenient_map2({ (commentsAfterAs: ElmSyntaxParserLenient_Comments) in { (name: ElmSyntaxNode_Node<String>) in Maybe_Maybe.Maybe_Just(Generated_comments_syntax.Record(comments: commentsAfterAs, syntax: name)) } }, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords)), Maybe_Maybe.Maybe_Nothing)
    )

public static let ElmSyntaxParserLenient_patternListEmpty: ElmSyntaxPattern_Pattern =
    ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ListPattern(List_List.List_Empty)

public static let ElmSyntaxParserLenient_patternNotSpaceSeparated: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ParserLenient_oneOf9(ElmSyntaxParserLenient_varPattern, ElmSyntaxParserLenient_qualifiedPatternWithoutConsumeArgs, ElmSyntaxParserLenient_allPattern, ElmSyntaxParserLenient_parensPattern, ElmSyntaxParserLenient_recordPattern, ElmSyntaxParserLenient_stringPattern, ElmSyntaxParserLenient_listPattern, ElmSyntaxParserLenient_numberPart, ElmSyntaxParserLenient_charPattern)

public static let ElmSyntaxParserLenient_portDeclarationAfterDocumentation: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_DeclarationAfterDocumentation>> =
    ParserLenient_map5(
        { (commentsAfterPort: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
            { (nameNode: ElmSyntaxNode_Node<String>) in
                { (commentsAfterName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                    { (commentsAfterColon: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                        { (typeAnnotationResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in
                            let generated_let_result_argument0_nameRange: ElmSyntaxRange_Range
                            switch nameNode {
                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_nameRange, _):
                                generated_let_result_argument0_nameRange =
                                    generated_destructured_nameRange
                            }
                            return Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfterColon, ElmSyntaxParserLenient_ropePrependTo(typeAnnotationResult.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterName, commentsAfterPort))), syntax: ElmSyntaxParserLenient_DeclarationAfterDocumentation.ElmSyntaxParserLenient_PortDeclarationAfterDocumentation(Generated_name_startLocation_typeAnnotation.Record(name: nameNode, startLocation: Generated_column_row.Record(column: 1.0, row: generated_let_result_argument0_nameRange.start.row), typeAnnotation: typeAnnotationResult.syntax)))
                        }
                    }
                }
            }
        },
        ParserLenient_keywordFollowedBy("port", ElmSyntaxParserLenient_whitespaceAndComments),
        ElmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords,
        ElmSyntaxParserLenient_whitespaceAndComments,
        ParserLenient_symbolFollowedBy(":", ElmSyntaxParserLenient_whitespaceAndComments),
        ElmSyntaxParserLenient_type_
    )

public static let ElmSyntaxParserLenient_portDeclarationWithoutDocumentation: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>> =
    ParserLenient_map5(
        { (commentsAfterPort: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
            { (nameNode: ElmSyntaxNode_Node<String>) in
                { (commentsAfterName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                    { (commentsAfterColon: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                        { (typeAnnotationResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in
                            let generated_let_result_argument0_nameRange: ElmSyntaxRange_Range
                            switch nameNode {
                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_nameRange, _):
                                generated_let_result_argument0_nameRange =
                                    generated_destructured_nameRange
                            }
                            let generated_let_result_argument0_typeRange: ElmSyntaxRange_Range
                            switch typeAnnotationResult.syntax {
                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_typeRange, _):
                                generated_let_result_argument0_typeRange =
                                    generated_destructured_typeRange
                            }
                            return Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(typeAnnotationResult.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterColon, ElmSyntaxParserLenient_ropePrependTo(commentsAfterName, commentsAfterPort))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_result_argument0_typeRange.end, start: Generated_column_row.Record(column: 1.0, row: generated_let_result_argument0_nameRange.start.row)), ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_PortDeclaration(Generated_name_typeAnnotation.Record(name: nameNode, typeAnnotation: typeAnnotationResult.syntax))))
                        }
                    }
                }
            }
        },
        ParserLenient_keywordFollowedBy("port", ElmSyntaxParserLenient_whitespaceAndComments),
        ElmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords,
        ElmSyntaxParserLenient_whitespaceAndComments,
        ParserLenient_symbolFollowedBy(":", ElmSyntaxParserLenient_whitespaceAndComments),
        ElmSyntaxParserLenient_type_
    )

public static let ElmSyntaxParserLenient_portModuleDefinition: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxModule_Module>>> =
    ParserLenient_map5WithRange({ (range: ElmSyntaxRange_Range) in { (commentsAfterPort: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (commentsAfterModule: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (moduleNameNode: ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>) in { (commentsAfterModuleName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (exposingList: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(exposingList.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterModuleName, ElmSyntaxParserLenient_ropePrependTo(commentsAfterModule, commentsAfterPort))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxModule_Module.ElmSyntaxModule_PortModule(Generated_exposingList_moduleName.Record(exposingList: exposingList.syntax, moduleName: moduleNameNode)))) } } } } } }, ParserLenient_keywordFollowedBy("port", ElmSyntaxParserLenient_whitespaceAndComments), ParserLenient_keywordFollowedBy("module", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_moduleName, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_exposeDefinition)

public static let ElmSyntaxParserLenient_precedence1ApL: ElmSyntaxParserLenient_InfixOperatorInfo =
    ElmSyntaxParserLenient_infixRight(1.0, "<|")

public static let ElmSyntaxParserLenient_precedence1ApR: ElmSyntaxParserLenient_InfixOperatorInfo =
    ElmSyntaxParserLenient_infixLeft(1.0, "|>")

public static let ElmSyntaxParserLenient_precedence2Or: ElmSyntaxParserLenient_InfixOperatorInfo =
    ElmSyntaxParserLenient_infixRight(2.0, "||")

public static let ElmSyntaxParserLenient_precedence3And: ElmSyntaxParserLenient_InfixOperatorInfo =
    ElmSyntaxParserLenient_infixRight(3.0, "&&")

public static let ElmSyntaxParserLenient_precedence4Eq: ElmSyntaxParserLenient_InfixOperatorInfo =
    ElmSyntaxParserLenient_infixNonAssociative(4.0, "==")

public static let ElmSyntaxParserLenient_precedence4Ge: ElmSyntaxParserLenient_InfixOperatorInfo =
    ElmSyntaxParserLenient_infixNonAssociative(4.0, ">=")

public static let ElmSyntaxParserLenient_precedence4Gt: ElmSyntaxParserLenient_InfixOperatorInfo =
    ElmSyntaxParserLenient_infixNonAssociative(4.0, ">")

public static let ElmSyntaxParserLenient_precedence4Le: ElmSyntaxParserLenient_InfixOperatorInfo =
    ElmSyntaxParserLenient_infixNonAssociative(4.0, "<=")

public static let ElmSyntaxParserLenient_precedence4Lt: ElmSyntaxParserLenient_InfixOperatorInfo =
    ElmSyntaxParserLenient_infixNonAssociative(4.0, "<")

public static let ElmSyntaxParserLenient_precedence4Neq: ElmSyntaxParserLenient_InfixOperatorInfo =
    ElmSyntaxParserLenient_infixNonAssociative(4.0, "/=")

public static let ElmSyntaxParserLenient_precedence5Cons: ElmSyntaxParserLenient_InfixOperatorInfo =
    ElmSyntaxParserLenient_infixRight(5.0, "::")

public static let ElmSyntaxParserLenient_precedence5Keep: ElmSyntaxParserLenient_InfixOperatorInfo =
    ElmSyntaxParserLenient_infixLeft(5.0, "|=")

public static let ElmSyntaxParserLenient_precedence5append: ElmSyntaxParserLenient_InfixOperatorInfo =
    ElmSyntaxParserLenient_infixRight(5.0, "++")

public static let ElmSyntaxParserLenient_precedence6Add: ElmSyntaxParserLenient_InfixOperatorInfo =
    ElmSyntaxParserLenient_infixLeft(6.0, "+")

public static let ElmSyntaxParserLenient_precedence6Ignore: ElmSyntaxParserLenient_InfixOperatorInfo =
    ElmSyntaxParserLenient_infixLeft(6.0, "|.")

public static let ElmSyntaxParserLenient_precedence6Sub: ElmSyntaxParserLenient_InfixOperatorInfo =
    ElmSyntaxParserLenient_infixLeft(6.0, "-")

public static let ElmSyntaxParserLenient_precedence7Fdiv: ElmSyntaxParserLenient_InfixOperatorInfo =
    ElmSyntaxParserLenient_infixLeft(7.0, "/")

public static let ElmSyntaxParserLenient_precedence7Idiv: ElmSyntaxParserLenient_InfixOperatorInfo =
    ElmSyntaxParserLenient_infixLeft(7.0, "//")

public static let ElmSyntaxParserLenient_precedence7Mul: ElmSyntaxParserLenient_InfixOperatorInfo =
    ElmSyntaxParserLenient_infixLeft(7.0, "*")

public static let ElmSyntaxParserLenient_precedence7Slash: ElmSyntaxParserLenient_InfixOperatorInfo =
    ElmSyntaxParserLenient_infixRight(7.0, "</>")

public static let ElmSyntaxParserLenient_precedence8Pow: ElmSyntaxParserLenient_InfixOperatorInfo =
    ElmSyntaxParserLenient_infixRight(8.0, "^")

public static let ElmSyntaxParserLenient_precedence8QuestionMark: ElmSyntaxParserLenient_InfixOperatorInfo =
    ElmSyntaxParserLenient_infixLeft(8.0, "<?>")

public static let ElmSyntaxParserLenient_precedence9ComposeL: ElmSyntaxParserLenient_InfixOperatorInfo =
    ElmSyntaxParserLenient_infixLeft(9.0, "<<")

public static let ElmSyntaxParserLenient_precedence9ComposeR: ElmSyntaxParserLenient_InfixOperatorInfo =
    ElmSyntaxParserLenient_infixRight(9.0, ">>")

public static let ElmSyntaxParserLenient_qualifiedNameRefNode: ElmSyntaxParserLenient_Parser<ElmSyntaxNode_Node<ElmSyntaxPattern_QualifiedNameRef>> =
    ParserLenient_map2WithRange(
        { (range: ElmSyntaxRange_Range) in
            { (firstName: String) in
                { (after: Maybe_Maybe<Tuple<List_List<String>, String>>) in
                    let generated_localReturnResult_argument1_result_argument0: Generated_moduleName_name<List_List<String>, String> =
                        switch after {
                        case Maybe_Maybe.Maybe_Nothing:
                            Generated_moduleName_name.Record(moduleName: List_List.List_Empty, name: firstName)
                        case let Maybe_Maybe.Maybe_Just(Tuple.Tuple(qualificationAfter, unqualified)):
                            Generated_moduleName_name.Record(moduleName: List_cons(firstName, qualificationAfter), name: unqualified)
                        }
                    return ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, generated_localReturnResult_argument1_result_argument0)
                }
            }
        },
        ElmSyntaxParserLenient_nameUppercase,
        ElmSyntaxParserLenient_maybeDotNamesUppercaseTuple
    )

public static let ElmSyntaxParserLenient_qualifiedPatternWithConsumeArgs: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ParserLenient_map3(
        { (generated_argument0_0: ElmSyntaxNode_Node<ElmSyntaxPattern_QualifiedNameRef>) in
            { (afterStartName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                { (argsReverse: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>) in
                    let nameRange: ElmSyntaxRange_Range
                    let name: ElmSyntaxPattern_QualifiedNameRef
                    switch generated_argument0_0 {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_nameRange, generated_destructured_name):
                        nameRange =
                            generated_destructured_nameRange
                        name =
                            generated_destructured_name
                    }
                    let generated_let_result_argument0_range: ElmSyntaxRange_Range =
                        switch argsReverse.syntax {
                        case List_List.List_Empty:
                            nameRange
                        case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(lastArgRange, _), _):
                            Generated_end_start.Record(end: lastArgRange.end, start: nameRange.start)
                        }
                    return Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(argsReverse.comments, afterStartName), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_let_result_argument0_range, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_NamedPattern(name, List_reverse(argsReverse.syntax))))
                }
            }
        },
        ElmSyntaxParserLenient_qualifiedNameRefNode,
        ElmSyntaxParserLenient_whitespaceAndComments,
        ElmSyntaxParserLenient_manyWithCommentsReverse(ParserLenient_map2({ (arg: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in { (commentsAfterArg: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfterArg, arg.comments), syntax: arg.syntax) } }, ElmSyntaxParserLenient_patternNotSpaceSeparated, ElmSyntaxParserLenient_whitespaceAndComments))
    )

public static let ElmSyntaxParserLenient_qualifiedPatternWithoutConsumeArgs: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ParserLenient_map2WithRange(
        { (range: ElmSyntaxRange_Range) in
            { (firstName: String) in
                { (after: Maybe_Maybe<Tuple<List_List<String>, String>>) in
                    let generated_localReturnResult_argument0_argument1_syntax_result_argument0: Generated_moduleName_name<List_List<String>, String> =
                        switch after {
                        case Maybe_Maybe.Maybe_Nothing:
                            Generated_moduleName_name.Record(moduleName: List_List.List_Empty, name: firstName)
                        case let Maybe_Maybe.Maybe_Just(Tuple.Tuple(qualificationAfter, unqualified)):
                            Generated_moduleName_name.Record(moduleName: List_cons(firstName, qualificationAfter), name: unqualified)
                        }
                    return Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_NamedPattern(generated_localReturnResult_argument0_argument1_syntax_result_argument0, List_List.List_Empty)))
                }
            }
        },
        ElmSyntaxParserLenient_nameUppercase,
        ElmSyntaxParserLenient_maybeDotNamesUppercaseTuple
    )

public static let ElmSyntaxParserLenient_recordAccessFunctionExpressionMaybeApplied: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ElmSyntaxParserLenient_followedByMultiArgumentApplication(ElmSyntaxParserLenient_expressionRecordAccessFunction)

public static let ElmSyntaxParserLenient_recordContentsFollowedByCurlyEnd: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxExpression_Expression>> =
    ParserLenient_oneOf3(
        ParserLenient_map5(
            { (nameNode: ElmSyntaxNode_Node<String>) in
                { (commentsAfterName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                    { (afterNameBeforeFields: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxParserLenient_RecordFieldsOrUpdateAfterName>) in
                        { (tailFields: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_RecordSetter>>>) in
                            { (commentsBeforeClosingCurly: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                                let generated_localReturnResult_syntax_result_argument0_argument0: ElmSyntaxExpression_Expression =
                                    switch afterNameBeforeFields.syntax {
                                    case let ElmSyntaxParserLenient_RecordFieldsOrUpdateAfterName.ElmSyntaxParserLenient_RecordUpdateFirstSetter(firstField):
                                        ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordUpdateExpression(nameNode, List_cons(firstField, tailFields.syntax))
                                    case let ElmSyntaxParserLenient_RecordFieldsOrUpdateAfterName.ElmSyntaxParserLenient_FieldsFirstValue(firstFieldValue):
                                        ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordExpr(List_cons(ElmSyntaxNode_combine({ (generated_argument0_left_argument0_caseResult_case1_syntax_result_argument0_argument0_0: ElmSyntaxNode_Node<String>) in { (generated_argument0_left_argument0_caseResult_case1_syntax_result_argument0_argument0_1: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in Tuple_pair(generated_argument0_left_argument0_caseResult_case1_syntax_result_argument0_argument0_0, generated_argument0_left_argument0_caseResult_case1_syntax_result_argument0_argument0_1) } }, nameNode, firstFieldValue), tailFields.syntax))
                                    case ElmSyntaxParserLenient_RecordFieldsOrUpdateAfterName.ElmSyntaxParserLenient_FieldsFirstValuePunned(_):
                                        ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordExpr(List_cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(ElmSyntaxNode_range(nameNode), Tuple.Tuple(nameNode, ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: ElmSyntaxNode_range(nameNode).end, start: ElmSyntaxNode_range(nameNode).end), ElmSyntaxExpression_Expression.ElmSyntaxExpression_FunctionOrValue(List_List.List_Empty, ElmSyntaxNode_value(nameNode))))), tailFields.syntax))
                                    }
                                return Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsBeforeClosingCurly, ElmSyntaxParserLenient_ropePrependTo(tailFields.comments, ElmSyntaxParserLenient_ropePrependTo(afterNameBeforeFields.comments, commentsAfterName))), syntax: generated_localReturnResult_syntax_result_argument0_argument0)
                            }
                        }
                    }
                }
            },
            ElmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords,
            ElmSyntaxParserLenient_whitespaceAndComments,
            ParserLenient_oneOf2(
                ParserLenient_symbolFollowedBy("|", ParserLenient_map2({ (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (setterResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_RecordSetter>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(setterResult.comments, commentsBefore), syntax: ElmSyntaxParserLenient_RecordFieldsOrUpdateAfterName.ElmSyntaxParserLenient_RecordUpdateFirstSetter(setterResult.syntax)) } }, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_recordSetterNodeFollowedByWhitespaceAndComments)),
                ParserLenient_map2(
                    { (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                        { (maybeValueResult: Maybe_Maybe<Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>) in
                            switch maybeValueResult {
                            case Maybe_Maybe.Maybe_Nothing:
                                Generated_comments_syntax.Record(comments: commentsBefore, syntax: ElmSyntaxParserLenient_fieldsFirstValuePunned)
                            case let Maybe_Maybe.Maybe_Just(expressionResult):
                                Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(expressionResult.comments, commentsBefore), syntax: ElmSyntaxParserLenient_RecordFieldsOrUpdateAfterName.ElmSyntaxParserLenient_FieldsFirstValue(expressionResult.syntax))
                            }
                        }
                    },
                    ParserLenient_oneOf2OrSucceed(ParserLenient_symbolFollowedBy(":", ElmSyntaxParserLenient_whitespaceAndComments), ParserLenient_symbolFollowedBy("=", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_ropeEmpty()),
                    ParserLenient_mapOrSucceed({ (generated_0_argument0_argument2_argument1_argument3_argument0: ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in Maybe_Maybe.Maybe_Just(generated_0_argument0_argument2_argument1_argument3_argument0) }, ElmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments, Maybe_Maybe.Maybe_Nothing)
                )
            ),
            ElmSyntaxParserLenient_recordFields,
            ParserLenient_followedBySymbol("}", ElmSyntaxParserLenient_whitespaceAndComments)
        ),
        ParserLenient_symbol("}", Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordExpr(List_List.List_Empty))),
        ParserLenient_map2({ (recordFieldsResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_RecordSetter>>>) in { (commentsAfterFields: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfterFields, recordFieldsResult.comments), syntax: ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordExpr(recordFieldsResult.syntax)) } }, ElmSyntaxParserLenient_recordFields, ParserLenient_followedBySymbol("}", ElmSyntaxParserLenient_whitespaceAndComments))
    )

public static let ElmSyntaxParserLenient_recordExpressionFollowedByRecordAccessMaybeApplied: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ElmSyntaxParserLenient_followedByMultiArgumentApplication(ElmSyntaxParserLenient_expressionRecordFollowedByRecordAccess)

public static let ElmSyntaxParserLenient_recordFields: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_RecordSetter>>>> =
    ElmSyntaxParserLenient_manyWithComments(ParserLenient_symbolFollowedBy(",", ParserLenient_map3({ (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (commentsWithExtraComma: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (setterResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_RecordSetter>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(setterResult.comments, ElmSyntaxParserLenient_ropePrependTo(commentsWithExtraComma, commentsBefore)), syntax: setterResult.syntax) } } }, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_orSucceed(ParserLenient_symbolFollowedBy(",", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_ropeEmpty()), ElmSyntaxParserLenient_recordSetterNodeFollowedByWhitespaceAndComments)))

public static let ElmSyntaxParserLenient_recordFieldsTypeAnnotation: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxTypeAnnotation_RecordDefinition>> =
    ParserLenient_map4({ (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (commentsWithExtraComma: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (head: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordField>>) in { (tail: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordField>>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(tail.comments, ElmSyntaxParserLenient_ropePrependTo(head.comments, ElmSyntaxParserLenient_ropePrependTo(commentsBefore, commentsWithExtraComma))), syntax: List_cons(head.syntax, tail.syntax)) } } } }, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_orSucceed(ParserLenient_symbolFollowedBy(",", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_ropeEmpty()), ElmSyntaxParserLenient_typeRecordFieldDefinitionFollowedByWhitespaceAndComments, ElmSyntaxParserLenient_manyWithComments(ParserLenient_symbolFollowedBy(",", ParserLenient_map3({ (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (commentsWithExtraComma: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (field: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordField>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(field.comments, ElmSyntaxParserLenient_ropePrependTo(commentsWithExtraComma, commentsBefore)), syntax: field.syntax) } } }, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_orSucceed(ParserLenient_symbolFollowedBy(",", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_ropeEmpty()), ElmSyntaxParserLenient_typeRecordFieldDefinitionFollowedByWhitespaceAndComments))))

public static let ElmSyntaxParserLenient_recordPattern: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ParserLenient_map2WithRange({ (range: ElmSyntaxRange_Range) in { (commentsBeforeElements: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (elements: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, List_List<ElmSyntaxNode_Node<String>>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(elements.comments, commentsBeforeElements), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_RecordPattern(elements.syntax))) } } }, ParserLenient_symbolFollowedBy("{", ElmSyntaxParserLenient_whitespaceAndComments), ParserLenient_oneOf2(ParserLenient_symbol("}", Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: List_List.List_Empty)), ParserLenient_followedBySymbol("}", ParserLenient_map4({ (commentsBeforeHead: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (head: ElmSyntaxNode_Node<String>) in { (commentsAfterHead: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (tail: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<String>>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(tail.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterHead, commentsBeforeHead)), syntax: List_cons(head, tail.syntax)) } } } }, ParserLenient_orSucceed(ParserLenient_symbolFollowedBy(",", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_ropeEmpty()), ElmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_manyWithComments(ParserLenient_symbolFollowedBy(",", ParserLenient_map4({ (commentsBeforeName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (commentsWithExtraComma: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (name: ElmSyntaxNode_Node<String>) in { (afterName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(afterName, ElmSyntaxParserLenient_ropePrependTo(commentsWithExtraComma, commentsBeforeName)), syntax: name) } } } }, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_orSucceed(ParserLenient_symbolFollowedBy(",", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_ropeEmpty()), ElmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords, ElmSyntaxParserLenient_whitespaceAndComments)))))))

public static let ElmSyntaxParserLenient_recordSetterNodeFollowedByWhitespaceAndComments: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_RecordSetter>>> =
    ParserLenient_map4WithRange(
        { (range: ElmSyntaxRange_Range) in
            { (nameNode: ElmSyntaxNode_Node<String>) in
                { (commentsAfterName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                    { (commentsAfterEquals: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                        { (maybeValueResult: Maybe_Maybe<Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>) in
                            switch maybeValueResult {
                            case Maybe_Maybe.Maybe_Nothing:
                                Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfterEquals, commentsAfterName), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, Tuple.Tuple(nameNode, ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: ElmSyntaxNode_range(nameNode).end, start: ElmSyntaxNode_range(nameNode).end), ElmSyntaxExpression_Expression.ElmSyntaxExpression_FunctionOrValue(List_List.List_Empty, ElmSyntaxNode_value(nameNode))))))
                            case let Maybe_Maybe.Maybe_Just(expressionResult):
                                Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(expressionResult.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterEquals, commentsAfterName)), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, Tuple.Tuple(nameNode, expressionResult.syntax)))
                            }
                        }
                    }
                }
            }
        },
        ElmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords,
        ElmSyntaxParserLenient_whitespaceAndComments,
        ParserLenient_oneOf2OrSucceed(ParserLenient_symbolFollowedBy(":", ElmSyntaxParserLenient_whitespaceAndComments), ParserLenient_symbolFollowedBy("=", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_ropeEmpty()),
        ParserLenient_mapOrSucceed({ (generated_0_argument0_argument4: ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in Maybe_Maybe.Maybe_Just(generated_0_argument0_argument4) }, ElmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments, Maybe_Maybe.Maybe_Nothing)
    )

public static let ElmSyntaxParserLenient_referenceOrNumberExpression: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserLenient_oneOf3(ElmSyntaxParserLenient_expressionQualifiedOrVariantOrRecordConstructorReferenceFollowedByRecordAccess, ElmSyntaxParserLenient_expressionUnqualifiedFunctionReferenceFollowedByRecordAccess, ElmSyntaxParserLenient_expressionNumber)

public static let ElmSyntaxParserLenient_referenceOrNumberExpressionMaybeApplied: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserLenient_oneOf3(ElmSyntaxParserLenient_followedByMultiArgumentApplication(ElmSyntaxParserLenient_expressionQualifiedOrVariantOrRecordConstructorReferenceFollowedByRecordAccess), ElmSyntaxParserLenient_followedByMultiArgumentApplication(ElmSyntaxParserLenient_expressionUnqualifiedFunctionReferenceFollowedByRecordAccess), ElmSyntaxParserLenient_followedByOptimisticLayout(ElmSyntaxParserLenient_expressionNumber))

public static let ElmSyntaxParserLenient_singleLineComment: ElmSyntaxParserLenient_Parser<ElmSyntaxNode_Node<String>> =
    ParserLenient_symbolFollowedBy(
        "--",
        ParserLenient_whileMapWithRange(
            { (c: UnicodeScalar) in
                switch c {
                case "\r":
                    false
                case "\n":
                    false
                case _:
                    Basics_not(CharExtra_isUtf16Surrogate(c))
                }
            },
            { (range: Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) in { (content: String) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: Generated_column_row.Record(column: range.end.column, row: range.start.row), start: Generated_column_row.Record(column: Basics_sub(range.start.column, 2.0), row: range.start.row)), String_append("--", content)) } }
        )
    )

public static let ElmSyntaxParserLenient_singleQuotedStringLiteralAfterDoubleQuote: ElmSyntaxParserLenient_Parser<String> =
    ParserLenient_loopUntil(
        ParserLenient_symbol("\"", Unit.Unit),
        ParserLenient_oneOf2(
            ParserLenient_whileAtLeast1WithoutLinebreak(
                { (c: UnicodeScalar) in
                    switch c {
                    case "\"":
                        false
                    case "\\":
                        false
                    case _:
                        Basics_not(CharExtra_isUtf16Surrogate(c))
                    }
                }
            ),
            ParserLenient_symbolFollowedBy("\\", ElmSyntaxParserLenient_escapedCharValueMap(String_fromChar))
        ),
        "",
        { (extension_: String) in { (soFar: String) in String_append(soFar, extension_) } },
        Basics_identity
    )

public static let ElmSyntaxParserLenient_stringPattern: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ElmSyntaxParserLenient_singleOrTripleQuotedStringLiteralMapWithRange({ (range: ElmSyntaxRange_Range) in { (string: String) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_StringPattern(string))) } })

public static let ElmSyntaxParserLenient_subExpression: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserLenient_offsetSourceAndThen(
        { (offset: Double) in
            { (source: String) in
                switch String_slice(offset, Basics_add(offset, 1.0), source) {
                case "\"":
                    ElmSyntaxParserLenient_expressionString
                case "(":
                    ElmSyntaxParserLenient_expressionStartingWithParensOpeningIfNecessaryFollowedByRecordAccess
                case "[":
                    ElmSyntaxParserLenient_expressionListOrGlsl
                case "{":
                    ElmSyntaxParserLenient_expressionRecordFollowedByRecordAccess
                case ".":
                    ElmSyntaxParserLenient_expressionRecordAccessFunction
                case "-":
                    ElmSyntaxParserLenient_expressionNegation
                case "'":
                    ElmSyntaxParserLenient_expressionChar
                case _:
                    ElmSyntaxParserLenient_referenceOrNumberExpression
                }
            }
        }
    )

public static let ElmSyntaxParserLenient_subExpressionMaybeAppliedFollowedByWhitespaceAndComments: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ParserLenient_offsetSourceAndThen(
        { (offset: Double) in
            { (source: String) in
                switch String_slice(offset, Basics_add(offset, 1.0), source) {
                case "\"":
                    ElmSyntaxParserLenient_literalExpressionOptimisticLayout
                case "(":
                    ElmSyntaxParserLenient_tupledExpressionIfNecessaryFollowedByRecordAccessMaybeApplied
                case "[":
                    ElmSyntaxParserLenient_listOrGlslExpressionOptimisticLayout
                case "{":
                    ElmSyntaxParserLenient_recordExpressionFollowedByRecordAccessMaybeApplied
                case "c":
                    ElmSyntaxParserLenient_caseOrUnqualifiedReferenceExpressionMaybeApplied
                case "\\":
                    ElmSyntaxParserLenient_expressionLambdaFollowedByWhitespaceAndComments
                case "l":
                    ElmSyntaxParserLenient_letOrUnqualifiedReferenceExpressionMaybeApplied
                case "i":
                    ElmSyntaxParserLenient_ifOrUnqualifiedReferenceExpressionMaybeApplied
                case ".":
                    ElmSyntaxParserLenient_recordAccessFunctionExpressionMaybeApplied
                case "-":
                    ElmSyntaxParserLenient_negationOperationOptimisticLayout
                case "'":
                    ElmSyntaxParserLenient_charLiteralExpressionOptimisticLayout
                case _:
                    ElmSyntaxParserLenient_referenceOrNumberExpressionMaybeApplied
                }
            }
        }
    )

public static let ElmSyntaxParserLenient_tripleQuotedStringLiteralOfterTripleDoubleQuote: ElmSyntaxParserLenient_Parser<String> =
    ParserLenient_loopUntil(
        ParserLenient_symbol("\"\"\"", Unit.Unit),
        ParserLenient_oneOf3(
            ParserLenient_symbol("\"", "\""),
            ParserLenient_symbolFollowedBy("\\", ElmSyntaxParserLenient_escapedCharValueMap(String_fromChar)),
            ParserLenient_while(
                { (c: UnicodeScalar) in
                    switch c {
                    case "\"":
                        false
                    case "\\":
                        false
                    case _:
                        Basics_not(CharExtra_isUtf16Surrogate(c))
                    }
                }
            )
        ),
        "",
        { (extension_: String) in { (soFar: String) in String_append(soFar, extension_) } },
        Basics_identity
    )

public static let ElmSyntaxParserLenient_tupledExpressionIfNecessaryFollowedByRecordAccessMaybeApplied: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
    ElmSyntaxParserLenient_followedByMultiArgumentApplication(ElmSyntaxParserLenient_expressionStartingWithParensOpeningIfNecessaryFollowedByRecordAccess)

public static let ElmSyntaxParserLenient_typeAliasDefinitionAfterDocumentationAfterTypePrefix: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_DeclarationAfterDocumentation>> =
    ParserLenient_map6({ (commentsAfterAlias: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (name: ElmSyntaxNode_Node<String>) in { (commentsAfterName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (parameters: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<String>>>) in { (commentsAfterEquals: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (typeAnnotationResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(typeAnnotationResult.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterEquals, ElmSyntaxParserLenient_ropePrependTo(parameters.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterName, commentsAfterAlias)))), syntax: ElmSyntaxParserLenient_DeclarationAfterDocumentation.ElmSyntaxParserLenient_TypeAliasDeclarationAfterDocumentation(Generated_name_parameters_typeAnnotation.Record(name: name, parameters: parameters.syntax, typeAnnotation: typeAnnotationResult.syntax))) } } } } } }, ParserLenient_keywordFollowedBy("alias", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_nameUppercaseNode, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_typeGenericListEquals, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_type_)

public static let ElmSyntaxParserLenient_typeAliasDefinitionWithoutDocumentationAfterTypePrefix: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_TypeOrTypeAliasDeclarationWithoutDocumentation>> =
    ParserLenient_map6({ (commentsAfterAlias: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (name: ElmSyntaxNode_Node<String>) in { (commentsAfterName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (parameters: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<String>>>) in { (commentsAfterEqual: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (typeAnnotationResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(typeAnnotationResult.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, ElmSyntaxParserLenient_ropePrependTo(parameters.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterName, commentsAfterAlias)))), syntax: ElmSyntaxParserLenient_TypeOrTypeAliasDeclarationWithoutDocumentation.ElmSyntaxParserLenient_TypeAliasDeclarationWithoutDocumentation(Generated_name_parameters_typeAnnotation.Record(name: name, parameters: parameters.syntax, typeAnnotation: typeAnnotationResult.syntax))) } } } } } }, ParserLenient_keywordFollowedBy("alias", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_nameUppercaseNode, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_typeGenericListEquals, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_type_)

public static let ElmSyntaxParserLenient_typeConstructWithArgumentsFollowedByWhitespaceAndComments: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>> =
    ParserLenient_map3(
        { (nameNode: ElmSyntaxNode_Node<Tuple<ElmSyntaxModuleName_ModuleName, String>>) in
            { (commentsAfterName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                { (argsReverse: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>>) in
                    let generated_let_result_argument0_nameRange: ElmSyntaxRange_Range
                    switch nameNode {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_nameRange, _):
                        generated_let_result_argument0_nameRange =
                            generated_destructured_nameRange
                    }
                    let generated_let_result_argument0_range: ElmSyntaxRange_Range =
                        switch argsReverse.syntax {
                        case List_List.List_Empty:
                            generated_let_result_argument0_nameRange
                        case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(lastArgRange, _), _):
                            Generated_end_start.Record(end: lastArgRange.end, start: generated_let_result_argument0_nameRange.start)
                        }
                    return Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(argsReverse.comments, commentsAfterName), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_let_result_argument0_range, ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Typed(nameNode, List_reverse(argsReverse.syntax))))
                }
            }
        },
        ParserLenient_map2WithRange(
            { (range: ElmSyntaxRange_Range) in
                { (startName: String) in
                    { (afterStartName: Maybe_Maybe<Tuple<List_List<String>, String>>) in
                        let generated_let_result_argument0_argument1_name: Tuple<ElmSyntaxModuleName_ModuleName, String> =
                            switch afterStartName {
                            case Maybe_Maybe.Maybe_Nothing:
                                Tuple.Tuple(List_List.List_Empty, startName)
                            case let Maybe_Maybe.Maybe_Just(Tuple.Tuple(qualificationAfterStartName, unqualified)):
                                Tuple.Tuple(List_cons(startName, qualificationAfterStartName), unqualified)
                            }
                        return ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, generated_let_result_argument0_argument1_name)
                    }
                }
            },
            ElmSyntaxParserLenient_nameUppercase,
            ElmSyntaxParserLenient_maybeDotNamesUppercaseTuple
        ),
        ElmSyntaxParserLenient_whitespaceAndComments,
        ElmSyntaxParserLenient_manyWithCommentsReverse(ElmSyntaxParserLenient_positivelyIndentedFollowedBy(ParserLenient_map2({ (typeAnnotationResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in { (commentsAfter: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfter, typeAnnotationResult.comments), syntax: typeAnnotationResult.syntax) } }, ElmSyntaxParserLenient_typeNotSpaceSeparated, ElmSyntaxParserLenient_whitespaceAndComments)))
    )

public static let ElmSyntaxParserLenient_typeConstructWithoutArguments: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>> =
    ParserLenient_map2WithRange(
        { (range: ElmSyntaxRange_Range) in
            { (startName: String) in
                { (afterStartName: Maybe_Maybe<Tuple<List_List<String>, String>>) in
                    let generated_let_result_argument0_name: Tuple<ElmSyntaxModuleName_ModuleName, String> =
                        switch afterStartName {
                        case Maybe_Maybe.Maybe_Nothing:
                            Tuple.Tuple(List_List.List_Empty, startName)
                        case let Maybe_Maybe.Maybe_Just(Tuple.Tuple(qualificationAfterStartName, unqualified)):
                            Tuple.Tuple(List_cons(startName, qualificationAfterStartName), unqualified)
                        }
                    return Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Typed(ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, generated_let_result_argument0_name), List_List.List_Empty)))
                }
            }
        },
        ElmSyntaxParserLenient_nameUppercase,
        ElmSyntaxParserLenient_maybeDotNamesUppercaseTuple
    )

public static let ElmSyntaxParserLenient_typeExpose: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>> =
    ParserLenient_map3(
        { (generated_argument0_0: ElmSyntaxNode_Node<String>) in
            { (commentsBeforeMaybeOpen: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                { (maybeOpen: Maybe_Maybe<Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location>>>) in
                    let typeNameRange: ElmSyntaxRange_Range
                    let typeExposeName: String
                    switch generated_argument0_0 {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_typeNameRange, generated_destructured_typeExposeName):
                        typeNameRange =
                            generated_destructured_typeNameRange
                        typeExposeName =
                            generated_destructured_typeExposeName
                    }
                    return
                        switch maybeOpen {
                        case Maybe_Maybe.Maybe_Nothing:
                            Generated_comments_syntax.Record(comments: commentsBeforeMaybeOpen, syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(typeNameRange, ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeOrAliasExpose(typeExposeName)))
                        case let Maybe_Maybe.Maybe_Just(open_):
                            Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(open_.comments, commentsBeforeMaybeOpen), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: open_.syntax.end, start: typeNameRange.start), ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeExpose(Generated_name_open_.Record(name: typeExposeName, open_: Maybe_Maybe.Maybe_Just(open_.syntax)))))
                        }
                }
            }
        },
        ElmSyntaxParserLenient_nameUppercaseNode,
        ElmSyntaxParserLenient_whitespaceAndComments,
        ParserLenient_map2WithRangeOrSucceed({ (range: ElmSyntaxRange_Range) in { (left: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (right: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Maybe_Maybe.Maybe_Just(Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(right, left), syntax: range)) } } }, ParserLenient_symbolFollowedBy("(", ElmSyntaxParserLenient_whitespaceAndComments), ParserLenient_followedBySymbol(")", ParserLenient_oneOf2(ParserLenient_symbolFollowedBy("...", ElmSyntaxParserLenient_whitespaceAndComments), ParserLenient_symbolFollowedBy("..", ElmSyntaxParserLenient_whitespaceAndComments))), Maybe_Maybe.Maybe_Nothing)
    )

public static let ElmSyntaxParserLenient_typeGenericListEquals: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<List_List<ElmSyntaxNode_Node<String>>>> =
    ElmSyntaxParserLenient_untilWithComments(ParserLenient_symbol("=", Unit.Unit), ParserLenient_map2({ (name: ElmSyntaxNode_Node<String>) in { (commentsAfterName: ElmSyntaxParserLenient_Comments) in Generated_comments_syntax.Record(comments: commentsAfterName, syntax: name) } }, ElmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords, ElmSyntaxParserLenient_whitespaceAndComments))

public static let ElmSyntaxParserLenient_typeNotFunction: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>> =
    ParserLenient_oneOf4(ElmSyntaxParserLenient_typeParenthesizedOrTupleOrTriple, ElmSyntaxParserLenient_typeConstructWithArgumentsFollowedByWhitespaceAndComments, ElmSyntaxParserLenient_typeVariable, ElmSyntaxParserLenient_typeRecordOrRecordExtension)

public static let ElmSyntaxParserLenient_typeNotSpaceSeparated: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>> =
    ParserLenient_oneOf4(ElmSyntaxParserLenient_typeParenthesizedOrTupleOrTriple, ElmSyntaxParserLenient_typeConstructWithoutArguments, ElmSyntaxParserLenient_typeVariable, ElmSyntaxParserLenient_typeRecordOrRecordExtension)

public static let ElmSyntaxParserLenient_typeOrTypeAliasDefinitionAfterDocumentation: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_DeclarationAfterDocumentation>> =
    ParserLenient_map2({ (commentsAfterType: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (declarationAfterDocumentation: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxParserLenient_DeclarationAfterDocumentation>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(declarationAfterDocumentation.comments, commentsAfterType), syntax: declarationAfterDocumentation.syntax) } }, ParserLenient_keywordFollowedBy("type", ElmSyntaxParserLenient_whitespaceAndComments), ParserLenient_oneOf2(ElmSyntaxParserLenient_typeAliasDefinitionAfterDocumentationAfterTypePrefix, ElmSyntaxParserLenient_choiceTypeDefinitionAfterDocumentationAfterTypePrefix))

public static let ElmSyntaxParserLenient_typeOrTypeAliasDefinitionWithoutDocumentation: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>> =
    ParserLenient_map2WithStartLocation(
        { (start: ElmSyntaxRange_Location) in
            { (commentsAfterType: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                { (afterStart: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxParserLenient_TypeOrTypeAliasDeclarationWithoutDocumentation>) in
                    let generated_let_result_argument0_allComments: ElmSyntaxParserLenient_Comments =
                        ElmSyntaxParserLenient_ropePrependTo(afterStart.comments, commentsAfterType)
                    let generated_localReturnResult_letResult_result_argument0: Generated_comments_syntax<ElmSyntaxParserLenient_Comments, ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>
                    switch afterStart.syntax {
                    case let ElmSyntaxParserLenient_TypeOrTypeAliasDeclarationWithoutDocumentation.ElmSyntaxParserLenient_TypeDeclarationWithoutDocumentation(typeDeclarationAfterDocumentation):
                        let generated_localReturnResult_letDeclaration0_caseResult_case0_letResult_result_argument0: ElmSyntaxRange_Location
                        switch typeDeclarationAfterDocumentation.tailVariantsReverse {
                        case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, _), _):
                            generated_localReturnResult_letDeclaration0_caseResult_case0_letResult_result_argument0 =
                                range.end
                        case List_List.List_Empty:
                            let generated_let_caseResult_case1_letDeclaration0_caseResult_case0_letResult_result_argument0_headVariantRange: ElmSyntaxRange_Range
                            switch typeDeclarationAfterDocumentation.headVariant {
                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_headVariantRange, _):
                                generated_let_caseResult_case1_letDeclaration0_caseResult_case0_letResult_result_argument0_headVariantRange =
                                    generated_destructured_headVariantRange
                            }
                            generated_localReturnResult_letDeclaration0_caseResult_case0_letResult_result_argument0 =
                                generated_let_caseResult_case1_letDeclaration0_caseResult_case0_letResult_result_argument0_headVariantRange.end
                        }
                        let generated_let_caseResult_case0_letResult_result_argument0_end: ElmSyntaxRange_Location =
                            generated_localReturnResult_letDeclaration0_caseResult_case0_letResult_result_argument0
                        generated_localReturnResult_letResult_result_argument0 =
                            Generated_comments_syntax.Record(comments: generated_let_result_argument0_allComments, syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case0_letResult_result_argument0_end, start: start), ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_CustomTypeDeclaration(Generated_constructors_documentation_generics_name.Record(constructors: List_cons(typeDeclarationAfterDocumentation.headVariant, List_reverse(typeDeclarationAfterDocumentation.tailVariantsReverse)), documentation: Maybe_Maybe.Maybe_Nothing, generics: typeDeclarationAfterDocumentation.parameters, name: typeDeclarationAfterDocumentation.name))))
                    case let ElmSyntaxParserLenient_TypeOrTypeAliasDeclarationWithoutDocumentation.ElmSyntaxParserLenient_TypeAliasDeclarationWithoutDocumentation(typeAliasDeclarationAfterDocumentation):
                        let generated_let_caseResult_case1_letResult_result_argument0_typeAnnotationRange: ElmSyntaxRange_Range
                        switch typeAliasDeclarationAfterDocumentation.typeAnnotation {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_typeAnnotationRange, _):
                            generated_let_caseResult_case1_letResult_result_argument0_typeAnnotationRange =
                                generated_destructured_typeAnnotationRange
                        }
                        generated_localReturnResult_letResult_result_argument0 =
                            Generated_comments_syntax.Record(comments: generated_let_result_argument0_allComments, syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_caseResult_case1_letResult_result_argument0_typeAnnotationRange.end, start: start), ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_AliasDeclaration(Generated_documentation_generics_name_typeAnnotation.Record(documentation: Maybe_Maybe.Maybe_Nothing, generics: typeAliasDeclarationAfterDocumentation.parameters, name: typeAliasDeclarationAfterDocumentation.name, typeAnnotation: typeAliasDeclarationAfterDocumentation.typeAnnotation))))
                    }
                    return generated_localReturnResult_letResult_result_argument0
                }
            }
        },
        ParserLenient_keywordFollowedBy("type", ElmSyntaxParserLenient_whitespaceAndComments),
        ParserLenient_oneOf2(ElmSyntaxParserLenient_typeAliasDefinitionWithoutDocumentationAfterTypePrefix, ElmSyntaxParserLenient_choiceTypeDefinitionWithoutDocumentationAfterTypePrefix)
    )

public static let ElmSyntaxParserLenient_typeParenthesizedOrTupleOrTriple: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>> =
    ParserLenient_symbolFollowedBy(
        "(",
        ParserLenient_oneOf2(
            ParserLenient_symbolWithEndLocation(")", { (end: Generated_column_row<Double, Double>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: end, start: Generated_column_row.Record(column: Basics_sub(end.column, 2.0), row: end.row)), ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Unit)) }),
            ParserLenient_map4WithRange(
                { (rangeAfterOpeningParens: Generated_end_start<ElmSyntaxRange_Location, Generated_column_row<Double, Double>>) in
                    { (commentsBeforeFirstPart: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                        { (firstPart: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in
                            { (commentsAfterFirstPart: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                                { (lastToSecondPart: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, Maybe_Maybe<Generated_maybeThirdPart_secondPart<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>>>) in
                                    let generated_localReturnResult_argument1_syntax_result_argument0_argument1_argument1: ElmSyntaxTypeAnnotation_TypeAnnotation
                                    switch lastToSecondPart.syntax {
                                    case Maybe_Maybe.Maybe_Nothing:
                                        let generated_let_caseResult_case0_argument1_syntax_result_argument0_argument1_argument1_firstPartType: ElmSyntaxTypeAnnotation_TypeAnnotation
                                        switch firstPart.syntax {
                                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_firstPartType):
                                            generated_let_caseResult_case0_argument1_syntax_result_argument0_argument1_argument1_firstPartType =
                                                generated_destructured_firstPartType
                                        }
                                        generated_localReturnResult_argument1_syntax_result_argument0_argument1_argument1 =
                                            generated_let_caseResult_case0_argument1_syntax_result_argument0_argument1_argument1_firstPartType
                                    case let Maybe_Maybe.Maybe_Just(firstAndMaybeThirdPart):
                                        generated_localReturnResult_argument1_syntax_result_argument0_argument1_argument1 =
                                            switch firstAndMaybeThirdPart.maybeThirdPart {
                                            case Maybe_Maybe.Maybe_Nothing:
                                                ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Tupled(
                                                    Array_toList(
                                                        [ firstPart.syntax,
                                                          firstAndMaybeThirdPart.secondPart
                                                        ]
                                                    )
                                                )
                                            case let Maybe_Maybe.Maybe_Just(thirdPart):
                                                ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Tupled(
                                                    Array_toList(
                                                        [ firstPart.syntax,
                                                          firstAndMaybeThirdPart.secondPart,
                                                          thirdPart
                                                        ]
                                                    )
                                                )
                                            }
                                    }
                                    return Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(lastToSecondPart.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterFirstPart, ElmSyntaxParserLenient_ropePrependTo(firstPart.comments, commentsBeforeFirstPart))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: rangeAfterOpeningParens.end, start: Generated_column_row.Record(column: Basics_sub(rangeAfterOpeningParens.start.column, 1.0), row: rangeAfterOpeningParens.start.row)), generated_localReturnResult_argument1_syntax_result_argument0_argument1_argument1))
                                }
                            }
                        }
                    }
                },
                ElmSyntaxParserLenient_whitespaceAndComments,
                ElmSyntaxParserLenient_type_,
                ElmSyntaxParserLenient_whitespaceAndComments,
                ParserLenient_oneOf2(ParserLenient_symbol(")", Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: Maybe_Maybe.Maybe_Nothing)), ParserLenient_symbolFollowedBy(",", ParserLenient_map4({ (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (secondPartResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in { (commentsAfter: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (maybeThirdPartResult: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfter, ElmSyntaxParserLenient_ropePrependTo(secondPartResult.comments, commentsBefore)), syntax: Maybe_Maybe.Maybe_Just(Generated_maybeThirdPart_secondPart.Record(maybeThirdPart: maybeThirdPartResult.syntax, secondPart: secondPartResult.syntax))) } } } }, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_type_, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_oneOf2(ParserLenient_symbol(")", Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: Maybe_Maybe.Maybe_Nothing)), ParserLenient_symbolFollowedBy(",", ParserLenient_followedBySymbol(")", ParserLenient_map3({ (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (thirdPartResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in { (commentsAfter: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfter, ElmSyntaxParserLenient_ropePrependTo(thirdPartResult.comments, commentsBefore)), syntax: Maybe_Maybe.Maybe_Just(thirdPartResult.syntax)) } } }, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_type_, ElmSyntaxParserLenient_whitespaceAndComments)))))))
            )
        )
    )

public static let ElmSyntaxParserLenient_typeRecordEmpty: ElmSyntaxTypeAnnotation_TypeAnnotation =
    ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Record(List_List.List_Empty)

public static let ElmSyntaxParserLenient_typeRecordFieldDefinitionFollowedByWhitespaceAndComments: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordField>>> =
    ParserLenient_map5WithRange({ (range: ElmSyntaxRange_Range) in { (name: ElmSyntaxNode_Node<String>) in { (commentsAfterName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (commentsAfterColon: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (value: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in { (commentsAfterValue: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfterValue, ElmSyntaxParserLenient_ropePrependTo(value.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterColon, commentsAfterName))), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, Tuple.Tuple(name, value.syntax))) } } } } } }, ElmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_oneOf2OrSucceed(ParserLenient_symbolFollowedBy(":", ElmSyntaxParserLenient_whitespaceAndComments), ParserLenient_symbolFollowedBy("=", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_ropeEmpty()), ElmSyntaxParserLenient_type_, ElmSyntaxParserLenient_whitespaceAndComments)

public static let ElmSyntaxParserLenient_typeRecordOrRecordExtension: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>> =
    ParserLenient_map2WithRange(
        { (range: ElmSyntaxRange_Range) in
            { (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                { (afterCurly: Maybe_Maybe<Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxTypeAnnotation_TypeAnnotation>>) in
                    switch afterCurly {
                    case Maybe_Maybe.Maybe_Nothing:
                        Generated_comments_syntax.Record(comments: commentsBefore, syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxParserLenient_typeRecordEmpty))
                    case let Maybe_Maybe.Maybe_Just(afterCurlyResult):
                        Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(afterCurlyResult.comments, commentsBefore), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, afterCurlyResult.syntax))
                    }
                }
            }
        },
        ParserLenient_symbolFollowedBy("{", ElmSyntaxParserLenient_whitespaceAndComments),
        ParserLenient_oneOf2(
            ParserLenient_symbol("}", Maybe_Maybe.Maybe_Nothing),
            ParserLenient_followedBySymbol(
                "}",
                ParserLenient_map4(
                    { (commentsBeforeFirstName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                        { (firstNameNode: ElmSyntaxNode_Node<String>) in
                            { (commentsAfterFirstName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                                { (afterFirstName: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxParserLenient_RecordFieldsOrExtensionAfterName>) in
                                    let generated_localReturnResult_syntax_argument0_result_argument0_left_argument1_argument2: ElmSyntaxTypeAnnotation_TypeAnnotation =
                                        switch afterFirstName.syntax {
                                        case let ElmSyntaxParserLenient_RecordFieldsOrExtensionAfterName.ElmSyntaxParserLenient_RecordExtensionExpressionAfterName(fields):
                                            ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_GenericRecord(firstNameNode, fields)
                                        case let ElmSyntaxParserLenient_RecordFieldsOrExtensionAfterName.ElmSyntaxParserLenient_FieldsAfterName(fieldsAfterName):
                                            ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Record(List_cons(ElmSyntaxNode_combine({ (generated_argument0_left_argument0_caseResult_case1_syntax_argument0_result_argument0_left_argument1_argument2_0: ElmSyntaxNode_Node<String>) in { (generated_argument0_left_argument0_caseResult_case1_syntax_argument0_result_argument0_left_argument1_argument2_1: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in Tuple_pair(generated_argument0_left_argument0_caseResult_case1_syntax_argument0_result_argument0_left_argument1_argument2_0, generated_argument0_left_argument0_caseResult_case1_syntax_argument0_result_argument0_left_argument1_argument2_1) } }, firstNameNode, fieldsAfterName.firstFieldValue), fieldsAfterName.tailFields))
                                        }
                                    return Maybe_Maybe.Maybe_Just(Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(afterFirstName.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterFirstName, commentsBeforeFirstName)), syntax: generated_localReturnResult_syntax_argument0_result_argument0_left_argument1_argument2))
                                }
                            }
                        }
                    },
                    ParserLenient_orSucceed(ParserLenient_symbolFollowedBy(",", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_ropeEmpty()),
                    ElmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords,
                    ElmSyntaxParserLenient_whitespaceAndComments,
                    ParserLenient_oneOf2(ParserLenient_symbolFollowedBy("|", ParserLenient_map3WithRange({ (range: ElmSyntaxRange_Range) in { (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (head: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordField>>) in { (tail: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordField>>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(tail.comments, ElmSyntaxParserLenient_ropePrependTo(head.comments, commentsBefore)), syntax: ElmSyntaxParserLenient_RecordFieldsOrExtensionAfterName.ElmSyntaxParserLenient_RecordExtensionExpressionAfterName(ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, List_cons(head.syntax, tail.syntax)))) } } } }, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_typeRecordFieldDefinitionFollowedByWhitespaceAndComments, ElmSyntaxParserLenient_manyWithComments(ParserLenient_symbolFollowedBy(",", ParserLenient_map3({ (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (commentsWithExtraComma: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (field: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordField>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(field.comments, ElmSyntaxParserLenient_ropePrependTo(commentsWithExtraComma, commentsBefore)), syntax: field.syntax) } } }, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_orSucceed(ParserLenient_symbolFollowedBy(",", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_ropeEmpty()), ElmSyntaxParserLenient_typeRecordFieldDefinitionFollowedByWhitespaceAndComments))))), ParserLenient_map4({ (commentsBeforeFirstFieldValue: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (firstFieldValue: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in { (commentsAfterFirstFieldValue: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (tailFields: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordField>>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(tailFields.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterFirstFieldValue, ElmSyntaxParserLenient_ropePrependTo(firstFieldValue.comments, commentsBeforeFirstFieldValue))), syntax: ElmSyntaxParserLenient_RecordFieldsOrExtensionAfterName.ElmSyntaxParserLenient_FieldsAfterName(Generated_firstFieldValue_tailFields.Record(firstFieldValue: firstFieldValue.syntax, tailFields: tailFields.syntax))) } } } }, ParserLenient_oneOf2OrSucceed(ParserLenient_symbolFollowedBy(":", ElmSyntaxParserLenient_whitespaceAndComments), ParserLenient_symbolFollowedBy("=", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_ropeEmpty()), ElmSyntaxParserLenient_type_, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_orSucceed(ParserLenient_symbolFollowedBy(",", ElmSyntaxParserLenient_recordFieldsTypeAnnotation), Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: List_List.List_Empty))))
                )
            )
        )
    )

public static let ElmSyntaxParserLenient_typeVariable: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>> =
    ElmSyntaxParserLenient_nameLowercaseMapWithRange({ (range: ElmSyntaxRange_Range) in { (var_: String) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_GenericType(var_))) } })

public static let ElmSyntaxParserLenient_type_: ElmSyntaxParserLenient_Parser<Generated_comments_syntax<ElmSyntaxParserLenient_Comments, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>> =
    ParserLenient_loopWhileSucceedsOntoResultFromParserRightToLeftStackUnsafe(
        ParserLenient_map2(
            { (startType: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in { (commentsAfter: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfter, startType.comments), syntax: startType.syntax) } },
            ParserLenient_lazy(
                { (generated_argument0_argument1_argument0_0: Unit) in
                    let (_) =
                        generated_argument0_argument1_argument0_0
                    return ElmSyntaxParserLenient_typeNotFunction
                }
            ),
            ElmSyntaxParserLenient_whitespaceAndComments
        ),
        ParserLenient_symbolFollowedBy(
            "->",
            ParserLenient_map4(
                { (commentsAfterArrow: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (commentsWithExtraArrow: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (typeAnnotationResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in { (commentsAfterType: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfterType, ElmSyntaxParserLenient_ropePrependTo(typeAnnotationResult.comments, ElmSyntaxParserLenient_ropePrependTo(commentsWithExtraArrow, commentsAfterArrow))), syntax: typeAnnotationResult.syntax) } } } },
                ElmSyntaxParserLenient_whitespaceAndComments,
                ParserLenient_orSucceed(ParserLenient_symbolFollowedBy("->", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_ropeEmpty()),
                ParserLenient_lazy(
                    { (generated_argument0_argument3_argument1_argument1_0: Unit) in
                        let (_) =
                            generated_argument0_argument3_argument1_argument1_0
                        return ElmSyntaxParserLenient_typeNotFunction
                    }
                ),
                ElmSyntaxParserLenient_whitespaceAndComments
            )
        ),
        { (inType: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in { (outType: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(outType.comments, inType.comments), syntax: ElmSyntaxNode_combine({ (generated_0_argument0_syntax_result_argument2: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in { (generated_1_argument0_syntax_result_argument2: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_FunctionTypeAnnotation(generated_0_argument0_syntax_result_argument2, generated_1_argument0_syntax_result_argument2) } }, inType.syntax, outType.syntax)) } }
    )

public static let ElmSyntaxParserLenient_varPattern: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
    ElmSyntaxParserLenient_nameLowercaseMapWithRange({ (range: ElmSyntaxRange_Range) in { (var_: String) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_VarPattern(var_))) } })

public static let ElmSyntaxParserLenient_variantDeclarationFollowedByWhitespaceAndComments: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>> =
    ParserLenient_map3(
        { (nameNode: ElmSyntaxNode_Node<String>) in
            { (commentsAfterName: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                { (argumentsReverse: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>>) in
                    let generated_let_result_argument0_nameRange: ElmSyntaxRange_Range
                    switch nameNode {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_nameRange, _):
                        generated_let_result_argument0_nameRange =
                            generated_destructured_nameRange
                    }
                    let generated_let_result_argument0_fullRange: ElmSyntaxRange_Range =
                        switch argumentsReverse.syntax {
                        case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(lastArgRange, _), _):
                            Generated_end_start.Record(end: lastArgRange.end, start: generated_let_result_argument0_nameRange.start)
                        case List_List.List_Empty:
                            generated_let_result_argument0_nameRange
                        }
                    return Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(argumentsReverse.comments, commentsAfterName), syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_let_result_argument0_fullRange, Generated_arguments_name.Record(arguments: List_reverse(argumentsReverse.syntax), name: nameNode)))
                }
            }
        },
        ElmSyntaxParserLenient_nameUppercaseNode,
        ElmSyntaxParserLenient_whitespaceAndComments,
        ElmSyntaxParserLenient_manyWithCommentsReverse(ElmSyntaxParserLenient_positivelyIndentedFollowedBy(ParserLenient_map2({ (typeAnnotationResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in { (commentsAfter: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfter, typeAnnotationResult.comments), syntax: typeAnnotationResult.syntax) } }, ElmSyntaxParserLenient_typeNotSpaceSeparated, ElmSyntaxParserLenient_whitespaceAndComments)))
    )

public static let ElmSyntaxParserLenient_whereBlock: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<Generated_command_subscription<Maybe_Maybe<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxNode_Node<String>>>>> =
    ParserLenient_followedBySymbol(
        "}",
        ParserLenient_symbolFollowedBy(
            "{",
            ParserLenient_map4(
                { (commentsBeforeHead: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                    { (head: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, Tuple<String, ElmSyntaxNode_Node<String>>>) in
                        { (commentsAfterHead: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                            { (tail: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<Tuple<String, ElmSyntaxNode_Node<String>>>>) in
                                let generated_let_result_argument0_argument1_left_pairs: List_List<Tuple<String, ElmSyntaxNode_Node<String>>> =
                                    List_cons(head.syntax, tail.syntax)
                                return
                                    Generated_comments_syntax.Record(
                                        comments: ElmSyntaxParserLenient_ropePrependTo(tail.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterHead, ElmSyntaxParserLenient_ropePrependTo(head.comments, commentsBeforeHead))),
                                        syntax:
                                            Generated_command_subscription.Record(
                                                command:
                                                    Maybe_map(
                                                        Tuple_second,
                                                        ElmSyntaxParserLenient_listFirstWhere(
                                                            { (generated_argument0_right_left_command_syntax_letResult_result_argument0_argument1_left_0: Tuple<String, ElmSyntaxNode_Node<String>>) in
                                                                let fnName: String
                                                                switch generated_argument0_right_left_command_syntax_letResult_result_argument0_argument1_left_0 {
                                                                case let Tuple.Tuple(generated_destructured_fnName, _):
                                                                    fnName =
                                                                        generated_destructured_fnName
                                                                }
                                                                return
                                                                    switch fnName {
                                                                    case "command":
                                                                        true
                                                                    case _:
                                                                        false
                                                                    }
                                                            },
                                                            generated_let_result_argument0_argument1_left_pairs
                                                        )
                                                    ),
                                                subscription:
                                                    Maybe_map(
                                                        Tuple_second,
                                                        ElmSyntaxParserLenient_listFirstWhere(
                                                            { (generated_argument0_right_left_subscription_syntax_letResult_result_argument0_argument1_left_0: Tuple<String, ElmSyntaxNode_Node<String>>) in
                                                                let fnName: String
                                                                switch generated_argument0_right_left_subscription_syntax_letResult_result_argument0_argument1_left_0 {
                                                                case let Tuple.Tuple(generated_destructured_fnName, _):
                                                                    fnName =
                                                                        generated_destructured_fnName
                                                                }
                                                                return
                                                                    switch fnName {
                                                                    case "subscription":
                                                                        true
                                                                    case _:
                                                                        false
                                                                    }
                                                            },
                                                            generated_let_result_argument0_argument1_left_pairs
                                                        )
                                                    )
                                            )
                                    )
                            }
                        }
                    }
                },
                ElmSyntaxParserLenient_whitespaceAndComments,
                ElmSyntaxParserLenient_effectWhereClause,
                ElmSyntaxParserLenient_whitespaceAndComments,
                ElmSyntaxParserLenient_manyWithComments(ParserLenient_symbolFollowedBy(",", ParserLenient_map3({ (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (v: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, Tuple<String, ElmSyntaxNode_Node<String>>>) in { (commentsAfter: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfter, ElmSyntaxParserLenient_ropePrependTo(v.comments, commentsBefore)), syntax: v.syntax) } } }, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_effectWhereClause, ElmSyntaxParserLenient_whitespaceAndComments)))
            )
        )
    )

public static let ElmSyntaxParserLenient_whitespaceAndComments: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_Comments> =
    ParserLenient_skipWhileWhitespaceBacktrackableFollowedBy(
        ParserLenient_offsetSourceAndThenOrSucceed(
            { (offset: Double) in
                { (source: String) in
                    switch String_slice(offset, Basics_add(offset, 2.0), source) {
                    case "--":
                        ElmSyntaxParserLenient_justFromSingleLineCommentNode
                    case "{-":
                        ElmSyntaxParserLenient_justFromMultilineCommentNodeOrEmptyOnProblem
                    case _:
                        Maybe_Maybe.Maybe_Nothing
                    }
                }
            },
            ElmSyntaxParserLenient_ropeEmpty()
        )
    )

public static let ElmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndented: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_Comments> =
    ElmSyntaxParserLenient_endsTopIndented(ElmSyntaxParserLenient_whitespaceAndComments)

public static let ElmSyntaxParserLenient_whitespaceAndCommentsOrEmptyLoop: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_Comments> =
    ParserLenient_loopWhileSucceeds(ParserLenient_followedBySkipWhileWhitespace(ParserLenient_oneOf2(ElmSyntaxParserLenient_singleLineComment, ElmSyntaxParserLenient_multiLineComment)), ElmSyntaxParserLenient_ropeEmpty(), { (right: ElmSyntaxNode_Node<String>) in { (soFar: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in ElmSyntaxParserLenient_ropePrependToFilled(ElmSyntaxParserLenient_ropeOne(right), soFar) } }, Basics_identity)

public static let ElmSyntaxPattern_decodeChar: JsonDecode_Decoder<UnicodeScalar> =
    JsonDecode_andThen(
        { (s: String) in
            switch String_uncons(s) {
            case let Maybe_Maybe.Maybe_Just(Tuple.Tuple(c, _)):
                JsonDecode_succeed(c)
            case Maybe_Maybe.Maybe_Nothing:
                JsonDecode_fail("Not a char")
            }
        },
        JsonDecode_string
    )

public static let ElmSyntaxPattern_decodeQualifiedNameRef: JsonDecode_Decoder<ElmSyntaxPattern_QualifiedNameRef> =
    JsonDecode_map2({ (generated_moduleName: List_List<String>) in { (generated_name: String) in Generated_moduleName_name.Record(moduleName: generated_moduleName, name: generated_name) } }, JsonDecode_field("moduleName", ElmSyntaxModuleName_decoder), JsonDecode_field("name", JsonDecode_string))

public static let ElmSyntaxPattern_decoder: JsonDecode_Decoder<ElmSyntaxPattern_Pattern> =
    JsonDecode_lazy(
        { (generated_argument0_0: Unit) in
            let (_) =
                generated_argument0_0
            return
                ElmJsonUtil_decodeTyped(
                    Array_toList(
                        [ Tuple.Tuple("all", JsonDecode_succeed(ElmSyntaxPattern_Pattern.ElmSyntaxPattern_AllPattern)),
                          Tuple.Tuple("unit", JsonDecode_succeed(ElmSyntaxPattern_Pattern.ElmSyntaxPattern_UnitPattern)),
                          Tuple.Tuple("char", JsonDecode_map({ (generated_0_argument0_right_part1_2_argument0_result_argument0: UnicodeScalar) in ElmSyntaxPattern_Pattern.ElmSyntaxPattern_CharPattern(generated_0_argument0_right_part1_2_argument0_result_argument0) }, JsonDecode_field("value", ElmSyntaxPattern_decodeChar))),
                          Tuple.Tuple("string", JsonDecode_map({ (generated_0_argument0_right_part1_3_argument0_result_argument0: String) in ElmSyntaxPattern_Pattern.ElmSyntaxPattern_StringPattern(generated_0_argument0_right_part1_3_argument0_result_argument0) }, JsonDecode_field("value", JsonDecode_string))),
                          Tuple.Tuple("hex", JsonDecode_map({ (generated_0_argument0_right_part1_4_argument0_result_argument0: Double) in ElmSyntaxPattern_Pattern.ElmSyntaxPattern_HexPattern(generated_0_argument0_right_part1_4_argument0_result_argument0) }, JsonDecode_int)),
                          Tuple.Tuple("int", JsonDecode_map({ (generated_0_argument0_right_part1_5_argument0_result_argument0: Double) in ElmSyntaxPattern_Pattern.ElmSyntaxPattern_IntPattern(generated_0_argument0_right_part1_5_argument0_result_argument0) }, JsonDecode_field("value", JsonDecode_int))),
                          Tuple.Tuple("float", JsonDecode_map({ (generated_0_argument0_right_part1_6_argument0_result_argument0: Double) in ElmSyntaxPattern_Pattern.ElmSyntaxPattern_FloatPattern(generated_0_argument0_right_part1_6_argument0_result_argument0) }, JsonDecode_field("value", JsonDecode_float))),
                          Tuple.Tuple("tuple", JsonDecode_map({ (generated_0_argument0_right_part1_7_argument0_result_argument0: List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in ElmSyntaxPattern_Pattern.ElmSyntaxPattern_TuplePattern(generated_0_argument0_right_part1_7_argument0_result_argument0) }, JsonDecode_field("value", JsonDecode_list(ElmSyntaxNode_decoder(ElmSyntaxPattern_decoder))))),
                          Tuple.Tuple("record", JsonDecode_map({ (generated_0_argument0_right_part1_8_argument0_result_argument0: List_List<ElmSyntaxNode_Node<String>>) in ElmSyntaxPattern_Pattern.ElmSyntaxPattern_RecordPattern(generated_0_argument0_right_part1_8_argument0_result_argument0) }, JsonDecode_field("value", JsonDecode_list(ElmSyntaxNode_decoder(JsonDecode_string))))),
                          Tuple.Tuple("uncons", JsonDecode_map2({ (generated_0_argument0_part1_9_argument0_result_argument0: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in { (generated_1_argument0_part1_9_argument0_result_argument0: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in ElmSyntaxPattern_Pattern.ElmSyntaxPattern_UnConsPattern(generated_0_argument0_part1_9_argument0_result_argument0, generated_1_argument0_part1_9_argument0_result_argument0) } }, JsonDecode_field("left", ElmSyntaxNode_decoder(ElmSyntaxPattern_decoder)), JsonDecode_field("right", ElmSyntaxNode_decoder(ElmSyntaxPattern_decoder)))),
                          Tuple.Tuple("list", JsonDecode_map({ (generated_0_argument0_right_part1_10_argument0_result_argument0: List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ListPattern(generated_0_argument0_right_part1_10_argument0_result_argument0) }, JsonDecode_field("value", JsonDecode_list(ElmSyntaxNode_decoder(ElmSyntaxPattern_decoder))))),
                          Tuple.Tuple("var", JsonDecode_map({ (generated_0_argument0_right_part1_11_argument0_result_argument0: String) in ElmSyntaxPattern_Pattern.ElmSyntaxPattern_VarPattern(generated_0_argument0_right_part1_11_argument0_result_argument0) }, JsonDecode_field("value", JsonDecode_string))),
                          Tuple.Tuple("named", JsonDecode_map2({ (generated_0_argument0_part1_12_argument0_result_argument0: ElmSyntaxPattern_QualifiedNameRef) in { (generated_1_argument0_part1_12_argument0_result_argument0: List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) in ElmSyntaxPattern_Pattern.ElmSyntaxPattern_NamedPattern(generated_0_argument0_part1_12_argument0_result_argument0, generated_1_argument0_part1_12_argument0_result_argument0) } }, JsonDecode_field("qualified", ElmSyntaxPattern_decodeQualifiedNameRef), JsonDecode_field("patterns", JsonDecode_list(ElmSyntaxNode_decoder(ElmSyntaxPattern_decoder))))),
                          Tuple.Tuple("as", JsonDecode_map2({ (generated_0_argument0_part1_13_argument0_result_argument0: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in { (generated_1_argument0_part1_13_argument0_result_argument0: ElmSyntaxNode_Node<String>) in ElmSyntaxPattern_Pattern.ElmSyntaxPattern_AsPattern(generated_0_argument0_part1_13_argument0_result_argument0, generated_1_argument0_part1_13_argument0_result_argument0) } }, JsonDecode_field("pattern", ElmSyntaxNode_decoder(ElmSyntaxPattern_decoder)), JsonDecode_field("name", ElmSyntaxNode_decoder(JsonDecode_string)))),
                          Tuple.Tuple("parentisized", JsonDecode_map({ (generated_0_argument0_part1_14_argument0_result_argument0: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ParenthesizedPattern(generated_0_argument0_part1_14_argument0_result_argument0) }, JsonDecode_field("value", ElmSyntaxNode_decoder(ElmSyntaxPattern_decoder))))
                        ]
                    )
                )
        }
    )

public static let ElmSyntaxPrintDefunctionalized_consecutiveDoubleQuoteCountResultStringEmpty: Generated_consecutiveDoubleQuoteCount_result<Double, String> =
    Generated_consecutiveDoubleQuoteCount_result.Record(consecutiveDoubleQuoteCount: 0.0, result: "")

public static let ElmSyntaxPrintDefunctionalized_linebreakFollowedByLinebreakFollowedByMinusCurlyBraceClosing: Print_Print =
    Print_followedBy(Print_exactly("-}"), Print_followedBy(Print_linebreak, Print_linebreak))

public static let ElmSyntaxPrintDefunctionalized_linebreakFollowedByMinusCurlyBraceClosing: Print_Print =
    Print_followedBy(Print_exactly("-}"), Print_linebreak)

public static let ElmSyntaxPrintDefunctionalized_moduleLevelMultiLneCommentWithoutWhitespace: Print_Print =
    Print_followedBy(Print_linebreak, Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyCurlyOpeningDotDotCurlyClosing, ElmSyntaxPrintDefunctionalized_printLinebreakLinebreak))

public static let ElmSyntaxPrintDefunctionalized_printDocumentationCommentEmpty: Print_Print =
    Print_exactly("{-| -}")

public static let ElmSyntaxPrintDefunctionalized_printEmptyLineSpreadSingleLine: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
    Generated_lineSpread_print.Record(lineSpread: Print_LineSpread.Print_SingleLine, print: Print_empty)

public static let ElmSyntaxPrintDefunctionalized_printEqualsLinebreakIndented: Print_Print =
    Print_followedBy(Print_linebreakIndented, ElmSyntaxPrintDefunctionalized_printExactlyEquals)

public static let ElmSyntaxPrintDefunctionalized_printExactImport: Print_Print =
    Print_exactly("import")

public static let ElmSyntaxPrintDefunctionalized_printExactlyAs: Print_Print =
    Print_exactly("as")

public static let ElmSyntaxPrintDefunctionalized_printExactlyBackSlash: Print_Print =
    Print_exactly("\\")

public static let ElmSyntaxPrintDefunctionalized_printExactlyCase: Print_Print =
    Print_exactly("case")

public static let ElmSyntaxPrintDefunctionalized_printExactlyColonColonSpace: Print_Print =
    Print_exactly(":: ")

public static let ElmSyntaxPrintDefunctionalized_printExactlyCommaSpace: Print_Print =
    Print_exactly(", ")

public static let ElmSyntaxPrintDefunctionalized_printExactlyCurlyBraceOpeningMinusVerticalBar: Print_Print =
    Print_exactly("{-| ")

public static let ElmSyntaxPrintDefunctionalized_printExactlyCurlyClosing: Print_Print =
    Print_exactly("}")

public static let ElmSyntaxPrintDefunctionalized_printExactlyCurlyOpening: Print_Print =
    Print_exactly("{")

public static let ElmSyntaxPrintDefunctionalized_printExactlyCurlyOpeningDotDotCurlyClosing: Print_Print =
    Print_exactly("{--}")

public static let ElmSyntaxPrintDefunctionalized_printExactlyCurlyOpeningMinus: Print_Print =
    Print_exactly("{-")

public static let ElmSyntaxPrintDefunctionalized_printExactlyCurlyOpeningSpace: Print_Print =
    Print_exactly("{ ")

public static let ElmSyntaxPrintDefunctionalized_printExactlyDoubleQuoteDoubleQuoteDoubleQuote: Print_Print =
    Print_exactly("\"\"\"")

public static let ElmSyntaxPrintDefunctionalized_printExactlyElse: Print_Print =
    Print_exactly("else")

public static let ElmSyntaxPrintDefunctionalized_printExactlyEquals: Print_Print =
    Print_exactly("=")

public static let ElmSyntaxPrintDefunctionalized_printExactlyEqualsSpace: Print_Print =
    Print_exactly("= ")

public static let ElmSyntaxPrintDefunctionalized_printExactlyExposing: Print_Print =
    Print_exactly("exposing")

public static let ElmSyntaxPrintDefunctionalized_printExactlyIf: Print_Print =
    Print_exactly("if")

public static let ElmSyntaxPrintDefunctionalized_printExactlyIn: Print_Print =
    Print_exactly("in")

public static let ElmSyntaxPrintDefunctionalized_printExactlyLessThanVerticalBar: Print_Print =
    Print_exactly("<|")

public static let ElmSyntaxPrintDefunctionalized_printExactlyLet: Print_Print =
    Print_exactly("let")

public static let ElmSyntaxPrintDefunctionalized_printExactlyMinus: Print_Print =
    Print_exactly("-")

public static let ElmSyntaxPrintDefunctionalized_printExactlyMinusCurlyClosing: Print_Print =
    Print_exactly("-}")

public static let ElmSyntaxPrintDefunctionalized_printExactlyMinusGreaterThan: Print_Print =
    Print_exactly("->")

public static let ElmSyntaxPrintDefunctionalized_printExactlyOf: Print_Print =
    Print_exactly("of")

public static let ElmSyntaxPrintDefunctionalized_printExactlyParensClosing: Print_Print =
    Print_exactly(")")

public static let ElmSyntaxPrintDefunctionalized_printExactlyParensOpening: Print_Print =
    Print_exactly("(")

public static let ElmSyntaxPrintDefunctionalized_printExactlyParensOpeningDotDotParensClosing: Print_Print =
    Print_exactly("(..)")

public static let ElmSyntaxPrintDefunctionalized_printExactlyParensOpeningParensClosed: Print_Print =
    Print_exactly("()")

public static let ElmSyntaxPrintDefunctionalized_printExactlyParensOpeningSpace: Print_Print =
    Print_exactly("( ")

public static let ElmSyntaxPrintDefunctionalized_printExactlyPortSpace: Print_Print =
    Print_exactly("port ")

public static let ElmSyntaxPrintDefunctionalized_printExactlySpace: Print_Print =
    Print_exactly(" ")

public static let ElmSyntaxPrintDefunctionalized_printExactlySpaceSpace: Print_Print =
    Print_exactly("  ")

public static let ElmSyntaxPrintDefunctionalized_printExactlySquareClosing: Print_Print =
    Print_exactly("]")

public static let ElmSyntaxPrintDefunctionalized_printExactlySquareOpening: Print_Print =
    Print_exactly("[")

public static let ElmSyntaxPrintDefunctionalized_printExactlySquareOpeningSpace: Print_Print =
    Print_exactly("[ ")

public static let ElmSyntaxPrintDefunctionalized_printExactlyThen: Print_Print =
    Print_exactly("then")

public static let ElmSyntaxPrintDefunctionalized_printExactlyType: Print_Print =
    Print_exactly("type")

public static let ElmSyntaxPrintDefunctionalized_printExactlyTypeSpaceAlias: Print_Print =
    Print_exactly("type alias")

public static let ElmSyntaxPrintDefunctionalized_printExactlyUnderscore: Print_Print =
    Print_exactly("_")

public static let ElmSyntaxPrintDefunctionalized_printExactlyVerticalBarSpace: Print_Print =
    Print_exactly("| ")

public static let ElmSyntaxPrintDefunctionalized_printExactlyZero: Print_Print =
    Print_exactly("0")

public static let ElmSyntaxPrintDefunctionalized_printExactlyZeroXZeroZero: Print_Print =
    Print_exactly("0x00")

public static let ElmSyntaxPrintDefunctionalized_printLinebreakIndentedAs: Print_Print =
    Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyAs, Print_linebreakIndented)

public static let ElmSyntaxPrintDefunctionalized_printLinebreakIndentedCommaSpace: Print_Print =
    Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyCommaSpace, Print_linebreakIndented)

public static let ElmSyntaxPrintDefunctionalized_printLinebreakIndentedExposing: Print_Print =
    Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyExposing, Print_linebreakIndented)

public static let ElmSyntaxPrintDefunctionalized_printLinebreakIndentedInLinebreakIndented: Print_Print =
    Print_followedBy(Print_linebreakIndented, Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyIn, Print_linebreakIndented))

public static let ElmSyntaxPrintDefunctionalized_printLinebreakIndentedVerticalBarSpace: Print_Print =
    Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyVerticalBarSpace, Print_linebreakIndented)

public static let ElmSyntaxPrintDefunctionalized_printLinebreakLinebreak: Print_Print =
    Print_followedBy(Print_linebreak, Print_linebreak)

public static let ElmSyntaxPrintDefunctionalized_printLinebreakLinebreakIndented: Print_Print =
    Print_followedBy(Print_linebreakIndented, Print_linebreak)

public static let ElmSyntaxPrintDefunctionalized_printLinebreakLinebreakLinebreak: Print_Print =
    Print_followedBy(Print_linebreak, Print_followedBy(Print_linebreak, Print_linebreak))

public static let ElmSyntaxPrintDefunctionalized_spaceCount0OnlySpacesTrue: Generated_onlySpaces_spaceCount<Bool, Double> =
    Generated_onlySpaces_spaceCount.Record(onlySpaces: true, spaceCount: 0.0)

public static let ElmSyntaxPrint_indent0: Generated_indent<Double> =
    Generated_indent.Record(indent: 0.0)

public static let ElmSyntaxRange_decoder: JsonDecode_Decoder<ElmSyntaxRange_Range> =
    JsonDecode_andThen(ElmSyntaxRange_fromList, JsonDecode_list(JsonDecode_int))

public static let ElmSyntaxRange_empty: ElmSyntaxRange_Range =
    Generated_end_start.Record(end: Generated_column_row.Record(column: 0.0, row: 0.0), start: Generated_column_row.Record(column: 0.0, row: 0.0))

public static let ElmSyntaxRange_emptyRange: ElmSyntaxRange_Range =
    ElmSyntaxRange_empty

public static let ElmSyntaxSignature_decoder: JsonDecode_Decoder<ElmSyntaxSignature_Signature> =
    JsonDecode_map2({ (generated_name: ElmSyntaxNode_Node<String>) in { (generated_typeAnnotation: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in Generated_name_typeAnnotation.Record(name: generated_name, typeAnnotation: generated_typeAnnotation) } }, JsonDecode_field("name", ElmSyntaxNode_decoder(JsonDecode_string)), JsonDecode_field("typeAnnotation", ElmSyntaxNode_decoder(ElmSyntaxTypeAnnotation_decoder)))

public static let ElmSyntaxTypeAlias_decoder: JsonDecode_Decoder<ElmSyntaxTypeAlias_TypeAlias> =
    JsonDecode_map4({ (generated_documentation: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>) in { (generated_name: ElmSyntaxNode_Node<String>) in { (generated_generics: List_List<ElmSyntaxNode_Node<String>>) in { (generated_typeAnnotation: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in Generated_documentation_generics_name_typeAnnotation.Record(documentation: generated_documentation, generics: generated_generics, name: generated_name, typeAnnotation: generated_typeAnnotation) } } } }, JsonDecode_field("documentation", JsonDecode_nullable(ElmSyntaxNode_decoder(ElmSyntaxDocumentation_decoder))), JsonDecode_field("name", ElmSyntaxNode_decoder(JsonDecode_string)), JsonDecode_field("generics", JsonDecode_list(ElmSyntaxNode_decoder(JsonDecode_string))), JsonDecode_field("typeAnnotation", ElmSyntaxNode_decoder(ElmSyntaxTypeAnnotation_decoder)))

public static let ElmSyntaxTypeAnnotation_decodeModuleNameAndName: JsonDecode_Decoder<Tuple<ElmSyntaxModuleName_ModuleName, String>> =
    JsonDecode_map2({ (generated_argument0_0: List_List<String>) in { (generated_argument0_1: String) in Tuple_pair(generated_argument0_0, generated_argument0_1) } }, JsonDecode_field("moduleName", ElmSyntaxModuleName_decoder), JsonDecode_field("name", JsonDecode_string))

public static let ElmSyntaxTypeAnnotation_decoder: JsonDecode_Decoder<ElmSyntaxTypeAnnotation_TypeAnnotation> =
    JsonDecode_lazy(
        { (generated_argument0_0: Unit) in
            let (_) =
                generated_argument0_0
            return
                ElmJsonUtil_decodeTyped(
                    Array_toList(
                        [ Tuple.Tuple("generic", JsonDecode_map({ (generated_0_argument0_part1_0_argument0_result_argument0: String) in ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_GenericType(generated_0_argument0_part1_0_argument0_result_argument0) }, JsonDecode_field("value", JsonDecode_string))),
                          Tuple.Tuple("typed", JsonDecode_map2({ (generated_0_argument0_part1_1_argument0_result_argument0: ElmSyntaxNode_Node<Tuple<ElmSyntaxModuleName_ModuleName, String>>) in { (generated_1_argument0_part1_1_argument0_result_argument0: List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Typed(generated_0_argument0_part1_1_argument0_result_argument0, generated_1_argument0_part1_1_argument0_result_argument0) } }, JsonDecode_field("moduleNameAndName", ElmSyntaxNode_decoder(ElmSyntaxTypeAnnotation_decodeModuleNameAndName)), JsonDecode_field("args", JsonDecode_list(ElmSyntaxTypeAnnotation_nestedDecoder)))),
                          Tuple.Tuple("unit", JsonDecode_succeed(ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Unit)),
                          Tuple.Tuple("tupled", JsonDecode_map({ (generated_0_argument0_part1_3_argument0_result_argument0: List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Tupled(generated_0_argument0_part1_3_argument0_result_argument0) }, JsonDecode_field("values", JsonDecode_list(ElmSyntaxTypeAnnotation_nestedDecoder)))),
                          Tuple.Tuple("function", JsonDecode_map2({ (generated_0_argument0_part1_4_argument0_result_argument0: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in { (generated_1_argument0_part1_4_argument0_result_argument0: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_FunctionTypeAnnotation(generated_0_argument0_part1_4_argument0_result_argument0, generated_1_argument0_part1_4_argument0_result_argument0) } }, JsonDecode_field("left", ElmSyntaxTypeAnnotation_nestedDecoder), JsonDecode_field("right", ElmSyntaxTypeAnnotation_nestedDecoder))),
                          Tuple.Tuple("record", JsonDecode_map({ (generated_0_argument0_part1_5_argument0_result_argument0: ElmSyntaxTypeAnnotation_RecordDefinition) in ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Record(generated_0_argument0_part1_5_argument0_result_argument0) }, JsonDecode_field("value", ElmSyntaxTypeAnnotation_recordDefinitionDecoder))),
                          Tuple.Tuple("genericRecord", JsonDecode_map2({ (generated_0_argument0_part1_6_argument0_result_argument0: ElmSyntaxNode_Node<String>) in { (generated_1_argument0_part1_6_argument0_result_argument0: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordDefinition>) in ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_GenericRecord(generated_0_argument0_part1_6_argument0_result_argument0, generated_1_argument0_part1_6_argument0_result_argument0) } }, JsonDecode_field("name", ElmSyntaxNode_decoder(JsonDecode_string)), JsonDecode_field("values", ElmSyntaxNode_decoder(ElmSyntaxTypeAnnotation_recordDefinitionDecoder))))
                        ]
                    )
                )
        }
    )

public static let ElmSyntaxTypeAnnotation_nestedDecoder: JsonDecode_Decoder<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>> =
    JsonDecode_lazy(
        { (generated_argument0_0: Unit) in
            let (_) =
                generated_argument0_0
            return ElmSyntaxNode_decoder(ElmSyntaxTypeAnnotation_decoder)
        }
    )

public static let ElmSyntaxTypeAnnotation_recordDefinitionDecoder: JsonDecode_Decoder<ElmSyntaxTypeAnnotation_RecordDefinition> =
    JsonDecode_lazy(
        { (generated_argument0_0: Unit) in
            let (_) =
                generated_argument0_0
            return JsonDecode_list(ElmSyntaxNode_decoder(ElmSyntaxTypeAnnotation_recordFieldDecoder))
        }
    )

public static let ElmSyntaxTypeAnnotation_recordFieldDecoder: JsonDecode_Decoder<ElmSyntaxTypeAnnotation_RecordField> =
    JsonDecode_lazy(
        { (generated_argument0_0: Unit) in
            let (_) =
                generated_argument0_0
            return JsonDecode_map2({ (generated_argument0_result_argument0_0: ElmSyntaxNode_Node<String>) in { (generated_argument0_result_argument0_1: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in Tuple_pair(generated_argument0_result_argument0_0, generated_argument0_result_argument0_1) } }, JsonDecode_field("name", ElmSyntaxNode_decoder(JsonDecode_string)), JsonDecode_field("typeAnnotation", ElmSyntaxTypeAnnotation_nestedDecoder))
        }
    )

public static let ElmSyntaxType_decoder: JsonDecode_Decoder<ElmSyntaxType_Type> =
    JsonDecode_map4({ (generated_documentation: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>) in { (generated_name: ElmSyntaxNode_Node<String>) in { (generated_generics: List_List<ElmSyntaxNode_Node<String>>) in { (generated_constructors: List_List<ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>) in Generated_constructors_documentation_generics_name.Record(constructors: generated_constructors, documentation: generated_documentation, generics: generated_generics, name: generated_name) } } } }, JsonDecode_field("documentation", JsonDecode_nullable(ElmSyntaxNode_decoder(JsonDecode_string))), JsonDecode_field("name", ElmSyntaxNode_decoder(JsonDecode_string)), JsonDecode_field("generics", JsonDecode_list(ElmSyntaxNode_decoder(JsonDecode_string))), JsonDecode_field("constructors", JsonDecode_list(ElmSyntaxNode_decoder(ElmSyntaxType_valueConstructorDecoder))))

public static let ElmSyntaxType_valueConstructorDecoder: JsonDecode_Decoder<ElmSyntaxType_ValueConstructor> =
    JsonDecode_map2({ (generated_name: ElmSyntaxNode_Node<String>) in { (generated_arguments: List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) in Generated_arguments_name.Record(arguments: generated_arguments, name: generated_name) } }, JsonDecode_field("name", ElmSyntaxNode_decoder(JsonDecode_string)), JsonDecode_field("arguments", JsonDecode_list(ElmSyntaxNode_decoder(ElmSyntaxTypeAnnotation_decoder))))

public static let ParserFast_anyChar: ParserFast_Parser<UnicodeScalar> =
    ParserFast_Parser.ParserFast_Parser(
        { (s: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
            let generated_let_result_argument0_newOffset: Double =
                ParserFast_charOrEnd(s.offset, s.src)
            return
                if Basics_eq(generated_let_result_argument0_newOffset, -1.0) {
                    ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingAnyChar(s.row, s.col))
                } else {
                    if Basics_eq(generated_let_result_argument0_newOffset, -2.0) {
                        ParserFast_PStep.ParserFast_Good("\n", Generated_col_indent_offset_row_src.Record(col: 1.0, indent: s.indent, offset: Basics_add(s.offset, 1.0), row: Basics_add(s.row, 1.0), src: s.src))
                    } else {
                        switch String_toList(String_slice(s.offset, generated_let_result_argument0_newOffset, s.src)) {
                        case List_List.List_Empty:
                            ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingAnyChar(s.row, s.col))
                        case let List_List.List_Cons(c, _):
                            ParserFast_PStep.ParserFast_Good(c, Generated_col_indent_offset_row_src.Record(col: Basics_add(s.col, 1.0), indent: s.indent, offset: generated_let_result_argument0_newOffset, row: s.row, src: s.src))
                        }
                    }
                }
        }
    )

public static let ParserFast_errorAsBaseOffsetAndInt: Generated_base_offsetAndInt<ParserFast_Base, Generated_int_offset<Double, Double>> =
    Generated_base_offsetAndInt.Record(base: ParserFast_Base.ParserFast_Decimal, offsetAndInt: Generated_int_offset.Record(int: 0.0, offset: -1.0))

public static let ParserFast_errorAsOffsetAndInt: Generated_int_offset<Double, Double> =
    Generated_int_offset.Record(int: 0.0, offset: -1.0)

public static let ParserLenient_anyChar: ParserLenient_Parser<UnicodeScalar> =
    ParserLenient_Parser.ParserLenient_Parser(
        { (s: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
            let generated_let_result_argument0_newOffset: Double =
                ParserLenient_charOrEnd(s.offset, s.src)
            return
                if Basics_eq(generated_let_result_argument0_newOffset, -1.0) {
                    ParserLenient_pStepBadBacktracking()
                } else {
                    if Basics_eq(generated_let_result_argument0_newOffset, -2.0) {
                        ParserLenient_PStep.ParserLenient_Good("\n", Generated_col_indent_offset_row_src.Record(col: 1.0, indent: s.indent, offset: Basics_add(s.offset, 1.0), row: Basics_add(s.row, 1.0), src: s.src))
                    } else {
                        switch String_toList(String_slice(s.offset, generated_let_result_argument0_newOffset, s.src)) {
                        case List_List.List_Empty:
                            ParserLenient_pStepBadBacktracking()
                        case let List_List.List_Cons(c, _):
                            ParserLenient_PStep.ParserLenient_Good(c, Generated_col_indent_offset_row_src.Record(col: Basics_add(s.col, 1.0), indent: s.indent, offset: generated_let_result_argument0_newOffset, row: s.row, src: s.src))
                        }
                    }
                }
        }
    )

public static let ParserLenient_errorAsBaseOffsetAndInt: Generated_base_offsetAndInt<ParserLenient_Base, Generated_int_offset<Double, Double>> =
    Generated_base_offsetAndInt.Record(base: ParserLenient_Base.ParserLenient_Decimal, offsetAndInt: Generated_int_offset.Record(int: 0.0, offset: -1.0))

public static let ParserLenient_errorAsOffsetAndInt: Generated_int_offset<Double, Double> =
    Generated_int_offset.Record(int: 0.0, offset: -1.0)

public static let ParserLenient_int0OffsetNegative1: Generated_int_offset<Double, Double> =
    Generated_int_offset.Record(int: 0.0, offset: -1.0)

public static let ParserLenient_length0StringEmpty: Generated_length_string<Double, String> =
    Generated_length_string.Record(length: 0.0, string: "")

public static let ParserLenient_tuple0StringEmpty: Tuple<Double, String> =
    Tuple.Tuple(0.0, "")

public static let ParserLenient_tupleStringEmpty1: Tuple<String, Double> =
    Tuple.Tuple("", 1.0)

public static let Parser_end: Parser_Parser<Unit> =
    ParserAdvanced_end(Parser_Problem.Parser_ExpectingEnd)

public static let Parser_float: Parser_Parser<Double> =
    ParserAdvanced_float(Parser_Problem.Parser_ExpectingFloat, Parser_Problem.Parser_ExpectingFloat)

public static let Parser_getCol: Parser_Parser<Double> =
    ParserAdvanced_getCol()

public static let Parser_getIndent: Parser_Parser<Double> =
    ParserAdvanced_getIndent()

public static let Parser_getOffset: Parser_Parser<Double> =
    ParserAdvanced_getOffset()

public static let Parser_getPosition: Parser_Parser<Tuple<Double, Double>> =
    ParserAdvanced_getPosition()

public static let Parser_getRow: Parser_Parser<Double> =
    ParserAdvanced_getRow()

public static let Parser_getSource: Parser_Parser<String> =
    ParserAdvanced_getSource()

public static let Parser_int: Parser_Parser<Double> =
    ParserAdvanced_int(Parser_Problem.Parser_ExpectingInt, Parser_Problem.Parser_ExpectingInt)

public static let Parser_spaces: Parser_Parser<Unit> =
    ParserAdvanced_spaces()

public static let Print_empty: Print_Print =
    Print_exactly("")

public static let Print_linebreak: Print_Print =
    Print_Print.Print_Linebreak(Unit.Unit, Unit.Unit)

public static let Print_linebreakIndented: Print_Print =
    Print_Print.Print_LinebreakIndented(Unit.Unit, Unit.Unit)

public static let Print_space: Print_Print =
    Print_exactly(" ")

public static let StructuredWriter_epsilon: StructuredWriter_Writer =
    StructuredWriter_Writer.StructuredWriter_Str("")

@Sendable public static func CharExtra_charCodeIsDigit(_ code: Double) ->  Bool {
    Basics_and(Basics_le(code, 57.0), Basics_le(48.0, code))
}

@Sendable public static func CharExtra_charCodeIsLower(_ code: Double) ->  Bool {
    Basics_and(Basics_le(97.0, code), Basics_le(code, 122.0))
}

@Sendable public static func CharExtra_charCodeIsUpper(_ code: Double) ->  Bool {
    Basics_and(Basics_le(code, 90.0), Basics_le(65.0, code))
}

@Sendable public static func CharExtra_isLatinAlphaNumOrUnderscoreFast(_ c: UnicodeScalar) ->  Bool {
    let generated_let_declarationResult_code: Double =
        Char_toCode(c)
    return Basics_or(CharExtra_charCodeIsLower(generated_let_declarationResult_code), Basics_or(CharExtra_charCodeIsUpper(generated_let_declarationResult_code), Basics_or(CharExtra_charCodeIsDigit(generated_let_declarationResult_code), Basics_eq(generated_let_declarationResult_code, 95.0))))
}

@Sendable public static func CharExtra_isUtf16Surrogate(_ c: UnicodeScalar) ->  Bool {
    Basics_isNaN(Basics_identity(Char_toCode(c)))
}

@Sendable public static func CharExtra_unicodeIsAlphaNumOrUnderscoreFast(_ c: UnicodeScalar) ->  Bool {
    let generated_let_declarationResult_code: Double =
        Char_toCode(c)
    let generated_localReturnResult_right_right_right_right_right_letResult_declarationResult: Bool =
        if Basics_lt(generated_let_declarationResult_code, 256.0) {
            Basics_or(Basics_and(Basics_le(48.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 57.0)), Basics_or(Basics_and(Basics_le(65.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 90.0)), Basics_or(Basics_and(Basics_le(97.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 122.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 170.0), Basics_or(Basics_and(Basics_le(178.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 179.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 181.0), Basics_or(Basics_and(Basics_le(185.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 186.0)), Basics_or(Basics_and(Basics_le(188.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 190.0)), Basics_or(Basics_and(Basics_le(192.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 214.0)), Basics_or(Basics_and(Basics_le(216.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 246.0)), Basics_and(Basics_le(248.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 255.0))))))))))))
        } else {
            if Basics_lt(generated_let_declarationResult_code, 43700.0) {
                if Basics_lt(generated_let_declarationResult_code, 4347.0) {
                    if Basics_lt(generated_let_declarationResult_code, 2868.0) {
                        if Basics_lt(generated_let_declarationResult_code, 2364.0) {
                            if Basics_lt(generated_let_declarationResult_code, 1648.0) {
                                if Basics_lt(generated_let_declarationResult_code, 930.0) {
                                    Basics_or(Basics_and(Basics_le(256.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 705.0)), Basics_or(Basics_and(Basics_le(710.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 721.0)), Basics_or(Basics_and(Basics_le(736.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 740.0)), Basics_or(Basics_and(Basics_le(880.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 884.0)), Basics_or(Basics_and(Basics_le(886.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 887.0)), Basics_or(Basics_and(Basics_le(890.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 893.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 895.0), Basics_or(Basics_eq(generated_let_declarationResult_code, 902.0), Basics_or(Basics_and(Basics_le(904.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 906.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 908.0), Basics_or(Basics_and(Basics_le(910.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 929.0)), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 0.0), Basics_and(Basics_le(748.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 750.0))))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(931.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 1013.0)), Basics_or(Basics_and(Basics_le(1015.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 1153.0)), Basics_or(Basics_and(Basics_le(1162.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 1327.0)), Basics_or(Basics_and(Basics_le(1329.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 1366.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 1369.0), Basics_or(Basics_and(Basics_le(1376.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 1416.0)), Basics_or(Basics_and(Basics_le(1488.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 1514.0)), Basics_or(Basics_and(Basics_le(1519.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 1522.0)), Basics_or(Basics_and(Basics_le(1568.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 1610.0)), Basics_or(Basics_and(Basics_le(1632.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 1641.0)), Basics_and(Basics_le(1646.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 1647.0))))))))))))
                                }
                            } else {
                                if Basics_lt(generated_let_declarationResult_code, 2041.0) {
                                    Basics_or(Basics_and(Basics_le(1649.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 1747.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 1749.0), Basics_or(Basics_and(Basics_le(1765.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 1766.0)), Basics_or(Basics_and(Basics_le(1774.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 1788.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 1791.0), Basics_or(Basics_eq(generated_let_declarationResult_code, 1808.0), Basics_or(Basics_and(Basics_le(1810.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 1839.0)), Basics_or(Basics_and(Basics_le(1869.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 1957.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 1969.0), Basics_or(Basics_and(Basics_le(1984.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2026.0)), Basics_and(Basics_le(2036.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2037.0))))))))))))
                                } else {
                                    Basics_or(Basics_eq(generated_let_declarationResult_code, 2042.0), Basics_or(Basics_and(Basics_le(2048.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2069.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 2074.0), Basics_or(Basics_eq(generated_let_declarationResult_code, 2084.0), Basics_or(Basics_eq(generated_let_declarationResult_code, 2088.0), Basics_or(Basics_and(Basics_le(2112.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2136.0)), Basics_or(Basics_and(Basics_le(2144.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2154.0)), Basics_or(Basics_and(Basics_le(2160.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2183.0)), Basics_or(Basics_and(Basics_le(2185.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2190.0)), Basics_or(Basics_and(Basics_le(2208.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2249.0)), Basics_and(Basics_le(2308.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2361.0))))))))))))
                                }
                            }
                        } else {
                            if Basics_lt(generated_let_declarationResult_code, 2609.0) {
                                if Basics_lt(generated_let_declarationResult_code, 2492.0) {
                                    Basics_or(Basics_eq(generated_let_declarationResult_code, 2365.0), Basics_or(Basics_eq(generated_let_declarationResult_code, 2384.0), Basics_or(Basics_and(Basics_le(2392.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2401.0)), Basics_or(Basics_and(Basics_le(2406.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2415.0)), Basics_or(Basics_and(Basics_le(2417.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2432.0)), Basics_or(Basics_and(Basics_le(2437.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2444.0)), Basics_or(Basics_and(Basics_le(2447.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2448.0)), Basics_or(Basics_and(Basics_le(2451.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2472.0)), Basics_or(Basics_and(Basics_le(2474.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2480.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 2482.0), Basics_and(Basics_le(2486.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2489.0))))))))))))
                                } else {
                                    Basics_or(Basics_eq(generated_let_declarationResult_code, 2493.0), Basics_or(Basics_eq(generated_let_declarationResult_code, 2510.0), Basics_or(Basics_and(Basics_le(2524.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2525.0)), Basics_or(Basics_and(Basics_le(2527.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2529.0)), Basics_or(Basics_and(Basics_le(2534.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2545.0)), Basics_or(Basics_and(Basics_le(2548.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2553.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 2556.0), Basics_or(Basics_and(Basics_le(2565.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2570.0)), Basics_or(Basics_and(Basics_le(2575.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2576.0)), Basics_or(Basics_and(Basics_le(2579.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2600.0)), Basics_and(Basics_le(2602.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2608.0))))))))))))
                                }
                            } else {
                                if Basics_lt(generated_let_declarationResult_code, 2737.0) {
                                    Basics_or(Basics_and(Basics_le(2610.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2611.0)), Basics_or(Basics_and(Basics_le(2613.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2614.0)), Basics_or(Basics_and(Basics_le(2616.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2617.0)), Basics_or(Basics_and(Basics_le(2649.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2652.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 2654.0), Basics_or(Basics_and(Basics_le(2662.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2671.0)), Basics_or(Basics_and(Basics_le(2674.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2676.0)), Basics_or(Basics_and(Basics_le(2693.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2701.0)), Basics_or(Basics_and(Basics_le(2703.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2705.0)), Basics_or(Basics_and(Basics_le(2707.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2728.0)), Basics_and(Basics_le(2730.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2736.0))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(2738.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2739.0)), Basics_or(Basics_and(Basics_le(2741.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2745.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 2749.0), Basics_or(Basics_eq(generated_let_declarationResult_code, 2768.0), Basics_or(Basics_and(Basics_le(2784.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2785.0)), Basics_or(Basics_and(Basics_le(2790.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2799.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 2809.0), Basics_or(Basics_and(Basics_le(2821.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2828.0)), Basics_or(Basics_and(Basics_le(2831.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2832.0)), Basics_or(Basics_and(Basics_le(2835.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2856.0)), Basics_or(Basics_and(Basics_le(2858.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2864.0)), Basics_and(Basics_le(2866.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2867.0)))))))))))))
                                }
                            }
                        }
                    } else {
                        if Basics_lt(generated_let_declarationResult_code, 3411.0) {
                            if Basics_lt(generated_let_declarationResult_code, 3132.0) {
                                if Basics_lt(generated_let_declarationResult_code, 2971.0) {
                                    Basics_or(Basics_and(Basics_le(2869.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2873.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 2877.0), Basics_or(Basics_and(Basics_le(2908.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2909.0)), Basics_or(Basics_and(Basics_le(2911.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2913.0)), Basics_or(Basics_and(Basics_le(2918.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2927.0)), Basics_or(Basics_and(Basics_le(2929.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2935.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 2947.0), Basics_or(Basics_and(Basics_le(2949.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2954.0)), Basics_or(Basics_and(Basics_le(2958.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2960.0)), Basics_or(Basics_and(Basics_le(2962.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2965.0)), Basics_and(Basics_le(2969.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2970.0))))))))))))
                                } else {
                                    Basics_or(Basics_eq(generated_let_declarationResult_code, 2972.0), Basics_or(Basics_and(Basics_le(2974.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2975.0)), Basics_or(Basics_and(Basics_le(2979.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2980.0)), Basics_or(Basics_and(Basics_le(2984.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 2986.0)), Basics_or(Basics_and(Basics_le(2990.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3001.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 3024.0), Basics_or(Basics_and(Basics_le(3046.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3058.0)), Basics_or(Basics_and(Basics_le(3077.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3084.0)), Basics_or(Basics_and(Basics_le(3086.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3088.0)), Basics_or(Basics_and(Basics_le(3090.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3112.0)), Basics_and(Basics_le(3114.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3129.0))))))))))))
                                }
                            } else {
                                if Basics_lt(generated_let_declarationResult_code, 3252.0) {
                                    Basics_or(Basics_eq(generated_let_declarationResult_code, 3133.0), Basics_or(Basics_and(Basics_le(3160.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3162.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 3165.0), Basics_or(Basics_and(Basics_le(3168.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3169.0)), Basics_or(Basics_and(Basics_le(3174.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3183.0)), Basics_or(Basics_and(Basics_le(3192.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3198.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 3200.0), Basics_or(Basics_and(Basics_le(3205.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3212.0)), Basics_or(Basics_and(Basics_le(3214.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3216.0)), Basics_or(Basics_and(Basics_le(3218.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3240.0)), Basics_and(Basics_le(3242.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3251.0))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(3253.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3257.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 3261.0), Basics_or(Basics_and(Basics_le(3293.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3294.0)), Basics_or(Basics_and(Basics_le(3296.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3297.0)), Basics_or(Basics_and(Basics_le(3302.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3311.0)), Basics_or(Basics_and(Basics_le(3313.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3314.0)), Basics_or(Basics_and(Basics_le(3332.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3340.0)), Basics_or(Basics_and(Basics_le(3342.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3344.0)), Basics_or(Basics_and(Basics_le(3346.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3386.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 3389.0), Basics_eq(generated_let_declarationResult_code, 3406.0)))))))))))
                                }
                            }
                        } else {
                            if Basics_lt(generated_let_declarationResult_code, 3775.0) {
                                if Basics_lt(generated_let_declarationResult_code, 3633.0) {
                                    Basics_or(Basics_and(Basics_le(3412.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3414.0)), Basics_or(Basics_and(Basics_le(3416.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3425.0)), Basics_or(Basics_and(Basics_le(3430.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3448.0)), Basics_or(Basics_and(Basics_le(3450.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3455.0)), Basics_or(Basics_and(Basics_le(3461.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3478.0)), Basics_or(Basics_and(Basics_le(3482.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3505.0)), Basics_or(Basics_and(Basics_le(3507.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3515.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 3517.0), Basics_or(Basics_and(Basics_le(3520.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3526.0)), Basics_or(Basics_and(Basics_le(3558.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3567.0)), Basics_and(Basics_le(3585.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3632.0))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(3634.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3635.0)), Basics_or(Basics_and(Basics_le(3648.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3654.0)), Basics_or(Basics_and(Basics_le(3664.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3673.0)), Basics_or(Basics_and(Basics_le(3713.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3714.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 3716.0), Basics_or(Basics_and(Basics_le(3718.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3722.0)), Basics_or(Basics_and(Basics_le(3724.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3747.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 3749.0), Basics_or(Basics_and(Basics_le(3751.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3760.0)), Basics_or(Basics_and(Basics_le(3762.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3763.0)), Basics_eq(generated_let_declarationResult_code, 3773.0)))))))))))
                                }
                            } else {
                                if Basics_lt(generated_let_declarationResult_code, 4175.0) {
                                    Basics_or(Basics_and(Basics_le(3776.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3780.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 3782.0), Basics_or(Basics_and(Basics_le(3792.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3801.0)), Basics_or(Basics_and(Basics_le(3804.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3807.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 3840.0), Basics_or(Basics_and(Basics_le(3872.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3891.0)), Basics_or(Basics_and(Basics_le(3904.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3911.0)), Basics_or(Basics_and(Basics_le(3913.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3948.0)), Basics_or(Basics_and(Basics_le(3976.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 3980.0)), Basics_or(Basics_and(Basics_le(4096.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4138.0)), Basics_and(Basics_le(4159.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4169.0))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(4176.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4181.0)), Basics_or(Basics_and(Basics_le(4186.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4189.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 4193.0), Basics_or(Basics_and(Basics_le(4197.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4198.0)), Basics_or(Basics_and(Basics_le(4206.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4208.0)), Basics_or(Basics_and(Basics_le(4213.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4225.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 4238.0), Basics_or(Basics_and(Basics_le(4240.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4249.0)), Basics_or(Basics_and(Basics_le(4256.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4293.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 4295.0), Basics_or(Basics_eq(generated_let_declarationResult_code, 4301.0), Basics_and(Basics_le(4304.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4346.0)))))))))))))
                                }
                            }
                        }
                    }
                } else {
                    if Basics_lt(generated_let_declarationResult_code, 8454.0) {
                        if Basics_lt(generated_let_declarationResult_code, 6527.0) {
                            if Basics_lt(generated_let_declarationResult_code, 5760.0) {
                                if Basics_lt(generated_let_declarationResult_code, 4801.0) {
                                    Basics_or(Basics_and(Basics_le(4348.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4680.0)), Basics_or(Basics_and(Basics_le(4682.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4685.0)), Basics_or(Basics_and(Basics_le(4688.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4694.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 4696.0), Basics_or(Basics_and(Basics_le(4698.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4701.0)), Basics_or(Basics_and(Basics_le(4704.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4744.0)), Basics_or(Basics_and(Basics_le(4746.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4749.0)), Basics_or(Basics_and(Basics_le(4752.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4784.0)), Basics_or(Basics_and(Basics_le(4786.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4789.0)), Basics_or(Basics_and(Basics_le(4792.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4798.0)), Basics_eq(generated_let_declarationResult_code, 4800.0)))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(4802.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4805.0)), Basics_or(Basics_and(Basics_le(4808.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4822.0)), Basics_or(Basics_and(Basics_le(4824.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4880.0)), Basics_or(Basics_and(Basics_le(4882.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4885.0)), Basics_or(Basics_and(Basics_le(4888.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4954.0)), Basics_or(Basics_and(Basics_le(4969.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 4988.0)), Basics_or(Basics_and(Basics_le(4992.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 5007.0)), Basics_or(Basics_and(Basics_le(5024.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 5109.0)), Basics_or(Basics_and(Basics_le(5112.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 5117.0)), Basics_or(Basics_and(Basics_le(5121.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 5740.0)), Basics_and(Basics_le(5743.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 5759.0))))))))))))
                                }
                            } else {
                                if Basics_lt(generated_let_declarationResult_code, 6111.0) {
                                    Basics_or(Basics_and(Basics_le(5761.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 5786.0)), Basics_or(Basics_and(Basics_le(5792.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 5866.0)), Basics_or(Basics_and(Basics_le(5870.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 5880.0)), Basics_or(Basics_and(Basics_le(5888.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 5905.0)), Basics_or(Basics_and(Basics_le(5919.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 5937.0)), Basics_or(Basics_and(Basics_le(5952.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 5969.0)), Basics_or(Basics_and(Basics_le(5984.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 5996.0)), Basics_or(Basics_and(Basics_le(5998.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 6000.0)), Basics_or(Basics_and(Basics_le(6016.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 6067.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 6103.0), Basics_eq(generated_let_declarationResult_code, 6108.0)))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(6112.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 6121.0)), Basics_or(Basics_and(Basics_le(6128.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 6137.0)), Basics_or(Basics_and(Basics_le(6160.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 6169.0)), Basics_or(Basics_and(Basics_le(6176.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 6264.0)), Basics_or(Basics_and(Basics_le(6272.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 6276.0)), Basics_or(Basics_and(Basics_le(6279.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 6312.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 6314.0), Basics_or(Basics_and(Basics_le(6320.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 6389.0)), Basics_or(Basics_and(Basics_le(6400.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 6430.0)), Basics_or(Basics_and(Basics_le(6470.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 6509.0)), Basics_and(Basics_le(6512.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 6516.0))))))))))))
                                }
                            }
                        } else {
                            if Basics_lt(generated_let_declarationResult_code, 7417.0) {
                                if Basics_lt(generated_let_declarationResult_code, 7042.0) {
                                    Basics_or(Basics_and(Basics_le(6528.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 6571.0)), Basics_or(Basics_and(Basics_le(6576.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 6601.0)), Basics_or(Basics_and(Basics_le(6608.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 6618.0)), Basics_or(Basics_and(Basics_le(6656.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 6678.0)), Basics_or(Basics_and(Basics_le(6688.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 6740.0)), Basics_or(Basics_and(Basics_le(6784.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 6793.0)), Basics_or(Basics_and(Basics_le(6800.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 6809.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 6823.0), Basics_or(Basics_and(Basics_le(6917.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 6963.0)), Basics_or(Basics_and(Basics_le(6981.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 6988.0)), Basics_and(Basics_le(6992.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 7001.0))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(7043.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 7072.0)), Basics_or(Basics_and(Basics_le(7086.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 7141.0)), Basics_or(Basics_and(Basics_le(7168.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 7203.0)), Basics_or(Basics_and(Basics_le(7232.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 7241.0)), Basics_or(Basics_and(Basics_le(7245.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 7293.0)), Basics_or(Basics_and(Basics_le(7296.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 7304.0)), Basics_or(Basics_and(Basics_le(7312.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 7354.0)), Basics_or(Basics_and(Basics_le(7357.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 7359.0)), Basics_or(Basics_and(Basics_le(7401.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 7404.0)), Basics_or(Basics_and(Basics_le(7406.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 7411.0)), Basics_and(Basics_le(7413.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 7414.0))))))))))))
                                }
                            } else {
                                if Basics_lt(generated_let_declarationResult_code, 8129.0) {
                                    Basics_or(Basics_eq(generated_let_declarationResult_code, 7418.0), Basics_or(Basics_and(Basics_le(7424.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 7615.0)), Basics_or(Basics_and(Basics_le(7680.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 7957.0)), Basics_or(Basics_and(Basics_le(7960.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 7965.0)), Basics_or(Basics_and(Basics_le(7968.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8005.0)), Basics_or(Basics_and(Basics_le(8008.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8013.0)), Basics_or(Basics_and(Basics_le(8016.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8023.0)), Basics_or(Basics_and(Basics_le(8032.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8061.0)), Basics_or(Basics_and(Basics_le(8064.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8116.0)), Basics_or(Basics_and(Basics_le(8118.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8124.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 8126.0), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 1.0), Basics_and(Basics_le(8025.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8031.0))))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(8130.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8132.0)), Basics_or(Basics_and(Basics_le(8134.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8140.0)), Basics_or(Basics_and(Basics_le(8144.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8147.0)), Basics_or(Basics_and(Basics_le(8150.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8155.0)), Basics_or(Basics_and(Basics_le(8160.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8172.0)), Basics_or(Basics_and(Basics_le(8178.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8180.0)), Basics_or(Basics_and(Basics_le(8182.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8188.0)), Basics_or(Basics_and(Basics_le(8304.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8305.0)), Basics_or(Basics_and(Basics_le(8308.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8313.0)), Basics_or(Basics_and(Basics_le(8319.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8329.0)), Basics_or(Basics_and(Basics_le(8336.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8348.0)), Basics_eq(generated_let_declarationResult_code, 8450.0))))))))))))
                                }
                            }
                        }
                    } else {
                        if Basics_lt(generated_let_declarationResult_code, 12783.0) {
                            if Basics_lt(generated_let_declarationResult_code, 11647.0) {
                                if Basics_lt(generated_let_declarationResult_code, 9449.0) {
                                    Basics_or(Basics_eq(generated_let_declarationResult_code, 8455.0), Basics_or(Basics_and(Basics_le(8458.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8467.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 8469.0), Basics_or(Basics_and(Basics_le(8473.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8477.0)), Basics_or(Basics_and(Basics_le(8490.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8493.0)), Basics_or(Basics_and(Basics_le(8495.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8505.0)), Basics_or(Basics_and(Basics_le(8508.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8511.0)), Basics_or(Basics_and(Basics_le(8517.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8521.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 8526.0), Basics_or(Basics_and(Basics_le(8528.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8585.0)), Basics_or(Basics_and(Basics_le(9312.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 9371.0)), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 0.0), Basics_and(Basics_le(8484.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8488.0))))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(9450.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 9471.0)), Basics_or(Basics_and(Basics_le(10102.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 10131.0)), Basics_or(Basics_and(Basics_le(11264.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 11492.0)), Basics_or(Basics_and(Basics_le(11499.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 11502.0)), Basics_or(Basics_and(Basics_le(11506.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 11507.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 11517.0), Basics_or(Basics_and(Basics_le(11520.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 11557.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 11559.0), Basics_or(Basics_eq(generated_let_declarationResult_code, 11565.0), Basics_or(Basics_and(Basics_le(11568.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 11623.0)), Basics_eq(generated_let_declarationResult_code, 11631.0)))))))))))
                                }
                            } else {
                                if Basics_lt(generated_let_declarationResult_code, 12320.0) {
                                    Basics_or(Basics_and(Basics_le(11648.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 11670.0)), Basics_or(Basics_and(Basics_le(11680.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 11686.0)), Basics_or(Basics_and(Basics_le(11688.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 11694.0)), Basics_or(Basics_and(Basics_le(11696.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 11702.0)), Basics_or(Basics_and(Basics_le(11704.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 11710.0)), Basics_or(Basics_and(Basics_le(11712.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 11718.0)), Basics_or(Basics_and(Basics_le(11720.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 11726.0)), Basics_or(Basics_and(Basics_le(11728.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 11734.0)), Basics_or(Basics_and(Basics_le(11736.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 11742.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 11823.0), Basics_and(Basics_le(12293.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 12295.0))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(12321.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 12329.0)), Basics_or(Basics_and(Basics_le(12337.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 12341.0)), Basics_or(Basics_and(Basics_le(12344.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 12348.0)), Basics_or(Basics_and(Basics_le(12353.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 12438.0)), Basics_or(Basics_and(Basics_le(12445.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 12447.0)), Basics_or(Basics_and(Basics_le(12449.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 12538.0)), Basics_or(Basics_and(Basics_le(12540.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 12543.0)), Basics_or(Basics_and(Basics_le(12549.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 12591.0)), Basics_or(Basics_and(Basics_le(12593.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 12686.0)), Basics_or(Basics_and(Basics_le(12690.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 12693.0)), Basics_and(Basics_le(12704.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 12735.0))))))))))))
                                }
                            }
                        } else {
                            if Basics_lt(generated_let_declarationResult_code, 43019.0) {
                                if Basics_lt(generated_let_declarationResult_code, 42559.0) {
                                    Basics_or(Basics_and(Basics_le(12784.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 12799.0)), Basics_or(Basics_and(Basics_le(12832.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 12841.0)), Basics_or(Basics_and(Basics_le(12872.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 12879.0)), Basics_or(Basics_and(Basics_le(12881.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 12895.0)), Basics_or(Basics_and(Basics_le(12928.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 12937.0)), Basics_or(Basics_and(Basics_le(12977.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 12991.0)), Basics_or(Basics_and(Basics_le(13312.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 19903.0)), Basics_or(Basics_and(Basics_le(19968.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 42124.0)), Basics_or(Basics_and(Basics_le(42192.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 42237.0)), Basics_or(Basics_and(Basics_le(42240.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 42508.0)), Basics_and(Basics_le(42512.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 42539.0))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(42560.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 42606.0)), Basics_or(Basics_and(Basics_le(42623.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 42653.0)), Basics_or(Basics_and(Basics_le(42656.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 42735.0)), Basics_or(Basics_and(Basics_le(42775.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 42783.0)), Basics_or(Basics_and(Basics_le(42786.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 42888.0)), Basics_or(Basics_and(Basics_le(42891.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 42954.0)), Basics_or(Basics_and(Basics_le(42960.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 42961.0)), Basics_or(Basics_and(Basics_le(42966.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 42969.0)), Basics_or(Basics_and(Basics_le(42994.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43009.0)), Basics_or(Basics_and(Basics_le(43011.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43013.0)), Basics_or(Basics_and(Basics_le(43015.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43018.0)), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 1.0), Basics_and(Basics_le(42963.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 42965.0))))))))))))))
                                }
                            } else {
                                if Basics_lt(generated_let_declarationResult_code, 43395.0) {
                                    Basics_or(Basics_and(Basics_le(43020.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43042.0)), Basics_or(Basics_and(Basics_le(43056.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43061.0)), Basics_or(Basics_and(Basics_le(43072.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43123.0)), Basics_or(Basics_and(Basics_le(43138.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43187.0)), Basics_or(Basics_and(Basics_le(43216.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43225.0)), Basics_or(Basics_and(Basics_le(43250.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43255.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 43259.0), Basics_or(Basics_and(Basics_le(43261.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43262.0)), Basics_or(Basics_and(Basics_le(43264.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43301.0)), Basics_or(Basics_and(Basics_le(43312.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43334.0)), Basics_and(Basics_le(43360.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43388.0))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(43396.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43442.0)), Basics_or(Basics_and(Basics_le(43471.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43481.0)), Basics_or(Basics_and(Basics_le(43488.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43492.0)), Basics_or(Basics_and(Basics_le(43494.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43518.0)), Basics_or(Basics_and(Basics_le(43520.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43560.0)), Basics_or(Basics_and(Basics_le(43584.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43586.0)), Basics_or(Basics_and(Basics_le(43588.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43595.0)), Basics_or(Basics_and(Basics_le(43600.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43609.0)), Basics_or(Basics_and(Basics_le(43616.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43638.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 43642.0), Basics_or(Basics_and(Basics_le(43646.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43695.0)), Basics_eq(generated_let_declarationResult_code, 43697.0))))))))))))
                                }
                            }
                        }
                    }
                }
            } else {
                if Basics_lt(generated_let_declarationResult_code, 71351.0) {
                    if Basics_lt(generated_let_declarationResult_code, 67671.0) {
                        if Basics_lt(generated_let_declarationResult_code, 65548.0) {
                            if Basics_lt(generated_let_declarationResult_code, 64286.0) {
                                if Basics_lt(generated_let_declarationResult_code, 43867.0) {
                                    Basics_or(Basics_and(Basics_le(43701.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43702.0)), Basics_or(Basics_and(Basics_le(43705.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43709.0)), Basics_or(Basics_and(Basics_le(43739.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43741.0)), Basics_or(Basics_and(Basics_le(43744.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43754.0)), Basics_or(Basics_and(Basics_le(43762.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43764.0)), Basics_or(Basics_and(Basics_le(43777.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43782.0)), Basics_or(Basics_and(Basics_le(43785.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43790.0)), Basics_or(Basics_and(Basics_le(43793.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43798.0)), Basics_or(Basics_and(Basics_le(43808.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43814.0)), Basics_or(Basics_and(Basics_le(43816.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43822.0)), Basics_or(Basics_and(Basics_le(43824.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43866.0)), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 0.0), Basics_and(Basics_le(43712.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43714.0))))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(43868.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43881.0)), Basics_or(Basics_and(Basics_le(43888.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 44002.0)), Basics_or(Basics_and(Basics_le(44016.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 44025.0)), Basics_or(Basics_and(Basics_le(44032.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 55203.0)), Basics_or(Basics_and(Basics_le(55216.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 55238.0)), Basics_or(Basics_and(Basics_le(55243.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 55291.0)), Basics_or(Basics_and(Basics_le(63744.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 64109.0)), Basics_or(Basics_and(Basics_le(64112.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 64217.0)), Basics_or(Basics_and(Basics_le(64256.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 64262.0)), Basics_or(Basics_and(Basics_le(64275.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 64279.0)), Basics_eq(generated_let_declarationResult_code, 64285.0)))))))))))
                                }
                            } else {
                                if Basics_lt(generated_let_declarationResult_code, 65135.0) {
                                    Basics_or(Basics_and(Basics_le(64287.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 64296.0)), Basics_or(Basics_and(Basics_le(64298.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 64310.0)), Basics_or(Basics_and(Basics_le(64312.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 64316.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 64318.0), Basics_or(Basics_and(Basics_le(64320.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 64321.0)), Basics_or(Basics_and(Basics_le(64323.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 64324.0)), Basics_or(Basics_and(Basics_le(64326.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 64433.0)), Basics_or(Basics_and(Basics_le(64467.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 64829.0)), Basics_or(Basics_and(Basics_le(64848.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 64911.0)), Basics_or(Basics_and(Basics_le(64914.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 64967.0)), Basics_and(Basics_le(65008.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 65019.0))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(65136.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 65140.0)), Basics_or(Basics_and(Basics_le(65142.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 65276.0)), Basics_or(Basics_and(Basics_le(65296.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 65305.0)), Basics_or(Basics_and(Basics_le(65313.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 65338.0)), Basics_or(Basics_and(Basics_le(65345.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 65370.0)), Basics_or(Basics_and(Basics_le(65382.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 65470.0)), Basics_or(Basics_and(Basics_le(65474.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 65479.0)), Basics_or(Basics_and(Basics_le(65482.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 65487.0)), Basics_or(Basics_and(Basics_le(65490.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 65495.0)), Basics_or(Basics_and(Basics_le(65498.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 65500.0)), Basics_and(Basics_le(65536.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 65547.0))))))))))))
                                }
                            }
                        } else {
                            if Basics_lt(generated_let_declarationResult_code, 66775.0) {
                                if Basics_lt(generated_let_declarationResult_code, 66272.0) {
                                    Basics_or(Basics_and(Basics_le(65549.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 65574.0)), Basics_or(Basics_and(Basics_le(65576.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 65594.0)), Basics_or(Basics_and(Basics_le(65596.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 65597.0)), Basics_or(Basics_and(Basics_le(65599.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 65613.0)), Basics_or(Basics_and(Basics_le(65616.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 65629.0)), Basics_or(Basics_and(Basics_le(65664.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 65786.0)), Basics_or(Basics_and(Basics_le(65799.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 65843.0)), Basics_or(Basics_and(Basics_le(65856.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 65912.0)), Basics_or(Basics_and(Basics_le(65930.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 65931.0)), Basics_or(Basics_and(Basics_le(66176.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 66204.0)), Basics_and(Basics_le(66208.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 66256.0))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(66273.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 66299.0)), Basics_or(Basics_and(Basics_le(66304.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 66339.0)), Basics_or(Basics_and(Basics_le(66349.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 66378.0)), Basics_or(Basics_and(Basics_le(66384.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 66421.0)), Basics_or(Basics_and(Basics_le(66432.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 66461.0)), Basics_or(Basics_and(Basics_le(66464.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 66499.0)), Basics_or(Basics_and(Basics_le(66504.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 66511.0)), Basics_or(Basics_and(Basics_le(66513.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 66517.0)), Basics_or(Basics_and(Basics_le(66560.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 66717.0)), Basics_or(Basics_and(Basics_le(66720.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 66729.0)), Basics_and(Basics_le(66736.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 66771.0))))))))))))
                                }
                            } else {
                                if Basics_lt(generated_let_declarationResult_code, 67071.0) {
                                    Basics_or(Basics_and(Basics_le(66776.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 66811.0)), Basics_or(Basics_and(Basics_le(66816.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 66855.0)), Basics_or(Basics_and(Basics_le(66864.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 66915.0)), Basics_or(Basics_and(Basics_le(66928.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 66938.0)), Basics_or(Basics_and(Basics_le(66940.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 66954.0)), Basics_or(Basics_and(Basics_le(66956.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 66962.0)), Basics_or(Basics_and(Basics_le(66964.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 66965.0)), Basics_or(Basics_and(Basics_le(66967.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 66977.0)), Basics_or(Basics_and(Basics_le(66979.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 66993.0)), Basics_or(Basics_and(Basics_le(66995.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 67001.0)), Basics_and(Basics_le(67003.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 67004.0))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(67072.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 67382.0)), Basics_or(Basics_and(Basics_le(67392.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 67413.0)), Basics_or(Basics_and(Basics_le(67424.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 67431.0)), Basics_or(Basics_and(Basics_le(67456.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 67461.0)), Basics_or(Basics_and(Basics_le(67463.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 67504.0)), Basics_or(Basics_and(Basics_le(67506.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 67514.0)), Basics_or(Basics_and(Basics_le(67584.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 67589.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 67592.0), Basics_or(Basics_and(Basics_le(67594.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 67637.0)), Basics_or(Basics_and(Basics_le(67639.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 67640.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 67644.0), Basics_and(Basics_le(67647.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 67669.0)))))))))))))
                                }
                            }
                        }
                    } else {
                        if Basics_lt(generated_let_declarationResult_code, 69871.0) {
                            if Basics_lt(generated_let_declarationResult_code, 68471.0) {
                                if Basics_lt(generated_let_declarationResult_code, 68116.0) {
                                    Basics_or(Basics_and(Basics_le(67672.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 67702.0)), Basics_or(Basics_and(Basics_le(67705.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 67742.0)), Basics_or(Basics_and(Basics_le(67751.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 67759.0)), Basics_or(Basics_and(Basics_le(67808.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 67826.0)), Basics_or(Basics_and(Basics_le(67828.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 67829.0)), Basics_or(Basics_and(Basics_le(67835.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 67867.0)), Basics_or(Basics_and(Basics_le(67872.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 67897.0)), Basics_or(Basics_and(Basics_le(67968.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 68023.0)), Basics_or(Basics_and(Basics_le(68028.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 68047.0)), Basics_or(Basics_and(Basics_le(68050.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 68096.0)), Basics_and(Basics_le(68112.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 68115.0))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(68117.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 68119.0)), Basics_or(Basics_and(Basics_le(68121.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 68149.0)), Basics_or(Basics_and(Basics_le(68160.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 68168.0)), Basics_or(Basics_and(Basics_le(68192.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 68222.0)), Basics_or(Basics_and(Basics_le(68224.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 68255.0)), Basics_or(Basics_and(Basics_le(68288.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 68295.0)), Basics_or(Basics_and(Basics_le(68297.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 68324.0)), Basics_or(Basics_and(Basics_le(68331.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 68335.0)), Basics_or(Basics_and(Basics_le(68352.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 68405.0)), Basics_or(Basics_and(Basics_le(68416.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 68437.0)), Basics_and(Basics_le(68440.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 68466.0))))))))))))
                                }
                            } else {
                                if Basics_lt(generated_let_declarationResult_code, 69423.0) {
                                    Basics_or(Basics_and(Basics_le(68472.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 68497.0)), Basics_or(Basics_and(Basics_le(68521.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 68527.0)), Basics_or(Basics_and(Basics_le(68608.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 68680.0)), Basics_or(Basics_and(Basics_le(68736.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 68786.0)), Basics_or(Basics_and(Basics_le(68800.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 68850.0)), Basics_or(Basics_and(Basics_le(68858.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 68899.0)), Basics_or(Basics_and(Basics_le(68912.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 68921.0)), Basics_or(Basics_and(Basics_le(69216.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 69246.0)), Basics_or(Basics_and(Basics_le(69248.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 69289.0)), Basics_or(Basics_and(Basics_le(69296.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 69297.0)), Basics_and(Basics_le(69376.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 69415.0))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(69424.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 69445.0)), Basics_or(Basics_and(Basics_le(69457.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 69460.0)), Basics_or(Basics_and(Basics_le(69488.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 69505.0)), Basics_or(Basics_and(Basics_le(69552.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 69579.0)), Basics_or(Basics_and(Basics_le(69600.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 69622.0)), Basics_or(Basics_and(Basics_le(69635.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 69687.0)), Basics_or(Basics_and(Basics_le(69714.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 69743.0)), Basics_or(Basics_and(Basics_le(69745.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 69746.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 69749.0), Basics_or(Basics_and(Basics_le(69763.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 69807.0)), Basics_and(Basics_le(69840.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 69864.0))))))))))))
                                }
                            }
                        } else {
                            if Basics_lt(generated_let_declarationResult_code, 70404.0) {
                                if Basics_lt(generated_let_declarationResult_code, 70112.0) {
                                    Basics_or(Basics_and(Basics_le(69872.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 69881.0)), Basics_or(Basics_and(Basics_le(69891.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 69926.0)), Basics_or(Basics_and(Basics_le(69942.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 69951.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 69956.0), Basics_or(Basics_eq(generated_let_declarationResult_code, 69959.0), Basics_or(Basics_and(Basics_le(69968.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70002.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 70006.0), Basics_or(Basics_and(Basics_le(70019.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70066.0)), Basics_or(Basics_and(Basics_le(70081.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70084.0)), Basics_or(Basics_and(Basics_le(70096.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70106.0)), Basics_eq(generated_let_declarationResult_code, 70108.0)))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(70113.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70132.0)), Basics_or(Basics_and(Basics_le(70144.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70161.0)), Basics_or(Basics_and(Basics_le(70163.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70187.0)), Basics_or(Basics_and(Basics_le(70207.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70208.0)), Basics_or(Basics_and(Basics_le(70272.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70278.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 70280.0), Basics_or(Basics_and(Basics_le(70282.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70285.0)), Basics_or(Basics_and(Basics_le(70287.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70301.0)), Basics_or(Basics_and(Basics_le(70303.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70312.0)), Basics_or(Basics_and(Basics_le(70320.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70366.0)), Basics_and(Basics_le(70384.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70393.0))))))))))))
                                }
                            } else {
                                if Basics_lt(generated_let_declarationResult_code, 70735.0) {
                                    Basics_or(Basics_and(Basics_le(70405.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70412.0)), Basics_or(Basics_and(Basics_le(70415.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70416.0)), Basics_or(Basics_and(Basics_le(70419.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70440.0)), Basics_or(Basics_and(Basics_le(70442.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70448.0)), Basics_or(Basics_and(Basics_le(70450.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70451.0)), Basics_or(Basics_and(Basics_le(70453.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70457.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 70461.0), Basics_or(Basics_eq(generated_let_declarationResult_code, 70480.0), Basics_or(Basics_and(Basics_le(70493.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70497.0)), Basics_or(Basics_and(Basics_le(70656.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70708.0)), Basics_and(Basics_le(70727.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70730.0))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(70736.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70745.0)), Basics_or(Basics_and(Basics_le(70751.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70753.0)), Basics_or(Basics_and(Basics_le(70784.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70831.0)), Basics_or(Basics_and(Basics_le(70852.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70853.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 70855.0), Basics_or(Basics_and(Basics_le(70864.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 70873.0)), Basics_or(Basics_and(Basics_le(71040.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 71086.0)), Basics_or(Basics_and(Basics_le(71128.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 71131.0)), Basics_or(Basics_and(Basics_le(71168.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 71215.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 71236.0), Basics_or(Basics_and(Basics_le(71248.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 71257.0)), Basics_and(Basics_le(71296.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 71338.0)))))))))))))
                                }
                            }
                        }
                    }
                } else {
                    if Basics_lt(generated_let_declarationResult_code, 119893.0) {
                        if Basics_lt(generated_let_declarationResult_code, 73727.0) {
                            if Basics_lt(generated_let_declarationResult_code, 72703.0) {
                                if Basics_lt(generated_let_declarationResult_code, 71959.0) {
                                    Basics_or(Basics_eq(generated_let_declarationResult_code, 71352.0), Basics_or(Basics_and(Basics_le(71360.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 71369.0)), Basics_or(Basics_and(Basics_le(71424.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 71450.0)), Basics_or(Basics_and(Basics_le(71472.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 71483.0)), Basics_or(Basics_and(Basics_le(71488.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 71494.0)), Basics_or(Basics_and(Basics_le(71680.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 71723.0)), Basics_or(Basics_and(Basics_le(71840.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 71922.0)), Basics_or(Basics_and(Basics_le(71935.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 71942.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 71945.0), Basics_or(Basics_and(Basics_le(71948.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 71955.0)), Basics_and(Basics_le(71957.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 71958.0))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(71960.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 71983.0)), Basics_or(Basics_and(Basics_le(72016.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 72025.0)), Basics_or(Basics_and(Basics_le(72096.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 72103.0)), Basics_or(Basics_and(Basics_le(72106.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 72144.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 72192.0), Basics_or(Basics_and(Basics_le(72203.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 72242.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 72250.0), Basics_or(Basics_eq(generated_let_declarationResult_code, 72272.0), Basics_or(Basics_and(Basics_le(72284.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 72329.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 72349.0), Basics_or(Basics_and(Basics_le(72368.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 72440.0)), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 1.0), Basics_or(Basics_and(Basics_le(71999.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 72001.0)), Basics_and(Basics_le(72161.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 72163.0)))))))))))))))
                                }
                            } else {
                                if Basics_lt(generated_let_declarationResult_code, 73062.0) {
                                    Basics_or(Basics_and(Basics_le(72704.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 72712.0)), Basics_or(Basics_and(Basics_le(72714.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 72750.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 72768.0), Basics_or(Basics_and(Basics_le(72784.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 72812.0)), Basics_or(Basics_and(Basics_le(72818.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 72847.0)), Basics_or(Basics_and(Basics_le(72960.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 72966.0)), Basics_or(Basics_and(Basics_le(72968.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 72969.0)), Basics_or(Basics_and(Basics_le(72971.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 73008.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 73030.0), Basics_or(Basics_and(Basics_le(73040.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 73049.0)), Basics_and(Basics_le(73056.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 73061.0))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(73063.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 73064.0)), Basics_or(Basics_and(Basics_le(73066.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 73097.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 73112.0), Basics_or(Basics_and(Basics_le(73120.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 73129.0)), Basics_or(Basics_and(Basics_le(73440.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 73458.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 73474.0), Basics_or(Basics_and(Basics_le(73476.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 73488.0)), Basics_or(Basics_and(Basics_le(73490.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 73523.0)), Basics_or(Basics_and(Basics_le(73552.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 73561.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 73648.0), Basics_and(Basics_le(73664.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 73684.0))))))))))))
                                }
                            }
                        } else {
                            if Basics_lt(generated_let_declarationResult_code, 94098.0) {
                                if Basics_lt(generated_let_declarationResult_code, 92863.0) {
                                    Basics_or(Basics_and(Basics_le(73728.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 74649.0)), Basics_or(Basics_and(Basics_le(74752.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 74862.0)), Basics_or(Basics_and(Basics_le(74880.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 75075.0)), Basics_or(Basics_and(Basics_le(77712.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 77808.0)), Basics_or(Basics_and(Basics_le(77824.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 78895.0)), Basics_or(Basics_and(Basics_le(78913.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 78918.0)), Basics_or(Basics_and(Basics_le(82944.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 83526.0)), Basics_or(Basics_and(Basics_le(92160.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 92728.0)), Basics_or(Basics_and(Basics_le(92736.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 92766.0)), Basics_or(Basics_and(Basics_le(92768.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 92777.0)), Basics_and(Basics_le(92784.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 92862.0))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(92864.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 92873.0)), Basics_or(Basics_and(Basics_le(92880.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 92909.0)), Basics_or(Basics_and(Basics_le(92928.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 92975.0)), Basics_or(Basics_and(Basics_le(92992.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 92995.0)), Basics_or(Basics_and(Basics_le(93008.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 93017.0)), Basics_or(Basics_and(Basics_le(93019.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 93025.0)), Basics_or(Basics_and(Basics_le(93027.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 93047.0)), Basics_or(Basics_and(Basics_le(93053.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 93071.0)), Basics_or(Basics_and(Basics_le(93760.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 93846.0)), Basics_or(Basics_and(Basics_le(93952.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 94026.0)), Basics_eq(generated_let_declarationResult_code, 94032.0)))))))))))
                                }
                            } else {
                                if Basics_lt(generated_let_declarationResult_code, 110927.0) {
                                    Basics_or(Basics_and(Basics_le(94099.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 94111.0)), Basics_or(Basics_and(Basics_le(94176.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 94177.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 94179.0), Basics_or(Basics_and(Basics_le(94208.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 100343.0)), Basics_or(Basics_and(Basics_le(100352.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 101589.0)), Basics_or(Basics_and(Basics_le(101632.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 101640.0)), Basics_or(Basics_and(Basics_le(110576.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 110579.0)), Basics_or(Basics_and(Basics_le(110581.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 110587.0)), Basics_or(Basics_and(Basics_le(110589.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 110590.0)), Basics_or(Basics_and(Basics_le(110592.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 110882.0)), Basics_eq(generated_let_declarationResult_code, 110898.0)))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(110928.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 110930.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 110933.0), Basics_or(Basics_and(Basics_le(110948.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 110951.0)), Basics_or(Basics_and(Basics_le(110960.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 111355.0)), Basics_or(Basics_and(Basics_le(113664.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 113770.0)), Basics_or(Basics_and(Basics_le(113776.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 113788.0)), Basics_or(Basics_and(Basics_le(113792.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 113800.0)), Basics_or(Basics_and(Basics_le(113808.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 113817.0)), Basics_or(Basics_and(Basics_le(119488.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 119507.0)), Basics_or(Basics_and(Basics_le(119520.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 119539.0)), Basics_or(Basics_and(Basics_le(119648.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 119672.0)), Basics_and(Basics_le(119808.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 119892.0)))))))))))))
                                }
                            }
                        }
                    } else {
                        if Basics_lt(generated_let_declarationResult_code, 124911.0) {
                            if Basics_lt(generated_let_declarationResult_code, 120597.0) {
                                if Basics_lt(generated_let_declarationResult_code, 120085.0) {
                                    Basics_or(Basics_and(Basics_le(119894.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 119964.0)), Basics_or(Basics_and(Basics_le(119966.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 119967.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 119970.0), Basics_or(Basics_and(Basics_le(119973.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 119974.0)), Basics_or(Basics_and(Basics_le(119977.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 119980.0)), Basics_or(Basics_and(Basics_le(119982.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 119993.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 119995.0), Basics_or(Basics_and(Basics_le(119997.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120003.0)), Basics_or(Basics_and(Basics_le(120005.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120069.0)), Basics_or(Basics_and(Basics_le(120071.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120074.0)), Basics_and(Basics_le(120077.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120084.0))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(120086.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120092.0)), Basics_or(Basics_and(Basics_le(120094.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120121.0)), Basics_or(Basics_and(Basics_le(120123.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120126.0)), Basics_or(Basics_and(Basics_le(120128.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120132.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 120134.0), Basics_or(Basics_and(Basics_le(120138.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120144.0)), Basics_or(Basics_and(Basics_le(120146.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120485.0)), Basics_or(Basics_and(Basics_le(120488.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120512.0)), Basics_or(Basics_and(Basics_le(120514.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120538.0)), Basics_or(Basics_and(Basics_le(120540.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120570.0)), Basics_and(Basics_le(120572.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120596.0))))))))))))
                                }
                            } else {
                                if Basics_lt(generated_let_declarationResult_code, 123135.0) {
                                    Basics_or(Basics_and(Basics_le(120598.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120628.0)), Basics_or(Basics_and(Basics_le(120630.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120654.0)), Basics_or(Basics_and(Basics_le(120656.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120686.0)), Basics_or(Basics_and(Basics_le(120688.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120712.0)), Basics_or(Basics_and(Basics_le(120714.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120744.0)), Basics_or(Basics_and(Basics_le(120746.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120770.0)), Basics_or(Basics_and(Basics_le(120772.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120779.0)), Basics_or(Basics_and(Basics_le(120782.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120831.0)), Basics_or(Basics_and(Basics_le(122624.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 122654.0)), Basics_or(Basics_and(Basics_le(122661.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 122666.0)), Basics_and(Basics_le(122928.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 122989.0))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(123136.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 123180.0)), Basics_or(Basics_and(Basics_le(123191.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 123197.0)), Basics_or(Basics_and(Basics_le(123200.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 123209.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 123214.0), Basics_or(Basics_and(Basics_le(123536.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 123565.0)), Basics_or(Basics_and(Basics_le(123584.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 123627.0)), Basics_or(Basics_and(Basics_le(123632.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 123641.0)), Basics_or(Basics_and(Basics_le(124112.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 124139.0)), Basics_or(Basics_and(Basics_le(124144.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 124153.0)), Basics_or(Basics_and(Basics_le(124896.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 124902.0)), Basics_or(Basics_and(Basics_le(124904.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 124907.0)), Basics_and(Basics_le(124909.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 124910.0)))))))))))))
                                }
                            }
                        } else {
                            if Basics_lt(generated_let_declarationResult_code, 126560.0) {
                                if Basics_lt(generated_let_declarationResult_code, 126463.0) {
                                    Basics_or(Basics_and(Basics_le(124912.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 124926.0)), Basics_or(Basics_and(Basics_le(124928.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 125124.0)), Basics_or(Basics_and(Basics_le(125127.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 125135.0)), Basics_or(Basics_and(Basics_le(125184.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 125251.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 125259.0), Basics_or(Basics_and(Basics_le(125264.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 125273.0)), Basics_or(Basics_and(Basics_le(126065.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126123.0)), Basics_or(Basics_and(Basics_le(126125.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126127.0)), Basics_or(Basics_and(Basics_le(126129.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126132.0)), Basics_or(Basics_and(Basics_le(126209.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126253.0)), Basics_and(Basics_le(126255.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126269.0))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(126464.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126467.0)), Basics_or(Basics_and(Basics_le(126469.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126495.0)), Basics_or(Basics_and(Basics_le(126497.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126498.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 126500.0), Basics_or(Basics_eq(generated_let_declarationResult_code, 126503.0), Basics_or(Basics_and(Basics_le(126505.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126514.0)), Basics_or(Basics_and(Basics_le(126516.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126519.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 126530.0), Basics_or(Basics_and(Basics_le(126541.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126543.0)), Basics_or(Basics_and(Basics_le(126545.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126546.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 126548.0), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 1.0), Basics_or(Basics_and(Basics_le(126521.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126523.0)), Basics_or(Basics_and(Basics_le(126535.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126539.0)), Basics_and(Basics_le(126551.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126559.0))))))))))))))))
                                }
                            } else {
                                if Basics_lt(generated_let_declarationResult_code, 126634.0) {
                                    Basics_or(Basics_and(Basics_le(126561.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126562.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 126564.0), Basics_or(Basics_and(Basics_le(126567.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126570.0)), Basics_or(Basics_and(Basics_le(126572.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126578.0)), Basics_or(Basics_and(Basics_le(126580.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126583.0)), Basics_or(Basics_and(Basics_le(126585.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126588.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 126590.0), Basics_or(Basics_and(Basics_le(126592.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126601.0)), Basics_or(Basics_and(Basics_le(126603.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126619.0)), Basics_or(Basics_and(Basics_le(126625.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126627.0)), Basics_and(Basics_le(126629.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126633.0))))))))))))
                                } else {
                                    Basics_or(Basics_and(Basics_le(126635.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 126651.0)), Basics_or(Basics_and(Basics_le(127232.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 127244.0)), Basics_or(Basics_and(Basics_le(130032.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 130041.0)), Basics_or(Basics_and(Basics_le(131072.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 173791.0)), Basics_or(Basics_and(Basics_le(173824.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 177977.0)), Basics_or(Basics_and(Basics_le(177984.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 178205.0)), Basics_or(Basics_and(Basics_le(178208.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 183969.0)), Basics_or(Basics_and(Basics_le(183984.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 191456.0)), Basics_or(Basics_and(Basics_le(191472.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 192093.0)), Basics_or(Basics_and(Basics_le(194560.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 195101.0)), Basics_or(Basics_and(Basics_le(196608.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 201546.0)), Basics_and(Basics_le(201552.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 205743.0)))))))))))))
                                }
                            }
                        }
                    }
                }
            }
        }
    return Basics_or(CharExtra_charCodeIsLower(generated_let_declarationResult_code), Basics_or(CharExtra_charCodeIsUpper(generated_let_declarationResult_code), Basics_or(CharExtra_charCodeIsDigit(generated_let_declarationResult_code), Basics_or(Basics_eq(generated_let_declarationResult_code, 95.0), Basics_and(Basics_and(Basics_neq(generated_let_declarationResult_code, 32.0), Basics_neq(generated_let_declarationResult_code, 10.0)), generated_localReturnResult_right_right_right_right_right_letResult_declarationResult)))))
}

@Sendable public static func CharExtra_unicodeIsLowerFast(_ c: UnicodeScalar) ->  Bool {
    let generated_let_declarationResult_code: Double =
        Char_toCode(c)
    let generated_let_declarationResult_cString: String =
        String_fromChar(c)
    let generated_localReturnResult_right_letResult_declarationResult: Bool =
        if Basics_and(Basics_eq(String_toLower(generated_let_declarationResult_cString), generated_let_declarationResult_cString), Basics_neq(String_toUpper(generated_let_declarationResult_cString), generated_let_declarationResult_cString)) {
            Basics_or(Basics_le(generated_let_declarationResult_code, 836.0), Basics_or(Basics_and(Basics_le(838.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8559.0)), Basics_or(Basics_and(Basics_le(8576.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 9423.0)), Basics_and(Basics_le(9450.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 983040.0)))))
        } else {
            if Basics_lt(generated_let_declarationResult_code, 43001.0) {
                if Basics_lt(generated_let_declarationResult_code, 8457.0) {
                    if Basics_lt(generated_let_declarationResult_code, 590.0) {
                        Basics_or(Basics_and(Basics_le(311.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 312.0)), Basics_or(Basics_and(Basics_le(396.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 397.0)), Basics_or(Basics_and(Basics_le(409.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 411.0)), Basics_or(Basics_and(Basics_le(426.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 427.0)), Basics_or(Basics_and(Basics_le(441.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 442.0)), Basics_or(Basics_and(Basics_le(445.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 447.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 545.0), Basics_and(Basics_le(563.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 569.0)))))))))
                    } else {
                        Basics_or(Basics_and(Basics_le(591.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 659.0)), Basics_or(Basics_and(Basics_le(661.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 687.0)), Basics_or(Basics_and(Basics_le(1019.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 1020.0)), Basics_or(Basics_and(Basics_le(1376.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 1416.0)), Basics_or(Basics_and(Basics_le(7424.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 7467.0)), Basics_or(Basics_and(Basics_le(7531.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 7543.0)), Basics_or(Basics_and(Basics_le(7545.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 7578.0)), Basics_or(Basics_and(Basics_le(7829.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 7837.0)), Basics_eq(generated_let_declarationResult_code, 7839.0)))))))))
                    }
                } else {
                    if Basics_lt(generated_let_declarationResult_code, 11376.0) {
                        Basics_or(Basics_eq(generated_let_declarationResult_code, 8458.0), Basics_or(Basics_and(Basics_le(8462.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8463.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 8467.0), Basics_or(Basics_eq(generated_let_declarationResult_code, 8495.0), Basics_or(Basics_eq(generated_let_declarationResult_code, 8500.0), Basics_or(Basics_eq(generated_let_declarationResult_code, 8505.0), Basics_or(Basics_and(Basics_le(8508.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8509.0)), Basics_and(Basics_le(8518.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8521.0)))))))))
                    } else {
                        Basics_or(Basics_eq(generated_let_declarationResult_code, 11377.0), Basics_or(Basics_and(Basics_le(11379.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 11380.0)), Basics_or(Basics_and(Basics_le(11382.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 11387.0)), Basics_or(Basics_and(Basics_le(11491.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 11492.0)), Basics_or(Basics_and(Basics_le(42799.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 42801.0)), Basics_or(Basics_and(Basics_le(42865.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 42872.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 42894.0), Basics_or(Basics_and(Basics_le(42899.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 42901.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 42927.0), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 1.0), Basics_and(Basics_le(42963.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 42965.0))))))))))))
                    }
                }
            } else {
                if Basics_lt(generated_let_declarationResult_code, 120353.0) {
                    if Basics_lt(generated_let_declarationResult_code, 119994.0) {
                        Basics_or(Basics_eq(generated_let_declarationResult_code, 43002.0), Basics_or(Basics_and(Basics_le(43824.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43866.0)), Basics_or(Basics_and(Basics_le(43872.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 43880.0)), Basics_or(Basics_and(Basics_le(119834.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 119859.0)), Basics_or(Basics_and(Basics_le(119886.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 119892.0)), Basics_or(Basics_and(Basics_le(119894.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 119911.0)), Basics_or(Basics_and(Basics_le(119938.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 119963.0)), Basics_and(Basics_le(119990.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 119993.0)))))))))
                    } else {
                        Basics_or(Basics_eq(generated_let_declarationResult_code, 119995.0), Basics_or(Basics_and(Basics_le(119997.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120003.0)), Basics_or(Basics_and(Basics_le(120005.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120015.0)), Basics_or(Basics_and(Basics_le(120042.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120067.0)), Basics_or(Basics_and(Basics_le(120094.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120119.0)), Basics_or(Basics_and(Basics_le(120146.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120171.0)), Basics_or(Basics_and(Basics_le(120198.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120223.0)), Basics_or(Basics_and(Basics_le(120250.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120275.0)), Basics_and(Basics_le(120302.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120327.0))))))))))
                    }
                } else {
                    if Basics_lt(generated_let_declarationResult_code, 120655.0) {
                        Basics_or(Basics_and(Basics_le(120354.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120379.0)), Basics_or(Basics_and(Basics_le(120406.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120431.0)), Basics_or(Basics_and(Basics_le(120458.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120485.0)), Basics_or(Basics_and(Basics_le(120514.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120538.0)), Basics_or(Basics_and(Basics_le(120540.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120545.0)), Basics_or(Basics_and(Basics_le(120572.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120596.0)), Basics_or(Basics_and(Basics_le(120598.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120603.0)), Basics_and(Basics_le(120630.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120654.0)))))))))
                    } else {
                        Basics_or(Basics_and(Basics_le(120656.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120661.0)), Basics_or(Basics_and(Basics_le(120688.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120712.0)), Basics_or(Basics_and(Basics_le(120714.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120719.0)), Basics_or(Basics_and(Basics_le(120746.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120770.0)), Basics_or(Basics_and(Basics_le(120772.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120777.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 120779.0), Basics_or(Basics_and(Basics_le(122624.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 122633.0)), Basics_or(Basics_and(Basics_le(122635.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 122654.0)), Basics_and(Basics_le(122661.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 122666.0))))))))))
                    }
                }
            }
        }
    return Basics_or(CharExtra_charCodeIsLower(generated_let_declarationResult_code), generated_localReturnResult_right_letResult_declarationResult)
}

@Sendable public static func CharExtra_unicodeIsUpperFast(_ c: UnicodeScalar) ->  Bool {
    let generated_let_declarationResult_code: Double =
        Char_toCode(c)
    let generated_let_right_letResult_declarationResult_cString: String =
        String_fromChar(c)
    let generated_localReturnResult_right_letResult_declarationResult: Bool =
        if Basics_and(Basics_eq(String_toUpper(generated_let_right_letResult_declarationResult_cString), generated_let_right_letResult_declarationResult_cString), Basics_neq(String_toLower(generated_let_right_letResult_declarationResult_cString), generated_let_right_letResult_declarationResult_cString)) {
            Basics_or(Basics_le(generated_let_declarationResult_code, 8543.0), Basics_or(Basics_and(Basics_le(8560.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 9397.0)), Basics_and(Basics_le(9424.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 983040.0))))
        } else {
            if Basics_lt(generated_let_declarationResult_code, 120015.0) {
                if Basics_lt(generated_let_declarationResult_code, 8509.0) {
                    Basics_or(Basics_and(Basics_le(978.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 980.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 8450.0), Basics_or(Basics_eq(generated_let_declarationResult_code, 8455.0), Basics_or(Basics_and(Basics_le(8459.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8461.0)), Basics_or(Basics_and(Basics_le(8464.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8466.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 8469.0), Basics_or(Basics_and(Basics_le(8473.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8477.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 8484.0), Basics_or(Basics_eq(generated_let_declarationResult_code, 8488.0), Basics_or(Basics_and(Basics_le(8490.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8493.0)), Basics_and(Basics_le(8496.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8499.0))))))))))))
                } else {
                    Basics_or(Basics_and(Basics_le(8510.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 8511.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 8517.0), Basics_or(Basics_and(Basics_le(119808.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 119833.0)), Basics_or(Basics_and(Basics_le(119860.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 119885.0)), Basics_or(Basics_and(Basics_le(119912.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 119937.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 119964.0), Basics_or(Basics_and(Basics_le(119966.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 119967.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 119970.0), Basics_or(Basics_and(Basics_le(119973.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 119974.0)), Basics_or(Basics_and(Basics_le(119977.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 119980.0)), Basics_and(Basics_le(119982.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 119989.0))))))))))))
                }
            } else {
                if Basics_lt(generated_let_declarationResult_code, 120223.0) {
                    Basics_or(Basics_and(Basics_le(120016.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120041.0)), Basics_or(Basics_and(Basics_le(120068.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120069.0)), Basics_or(Basics_and(Basics_le(120071.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120074.0)), Basics_or(Basics_and(Basics_le(120077.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120084.0)), Basics_or(Basics_and(Basics_le(120086.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120092.0)), Basics_or(Basics_and(Basics_le(120120.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120121.0)), Basics_or(Basics_and(Basics_le(120123.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120126.0)), Basics_or(Basics_and(Basics_le(120128.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120132.0)), Basics_or(Basics_eq(generated_let_declarationResult_code, 120134.0), Basics_or(Basics_and(Basics_le(120138.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120144.0)), Basics_and(Basics_le(120172.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120197.0))))))))))))
                } else {
                    Basics_or(Basics_and(Basics_le(120224.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120249.0)), Basics_or(Basics_and(Basics_le(120276.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120301.0)), Basics_or(Basics_and(Basics_le(120328.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120353.0)), Basics_or(Basics_and(Basics_le(120380.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120405.0)), Basics_or(Basics_and(Basics_le(120432.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120457.0)), Basics_or(Basics_and(Basics_le(120488.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120512.0)), Basics_or(Basics_and(Basics_le(120546.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120570.0)), Basics_or(Basics_and(Basics_le(120604.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120628.0)), Basics_or(Basics_and(Basics_le(120662.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120686.0)), Basics_or(Basics_and(Basics_le(120720.0, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, 120744.0)), Basics_eq(generated_let_declarationResult_code, 120778.0)))))))))))
                }
            }
        }
    return Basics_or(CharExtra_charCodeIsUpper(generated_let_declarationResult_code), generated_localReturnResult_right_letResult_declarationResult)
}

@Sendable public static func ElmInterface_build(_ generated_0: ElmInternalRawFile_RawFile) ->  List_List<ElmInterface_Exposed> {
    let file: ElmSyntaxFile_File
    switch generated_0 {
    case let ElmInternalRawFile_RawFile.ElmInternalRawFile_Raw(generated_destructured_file):
        file =
            generated_destructured_file
    }
    let generated_let_declarationResult_fileDefinitionList: List_List<Tuple<String, ElmInterface_Exposed>> =
        ElmInterface_fileToDefinitions(file)
    return
        switch ElmSyntaxModule_exposingList(ElmSyntaxNode_value(file.moduleDefinition)) {
        case let ElmSyntaxExposing_Exposing.ElmSyntaxExposing_Explicit(x):
            ElmInterface_buildInterfaceFromExplicit(x, Dict_fromList(generated_let_declarationResult_fileDefinitionList))
        case ElmSyntaxExposing_Exposing.ElmSyntaxExposing_All(_):
            List_map(Tuple_second, generated_let_declarationResult_fileDefinitionList)
        }
}

@Sendable public static func ElmInterface_buildInterfaceFromExplicit(_ x: List_List<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>, _ exposedDict: Dictionary<String, ElmInterface_Exposed>) ->  List_List<ElmInterface_Exposed> {
    List_filterMap(
        { (generated_argument0_declarationResult_0: ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>) in
            let expose: ElmSyntaxExposing_TopLevelExpose
            switch generated_argument0_declarationResult_0 {
            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_expose):
                expose =
                    generated_destructured_expose
            }
            return
                switch expose {
                case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_InfixExpose(k):
                    Dict_get(k, exposedDict)
                case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeOrAliasExpose(s):
                    Maybe_map(
                        { (generated_called_argument0_right_caseResult_case1_result_argument0_declarationResult_1: ElmInterface_Exposed) in
                            ElmInterface_ifCustomType(
                                { (generated_argument0_argument0_right_caseResult_case1_result_argument0_declarationResult_0: Tuple<String, List_List<String>>) in
                                    let name: String
                                    switch generated_argument0_argument0_right_caseResult_case1_result_argument0_declarationResult_0 {
                                    case let Tuple.Tuple(generated_destructured_name, _):
                                        name =
                                            generated_destructured_name
                                    }
                                    return ElmInterface_Exposed.ElmInterface_CustomType(Tuple.Tuple(name, List_List.List_Empty))
                                },
                                generated_called_argument0_right_caseResult_case1_result_argument0_declarationResult_1
                            )
                        },
                        Dict_get(s, exposedDict)
                    )
                case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_FunctionExpose(s):
                    Maybe_Maybe.Maybe_Just(ElmInterface_Exposed.ElmInterface_Function(s))
                case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeExpose(exposedType):
                    switch exposedType.open_ {
                    case Maybe_Maybe.Maybe_Nothing:
                        Maybe_Maybe.Maybe_Just(ElmInterface_Exposed.ElmInterface_CustomType(Tuple.Tuple(exposedType.name, List_List.List_Empty)))
                    case Maybe_Maybe.Maybe_Just(_):
                        Dict_get(exposedType.name, exposedDict)
                    }
                }
        },
        x
    )
}

@Sendable public static func ElmInterface_exposesAlias(_ k: String, _ interface: List_List<ElmInterface_Exposed>) ->  Bool {
    List_any(
        { (x: ElmInterface_Exposed) in
            switch x {
            case let ElmInterface_Exposed.ElmInterface_Alias(l):
                Basics_eq(k, l)
            case _:
                false
            }
        },
        interface
    )
}

@Sendable public static func ElmInterface_exposesFunction(_ k: String, _ interface: List_List<ElmInterface_Exposed>) ->  Bool {
    List_any(
        { (x: ElmInterface_Exposed) in
            switch x {
            case let ElmInterface_Exposed.ElmInterface_Function(l):
                Basics_eq(k, l)
            case let ElmInterface_Exposed.ElmInterface_CustomType(Tuple.Tuple(_, constructors)):
                List_member(k, constructors)
            case let ElmInterface_Exposed.ElmInterface_Operator(inf):
                Basics_eq(ElmSyntaxNode_value(inf.operator_), k)
            case ElmInterface_Exposed.ElmInterface_Alias(_):
                false
            }
        },
        interface
    )
}

@Sendable public static func ElmInterface_fileToDefinitions(_ file: Generated_comments_declarations_imports_moduleDefinition<List_List<ElmSyntaxNode_Node<ElmSyntaxComments_Comment>>, List_List<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>, List_List<ElmSyntaxNode_Node<ElmSyntaxImport_Import>>, ElmSyntaxNode_Node<ElmSyntaxModule_Module>>) ->  List_List<Tuple<String, ElmInterface_Exposed>> {
    let generated_let_declarationResult_allDeclarations: List_List<Tuple<String, ElmInterface_Exposed>> =
        List_filterMap(
            { (generated_argument0_letDeclaration0_declarationResult_0: ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>) in
                let decl: ElmSyntaxDeclaration_Declaration
                switch generated_argument0_letDeclaration0_declarationResult_0 {
                case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_decl):
                    decl =
                        generated_destructured_decl
                }
                let generated_localReturnResult_result_argument0_letDeclaration0_declarationResult: Maybe_Maybe<Tuple<String, ElmInterface_Exposed>>
                switch decl {
                case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_CustomTypeDeclaration(t):
                    generated_localReturnResult_result_argument0_letDeclaration0_declarationResult =
                        Maybe_Maybe.Maybe_Just(Tuple.Tuple(ElmSyntaxNode_value(t.name), ElmInterface_Exposed.ElmInterface_CustomType(Tuple.Tuple(ElmSyntaxNode_value(t.name), List_map(Basics_composeR(ElmSyntaxNode_value, Basics_composeR({ (generated_record: Generated_arguments_name<List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>, ElmSyntaxNode_Node<String>>) in generated_record.name }, ElmSyntaxNode_value)), t.constructors)))))
                case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_AliasDeclaration(a):
                    generated_localReturnResult_result_argument0_letDeclaration0_declarationResult =
                        Maybe_Maybe.Maybe_Just(Tuple.Tuple(ElmSyntaxNode_value(a.name), ElmInterface_Exposed.ElmInterface_Alias(ElmSyntaxNode_value(a.name))))
                case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_PortDeclaration(p):
                    generated_localReturnResult_result_argument0_letDeclaration0_declarationResult =
                        Maybe_Maybe.Maybe_Just(Tuple.Tuple(ElmSyntaxNode_value(p.name), ElmInterface_Exposed.ElmInterface_Function(ElmSyntaxNode_value(p.name))))
                case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_FunctionDeclaration(f):
                    let generated_let_caseResult_case3_result_argument0_letDeclaration0_declarationResult_declaration: ElmSyntaxExpression_FunctionImplementation =
                        ElmSyntaxNode_value(f.declaration)
                    let generated_let_caseResult_case3_result_argument0_letDeclaration0_declarationResult_name: String =
                        ElmSyntaxNode_value(generated_let_caseResult_case3_result_argument0_letDeclaration0_declarationResult_declaration.name)
                    generated_localReturnResult_result_argument0_letDeclaration0_declarationResult =
                        Maybe_Maybe.Maybe_Just(Tuple.Tuple(generated_let_caseResult_case3_result_argument0_letDeclaration0_declarationResult_name, ElmInterface_Exposed.ElmInterface_Function(generated_let_caseResult_case3_result_argument0_letDeclaration0_declarationResult_name)))
                case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_InfixDeclaration(i):
                    generated_localReturnResult_result_argument0_letDeclaration0_declarationResult =
                        Maybe_Maybe.Maybe_Just(Tuple.Tuple(ElmSyntaxNode_value(i.operator_), ElmInterface_Exposed.ElmInterface_Operator(i)))
                case ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_Destructuring(_, _):
                    generated_localReturnResult_result_argument0_letDeclaration0_declarationResult =
                        Maybe_Maybe.Maybe_Nothing
                }
                return generated_localReturnResult_result_argument0_letDeclaration0_declarationResult
            },
            file.declarations
        )
    return
        List_filterMap(
            ElmInterface_resolveGroup,
            List_map(
                { (generated_argument0_right_left_letResult_declarationResult_0: Tuple<String, ElmInterface_Exposed>) in
                    let name: String
                    switch generated_argument0_right_left_letResult_declarationResult_0 {
                    case let Tuple.Tuple(generated_destructured_name, _):
                        name =
                            generated_destructured_name
                    }
                    return
                        List_filter(
                            { (generated_argument0_right_result_argument0_right_left_letResult_declarationResult_0: Tuple<String, ElmInterface_Exposed>) in
                                let otherDeclarationName: String
                                switch generated_argument0_right_result_argument0_right_left_letResult_declarationResult_0 {
                                case let Tuple.Tuple(generated_destructured_otherDeclarationName, _):
                                    otherDeclarationName =
                                        generated_destructured_otherDeclarationName
                                }
                                return Basics_eq(otherDeclarationName, name)
                            },
                            generated_let_declarationResult_allDeclarations
                        )
                },
                generated_let_declarationResult_allDeclarations
            )
        )
}

@Sendable public static func ElmInterface_getValidOperatorInterface(_ t1: ElmInterface_Exposed, _ t2: ElmInterface_Exposed) ->  Maybe_Maybe<ElmInterface_Exposed> {
    switch Tuple.Tuple(t1, t2) {
    case let Tuple.Tuple(ElmInterface_Exposed.ElmInterface_Operator(x), ElmInterface_Exposed.ElmInterface_Operator(y)):
        if Basics_and(Basics_eq(ElmSyntaxNode_value(x.precedence), 5.0), Basics_eq(ElmSyntaxNode_value(x.direction), ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Left)) {
            Maybe_Maybe.Maybe_Just(ElmInterface_Exposed.ElmInterface_Operator(y))
        } else {
            Maybe_Maybe.Maybe_Just(ElmInterface_Exposed.ElmInterface_Operator(x))
        }
    case _:
        Maybe_Maybe.Maybe_Nothing
    }
}

@Sendable public static func ElmInterface_ifCustomType(_ f: @Sendable @escaping (Tuple<String, List_List<String>>) -> ElmInterface_Exposed, _ i: ElmInterface_Exposed) ->  ElmInterface_Exposed {
    switch i {
    case let ElmInterface_Exposed.ElmInterface_CustomType(t):
        f(t)
    case _:
        i
    }
}

@Sendable public static func ElmInterface_operators(_ generated_0: List_List<ElmInterface_Exposed>) ->  List_List<Generated_direction_function_operator__precedence<ElmSyntaxNode_Node<ElmSyntaxInfix_InfixDirection>, ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<Double>>> {
    List_filterMap(
        { (interface: ElmInterface_Exposed) in
            switch interface {
            case let ElmInterface_Exposed.ElmInterface_Operator(operator_):
                Maybe_Maybe.Maybe_Just(operator_)
            case _:
                Maybe_Maybe.Maybe_Nothing
            }
        },
        generated_0
    )
}

@Sendable public static func ElmInterface_resolveGroup(_ g: List_List<Tuple<String, ElmInterface_Exposed>>) ->  Maybe_Maybe<Tuple<String, ElmInterface_Exposed>> {
    switch g {
    case List_List.List_Empty:
        Maybe_Maybe.Maybe_Nothing
    case let List_List.List_Cons(x, List_List.List_Empty):
        Maybe_Maybe.Maybe_Just(x)
    case let List_List.List_Cons(Tuple.Tuple(n1, t1), List_List.List_Cons(Tuple.Tuple(_, t2), List_List.List_Empty)):
        Maybe_map({ (a: ElmInterface_Exposed) in Tuple.Tuple(n1, a) }, ElmInterface_getValidOperatorInterface(t1, t2))
    case _:
        Maybe_Maybe.Maybe_Nothing
    }
}

@Sendable public static func ElmInternalRawFile_fromFile(_ generated_0: Generated_comments_declarations_imports_moduleDefinition<List_List<ElmSyntaxNode_Node<ElmSyntaxComments_Comment>>, List_List<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>, List_List<ElmSyntaxNode_Node<ElmSyntaxImport_Import>>, ElmSyntaxNode_Node<ElmSyntaxModule_Module>>) ->  ElmInternalRawFile_RawFile {
    ElmInternalRawFile_RawFile.ElmInternalRawFile_Raw(generated_0)
}

@Sendable public static func ElmJsonUtil_decodeTyped<a: Sendable>(_ opts: List_List<Tuple<String, JsonDecode_Decoder<a>>>) ->  JsonDecode_Decoder<a> {
    JsonDecode_lazy(
        { (generated_argument0_declarationResult_0: Unit) in
            let (_) =
                generated_argument0_declarationResult_0
            return
                JsonDecode_andThen(
                    { (t: String) in
                        switch
                            List_head(
                                List_filter(
                                    { (generated_argument0_left_matched_result_argument0_right_result_argument0_declarationResult_0: Tuple<String, JsonDecode_Decoder<a>>) in
                                        let opt: String
                                        switch generated_argument0_left_matched_result_argument0_right_result_argument0_declarationResult_0 {
                                        case let Tuple.Tuple(generated_destructured_opt, _):
                                            opt =
                                                generated_destructured_opt
                                        }
                                        return Basics_eq(opt, t)
                                    },
                                    opts
                                )
                            ) {
                        case let Maybe_Maybe.Maybe_Just(m):
                            JsonDecode_field(Tuple_first(m), Tuple_second(m))
                        case Maybe_Maybe.Maybe_Nothing:
                            JsonDecode_fail(String_append("No decoder for type: ", t))
                        }
                    },
                    JsonDecode_field("type", JsonDecode_string)
                )
        }
    )
}

@Sendable public static func ElmJsonUtil_encodeTyped(_ x: String, _ v: JsonEncode_Value) ->  JsonEncode_Value {
    JsonEncode_object(
        Array_toList(
            [ Tuple.Tuple("type", JsonEncode_string(x)),
              Tuple.Tuple(x, v)
            ]
        )
    )
}

@Sendable public static func ElmParserComments_problemUnexpectedDocumentation<a: Sendable>() ->  ParserFast_Parser<a> {
    ParserFast_problem("unexpected documentation comment")
}

@Sendable public static func ElmParserExpression_applyExtensionRight(_ generated_0: ElmParserExpression_ExtensionRight, _ generated_1: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) ->  ElmSyntaxNode_Node<ElmSyntaxExpression_Expression> {
    let operation: Generated_direction_expression_symbol<ElmSyntaxInfix_InfixDirection, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, String>
    switch generated_0 {
    case let ElmParserExpression_ExtensionRight.ElmParserExpression_ExtendRightByOperation(generated_destructured_operation):
        operation =
            generated_destructured_operation
    }
    let leftNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
    let leftRange: ElmSyntaxRange_Range
    let (generated_destructured_leftNode) =
        generated_1
    leftNode =
        generated_destructured_leftNode
    switch leftNode {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_leftRange, _):
        leftRange =
            generated_destructured_leftRange
    }
    let generated_let_declarationResult_rightExpressionNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
    let generated_let_declarationResult_rightExpressionRange: ElmSyntaxRange_Range
    let (generated_destructured_rightExpressionNode) =
        operation.expression
    generated_let_declarationResult_rightExpressionNode =
        generated_destructured_rightExpressionNode
    switch generated_let_declarationResult_rightExpressionNode {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_rightExpressionRange, _):
        generated_let_declarationResult_rightExpressionRange =
            generated_destructured_rightExpressionRange
    }
    return ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_declarationResult_rightExpressionRange.end, start: leftRange.start), ElmSyntaxExpression_Expression.ElmSyntaxExpression_OperatorApplication(operation.symbol, operation.direction, leftNode, generated_let_declarationResult_rightExpressionNode))
}

@Sendable public static func ElmParserExpression_errUnknownInfixOperator<a: Sendable>() ->  Result_Result<String, a> {
    Result_Result.Result_Err("unknown infix operator")
}

@Sendable public static func ElmParserExpression_extendedSubExpressionOptimisticLayout<intermediate: Sendable>(_ toResult: @Sendable @escaping (ElmParserExpression_InfixOperatorInfo) -> Result_Result<String, intermediate>, _ afterCommitting: @Sendable @escaping (intermediate) -> ParserFast_Parser<Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmParserExpression_ExtensionRight>>) ->  ParserFast_Parser<Generated_comments_syntax<ParserWithComments_Comments, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> {
    ParserFast_loopWhileSucceedsOntoResultFromParser(ElmParserLayout_positivelyIndentedFollowedBy(ElmParserExpression_infixOperatorAndThen(toResult, afterCommitting)), ElmParserExpression_subExpressionMaybeAppliedOptimisticLayout, { (extensionRightResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmParserExpression_ExtensionRight>) in { (leftNodeWithComments: Generated_comments_syntax<Rope_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(extensionRightResult.comments, leftNodeWithComments.comments), syntax: ElmParserExpression_applyExtensionRight(extensionRightResult.syntax, leftNodeWithComments.syntax)) } }, Basics_identity)
}

@Sendable public static func ElmParserExpression_infixLeft(_ leftPrecedence: Double, _ symbol: String) ->  Generated_extensionRight_leftPrecedence_symbol<ParserFast_Parser<ParserWithComments_WithComments<ElmParserExpression_ExtensionRight>>, Double, String> {
    Generated_extensionRight_leftPrecedence_symbol.Record(
        extensionRight:
            ParserFast_map2(
                { (commentsBeforeFirst: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (first: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(first.comments, commentsBeforeFirst), syntax: ElmParserExpression_ExtensionRight.ElmParserExpression_ExtendRightByOperation(Generated_direction_expression_symbol.Record(direction: ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Left, expression: first.syntax, symbol: symbol))) } },
                ElmParserLayout_maybeLayout,
                ElmParserExpression_extendedSubExpressionOptimisticLayout(
                    { (info: Generated_extensionRight_leftPrecedence_symbol<ParserFast_Parser<ParserWithComments_WithComments<ElmParserExpression_ExtensionRight>>, Double, String>) in
                        if Basics_gt(info.leftPrecedence, leftPrecedence) {
                            Result_Result.Result_Ok(info)
                        } else {
                            ElmParserExpression_temporaryErrPrecedenceTooHigh()
                        }
                    },
                    { (generated_record: Generated_extensionRight_leftPrecedence_symbol<ParserFast_Parser<ParserWithComments_WithComments<ElmParserExpression_ExtensionRight>>, Double, String>) in generated_record.extensionRight }
                )
            ),
        leftPrecedence: leftPrecedence,
        symbol: symbol
    )
}

@Sendable public static func ElmParserExpression_infixNonAssociative(_ leftPrecedence: Double, _ symbol: String) ->  Generated_extensionRight_leftPrecedence_symbol<ParserFast_Parser<ParserWithComments_WithComments<ElmParserExpression_ExtensionRight>>, Double, String> {
    Generated_extensionRight_leftPrecedence_symbol.Record(
        extensionRight:
            ParserFast_map2(
                { (commentsBefore: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (right: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(right.comments, commentsBefore), syntax: ElmParserExpression_ExtensionRight.ElmParserExpression_ExtendRightByOperation(Generated_direction_expression_symbol.Record(direction: ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Non, expression: right.syntax, symbol: symbol))) } },
                ElmParserLayout_maybeLayout,
                ElmParserExpression_extendedSubExpressionOptimisticLayout(
                    { (info: Generated_extensionRight_leftPrecedence_symbol<ParserFast_Parser<ParserWithComments_WithComments<ElmParserExpression_ExtensionRight>>, Double, String>) in
                        if Basics_ge(info.leftPrecedence, leftPrecedence) {
                            Result_Result.Result_Ok(info)
                        } else {
                            ElmParserExpression_temporaryErrPrecedenceTooHigh()
                        }
                    },
                    { (info: Generated_extensionRight_leftPrecedence_symbol<ParserFast_Parser<ParserWithComments_WithComments<ElmParserExpression_ExtensionRight>>, Double, String>) in
                        if Basics_eq(info.leftPrecedence, leftPrecedence) {
                            ElmParserExpression_problemCannotMixNonAssociativeInfixOperators()
                        } else {
                            info.extensionRight
                        }
                    }
                )
            ),
        leftPrecedence: leftPrecedence,
        symbol: symbol
    )
}

@Sendable public static func ElmParserExpression_infixOperatorAndThen<intermediate: Sendable, res: Sendable>(_ toResult: @Sendable @escaping (ElmParserExpression_InfixOperatorInfo) -> Result_Result<String, intermediate>, _ afterCommitting: @Sendable @escaping (intermediate) -> ParserFast_Parser<res>) ->  ParserFast_Parser<res> {
    ParserFast_whileWithoutLinebreakAnd2PartUtf16ToResultAndThen(
        ElmParserTokens_isOperatorSymbolChar,
        { (operator_: String) in
            switch operator_ {
            case "|>":
                toResult(ElmParserExpression_precedence1ApR)
            case "++":
                toResult(ElmParserExpression_precedence5append)
            case "<|":
                toResult(ElmParserExpression_precedence1ApL)
            case ">>":
                toResult(ElmParserExpression_precedence9ComposeR)
            case "==":
                toResult(ElmParserExpression_precedence4Eq)
            case "*":
                toResult(ElmParserExpression_precedence7Mul)
            case "::":
                toResult(ElmParserExpression_precedence5Cons)
            case "+":
                toResult(ElmParserExpression_precedence6Add)
            case "-":
                toResult(ElmParserExpression_precedence6Sub)
            case "|.":
                toResult(ElmParserExpression_precedence6Ignore)
            case "&&":
                toResult(ElmParserExpression_precedence3And)
            case "|=":
                toResult(ElmParserExpression_precedence5Keep)
            case "<<":
                toResult(ElmParserExpression_precedence9ComposeL)
            case "/=":
                toResult(ElmParserExpression_precedence4Neq)
            case "//":
                toResult(ElmParserExpression_precedence7Idiv)
            case "/":
                toResult(ElmParserExpression_precedence7Fdiv)
            case "</>":
                toResult(ElmParserExpression_precedence7Slash)
            case "||":
                toResult(ElmParserExpression_precedence2Or)
            case "<=":
                toResult(ElmParserExpression_precedence4Le)
            case ">=":
                toResult(ElmParserExpression_precedence4Ge)
            case ">":
                toResult(ElmParserExpression_precedence4Gt)
            case "<?>":
                toResult(ElmParserExpression_precedence8QuestionMark)
            case "<":
                toResult(ElmParserExpression_precedence4Lt)
            case "^":
                toResult(ElmParserExpression_precedence8Pow)
            case _:
                ElmParserExpression_errUnknownInfixOperator()
            }
        },
        afterCommitting
    )
}

@Sendable public static func ElmParserExpression_infixRight(_ leftPrecedence: Double, _ symbol: String) ->  Generated_extensionRight_leftPrecedence_symbol<ParserFast_Parser<ParserWithComments_WithComments<ElmParserExpression_ExtensionRight>>, Double, String> {
    Generated_extensionRight_leftPrecedence_symbol.Record(
        extensionRight:
            ParserFast_map2(
                { (commentsBeforeFirst: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (first: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(first.comments, commentsBeforeFirst), syntax: ElmParserExpression_ExtensionRight.ElmParserExpression_ExtendRightByOperation(Generated_direction_expression_symbol.Record(direction: ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Right, expression: first.syntax, symbol: symbol))) } },
                ElmParserLayout_maybeLayout,
                ElmParserExpression_extendedSubExpressionOptimisticLayout(
                    { (info: Generated_extensionRight_leftPrecedence_symbol<ParserFast_Parser<ParserWithComments_WithComments<ElmParserExpression_ExtensionRight>>, Double, String>) in
                        if Basics_ge(info.leftPrecedence, leftPrecedence) {
                            Result_Result.Result_Ok(info)
                        } else {
                            ElmParserExpression_temporaryErrPrecedenceTooHigh()
                        }
                    },
                    { (generated_record: Generated_extensionRight_leftPrecedence_symbol<ParserFast_Parser<ParserWithComments_WithComments<ElmParserExpression_ExtensionRight>>, Double, String>) in generated_record.extensionRight }
                )
            ),
        leftPrecedence: leftPrecedence,
        symbol: symbol
    )
}

@Sendable public static func ElmParserExpression_multiRecordAccessMap<res: Sendable>(_ fieldsToRes: @Sendable @escaping (List_List<ElmSyntaxNode_Node<String>>) -> res) ->  ParserFast_Parser<res> {
    ParserFast_loopWhileSucceeds(ParserFast_symbolFollowedBy(".", ElmParserTokens_functionNameNode), List_List.List_Empty, { (generated_left: ElmSyntaxNode_Node<String>) in { (generated_right: List_List<ElmSyntaxNode_Node<String>>) in List_cons(generated_left, generated_right) } }, { (reversed: List_List<ElmSyntaxNode_Node<String>>) in fieldsToRes(List_reverse(reversed)) })
}

@Sendable public static func ElmParserExpression_negationWhitespaceProblem<a: Sendable>() ->  ParserFast_Parser<a> {
    ParserFast_problem("if a negation sign is not preceded by whitespace, it's considered subtraction")
}

@Sendable public static func ElmParserExpression_problemCannotMixNonAssociativeInfixOperators<a: Sendable>() ->  ParserFast_Parser<a> {
    ParserFast_problem("cannot mix non-associative infix operators without parenthesis")
}

@Sendable public static func ElmParserExpression_rangeMoveStartLeftByOneColumn(_ range: Generated_end_start<ElmSyntaxRange_Location, Generated_column_row<Double, Double>>) ->  Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location> {
    Generated_end_start.Record(end: range.end, start: Generated_column_row.Record(column: Basics_sub(range.start.column, 1.0), row: range.start.row))
}

@Sendable public static func ElmParserExpression_temporaryErrPrecedenceTooHigh<a: Sendable>() ->  Result_Result<String, a> {
    Result_Result.Result_Err("infix operator precedence too high")
}

@Sendable public static func ElmParserLayout_endsPositivelyIndented<a: Sendable>(_ parser: ParserFast_Parser<a>) ->  ParserFast_Parser<a> {
    ParserFast_validateEndColumnIndentation({ (column: Double) in { (indent: Double) in Basics_gt(column, indent) } }, "must be positively indented", parser)
}

@Sendable public static func ElmParserLayout_endsTopIndented<a: Sendable>(_ parser: ParserFast_Parser<a>) ->  ParserFast_Parser<a> {
    ParserFast_validateEndColumnIndentation({ (column: Double) in { (indent: Double) in Basics_eq(Basics_sub(column, indent), 0.0) } }, "must be on top indentation", parser)
}

@Sendable public static func ElmParserLayout_layoutStrictFollowedBy<syntax: Sendable>(_ nextParser: ParserFast_Parser<syntax>) ->  ParserFast_Parser<Generated_comments_syntax<ParserWithComments_Comments, syntax>> {
    ParserFast_map2({ (commentsBefore: ParserWithComments_Comments) in { (after: syntax) in Generated_comments_syntax.Record(comments: commentsBefore, syntax: after) } }, ElmParserLayout_optimisticLayout, ElmParserLayout_onTopIndentationFollowedBy(nextParser))
}

@Sendable public static func ElmParserLayout_layoutStrictFollowedByComments(_ nextParser: ParserFast_Parser<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>>) ->  ParserFast_Parser<Rope_Rope<ElmSyntaxNode_Node<String>>> {
    ParserFast_map2({ (commentsBefore: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (afterComments: Rope_Rope<ElmSyntaxNode_Node<String>>) in Rope_prependTo(afterComments, commentsBefore) } }, ElmParserLayout_optimisticLayout, ElmParserLayout_onTopIndentationFollowedBy(nextParser))
}

@Sendable public static func ElmParserLayout_layoutStrictFollowedByWithComments<syntax: Sendable>(_ nextParser: ParserFast_Parser<Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, syntax>>) ->  ParserFast_Parser<Generated_comments_syntax<ParserWithComments_Comments, syntax>> {
    ParserFast_map2({ (commentsBefore: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (after: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, syntax>) in Generated_comments_syntax.Record(comments: Rope_prependTo(after.comments, commentsBefore), syntax: after.syntax) } }, ElmParserLayout_optimisticLayout, ElmParserLayout_onTopIndentationFollowedBy(nextParser))
}

@Sendable public static func ElmParserLayout_maybeAroundBothSides<b: Sendable>(_ x: ParserFast_Parser<Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, b>>) ->  ParserFast_Parser<Generated_comments_syntax<ParserWithComments_Comments, b>> {
    ParserFast_map3({ (before: Rope_Rope<ElmSyntaxNode_Node<String>>) in { (v: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, b>) in { (after: Rope_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: Rope_prependTo(after, Rope_prependTo(v.comments, before)), syntax: v.syntax) } } }, ElmParserLayout_maybeLayout, x, ElmParserLayout_maybeLayout)
}

@Sendable public static func ElmParserLayout_moduleLevelIndentationFollowedBy<a: Sendable>(_ nextParser: ParserFast_Parser<a>) ->  ParserFast_Parser<a> {
    ParserFast_columnAndThen(
        { (column: Double) in
            if Basics_eq(column, 1.0) {
                nextParser
            } else {
                ElmParserLayout_problemModuleLevelIndentation()
            }
        }
    )
}

@Sendable public static func ElmParserLayout_onTopIndentationFollowedBy<a: Sendable>(_ nextParser: ParserFast_Parser<a>) ->  ParserFast_Parser<a> {
    ParserFast_columnIndentAndThen(
        { (column: Double) in
            { (indent: Double) in
                if Basics_eq(Basics_sub(column, indent), 0.0) {
                    nextParser
                } else {
                    ElmParserLayout_problemTopIndentation()
                }
            }
        }
    )
}

@Sendable public static func ElmParserLayout_positivelyIndentedFollowedBy<a: Sendable>(_ nextParser: ParserFast_Parser<a>) ->  ParserFast_Parser<a> {
    ParserFast_columnIndentAndThen(
        { (column: Double) in
            { (indent: Double) in
                if Basics_gt(column, indent) {
                    nextParser
                } else {
                    ElmParserLayout_problemPositivelyIndented()
                }
            }
        }
    )
}

@Sendable public static func ElmParserLayout_positivelyIndentedPlusFollowedBy<a: Sendable>(_ extraIndent: Double, _ nextParser: ParserFast_Parser<a>) ->  ParserFast_Parser<a> {
    ParserFast_columnIndentAndThen(
        { (column: Double) in
            { (indent: Double) in
                if Basics_gt(column, Basics_add(indent, extraIndent)) {
                    nextParser
                } else {
                    ElmParserLayout_problemPositivelyIndented()
                }
            }
        }
    )
}

@Sendable public static func ElmParserLayout_problemModuleLevelIndentation<a: Sendable>() ->  ParserFast_Parser<a> {
    ParserFast_problem("must be on module-level indentation")
}

@Sendable public static func ElmParserLayout_problemPositivelyIndented<a: Sendable>() ->  ParserFast_Parser<a> {
    ParserFast_problem("must be positively indented")
}

@Sendable public static func ElmParserLayout_problemTopIndentation<a: Sendable>() ->  ParserFast_Parser<a> {
    ParserFast_problem("must be on top indentation")
}

@Sendable public static func ElmParserTokens_charToHex(_ c: UnicodeScalar) ->  Double {
    switch c {
    case "0":
        0.0
    case "1":
        1.0
    case "2":
        2.0
    case "3":
        3.0
    case "4":
        4.0
    case "5":
        5.0
    case "6":
        6.0
    case "7":
        7.0
    case "8":
        8.0
    case "9":
        9.0
    case "a":
        10.0
    case "b":
        11.0
    case "c":
        12.0
    case "d":
        13.0
    case "e":
        14.0
    case "f":
        15.0
    case "A":
        10.0
    case "B":
        11.0
    case "C":
        12.0
    case "D":
        13.0
    case "E":
        14.0
    case _:
        15.0
    }
}

@Sendable public static func ElmParserTokens_characterLiteralMapWithRange<res: Sendable>(_ rangeAndCharToRes: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (UnicodeScalar) -> res) ->  ParserFast_Parser<res> {
    ParserFast_symbolFollowedBy("'", ParserFast_followedBySymbol("'", ParserFast_oneOf2MapWithStartRowColumnAndEndRowColumn({ (startRow: Double) in { (startColumn: Double) in { (char: UnicodeScalar) in { (endRow: Double) in { (endColumn: Double) in rangeAndCharToRes(Generated_end_start.Record(end: Generated_column_row.Record(column: Basics_add(endColumn, 1.0), row: endRow), start: Generated_column_row.Record(column: Basics_sub(startColumn, 1.0), row: startRow)))(char) } } } } }, ParserFast_symbolFollowedBy("\\", ElmParserTokens_escapedCharValueMap(Basics_identity)), { (startRow: Double) in { (startColumn: Double) in { (char: UnicodeScalar) in { (endRow: Double) in { (endColumn: Double) in rangeAndCharToRes(Generated_end_start.Record(end: Generated_column_row.Record(column: Basics_add(endColumn, 1.0), row: endRow), start: Generated_column_row.Record(column: Basics_sub(startColumn, 1.0), row: startRow)))(char) } } } } }, ParserFast_anyChar)))
}

@Sendable public static func ElmParserTokens_escapedCharValueMap<res: Sendable>(_ charToRes: @Sendable @escaping (UnicodeScalar) -> res) ->  ParserFast_Parser<res> {
    ParserFast_oneOf7(ParserFast_symbol("'", charToRes("'")), ParserFast_symbol("\"", charToRes("\"")), ParserFast_symbol("n", charToRes("\n")), ParserFast_symbol("t", charToRes("\t")), ParserFast_symbol("r", charToRes("\r")), ParserFast_symbol("\\", charToRes("\\")), ParserFast_symbolFollowedBy("u{", ParserFast_followedBySymbol("}", ParserFast_ifFollowedByWhileMapWithoutLinebreak({ (hex: String) in charToRes(Char_fromCode(ElmParserTokens_hexStringToInt(hex))) }, Char_isHexDigit, Char_isHexDigit))))
}

@Sendable public static func ElmParserTokens_functionNameMapWithRange<res: Sendable>(_ rangeAndNameToResult: @Sendable @escaping (ElmSyntaxRange_Range) -> (String) -> res) ->  ParserFast_Parser<res> {
    ParserFast_ifFollowedByWhileValidateMapWithRangeWithoutLinebreak(rangeAndNameToResult, CharExtra_unicodeIsLowerFast, CharExtra_unicodeIsAlphaNumOrUnderscoreFast, ElmParserTokens_isNotReserved)
}

@Sendable public static func ElmParserTokens_hexStringToInt(_ string: String) ->  Double {
    String_foldr({ (c: UnicodeScalar) in { (soFar: Generated_exponent_result<Double, Double>) in Generated_exponent_result.Record(exponent: Basics_add(soFar.exponent, 1.0), result: Basics_add(soFar.result, Basics_mul(Basics_pow(16.0, soFar.exponent), ElmParserTokens_charToHex(c)))) } }, Generated_exponent_result.Record(exponent: 0.0, result: 0.0), string).result
}

@Sendable public static func ElmParserTokens_isAllowedOperatorToken(_ operatorCandidateToValidate: String) ->  Bool {
    switch operatorCandidateToValidate {
    case "==":
        true
    case "/=":
        true
    case "::":
        true
    case "++":
        true
    case "+":
        true
    case "*":
        true
    case "<|":
        true
    case "|>":
        true
    case "||":
        true
    case "<=":
        true
    case ">=":
        true
    case "|=":
        true
    case "|.":
        true
    case "//":
        true
    case "</>":
        true
    case "<?>":
        true
    case "^":
        true
    case "<<":
        true
    case ">>":
        true
    case "<":
        true
    case ">":
        true
    case "/":
        true
    case "&&":
        true
    case "-":
        true
    case _:
        false
    }
}

@Sendable public static func ElmParserTokens_isNotReserved(_ name: String) ->  Bool {
    switch name {
    case "module":
        false
    case "exposing":
        false
    case "import":
        false
    case "as":
        false
    case "if":
        false
    case "then":
        false
    case "else":
        false
    case "let":
        false
    case "in":
        false
    case "case":
        false
    case "of":
        false
    case "port":
        false
    case "type":
        false
    case "where":
        false
    case _:
        true
    }
}

@Sendable public static func ElmParserTokens_isOperatorSymbolChar(_ c: UnicodeScalar) ->  Bool {
    switch c {
    case "+":
        true
    case "-":
        true
    case "/":
        true
    case "*":
        true
    case "=":
        true
    case ".":
        true
    case "<":
        true
    case ">":
        true
    case ":":
        true
    case "&":
        true
    case "|":
        true
    case "^":
        true
    case "?":
        true
    case _:
        false
    }
}

@Sendable public static func ElmParserTokens_singleOrTripleQuotedStringLiteralMapWithRange<res: Sendable>(_ rangeAndStringToRes: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (String) -> res) ->  ParserFast_Parser<res> {
    ParserFast_symbolFollowedBy("\"", ParserFast_oneOf2MapWithStartRowColumnAndEndRowColumn({ (startRow: Double) in { (startColumn: Double) in { (string: String) in { (endRow: Double) in { (endColumn: Double) in rangeAndStringToRes(Generated_end_start.Record(end: Generated_column_row.Record(column: endColumn, row: endRow), start: Generated_column_row.Record(column: Basics_sub(startColumn, 1.0), row: startRow)))(string) } } } } }, ParserFast_symbolFollowedBy("\"\"", ElmParserTokens_tripleQuotedStringLiteralOfterTripleDoubleQuote), { (startRow: Double) in { (startColumn: Double) in { (string: String) in { (endRow: Double) in { (endColumn: Double) in rangeAndStringToRes(Generated_end_start.Record(end: Generated_column_row.Record(column: endColumn, row: endRow), start: Generated_column_row.Record(column: Basics_sub(startColumn, 1.0), row: startRow)))(string) } } } } }, ElmParserTokens_singleQuotedStringLiteralAfterDoubleQuote))
}

@Sendable public static func ElmParserTokens_typeNameMapWithRange<res: Sendable>(_ rangeAndNameToRes: @Sendable @escaping (ElmSyntaxRange_Range) -> (String) -> res) ->  ParserFast_Parser<res> {
    ParserFast_ifFollowedByWhileMapWithRangeWithoutLinebreak(rangeAndNameToRes, CharExtra_unicodeIsUpperFast, CharExtra_unicodeIsAlphaNumOrUnderscoreFast)
}

@Sendable public static func ElmParser_parse(_ input: String) ->  Result_Result<List_List<Generated_col_problem_row<Double, Parser_Problem, Double>>, ElmInternalRawFile_RawFile> {
    Result_map(ElmInternalRawFile_fromFile, ElmParser_parseToFile(input))
}

@Sendable public static func ElmParser_parseToFile(_ input: String) ->  Result_Result<List_List<Generated_col_problem_row<Double, Parser_Problem, Double>>, Generated_comments_declarations_imports_moduleDefinition<List_List<ElmSyntaxNode_Node<ElmSyntaxComments_Comment>>, List_List<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>, List_List<ElmSyntaxNode_Node<ElmSyntaxImport_Import>>, ElmSyntaxNode_Node<ElmSyntaxModule_Module>>> {
    ParserFast_run(ElmParserFile_file, input)
}

@Sendable public static func ElmProcessing_addDependency(_ dep: Generated_interfaces_name_version<Dictionary<ElmSyntaxModuleName_ModuleName, ElmInterface_Interface>, String, ElmDependency_Version>, _ generated_1: ElmProcessing_ProcessContext) ->  ElmProcessing_ProcessContext {
    let x: ElmProcessing_ModuleIndexInner
    switch generated_1 {
    case let ElmProcessing_ProcessContext.ElmProcessing_ProcessContext(generated_destructured_x):
        x =
            generated_destructured_x
    }
    return ElmProcessing_ProcessContext.ElmProcessing_ProcessContext(Dict_union(dep.interfaces, x))
}

@Sendable public static func ElmProcessing_addFile(_ file: ElmRawFile_RawFile, _ generated_1: ElmProcessing_ProcessContext) ->  ElmProcessing_ProcessContext {
    let context: ElmProcessing_ModuleIndexInner
    switch generated_1 {
    case let ElmProcessing_ProcessContext.ElmProcessing_ProcessContext(generated_destructured_context):
        context =
            generated_destructured_context
    }
    return ElmProcessing_ProcessContext.ElmProcessing_ProcessContext(Dict_insert(ElmRawFile_moduleName(file), ElmInterface_build(file), context))
}

@Sendable public static func ElmProcessing_process(_ generated_0: ElmProcessing_ProcessContext, _ generated_1: ElmInternalRawFile_RawFile) ->  Generated_comments_declarations_imports_moduleDefinition<List_List<ElmSyntaxNode_Node<ElmSyntaxComments_Comment>>, List_List<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>, List_List<ElmSyntaxNode_Node<ElmSyntaxImport_Import>>, ElmSyntaxNode_Node<ElmSyntaxModule_Module>> {
    let (_) =
        generated_0
    let file: ElmSyntaxFile_File
    switch generated_1 {
    case let ElmInternalRawFile_RawFile.ElmInternalRawFile_Raw(generated_destructured_file):
        file =
            generated_destructured_file
    }
    return file
}

@Sendable public static func ElmRawFile_encode(_ generated_0: ElmInternalRawFile_RawFile) ->  JsonEncode_Value {
    let file: ElmSyntaxFile_File
    switch generated_0 {
    case let ElmInternalRawFile_RawFile.ElmInternalRawFile_Raw(generated_destructured_file):
        file =
            generated_destructured_file
    }
    return ElmSyntaxFile_encode(file)
}

@Sendable public static func ElmRawFile_imports(_ generated_0: ElmInternalRawFile_RawFile) ->  List_List<Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>> {
    let file: ElmSyntaxFile_File
    switch generated_0 {
    case let ElmInternalRawFile_RawFile.ElmInternalRawFile_Raw(generated_destructured_file):
        file =
            generated_destructured_file
    }
    return List_map(ElmSyntaxNode_value, file.imports)
}

@Sendable public static func ElmRawFile_moduleName(_ generated_0: ElmInternalRawFile_RawFile) ->  List_List<String> {
    let file: ElmSyntaxFile_File
    switch generated_0 {
    case let ElmInternalRawFile_RawFile.ElmInternalRawFile_Raw(generated_destructured_file):
        file =
            generated_destructured_file
    }
    return ElmSyntaxModule_moduleName(ElmSyntaxNode_value(file.moduleDefinition))
}

@Sendable public static func ElmSyntaxComments_encode(_ generated_0: String) ->  JsonEncode_Value {
    JsonEncode_string(generated_0)
}

@Sendable public static func ElmSyntaxDeclaration_encode(_ decl: ElmSyntaxDeclaration_Declaration) ->  JsonEncode_Value {
    switch decl {
    case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_FunctionDeclaration(function):
        ElmJsonUtil_encodeTyped("function", ElmSyntaxExpression_encodeFunction(function))
    case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_AliasDeclaration(typeAlias):
        ElmJsonUtil_encodeTyped("typeAlias", ElmSyntaxTypeAlias_encode(typeAlias))
    case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_CustomTypeDeclaration(typeDeclaration):
        ElmJsonUtil_encodeTyped("typedecl", ElmSyntaxType_encode(typeDeclaration))
    case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_PortDeclaration(sig):
        ElmJsonUtil_encodeTyped("port", ElmSyntaxSignature_encode(sig))
    case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_InfixDeclaration(inf):
        ElmJsonUtil_encodeTyped("infix", ElmSyntaxInfix_encode(inf))
    case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_Destructuring(pattern, expression):
        ElmJsonUtil_encodeTyped(
            "destructuring",
            JsonEncode_object(
                Array_toList(
                    [ Tuple.Tuple("pattern", ElmSyntaxNode_encode(ElmSyntaxPattern_encode, pattern)),
                      Tuple.Tuple("expression", ElmSyntaxNode_encode(ElmSyntaxExpression_encode, expression))
                    ]
                )
            )
        )
    }
}

@Sendable public static func ElmSyntaxDocumentation_encode(_ generated_0: String) ->  JsonEncode_Value {
    JsonEncode_string(generated_0)
}

@Sendable public static func ElmSyntaxExposing_encode(_ exp: ElmSyntaxExposing_Exposing) ->  JsonEncode_Value {
    switch exp {
    case let ElmSyntaxExposing_Exposing.ElmSyntaxExposing_All(r):
        ElmJsonUtil_encodeTyped("all", ElmSyntaxRange_encode(r))
    case let ElmSyntaxExposing_Exposing.ElmSyntaxExposing_Explicit(l):
        ElmJsonUtil_encodeTyped("explicit", JsonEncode_list(ElmSyntaxExposing_encodeTopLevelExpose, l))
    }
}

@Sendable public static func ElmSyntaxExposing_encodeExposedType(_ generated_0: Generated_name_open_<String, Maybe_Maybe<ElmSyntaxRange_Range>>) ->  JsonEncode_Value {
    let name: String
    let open_: Maybe_Maybe<ElmSyntaxRange_Range>
    switch generated_0 {
    case let Generated_name_open_.Record(name: generated_destructured_name, open_: generated_destructured_open_):
        name =
            generated_destructured_name
        open_ =
            generated_destructured_open_
    }
    return
        JsonEncode_object(
            Array_toList(
                [ Tuple.Tuple("name", JsonEncode_string(name)),
                  Tuple.Tuple("open", Maybe_withDefault(JsonEncode_null, Maybe_map(ElmSyntaxRange_encode, open_)))
                ]
            )
        )
}

@Sendable public static func ElmSyntaxExposing_encodeTopLevelExpose(_ generated_0: ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>) ->  JsonEncode_Value {
    ElmSyntaxNode_encode(
        { (exp: ElmSyntaxExposing_TopLevelExpose) in
            switch exp {
            case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_InfixExpose(x):
                ElmJsonUtil_encodeTyped("infix", JsonEncode_object(List_singleton(Tuple.Tuple("name", JsonEncode_string(x)))))
            case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_FunctionExpose(x):
                ElmJsonUtil_encodeTyped("function", JsonEncode_object(List_singleton(Tuple.Tuple("name", JsonEncode_string(x)))))
            case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeOrAliasExpose(x):
                ElmJsonUtil_encodeTyped("typeOrAlias", JsonEncode_object(List_singleton(Tuple.Tuple("name", JsonEncode_string(x)))))
            case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeExpose(exposedType):
                ElmJsonUtil_encodeTyped("typeexpose", ElmSyntaxExposing_encodeExposedType(exposedType))
            }
        },
        generated_0
    )
}

@Sendable public static func ElmSyntaxExposing_exposesFunction(_ s: String, _ exposure: ElmSyntaxExposing_Exposing) ->  Bool {
    switch exposure {
    case ElmSyntaxExposing_Exposing.ElmSyntaxExposing_All(_):
        true
    case let ElmSyntaxExposing_Exposing.ElmSyntaxExposing_Explicit(l):
        List_any(
            { (generated_argument0_caseResult_case1_declarationResult_0: ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>) in
                let value: ElmSyntaxExposing_TopLevelExpose
                switch generated_argument0_caseResult_case1_declarationResult_0 {
                case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_value):
                    value =
                        generated_destructured_value
                }
                return
                    switch value {
                    case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_FunctionExpose(fun):
                        Basics_eq(fun, s)
                    case _:
                        false
                    }
            },
            l
        )
    }
}

@Sendable public static func ElmSyntaxExposing_operator(_ t: ElmSyntaxExposing_TopLevelExpose) ->  Maybe_Maybe<String> {
    switch t {
    case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_InfixExpose(s):
        Maybe_Maybe.Maybe_Just(s)
    case _:
        Maybe_Maybe.Maybe_Nothing
    }
}

@Sendable public static func ElmSyntaxExposing_operators(_ l: List_List<ElmSyntaxExposing_TopLevelExpose>) ->  List_List<String> {
    List_filterMap(ElmSyntaxExposing_operator, l)
}

@Sendable public static func ElmSyntaxExpression_encode(_ expr: ElmSyntaxExpression_Expression) ->  JsonEncode_Value {
    switch expr {
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_UnitExpr:
        ElmJsonUtil_encodeTyped("unit", JsonEncode_null)
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_Application(l):
        ElmJsonUtil_encodeTyped("application", JsonEncode_list({ (generated_called_argument0_argument1_caseResult_case1_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in ElmSyntaxNode_encode(ElmSyntaxExpression_encode, generated_called_argument0_argument1_caseResult_case1_declarationResult_1) }, l))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_OperatorApplication(op, dir, left, right):
        ElmJsonUtil_encodeTyped("operatorapplication", ElmSyntaxExpression_encodeOperatorApplication(op, dir, left, right))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_FunctionOrValue(moduleName, name):
        ElmJsonUtil_encodeTyped(
            "functionOrValue",
            JsonEncode_object(
                Array_toList(
                    [ Tuple.Tuple("moduleName", ElmSyntaxModuleName_encode(moduleName)),
                      Tuple.Tuple("name", JsonEncode_string(name))
                    ]
                )
            )
        )
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_IfBlock(c, t, e):
        ElmJsonUtil_encodeTyped(
            "ifBlock",
            JsonEncode_object(
                Array_toList(
                    [ Tuple.Tuple("clause", ElmSyntaxNode_encode(ElmSyntaxExpression_encode, c)),
                      Tuple.Tuple("then", ElmSyntaxNode_encode(ElmSyntaxExpression_encode, t)),
                      Tuple.Tuple("else", ElmSyntaxNode_encode(ElmSyntaxExpression_encode, e))
                    ]
                )
            )
        )
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_PrefixOperator(x):
        ElmJsonUtil_encodeTyped("prefixoperator", JsonEncode_string(x))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_Operator(x):
        ElmJsonUtil_encodeTyped("operator", JsonEncode_string(x))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_Hex(h):
        ElmJsonUtil_encodeTyped("hex", JsonEncode_int(h))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_Integer(x):
        ElmJsonUtil_encodeTyped("integer", JsonEncode_int(x))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_Floatable(x):
        ElmJsonUtil_encodeTyped("float", JsonEncode_float(x))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_Negation(x):
        ElmJsonUtil_encodeTyped("negation", ElmSyntaxNode_encode(ElmSyntaxExpression_encode, x))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_Literal(x):
        ElmJsonUtil_encodeTyped("literal", JsonEncode_string(x))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_CharLiteral(c):
        ElmJsonUtil_encodeTyped("charLiteral", JsonEncode_string(String_fromChar(c)))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_TupledExpression(xs):
        ElmJsonUtil_encodeTyped("tupled", JsonEncode_list({ (generated_called_argument0_argument1_caseResult_case13_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in ElmSyntaxNode_encode(ElmSyntaxExpression_encode, generated_called_argument0_argument1_caseResult_case13_declarationResult_1) }, xs))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_ListExpr(xs):
        ElmJsonUtil_encodeTyped("list", JsonEncode_list({ (generated_called_argument0_argument1_caseResult_case14_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in ElmSyntaxNode_encode(ElmSyntaxExpression_encode, generated_called_argument0_argument1_caseResult_case14_declarationResult_1) }, xs))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_ParenthesizedExpression(x):
        ElmJsonUtil_encodeTyped("parenthesized", ElmSyntaxNode_encode(ElmSyntaxExpression_encode, x))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_LetExpression(x):
        ElmJsonUtil_encodeTyped("let", ElmSyntaxExpression_encodeLetBlock(x))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_CaseExpression(x):
        ElmJsonUtil_encodeTyped("case", ElmSyntaxExpression_encodeCaseBlock(x))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_LambdaExpression(x):
        ElmJsonUtil_encodeTyped("lambda", ElmSyntaxExpression_encodeLambda(x))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordAccess(exp, name):
        ElmJsonUtil_encodeTyped(
            "recordAccess",
            JsonEncode_object(
                Array_toList(
                    [ Tuple.Tuple("expression", ElmSyntaxNode_encode(ElmSyntaxExpression_encode, exp)),
                      Tuple.Tuple("name", ElmSyntaxNode_encode(JsonEncode_string, name))
                    ]
                )
            )
        )
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordAccessFunction(x):
        ElmJsonUtil_encodeTyped("recordAccessFunction", JsonEncode_string(x))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordExpr(xs):
        ElmJsonUtil_encodeTyped("record", JsonEncode_list({ (generated_called_argument0_argument1_caseResult_case21_declarationResult_1: ElmSyntaxNode_Node<Tuple<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>) in ElmSyntaxNode_encode(ElmSyntaxExpression_encodeRecordSetter, generated_called_argument0_argument1_caseResult_case21_declarationResult_1) }, xs))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordUpdateExpression(name, updates):
        ElmJsonUtil_encodeTyped("recordUpdate", ElmSyntaxExpression_encodeRecordUpdate(name, updates))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_GLSLExpression(x):
        ElmJsonUtil_encodeTyped("glsl", JsonEncode_string(x))
    }
}

@Sendable public static func ElmSyntaxExpression_encodeCase(_ generated_0: Tuple<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) ->  JsonEncode_Value {
    let pattern: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>
    let expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
    switch generated_0 {
    case let Tuple.Tuple(generated_destructured_pattern, generated_destructured_expression):
        pattern =
            generated_destructured_pattern
        expression =
            generated_destructured_expression
    }
    return
        JsonEncode_object(
            Array_toList(
                [ Tuple.Tuple("pattern", ElmSyntaxNode_encode(ElmSyntaxPattern_encode, pattern)),
                  Tuple.Tuple("expression", ElmSyntaxNode_encode(ElmSyntaxExpression_encode, expression))
                ]
            )
        )
}

@Sendable public static func ElmSyntaxExpression_encodeCaseBlock(_ generated_0: Generated_cases_expression<ElmSyntaxExpression_Cases, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) ->  JsonEncode_Value {
    let expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
    let cases: List_List<ElmSyntaxExpression_Case>
    switch generated_0 {
    case let Generated_cases_expression.Record(cases: generated_destructured_cases, expression: generated_destructured_expression):
        cases =
            generated_destructured_cases
        expression =
            generated_destructured_expression
    }
    return
        JsonEncode_object(
            Array_toList(
                [ Tuple.Tuple("cases", JsonEncode_list(ElmSyntaxExpression_encodeCase, cases)),
                  Tuple.Tuple("expression", ElmSyntaxNode_encode(ElmSyntaxExpression_encode, expression))
                ]
            )
        )
}

@Sendable public static func ElmSyntaxExpression_encodeDestructuring(_ pattern: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, _ expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) ->  JsonEncode_Value {
    JsonEncode_object(
        Array_toList(
            [ Tuple.Tuple("pattern", ElmSyntaxNode_encode(ElmSyntaxPattern_encode, pattern)),
              Tuple.Tuple("expression", ElmSyntaxNode_encode(ElmSyntaxExpression_encode, expression))
            ]
        )
    )
}

@Sendable public static func ElmSyntaxExpression_encodeFunction(_ generated_0: Generated_declaration_documentation_signature<ElmSyntaxNode_Node<ElmSyntaxExpression_FunctionImplementation>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxSignature_Signature>>>) ->  JsonEncode_Value {
    let documentation: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>
    let signature: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxSignature_Signature>>
    let declaration: ElmSyntaxNode_Node<ElmSyntaxExpression_FunctionImplementation>
    switch generated_0 {
    case let Generated_declaration_documentation_signature.Record(declaration: generated_destructured_declaration, documentation: generated_destructured_documentation, signature: generated_destructured_signature):
        declaration =
            generated_destructured_declaration
        documentation =
            generated_destructured_documentation
        signature =
            generated_destructured_signature
    }
    return
        JsonEncode_object(
            Array_toList(
                [ Tuple.Tuple("documentation", Maybe_withDefault(JsonEncode_null, Maybe_map({ (generated_called_argument0_left_part1_0_argument0_declarationResult_1: ElmSyntaxNode_Node<String>) in ElmSyntaxNode_encode(ElmSyntaxDocumentation_encode, generated_called_argument0_left_part1_0_argument0_declarationResult_1) }, documentation))),
                  Tuple.Tuple("signature", Maybe_withDefault(JsonEncode_null, Maybe_map({ (generated_called_argument0_left_part1_1_argument0_declarationResult_1: ElmSyntaxNode_Node<Generated_name_typeAnnotation<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>>) in ElmSyntaxNode_encode(ElmSyntaxSignature_encode, generated_called_argument0_left_part1_1_argument0_declarationResult_1) }, signature))),
                  Tuple.Tuple("declaration", ElmSyntaxNode_encode(ElmSyntaxExpression_encodeFunctionDeclaration, declaration))
                ]
            )
        )
}

@Sendable public static func ElmSyntaxExpression_encodeFunctionDeclaration(_ generated_0: Generated_arguments_expression_name<List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, ElmSyntaxNode_Node<String>>) ->  JsonEncode_Value {
    let name: ElmSyntaxNode_Node<String>
    let arguments: List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>
    let expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
    switch generated_0 {
    case let Generated_arguments_expression_name.Record(arguments: generated_destructured_arguments, expression: generated_destructured_expression, name: generated_destructured_name):
        arguments =
            generated_destructured_arguments
        expression =
            generated_destructured_expression
        name =
            generated_destructured_name
    }
    return
        JsonEncode_object(
            Array_toList(
                [ Tuple.Tuple("name", ElmSyntaxNode_encode(JsonEncode_string, name)),
                  Tuple.Tuple("arguments", JsonEncode_list({ (generated_called_argument0_part1_1_argument0_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in ElmSyntaxNode_encode(ElmSyntaxPattern_encode, generated_called_argument0_part1_1_argument0_declarationResult_1) }, arguments)),
                  Tuple.Tuple("expression", ElmSyntaxNode_encode(ElmSyntaxExpression_encode, expression))
                ]
            )
        )
}

@Sendable public static func ElmSyntaxExpression_encodeLambda(_ generated_0: Generated_args_expression<List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) ->  JsonEncode_Value {
    let args: List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>
    let expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
    switch generated_0 {
    case let Generated_args_expression.Record(args: generated_destructured_args, expression: generated_destructured_expression):
        args =
            generated_destructured_args
        expression =
            generated_destructured_expression
    }
    return
        JsonEncode_object(
            Array_toList(
                [ Tuple.Tuple("patterns", JsonEncode_list({ (generated_called_argument0_part1_0_argument0_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in ElmSyntaxNode_encode(ElmSyntaxPattern_encode, generated_called_argument0_part1_0_argument0_declarationResult_1) }, args)),
                  Tuple.Tuple("expression", ElmSyntaxNode_encode(ElmSyntaxExpression_encode, expression))
                ]
            )
        )
}

@Sendable public static func ElmSyntaxExpression_encodeLetBlock(_ generated_0: Generated_declarations_expression<List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) ->  JsonEncode_Value {
    let declarations: List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>
    let expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
    switch generated_0 {
    case let Generated_declarations_expression.Record(declarations: generated_destructured_declarations, expression: generated_destructured_expression):
        declarations =
            generated_destructured_declarations
        expression =
            generated_destructured_expression
    }
    return
        JsonEncode_object(
            Array_toList(
                [ Tuple.Tuple("declarations", JsonEncode_list({ (generated_called_argument0_part1_0_argument0_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>) in ElmSyntaxNode_encode(ElmSyntaxExpression_encodeLetDeclaration, generated_called_argument0_part1_0_argument0_declarationResult_1) }, declarations)),
                  Tuple.Tuple("expression", ElmSyntaxNode_encode(ElmSyntaxExpression_encode, expression))
                ]
            )
        )
}

@Sendable public static func ElmSyntaxExpression_encodeLetDeclaration(_ letDeclaration: ElmSyntaxExpression_LetDeclaration) ->  JsonEncode_Value {
    switch letDeclaration {
    case let ElmSyntaxExpression_LetDeclaration.ElmSyntaxExpression_LetFunction(f):
        ElmJsonUtil_encodeTyped("function", ElmSyntaxExpression_encodeFunction(f))
    case let ElmSyntaxExpression_LetDeclaration.ElmSyntaxExpression_LetDestructuring(pattern, expression):
        ElmJsonUtil_encodeTyped("destructuring", ElmSyntaxExpression_encodeDestructuring(pattern, expression))
    }
}

@Sendable public static func ElmSyntaxExpression_encodeOperatorApplication(_ operator_: String, _ direction: ElmSyntaxInfix_InfixDirection, _ left: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, _ right: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) ->  JsonEncode_Value {
    JsonEncode_object(
        Array_toList(
            [ Tuple.Tuple("operator", JsonEncode_string(operator_)),
              Tuple.Tuple("direction", ElmSyntaxInfix_encodeDirection(direction)),
              Tuple.Tuple("left", ElmSyntaxNode_encode(ElmSyntaxExpression_encode, left)),
              Tuple.Tuple("right", ElmSyntaxNode_encode(ElmSyntaxExpression_encode, right))
            ]
        )
    )
}

@Sendable public static func ElmSyntaxExpression_encodeRecordSetter(_ generated_0: Tuple<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) ->  JsonEncode_Value {
    let field: ElmSyntaxNode_Node<String>
    let expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
    switch generated_0 {
    case let Tuple.Tuple(generated_destructured_field, generated_destructured_expression):
        field =
            generated_destructured_field
        expression =
            generated_destructured_expression
    }
    return
        JsonEncode_object(
            Array_toList(
                [ Tuple.Tuple("field", ElmSyntaxNode_encode(JsonEncode_string, field)),
                  Tuple.Tuple("expression", ElmSyntaxNode_encode(ElmSyntaxExpression_encode, expression))
                ]
            )
        )
}

@Sendable public static func ElmSyntaxExpression_encodeRecordUpdate(_ name: ElmSyntaxNode_Node<String>, _ updates: List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_RecordSetter>>) ->  JsonEncode_Value {
    JsonEncode_object(
        Array_toList(
            [ Tuple.Tuple("name", ElmSyntaxNode_encode(JsonEncode_string, name)),
              Tuple.Tuple("updates", JsonEncode_list({ (generated_called_argument0_part1_1_argument0_declarationResult_1: ElmSyntaxNode_Node<Tuple<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>) in ElmSyntaxNode_encode(ElmSyntaxExpression_encodeRecordSetter, generated_called_argument0_part1_1_argument0_declarationResult_1) }, updates))
            ]
        )
    )
}

@Sendable public static func ElmSyntaxExpression_functionRange(_ function: Generated_declaration_documentation_signature<ElmSyntaxNode_Node<ElmSyntaxExpression_FunctionImplementation>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxSignature_Signature>>>) ->  Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location> {
    let generated_let_declarationResult_declarationRange: ElmSyntaxRange_Range =
        ElmSyntaxNode_range(function.declaration)
    let generated_let_declarationResult_startRange: ElmSyntaxRange_Range =
        switch function.documentation {
        case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, _)):
            range
        case Maybe_Maybe.Maybe_Nothing:
            switch function.signature {
            case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(range, _)):
                range
            case Maybe_Maybe.Maybe_Nothing:
                generated_let_declarationResult_declarationRange
            }
        }
    return Generated_end_start.Record(end: generated_let_declarationResult_declarationRange.end, start: generated_let_declarationResult_startRange.start)
}

@Sendable public static func ElmSyntaxExpression_isCase(_ e: ElmSyntaxExpression_Expression) ->  Bool {
    switch e {
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_CaseExpression(_):
        true
    case _:
        false
    }
}

@Sendable public static func ElmSyntaxExpression_isIfElse(_ e: ElmSyntaxExpression_Expression) ->  Bool {
    switch e {
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_IfBlock(_, _, _):
        true
    case _:
        false
    }
}

@Sendable public static func ElmSyntaxExpression_isLambda(_ e: ElmSyntaxExpression_Expression) ->  Bool {
    switch e {
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_LambdaExpression(_):
        true
    case _:
        false
    }
}

@Sendable public static func ElmSyntaxExpression_isLet(_ e: ElmSyntaxExpression_Expression) ->  Bool {
    switch e {
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_LetExpression(_):
        true
    case _:
        false
    }
}

@Sendable public static func ElmSyntaxExpression_isOperatorApplication(_ e: ElmSyntaxExpression_Expression) ->  Bool {
    switch e {
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_OperatorApplication(_, _, _, _):
        true
    case _:
        false
    }
}

@Sendable public static func ElmSyntaxFile_encode(_ generated_0: Generated_comments_declarations_imports_moduleDefinition<List_List<ElmSyntaxNode_Node<ElmSyntaxComments_Comment>>, List_List<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>, List_List<ElmSyntaxNode_Node<ElmSyntaxImport_Import>>, ElmSyntaxNode_Node<ElmSyntaxModule_Module>>) ->  JsonEncode_Value {
    let moduleDefinition: ElmSyntaxNode_Node<ElmSyntaxModule_Module>
    let imports: List_List<ElmSyntaxNode_Node<ElmSyntaxImport_Import>>
    let declarations: List_List<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>
    let comments: List_List<ElmSyntaxNode_Node<ElmSyntaxComments_Comment>>
    switch generated_0 {
    case let Generated_comments_declarations_imports_moduleDefinition.Record(comments: generated_destructured_comments, declarations: generated_destructured_declarations, imports: generated_destructured_imports, moduleDefinition: generated_destructured_moduleDefinition):
        comments =
            generated_destructured_comments
        declarations =
            generated_destructured_declarations
        imports =
            generated_destructured_imports
        moduleDefinition =
            generated_destructured_moduleDefinition
    }
    return
        JsonEncode_object(
            Array_toList(
                [ Tuple.Tuple("moduleDefinition", ElmSyntaxNode_encode(ElmSyntaxModule_encode, moduleDefinition)),
                  Tuple.Tuple("imports", JsonEncode_list({ (generated_called_argument0_part1_1_argument0_declarationResult_1: ElmSyntaxNode_Node<Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>>) in ElmSyntaxNode_encode(ElmSyntaxImport_encode, generated_called_argument0_part1_1_argument0_declarationResult_1) }, imports)),
                  Tuple.Tuple("declarations", JsonEncode_list({ (generated_called_argument0_part1_2_argument0_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>) in ElmSyntaxNode_encode(ElmSyntaxDeclaration_encode, generated_called_argument0_part1_2_argument0_declarationResult_1) }, declarations)),
                  Tuple.Tuple("comments", JsonEncode_list({ (generated_called_argument0_part1_3_argument0_declarationResult_1: ElmSyntaxNode_Node<String>) in ElmSyntaxNode_encode(ElmSyntaxComments_encode, generated_called_argument0_part1_3_argument0_declarationResult_1) }, comments))
                ]
            )
        )
}

@Sendable public static func ElmSyntaxImport_encode(_ generated_0: Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>) ->  JsonEncode_Value {
    let moduleName: ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>
    let moduleAlias: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>
    let exposingList: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>
    switch generated_0 {
    case let Generated_exposingList_moduleAlias_moduleName.Record(exposingList: generated_destructured_exposingList, moduleAlias: generated_destructured_moduleAlias, moduleName: generated_destructured_moduleName):
        exposingList =
            generated_destructured_exposingList
        moduleAlias =
            generated_destructured_moduleAlias
        moduleName =
            generated_destructured_moduleName
    }
    return
        JsonEncode_object(
            Array_toList(
                [ Tuple.Tuple("moduleName", ElmSyntaxNode_encode(ElmSyntaxModuleName_encode, moduleName)),
                  Tuple.Tuple("moduleAlias", Maybe_withDefault(JsonEncode_null, Maybe_map({ (generated_called_argument0_right_left_part1_1_argument0_declarationResult_1: ElmSyntaxNode_Node<List_List<String>>) in ElmSyntaxNode_encode(ElmSyntaxModuleName_encode, generated_called_argument0_right_left_part1_1_argument0_declarationResult_1) }, moduleAlias))),
                  Tuple.Tuple("exposingList", Maybe_withDefault(JsonEncode_null, Maybe_map({ (generated_called_argument0_right_left_part1_2_argument0_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>) in ElmSyntaxNode_encode(ElmSyntaxExposing_encode, generated_called_argument0_right_left_part1_2_argument0_declarationResult_1) }, exposingList)))
                ]
            )
        )
}

@Sendable public static func ElmSyntaxInfix_encode(_ inf: Generated_direction_function_operator__precedence<ElmSyntaxNode_Node<ElmSyntaxInfix_InfixDirection>, ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<Double>>) ->  JsonEncode_Value {
    JsonEncode_object(
        Array_toList(
            [ Tuple.Tuple("direction", ElmSyntaxNode_encode(ElmSyntaxInfix_encodeDirection, inf.direction)),
              Tuple.Tuple("precedence", ElmSyntaxNode_encode(JsonEncode_int, inf.precedence)),
              Tuple.Tuple("operator", ElmSyntaxNode_encode(JsonEncode_string, inf.operator_)),
              Tuple.Tuple("function", ElmSyntaxNode_encode(JsonEncode_string, inf.function))
            ]
        )
    )
}

@Sendable public static func ElmSyntaxInfix_encodeDirection(_ d: ElmSyntaxInfix_InfixDirection) ->  JsonEncode_Value {
    switch d {
    case ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Left:
        JsonEncode_string("left")
    case ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Right:
        JsonEncode_string("right")
    case ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Non:
        JsonEncode_string("non")
    }
}

@Sendable public static func ElmSyntaxModuleName_encode(_ generated_0: List_List<String>) ->  JsonEncode_Value {
    JsonEncode_list(JsonEncode_string, generated_0)
}

@Sendable public static func ElmSyntaxModule_encode(_ m: ElmSyntaxModule_Module) ->  JsonEncode_Value {
    switch m {
    case let ElmSyntaxModule_Module.ElmSyntaxModule_NormalModule(d):
        ElmJsonUtil_encodeTyped("normal", ElmSyntaxModule_encodeDefaultModuleData(d))
    case let ElmSyntaxModule_Module.ElmSyntaxModule_PortModule(d):
        ElmJsonUtil_encodeTyped("port", ElmSyntaxModule_encodeDefaultModuleData(d))
    case let ElmSyntaxModule_Module.ElmSyntaxModule_EffectModule(d):
        ElmJsonUtil_encodeTyped("effect", ElmSyntaxModule_encodeEffectModuleData(d))
    }
}

@Sendable public static func ElmSyntaxModule_encodeDefaultModuleData(_ moduleData: Generated_exposingList_moduleName<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>) ->  JsonEncode_Value {
    JsonEncode_object(
        Array_toList(
            [ Tuple.Tuple("moduleName", ElmSyntaxNode_encode(ElmSyntaxModuleName_encode, moduleData.moduleName)),
              Tuple.Tuple("exposingList", ElmSyntaxNode_encode(ElmSyntaxExposing_encode, moduleData.exposingList))
            ]
        )
    )
}

@Sendable public static func ElmSyntaxModule_encodeEffectModuleData(_ moduleData: Generated_command_exposingList_moduleName_subscription<Maybe_Maybe<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>, Maybe_Maybe<ElmSyntaxNode_Node<String>>>) ->  JsonEncode_Value {
    JsonEncode_object(
        Array_toList(
            [ Tuple.Tuple("moduleName", ElmSyntaxNode_encode(ElmSyntaxModuleName_encode, moduleData.moduleName)),
              Tuple.Tuple("exposingList", ElmSyntaxNode_encode(ElmSyntaxExposing_encode, moduleData.exposingList)),
              Tuple.Tuple("command", Maybe_withDefault(JsonEncode_null, Maybe_map({ (generated_called_argument0_right_left_part1_2_argument0_declarationResult_1: ElmSyntaxNode_Node<String>) in ElmSyntaxNode_encode(JsonEncode_string, generated_called_argument0_right_left_part1_2_argument0_declarationResult_1) }, moduleData.command))),
              Tuple.Tuple("subscription", Maybe_withDefault(JsonEncode_null, Maybe_map({ (generated_called_argument0_right_left_part1_3_argument0_declarationResult_1: ElmSyntaxNode_Node<String>) in ElmSyntaxNode_encode(JsonEncode_string, generated_called_argument0_right_left_part1_3_argument0_declarationResult_1) }, moduleData.subscription)))
            ]
        )
    )
}

@Sendable public static func ElmSyntaxModule_exposingList(_ m: ElmSyntaxModule_Module) ->  ElmSyntaxExposing_Exposing {
    switch m {
    case let ElmSyntaxModule_Module.ElmSyntaxModule_NormalModule(x):
        ElmSyntaxNode_value(x.exposingList)
    case let ElmSyntaxModule_Module.ElmSyntaxModule_PortModule(x):
        ElmSyntaxNode_value(x.exposingList)
    case let ElmSyntaxModule_Module.ElmSyntaxModule_EffectModule(x):
        ElmSyntaxNode_value(x.exposingList)
    }
}

@Sendable public static func ElmSyntaxModule_isEffectModule(_ m: ElmSyntaxModule_Module) ->  Bool {
    switch m {
    case ElmSyntaxModule_Module.ElmSyntaxModule_EffectModule(_):
        true
    case _:
        false
    }
}

@Sendable public static func ElmSyntaxModule_isPortModule(_ m: ElmSyntaxModule_Module) ->  Bool {
    switch m {
    case ElmSyntaxModule_Module.ElmSyntaxModule_PortModule(_):
        true
    case _:
        false
    }
}

@Sendable public static func ElmSyntaxModule_moduleName(_ m: ElmSyntaxModule_Module) ->  List_List<String> {
    switch m {
    case let ElmSyntaxModule_Module.ElmSyntaxModule_NormalModule(x):
        ElmSyntaxNode_value(x.moduleName)
    case let ElmSyntaxModule_Module.ElmSyntaxModule_PortModule(x):
        ElmSyntaxNode_value(x.moduleName)
    case let ElmSyntaxModule_Module.ElmSyntaxModule_EffectModule(x):
        ElmSyntaxNode_value(x.moduleName)
    }
}

@Sendable public static func ElmSyntaxNode_combine<a: Sendable, b: Sendable, c: Sendable>(_ f: @Sendable @escaping (ElmSyntaxNode_Node<a>) -> (ElmSyntaxNode_Node<b>) -> c, _ generated_1: ElmSyntaxNode_Node<a>, _ generated_2: ElmSyntaxNode_Node<b>) ->  ElmSyntaxNode_Node<c> {
    let a: ElmSyntaxNode_Node<a>
    let start: ElmSyntaxRange_Location
    let (generated_destructured_a) =
        generated_1
    a =
        generated_destructured_a
    switch a {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: _, start: generated_destructured_start), _):
        start =
            generated_destructured_start
    }
    let b: ElmSyntaxNode_Node<b>
    let end: ElmSyntaxRange_Location
    let (generated_destructured_b) =
        generated_2
    b =
        generated_destructured_b
    switch b {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_destructured_end, start: _), _):
        end =
            generated_destructured_end
    }
    return ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: end, start: start), f(a)(b))
}

@Sendable public static func ElmSyntaxNode_decoder<a: Sendable>(_ sub: JsonDecode_Decoder<a>) ->  JsonDecode_Decoder<ElmSyntaxNode_Node<a>> {
    JsonDecode_map2({ (generated_0_argument0_declarationResult: ElmSyntaxRange_Range) in { (generated_1_argument0_declarationResult: a) in ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_0_argument0_declarationResult, generated_1_argument0_declarationResult) } }, JsonDecode_field("range", ElmSyntaxRange_decoder), JsonDecode_field("value", sub))
}

@Sendable public static func ElmSyntaxNode_empty<a: Sendable>(_ a: a) ->  ElmSyntaxNode_Node<a> {
    ElmSyntaxNode_Node.ElmSyntaxNode_Node(ElmSyntaxRange_empty, a)
}

@Sendable public static func ElmSyntaxNode_encode<a: Sendable>(_ f: @Sendable @escaping (a) -> JsonEncode_Value, _ generated_1: ElmSyntaxNode_Node<a>) ->  JsonEncode_Value {
    let r: ElmSyntaxRange_Range
    let v: a
    switch generated_1 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_r, generated_destructured_v):
        r =
            generated_destructured_r
        v =
            generated_destructured_v
    }
    return
        JsonEncode_object(
            Array_toList(
                [ Tuple.Tuple("range", ElmSyntaxRange_encode(r)),
                  Tuple.Tuple("value", f(v))
                ]
            )
        )
}

@Sendable public static func ElmSyntaxNode_map<a: Sendable, b: Sendable>(_ f: @Sendable @escaping (a) -> b, _ generated_1: ElmSyntaxNode_Node<a>) ->  ElmSyntaxNode_Node<b> {
    let r: ElmSyntaxRange_Range
    let a: a
    switch generated_1 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_r, generated_destructured_a):
        r =
            generated_destructured_r
        a =
            generated_destructured_a
    }
    return ElmSyntaxNode_Node.ElmSyntaxNode_Node(r, f(a))
}

@Sendable public static func ElmSyntaxNode_range<a: Sendable>(_ generated_0: ElmSyntaxNode_Node<a>) ->  Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location> {
    let r: ElmSyntaxRange_Range
    switch generated_0 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_r, _):
        r =
            generated_destructured_r
    }
    return r
}

@Sendable public static func ElmSyntaxNode_value<a: Sendable>(_ generated_0: ElmSyntaxNode_Node<a>) ->  a {
    let v: a
    switch generated_0 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_v):
        v =
            generated_destructured_v
    }
    return v
}

@Sendable public static func ElmSyntaxParserLenient_applyExtensionRight(_ generated_0: ElmSyntaxParserLenient_ExtensionRight, _ leftNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) ->  ElmSyntaxNode_Node<ElmSyntaxExpression_Expression> {
    let operation: Generated_direction_expression_symbol<ElmSyntaxInfix_InfixDirection, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, String>
    switch generated_0 {
    case let ElmSyntaxParserLenient_ExtensionRight.ElmSyntaxParserLenient_ExtendRightByOperation(generated_destructured_operation):
        operation =
            generated_destructured_operation
    }
    let generated_let_declarationResult_leftRange: ElmSyntaxRange_Range
    switch leftNode {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_leftRange, _):
        generated_let_declarationResult_leftRange =
            generated_destructured_leftRange
    }
    let generated_let_declarationResult_rightExpressionRange: ElmSyntaxRange_Range
    switch operation.expression {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_rightExpressionRange, _):
        generated_let_declarationResult_rightExpressionRange =
            generated_destructured_rightExpressionRange
    }
    return ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_declarationResult_rightExpressionRange.end, start: generated_let_declarationResult_leftRange.start), ElmSyntaxExpression_Expression.ElmSyntaxExpression_OperatorApplication(operation.symbol, operation.direction, leftNode, operation.expression))
}

@Sendable public static func ElmSyntaxParserLenient_charToHex(_ c: UnicodeScalar) ->  Double {
    switch c {
    case "0":
        0.0
    case "1":
        1.0
    case "2":
        2.0
    case "3":
        3.0
    case "4":
        4.0
    case "5":
        5.0
    case "6":
        6.0
    case "7":
        7.0
    case "8":
        8.0
    case "9":
        9.0
    case "a":
        10.0
    case "b":
        11.0
    case "c":
        12.0
    case "d":
        13.0
    case "e":
        14.0
    case "f":
        15.0
    case "A":
        10.0
    case "B":
        11.0
    case "C":
        12.0
    case "D":
        13.0
    case "E":
        14.0
    case _:
        15.0
    }
}

@Sendable public static func ElmSyntaxParserLenient_characterLiteralMapWithRange<res: Sendable>(_ rangeAndCharToRes: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (UnicodeScalar) -> res) ->  ParserLenient_Parser<res> {
    ParserLenient_symbolFollowedBy("'", ParserLenient_followedBySymbol("'", ParserLenient_oneOf2MapWithStartRowColumnAndEndRowColumn({ (startRow: Double) in { (startColumn: Double) in { (char: UnicodeScalar) in { (endRow: Double) in { (endColumn: Double) in rangeAndCharToRes(Generated_end_start.Record(end: Generated_column_row.Record(column: Basics_add(endColumn, 1.0), row: endRow), start: Generated_column_row.Record(column: Basics_sub(startColumn, 1.0), row: startRow)))(char) } } } } }, ParserLenient_symbolFollowedBy("\\", ElmSyntaxParserLenient_escapedCharValueMap(Basics_identity)), { (startRow: Double) in { (startColumn: Double) in { (char: UnicodeScalar) in { (endRow: Double) in { (endColumn: Double) in rangeAndCharToRes(Generated_end_start.Record(end: Generated_column_row.Record(column: Basics_add(endColumn, 1.0), row: endRow), start: Generated_column_row.Record(column: Basics_sub(startColumn, 1.0), row: startRow)))(char) } } } } }, ParserLenient_anyChar)))
}

@Sendable public static func ElmSyntaxParserLenient_commentsRopeEmptySyntaxListEmpty<a: Sendable>() ->  Generated_comments_syntax<ElmSyntaxParserLenient_Comments, List_List<a>> {
    Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropeEmpty(), syntax: List_List.List_Empty)
}

@Sendable public static func ElmSyntaxParserLenient_commentsToList(_ comments: Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>) ->  List_List<ElmSyntaxNode_Node<String>> {
    ElmSyntaxParserLenient_ropeToList(comments)
}

@Sendable public static func ElmSyntaxParserLenient_declarationIsPort(_ syntaxDeclaration: ElmSyntaxDeclaration_Declaration) ->  Bool {
    switch syntaxDeclaration {
    case ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_PortDeclaration(_):
        true
    case ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_FunctionDeclaration(_):
        false
    case ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_AliasDeclaration(_):
        false
    case ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_CustomTypeDeclaration(_):
        false
    case ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_InfixDeclaration(_):
        false
    case ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_Destructuring(_, _):
        false
    }
}

@Sendable public static func ElmSyntaxParserLenient_endsTopIndented<a: Sendable>(_ parser: ParserLenient_Parser<a>) ->  ParserLenient_Parser<a> {
    ParserLenient_validateEndColumnIndentation(
        { (column: Double) in
            { (indent: List_List<Double>) in
                switch indent {
                case List_List.List_Empty:
                    Basics_eq(column, 1.0)
                case let List_List.List_Cons(highestIndent, _):
                    Basics_eq(Basics_sub(column, highestIndent), 0.0)
                }
            }
        },
        parser
    )
}

@Sendable public static func ElmSyntaxParserLenient_escapedCharValueMap<res: Sendable>(_ charToRes: @Sendable @escaping (UnicodeScalar) -> res) ->  ParserLenient_Parser<res> {
    ParserLenient_oneOf7(ParserLenient_symbol("'", charToRes("'")), ParserLenient_symbol("\"", charToRes("\"")), ParserLenient_symbol("n", charToRes("\n")), ParserLenient_symbol("t", charToRes("\t")), ParserLenient_symbol("r", charToRes("\r")), ParserLenient_symbol("\\", charToRes("\\")), ParserLenient_symbolFollowedBy("u{", ParserLenient_followedBySymbol("}", ParserLenient_ifFollowedByWhileMapWithoutLinebreak({ (hex: String) in charToRes(Char_fromCode(ElmSyntaxParserLenient_hexStringToInt(hex))) }, Char_isHexDigit, Char_isHexDigit))))
}

@Sendable public static func ElmSyntaxParserLenient_exposingWithinParensExplicitFollowedByWhitespaceAndCommentsMap<syntax: Sendable>(_ exposingToSyntax: @Sendable @escaping (ElmSyntaxExposing_Exposing) -> syntax) ->  ParserLenient_Parser<Generated_comments_syntax<ElmSyntaxParserLenient_Comments, syntax>> {
    ParserLenient_map4({ (commentsBeforeHeadElement: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (headElement: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>) in { (commentsAfterHeadElement: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (tailElements: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(tailElements.comments, ElmSyntaxParserLenient_ropePrependTo(commentsAfterHeadElement, ElmSyntaxParserLenient_ropePrependTo(headElement.comments, commentsBeforeHeadElement))), syntax: exposingToSyntax(ElmSyntaxExposing_Exposing.ElmSyntaxExposing_Explicit(List_cons(headElement.syntax, tailElements.syntax)))) } } } }, ParserLenient_orSucceed(ParserLenient_symbolFollowedBy(",", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_ropeEmpty()), ElmSyntaxParserLenient_expose, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_manyWithComments(ParserLenient_symbolFollowedBy(",", ParserLenient_map4({ (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (commentsWithExtraComma: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (result: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>) in { (commentsAfter: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfter, ElmSyntaxParserLenient_ropePrependTo(result.comments, ElmSyntaxParserLenient_ropePrependTo(commentsWithExtraComma, commentsBefore))), syntax: result.syntax) } } } }, ElmSyntaxParserLenient_whitespaceAndComments, ParserLenient_orSucceed(ParserLenient_symbolFollowedBy(",", ElmSyntaxParserLenient_whitespaceAndComments), ElmSyntaxParserLenient_ropeEmpty()), ElmSyntaxParserLenient_expose, ElmSyntaxParserLenient_whitespaceAndComments))))
}

@Sendable public static func ElmSyntaxParserLenient_extendedSubExpressionFollowedByWhitespaceAndComments(_ info: Generated_afterCommitting_validateRightPrecedence<@Sendable (ElmSyntaxParserLenient_InfixOperatorInfo) -> ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_ExtensionRight>>, @Sendable (ElmSyntaxParserLenient_InfixOperatorInfo) -> Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo>>) ->  ParserLenient_Parser<Generated_comments_syntax<ElmSyntaxParserLenient_Comments, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> {
    ParserLenient_loopWhileSucceedsOntoResultFromParser(ElmSyntaxParserLenient_infixOperatorAndThen(info), ElmSyntaxParserLenient_subExpressionMaybeAppliedFollowedByWhitespaceAndComments, { (extensionRightResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxParserLenient_ExtensionRight>) in { (leftNodeWithComments: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(extensionRightResult.comments, leftNodeWithComments.comments), syntax: ElmSyntaxParserLenient_applyExtensionRight(extensionRightResult.syntax, leftNodeWithComments.syntax)) } }, Basics_identity)
}

@Sendable public static func ElmSyntaxParserLenient_extensionRightParser(_ extensionRightInfo: Generated_afterCommitting_direction_symbol_validateRightPrecedence<@Sendable (ElmSyntaxParserLenient_InfixOperatorInfo) -> ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_ExtensionRight>>, ElmSyntaxInfix_InfixDirection, String, @Sendable (ElmSyntaxParserLenient_InfixOperatorInfo) -> Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo>>) ->  ParserLenient_Parser<Generated_comments_syntax<ElmSyntaxParserLenient_Comments, ElmSyntaxParserLenient_ExtensionRight>> {
    ParserLenient_map2(
        { (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (right: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(right.comments, commentsBefore), syntax: ElmSyntaxParserLenient_ExtensionRight.ElmSyntaxParserLenient_ExtendRightByOperation(Generated_direction_expression_symbol.Record(direction: extensionRightInfo.direction, expression: right.syntax, symbol: extensionRightInfo.symbol))) } },
        ElmSyntaxParserLenient_whitespaceAndComments,
        ParserLenient_lazy(
            { (generated_argument0_argument2_declarationResult_0: Unit) in
                let (_) =
                    generated_argument0_argument2_declarationResult_0
                return ElmSyntaxParserLenient_extendedSubExpressionFollowedByWhitespaceAndComments(Generated_afterCommitting_validateRightPrecedence.Record(afterCommitting: extensionRightInfo.afterCommitting, validateRightPrecedence: extensionRightInfo.validateRightPrecedence))
            }
        )
    )
}

@Sendable public static func ElmSyntaxParserLenient_followedByMultiArgumentApplication(_ appliedExpressionParser: ParserLenient_Parser<Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>) ->  ParserLenient_Parser<Generated_comments_syntax<ElmSyntaxParserLenient_Comments, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> {
    ParserLenient_map3(
        { (leftExpressionResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
            { (commentsBeforeExtension: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in
                { (maybeArgsReverse: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>) in
                    let generated_localReturnResult_syntax_result_argument0_declarationResult: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
                    switch maybeArgsReverse.syntax {
                    case List_List.List_Empty:
                        generated_localReturnResult_syntax_result_argument0_declarationResult =
                            leftExpressionResult.syntax
                    case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(lastArgRange, _), _):
                        let generated_let_caseResult_case1_syntax_result_argument0_declarationResult_leftRange: ElmSyntaxRange_Range
                        switch leftExpressionResult.syntax {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_leftRange, _):
                            generated_let_caseResult_case1_syntax_result_argument0_declarationResult_leftRange =
                                generated_destructured_leftRange
                        }
                        generated_localReturnResult_syntax_result_argument0_declarationResult =
                            ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: lastArgRange.end, start: generated_let_caseResult_case1_syntax_result_argument0_declarationResult_leftRange.start), ElmSyntaxExpression_Expression.ElmSyntaxExpression_Application(List_cons(leftExpressionResult.syntax, List_reverse(maybeArgsReverse.syntax))))
                    }
                    return Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(maybeArgsReverse.comments, ElmSyntaxParserLenient_ropePrependTo(commentsBeforeExtension, leftExpressionResult.comments)), syntax: generated_localReturnResult_syntax_result_argument0_declarationResult)
                }
            }
        },
        appliedExpressionParser,
        ElmSyntaxParserLenient_whitespaceAndComments,
        ElmSyntaxParserLenient_manyWithCommentsReverse(ElmSyntaxParserLenient_positivelyIndentedFollowedBy(ParserLenient_map2({ (arg: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in { (commentsAfter: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfter, arg.comments), syntax: arg.syntax) } }, ElmSyntaxParserLenient_subExpression, ElmSyntaxParserLenient_whitespaceAndComments)))
    )
}

@Sendable public static func ElmSyntaxParserLenient_followedByMultiRecordAccess(_ beforeRecordAccesses: ParserLenient_Parser<Generated_comments_syntax<ElmSyntaxParserLenient_Comments, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>) ->  ParserLenient_Parser<Generated_comments_syntax<ElmSyntaxParserLenient_Comments, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> {
    ParserLenient_loopWhileSucceedsOntoResultFromParser(
        ParserLenient_symbolFollowedBy(".", ElmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords),
        beforeRecordAccesses,
        { (fieldNode: ElmSyntaxNode_Node<String>) in
            { (leftResult: Generated_comments_syntax<ElmSyntaxParserLenient_Comments, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
                let generated_let_result_argument2_declarationResult_fieldRange: ElmSyntaxRange_Range
                switch fieldNode {
                case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_fieldRange, _):
                    generated_let_result_argument2_declarationResult_fieldRange =
                        generated_destructured_fieldRange
                }
                let generated_let_result_argument2_declarationResult_leftRange: ElmSyntaxRange_Range
                switch leftResult.syntax {
                case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_leftRange, _):
                    generated_let_result_argument2_declarationResult_leftRange =
                        generated_destructured_leftRange
                }
                return Generated_comments_syntax.Record(comments: leftResult.comments, syntax: ElmSyntaxNode_Node.ElmSyntaxNode_Node(Generated_end_start.Record(end: generated_let_result_argument2_declarationResult_fieldRange.end, start: generated_let_result_argument2_declarationResult_leftRange.start), ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordAccess(leftResult.syntax, fieldNode)))
            }
        },
        Basics_identity
    )
}

@Sendable public static func ElmSyntaxParserLenient_followedByOptimisticLayout<a: Sendable>(_ parser: ParserLenient_Parser<Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, a>>) ->  ParserLenient_Parser<Generated_comments_syntax<ElmSyntaxParserLenient_Comments, a>> {
    ParserLenient_map2({ (result: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, a>) in { (commentsAfter: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(commentsAfter, result.comments), syntax: result.syntax) } }, parser, ElmSyntaxParserLenient_whitespaceAndComments)
}

@Sendable public static func ElmSyntaxParserLenient_hexStringToInt(_ string: String) ->  Double {
    String_foldr({ (c: UnicodeScalar) in { (soFar: Generated_exponent_result<Double, Double>) in Generated_exponent_result.Record(exponent: Basics_add(soFar.exponent, 1.0), result: Basics_add(soFar.result, Basics_mul(Basics_pow(16.0, soFar.exponent), ElmSyntaxParserLenient_charToHex(c)))) } }, ElmSyntaxParserLenient_exponent0Result0, string).result
}

@Sendable public static func ElmSyntaxParserLenient_ifKeywordUnderscoreSuffix(_ name: String) ->  String {
    switch name {
    case "module":
        "module_"
    case "exposing":
        "exposing_"
    case "import":
        "import_"
    case "as":
        "as_"
    case "if":
        "if_"
    case "then":
        "then_"
    case "else":
        "else_"
    case "let":
        "let_"
    case "in":
        "in_"
    case "case":
        "case_"
    case "of":
        "of_"
    case "port":
        "port_"
    case "type":
        "type_"
    case "where":
        "where_"
    case _:
        name
    }
}

@Sendable public static func ElmSyntaxParserLenient_infixLeft(_ leftPrecedence: Double, _ symbol: String) ->  Generated_extensionRightParser_leftPrecedence_symbol<ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_ExtensionRight>>, Double, String> {
    Generated_extensionRightParser_leftPrecedence_symbol.Record(
        extensionRightParser:
            ElmSyntaxParserLenient_extensionRightParser(
                Generated_afterCommitting_direction_symbol_validateRightPrecedence.Record(
                    afterCommitting: { (generated_record: Generated_extensionRightParser_leftPrecedence_symbol<ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_ExtensionRight>>, Double, String>) in generated_record.extensionRightParser },
                    direction: ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Left,
                    symbol: symbol,
                    validateRightPrecedence:
                        { (rightInfo: Generated_extensionRightParser_leftPrecedence_symbol<ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_ExtensionRight>>, Double, String>) in
                            if Basics_gt(rightInfo.leftPrecedence, leftPrecedence) {
                                Maybe_Maybe.Maybe_Just(rightInfo)
                            } else {
                                Maybe_Maybe.Maybe_Nothing
                            }
                        }
                )
            ),
        leftPrecedence: leftPrecedence,
        symbol: symbol
    )
}

@Sendable public static func ElmSyntaxParserLenient_infixNonAssociative(_ leftPrecedence: Double, _ symbol: String) ->  Generated_extensionRightParser_leftPrecedence_symbol<ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_ExtensionRight>>, Double, String> {
    Generated_extensionRightParser_leftPrecedence_symbol.Record(
        extensionRightParser:
            ElmSyntaxParserLenient_extensionRightParser(
                Generated_afterCommitting_direction_symbol_validateRightPrecedence.Record(
                    afterCommitting:
                        { (rightInfo: Generated_extensionRightParser_leftPrecedence_symbol<ParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_ExtensionRight>>, Double, String>) in
                            if Basics_eq(rightInfo.leftPrecedence, leftPrecedence) {
                                ParserLenient_problem()
                            } else {
                                rightInfo.extensionRightParser
                            }
                        },
                    direction: ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Non,
                    symbol: symbol,
                    validateRightPrecedence:
                        { (rightInfo: Generated_extensionRightParser_leftPrecedence_symbol<ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_ExtensionRight>>, Double, String>) in
                            if Basics_ge(rightInfo.leftPrecedence, leftPrecedence) {
                                Maybe_Maybe.Maybe_Just(rightInfo)
                            } else {
                                Maybe_Maybe.Maybe_Nothing
                            }
                        }
                )
            ),
        leftPrecedence: leftPrecedence,
        symbol: symbol
    )
}

@Sendable public static func ElmSyntaxParserLenient_infixOperatorAndThen(_ extensionRightConstraints: Generated_afterCommitting_validateRightPrecedence<@Sendable (ElmSyntaxParserLenient_InfixOperatorInfo) -> ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_ExtensionRight>>, @Sendable (ElmSyntaxParserLenient_InfixOperatorInfo) -> Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo>>) ->  ParserLenient_Parser<Generated_comments_syntax<ElmSyntaxParserLenient_Comments, ElmSyntaxParserLenient_ExtensionRight>> {
    @Sendable func generated_let_declarationResult_toResult(_ generated_letDeclaration0_declarationResult_0: Generated_extensionRightParser_leftPrecedence_symbol<ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_ExtensionRight>>, Double, String>) ->  Maybe_Maybe<Generated_extensionRightParser_leftPrecedence_symbol<ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_ExtensionRight>>, Double, String>> {
        extensionRightConstraints.validateRightPrecedence(generated_letDeclaration0_declarationResult_0)
    }
    let generated_let_declarationResult_subResult: Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
        generated_let_declarationResult_toResult(ElmSyntaxParserLenient_precedence6Sub)
    let generated_let_declarationResult_slashResult: Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
        generated_let_declarationResult_toResult(ElmSyntaxParserLenient_precedence7Slash)
    let generated_let_declarationResult_questionMarkResult: Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
        generated_let_declarationResult_toResult(ElmSyntaxParserLenient_precedence8QuestionMark)
    let generated_let_declarationResult_powResult: Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
        generated_let_declarationResult_toResult(ElmSyntaxParserLenient_precedence8Pow)
    let generated_let_declarationResult_orResult: Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
        generated_let_declarationResult_toResult(ElmSyntaxParserLenient_precedence2Or)
    let generated_let_declarationResult_neqResult: Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
        generated_let_declarationResult_toResult(ElmSyntaxParserLenient_precedence4Neq)
    let generated_let_declarationResult_mulResult: Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
        generated_let_declarationResult_toResult(ElmSyntaxParserLenient_precedence7Mul)
    let generated_let_declarationResult_ltResult: Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
        generated_let_declarationResult_toResult(ElmSyntaxParserLenient_precedence4Lt)
    let generated_let_declarationResult_leResult: Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
        generated_let_declarationResult_toResult(ElmSyntaxParserLenient_precedence4Le)
    let generated_let_declarationResult_keepResult: Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
        generated_let_declarationResult_toResult(ElmSyntaxParserLenient_precedence5Keep)
    let generated_let_declarationResult_ignoreResult: Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
        generated_let_declarationResult_toResult(ElmSyntaxParserLenient_precedence6Ignore)
    let generated_let_declarationResult_idivResult: Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
        generated_let_declarationResult_toResult(ElmSyntaxParserLenient_precedence7Idiv)
    let generated_let_declarationResult_gtResult: Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
        generated_let_declarationResult_toResult(ElmSyntaxParserLenient_precedence4Gt)
    let generated_let_declarationResult_geResult: Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
        generated_let_declarationResult_toResult(ElmSyntaxParserLenient_precedence4Ge)
    let generated_let_declarationResult_fdivResult: Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
        generated_let_declarationResult_toResult(ElmSyntaxParserLenient_precedence7Fdiv)
    let generated_let_declarationResult_eqResult: Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
        generated_let_declarationResult_toResult(ElmSyntaxParserLenient_precedence4Eq)
    let generated_let_declarationResult_consResult: Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
        generated_let_declarationResult_toResult(ElmSyntaxParserLenient_precedence5Cons)
    let generated_let_declarationResult_composeRResult: Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
        generated_let_declarationResult_toResult(ElmSyntaxParserLenient_precedence9ComposeR)
    let generated_let_declarationResult_composeLResult: Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
        generated_let_declarationResult_toResult(ElmSyntaxParserLenient_precedence9ComposeL)
    let generated_let_declarationResult_appendResult: Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
        generated_let_declarationResult_toResult(ElmSyntaxParserLenient_precedence5append)
    let generated_let_declarationResult_apRResult: Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
        generated_let_declarationResult_toResult(ElmSyntaxParserLenient_precedence1ApR)
    let generated_let_declarationResult_apLResult: Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
        generated_let_declarationResult_toResult(ElmSyntaxParserLenient_precedence1ApL)
    let generated_let_declarationResult_andResult: Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
        generated_let_declarationResult_toResult(ElmSyntaxParserLenient_precedence3And)
    let generated_let_declarationResult_addResult: Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
        generated_let_declarationResult_toResult(ElmSyntaxParserLenient_precedence6Add)
    return
        ParserLenient_whileAtMost3WithoutLinebreakAnd2PartUtf16ToResultAndThen(
            ElmSyntaxParserLenient_isOperatorSymbolCharAsString,
            { (operator_: String) in
                switch operator_ {
                case "|>":
                    generated_let_declarationResult_apRResult
                case "|":
                    generated_let_declarationResult_apRResult
                case "++":
                    generated_let_declarationResult_appendResult
                case "<|":
                    generated_let_declarationResult_apLResult
                case ">>":
                    generated_let_declarationResult_composeRResult
                case "==":
                    generated_let_declarationResult_eqResult
                case "===":
                    generated_let_declarationResult_eqResult
                case "*":
                    generated_let_declarationResult_mulResult
                case "::":
                    generated_let_declarationResult_consResult
                case "+":
                    generated_let_declarationResult_addResult
                case "-":
                    generated_let_declarationResult_subResult
                case "|.":
                    generated_let_declarationResult_ignoreResult
                case "&&":
                    generated_let_declarationResult_andResult
                case "|=":
                    generated_let_declarationResult_keepResult
                case "<<":
                    generated_let_declarationResult_composeLResult
                case "/=":
                    generated_let_declarationResult_neqResult
                case "!=":
                    generated_let_declarationResult_neqResult
                case "!==":
                    generated_let_declarationResult_neqResult
                case "//":
                    generated_let_declarationResult_idivResult
                case "/":
                    generated_let_declarationResult_fdivResult
                case "</>":
                    generated_let_declarationResult_slashResult
                case "||":
                    generated_let_declarationResult_orResult
                case "<=":
                    generated_let_declarationResult_leResult
                case ">=":
                    generated_let_declarationResult_geResult
                case ">":
                    generated_let_declarationResult_gtResult
                case "<?>":
                    generated_let_declarationResult_questionMarkResult
                case "<":
                    generated_let_declarationResult_ltResult
                case "^":
                    generated_let_declarationResult_powResult
                case "**":
                    generated_let_declarationResult_powResult
                case _:
                    Maybe_Maybe.Maybe_Nothing
                }
            },
            extensionRightConstraints.afterCommitting
        )
}

@Sendable public static func ElmSyntaxParserLenient_infixRight(_ leftPrecedence: Double, _ symbol: String) ->  Generated_extensionRightParser_leftPrecedence_symbol<ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_ExtensionRight>>, Double, String> {
    Generated_extensionRightParser_leftPrecedence_symbol.Record(
        extensionRightParser:
            ElmSyntaxParserLenient_extensionRightParser(
                Generated_afterCommitting_direction_symbol_validateRightPrecedence.Record(
                    afterCommitting: { (generated_record: Generated_extensionRightParser_leftPrecedence_symbol<ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_ExtensionRight>>, Double, String>) in generated_record.extensionRightParser },
                    direction: ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Right,
                    symbol: symbol,
                    validateRightPrecedence:
                        { (rightInfo: Generated_extensionRightParser_leftPrecedence_symbol<ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_ExtensionRight>>, Double, String>) in
                            if Basics_ge(rightInfo.leftPrecedence, leftPrecedence) {
                                Maybe_Maybe.Maybe_Just(rightInfo)
                            } else {
                                Maybe_Maybe.Maybe_Nothing
                            }
                        }
                )
            ),
        leftPrecedence: leftPrecedence,
        symbol: symbol
    )
}

@Sendable public static func ElmSyntaxParserLenient_isAllowedOperatorToken(_ operatorCandidateToValidate: String) ->  Bool {
    switch operatorCandidateToValidate {
    case "==":
        true
    case "/=":
        true
    case "::":
        true
    case "++":
        true
    case "+":
        true
    case "*":
        true
    case "<|":
        true
    case "|>":
        true
    case "||":
        true
    case "<=":
        true
    case ">=":
        true
    case "|=":
        true
    case "|.":
        true
    case "//":
        true
    case "</>":
        true
    case "<?>":
        true
    case "^":
        true
    case "<<":
        true
    case ">>":
        true
    case "<":
        true
    case ">":
        true
    case "/":
        true
    case "&&":
        true
    case "-":
        true
    case _:
        false
    }
}

@Sendable public static func ElmSyntaxParserLenient_isNotReserved(_ name: String) ->  Bool {
    switch name {
    case "module":
        false
    case "exposing":
        false
    case "import":
        false
    case "as":
        false
    case "if":
        false
    case "then":
        false
    case "else":
        false
    case "let":
        false
    case "in":
        false
    case "case":
        false
    case "of":
        false
    case "port":
        false
    case "type":
        false
    case "where":
        false
    case _:
        true
    }
}

@Sendable public static func ElmSyntaxParserLenient_isOperatorSymbolCharAsString(_ c: String) ->  Bool {
    switch c {
    case "|":
        true
    case "+":
        true
    case "<":
        true
    case ">":
        true
    case "=":
        true
    case "*":
        true
    case ":":
        true
    case "-":
        true
    case "/":
        true
    case "&":
        true
    case ".":
        true
    case "?":
        true
    case "^":
        true
    case "!":
        true
    case _:
        false
    }
}

@Sendable public static func ElmSyntaxParserLenient_listFirstWhere<a: Sendable>(_ predicate: @Sendable @escaping (a) -> Bool, _ list: List_List<a>) ->  Maybe_Maybe<a> {
    switch list {
    case List_List.List_Empty:
        Maybe_Maybe.Maybe_Nothing
    case let List_List.List_Cons(x, xs):
        if predicate(x) {
            Maybe_Maybe.Maybe_Just(x)
        } else {
            ElmSyntaxParserLenient_listFirstWhere(predicate, xs)
        }
    }
}

@Sendable public static func ElmSyntaxParserLenient_manyWithComments<a: Sendable>(_ p: ParserLenient_Parser<Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, a>>) ->  ParserLenient_Parser<Generated_comments_syntax<ElmSyntaxParserLenient_Comments, List_List<a>>> {
    ParserLenient_loopWhileSucceeds(
        p,
        ElmSyntaxParserLenient_tupleCommentsEmptyListEmpty(),
        { (pResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, a>) in
            { (generated_argument2_declarationResult_1: Tuple<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, List_List<a>>) in
                let commentsSoFar: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>
                let itemsSoFar: List_List<a>
                switch generated_argument2_declarationResult_1 {
                case let Tuple.Tuple(generated_destructured_commentsSoFar, generated_destructured_itemsSoFar):
                    commentsSoFar =
                        generated_destructured_commentsSoFar
                    itemsSoFar =
                        generated_destructured_itemsSoFar
                }
                return Tuple.Tuple(ElmSyntaxParserLenient_ropePrependTo(pResult.comments, commentsSoFar), List_cons(pResult.syntax, itemsSoFar))
            }
        },
        { (generated_argument3_declarationResult_0: Tuple<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, List_List<a>>) in
            let commentsSoFar: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>
            let itemsSoFar: List_List<a>
            switch generated_argument3_declarationResult_0 {
            case let Tuple.Tuple(generated_destructured_commentsSoFar, generated_destructured_itemsSoFar):
                commentsSoFar =
                    generated_destructured_commentsSoFar
                itemsSoFar =
                    generated_destructured_itemsSoFar
            }
            return Generated_comments_syntax.Record(comments: commentsSoFar, syntax: List_reverse(itemsSoFar))
        }
    )
}

@Sendable public static func ElmSyntaxParserLenient_manyWithCommentsReverse<a: Sendable>(_ p: ParserLenient_Parser<Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, a>>) ->  ParserLenient_Parser<Generated_comments_syntax<ElmSyntaxParserLenient_Comments, List_List<a>>> {
    ParserLenient_loopWhileSucceeds(p, ElmSyntaxParserLenient_commentsRopeEmptySyntaxListEmpty(), { (pResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, a>) in { (soFar: Generated_comments_syntax<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, List_List<a>>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(pResult.comments, soFar.comments), syntax: List_cons(pResult.syntax, soFar.syntax)) } }, { (result: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, List_List<a>>) in result })
}

@Sendable public static func ElmSyntaxParserLenient_nameLowercaseMapWithRange<res: Sendable>(_ rangeAndNameToResult: @Sendable @escaping (ElmSyntaxRange_Range) -> (String) -> res) ->  ParserLenient_Parser<res> {
    ParserLenient_ifFollowedByWhileValidateMapWithRangeWithoutLinebreak(rangeAndNameToResult, CharExtra_unicodeIsLowerFast, CharExtra_unicodeIsAlphaNumOrUnderscoreFast, ElmSyntaxParserLenient_isNotReserved)
}

@Sendable public static func ElmSyntaxParserLenient_nameUppercaseMapWithRange<res: Sendable>(_ rangeAndNameToRes: @Sendable @escaping (ElmSyntaxRange_Range) -> (String) -> res) ->  ParserLenient_Parser<res> {
    ParserLenient_ifFollowedByWhileMapWithRangeWithoutLinebreak(rangeAndNameToRes, CharExtra_unicodeIsUpperFast, CharExtra_unicodeIsAlphaNumOrUnderscoreFast)
}

@Sendable public static func ElmSyntaxParserLenient_positivelyIndentedFollowedBy<a: Sendable>(_ nextParser: ParserLenient_Parser<a>) ->  ParserLenient_Parser<a> {
    ParserLenient_columnIndentAndThen(
        { (column: Double) in
            { (indent: List_List<Double>) in
                if Basics_and(Basics_gt(column, 1.0), List_all({ (nestedIndent: Double) in Basics_neq(column, nestedIndent) }, indent)) {
                    nextParser
                } else {
                    ParserLenient_problem()
                }
            }
        }
    )
}

@Sendable public static func ElmSyntaxParserLenient_rangeMoveStartLeftByOneColumn(_ range: Generated_end_start<ElmSyntaxRange_Location, Generated_column_row<Double, Double>>) ->  Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location> {
    Generated_end_start.Record(end: range.end, start: Generated_column_row.Record(column: Basics_sub(range.start.column, 1.0), row: range.start.row))
}

@Sendable public static func ElmSyntaxParserLenient_ropeEmpty<a__: Sendable>() ->  ElmSyntaxParserLenient_Rope<a__> {
    Maybe_Maybe.Maybe_Nothing
}

@Sendable public static func ElmSyntaxParserLenient_ropeFilledPrependTo<a: Sendable>(_ right: Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<a>>, _ leftLikelyFilled: ElmSyntaxParserLenient_RopeFilled<a>) ->  Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<a>> {
    let generated_localReturnResult_argument0_declarationResult: ElmSyntaxParserLenient_RopeFilled<a> =
        switch right {
        case Maybe_Maybe.Maybe_Nothing:
            leftLikelyFilled
        case let Maybe_Maybe.Maybe_Just(rightLikelyFilled):
            ElmSyntaxParserLenient_RopeFilled.ElmSyntaxParserLenient_RopeBranch2(leftLikelyFilled, rightLikelyFilled)
        }
    return Maybe_Maybe.Maybe_Just(generated_localReturnResult_argument0_declarationResult)
}

@Sendable public static func ElmSyntaxParserLenient_ropeLikelyFilledToListInto<a: Sendable>(_ initialAcc: List_List<a>, _ ropeLikelyFilled: ElmSyntaxParserLenient_RopeFilled<a>) ->  List_List<a> {
    switch ropeLikelyFilled {
    case let ElmSyntaxParserLenient_RopeFilled.ElmSyntaxParserLenient_RopeLeaf(onlyElement, _):
        List_cons(onlyElement, initialAcc)
    case let ElmSyntaxParserLenient_RopeFilled.ElmSyntaxParserLenient_RopeBranch2(left, right):
        ElmSyntaxParserLenient_ropeLikelyFilledToListInto(ElmSyntaxParserLenient_ropeLikelyFilledToListInto(initialAcc, right), left)
    }
}

@Sendable public static func ElmSyntaxParserLenient_ropeOne<a: Sendable>(_ onlyElement: a) ->  ElmSyntaxParserLenient_RopeFilled<a> {
    ElmSyntaxParserLenient_RopeFilled.ElmSyntaxParserLenient_RopeLeaf(onlyElement, Unit.Unit)
}

@Sendable public static func ElmSyntaxParserLenient_ropePrependTo<a: Sendable>(_ right: Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<a>>, _ left: Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<a>>) ->  Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<a>> {
    switch left {
    case Maybe_Maybe.Maybe_Nothing:
        right
    case let Maybe_Maybe.Maybe_Just(leftLikelyFilled):
        switch right {
        case Maybe_Maybe.Maybe_Nothing:
            left
        case let Maybe_Maybe.Maybe_Just(rightLikelyFilled):
            Maybe_Maybe.Maybe_Just(ElmSyntaxParserLenient_RopeFilled.ElmSyntaxParserLenient_RopeBranch2(leftLikelyFilled, rightLikelyFilled))
        }
    }
}

@Sendable public static func ElmSyntaxParserLenient_ropePrependToFilled<a: Sendable>(_ rightLikelyFilled: ElmSyntaxParserLenient_RopeFilled<a>, _ left: Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<a>>) ->  Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<a>> {
    let generated_localReturnResult_argument0_declarationResult: ElmSyntaxParserLenient_RopeFilled<a> =
        switch left {
        case Maybe_Maybe.Maybe_Nothing:
            rightLikelyFilled
        case let Maybe_Maybe.Maybe_Just(leftLikelyFilled):
            ElmSyntaxParserLenient_RopeFilled.ElmSyntaxParserLenient_RopeBranch2(leftLikelyFilled, rightLikelyFilled)
        }
    return Maybe_Maybe.Maybe_Just(generated_localReturnResult_argument0_declarationResult)
}

@Sendable public static func ElmSyntaxParserLenient_ropeToList<a: Sendable>(_ rope: Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<a>>) ->  List_List<a> {
    switch rope {
    case Maybe_Maybe.Maybe_Nothing:
        List_List.List_Empty
    case let Maybe_Maybe.Maybe_Just(ropeLikelyFilled):
        ElmSyntaxParserLenient_ropeLikelyFilledToListInto(List_List.List_Empty, ropeLikelyFilled)
    }
}

@Sendable public static func ElmSyntaxParserLenient_run<a: Sendable>(_ syntaxParser: ParserLenient_Parser<a>, _ source: String) ->  Maybe_Maybe<a> {
    ParserLenient_run(syntaxParser, source)
}

@Sendable public static func ElmSyntaxParserLenient_singleOrTripleQuotedStringLiteralMapWithRange<res: Sendable>(_ rangeAndStringToRes: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (String) -> res) ->  ParserLenient_Parser<res> {
    ParserLenient_symbolFollowedBy("\"", ParserLenient_oneOf2MapWithStartRowColumnAndEndRowColumn({ (startRow: Double) in { (startColumn: Double) in { (string: String) in { (endRow: Double) in { (endColumn: Double) in rangeAndStringToRes(Generated_end_start.Record(end: Generated_column_row.Record(column: endColumn, row: endRow), start: Generated_column_row.Record(column: Basics_sub(startColumn, 1.0), row: startRow)))(string) } } } } }, ParserLenient_symbolFollowedBy("\"\"", ElmSyntaxParserLenient_tripleQuotedStringLiteralOfterTripleDoubleQuote), { (startRow: Double) in { (startColumn: Double) in { (string: String) in { (endRow: Double) in { (endColumn: Double) in rangeAndStringToRes(Generated_end_start.Record(end: Generated_column_row.Record(column: endColumn, row: endRow), start: Generated_column_row.Record(column: Basics_sub(startColumn, 1.0), row: startRow)))(string) } } } } }, ElmSyntaxParserLenient_singleQuotedStringLiteralAfterDoubleQuote))
}

@Sendable public static func ElmSyntaxParserLenient_topIndentedFollowedBy<a: Sendable>(_ nextParser: ParserLenient_Parser<a>) ->  ParserLenient_Parser<a> {
    ParserLenient_columnIndentAndThen(
        { (column: Double) in
            { (indent: List_List<Double>) in
                switch indent {
                case List_List.List_Empty:
                    if Basics_eq(column, 1.0) {
                        nextParser
                    } else {
                        ParserLenient_problem()
                    }
                case let List_List.List_Cons(highestIndent, _):
                    if Basics_eq(Basics_sub(column, highestIndent), 0.0) {
                        nextParser
                    } else {
                        ParserLenient_problem()
                    }
                }
            }
        }
    )
}

@Sendable public static func ElmSyntaxParserLenient_tupleCommentsEmptyListEmpty<a: Sendable>() ->  Tuple<ElmSyntaxParserLenient_Comments, List_List<a>> {
    Tuple.Tuple(ElmSyntaxParserLenient_ropeEmpty(), List_List.List_Empty)
}

@Sendable public static func ElmSyntaxParserLenient_untilWithComments<a: Sendable>(_ end: ParserLenient_Parser<Unit>, _ element: ParserLenient_Parser<Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, a>>) ->  ParserLenient_Parser<Generated_comments_syntax<ElmSyntaxParserLenient_Comments, List_List<a>>> {
    ParserLenient_loopUntil(
        end,
        element,
        ElmSyntaxParserLenient_tupleCommentsEmptyListEmpty(),
        { (pResult: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, a>) in
            { (generated_argument3_declarationResult_1: Tuple<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, List_List<a>>) in
                let commentsSoFar: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>
                let itemsSoFar: List_List<a>
                switch generated_argument3_declarationResult_1 {
                case let Tuple.Tuple(generated_destructured_commentsSoFar, generated_destructured_itemsSoFar):
                    commentsSoFar =
                        generated_destructured_commentsSoFar
                    itemsSoFar =
                        generated_destructured_itemsSoFar
                }
                return Tuple.Tuple(ElmSyntaxParserLenient_ropePrependTo(pResult.comments, commentsSoFar), List_cons(pResult.syntax, itemsSoFar))
            }
        },
        { (generated_argument4_declarationResult_0: Tuple<ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>, List_List<a>>) in
            let commentsSoFar: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>
            let itemsSoFar: List_List<a>
            switch generated_argument4_declarationResult_0 {
            case let Tuple.Tuple(generated_destructured_commentsSoFar, generated_destructured_itemsSoFar):
                commentsSoFar =
                    generated_destructured_commentsSoFar
                itemsSoFar =
                    generated_destructured_itemsSoFar
            }
            return Generated_comments_syntax.Record(comments: commentsSoFar, syntax: List_reverse(itemsSoFar))
        }
    )
}

@Sendable public static func ElmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndentedFollowedBy<syntax: Sendable>(_ nextParser: ElmSyntaxParserLenient_Parser<syntax>) ->  ParserLenient_Parser<Generated_comments_syntax<ElmSyntaxParserLenient_Comments, syntax>> {
    ParserLenient_map2({ (commentsBefore: ElmSyntaxParserLenient_Comments) in { (after: syntax) in Generated_comments_syntax.Record(comments: commentsBefore, syntax: after) } }, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_topIndentedFollowedBy(nextParser))
}

@Sendable public static func ElmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndentedFollowedByComments(_ nextParser: ElmSyntaxParserLenient_Parser<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>>) ->  ParserLenient_Parser<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>> {
    ParserLenient_map2({ (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (afterComments: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in ElmSyntaxParserLenient_ropePrependTo(afterComments, commentsBefore) } }, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_topIndentedFollowedBy(nextParser))
}

@Sendable public static func ElmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndentedFollowedByWithComments<syntax: Sendable>(_ nextParser: ElmSyntaxParserLenient_Parser<Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, syntax>>) ->  ParserLenient_Parser<Generated_comments_syntax<ElmSyntaxParserLenient_Comments, syntax>> {
    ParserLenient_map2({ (commentsBefore: ElmSyntaxParserLenient_Rope<ElmSyntaxNode_Node<String>>) in { (after: Generated_comments_syntax<Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>, syntax>) in Generated_comments_syntax.Record(comments: ElmSyntaxParserLenient_ropePrependTo(after.comments, commentsBefore), syntax: after.syntax) } }, ElmSyntaxParserLenient_whitespaceAndComments, ElmSyntaxParserLenient_topIndentedFollowedBy(nextParser))
}

@Sendable public static func ElmSyntaxPattern_encode(_ pattern: ElmSyntaxPattern_Pattern) ->  JsonEncode_Value {
    switch pattern {
    case ElmSyntaxPattern_Pattern.ElmSyntaxPattern_AllPattern:
        ElmJsonUtil_encodeTyped("all", JsonEncode_object(List_List.List_Empty))
    case ElmSyntaxPattern_Pattern.ElmSyntaxPattern_UnitPattern:
        ElmJsonUtil_encodeTyped("unit", JsonEncode_object(List_List.List_Empty))
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_CharPattern(c):
        ElmJsonUtil_encodeTyped("char", JsonEncode_object(List_singleton(Tuple.Tuple("value", JsonEncode_string(String_fromChar(c))))))
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_StringPattern(v):
        ElmJsonUtil_encodeTyped("string", JsonEncode_object(List_singleton(Tuple.Tuple("value", JsonEncode_string(v)))))
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_HexPattern(h):
        ElmJsonUtil_encodeTyped("hex", JsonEncode_object(List_singleton(Tuple.Tuple("value", JsonEncode_int(h)))))
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_IntPattern(i):
        ElmJsonUtil_encodeTyped("int", JsonEncode_object(List_singleton(Tuple.Tuple("value", JsonEncode_int(i)))))
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_FloatPattern(f):
        ElmJsonUtil_encodeTyped("float", JsonEncode_object(List_singleton(Tuple.Tuple("value", JsonEncode_float(f)))))
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_TuplePattern(patterns):
        ElmJsonUtil_encodeTyped("tuple", JsonEncode_object(List_singleton(Tuple.Tuple("value", JsonEncode_list({ (generated_called_argument0_part1_0_argument0_argument1_caseResult_case7_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in ElmSyntaxNode_encode(ElmSyntaxPattern_encode, generated_called_argument0_part1_0_argument0_argument1_caseResult_case7_declarationResult_1) }, patterns)))))
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_RecordPattern(pointers):
        ElmJsonUtil_encodeTyped("record", JsonEncode_object(List_singleton(Tuple.Tuple("value", JsonEncode_list({ (generated_called_argument0_part1_0_argument0_argument1_caseResult_case8_declarationResult_1: ElmSyntaxNode_Node<String>) in ElmSyntaxNode_encode(JsonEncode_string, generated_called_argument0_part1_0_argument0_argument1_caseResult_case8_declarationResult_1) }, pointers)))))
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_UnConsPattern(p1, p2):
        ElmJsonUtil_encodeTyped(
            "uncons",
            JsonEncode_object(
                Array_toList(
                    [ Tuple.Tuple("left", ElmSyntaxNode_encode(ElmSyntaxPattern_encode, p1)),
                      Tuple.Tuple("right", ElmSyntaxNode_encode(ElmSyntaxPattern_encode, p2))
                    ]
                )
            )
        )
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ListPattern(patterns):
        ElmJsonUtil_encodeTyped("list", JsonEncode_object(List_singleton(Tuple.Tuple("value", JsonEncode_list({ (generated_called_argument0_part1_0_argument0_argument1_caseResult_case10_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in ElmSyntaxNode_encode(ElmSyntaxPattern_encode, generated_called_argument0_part1_0_argument0_argument1_caseResult_case10_declarationResult_1) }, patterns)))))
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_VarPattern(name):
        ElmJsonUtil_encodeTyped("var", JsonEncode_object(List_singleton(Tuple.Tuple("value", JsonEncode_string(name)))))
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_NamedPattern(qualifiedNameRef, patterns):
        ElmJsonUtil_encodeTyped(
            "named",
            JsonEncode_object(
                Array_toList(
                    [ Tuple.Tuple(
                        "qualified",
                        JsonEncode_object(
                            Array_toList(
                                [ Tuple.Tuple("moduleName", ElmSyntaxModuleName_encode(qualifiedNameRef.moduleName)),
                                  Tuple.Tuple("name", JsonEncode_string(qualifiedNameRef.name))
                                ]
                            )
                        )
                      ),
                      Tuple.Tuple("patterns", JsonEncode_list({ (generated_called_argument0_part1_1_argument0_right_caseResult_case12_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in ElmSyntaxNode_encode(ElmSyntaxPattern_encode, generated_called_argument0_part1_1_argument0_right_caseResult_case12_declarationResult_1) }, patterns))
                    ]
                )
            )
        )
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_AsPattern(destructured, name):
        ElmJsonUtil_encodeTyped(
            "as",
            JsonEncode_object(
                Array_toList(
                    [ Tuple.Tuple("name", ElmSyntaxNode_encode(JsonEncode_string, name)),
                      Tuple.Tuple("pattern", ElmSyntaxNode_encode(ElmSyntaxPattern_encode, destructured))
                    ]
                )
            )
        )
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ParenthesizedPattern(p1):
        ElmJsonUtil_encodeTyped("parentisized", JsonEncode_object(List_singleton(Tuple.Tuple("value", ElmSyntaxNode_encode(ElmSyntaxPattern_encode, p1)))))
    }
}

@Sendable public static func ElmSyntaxPattern_moduleNames(_ p: ElmSyntaxPattern_Pattern) ->  List_List<List_List<String>> {
    switch p {
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_TuplePattern(xs):
        List_concatMap(
            { (generated_argument0_caseResult_case0_declarationResult_0: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in
                let x: ElmSyntaxPattern_Pattern
                switch generated_argument0_caseResult_case0_declarationResult_0 {
                case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_x):
                    x =
                        generated_destructured_x
                }
                return ElmSyntaxPattern_moduleNames(x)
            },
            xs
        )
    case ElmSyntaxPattern_Pattern.ElmSyntaxPattern_RecordPattern(_):
        List_List.List_Empty
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_UnConsPattern(ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, left), ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, right)):
        List_append(ElmSyntaxPattern_moduleNames(left), ElmSyntaxPattern_moduleNames(right))
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ListPattern(xs):
        List_concatMap(
            { (generated_argument0_caseResult_case3_declarationResult_0: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in
                let x: ElmSyntaxPattern_Pattern
                switch generated_argument0_caseResult_case3_declarationResult_0 {
                case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_x):
                    x =
                        generated_destructured_x
                }
                return ElmSyntaxPattern_moduleNames(x)
            },
            xs
        )
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_NamedPattern(qualifiedNameRef, subPatterns):
        List_cons(
            qualifiedNameRef.moduleName,
            List_concatMap(
                { (generated_argument0_right_caseResult_case4_declarationResult_0: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in
                    let x: ElmSyntaxPattern_Pattern
                    switch generated_argument0_right_caseResult_case4_declarationResult_0 {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_x):
                        x =
                            generated_destructured_x
                    }
                    return ElmSyntaxPattern_moduleNames(x)
                },
                subPatterns
            )
        )
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_AsPattern(ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, inner), _):
        ElmSyntaxPattern_moduleNames(inner)
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ParenthesizedPattern(ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, inner)):
        ElmSyntaxPattern_moduleNames(inner)
    case _:
        List_List.List_Empty
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_atDocsLineToExposesAndRemaining(_ atDocsLine: List_List<String>, _ remainingExposes: List_List<ElmSyntaxExposing_TopLevelExpose>) ->  Generated_exposes_remaining<List_List<ElmSyntaxExposing_TopLevelExpose>, List_List<ElmSyntaxExposing_TopLevelExpose>> {
    List_foldr(
        { (exposeAsAtDocsString: String) in
            { (soFar: Generated_exposes_remaining<List_List<ElmSyntaxExposing_TopLevelExpose>, List_List<ElmSyntaxExposing_TopLevelExpose>>) in
                @Sendable func generated_let_result_argument0_right_declarationResult_toExposeReferencedByAtDocsString(_ ex: ElmSyntaxExposing_TopLevelExpose) ->  Maybe_Maybe<ElmSyntaxExposing_TopLevelExpose> {
                    if Basics_eq(ElmSyntaxPrintDefunctionalized_exposeToAtDocsString(ex), exposeAsAtDocsString) {
                        Maybe_Maybe.Maybe_Just(ex)
                    } else {
                        Maybe_Maybe.Maybe_Nothing
                    }
                }
                return
                    switch ElmSyntaxPrintDefunctionalized_listFirstJustMap(generated_let_result_argument0_right_declarationResult_toExposeReferencedByAtDocsString, soFar.remaining) {
                    case Maybe_Maybe.Maybe_Nothing:
                        soFar
                    case let Maybe_Maybe.Maybe_Just(exposeReferencedByAtDocsString):
                        Generated_exposes_remaining.Record(exposes: List_cons(exposeReferencedByAtDocsString, soFar.exposes), remaining: List_filter({ (ex: ElmSyntaxExposing_TopLevelExpose) in Basics_neq(ex, exposeReferencedByAtDocsString) }, soFar.remaining))
                    }
            }
        },
        Generated_exposes_remaining.Record(exposes: List_List.List_Empty, remaining: remainingExposes),
        atDocsLine
    )
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_case_(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ generated_1: Tuple<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) ->  Print_Print {
    let casePattern: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>
    let caseResult: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
    switch generated_1 {
    case let Tuple.Tuple(generated_destructured_casePattern, generated_destructured_caseResult):
        casePattern =
            generated_destructured_casePattern
        caseResult =
            generated_destructured_caseResult
    }
    let generated_let_declarationResult_patternPrint: Print_Print =
        ElmSyntaxPrintDefunctionalized_patternNotParenthesized(syntaxComments, casePattern)
    let generated_let_declarationResult_commentsBeforeExpression: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(caseResult).start, start: ElmSyntaxNode_range(casePattern).end), syntaxComments)
    let generated_let_declarationResult_caseResultPrint: Print_Print =
        ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, caseResult)
    let generated_localReturnResult_argument0_right_argument0_argument0_right_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_commentsBeforeExpression {
        case List_List.List_Empty:
            generated_let_declarationResult_caseResultPrint
        case let List_List.List_Cons(comment0, comment1Up):
            Print_followedBy(generated_let_declarationResult_caseResultPrint, Print_followedBy(Print_linebreakIndented, ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up))))
        }
    return Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(generated_localReturnResult_argument0_right_argument0_argument0_right_letResult_declarationResult, Print_linebreakIndented)), Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyMinusGreaterThan, Print_followedBy(Print_spaceOrLinebreakIndented(Print_lineSpread(generated_let_declarationResult_patternPrint)), generated_let_declarationResult_patternPrint)))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_charLiteral(_ charContent: UnicodeScalar) ->  String {
    String_append("'", String_append(ElmSyntaxPrintDefunctionalized_quotedCharToEscaped(charContent), "'"))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_characterHex(_ character: UnicodeScalar) ->  String {
    let generated_let_declarationResult_charCode: Double =
        Char_toCode(character)
    return String_toUpper(String_append(ElmSyntaxPrintDefunctionalized_unsafeHexDigitIntToString(Bitwise_shiftRightBy(12.0, Bitwise_and(61440.0, generated_let_declarationResult_charCode))), String_append(ElmSyntaxPrintDefunctionalized_unsafeHexDigitIntToString(Bitwise_shiftRightBy(8.0, Bitwise_and(3840.0, generated_let_declarationResult_charCode))), String_append(ElmSyntaxPrintDefunctionalized_unsafeHexDigitIntToString(Bitwise_shiftRightBy(4.0, Bitwise_and(240.0, generated_let_declarationResult_charCode))), ElmSyntaxPrintDefunctionalized_unsafeHexDigitIntToString(Bitwise_and(15.0, generated_let_declarationResult_charCode))))))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_characterIsNotPrint(_ character: UnicodeScalar) ->  Bool {
    if Basics_or(CharExtra_isLatinAlphaNumOrUnderscoreFast(character), Basics_or(Basics_eq(character, " "), Basics_or(Basics_eq(character, "."), Basics_or(Basics_eq(character, "!"), Basics_or(Basics_eq(character, "?"), Basics_or(Basics_eq(character, "-"), Basics_eq(character, ":"))))))) {
        false
    } else {
        switch Unicode_getCategory(character) {
        case Maybe_Maybe.Maybe_Nothing:
            true
        case let Maybe_Maybe.Maybe_Just(category):
            switch category {
            case Unicode_Category.Unicode_SeparatorLine:
                true
            case Unicode_Category.Unicode_SeparatorParagraph:
                true
            case Unicode_Category.Unicode_OtherControl:
                true
            case Unicode_Category.Unicode_OtherFormat:
                true
            case Unicode_Category.Unicode_OtherSurrogate:
                true
            case Unicode_Category.Unicode_OtherPrivateUse:
                true
            case Unicode_Category.Unicode_OtherNotAssigned:
                true
            case Unicode_Category.Unicode_LetterUppercase:
                false
            case Unicode_Category.Unicode_LetterLowercase:
                false
            case Unicode_Category.Unicode_LetterTitlecase:
                false
            case Unicode_Category.Unicode_MarkNonSpacing:
                false
            case Unicode_Category.Unicode_MarkSpacingCombining:
                false
            case Unicode_Category.Unicode_MarkEnclosing:
                false
            case Unicode_Category.Unicode_NumberDecimalDigit:
                false
            case Unicode_Category.Unicode_NumberLetter:
                false
            case Unicode_Category.Unicode_NumberOther:
                false
            case Unicode_Category.Unicode_SeparatorSpace:
                true
            case Unicode_Category.Unicode_LetterModifier:
                false
            case Unicode_Category.Unicode_LetterOther:
                false
            case Unicode_Category.Unicode_PunctuationConnector:
                false
            case Unicode_Category.Unicode_PunctuationDash:
                false
            case Unicode_Category.Unicode_PunctuationOpen:
                false
            case Unicode_Category.Unicode_PunctuationClose:
                false
            case Unicode_Category.Unicode_PunctuationInitialQuote:
                false
            case Unicode_Category.Unicode_PunctuationFinalQuote:
                false
            case Unicode_Category.Unicode_PunctuationOther:
                false
            case Unicode_Category.Unicode_SymbolMath:
                false
            case Unicode_Category.Unicode_SymbolCurrency:
                false
            case Unicode_Category.Unicode_SymbolModifier:
                false
            case Unicode_Category.Unicode_SymbolOther:
                false
            }
        }
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_collapsibleComments(_ commentsToPrint: List_List<String>) ->  Generated_lineSpread_print<Print_LineSpread, Print_Print> {
    let generated_localReturnResult_declarationResult: Generated_lineSpread_print<Print_LineSpread, Print_Print>
    switch commentsToPrint {
    case List_List.List_Empty:
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_printEmptyLineSpreadSingleLine
    case let List_List.List_Cons(comment0, comment1Up):
        let generated_let_caseResult_case1_declarationResult_commentPrints: List_List<Print_Print> =
            List_map(ElmSyntaxPrintDefunctionalized_comment, List_cons(comment0, comment1Up))
        generated_localReturnResult_declarationResult =
            if List_all({ (commentPrint: Print_Print) in ElmSyntaxPrintDefunctionalized_commentCanBePartOfCollapsible(Print_toString(commentPrint)) }, generated_let_caseResult_case1_declarationResult_commentPrints) {
                Generated_lineSpread_print.Record(lineSpread: Print_LineSpread.Print_SingleLine, print: Print_listIntersperseAndFlatten(ElmSyntaxPrintDefunctionalized_printExactlySpace, generated_let_caseResult_case1_declarationResult_commentPrints))
            } else {
                Generated_lineSpread_print.Record(lineSpread: Print_LineSpread.Print_MultipleLines, print: ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up)))
            }
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_comment(_ syntaxComment: String) ->  Print_Print {
    let generated_localReturnResult_declarationResult: Print_Print
    switch syntaxComment {
    case "{--}":
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_printExactlyCurlyOpeningDotDotCurlyClosing
    case let nonDirectlyClosingMultiLineComment:
        let generated_localReturnResult_caseResult_case1_declarationResult: Print_Print
        if String_startsWith("--", nonDirectlyClosingMultiLineComment) {
            generated_localReturnResult_caseResult_case1_declarationResult =
                Print_exactly(String_trimRight(nonDirectlyClosingMultiLineComment))
        } else {
            let generated_let_onFalse_caseResult_case1_declarationResult_commentContentLines: List_List<String> =
                String_lines(String_slice(2.0, Basics_sub(String_length(nonDirectlyClosingMultiLineComment), 2.0), nonDirectlyClosingMultiLineComment))
            let generated_let_onFalse_caseResult_case1_declarationResult_commentContentNormal: List_List<String> =
                switch generated_let_onFalse_caseResult_case1_declarationResult_commentContentLines {
                case List_List.List_Empty:
                    List_List.List_Empty
                case let List_List.List_Cons(commentContentLine0, commentContentLine1Up):
                    List_cons(String_trim(commentContentLine0), ElmSyntaxPrintDefunctionalized_linesUnindentAndTrimRight(ElmSyntaxPrintDefunctionalized_listDropLastIfEmpty(commentContentLine1Up)))
                }
            let generated_localReturnResult_argument0_right_left_letResult_onFalse_caseResult_case1_declarationResult: Print_Print
            switch generated_let_onFalse_caseResult_case1_declarationResult_commentContentNormal {
            case List_List.List_Empty:
                generated_localReturnResult_argument0_right_left_letResult_onFalse_caseResult_case1_declarationResult =
                    ElmSyntaxPrintDefunctionalized_printExactlySpaceSpace
            case let List_List.List_Cons(singleLine, List_List.List_Empty):
                generated_localReturnResult_argument0_right_left_letResult_onFalse_caseResult_case1_declarationResult =
                    Print_exactly(String_append(" ", String_append(singleLine, " ")))
            case let List_List.List_Cons(firstLine, List_List.List_Cons(secondLine, thirdLineUp)):
                let generated_localReturnResult_left_caseResult_case2_argument0_right_left_letResult_onFalse_caseResult_case1_declarationResult: Print_Print =
                    switch firstLine {
                    case "":
                        Print_linebreakIndented
                    case let lineNotEmpty:
                        Print_followedBy(Print_linebreakIndented, Print_exactly(String_append(" ", lineNotEmpty)))
                    }
                generated_localReturnResult_argument0_right_left_letResult_onFalse_caseResult_case1_declarationResult =
                    Print_followedBy(
                        Print_listMapAndFlatten(
                            { (line: String) in
                                switch line {
                                case "":
                                    Print_linebreakIndented
                                case let lineNotEmpty:
                                    Print_followedBy(Print_linebreakIndented, Print_exactly(String_append("   ", lineNotEmpty)))
                                }
                            },
                            List_cons(secondLine, thirdLineUp)
                        ),
                        generated_localReturnResult_left_caseResult_case2_argument0_right_left_letResult_onFalse_caseResult_case1_declarationResult
                    )
            }
            generated_localReturnResult_caseResult_case1_declarationResult =
                Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyMinusCurlyClosing, Print_followedBy(generated_localReturnResult_argument0_right_left_letResult_onFalse_caseResult_case1_declarationResult, ElmSyntaxPrintDefunctionalized_printExactlyCurlyOpeningMinus))
        }
        generated_localReturnResult_declarationResult =
            generated_localReturnResult_caseResult_case1_declarationResult
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_commentCanBePartOfCollapsible(_ syntaxComment: String) ->  Bool {
    switch syntaxComment {
    case "{--}":
        false
    case let commentNotDirectlyClosed:
        Basics_and(String_startsWith("{-", commentNotDirectlyClosed), Basics_not(String_contains("\n", commentNotDirectlyClosed)))
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_commentNodesInRange(_ range: Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location>, _ sortedComments: List_List<ElmSyntaxNode_Node<String>>) ->  List_List<ElmSyntaxNode_Node<String>> {
    let generated_localReturnResult_declarationResult: List_List<ElmSyntaxNode_Node<String>>
    switch sortedComments {
    case List_List.List_Empty:
        generated_localReturnResult_declarationResult =
            List_List.List_Empty
    case let List_List.List_Cons(headCommentNode, tailComments):
        let generated_let_caseResult_case1_declarationResult_headCommentRange: ElmSyntaxRange_Range
        switch headCommentNode {
        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_headCommentRange, _):
            generated_let_caseResult_case1_declarationResult_headCommentRange =
                generated_destructured_headCommentRange
        }
        generated_localReturnResult_declarationResult =
            switch ElmSyntaxPrintDefunctionalized_locationCompareFast(generated_let_caseResult_case1_declarationResult_headCommentRange.start, range.start) {
            case Basics_Order.Basics_LT:
                ElmSyntaxPrintDefunctionalized_commentNodesInRange(range, tailComments)
            case Basics_Order.Basics_EQ:
                List_cons(headCommentNode, ElmSyntaxPrintDefunctionalized_commentNodesInRange(range, tailComments))
            case Basics_Order.Basics_GT:
                switch ElmSyntaxPrintDefunctionalized_locationCompareFast(generated_let_caseResult_case1_declarationResult_headCommentRange.end, range.end) {
                case Basics_Order.Basics_GT:
                    List_List.List_Empty
                case Basics_Order.Basics_LT:
                    List_cons(headCommentNode, ElmSyntaxPrintDefunctionalized_commentNodesInRange(range, tailComments))
                case Basics_Order.Basics_EQ:
                    List_cons(headCommentNode, ElmSyntaxPrintDefunctionalized_commentNodesInRange(range, tailComments))
                }
            }
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_comments(_ syntaxComments: List_List<String>) ->  Print_Print {
    Print_listMapAndIntersperseAndFlatten(ElmSyntaxPrintDefunctionalized_comment, Print_linebreakIndented, syntaxComments)
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_commentsAfter(_ end: ElmSyntaxRange_Location, _ sortedComments: List_List<ElmSyntaxNode_Node<String>>) ->  List_List<String> {
    switch sortedComments {
    case List_List.List_Empty:
        List_List.List_Empty
    case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(headCommentRange, headComment), tailComments):
        switch ElmSyntaxPrintDefunctionalized_locationCompareFast(headCommentRange.start, end) {
        case Basics_Order.Basics_LT:
            ElmSyntaxPrintDefunctionalized_commentsAfter(end, tailComments)
        case Basics_Order.Basics_GT:
            List_cons(headComment, List_map(ElmSyntaxNode_value, tailComments))
        case Basics_Order.Basics_EQ:
            List_cons(headComment, List_map(ElmSyntaxNode_value, tailComments))
        }
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_commentsBetweenDocumentationAndDeclaration(_ syntaxComments: List_List<String>) ->  Print_Print {
    switch syntaxComments {
    case List_List.List_Empty:
        Print_empty
    case let List_List.List_Cons(comment0, comment1Up):
        Print_followedBy(ElmSyntaxPrintDefunctionalized_printLinebreakLinebreak, Print_followedBy(ElmSyntaxPrintDefunctionalized_moduleLevelComments(List_cons(comment0, comment1Up)), ElmSyntaxPrintDefunctionalized_printLinebreakLinebreakLinebreak))
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_commentsEmptyPortDocumentationRemainingCommentsEmpty<a__: Sendable, b__: Sendable>() ->  Generated_portDocumentationComments_remainingComments<List_List<b__>, List_List<a__>> {
    Generated_portDocumentationComments_remainingComments.Record(portDocumentationComments: List_List.List_Empty, remainingComments: List_List.List_Empty)
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_commentsInRange(_ range: Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location>, _ sortedComments: List_List<ElmSyntaxNode_Node<String>>) ->  List_List<String> {
    switch sortedComments {
    case List_List.List_Empty:
        List_List.List_Empty
    case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(headCommentRange, headComment), tailComments):
        switch ElmSyntaxPrintDefunctionalized_locationCompareFast(headCommentRange.start, range.start) {
        case Basics_Order.Basics_LT:
            ElmSyntaxPrintDefunctionalized_commentsInRange(range, tailComments)
        case Basics_Order.Basics_EQ:
            List_cons(headComment, ElmSyntaxPrintDefunctionalized_commentsInRange(range, tailComments))
        case Basics_Order.Basics_GT:
            switch ElmSyntaxPrintDefunctionalized_locationCompareFast(headCommentRange.end, range.end) {
            case Basics_Order.Basics_GT:
                List_List.List_Empty
            case Basics_Order.Basics_LT:
                List_cons(headComment, ElmSyntaxPrintDefunctionalized_commentsInRange(range, tailComments))
            case Basics_Order.Basics_EQ:
                List_cons(headComment, ElmSyntaxPrintDefunctionalized_commentsInRange(range, tailComments))
            }
        }
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_construct<a: Sendable>(_ specific: Generated_lineSpreadMinimum_printArgumentParenthesizedIfSpaceSeparated<Print_LineSpread, @Sendable (List_List<ElmSyntaxNode_Node<String>>) -> (ElmSyntaxNode_Node<a>) -> Print_Print>, _ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxConstruct: Generated_arguments_fullRange_start<List_List<ElmSyntaxNode_Node<a>>, ElmSyntaxRange_Range, String>) ->  Print_Print {
    let generated_let_declarationResult_argumentPrintsAndCommentsBeforeReverse: List_List<Print_Print> =
        List_foldl(
            { (argument: ElmSyntaxNode_Node<a>) in
                { (soFar: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Print_Print>>) in
                    let generated_let_result_argument0_right_left_letDeclaration0_declarationResult_print: Print_Print =
                        specific.printArgumentParenthesizedIfSpaceSeparated(syntaxComments)(argument)
                    let generated_localReturnResult_left_reverse_letResult_result_argument0_right_left_letDeclaration0_declarationResult: Print_Print
                    switch ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(argument).start, start: soFar.endLocation), syntaxComments) {
                    case List_List.List_Empty:
                        generated_localReturnResult_left_reverse_letResult_result_argument0_right_left_letDeclaration0_declarationResult =
                            generated_let_result_argument0_right_left_letDeclaration0_declarationResult_print
                    case let List_List.List_Cons(comment0, comment1Up):
                        let generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_left_letDeclaration0_declarationResult_commentsBeforeArgument: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
                            ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up))
                        generated_localReturnResult_left_reverse_letResult_result_argument0_right_left_letDeclaration0_declarationResult =
                            Print_followedBy(
                                generated_let_result_argument0_right_left_letDeclaration0_declarationResult_print,
                                Print_followedBy(
                                    Print_spaceOrLinebreakIndented(
                                        Print_lineSpreadMergeWith(
                                            { (generated_argument0_right_argument0_argument0_right_left_letResult_caseResult_case1_left_reverse_letResult_result_argument0_right_left_letDeclaration0_declarationResult_0: Unit) in
                                                let (_) =
                                                    generated_argument0_right_argument0_argument0_right_left_letResult_caseResult_case1_left_reverse_letResult_result_argument0_right_left_letDeclaration0_declarationResult_0
                                                return Print_lineSpread(generated_let_result_argument0_right_left_letDeclaration0_declarationResult_print)
                                            },
                                            generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_left_letDeclaration0_declarationResult_commentsBeforeArgument.lineSpread
                                        )
                                    ),
                                    generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_left_letDeclaration0_declarationResult_commentsBeforeArgument.print
                                )
                            )
                    }
                    return Generated_endLocation_reverse.Record(endLocation: ElmSyntaxNode_range(argument).end, reverse: List_cons(generated_localReturnResult_left_reverse_letResult_result_argument0_right_left_letDeclaration0_declarationResult, soFar.reverse))
                }
            },
            Generated_endLocation_reverse.Record(endLocation: syntaxConstruct.fullRange.start, reverse: List_List.List_Empty),
            syntaxConstruct.arguments
        ).reverse
    let generated_let_declarationResult_lineSpread: Print_LineSpread =
        Print_lineSpreadMergeWith(
            { (generated_argument0_right_letDeclaration1_declarationResult_0: Unit) in
                let (_) =
                    generated_argument0_right_letDeclaration1_declarationResult_0
                return Print_lineSpreadListMapAndCombine(Print_lineSpread, generated_let_declarationResult_argumentPrintsAndCommentsBeforeReverse)
            },
            specific.lineSpreadMinimum
        )
    return Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_listReverseAndMapAndFlatten({ (argumentPrintWithCommentsBefore: Print_Print) in Print_followedBy(argumentPrintWithCommentsBefore, Print_spaceOrLinebreakIndented(generated_let_declarationResult_lineSpread)) }, generated_let_declarationResult_argumentPrintsAndCommentsBeforeReverse)), Print_exactly(syntaxConstruct.start))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_declaration(_ syntaxComments: Generated_comments_portDocumentationComment<List_List<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxNode_Node<String>>>, _ syntaxDeclaration: ElmSyntaxDeclaration_Declaration) ->  Print_Print {
    switch syntaxDeclaration {
    case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_FunctionDeclaration(syntaxExpressionDeclaration):
        ElmSyntaxPrintDefunctionalized_declarationExpression(syntaxComments.comments, syntaxExpressionDeclaration)
    case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_AliasDeclaration(syntaxTypeAliasDeclaration):
        ElmSyntaxPrintDefunctionalized_declarationTypeAlias(syntaxComments.comments, syntaxTypeAliasDeclaration)
    case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_CustomTypeDeclaration(syntaxChoiceTypeDeclaration):
        ElmSyntaxPrintDefunctionalized_declarationChoiceType(syntaxComments.comments, syntaxChoiceTypeDeclaration)
    case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_PortDeclaration(signature):
        ElmSyntaxPrintDefunctionalized_declarationPort(Generated_comments_documentationComment.Record(comments: syntaxComments.comments, documentationComment: syntaxComments.portDocumentationComment), signature)
    case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_InfixDeclaration(syntaxInfixDeclaration):
        ElmSyntaxPrintDefunctionalized_declarationInfix(syntaxInfixDeclaration)
    case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_Destructuring(destructuringPattern, destructuringExpression):
        ElmSyntaxPrintDefunctionalized_declarationDestructuring(syntaxComments.comments, destructuringPattern, destructuringExpression)
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_declarationChoiceType(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxChoiceTypeDeclaration: Generated_constructors_documentation_generics_name<List_List<ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>, List_List<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<String>>) ->  Print_Print {
    let generated_let_declarationResult_parameterPrints: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Print_Print>> =
        List_foldl(
            { (parameterName: ElmSyntaxNode_Node<String>) in
                { (soFar: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Print_Print>>) in
                    let generated_let_result_argument0_right_letDeclaration0_declarationResult_parameterPrintedRange: ElmSyntaxRange_Range =
                        ElmSyntaxNode_range(parameterName)
                    let generated_let_result_argument0_right_letDeclaration0_declarationResult_parameterNamePrint: Print_Print =
                        Print_exactly(ElmSyntaxNode_value(parameterName))
                    let generated_localReturnResult_left_reverse_letResult_result_argument0_right_letDeclaration0_declarationResult: Print_Print
                    switch ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: generated_let_result_argument0_right_letDeclaration0_declarationResult_parameterPrintedRange.start, start: soFar.endLocation), syntaxComments) {
                    case List_List.List_Empty:
                        generated_localReturnResult_left_reverse_letResult_result_argument0_right_letDeclaration0_declarationResult =
                            generated_let_result_argument0_right_letDeclaration0_declarationResult_parameterNamePrint
                    case let List_List.List_Cons(comment0, comment1Up):
                        let generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_letDeclaration0_declarationResult_commentsCollapsible: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
                            ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up))
                        generated_localReturnResult_left_reverse_letResult_result_argument0_right_letDeclaration0_declarationResult =
                            Print_followedBy(generated_let_result_argument0_right_letDeclaration0_declarationResult_parameterNamePrint, Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_letDeclaration0_declarationResult_commentsCollapsible.lineSpread), generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_letDeclaration0_declarationResult_commentsCollapsible.print))
                    }
                    return Generated_endLocation_reverse.Record(endLocation: generated_let_result_argument0_right_letDeclaration0_declarationResult_parameterPrintedRange.end, reverse: List_cons(generated_localReturnResult_left_reverse_letResult_result_argument0_right_letDeclaration0_declarationResult, soFar.reverse))
                }
            },
            Generated_endLocation_reverse.Record(endLocation: ElmSyntaxNode_range(syntaxChoiceTypeDeclaration.name).end, reverse: List_List.List_Empty),
            syntaxChoiceTypeDeclaration.generics
        )
    let generated_let_declarationResult_parametersLineSpread: Print_LineSpread =
        Print_lineSpreadListMapAndCombine(Print_lineSpread, generated_let_declarationResult_parameterPrints.reverse)
    let generated_let_declarationResult_variantPrintsWithCommentsBeforeReverse: List_List<Print_Print> =
        List_foldl(
            { (generated_argument0_right_left_letDeclaration2_declarationResult_0: ElmSyntaxNode_Node<Generated_arguments_name<List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>, ElmSyntaxNode_Node<String>>>) in
                { (soFar: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Print_Print>>) in
                    let variantRange: ElmSyntaxRange_Range
                    let variant: Generated_arguments_name<List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>, ElmSyntaxNode_Node<String>>
                    switch generated_argument0_right_left_letDeclaration2_declarationResult_0 {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_variantRange, generated_destructured_variant):
                        variantRange =
                            generated_destructured_variantRange
                        variant =
                            generated_destructured_variant
                    }
                    let generated_let_result_argument0_right_left_letDeclaration2_declarationResult_variantPrint: Print_Print =
                        ElmSyntaxPrintDefunctionalized_construct(Generated_lineSpreadMinimum_printArgumentParenthesizedIfSpaceSeparated.Record(lineSpreadMinimum: Print_LineSpread.Print_SingleLine, printArgumentParenthesizedIfSpaceSeparated: { (generated_printArgumentParenthesizedIfSpaceSeparated_argument0_letDeclaration0_result_argument0_right_left_letDeclaration2_declarationResult_0: List_List<ElmSyntaxNode_Node<String>>) in { (generated_printArgumentParenthesizedIfSpaceSeparated_argument0_letDeclaration0_result_argument0_right_left_letDeclaration2_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in ElmSyntaxPrintDefunctionalized_typeParenthesizedIfSpaceSeparated(generated_printArgumentParenthesizedIfSpaceSeparated_argument0_letDeclaration0_result_argument0_right_left_letDeclaration2_declarationResult_0, generated_printArgumentParenthesizedIfSpaceSeparated_argument0_letDeclaration0_result_argument0_right_left_letDeclaration2_declarationResult_1) } }), syntaxComments, Generated_arguments_fullRange_start.Record(arguments: variant.arguments, fullRange: variantRange, start: ElmSyntaxNode_value(variant.name)))
                    let generated_localReturnResult_letDeclaration1_result_argument0_right_left_letDeclaration2_declarationResult: Print_Print
                    switch ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(variant.name).start, start: soFar.endLocation), syntaxComments) {
                    case List_List.List_Empty:
                        generated_localReturnResult_letDeclaration1_result_argument0_right_left_letDeclaration2_declarationResult =
                            generated_let_result_argument0_right_left_letDeclaration2_declarationResult_variantPrint
                    case let List_List.List_Cons(comment0, comment1Up):
                        let generated_let_caseResult_case1_letDeclaration1_result_argument0_right_left_letDeclaration2_declarationResult_commentsCollapsible: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
                            ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up))
                        generated_localReturnResult_letDeclaration1_result_argument0_right_left_letDeclaration2_declarationResult =
                            Print_followedBy(
                                generated_let_result_argument0_right_left_letDeclaration2_declarationResult_variantPrint,
                                Print_followedBy(
                                    Print_spaceOrLinebreakIndented(
                                        Print_lineSpreadMergeWith(
                                            { (generated_argument0_right_argument0_argument0_right_left_letResult_caseResult_case1_letDeclaration1_result_argument0_right_left_letDeclaration2_declarationResult_0: Unit) in
                                                let (_) =
                                                    generated_argument0_right_argument0_argument0_right_left_letResult_caseResult_case1_letDeclaration1_result_argument0_right_left_letDeclaration2_declarationResult_0
                                                return Print_lineSpread(generated_let_result_argument0_right_left_letDeclaration2_declarationResult_variantPrint)
                                            },
                                            generated_let_caseResult_case1_letDeclaration1_result_argument0_right_left_letDeclaration2_declarationResult_commentsCollapsible.lineSpread
                                        )
                                    ),
                                    generated_let_caseResult_case1_letDeclaration1_result_argument0_right_left_letDeclaration2_declarationResult_commentsCollapsible.print
                                )
                            )
                    }
                    let generated_let_result_argument0_right_left_letDeclaration2_declarationResult_commentsVariantPrint: Print_Print =
                        generated_localReturnResult_letDeclaration1_result_argument0_right_left_letDeclaration2_declarationResult
                    return Generated_endLocation_reverse.Record(endLocation: variantRange.end, reverse: List_cons(generated_let_result_argument0_right_left_letDeclaration2_declarationResult_commentsVariantPrint, soFar.reverse))
                }
            },
            Generated_endLocation_reverse.Record(endLocation: generated_let_declarationResult_parameterPrints.endLocation, reverse: List_List.List_Empty),
            syntaxChoiceTypeDeclaration.constructors
        ).reverse
    let generated_localReturnResult_left_letResult_declarationResult: Print_Print =
        switch syntaxChoiceTypeDeclaration.documentation {
        case Maybe_Maybe.Maybe_Nothing:
            ElmSyntaxPrintDefunctionalized_printExactlyType
        case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(documentationRange, documentation)):
            Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyType, Print_followedBy(ElmSyntaxPrintDefunctionalized_commentsBetweenDocumentationAndDeclaration(ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(syntaxChoiceTypeDeclaration.name).start, start: documentationRange.start), syntaxComments)), Print_followedBy(Print_linebreak, ElmSyntaxPrintDefunctionalized_printDocumentationComment(documentation))))
        }
    return Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(Print_listReverseAndMapAndIntersperseAndFlatten({ (variantPrint: Print_Print) in Print_withIndentIncreasedBy(2.0, variantPrint) }, ElmSyntaxPrintDefunctionalized_printLinebreakIndentedVerticalBarSpace, generated_let_declarationResult_variantPrintsWithCommentsBeforeReverse), Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyEqualsSpace, Print_followedBy(Print_linebreakIndented, Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_listReverseAndMapAndFlatten({ (parameterPrint: Print_Print) in Print_followedBy(parameterPrint, Print_spaceOrLinebreakIndented(generated_let_declarationResult_parametersLineSpread)) }, generated_let_declarationResult_parameterPrints.reverse)), Print_followedBy(Print_exactly(ElmSyntaxNode_value(syntaxChoiceTypeDeclaration.name)), Print_spaceOrLinebreakIndented(generated_let_declarationResult_parametersLineSpread))))))), generated_localReturnResult_left_letResult_declarationResult)
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_declarationDestructuring(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ destructuringPattern: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, _ destructuringExpression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) ->  Print_Print {
    Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(List_List.List_Empty, destructuringExpression), Print_linebreakIndented)), Print_followedBy(Print_exactly(" ="), ElmSyntaxPrintDefunctionalized_patternParenthesizedIfSpaceSeparated(syntaxComments, destructuringPattern)))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_declarationExpression(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxExpressionDeclaration: Generated_declaration_documentation_signature<ElmSyntaxNode_Node<ElmSyntaxExpression_FunctionImplementation>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxSignature_Signature>>>) ->  Print_Print {
    let generated_let_declarationResult_implementationPrint: Print_Print =
        ElmSyntaxPrintDefunctionalized_declarationExpressionImplementation(syntaxComments, ElmSyntaxNode_value(syntaxExpressionDeclaration.declaration))
    let generated_localReturnResult_letDeclaration1_declarationResult: Print_Print
    switch syntaxExpressionDeclaration.signature {
    case Maybe_Maybe.Maybe_Nothing:
        generated_localReturnResult_letDeclaration1_declarationResult =
            generated_let_declarationResult_implementationPrint
    case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(signatureRange, signature)):
        let generated_let_caseResult_case1_letDeclaration1_declarationResult_commentsBetweenSignatureAndImplementationName: List_List<String> =
            ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(syntaxExpressionDeclaration.declaration).start, start: signatureRange.end), syntaxComments)
        let generated_localReturnResult_argument0_right_letResult_caseResult_case1_letDeclaration1_declarationResult: Print_Print =
            switch generated_let_caseResult_case1_letDeclaration1_declarationResult_commentsBetweenSignatureAndImplementationName {
            case List_List.List_Empty:
                generated_let_declarationResult_implementationPrint
            case let List_List.List_Cons(comment0, comment1Up):
                Print_followedBy(generated_let_declarationResult_implementationPrint, Print_followedBy(ElmSyntaxPrintDefunctionalized_printLinebreakLinebreak, Print_followedBy(ElmSyntaxPrintDefunctionalized_moduleLevelComments(List_cons(comment0, comment1Up)), ElmSyntaxPrintDefunctionalized_printLinebreakLinebreakLinebreak)))
            }
        generated_localReturnResult_letDeclaration1_declarationResult =
            Print_followedBy(generated_localReturnResult_argument0_right_letResult_caseResult_case1_letDeclaration1_declarationResult, Print_followedBy(Print_linebreak, ElmSyntaxPrintDefunctionalized_declarationSignature(syntaxComments, signature)))
    }
    let generated_let_declarationResult_withoutDocumentationPrint: Print_Print =
        generated_localReturnResult_letDeclaration1_declarationResult
    let generated_localReturnResult_letResult_declarationResult: Print_Print
    switch syntaxExpressionDeclaration.documentation {
    case Maybe_Maybe.Maybe_Nothing:
        generated_localReturnResult_letResult_declarationResult =
            generated_let_declarationResult_withoutDocumentationPrint
    case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(documentationRange, documentation)):
        let generated_localReturnResult_end_argument0_argument0_argument0_right_left_caseResult_case1_letResult_declarationResult: ElmSyntaxRange_Location =
            switch syntaxExpressionDeclaration.signature {
            case Maybe_Maybe.Maybe_Nothing:
                ElmSyntaxNode_range(syntaxExpressionDeclaration.declaration).start
            case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(signatureRange, _)):
                signatureRange.start
            }
        generated_localReturnResult_letResult_declarationResult =
            Print_followedBy(generated_let_declarationResult_withoutDocumentationPrint, Print_followedBy(ElmSyntaxPrintDefunctionalized_commentsBetweenDocumentationAndDeclaration(ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: generated_localReturnResult_end_argument0_argument0_argument0_right_left_caseResult_case1_letResult_declarationResult, start: documentationRange.start), syntaxComments)), Print_followedBy(Print_linebreak, ElmSyntaxPrintDefunctionalized_printDocumentationComment(documentation))))
    }
    return generated_localReturnResult_letResult_declarationResult
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_declarationExpressionImplementation(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ implementation: Generated_arguments_expression_name<List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, ElmSyntaxNode_Node<String>>) ->  Print_Print {
    let generated_let_declarationResult_parameterPrintsWithCommentsBefore: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Print_Print>> =
        List_foldl(
            { (parameterPattern: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in
                { (soFar: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Print_Print>>) in
                    let generated_let_result_argument0_right_letDeclaration0_declarationResult_parameterRange: ElmSyntaxRange_Range =
                        ElmSyntaxNode_range(parameterPattern)
                    let generated_let_result_argument0_right_letDeclaration0_declarationResult_parameterPrint: Print_Print =
                        ElmSyntaxPrintDefunctionalized_patternParenthesizedIfSpaceSeparated(syntaxComments, parameterPattern)
                    let generated_localReturnResult_left_reverse_letResult_result_argument0_right_letDeclaration0_declarationResult: Print_Print
                    switch ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: generated_let_result_argument0_right_letDeclaration0_declarationResult_parameterRange.start, start: soFar.endLocation), syntaxComments) {
                    case List_List.List_Empty:
                        generated_localReturnResult_left_reverse_letResult_result_argument0_right_letDeclaration0_declarationResult =
                            generated_let_result_argument0_right_letDeclaration0_declarationResult_parameterPrint
                    case let List_List.List_Cons(comment0, comment1Up):
                        let generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_letDeclaration0_declarationResult_commentsBefore: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
                            ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up))
                        generated_localReturnResult_left_reverse_letResult_result_argument0_right_letDeclaration0_declarationResult =
                            Print_followedBy(
                                generated_let_result_argument0_right_letDeclaration0_declarationResult_parameterPrint,
                                Print_followedBy(
                                    Print_spaceOrLinebreakIndented(
                                        Print_lineSpreadMergeWith(
                                            { (generated_argument0_right_argument0_argument0_right_left_letResult_caseResult_case1_left_reverse_letResult_result_argument0_right_letDeclaration0_declarationResult_0: Unit) in
                                                let (_) =
                                                    generated_argument0_right_argument0_argument0_right_left_letResult_caseResult_case1_left_reverse_letResult_result_argument0_right_letDeclaration0_declarationResult_0
                                                return Print_lineSpread(generated_let_result_argument0_right_letDeclaration0_declarationResult_parameterPrint)
                                            },
                                            generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_letDeclaration0_declarationResult_commentsBefore.lineSpread
                                        )
                                    ),
                                    generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_letDeclaration0_declarationResult_commentsBefore.print
                                )
                            )
                    }
                    return Generated_endLocation_reverse.Record(endLocation: generated_let_result_argument0_right_letDeclaration0_declarationResult_parameterRange.end, reverse: List_cons(generated_localReturnResult_left_reverse_letResult_result_argument0_right_letDeclaration0_declarationResult, soFar.reverse))
                }
            },
            Generated_endLocation_reverse.Record(endLocation: ElmSyntaxNode_range(implementation.name).end, reverse: List_List.List_Empty),
            implementation.arguments
        )
    let generated_let_declarationResult_parametersLineSpread: Print_LineSpread =
        Print_lineSpreadListMapAndCombine(Print_lineSpread, generated_let_declarationResult_parameterPrintsWithCommentsBefore.reverse)
    let generated_let_declarationResult_expressionPrint: Print_Print =
        ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, implementation.expression)
    let generated_let_declarationResult_commentsBetweenParametersAndResult: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(implementation.expression).start, start: generated_let_declarationResult_parameterPrintsWithCommentsBefore.endLocation), syntaxComments)
    let generated_localReturnResult_argument0_right_argument0_right_argument0_argument0_right_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_commentsBetweenParametersAndResult {
        case List_List.List_Empty:
            generated_let_declarationResult_expressionPrint
        case let List_List.List_Cons(comment0, comment1Up):
            Print_followedBy(generated_let_declarationResult_expressionPrint, Print_followedBy(Print_linebreakIndented, ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up))))
        }
    return Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(Print_followedBy(generated_localReturnResult_argument0_right_argument0_right_argument0_argument0_right_letResult_declarationResult, Print_linebreakIndented), Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyEquals, Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_declarationResult_parametersLineSpread), Print_listReverseAndMapAndFlatten({ (parameterPrintWithCommentsBefore: Print_Print) in Print_followedBy(parameterPrintWithCommentsBefore, Print_spaceOrLinebreakIndented(generated_let_declarationResult_parametersLineSpread)) }, generated_let_declarationResult_parameterPrintsWithCommentsBefore.reverse))))), Print_exactly(ElmSyntaxNode_value(implementation.name)))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_declarationInfix(_ syntaxInfixDeclaration: Generated_direction_function_operator__precedence<ElmSyntaxNode_Node<ElmSyntaxInfix_InfixDirection>, ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<Double>>) ->  Print_Print {
    Print_exactly(String_append("infix ", String_append(ElmSyntaxPrintDefunctionalized_infixDirection(ElmSyntaxNode_value(syntaxInfixDeclaration.direction)), String_append(" ", String_append(String_fromInt(ElmSyntaxNode_value(syntaxInfixDeclaration.precedence)), String_append(" (", String_append(ElmSyntaxNode_value(syntaxInfixDeclaration.operator_), String_append(") = ", ElmSyntaxNode_value(syntaxInfixDeclaration.function)))))))))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_declarationPort(_ syntaxComments: Generated_comments_documentationComment<List_List<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxNode_Node<String>>>, _ signature: Generated_name_typeAnnotation<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) ->  Print_Print {
    let generated_localReturnResult_left_declarationResult: Print_Print =
        switch syntaxComments.documentationComment {
        case Maybe_Maybe.Maybe_Nothing:
            ElmSyntaxPrintDefunctionalized_printExactlyPortSpace
        case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(documentationRange, documentation)):
            Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyPortSpace, Print_followedBy(ElmSyntaxPrintDefunctionalized_commentsBetweenDocumentationAndDeclaration(ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(signature.name).start, start: documentationRange.start), syntaxComments.comments)), Print_followedBy(Print_linebreak, ElmSyntaxPrintDefunctionalized_printDocumentationComment(documentation))))
        }
    return Print_followedBy(ElmSyntaxPrintDefunctionalized_declarationSignature(syntaxComments.comments, signature), generated_localReturnResult_left_declarationResult)
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_declarationSignature(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ signature: Generated_name_typeAnnotation<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) ->  Print_Print {
    let generated_let_declarationResult_typePrint: Print_Print =
        ElmSyntaxPrintDefunctionalized_typeNotParenthesized(syntaxComments, signature.typeAnnotation)
    let generated_let_declarationResult_rangeBetweenNameAndType: ElmSyntaxRange_Range =
        Generated_end_start.Record(end: ElmSyntaxNode_range(signature.typeAnnotation).start, start: ElmSyntaxNode_range(signature.name).end)
    let generated_localReturnResult_left_argument0_argument0_right_letResult_declarationResult: Print_Print =
        switch ElmSyntaxPrintDefunctionalized_commentsInRange(generated_let_declarationResult_rangeBetweenNameAndType, syntaxComments) {
        case List_List.List_Empty:
            Print_spaceOrLinebreakIndented(Print_lineSpread(generated_let_declarationResult_typePrint))
        case let List_List.List_Cons(comment0, comment1Up):
            Print_followedBy(Print_linebreakIndented, Print_followedBy(ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up)), Print_linebreakIndented))
        }
    return Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(generated_let_declarationResult_typePrint, generated_localReturnResult_left_argument0_argument0_right_letResult_declarationResult)), Print_exactly(String_append(ElmSyntaxNode_value(signature.name), " :")))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_declarationTypeAlias(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxTypeAliasDeclaration: Generated_documentation_generics_name_typeAnnotation<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>, List_List<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) ->  Print_Print {
    let generated_let_declarationResult_rangeBetweenParametersAndType: ElmSyntaxRange_Range =
        switch syntaxTypeAliasDeclaration.generics {
        case List_List.List_Empty:
            Generated_end_start.Record(end: ElmSyntaxNode_range(syntaxTypeAliasDeclaration.typeAnnotation).start, start: ElmSyntaxNode_range(syntaxTypeAliasDeclaration.name).end)
        case let List_List.List_Cons(parameter0, parameter1Up):
            Generated_end_start.Record(end: ElmSyntaxNode_range(syntaxTypeAliasDeclaration.typeAnnotation).start, start: ElmSyntaxNode_range(ElmSyntaxPrintDefunctionalized_listFilledLast(parameter0, parameter1Up)).end)
        }
    let generated_let_declarationResult_parameterPrintsWithCommentsBeforeReverse: List_List<Print_Print> =
        List_foldl(
            { (parameterName: ElmSyntaxNode_Node<String>) in
                { (soFar: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Print_Print>>) in
                    let generated_let_result_argument0_right_left_letDeclaration1_declarationResult_parameterPrintedRange: ElmSyntaxRange_Range =
                        ElmSyntaxNode_range(parameterName)
                    let generated_let_result_argument0_right_left_letDeclaration1_declarationResult_parameterNamePrint: Print_Print =
                        Print_exactly(ElmSyntaxNode_value(parameterName))
                    let generated_localReturnResult_left_reverse_letResult_result_argument0_right_left_letDeclaration1_declarationResult: Print_Print
                    switch ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: generated_let_result_argument0_right_left_letDeclaration1_declarationResult_parameterPrintedRange.start, start: soFar.endLocation), syntaxComments) {
                    case List_List.List_Empty:
                        generated_localReturnResult_left_reverse_letResult_result_argument0_right_left_letDeclaration1_declarationResult =
                            generated_let_result_argument0_right_left_letDeclaration1_declarationResult_parameterNamePrint
                    case let List_List.List_Cons(comment0, comment1Up):
                        let generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_left_letDeclaration1_declarationResult_commentsCollapsible: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
                            ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up))
                        generated_localReturnResult_left_reverse_letResult_result_argument0_right_left_letDeclaration1_declarationResult =
                            Print_followedBy(generated_let_result_argument0_right_left_letDeclaration1_declarationResult_parameterNamePrint, Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_left_letDeclaration1_declarationResult_commentsCollapsible.lineSpread), generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_left_letDeclaration1_declarationResult_commentsCollapsible.print))
                    }
                    return Generated_endLocation_reverse.Record(endLocation: generated_let_result_argument0_right_left_letDeclaration1_declarationResult_parameterPrintedRange.end, reverse: List_cons(generated_localReturnResult_left_reverse_letResult_result_argument0_right_left_letDeclaration1_declarationResult, soFar.reverse))
                }
            },
            Generated_endLocation_reverse.Record(endLocation: ElmSyntaxNode_range(syntaxTypeAliasDeclaration.name).end, reverse: List_List.List_Empty),
            syntaxTypeAliasDeclaration.generics
        ).reverse
    let generated_let_declarationResult_parametersLineSpread: Print_LineSpread =
        Print_lineSpreadListMapAndCombine(Print_lineSpread, generated_let_declarationResult_parameterPrintsWithCommentsBeforeReverse)
    let generated_let_declarationResult_aliasedTypePrint: Print_Print =
        ElmSyntaxPrintDefunctionalized_typeNotParenthesized(syntaxComments, syntaxTypeAliasDeclaration.typeAnnotation)
    let generated_localReturnResult_argument0_right_argument0_right_argument0_argument0_right_letResult_declarationResult: Print_Print =
        switch ElmSyntaxPrintDefunctionalized_commentsInRange(generated_let_declarationResult_rangeBetweenParametersAndType, syntaxComments) {
        case List_List.List_Empty:
            generated_let_declarationResult_aliasedTypePrint
        case let List_List.List_Cons(comment0, comment1Up):
            Print_followedBy(generated_let_declarationResult_aliasedTypePrint, Print_followedBy(Print_linebreakIndented, ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up))))
        }
    let generated_localReturnResult_left_letResult_declarationResult: Print_Print =
        switch syntaxTypeAliasDeclaration.documentation {
        case Maybe_Maybe.Maybe_Nothing:
            ElmSyntaxPrintDefunctionalized_printExactlyTypeSpaceAlias
        case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(documentationRange, documentation)):
            Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyTypeSpaceAlias, Print_followedBy(ElmSyntaxPrintDefunctionalized_commentsBetweenDocumentationAndDeclaration(ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(syntaxTypeAliasDeclaration.name).start, start: documentationRange.start), syntaxComments)), Print_followedBy(Print_linebreak, ElmSyntaxPrintDefunctionalized_printDocumentationComment(documentation))))
        }
    return Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(Print_followedBy(generated_localReturnResult_argument0_right_argument0_right_argument0_argument0_right_letResult_declarationResult, Print_linebreakIndented), Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyEquals, Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_declarationResult_parametersLineSpread), Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_listReverseAndMapAndFlatten({ (parameterPrint: Print_Print) in Print_followedBy(parameterPrint, Print_spaceOrLinebreakIndented(generated_let_declarationResult_parametersLineSpread)) }, generated_let_declarationResult_parameterPrintsWithCommentsBeforeReverse)), Print_followedBy(Print_exactly(ElmSyntaxNode_value(syntaxTypeAliasDeclaration.name)), Print_spaceOrLinebreakIndented(generated_let_declarationResult_parametersLineSpread))))))), generated_localReturnResult_left_letResult_declarationResult)
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_declarations(_ context: Generated_comments_portDocumentationComments_previousEnd<List_List<ElmSyntaxNode_Node<String>>, List_List<ElmSyntaxNode_Node<String>>, ElmSyntaxRange_Location>, _ syntaxDeclarations: List_List<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>) ->  Print_Print {
    let generated_localReturnResult_declarationResult: Print_Print
    switch syntaxDeclarations {
    case List_List.List_Empty:
        generated_localReturnResult_declarationResult =
            Print_empty
    case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(declaration0Range, declaration0), declarations1Up):
        let generated_localReturnResult_portDocumentationComment_argument0_left_caseResult_case1_declarationResult: Maybe_Maybe<ElmSyntaxNode_Node<String>> =
            switch declaration0 {
            case ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_PortDeclaration(_):
                ElmSyntaxPrintDefunctionalized_firstCommentInRange(Generated_end_start.Record(end: declaration0Range.start, start: context.previousEnd), context.portDocumentationComments)
            case ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_FunctionDeclaration(_):
                Maybe_Maybe.Maybe_Nothing
            case ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_AliasDeclaration(_):
                Maybe_Maybe.Maybe_Nothing
            case ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_CustomTypeDeclaration(_):
                Maybe_Maybe.Maybe_Nothing
            case ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_InfixDeclaration(_):
                Maybe_Maybe.Maybe_Nothing
            case ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_Destructuring(_, _):
                Maybe_Maybe.Maybe_Nothing
            }
        generated_localReturnResult_declarationResult =
            Print_followedBy(
                List_foldl(
                    { (generated_argument0_right_left_argument0_right_caseResult_case1_declarationResult_0: ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>) in
                        { (soFar: Generated_previousRange_print<Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location>, Print_Print>) in
                            let declarationRange: ElmSyntaxRange_Range
                            let syntaxDeclaration: ElmSyntaxDeclaration_Declaration
                            switch generated_argument0_right_left_argument0_right_caseResult_case1_declarationResult_0 {
                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_declarationRange, generated_destructured_syntaxDeclaration):
                                declarationRange =
                                    generated_destructured_declarationRange
                                syntaxDeclaration =
                                    generated_destructured_syntaxDeclaration
                            }
                            let generated_let_result_argument0_right_left_argument0_right_caseResult_case1_declarationResult_maybeDeclarationPortDocumentationComment: Maybe_Maybe<ElmSyntaxNode_Node<String>> =
                                switch syntaxDeclaration {
                                case ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_PortDeclaration(_):
                                    ElmSyntaxPrintDefunctionalized_firstCommentInRange(Generated_end_start.Record(end: declarationRange.start, start: soFar.previousRange.end), context.portDocumentationComments)
                                case ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_FunctionDeclaration(_):
                                    Maybe_Maybe.Maybe_Nothing
                                case ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_AliasDeclaration(_):
                                    Maybe_Maybe.Maybe_Nothing
                                case ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_CustomTypeDeclaration(_):
                                    Maybe_Maybe.Maybe_Nothing
                                case ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_InfixDeclaration(_):
                                    Maybe_Maybe.Maybe_Nothing
                                case ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_Destructuring(_, _):
                                    Maybe_Maybe.Maybe_Nothing
                                }
                            let generated_localReturnResult_argument0_right_print_letResult_result_argument0_right_left_argument0_right_caseResult_case1_declarationResult: Print_Print =
                                switch ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: declarationRange.start, start: soFar.previousRange.end), context.comments) {
                                case let List_List.List_Cons(comment0, comment1Up):
                                    Print_followedBy(ElmSyntaxPrintDefunctionalized_declaration(Generated_comments_portDocumentationComment.Record(comments: ElmSyntaxPrintDefunctionalized_commentNodesInRange(declarationRange, context.comments), portDocumentationComment: generated_let_result_argument0_right_left_argument0_right_caseResult_case1_declarationResult_maybeDeclarationPortDocumentationComment), syntaxDeclaration), Print_followedBy(ElmSyntaxPrintDefunctionalized_moduleLevelCommentsBeforeDeclaration(Generated_comment0_comment1Up.Record(comment0: comment0, comment1Up: comment1Up)), ElmSyntaxPrintDefunctionalized_printLinebreakLinebreakLinebreak))
                                case List_List.List_Empty:
                                    ElmSyntaxPrintDefunctionalized_linebreaksFollowedByDeclaration(Generated_comments_portDocumentationComment.Record(comments: ElmSyntaxPrintDefunctionalized_commentNodesInRange(declarationRange, context.comments), portDocumentationComment: generated_let_result_argument0_right_left_argument0_right_caseResult_case1_declarationResult_maybeDeclarationPortDocumentationComment), syntaxDeclaration)
                                }
                            return Generated_previousRange_print.Record(previousRange: declarationRange, print: Print_followedBy(generated_localReturnResult_argument0_right_print_letResult_result_argument0_right_left_argument0_right_caseResult_case1_declarationResult, soFar.print))
                        }
                    },
                    Generated_previousRange_print.Record(previousRange: declaration0Range, print: Print_empty),
                    declarations1Up
                ).print,
                ElmSyntaxPrintDefunctionalized_declaration(Generated_comments_portDocumentationComment.Record(comments: context.comments, portDocumentationComment: generated_localReturnResult_portDocumentationComment_argument0_left_caseResult_case1_declarationResult), declaration0)
            )
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_expose(_ syntaxExpose: ElmSyntaxExposing_TopLevelExpose) ->  String {
    switch syntaxExpose {
    case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_InfixExpose(operatorSymbol):
        String_append("(", String_append(operatorSymbol, ")"))
    case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_FunctionExpose(name):
        name
    case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeOrAliasExpose(name):
        name
    case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeExpose(syntaxExposeType):
        switch syntaxExposeType.open_ {
        case Maybe_Maybe.Maybe_Nothing:
            syntaxExposeType.name
        case Maybe_Maybe.Maybe_Just(_):
            String_append(syntaxExposeType.name, "(..)")
        }
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_exposeCompare(_ a: ElmSyntaxExposing_TopLevelExpose, _ b: ElmSyntaxExposing_TopLevelExpose) ->  Basics_Order {
    switch a {
    case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_InfixExpose(aOperatorSymbol):
        switch b {
        case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_InfixExpose(bOperatorSymbol):
            Basics_compare(aOperatorSymbol, bOperatorSymbol)
        case ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_FunctionExpose(_):
            Basics_Order.Basics_LT
        case ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeOrAliasExpose(_):
            Basics_Order.Basics_LT
        case ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeExpose(_):
            Basics_Order.Basics_LT
        }
    case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_FunctionExpose(aName):
        switch b {
        case ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_InfixExpose(_):
            Basics_Order.Basics_GT
        case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_FunctionExpose(bName):
            Basics_compare(aName, bName)
        case ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeOrAliasExpose(_):
            Basics_Order.Basics_GT
        case ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeExpose(_):
            Basics_Order.Basics_GT
        }
    case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeOrAliasExpose(aName):
        switch b {
        case ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_InfixExpose(_):
            Basics_Order.Basics_GT
        case ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_FunctionExpose(_):
            Basics_Order.Basics_LT
        case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeOrAliasExpose(bName):
            Basics_compare(aName, bName)
        case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeExpose(bTypeExpose):
            Basics_compare(aName, bTypeExpose.name)
        }
    case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeExpose(aTypeExpose):
        switch b {
        case ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_InfixExpose(_):
            Basics_Order.Basics_GT
        case ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_FunctionExpose(_):
            Basics_Order.Basics_LT
        case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeOrAliasExpose(bName):
            Basics_compare(aTypeExpose.name, bName)
        case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeExpose(bTypeExpose):
            Basics_compare(aTypeExpose.name, bTypeExpose.name)
        }
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_exposeListToNormal(_ syntaxExposeList: List_List<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>) ->  List_List<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>> {
    ElmSyntaxPrintDefunctionalized_exposesCombine(
        List_sortWith(
            { (generated_argument0_right_left_declarationResult_0: ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>) in
                { (generated_argument0_right_left_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>) in
                    let a: ElmSyntaxExposing_TopLevelExpose
                    switch generated_argument0_right_left_declarationResult_0 {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_a):
                        a =
                            generated_destructured_a
                    }
                    let b: ElmSyntaxExposing_TopLevelExpose
                    switch generated_argument0_right_left_declarationResult_1 {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_b):
                        b =
                            generated_destructured_b
                    }
                    return ElmSyntaxPrintDefunctionalized_exposeCompare(a, b)
                }
            },
            syntaxExposeList
        )
    )
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_exposeMerge(_ a: ElmSyntaxExposing_TopLevelExpose, _ b: ElmSyntaxExposing_TopLevelExpose) ->  ElmSyntaxExposing_TopLevelExpose {
    let generated_localReturnResult_declarationResult: ElmSyntaxExposing_TopLevelExpose
    switch a {
    case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeExpose(aTypeExpose):
        let generated_localReturnResult_caseResult_case0_declarationResult: ElmSyntaxExposing_TopLevelExpose
        switch b {
        case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeExpose(bTypeExpose):
            let generated_localReturnResult_open_argument0_caseResult_case0_caseResult_case0_declarationResult: Maybe_Maybe<ElmSyntaxRange_Range> =
                switch aTypeExpose.open_ {
                case let Maybe_Maybe.Maybe_Just(openRange):
                    Maybe_Maybe.Maybe_Just(openRange)
                case Maybe_Maybe.Maybe_Nothing:
                    bTypeExpose.open_
                }
            generated_localReturnResult_caseResult_case0_declarationResult =
                ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeExpose(Generated_name_open_.Record(name: aTypeExpose.name, open_: generated_localReturnResult_open_argument0_caseResult_case0_caseResult_case0_declarationResult))
        case ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_InfixExpose(_):
            generated_localReturnResult_caseResult_case0_declarationResult =
                ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeExpose(aTypeExpose)
        case ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_FunctionExpose(_):
            generated_localReturnResult_caseResult_case0_declarationResult =
                ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeExpose(aTypeExpose)
        case ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeOrAliasExpose(_):
            generated_localReturnResult_caseResult_case0_declarationResult =
                ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeExpose(aTypeExpose)
        }
        generated_localReturnResult_declarationResult =
            generated_localReturnResult_caseResult_case0_declarationResult
    case ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_InfixExpose(_):
        generated_localReturnResult_declarationResult =
            b
    case ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_FunctionExpose(_):
        generated_localReturnResult_declarationResult =
            b
    case ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeOrAliasExpose(_):
        generated_localReturnResult_declarationResult =
            b
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_exposeToAtDocsString(_ syntaxExpose: ElmSyntaxExposing_TopLevelExpose) ->  String {
    switch syntaxExpose {
    case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_InfixExpose(operatorSymbol):
        String_append("(", String_append(operatorSymbol, ")"))
    case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_FunctionExpose(name):
        name
    case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeOrAliasExpose(name):
        name
    case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeExpose(choiceTypeExpose):
        choiceTypeExpose.name
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_exposesCombine(_ syntaxExposes: List_List<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>) ->  List_List<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>> {
    let generated_localReturnResult_declarationResult: List_List<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>
    switch syntaxExposes {
    case List_List.List_Empty:
        generated_localReturnResult_declarationResult =
            List_List.List_Empty
    case let List_List.List_Cons(generated_0, List_List.List_Empty):
        let onlyExposeList: List_List<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>> =
            List_List.List_Cons(generated_0, List_List.List_Empty)
        generated_localReturnResult_declarationResult =
            onlyExposeList
    case let List_List.List_Cons(expose0Node, List_List.List_Cons(expose1Node, expose2Up)):
        let generated_let_caseResult_case2_declarationResult_expose1: ElmSyntaxExposing_TopLevelExpose
        switch expose1Node {
        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_expose1):
            generated_let_caseResult_case2_declarationResult_expose1 =
                generated_destructured_expose1
        }
        let generated_let_caseResult_case2_declarationResult_expose0Range: ElmSyntaxRange_Range
        let generated_let_caseResult_case2_declarationResult_expose0: ElmSyntaxExposing_TopLevelExpose
        switch expose0Node {
        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_expose0Range, generated_destructured_expose0):
            generated_let_caseResult_case2_declarationResult_expose0Range =
                generated_destructured_expose0Range
            generated_let_caseResult_case2_declarationResult_expose0 =
                generated_destructured_expose0
        }
        generated_localReturnResult_declarationResult =
            switch ElmSyntaxPrintDefunctionalized_exposeCompare(generated_let_caseResult_case2_declarationResult_expose0, generated_let_caseResult_case2_declarationResult_expose1) {
            case Basics_Order.Basics_EQ:
                ElmSyntaxPrintDefunctionalized_exposesCombine(List_cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_let_caseResult_case2_declarationResult_expose0Range, ElmSyntaxPrintDefunctionalized_exposeMerge(generated_let_caseResult_case2_declarationResult_expose0, generated_let_caseResult_case2_declarationResult_expose1)), expose2Up))
            case Basics_Order.Basics_LT:
                List_cons(expose0Node, ElmSyntaxPrintDefunctionalized_exposesCombine(List_cons(expose1Node, expose2Up)))
            case Basics_Order.Basics_GT:
                List_cons(expose0Node, ElmSyntaxPrintDefunctionalized_exposesCombine(List_cons(expose1Node, expose2Up)))
            }
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_exposingCombine(_ a: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, _ b: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>) ->  Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>> {
    let generated_localReturnResult_declarationResult: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>
    switch a {
    case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(exposingAllRange, ElmSyntaxExposing_Exposing.ElmSyntaxExposing_All(allRange))):
        generated_localReturnResult_declarationResult =
            Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(exposingAllRange, ElmSyntaxExposing_Exposing.ElmSyntaxExposing_All(allRange)))
    case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(earlierExposingExplicitRange, ElmSyntaxExposing_Exposing.ElmSyntaxExposing_Explicit(earlierExposeSet))):
        let generated_localReturnResult_argument0_caseResult_case1_declarationResult: ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>
        switch b {
        case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(exposingAllRange, ElmSyntaxExposing_Exposing.ElmSyntaxExposing_All(allRange))):
            generated_localReturnResult_argument0_caseResult_case1_declarationResult =
                ElmSyntaxNode_Node.ElmSyntaxNode_Node(exposingAllRange, ElmSyntaxExposing_Exposing.ElmSyntaxExposing_All(allRange))
        case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(laterExposingExplicitRange, ElmSyntaxExposing_Exposing.ElmSyntaxExposing_Explicit(laterExposeSet))):
            let generated_localReturnResult_argument0_caseResult_case1_argument0_caseResult_case1_declarationResult: ElmSyntaxRange_Range =
                switch ElmSyntaxPrintDefunctionalized_lineSpreadInRange(earlierExposingExplicitRange) {
                case Print_LineSpread.Print_MultipleLines:
                    earlierExposingExplicitRange
                case Print_LineSpread.Print_SingleLine:
                    laterExposingExplicitRange
                }
            generated_localReturnResult_argument0_caseResult_case1_declarationResult =
                ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_localReturnResult_argument0_caseResult_case1_argument0_caseResult_case1_declarationResult, ElmSyntaxExposing_Exposing.ElmSyntaxExposing_Explicit(ElmSyntaxPrintDefunctionalized_exposeListToNormal(List_append(earlierExposeSet, laterExposeSet))))
        case Maybe_Maybe.Maybe_Nothing:
            generated_localReturnResult_argument0_caseResult_case1_declarationResult =
                ElmSyntaxNode_Node.ElmSyntaxNode_Node(earlierExposingExplicitRange, ElmSyntaxExposing_Exposing.ElmSyntaxExposing_Explicit(earlierExposeSet))
        }
        generated_localReturnResult_declarationResult =
            Maybe_Maybe.Maybe_Just(generated_localReturnResult_argument0_caseResult_case1_declarationResult)
    case Maybe_Maybe.Maybe_Nothing:
        generated_localReturnResult_declarationResult =
            b
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_exposingMulti(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxExposing: Generated_expose0_expose1Up_fullRange<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>, List_List<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>, ElmSyntaxRange_Range>) ->  Print_Print {
    let generated_let_declarationResult_containedComments: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(syntaxExposing.fullRange, syntaxComments)
    let generated_let_declarationResult_lineSpread: Print_LineSpread =
        switch generated_let_declarationResult_containedComments {
        case List_List.List_Cons(_, _):
            Print_LineSpread.Print_MultipleLines
        case List_List.List_Empty:
            ElmSyntaxPrintDefunctionalized_lineSpreadInRange(syntaxExposing.fullRange)
        }
    let generated_localReturnResult_argument0_right_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_containedComments {
        case List_List.List_Empty:
            ElmSyntaxPrintDefunctionalized_printExactlyParensClosing
        case let List_List.List_Cons(comment0, comment1Up):
            Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyParensClosing, Print_followedBy(Print_emptyOrLinebreakIndented(generated_let_declarationResult_lineSpread), ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up))))
        }
    let generated_localReturnResult_left_left_left_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_lineSpread {
        case Print_LineSpread.Print_SingleLine:
            ElmSyntaxPrintDefunctionalized_printExactlyParensOpening
        case Print_LineSpread.Print_MultipleLines:
            ElmSyntaxPrintDefunctionalized_printExactlyParensOpeningSpace
        }
    return
        Print_followedBy(
            generated_localReturnResult_argument0_right_letResult_declarationResult,
            Print_followedBy(
                Print_emptyOrLinebreakIndented(generated_let_declarationResult_lineSpread),
                Print_followedBy(
                    Print_listMapAndIntersperseAndFlatten(
                        { (generated_argument0_right_argument0_right_left_left_letResult_declarationResult_0: ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>) in
                            let syntaxExpose: ElmSyntaxExposing_TopLevelExpose
                            switch generated_argument0_right_argument0_right_left_left_letResult_declarationResult_0 {
                            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_syntaxExpose):
                                syntaxExpose =
                                    generated_destructured_syntaxExpose
                            }
                            return Print_exactly(ElmSyntaxPrintDefunctionalized_expose(syntaxExpose))
                        },
                        Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyCommaSpace, Print_emptyOrLinebreakIndented(generated_let_declarationResult_lineSpread)),
                        List_cons(syntaxExposing.expose0, syntaxExposing.expose1Up)
                    ),
                    generated_localReturnResult_left_left_left_letResult_declarationResult
                )
            )
        )
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_exposingToNormal(_ syntaxExposing: ElmSyntaxExposing_Exposing) ->  ElmSyntaxExposing_Exposing {
    switch syntaxExposing {
    case let ElmSyntaxExposing_Exposing.ElmSyntaxExposing_All(allRange):
        ElmSyntaxExposing_Exposing.ElmSyntaxExposing_All(allRange)
    case let ElmSyntaxExposing_Exposing.ElmSyntaxExposing_Explicit(exposeSet):
        ElmSyntaxExposing_Exposing.ElmSyntaxExposing_Explicit(ElmSyntaxPrintDefunctionalized_exposeListToNormal(exposeSet))
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_expressionCall(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxCall: Generated_applied_argument0_argument1Up_fullRange<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>, ElmSyntaxRange_Range>) ->  Print_Print {
    let generated_let_declarationResult_commentsBeforeArgument0: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(syntaxCall.argument0).start, start: ElmSyntaxNode_range(syntaxCall.applied).end), syntaxComments)
    let generated_let_declarationResult_collapsibleCommentsBeforeArgument0: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
        ElmSyntaxPrintDefunctionalized_collapsibleComments(generated_let_declarationResult_commentsBeforeArgument0)
    let generated_let_declarationResult_argument1UpPrintsWithCommentsBeforeReverse: List_List<Print_Print> =
        List_foldl(
            { (argument: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in
                { (soFar: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Print_Print>>) in
                    let generated_let_result_argument0_right_left_letDeclaration2_declarationResult_print: Print_Print =
                        ElmSyntaxPrintDefunctionalized_expressionParenthesizedIfSpaceSeparated(syntaxComments, argument)
                    let generated_localReturnResult_left_reverse_letResult_result_argument0_right_left_letDeclaration2_declarationResult: Print_Print
                    switch ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(argument).start, start: soFar.endLocation), syntaxComments) {
                    case List_List.List_Empty:
                        generated_localReturnResult_left_reverse_letResult_result_argument0_right_left_letDeclaration2_declarationResult =
                            generated_let_result_argument0_right_left_letDeclaration2_declarationResult_print
                    case let List_List.List_Cons(comment0, comment1Up):
                        let generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_left_letDeclaration2_declarationResult_commentsBefore: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
                            ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up))
                        generated_localReturnResult_left_reverse_letResult_result_argument0_right_left_letDeclaration2_declarationResult =
                            Print_followedBy(
                                generated_let_result_argument0_right_left_letDeclaration2_declarationResult_print,
                                Print_followedBy(
                                    Print_spaceOrLinebreakIndented(
                                        Print_lineSpreadMergeWith(
                                            { (generated_argument0_right_argument0_argument0_right_left_letResult_caseResult_case1_left_reverse_letResult_result_argument0_right_left_letDeclaration2_declarationResult_0: Unit) in
                                                let (_) =
                                                    generated_argument0_right_argument0_argument0_right_left_letResult_caseResult_case1_left_reverse_letResult_result_argument0_right_left_letDeclaration2_declarationResult_0
                                                return Print_lineSpread(generated_let_result_argument0_right_left_letDeclaration2_declarationResult_print)
                                            },
                                            generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_left_letDeclaration2_declarationResult_commentsBefore.lineSpread
                                        )
                                    ),
                                    generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_left_letDeclaration2_declarationResult_commentsBefore.print
                                )
                            )
                    }
                    return Generated_endLocation_reverse.Record(endLocation: ElmSyntaxNode_range(argument).end, reverse: List_cons(generated_localReturnResult_left_reverse_letResult_result_argument0_right_left_letDeclaration2_declarationResult, soFar.reverse))
                }
            },
            Generated_endLocation_reverse.Record(endLocation: ElmSyntaxNode_range(syntaxCall.argument0).end, reverse: List_List.List_Empty),
            syntaxCall.argument1Up
        ).reverse
    let generated_let_declarationResult_argument0Print: Print_Print =
        ElmSyntaxPrintDefunctionalized_expressionParenthesizedIfSpaceSeparated(syntaxComments, syntaxCall.argument0)
    let generated_let_declarationResult_appliedPrint: Print_Print =
        ElmSyntaxPrintDefunctionalized_expressionParenthesizedIfSpaceSeparated(syntaxComments, syntaxCall.applied)
    let generated_let_declarationResult_argument0LineSpread: Print_LineSpread =
        Print_lineSpreadMergeWith(
            { (generated_argument0_right_letDeclaration5_declarationResult_0: Unit) in
                let (_) =
                    generated_argument0_right_letDeclaration5_declarationResult_0
                return Print_lineSpread(generated_let_declarationResult_argument0Print)
            },
            Print_lineSpreadMergeWithStrict(
                generated_let_declarationResult_collapsibleCommentsBeforeArgument0.lineSpread,
                Print_lineSpreadMergeWith(
                    { (generated_argument0_right_left_left_letDeclaration5_declarationResult_0: Unit) in
                        let (_) =
                            generated_argument0_right_left_left_letDeclaration5_declarationResult_0
                        return ElmSyntaxPrintDefunctionalized_lineSpreadBetweenNodes(syntaxCall.applied, syntaxCall.argument0)
                    },
                    Print_lineSpread(generated_let_declarationResult_appliedPrint)
                )
            )
        )
    let generated_let_declarationResult_argument1UpLineSpread: Print_LineSpread =
        Print_lineSpreadMergeWith(
            { (generated_argument0_right_letDeclaration6_declarationResult_0: Unit) in
                let (_) =
                    generated_argument0_right_letDeclaration6_declarationResult_0
                return Print_lineSpreadListMapAndCombine(Print_lineSpread, generated_let_declarationResult_argument1UpPrintsWithCommentsBeforeReverse)
            },
            Print_lineSpreadMergeWithStrict(generated_let_declarationResult_argument0LineSpread, ElmSyntaxPrintDefunctionalized_lineSpreadInRange(syntaxCall.fullRange))
        )
    let generated_localReturnResult_argument0_right_left_argument0_argument0_right_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_commentsBeforeArgument0 {
        case List_List.List_Empty:
            generated_let_declarationResult_argument0Print
        case List_List.List_Cons(_, _):
            Print_followedBy(
                generated_let_declarationResult_argument0Print,
                Print_followedBy(
                    Print_spaceOrLinebreakIndented(
                        Print_lineSpreadMergeWith(
                            { (generated_argument0_right_argument0_argument0_right_left_caseResult_case1_argument0_right_left_argument0_argument0_right_letResult_declarationResult_0: Unit) in
                                let (_) =
                                    generated_argument0_right_argument0_argument0_right_left_caseResult_case1_argument0_right_left_argument0_argument0_right_letResult_declarationResult_0
                                return Print_lineSpread(generated_let_declarationResult_argument0Print)
                            },
                            generated_let_declarationResult_collapsibleCommentsBeforeArgument0.lineSpread
                        )
                    ),
                    generated_let_declarationResult_collapsibleCommentsBeforeArgument0.print
                )
            )
        }
    return Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(Print_listReverseAndMapAndFlatten({ (argumentPrintWithCommentsBefore: Print_Print) in Print_followedBy(argumentPrintWithCommentsBefore, Print_spaceOrLinebreakIndented(generated_let_declarationResult_argument1UpLineSpread)) }, generated_let_declarationResult_argument1UpPrintsWithCommentsBeforeReverse), Print_followedBy(generated_localReturnResult_argument0_right_left_argument0_argument0_right_letResult_declarationResult, Print_spaceOrLinebreakIndented(generated_let_declarationResult_argument0LineSpread)))), generated_let_declarationResult_appliedPrint)
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_expressionCaseOf(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxCaseOf: Generated_cases_expression_fullRange<ElmSyntaxExpression_Cases, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location>>) ->  Print_Print {
    let generated_let_declarationResult_commentsBeforeCasedExpression: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(syntaxCaseOf.expression).start, start: syntaxCaseOf.fullRange.start), syntaxComments)
    let generated_let_declarationResult_casedExpressionPrint: Print_Print =
        ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, syntaxCaseOf.expression)
    let generated_let_declarationResult_casedExpressionLineSpread: Print_LineSpread =
        switch generated_let_declarationResult_commentsBeforeCasedExpression {
        case List_List.List_Cons(_, _):
            Print_LineSpread.Print_MultipleLines
        case List_List.List_Empty:
            ElmSyntaxPrintDefunctionalized_lineSpreadInNode(syntaxCaseOf.expression)
        }
    let generated_localReturnResult_argument0_right_argument0_argument0_right_left_left_left_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_commentsBeforeCasedExpression {
        case List_List.List_Empty:
            generated_let_declarationResult_casedExpressionPrint
        case let List_List.List_Cons(comment0, comment1Up):
            Print_followedBy(generated_let_declarationResult_casedExpressionPrint, Print_followedBy(Print_linebreakIndented, ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up))))
        }
    return
        Print_followedBy(
            Print_withIndentAtNextMultipleOf4(
                Print_followedBy(
                    Print_listReverseAndIntersperseAndFlatten(
                        ElmSyntaxPrintDefunctionalized_printLinebreakLinebreakIndented,
                        List_foldl(
                            { (generated_argument0_right_left_left_argument0_right_argument0_argument0_right_letResult_declarationResult_0: Tuple<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) in
                                { (soFar: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Print_Print>>) in
                                    let casePattern: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>
                                    let caseResult: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
                                    switch generated_argument0_right_left_left_argument0_right_argument0_argument0_right_letResult_declarationResult_0 {
                                    case let Tuple.Tuple(generated_destructured_casePattern, generated_destructured_caseResult):
                                        casePattern =
                                            generated_destructured_casePattern
                                        caseResult =
                                            generated_destructured_caseResult
                                    }
                                    let generated_let_result_argument0_right_left_left_argument0_right_argument0_argument0_right_letResult_declarationResult_commentsBeforeCasePattern: List_List<String> =
                                        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(casePattern).start, start: soFar.endLocation), syntaxComments)
                                    let generated_let_result_argument0_right_left_left_argument0_right_argument0_argument0_right_letResult_declarationResult_casePrint: Print_Print =
                                        ElmSyntaxPrintDefunctionalized_case_(syntaxComments, Tuple.Tuple(casePattern, caseResult))
                                    let generated_let_result_argument0_right_left_left_argument0_right_argument0_argument0_right_letResult_declarationResult_commentsAndCasePrint: Print_Print =
                                        switch generated_let_result_argument0_right_left_left_argument0_right_argument0_argument0_right_letResult_declarationResult_commentsBeforeCasePattern {
                                        case List_List.List_Empty:
                                            generated_let_result_argument0_right_left_left_argument0_right_argument0_argument0_right_letResult_declarationResult_casePrint
                                        case let List_List.List_Cons(comment0, comment1Up):
                                            Print_followedBy(generated_let_result_argument0_right_left_left_argument0_right_argument0_argument0_right_letResult_declarationResult_casePrint, Print_followedBy(Print_linebreakIndented, ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up))))
                                        }
                                    return Generated_endLocation_reverse.Record(endLocation: ElmSyntaxNode_range(caseResult).end, reverse: List_cons(generated_let_result_argument0_right_left_left_argument0_right_argument0_argument0_right_letResult_declarationResult_commentsAndCasePrint, soFar.reverse))
                                }
                            },
                            Generated_endLocation_reverse.Record(endLocation: ElmSyntaxNode_range(syntaxCaseOf.expression).end, reverse: List_List.List_Empty),
                            syntaxCaseOf.cases
                        ).reverse
                    ),
                    Print_linebreakIndented
                )
            ),
            Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyOf, Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_declarationResult_casedExpressionLineSpread), Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(generated_localReturnResult_argument0_right_argument0_argument0_right_left_left_left_letResult_declarationResult, Print_spaceOrLinebreakIndented(generated_let_declarationResult_casedExpressionLineSpread))), ElmSyntaxPrintDefunctionalized_printExactlyCase)))
        )
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_expressionGlsl(_ glslContent: String) ->  Print_Print {
    Print_followedBy(Print_exactly("|]"), Print_followedBy(Print_listMapAndIntersperseAndFlatten(Print_exactly, Print_linebreak, String_lines(glslContent)), Print_exactly("[glsl|")))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_expressionIfThenElse(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxIfThenElse: Generated_condition_conditionLineSpreadMinimum_fullRange_onFalse_onTrue<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, Print_LineSpread, Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) ->  Print_Print {
    let generated_let_declarationResult_onTruePrint: Print_Print =
        ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, syntaxIfThenElse.onTrue)
    let generated_let_declarationResult_onFalseNotParenthesized: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression> =
        ElmSyntaxPrintDefunctionalized_expressionToNotParenthesized(syntaxIfThenElse.onFalse)
    let generated_let_declarationResult_conditionPrint: Print_Print =
        ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, syntaxIfThenElse.condition)
    let generated_let_declarationResult_commentsBeforeOnTrue: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(syntaxIfThenElse.onTrue).start, start: ElmSyntaxNode_range(syntaxIfThenElse.condition).end), syntaxComments)
    let generated_let_declarationResult_commentsBeforeOnFalseNotParenthesizedInParens: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(generated_let_declarationResult_onFalseNotParenthesized).start, start: ElmSyntaxNode_range(syntaxIfThenElse.onFalse).start), syntaxComments)
    let generated_let_declarationResult_commentsBeforeOnFalse: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(syntaxIfThenElse.onFalse).start, start: ElmSyntaxNode_range(syntaxIfThenElse.onTrue).end), syntaxComments)
    let generated_let_declarationResult_commentsBeforeCondition: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(syntaxIfThenElse.condition).start, start: syntaxIfThenElse.fullRange.start), syntaxComments)
    let generated_let_declarationResult_conditionLineSpread: Print_LineSpread =
        Print_lineSpreadMergeWith(
            { (generated_argument0_right_letDeclaration7_declarationResult_0: Unit) in
                let (_) =
                    generated_argument0_right_letDeclaration7_declarationResult_0
                return
                    switch generated_let_declarationResult_commentsBeforeCondition {
                    case List_List.List_Cons(_, _):
                        Print_LineSpread.Print_MultipleLines
                    case List_List.List_Empty:
                        Print_LineSpread.Print_SingleLine
                    }
            },
            Print_lineSpreadMergeWith(
                { (generated_argument0_right_left_letDeclaration7_declarationResult_0: Unit) in
                    let (_) =
                        generated_argument0_right_left_letDeclaration7_declarationResult_0
                    return Print_lineSpread(generated_let_declarationResult_conditionPrint)
                },
                syntaxIfThenElse.conditionLineSpreadMinimum
            )
        )
    let generated_localReturnResult_argument0_right_letResult_declarationResult: Print_Print
    switch Tuple.Tuple(generated_let_declarationResult_commentsBeforeOnFalseNotParenthesizedInParens, generated_let_declarationResult_onFalseNotParenthesized) {
    case let Tuple.Tuple(List_List.List_Empty, ElmSyntaxNode_Node.ElmSyntaxNode_Node(onFalseNotParenthesizedRange, ElmSyntaxExpression_Expression.ElmSyntaxExpression_IfBlock(onFalseCondition, onFalseOnTrue, onFalseOnFalse))):
        generated_localReturnResult_argument0_right_letResult_declarationResult =
            switch generated_let_declarationResult_commentsBeforeOnFalse {
            case List_List.List_Empty:
                Print_followedBy(ElmSyntaxPrintDefunctionalized_expressionIfThenElse(syntaxComments, Generated_condition_conditionLineSpreadMinimum_fullRange_onFalse_onTrue.Record(condition: onFalseCondition, conditionLineSpreadMinimum: Print_LineSpread.Print_SingleLine, fullRange: onFalseNotParenthesizedRange, onFalse: onFalseOnFalse, onTrue: onFalseOnTrue)), ElmSyntaxPrintDefunctionalized_printExactlySpace)
            case let List_List.List_Cons(comment0, comment1Up):
                Print_followedBy(ElmSyntaxPrintDefunctionalized_expressionIfThenElse(syntaxComments, Generated_condition_conditionLineSpreadMinimum_fullRange_onFalse_onTrue.Record(condition: onFalseCondition, conditionLineSpreadMinimum: Print_LineSpread.Print_MultipleLines, fullRange: onFalseNotParenthesizedRange, onFalse: onFalseOnFalse, onTrue: onFalseOnTrue)), Print_followedBy(Print_linebreakIndented, Print_followedBy(ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up)), Print_linebreakIndented)))
            }
    case _:
        let generated_let_caseResult_case1_argument0_right_letResult_declarationResult_onFalsePrint: Print_Print =
            ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, syntaxIfThenElse.onFalse)
        let generated_localReturnResult_argument0_right_argument0_letResult_caseResult_case1_argument0_right_letResult_declarationResult: Print_Print =
            switch generated_let_declarationResult_commentsBeforeOnFalse {
            case List_List.List_Empty:
                generated_let_caseResult_case1_argument0_right_letResult_declarationResult_onFalsePrint
            case let List_List.List_Cons(comment0, comment1Up):
                Print_followedBy(generated_let_caseResult_case1_argument0_right_letResult_declarationResult_onFalsePrint, Print_followedBy(Print_linebreakIndented, ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up))))
            }
        generated_localReturnResult_argument0_right_letResult_declarationResult =
            Print_withIndentAtNextMultipleOf4(Print_followedBy(generated_localReturnResult_argument0_right_argument0_letResult_caseResult_case1_argument0_right_letResult_declarationResult, Print_linebreakIndented))
    }
    let generated_localReturnResult_argument0_right_left_argument0_argument0_right_left_left_left_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_commentsBeforeOnTrue {
        case List_List.List_Empty:
            generated_let_declarationResult_onTruePrint
        case let List_List.List_Cons(comment0, comment1Up):
            Print_followedBy(generated_let_declarationResult_onTruePrint, Print_followedBy(Print_linebreakIndented, ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up))))
        }
    let generated_localReturnResult_argument0_right_argument0_argument0_right_left_left_left_left_left_left_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_commentsBeforeCondition {
        case List_List.List_Empty:
            generated_let_declarationResult_conditionPrint
        case let List_List.List_Cons(comment0, comment1Up):
            Print_followedBy(generated_let_declarationResult_conditionPrint, Print_followedBy(Print_linebreakIndented, ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up))))
        }
    return Print_followedBy(generated_localReturnResult_argument0_right_letResult_declarationResult, Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyElse, Print_followedBy(Print_linebreakIndented, Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(Print_linebreak, Print_followedBy(generated_localReturnResult_argument0_right_left_argument0_argument0_right_left_left_left_letResult_declarationResult, Print_linebreakIndented))), Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyThen, Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_declarationResult_conditionLineSpread), Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(generated_localReturnResult_argument0_right_argument0_argument0_right_left_left_left_left_left_left_letResult_declarationResult, Print_spaceOrLinebreakIndented(generated_let_declarationResult_conditionLineSpread))), ElmSyntaxPrintDefunctionalized_printExactlyIf)))))))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_expressionIsBase10Zero(_ expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) ->  Bool {
    switch ElmSyntaxNode_value(ElmSyntaxPrintDefunctionalized_expressionToNotParenthesized(expression)) {
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_Integer(0):
        true
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_Negation(doublyNegated):
        ElmSyntaxPrintDefunctionalized_expressionIsBase10Zero(doublyNegated)
    case _:
        false
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_expressionIsBase16Zero(_ expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) ->  Bool {
    switch ElmSyntaxNode_value(ElmSyntaxPrintDefunctionalized_expressionToNotParenthesized(expression)) {
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_Hex(0):
        true
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_Negation(doublyNegated):
        ElmSyntaxPrintDefunctionalized_expressionIsBase16Zero(doublyNegated)
    case _:
        false
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_expressionIsSpaceSeparated(_ syntaxExpression: ElmSyntaxExpression_Expression) ->  Bool {
    switch syntaxExpression {
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_UnitExpr:
        false
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_Application(application):
        switch application {
        case List_List.List_Empty:
            false
        case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, notActuallyApplied), List_List.List_Empty):
            ElmSyntaxPrintDefunctionalized_expressionIsSpaceSeparated(notActuallyApplied)
        case List_List.List_Cons(_, List_List.List_Cons(_, _)):
            true
        }
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_OperatorApplication(_, _, _, _):
        true
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_FunctionOrValue(_, _):
        false
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_IfBlock(_, _, _):
        true
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_PrefixOperator(_):
        false
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_Operator(_):
        false
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_Integer(_):
        false
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_Hex(_):
        false
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_Floatable(_):
        false
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_Negation(_):
        false
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_Literal(_):
        false
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_CharLiteral(_):
        false
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_TupledExpression(parts):
        switch parts {
        case List_List.List_Empty:
            false
        case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, inParens), List_List.List_Empty):
            ElmSyntaxPrintDefunctionalized_expressionIsSpaceSeparated(inParens)
        case List_List.List_Cons(_, List_List.List_Cons(_, List_List.List_Empty)):
            false
        case List_List.List_Cons(_, List_List.List_Cons(_, List_List.List_Cons(_, List_List.List_Empty))):
            false
        case List_List.List_Cons(_, List_List.List_Cons(_, List_List.List_Cons(_, List_List.List_Cons(_, _)))):
            false
        }
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_ParenthesizedExpression(ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, inParens)):
        ElmSyntaxPrintDefunctionalized_expressionIsSpaceSeparated(inParens)
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_LetExpression(_):
        true
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_CaseExpression(_):
        true
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_LambdaExpression(_):
        true
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordExpr(_):
        false
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_ListExpr(_):
        false
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordAccess(_, _):
        false
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordAccessFunction(_):
        false
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordUpdateExpression(_, _):
        false
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_GLSLExpression(_):
        false
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_expressionIsSpaceSeparatedExceptApplication(_ expressionNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) ->  Bool {
    if ElmSyntaxPrintDefunctionalized_expressionIsSpaceSeparated(ElmSyntaxNode_value(expressionNode)) {
        switch ElmSyntaxPrintDefunctionalized_expressionToNotParenthesized(expressionNode) {
        case ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, ElmSyntaxExpression_Expression.ElmSyntaxExpression_Application(_)):
            false
        case _:
            true
        }
    } else {
        false
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_expressionLambda(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ generated_1: ElmSyntaxNode_Node<Generated_args_expression<List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>) ->  Print_Print {
    let fullRange: ElmSyntaxRange_Range
    let syntaxLambda: Generated_args_expression<List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>
    switch generated_1 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_fullRange, generated_destructured_syntaxLambda):
        fullRange =
            generated_destructured_fullRange
        syntaxLambda =
            generated_destructured_syntaxLambda
    }
    let generated_let_declarationResult_resultPrint: Print_Print =
        ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, syntaxLambda.expression)
    let generated_let_declarationResult_parameterPrintsWithCommentsBefore: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Print_Print>> =
        List_foldl(
            { (parameterPattern: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in
                { (soFar: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Print_Print>>) in
                    let generated_let_result_argument0_right_letDeclaration1_declarationResult_print: Print_Print =
                        ElmSyntaxPrintDefunctionalized_patternParenthesizedIfSpaceSeparated(syntaxComments, parameterPattern)
                    let generated_let_result_argument0_right_letDeclaration1_declarationResult_parameterRange: ElmSyntaxRange_Range =
                        ElmSyntaxNode_range(parameterPattern)
                    let generated_localReturnResult_left_reverse_letResult_result_argument0_right_letDeclaration1_declarationResult: Print_Print
                    switch ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: generated_let_result_argument0_right_letDeclaration1_declarationResult_parameterRange.start, start: soFar.endLocation), syntaxComments) {
                    case List_List.List_Empty:
                        generated_localReturnResult_left_reverse_letResult_result_argument0_right_letDeclaration1_declarationResult =
                            generated_let_result_argument0_right_letDeclaration1_declarationResult_print
                    case let List_List.List_Cons(comment0, comment1Up):
                        let generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_letDeclaration1_declarationResult_commentsBefore: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
                            ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up))
                        generated_localReturnResult_left_reverse_letResult_result_argument0_right_letDeclaration1_declarationResult =
                            Print_followedBy(
                                generated_let_result_argument0_right_letDeclaration1_declarationResult_print,
                                Print_followedBy(
                                    Print_spaceOrLinebreakIndented(
                                        Print_lineSpreadMergeWith(
                                            { (generated_argument0_right_argument0_argument0_right_left_letResult_caseResult_case1_left_reverse_letResult_result_argument0_right_letDeclaration1_declarationResult_0: Unit) in
                                                let (_) =
                                                    generated_argument0_right_argument0_argument0_right_left_letResult_caseResult_case1_left_reverse_letResult_result_argument0_right_letDeclaration1_declarationResult_0
                                                return Print_lineSpread(generated_let_result_argument0_right_letDeclaration1_declarationResult_print)
                                            },
                                            generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_letDeclaration1_declarationResult_commentsBefore.lineSpread
                                        )
                                    ),
                                    generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_letDeclaration1_declarationResult_commentsBefore.print
                                )
                            )
                    }
                    return Generated_endLocation_reverse.Record(endLocation: generated_let_result_argument0_right_letDeclaration1_declarationResult_parameterRange.end, reverse: List_cons(generated_localReturnResult_left_reverse_letResult_result_argument0_right_letDeclaration1_declarationResult, soFar.reverse))
                }
            },
            Generated_endLocation_reverse.Record(endLocation: fullRange.start, reverse: List_List.List_Empty),
            syntaxLambda.args
        )
    let generated_let_declarationResult_parametersLineSpread: Print_LineSpread =
        Print_lineSpreadListMapAndCombine(Print_lineSpread, generated_let_declarationResult_parameterPrintsWithCommentsBefore.reverse)
    let generated_let_declarationResult_commentsBeforeResult: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(syntaxLambda.expression).start, start: generated_let_declarationResult_parameterPrintsWithCommentsBefore.endLocation), syntaxComments)
    let generated_localReturnResult_left_argument0_argument0_right_argument0_right_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_commentsBeforeResult {
        case List_List.List_Empty:
            Print_spaceOrLinebreakIndented(
                Print_lineSpreadMergeWith(
                    { (generated_argument0_right_argument0_caseResult_case0_left_argument0_argument0_right_argument0_right_letResult_declarationResult_0: Unit) in
                        let (_) =
                            generated_argument0_right_argument0_caseResult_case0_left_argument0_argument0_right_argument0_right_letResult_declarationResult_0
                        return Print_lineSpread(generated_let_declarationResult_resultPrint)
                    },
                    Print_lineSpreadMergeWith(
                        { (generated_argument0_right_left_argument0_caseResult_case0_left_argument0_argument0_right_argument0_right_letResult_declarationResult_0: Unit) in
                            let (_) =
                                generated_argument0_right_left_argument0_caseResult_case0_left_argument0_argument0_right_argument0_right_letResult_declarationResult_0
                            return ElmSyntaxPrintDefunctionalized_lineSpreadInRange(fullRange)
                        },
                        generated_let_declarationResult_parametersLineSpread
                    )
                )
            )
        case let List_List.List_Cons(comment0, comment1Up):
            Print_followedBy(Print_linebreakIndented, Print_followedBy(ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up)), Print_linebreakIndented))
        }
    return Print_followedBy(Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(generated_let_declarationResult_resultPrint, generated_localReturnResult_left_argument0_argument0_right_argument0_right_letResult_declarationResult)), Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyMinusGreaterThan, Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_declarationResult_parametersLineSpread), Print_withIndentIncreasedBy(1.0, Print_followedBy(Print_listReverseAndIntersperseAndFlatten(Print_spaceOrLinebreakIndented(generated_let_declarationResult_parametersLineSpread), generated_let_declarationResult_parameterPrintsWithCommentsBefore.reverse), Print_emptyOrLinebreakIndented(generated_let_declarationResult_parametersLineSpread)))))), ElmSyntaxPrintDefunctionalized_printExactlyBackSlash)
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_expressionLetDeclaration(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ letDeclaration: ElmSyntaxExpression_LetDeclaration) ->  Print_Print {
    let generated_localReturnResult_declarationResult: Print_Print
    switch letDeclaration {
    case let ElmSyntaxExpression_LetDeclaration.ElmSyntaxExpression_LetFunction(letDeclarationExpression):
        let generated_let_caseResult_case0_declarationResult_implementationPrint: Print_Print =
            ElmSyntaxPrintDefunctionalized_declarationExpressionImplementation(syntaxComments, ElmSyntaxNode_value(letDeclarationExpression.declaration))
        let generated_localReturnResult_letResult_caseResult_case0_declarationResult: Print_Print
        switch letDeclarationExpression.signature {
        case Maybe_Maybe.Maybe_Nothing:
            generated_localReturnResult_letResult_caseResult_case0_declarationResult =
                generated_let_caseResult_case0_declarationResult_implementationPrint
        case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(signatureRange, signature)):
            let generated_let_caseResult_case1_letResult_caseResult_case0_declarationResult_commentsBetweenSignatureAndImplementationName: List_List<String> =
                ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(letDeclarationExpression.declaration).start, start: signatureRange.end), syntaxComments)
            let generated_localReturnResult_argument0_right_left_letResult_caseResult_case1_letResult_caseResult_case0_declarationResult: Print_Print =
                switch generated_let_caseResult_case1_letResult_caseResult_case0_declarationResult_commentsBetweenSignatureAndImplementationName {
                case List_List.List_Empty:
                    Print_linebreakIndented
                case let List_List.List_Cons(comment0, comment1Up):
                    Print_followedBy(Print_linebreakIndented, Print_followedBy(ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up)), Print_linebreakIndented))
                }
            generated_localReturnResult_letResult_caseResult_case0_declarationResult =
                Print_followedBy(generated_let_caseResult_case0_declarationResult_implementationPrint, Print_followedBy(generated_localReturnResult_argument0_right_left_letResult_caseResult_case1_letResult_caseResult_case0_declarationResult, ElmSyntaxPrintDefunctionalized_declarationSignature(syntaxComments, signature)))
        }
        generated_localReturnResult_declarationResult =
            generated_localReturnResult_letResult_caseResult_case0_declarationResult
    case let ElmSyntaxExpression_LetDeclaration.ElmSyntaxExpression_LetDestructuring(destructuringPattern, destructuredExpression):
        let generated_let_caseResult_case1_declarationResult_destructuringPatternPrint: Print_Print =
            ElmSyntaxPrintDefunctionalized_patternParenthesizedIfSpaceSeparated(syntaxComments, destructuringPattern)
        let generated_let_caseResult_case1_declarationResult_destructuredExpressionPrint: Print_Print =
            ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, destructuredExpression)
        let generated_let_caseResult_case1_declarationResult_commentsBeforeDestructuredExpression: List_List<String> =
            ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(destructuredExpression).start, start: ElmSyntaxNode_range(destructuringPattern).end), syntaxComments)
        let generated_localReturnResult_argument0_right_argument0_argument0_right_letResult_caseResult_case1_declarationResult: Print_Print =
            switch generated_let_caseResult_case1_declarationResult_commentsBeforeDestructuredExpression {
            case List_List.List_Empty:
                generated_let_caseResult_case1_declarationResult_destructuredExpressionPrint
            case let List_List.List_Cons(comment0, comment1Up):
                Print_followedBy(generated_let_caseResult_case1_declarationResult_destructuredExpressionPrint, Print_followedBy(Print_linebreakIndented, ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up))))
            }
        generated_localReturnResult_declarationResult =
            Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(generated_localReturnResult_argument0_right_argument0_argument0_right_letResult_caseResult_case1_declarationResult, Print_followedBy(ElmSyntaxPrintDefunctionalized_printEqualsLinebreakIndented, Print_spaceOrLinebreakIndented(Print_lineSpread(generated_let_caseResult_case1_declarationResult_destructuringPatternPrint))))), generated_let_caseResult_case1_declarationResult_destructuringPatternPrint)
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_expressionLetIn(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxLetIn: Generated_fullRange_letDeclaration0_letDeclaration1Up_result<ElmSyntaxRange_Range, ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>, List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) ->  Print_Print {
    let generated_let_declarationResult_letInResultPrint: Print_Print =
        ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, syntaxLetIn.result)
    let generated_let_declarationResult_letDeclarationPrints: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Print_Print>> =
        List_foldl(
            { (generated_argument0_right_letDeclaration1_declarationResult_0: ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>) in
                { (soFar: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Print_Print>>) in
                    let letDeclarationRange: ElmSyntaxRange_Range
                    let letDeclaration: ElmSyntaxExpression_LetDeclaration
                    switch generated_argument0_right_letDeclaration1_declarationResult_0 {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_letDeclarationRange, generated_destructured_letDeclaration):
                        letDeclarationRange =
                            generated_destructured_letDeclarationRange
                        letDeclaration =
                            generated_destructured_letDeclaration
                    }
                    let generated_let_result_argument0_right_letDeclaration1_declarationResult_letDeclarationPrint: Print_Print =
                        ElmSyntaxPrintDefunctionalized_expressionLetDeclaration(syntaxComments, letDeclaration)
                    let generated_let_result_argument0_right_letDeclaration1_declarationResult_commentsBefore: List_List<String> =
                        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: letDeclarationRange.start, start: soFar.endLocation), syntaxComments)
                    let generated_let_result_argument0_right_letDeclaration1_declarationResult_letDeclarationWithCommentsBeforePrint: Print_Print =
                        switch generated_let_result_argument0_right_letDeclaration1_declarationResult_commentsBefore {
                        case List_List.List_Empty:
                            generated_let_result_argument0_right_letDeclaration1_declarationResult_letDeclarationPrint
                        case let List_List.List_Cons(comment0, comment1Up):
                            Print_followedBy(generated_let_result_argument0_right_letDeclaration1_declarationResult_letDeclarationPrint, Print_followedBy(Print_linebreakIndented, ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up))))
                        }
                    return Generated_endLocation_reverse.Record(endLocation: letDeclarationRange.end, reverse: List_cons(generated_let_result_argument0_right_letDeclaration1_declarationResult_letDeclarationWithCommentsBeforePrint, soFar.reverse))
                }
            },
            Generated_endLocation_reverse.Record(endLocation: syntaxLetIn.fullRange.start, reverse: List_List.List_Empty),
            List_cons(syntaxLetIn.letDeclaration0, syntaxLetIn.letDeclaration1Up)
        )
    let generated_let_declarationResult_commentsBeforeResult: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(syntaxLetIn.result).start, start: generated_let_declarationResult_letDeclarationPrints.endLocation), syntaxComments)
    let generated_localReturnResult_argument0_right_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_commentsBeforeResult {
        case List_List.List_Empty:
            generated_let_declarationResult_letInResultPrint
        case let List_List.List_Cons(comment0, comment1Up):
            Print_followedBy(generated_let_declarationResult_letInResultPrint, Print_followedBy(Print_linebreakIndented, ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up))))
        }
    return Print_followedBy(generated_localReturnResult_argument0_right_letResult_declarationResult, Print_followedBy(ElmSyntaxPrintDefunctionalized_printLinebreakIndentedInLinebreakIndented, Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(Print_listReverseAndIntersperseAndFlatten(ElmSyntaxPrintDefunctionalized_printLinebreakLinebreakIndented, generated_let_declarationResult_letDeclarationPrints.reverse), Print_linebreakIndented)), ElmSyntaxPrintDefunctionalized_printExactlyLet)))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_expressionList(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxList: Generated_elements_fullRange<List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>, ElmSyntaxRange_Range>) ->  Print_Print {
    let generated_localReturnResult_declarationResult: Print_Print
    switch syntaxList.elements {
    case List_List.List_Empty:
        let generated_localReturnResult_argument0_right_caseResult_case0_declarationResult: Print_Print
        switch ElmSyntaxPrintDefunctionalized_commentsInRange(syntaxList.fullRange, syntaxComments) {
        case List_List.List_Empty:
            generated_localReturnResult_argument0_right_caseResult_case0_declarationResult =
                ElmSyntaxPrintDefunctionalized_printExactlySquareClosing
        case let List_List.List_Cons(comment0, comment1Up):
            let generated_let_caseResult_case1_argument0_right_caseResult_case0_declarationResult_commentsCollapsed: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
                ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up))
            generated_localReturnResult_argument0_right_caseResult_case0_declarationResult =
                Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlySquareClosing, Print_followedBy(Print_emptyOrLinebreakIndented(generated_let_caseResult_case1_argument0_right_caseResult_case0_declarationResult_commentsCollapsed.lineSpread), Print_withIndentIncreasedBy(1.0, generated_let_caseResult_case1_argument0_right_caseResult_case0_declarationResult_commentsCollapsed.print)))
        }
        generated_localReturnResult_declarationResult =
            Print_followedBy(generated_localReturnResult_argument0_right_caseResult_case0_declarationResult, ElmSyntaxPrintDefunctionalized_printExactlySquareOpening)
    case let List_List.List_Cons(element0, element1Up):
        let generated_let_caseResult_case1_declarationResult_elementPrintsWithCommentsBefore: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Print_Print>> =
            List_foldl(
                { (elementNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in
                    { (soFar: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Print_Print>>) in
                        let generated_let_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_print: Print_Print =
                            ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, elementNode)
                        let generated_let_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_elementRange: ElmSyntaxRange_Range
                        switch elementNode {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_elementRange, _):
                            generated_let_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_elementRange =
                                generated_destructured_elementRange
                        }
                        let generated_localReturnResult_left_reverse_letResult_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult: Print_Print
                        switch ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: generated_let_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_elementRange.start, start: soFar.endLocation), syntaxComments) {
                        case List_List.List_Empty:
                            generated_localReturnResult_left_reverse_letResult_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult =
                                generated_let_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_print
                        case let List_List.List_Cons(comment0, comment1Up):
                            let generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_commentsBefore: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
                                ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up))
                            generated_localReturnResult_left_reverse_letResult_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult =
                                Print_followedBy(
                                    generated_let_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_print,
                                    Print_followedBy(
                                        Print_spaceOrLinebreakIndented(
                                            Print_lineSpreadMergeWith(
                                                { (generated_argument0_right_argument0_argument0_right_left_letResult_caseResult_case1_left_reverse_letResult_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_0: Unit) in
                                                    let (_) =
                                                        generated_argument0_right_argument0_argument0_right_left_letResult_caseResult_case1_left_reverse_letResult_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_0
                                                    return Print_lineSpread(generated_let_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_print)
                                                },
                                                generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_commentsBefore.lineSpread
                                            )
                                        ),
                                        generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_commentsBefore.print
                                    )
                                )
                        }
                        return Generated_endLocation_reverse.Record(endLocation: generated_let_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_elementRange.end, reverse: List_cons(generated_localReturnResult_left_reverse_letResult_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult, soFar.reverse))
                    }
                },
                Generated_endLocation_reverse.Record(endLocation: syntaxList.fullRange.start, reverse: List_List.List_Empty),
                List_cons(element0, element1Up)
            )
        let generated_let_caseResult_case1_declarationResult_commentsAfterElements: List_List<String> =
            ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: syntaxList.fullRange.end, start: generated_let_caseResult_case1_declarationResult_elementPrintsWithCommentsBefore.endLocation), syntaxComments)
        let generated_let_caseResult_case1_declarationResult_lineSpread: Print_LineSpread =
            Print_lineSpreadMergeWith(
                { (generated_argument0_right_letDeclaration2_caseResult_case1_declarationResult_0: Unit) in
                    let (_) =
                        generated_argument0_right_letDeclaration2_caseResult_case1_declarationResult_0
                    return
                        switch generated_let_caseResult_case1_declarationResult_commentsAfterElements {
                        case List_List.List_Empty:
                            Print_LineSpread.Print_SingleLine
                        case List_List.List_Cons(_, _):
                            Print_LineSpread.Print_MultipleLines
                        }
                },
                Print_lineSpreadMergeWith(
                    { (generated_argument0_right_left_letDeclaration2_caseResult_case1_declarationResult_0: Unit) in
                        let (_) =
                            generated_argument0_right_left_letDeclaration2_caseResult_case1_declarationResult_0
                        return Print_lineSpreadListMapAndCombine(Print_lineSpread, generated_let_caseResult_case1_declarationResult_elementPrintsWithCommentsBefore.reverse)
                    },
                    ElmSyntaxPrintDefunctionalized_lineSpreadInRange(syntaxList.fullRange)
                )
            )
        let generated_localReturnResult_argument0_right_left_letResult_caseResult_case1_declarationResult: Print_Print =
            switch generated_let_caseResult_case1_declarationResult_commentsAfterElements {
            case List_List.List_Empty:
                Print_spaceOrLinebreakIndented(generated_let_caseResult_case1_declarationResult_lineSpread)
            case let List_List.List_Cons(comment0, comment1Up):
                Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_caseResult_case1_declarationResult_lineSpread), Print_followedBy(ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up)), Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_caseResult_case1_declarationResult_lineSpread), Print_linebreak)))
            }
        generated_localReturnResult_declarationResult =
            Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlySquareClosing, Print_followedBy(generated_localReturnResult_argument0_right_left_letResult_caseResult_case1_declarationResult, Print_followedBy(Print_listReverseAndMapAndIntersperseAndFlatten({ (elementPrintWithCommentsBefore: Print_Print) in Print_withIndentIncreasedBy(2.0, elementPrintWithCommentsBefore) }, Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyCommaSpace, Print_emptyOrLinebreakIndented(generated_let_caseResult_case1_declarationResult_lineSpread)), generated_let_caseResult_case1_declarationResult_elementPrintsWithCommentsBefore.reverse), ElmSyntaxPrintDefunctionalized_printExactlySquareOpeningSpace)))
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ generated_1: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) ->  Print_Print {
    let fullRange: ElmSyntaxRange_Range
    let syntaxExpression: ElmSyntaxExpression_Expression
    switch generated_1 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_fullRange, generated_destructured_syntaxExpression):
        fullRange =
            generated_destructured_fullRange
        syntaxExpression =
            generated_destructured_syntaxExpression
    }
    let generated_localReturnResult_declarationResult: Print_Print
    switch syntaxExpression {
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_UnitExpr:
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_printExactlyParensOpeningParensClosed
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_Application(application):
        generated_localReturnResult_declarationResult =
            switch application {
            case List_List.List_Empty:
                Print_empty
            case let List_List.List_Cons(notAppliedAfterAll, List_List.List_Empty):
                ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, notAppliedAfterAll)
            case let List_List.List_Cons(applied, List_List.List_Cons(argument0, argument1Up)):
                ElmSyntaxPrintDefunctionalized_expressionCall(syntaxComments, Generated_applied_argument0_argument1Up_fullRange.Record(applied: applied, argument0: argument0, argument1Up: argument1Up, fullRange: fullRange))
            }
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_OperatorApplication(operator_, _, left, right):
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_expressionOperation(syntaxComments, Generated_fullRange_left_operator__right.Record(fullRange: fullRange, left: left, operator_: operator_, right: right))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_FunctionOrValue(qualification, unqualified):
        generated_localReturnResult_declarationResult =
            Print_exactly(ElmSyntaxPrintDefunctionalized_qualifiedReference(Generated_qualification_unqualified.Record(qualification: qualification, unqualified: unqualified)))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_IfBlock(condition, onTrue, onFalse):
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_expressionIfThenElse(syntaxComments, Generated_condition_conditionLineSpreadMinimum_fullRange_onFalse_onTrue.Record(condition: condition, conditionLineSpreadMinimum: Print_LineSpread.Print_SingleLine, fullRange: fullRange, onFalse: onFalse, onTrue: onTrue))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_PrefixOperator(operatorSymbol):
        generated_localReturnResult_declarationResult =
            Print_exactly(String_append("(", String_append(operatorSymbol, ")")))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_Operator(operatorSymbol):
        generated_localReturnResult_declarationResult =
            Print_exactly(operatorSymbol)
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_Integer(int):
        generated_localReturnResult_declarationResult =
            Print_exactly(ElmSyntaxPrintDefunctionalized_intLiteral(int))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_Hex(int):
        generated_localReturnResult_declarationResult =
            Print_exactly(ElmSyntaxPrintDefunctionalized_hexLiteral(int))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_Floatable(float):
        generated_localReturnResult_declarationResult =
            Print_exactly(ElmSyntaxPrintDefunctionalized_floatLiteral(float))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_Negation(negated):
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_printExpressionNegation(syntaxComments, negated)
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_Literal(string):
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_stringLiteral(ElmSyntaxNode_Node.ElmSyntaxNode_Node(fullRange, string))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_CharLiteral(char):
        generated_localReturnResult_declarationResult =
            Print_exactly(ElmSyntaxPrintDefunctionalized_charLiteral(char))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_TupledExpression(parts):
        let generated_localReturnResult_caseResult_case13_declarationResult: Print_Print
        switch parts {
        case List_List.List_Empty:
            generated_localReturnResult_caseResult_case13_declarationResult =
                ElmSyntaxPrintDefunctionalized_printExactlyParensOpeningParensClosed
        case let List_List.List_Cons(inParens, List_List.List_Empty):
            let generated_let_caseResult_case1_caseResult_case13_declarationResult_commentsBeforeInParens: List_List<String> =
                ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(inParens).start, start: fullRange.start), syntaxComments)
            let generated_let_caseResult_case1_caseResult_case13_declarationResult_commentsAfterInParens: List_List<String> =
                ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: fullRange.end, start: ElmSyntaxNode_range(inParens).end), syntaxComments)
            generated_localReturnResult_caseResult_case13_declarationResult =
                switch Tuple.Tuple(generated_let_caseResult_case1_caseResult_case13_declarationResult_commentsBeforeInParens, generated_let_caseResult_case1_caseResult_case13_declarationResult_commentsAfterInParens) {
                case Tuple.Tuple(List_List.List_Empty, List_List.List_Empty):
                    ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, inParens)
                case _:
                    ElmSyntaxPrintDefunctionalized_parenthesized({ (generated_argument0_caseResult_case1_letResult_caseResult_case1_caseResult_case13_declarationResult_0: List_List<ElmSyntaxNode_Node<String>>) in { (generated_argument0_caseResult_case1_letResult_caseResult_case1_caseResult_case13_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(generated_argument0_caseResult_case1_letResult_caseResult_case1_caseResult_case13_declarationResult_0, generated_argument0_caseResult_case1_letResult_caseResult_case1_caseResult_case13_declarationResult_1) } }, Generated_fullRange_notParenthesized.Record(fullRange: fullRange, notParenthesized: ElmSyntaxPrintDefunctionalized_expressionToNotParenthesized(inParens)), syntaxComments)
                }
        case let List_List.List_Cons(part0, List_List.List_Cons(part1, List_List.List_Empty)):
            generated_localReturnResult_caseResult_case13_declarationResult =
                ElmSyntaxPrintDefunctionalized_tuple(Generated_lineSpreadMinimum_printPartNotParenthesized.Record(lineSpreadMinimum: ElmSyntaxPrintDefunctionalized_lineSpreadInRange(fullRange), printPartNotParenthesized: { (generated_printPartNotParenthesized_argument0_caseResult_case2_caseResult_case13_declarationResult_0: List_List<ElmSyntaxNode_Node<String>>) in { (generated_printPartNotParenthesized_argument0_caseResult_case2_caseResult_case13_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(generated_printPartNotParenthesized_argument0_caseResult_case2_caseResult_case13_declarationResult_0, generated_printPartNotParenthesized_argument0_caseResult_case2_caseResult_case13_declarationResult_1) } }), syntaxComments, Generated_fullRange_part0_part1.Record(fullRange: fullRange, part0: part0, part1: part1))
        case let List_List.List_Cons(part0, List_List.List_Cons(part1, List_List.List_Cons(part2, List_List.List_Empty))):
            generated_localReturnResult_caseResult_case13_declarationResult =
                ElmSyntaxPrintDefunctionalized_triple(Generated_lineSpreadMinimum_printPartNotParenthesized.Record(lineSpreadMinimum: ElmSyntaxPrintDefunctionalized_lineSpreadInRange(fullRange), printPartNotParenthesized: { (generated_printPartNotParenthesized_argument0_caseResult_case3_caseResult_case13_declarationResult_0: List_List<ElmSyntaxNode_Node<String>>) in { (generated_printPartNotParenthesized_argument0_caseResult_case3_caseResult_case13_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(generated_printPartNotParenthesized_argument0_caseResult_case3_caseResult_case13_declarationResult_0, generated_printPartNotParenthesized_argument0_caseResult_case3_caseResult_case13_declarationResult_1) } }), syntaxComments, Generated_fullRange_part0_part1_part2.Record(fullRange: fullRange, part0: part0, part1: part1, part2: part2))
        case let List_List.List_Cons(part0, List_List.List_Cons(part1, List_List.List_Cons(part2, List_List.List_Cons(part3, part4Up)))):
            generated_localReturnResult_caseResult_case13_declarationResult =
                ElmSyntaxPrintDefunctionalized_invalidNTuple({ (generated_argument0_caseResult_case4_caseResult_case13_declarationResult_0: List_List<ElmSyntaxNode_Node<String>>) in { (generated_argument0_caseResult_case4_caseResult_case13_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(generated_argument0_caseResult_case4_caseResult_case13_declarationResult_0, generated_argument0_caseResult_case4_caseResult_case13_declarationResult_1) } }, syntaxComments, Generated_fullRange_part0_part1_part2_part3_part4Up.Record(fullRange: fullRange, part0: part0, part1: part1, part2: part2, part3: part3, part4Up: part4Up))
        }
        generated_localReturnResult_declarationResult =
            generated_localReturnResult_caseResult_case13_declarationResult
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_ParenthesizedExpression(inParens):
        let generated_let_caseResult_case14_declarationResult_commentsBeforeInParens: List_List<String> =
            ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(inParens).start, start: fullRange.start), syntaxComments)
        let generated_let_caseResult_case14_declarationResult_commentsAfterInParens: List_List<String> =
            ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: fullRange.end, start: ElmSyntaxNode_range(inParens).end), syntaxComments)
        generated_localReturnResult_declarationResult =
            switch Tuple.Tuple(generated_let_caseResult_case14_declarationResult_commentsBeforeInParens, generated_let_caseResult_case14_declarationResult_commentsAfterInParens) {
            case Tuple.Tuple(List_List.List_Empty, List_List.List_Empty):
                ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, inParens)
            case _:
                ElmSyntaxPrintDefunctionalized_parenthesized({ (generated_argument0_caseResult_case1_letResult_caseResult_case14_declarationResult_0: List_List<ElmSyntaxNode_Node<String>>) in { (generated_argument0_caseResult_case1_letResult_caseResult_case14_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(generated_argument0_caseResult_case1_letResult_caseResult_case14_declarationResult_0, generated_argument0_caseResult_case1_letResult_caseResult_case14_declarationResult_1) } }, Generated_fullRange_notParenthesized.Record(fullRange: fullRange, notParenthesized: ElmSyntaxPrintDefunctionalized_expressionToNotParenthesized(inParens)), syntaxComments)
            }
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_LetExpression(syntaxLetIn):
        generated_localReturnResult_declarationResult =
            switch syntaxLetIn.declarations {
            case List_List.List_Empty:
                ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, syntaxLetIn.expression)
            case let List_List.List_Cons(letDeclaration0, letDeclaration1Up):
                ElmSyntaxPrintDefunctionalized_expressionLetIn(syntaxComments, Generated_fullRange_letDeclaration0_letDeclaration1Up_result.Record(fullRange: fullRange, letDeclaration0: letDeclaration0, letDeclaration1Up: letDeclaration1Up, result: syntaxLetIn.expression))
            }
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_CaseExpression(syntaxCaseOf):
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_expressionCaseOf(syntaxComments, Generated_cases_expression_fullRange.Record(cases: syntaxCaseOf.cases, expression: syntaxCaseOf.expression, fullRange: fullRange))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_LambdaExpression(syntaxLambda):
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_expressionLambda(syntaxComments, ElmSyntaxNode_Node.ElmSyntaxNode_Node(fullRange, syntaxLambda))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordExpr(fields):
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_recordLiteral(Generated_nameValueSeparator_printValueNotParenthesized.Record(nameValueSeparator: "=", printValueNotParenthesized: { (generated_printValueNotParenthesized_argument0_caseResult_case18_declarationResult_0: List_List<ElmSyntaxNode_Node<String>>) in { (generated_printValueNotParenthesized_argument0_caseResult_case18_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(generated_printValueNotParenthesized_argument0_caseResult_case18_declarationResult_0, generated_printValueNotParenthesized_argument0_caseResult_case18_declarationResult_1) } }), syntaxComments, Generated_fields_fullRange.Record(fields: fields, fullRange: fullRange))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_ListExpr(elements):
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_expressionList(syntaxComments, Generated_elements_fullRange.Record(elements: elements, fullRange: fullRange))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordAccess(syntaxRecord, ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, accessedFieldName)):
        generated_localReturnResult_declarationResult =
            Print_followedBy(Print_exactly(String_append(".", accessedFieldName)), ElmSyntaxPrintDefunctionalized_expressionParenthesizedIfSpaceSeparated(syntaxComments, syntaxRecord))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordAccessFunction(dotFieldName):
        generated_localReturnResult_declarationResult =
            Print_exactly(String_append(".", String_replace(".", "", dotFieldName)))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordUpdateExpression(recordVariableNode, fields):
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_expressionRecordUpdate(syntaxComments, Generated_fields_fullRange_recordVariable.Record(fields: fields, fullRange: fullRange, recordVariable: recordVariableNode))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_GLSLExpression(glsl):
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_expressionGlsl(glsl)
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_expressionOperation(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxOperation: Generated_fullRange_left_operator__right<ElmSyntaxRange_Range, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, String, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) ->  Print_Print {
    let generated_let_declarationResult_operationExpanded: Generated_beforeRightestOperatorExpressionChain_leftest_rightestExpression_rightestOperator<List_List<Generated_expression_operator_<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, String>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, String> =
        ElmSyntaxPrintDefunctionalized_expressionOperationExpand(syntaxOperation.left, syntaxOperation.operator_, syntaxOperation.right)
    let generated_let_declarationResult_leftestPrint: Print_Print =
        ElmSyntaxPrintDefunctionalized_expressionParenthesizedIfSpaceSeparatedExceptApplication(syntaxComments, generated_let_declarationResult_operationExpanded.leftest)
    let generated_let_declarationResult_beforeRightestPrintsAndComments: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Generated_expression_maybeCommentsBeforeExpression_operator_<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>>, String>>> =
        List_foldl(
            { (operatorAndExpressionBeforeRightest: Generated_expression_operator_<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, String>) in
                { (soFar: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Generated_expression_maybeCommentsBeforeExpression_operator_<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>>, String>>>) in
                    let generated_let_result_argument0_right_letDeclaration2_declarationResult_expressionRange: ElmSyntaxRange_Range =
                        ElmSyntaxNode_range(operatorAndExpressionBeforeRightest.expression)
                    let generated_let_result_argument0_right_letDeclaration2_declarationResult_commentsBefore: List_List<String> =
                        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: generated_let_result_argument0_right_letDeclaration2_declarationResult_expressionRange.start, start: soFar.endLocation), syntaxComments)
                    let generated_localReturnResult_maybeCommentsBeforeExpression_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult: Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>> =
                        switch generated_let_result_argument0_right_letDeclaration2_declarationResult_commentsBefore {
                        case List_List.List_Empty:
                            Maybe_Maybe.Maybe_Nothing
                        case let List_List.List_Cons(comment0, comment1Up):
                            Maybe_Maybe.Maybe_Just(ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up)))
                        }
                    return Generated_endLocation_reverse.Record(endLocation: generated_let_result_argument0_right_letDeclaration2_declarationResult_expressionRange.end, reverse: List_cons(Generated_expression_maybeCommentsBeforeExpression_operator_.Record(expression: operatorAndExpressionBeforeRightest.expression, maybeCommentsBeforeExpression: generated_localReturnResult_maybeCommentsBeforeExpression_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult, operator_: operatorAndExpressionBeforeRightest.operator_), soFar.reverse))
                }
            },
            Generated_endLocation_reverse.Record(endLocation: ElmSyntaxNode_range(generated_let_declarationResult_operationExpanded.leftest).end, reverse: List_List.List_Empty),
            generated_let_declarationResult_operationExpanded.beforeRightestOperatorExpressionChain
        )
    let generated_let_declarationResult_commentsBeforeRightestExpression: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(generated_let_declarationResult_operationExpanded.rightestExpression).start, start: generated_let_declarationResult_beforeRightestPrintsAndComments.endLocation), syntaxComments)
    let generated_let_declarationResult_commentsCollapsibleBeforeRightestExpression: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
        ElmSyntaxPrintDefunctionalized_collapsibleComments(generated_let_declarationResult_commentsBeforeRightestExpression)
    let generated_let_declarationResult_lineSpread: Print_LineSpread =
        Print_lineSpreadMergeWithStrict(
            generated_let_declarationResult_commentsCollapsibleBeforeRightestExpression.lineSpread,
            Print_lineSpreadMergeWith(
                { (generated_argument0_right_left_letDeclaration5_declarationResult_0: Unit) in
                    let (_) =
                        generated_argument0_right_left_letDeclaration5_declarationResult_0
                    return Print_lineSpreadListMapAndCombine({ (c: Generated_expression_maybeCommentsBeforeExpression_operator_<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>>, String>) in ElmSyntaxPrintDefunctionalized_maybeLineSpread({ (generated_record: Generated_lineSpread_print<Print_LineSpread, Print_Print>) in generated_record.lineSpread }, c.maybeCommentsBeforeExpression) }, generated_let_declarationResult_beforeRightestPrintsAndComments.reverse)
                },
                ElmSyntaxPrintDefunctionalized_lineSpreadInRange(syntaxOperation.fullRange)
            )
        )
    let generated_let_declarationResult_beforeRightestOperatorExpressionChainWithPreviousLineSpread: Generated_previousLineSpread_rightToLeft<Print_LineSpread, List_List<Generated_expression_expressionPrint_maybeCommentsBeforeExpression_operator__previousLineSpread<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, Print_Print, Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>>, String, Print_LineSpread>>> =
        List_foldr(
            { (operatorExpression: Generated_expression_maybeCommentsBeforeExpression_operator_<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>>, String>) in
                { (soFar: Generated_previousLineSpread_rightToLeft<Print_LineSpread, List_List<Generated_expression_expressionPrint_maybeCommentsBeforeExpression_operator__previousLineSpread<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, Print_Print, Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>>, String, Print_LineSpread>>>) in
                    let generated_let_result_argument0_right_letDeclaration6_declarationResult_expressionPrint: Print_Print =
                        ElmSyntaxPrintDefunctionalized_expressionParenthesizedIfSpaceSeparatedExceptApplication(syntaxComments, operatorExpression.expression)
                    return Generated_previousLineSpread_rightToLeft.Record(previousLineSpread: Print_lineSpread(generated_let_result_argument0_right_letDeclaration6_declarationResult_expressionPrint), rightToLeft: List_cons(Generated_expression_expressionPrint_maybeCommentsBeforeExpression_operator__previousLineSpread.Record(expression: operatorExpression.expression, expressionPrint: generated_let_result_argument0_right_letDeclaration6_declarationResult_expressionPrint, maybeCommentsBeforeExpression: operatorExpression.maybeCommentsBeforeExpression, operator_: operatorExpression.operator_, previousLineSpread: soFar.previousLineSpread), soFar.rightToLeft))
                }
            },
            Generated_previousLineSpread_rightToLeft.Record(previousLineSpread: Print_lineSpread(generated_let_declarationResult_leftestPrint), rightToLeft: List_List.List_Empty),
            generated_let_declarationResult_beforeRightestPrintsAndComments.reverse
        )
    let generated_localReturnResult_letDeclaration7_declarationResult: Print_Print
    switch generated_let_declarationResult_operationExpanded.rightestOperator {
    case "<|":
        let generated_let_caseResult_case0_letDeclaration7_declarationResult_expressionPrint: Print_Print =
            ElmSyntaxPrintDefunctionalized_expressionParenthesizedIfSpaceSeparatedExceptApplicationAndLambda(syntaxComments, generated_let_declarationResult_operationExpanded.rightestExpression)
        let generated_localReturnResult_argument0_right_argument0_argument0_right_letResult_caseResult_case0_letDeclaration7_declarationResult: Print_Print =
            switch generated_let_declarationResult_commentsBeforeRightestExpression {
            case List_List.List_Empty:
                generated_let_caseResult_case0_letDeclaration7_declarationResult_expressionPrint
            case List_List.List_Cons(_, _):
                Print_followedBy(
                    generated_let_caseResult_case0_letDeclaration7_declarationResult_expressionPrint,
                    Print_followedBy(
                        Print_spaceOrLinebreakIndented(
                            Print_lineSpreadMergeWith(
                                { (generated_argument0_right_argument0_argument0_right_left_caseResult_case1_argument0_right_argument0_argument0_right_letResult_caseResult_case0_letDeclaration7_declarationResult_0: Unit) in
                                    let (_) =
                                        generated_argument0_right_argument0_argument0_right_left_caseResult_case1_argument0_right_argument0_argument0_right_letResult_caseResult_case0_letDeclaration7_declarationResult_0
                                    return Print_lineSpread(generated_let_caseResult_case0_letDeclaration7_declarationResult_expressionPrint)
                                },
                                generated_let_declarationResult_commentsCollapsibleBeforeRightestExpression.lineSpread
                            )
                        ),
                        generated_let_declarationResult_commentsCollapsibleBeforeRightestExpression.print
                    )
                )
            }
        generated_localReturnResult_letDeclaration7_declarationResult =
            Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(generated_localReturnResult_argument0_right_argument0_argument0_right_letResult_caseResult_case0_letDeclaration7_declarationResult, Print_spaceOrLinebreakIndented(generated_let_declarationResult_lineSpread))), Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyLessThanVerticalBar, Print_spaceOrLinebreakIndented(generated_let_declarationResult_beforeRightestOperatorExpressionChainWithPreviousLineSpread.previousLineSpread)))
    case let nonApLOperator:
        let generated_let_caseResult_case1_letDeclaration7_declarationResult_expressionPrint: Print_Print =
            ElmSyntaxPrintDefunctionalized_expressionParenthesizedIfSpaceSeparatedExceptApplication(syntaxComments, generated_let_declarationResult_operationExpanded.rightestExpression)
        let generated_localReturnResult_argument1_argument0_right_argument0_letResult_caseResult_case1_letDeclaration7_declarationResult: Print_Print =
            switch generated_let_declarationResult_commentsBeforeRightestExpression {
            case List_List.List_Empty:
                generated_let_caseResult_case1_letDeclaration7_declarationResult_expressionPrint
            case List_List.List_Cons(_, _):
                Print_followedBy(
                    generated_let_caseResult_case1_letDeclaration7_declarationResult_expressionPrint,
                    Print_followedBy(
                        Print_spaceOrLinebreakIndented(
                            Print_lineSpreadMergeWith(
                                { (generated_argument0_right_argument0_argument0_right_left_caseResult_case1_argument1_argument0_right_argument0_letResult_caseResult_case1_letDeclaration7_declarationResult_0: Unit) in
                                    let (_) =
                                        generated_argument0_right_argument0_argument0_right_left_caseResult_case1_argument1_argument0_right_argument0_letResult_caseResult_case1_letDeclaration7_declarationResult_0
                                    return Print_lineSpread(generated_let_caseResult_case1_letDeclaration7_declarationResult_expressionPrint)
                                },
                                generated_let_declarationResult_commentsCollapsibleBeforeRightestExpression.lineSpread
                            )
                        ),
                        generated_let_declarationResult_commentsCollapsibleBeforeRightestExpression.print
                    )
                )
            }
        generated_localReturnResult_letDeclaration7_declarationResult =
            Print_withIndentAtNextMultipleOf4(Print_followedBy(Print_withIndentIncreasedBy(Basics_add(String_length(nonApLOperator), 1.0), generated_localReturnResult_argument1_argument0_right_argument0_letResult_caseResult_case1_letDeclaration7_declarationResult), Print_followedBy(Print_exactly(String_append(nonApLOperator, " ")), Print_spaceOrLinebreakIndented(generated_let_declarationResult_lineSpread))))
    }
    let generated_let_declarationResult_rightestOperatorExpressionPrint: Print_Print =
        generated_localReturnResult_letDeclaration7_declarationResult
    return
        Print_followedBy(
            List_foldl(
                { (operatorExpression: Generated_expression_expressionPrint_maybeCommentsBeforeExpression_operator__previousLineSpread<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, Print_Print, Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>>, String, Print_LineSpread>) in
                    { (chainRightPrint: Print_Print) in
                        let generated_localReturnResult_result_argument0_right_argument0_right_letResult_declarationResult: Print_Print
                        switch operatorExpression.operator_ {
                        case "<|":
                            let generated_localReturnResult_argument0_right_left_argument0_argument0_right_caseResult_case0_result_argument0_right_argument0_right_letResult_declarationResult: Print_Print =
                                switch operatorExpression.maybeCommentsBeforeExpression {
                                case Maybe_Maybe.Maybe_Nothing:
                                    operatorExpression.expressionPrint
                                case let Maybe_Maybe.Maybe_Just(commentsBeforeExpression):
                                    Print_followedBy(
                                        operatorExpression.expressionPrint,
                                        Print_followedBy(
                                            Print_spaceOrLinebreakIndented(
                                                Print_lineSpreadMergeWith(
                                                    { (generated_argument0_right_argument0_argument0_right_left_caseResult_case1_argument0_right_left_argument0_argument0_right_caseResult_case0_result_argument0_right_argument0_right_letResult_declarationResult_0: Unit) in
                                                        let (_) =
                                                            generated_argument0_right_argument0_argument0_right_left_caseResult_case1_argument0_right_left_argument0_argument0_right_caseResult_case0_result_argument0_right_argument0_right_letResult_declarationResult_0
                                                        return Print_lineSpread(operatorExpression.expressionPrint)
                                                    },
                                                    commentsBeforeExpression.lineSpread
                                                )
                                            ),
                                            commentsBeforeExpression.print
                                        )
                                    )
                                }
                            generated_localReturnResult_result_argument0_right_argument0_right_letResult_declarationResult =
                                Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(chainRightPrint, Print_followedBy(generated_localReturnResult_argument0_right_left_argument0_argument0_right_caseResult_case0_result_argument0_right_argument0_right_letResult_declarationResult, Print_spaceOrLinebreakIndented(generated_let_declarationResult_lineSpread)))), Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyLessThanVerticalBar, Print_spaceOrLinebreakIndented(operatorExpression.previousLineSpread)))
                        case let nonApLOperator:
                            let generated_localReturnResult_argument1_argument0_right_argument0_left_caseResult_case1_result_argument0_right_argument0_right_letResult_declarationResult: Print_Print =
                                switch operatorExpression.maybeCommentsBeforeExpression {
                                case Maybe_Maybe.Maybe_Nothing:
                                    operatorExpression.expressionPrint
                                case let Maybe_Maybe.Maybe_Just(commentsBeforeExpression):
                                    Print_followedBy(
                                        operatorExpression.expressionPrint,
                                        Print_followedBy(
                                            Print_spaceOrLinebreakIndented(
                                                Print_lineSpreadMergeWith(
                                                    { (generated_argument0_right_argument0_argument0_right_left_caseResult_case1_argument1_argument0_right_argument0_left_caseResult_case1_result_argument0_right_argument0_right_letResult_declarationResult_0: Unit) in
                                                        let (_) =
                                                            generated_argument0_right_argument0_argument0_right_left_caseResult_case1_argument1_argument0_right_argument0_left_caseResult_case1_result_argument0_right_argument0_right_letResult_declarationResult_0
                                                        return Print_lineSpread(operatorExpression.expressionPrint)
                                                    },
                                                    commentsBeforeExpression.lineSpread
                                                )
                                            ),
                                            commentsBeforeExpression.print
                                        )
                                    )
                                }
                            generated_localReturnResult_result_argument0_right_argument0_right_letResult_declarationResult =
                                Print_followedBy(chainRightPrint, Print_withIndentAtNextMultipleOf4(Print_followedBy(Print_withIndentIncreasedBy(Basics_add(String_length(nonApLOperator), 1.0), generated_localReturnResult_argument1_argument0_right_argument0_left_caseResult_case1_result_argument0_right_argument0_right_letResult_declarationResult), Print_followedBy(Print_exactly(String_append(nonApLOperator, " ")), Print_spaceOrLinebreakIndented(generated_let_declarationResult_lineSpread)))))
                        }
                        return generated_localReturnResult_result_argument0_right_argument0_right_letResult_declarationResult
                    }
                },
                generated_let_declarationResult_rightestOperatorExpressionPrint,
                generated_let_declarationResult_beforeRightestOperatorExpressionChainWithPreviousLineSpread.rightToLeft
            ),
            generated_let_declarationResult_leftestPrint
        )
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_expressionOperationExpand(_ left: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, _ operator_: String, _ right: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) ->  Generated_beforeRightestOperatorExpressionChain_leftest_rightestExpression_rightestOperator<List_List<Generated_expression_operator_<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, String>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, String> {
    let generated_localReturnResult_letDeclaration0_declarationResult: Generated_beforeRightestOperatorExpressionChain_rightestExpression_rightestOperator<List_List<Generated_expression_operator_<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, String>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, String>
    switch right {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, ElmSyntaxExpression_Expression.ElmSyntaxExpression_OperatorApplication(rightOperator, _, rightLeft, rightRight)):
        let generated_let_caseResult_case0_letDeclaration0_declarationResult_rightOperationExpanded: Generated_beforeRightestOperatorExpressionChain_leftest_rightestExpression_rightestOperator<List_List<Generated_expression_operator_<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, String>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, String> =
            ElmSyntaxPrintDefunctionalized_expressionOperationExpand(rightLeft, rightOperator, rightRight)
        generated_localReturnResult_letDeclaration0_declarationResult =
            Generated_beforeRightestOperatorExpressionChain_rightestExpression_rightestOperator.Record(beforeRightestOperatorExpressionChain: List_cons(Generated_expression_operator_.Record(expression: generated_let_caseResult_case0_letDeclaration0_declarationResult_rightOperationExpanded.leftest, operator_: operator_), generated_let_caseResult_case0_letDeclaration0_declarationResult_rightOperationExpanded.beforeRightestOperatorExpressionChain), rightestExpression: generated_let_caseResult_case0_letDeclaration0_declarationResult_rightOperationExpanded.rightestExpression, rightestOperator: generated_let_caseResult_case0_letDeclaration0_declarationResult_rightOperationExpanded.rightestOperator)
    case let rightNotOperation:
        generated_localReturnResult_letDeclaration0_declarationResult =
            Generated_beforeRightestOperatorExpressionChain_rightestExpression_rightestOperator.Record(beforeRightestOperatorExpressionChain: List_List.List_Empty, rightestExpression: rightNotOperation, rightestOperator: operator_)
    }
    let generated_let_declarationResult_rightExpanded: Generated_beforeRightestOperatorExpressionChain_rightestExpression_rightestOperator<List_List<Generated_expression_operator_<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, String>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, String> =
        generated_localReturnResult_letDeclaration0_declarationResult
    let generated_localReturnResult_letResult_declarationResult: Generated_beforeRightestOperatorExpressionChain_leftest_rightestExpression_rightestOperator<List_List<Generated_expression_operator_<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, String>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, String>
    switch left {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, ElmSyntaxExpression_Expression.ElmSyntaxExpression_OperatorApplication(leftOperator, _, leftLeft, leftRight)):
        let generated_let_caseResult_case0_letResult_declarationResult_leftOperationExpanded: Generated_beforeRightestOperatorExpressionChain_leftest_rightestExpression_rightestOperator<List_List<Generated_expression_operator_<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, String>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, String> =
            ElmSyntaxPrintDefunctionalized_expressionOperationExpand(leftLeft, leftOperator, leftRight)
        generated_localReturnResult_letResult_declarationResult =
            Generated_beforeRightestOperatorExpressionChain_leftest_rightestExpression_rightestOperator.Record(beforeRightestOperatorExpressionChain: List_append(generated_let_caseResult_case0_letResult_declarationResult_leftOperationExpanded.beforeRightestOperatorExpressionChain, List_cons(Generated_expression_operator_.Record(expression: generated_let_caseResult_case0_letResult_declarationResult_leftOperationExpanded.rightestExpression, operator_: generated_let_caseResult_case0_letResult_declarationResult_leftOperationExpanded.rightestOperator), generated_let_declarationResult_rightExpanded.beforeRightestOperatorExpressionChain)), leftest: generated_let_caseResult_case0_letResult_declarationResult_leftOperationExpanded.leftest, rightestExpression: generated_let_declarationResult_rightExpanded.rightestExpression, rightestOperator: generated_let_declarationResult_rightExpanded.rightestOperator)
    case let leftNotOperation:
        generated_localReturnResult_letResult_declarationResult =
            Generated_beforeRightestOperatorExpressionChain_leftest_rightestExpression_rightestOperator.Record(beforeRightestOperatorExpressionChain: generated_let_declarationResult_rightExpanded.beforeRightestOperatorExpressionChain, leftest: leftNotOperation, rightestExpression: generated_let_declarationResult_rightExpanded.rightestExpression, rightestOperator: generated_let_declarationResult_rightExpanded.rightestOperator)
    }
    return generated_localReturnResult_letResult_declarationResult
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_expressionParenthesized(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ expressionNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) ->  Print_Print {
    ElmSyntaxPrintDefunctionalized_parenthesized({ (generated_argument0_declarationResult_0: List_List<ElmSyntaxNode_Node<String>>) in { (generated_argument0_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) in ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(generated_argument0_declarationResult_0, generated_argument0_declarationResult_1) } }, Generated_fullRange_notParenthesized.Record(fullRange: ElmSyntaxNode_range(expressionNode), notParenthesized: ElmSyntaxPrintDefunctionalized_expressionToNotParenthesized(expressionNode)), syntaxComments)
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_expressionParenthesizedIfSpaceSeparated(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ expressionNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) ->  Print_Print {
    if ElmSyntaxPrintDefunctionalized_expressionIsSpaceSeparated(ElmSyntaxNode_value(expressionNode)) {
        ElmSyntaxPrintDefunctionalized_expressionParenthesized(syntaxComments, expressionNode)
    } else {
        ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, expressionNode)
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_expressionParenthesizedIfSpaceSeparatedExceptApplication(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ expressionNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) ->  Print_Print {
    if ElmSyntaxPrintDefunctionalized_expressionIsSpaceSeparatedExceptApplication(expressionNode) {
        ElmSyntaxPrintDefunctionalized_expressionParenthesized(syntaxComments, expressionNode)
    } else {
        ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, expressionNode)
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_expressionParenthesizedIfSpaceSeparatedExceptApplicationAndLambda(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ expressionNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) ->  Print_Print {
    if ElmSyntaxPrintDefunctionalized_expressionIsSpaceSeparated(ElmSyntaxNode_value(expressionNode)) {
        switch ElmSyntaxNode_value(ElmSyntaxPrintDefunctionalized_expressionToNotParenthesized(expressionNode)) {
        case ElmSyntaxExpression_Expression.ElmSyntaxExpression_Application(_):
            ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, expressionNode)
        case ElmSyntaxExpression_Expression.ElmSyntaxExpression_LambdaExpression(_):
            ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, expressionNode)
        case _:
            ElmSyntaxPrintDefunctionalized_expressionParenthesized(syntaxComments, expressionNode)
        }
    } else {
        ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, expressionNode)
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_expressionRecordUpdate(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxRecordUpdate: Generated_fields_fullRange_recordVariable<List_List<ElmSyntaxNode_Node<Tuple<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>>, ElmSyntaxRange_Range, ElmSyntaxNode_Node<String>>) ->  Print_Print {
    let generated_let_declarationResult_recordVariablePrint: Print_Print =
        Print_exactly(ElmSyntaxNode_value(syntaxRecordUpdate.recordVariable))
    let generated_let_declarationResult_maybeCommentsBeforeRecordVariable: Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>> =
        switch ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(syntaxRecordUpdate.recordVariable).start, start: syntaxRecordUpdate.fullRange.start), syntaxComments) {
        case List_List.List_Empty:
            Maybe_Maybe.Maybe_Nothing
        case let List_List.List_Cons(comment0, comment1Up):
            Maybe_Maybe.Maybe_Just(ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up)))
        }
    let generated_let_declarationResult_fieldPrintsWithCommentsBefore: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Print_Print>> =
        List_foldl(
            { (generated_argument0_right_letDeclaration2_declarationResult_0: ElmSyntaxNode_Node<Tuple<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>) in
                { (soFar: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Print_Print>>) in
                    let fieldSyntax: Tuple<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>
                    switch generated_argument0_right_letDeclaration2_declarationResult_0 {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_fieldSyntax):
                        fieldSyntax =
                            generated_destructured_fieldSyntax
                    }
                    let generated_let_result_argument0_right_letDeclaration2_declarationResult_fieldNameRange: ElmSyntaxRange_Range
                    let generated_let_result_argument0_right_letDeclaration2_declarationResult_fieldName: String
                    let generated_let_result_argument0_right_letDeclaration2_declarationResult_fieldValueNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
                    switch fieldSyntax {
                    case let Tuple.Tuple(ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_fieldNameRange, generated_destructured_fieldName), generated_destructured_fieldValueNode):
                        generated_let_result_argument0_right_letDeclaration2_declarationResult_fieldNameRange =
                            generated_destructured_fieldNameRange
                        generated_let_result_argument0_right_letDeclaration2_declarationResult_fieldName =
                            generated_destructured_fieldName
                        generated_let_result_argument0_right_letDeclaration2_declarationResult_fieldValueNode =
                            generated_destructured_fieldValueNode
                    }
                    let generated_let_result_argument0_right_letDeclaration2_declarationResult_valuePrint: Print_Print =
                        ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, generated_let_result_argument0_right_letDeclaration2_declarationResult_fieldValueNode)
                    let generated_let_result_argument0_right_letDeclaration2_declarationResult_fieldValueRange: ElmSyntaxRange_Range
                    switch generated_let_result_argument0_right_letDeclaration2_declarationResult_fieldValueNode {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_fieldValueRange, _):
                        generated_let_result_argument0_right_letDeclaration2_declarationResult_fieldValueRange =
                            generated_destructured_fieldValueRange
                    }
                    let generated_localReturnResult_left_argument0_argument0_right_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult: Print_Print
                    switch ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: generated_let_result_argument0_right_letDeclaration2_declarationResult_fieldValueRange.start, start: generated_let_result_argument0_right_letDeclaration2_declarationResult_fieldNameRange.start), syntaxComments) {
                    case List_List.List_Empty:
                        generated_localReturnResult_left_argument0_argument0_right_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult =
                            Print_spaceOrLinebreakIndented(
                                Print_lineSpreadMergeWith(
                                    { (generated_argument0_right_argument0_caseResult_case0_left_argument0_argument0_right_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult_0: Unit) in
                                        let (_) =
                                            generated_argument0_right_argument0_caseResult_case0_left_argument0_argument0_right_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult_0
                                        return Print_lineSpread(generated_let_result_argument0_right_letDeclaration2_declarationResult_valuePrint)
                                    },
                                    ElmSyntaxPrintDefunctionalized_lineSpreadBetweenRanges(generated_let_result_argument0_right_letDeclaration2_declarationResult_fieldNameRange, ElmSyntaxNode_range(generated_let_result_argument0_right_letDeclaration2_declarationResult_fieldValueNode))
                                )
                            )
                    case let List_List.List_Cons(comment0, comment1Up):
                        let generated_let_caseResult_case1_left_argument0_argument0_right_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult_commentsBeforeValue: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
                            ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up))
                        let generated_let_caseResult_case1_left_argument0_argument0_right_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult_layout: Print_Print =
                            Print_spaceOrLinebreakIndented(
                                Print_lineSpreadMergeWith(
                                    { (generated_argument0_right_argument0_letDeclaration1_caseResult_case1_left_argument0_argument0_right_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult_0: Unit) in
                                        let (_) =
                                            generated_argument0_right_argument0_letDeclaration1_caseResult_case1_left_argument0_argument0_right_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult_0
                                        return Print_lineSpread(generated_let_result_argument0_right_letDeclaration2_declarationResult_valuePrint)
                                    },
                                    Print_lineSpreadMergeWith(
                                        { (generated_argument0_right_left_argument0_letDeclaration1_caseResult_case1_left_argument0_argument0_right_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult_0: Unit) in
                                            let (_) =
                                                generated_argument0_right_left_argument0_letDeclaration1_caseResult_case1_left_argument0_argument0_right_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult_0
                                            return ElmSyntaxPrintDefunctionalized_lineSpreadBetweenRanges(generated_let_result_argument0_right_letDeclaration2_declarationResult_fieldNameRange, ElmSyntaxNode_range(generated_let_result_argument0_right_letDeclaration2_declarationResult_fieldValueNode))
                                        },
                                        generated_let_caseResult_case1_left_argument0_argument0_right_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult_commentsBeforeValue.lineSpread
                                    )
                                )
                            )
                        generated_localReturnResult_left_argument0_argument0_right_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult =
                            Print_followedBy(generated_let_caseResult_case1_left_argument0_argument0_right_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult_layout, Print_followedBy(generated_let_caseResult_case1_left_argument0_argument0_right_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult_commentsBeforeValue.print, generated_let_caseResult_case1_left_argument0_argument0_right_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult_layout))
                    }
                    let generated_localReturnResult_argument1_left_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult: Print_Print
                    switch ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: generated_let_result_argument0_right_letDeclaration2_declarationResult_fieldNameRange.start, start: soFar.endLocation), syntaxComments) {
                    case List_List.List_Empty:
                        generated_localReturnResult_argument1_left_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult =
                            Print_exactly(String_append(generated_let_result_argument0_right_letDeclaration2_declarationResult_fieldName, " ="))
                    case let List_List.List_Cons(comment0, comment1Up):
                        let generated_let_caseResult_case1_argument1_left_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult_commentsBeforeName: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
                            ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up))
                        generated_localReturnResult_argument1_left_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult =
                            Print_followedBy(Print_exactly(String_append(generated_let_result_argument0_right_letDeclaration2_declarationResult_fieldName, " =")), Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_caseResult_case1_argument1_left_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult_commentsBeforeName.lineSpread), generated_let_caseResult_case1_argument1_left_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult_commentsBeforeName.print))
                    }
                    return Generated_endLocation_reverse.Record(endLocation: generated_let_result_argument0_right_letDeclaration2_declarationResult_fieldValueRange.end, reverse: List_cons(Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(generated_let_result_argument0_right_letDeclaration2_declarationResult_valuePrint, generated_localReturnResult_left_argument0_argument0_right_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult)), Print_withIndentIncreasedBy(2.0, generated_localReturnResult_argument1_left_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult)), soFar.reverse))
                }
            },
            Generated_endLocation_reverse.Record(endLocation: ElmSyntaxNode_range(syntaxRecordUpdate.recordVariable).end, reverse: List_List.List_Empty),
            syntaxRecordUpdate.fields
        )
    let generated_let_declarationResult_commentsAfterFields: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: syntaxRecordUpdate.fullRange.end, start: generated_let_declarationResult_fieldPrintsWithCommentsBefore.endLocation), syntaxComments)
    let generated_let_declarationResult_lineSpread: Print_LineSpread =
        Print_lineSpreadMergeWith(
            { (generated_argument0_right_letDeclaration4_declarationResult_0: Unit) in
                let (_) =
                    generated_argument0_right_letDeclaration4_declarationResult_0
                return Print_lineSpreadListMapAndCombine(Print_lineSpread, generated_let_declarationResult_fieldPrintsWithCommentsBefore.reverse)
            },
            Print_lineSpreadMergeWith(
                { (generated_argument0_right_left_letDeclaration4_declarationResult_0: Unit) in
                    let (_) =
                        generated_argument0_right_left_letDeclaration4_declarationResult_0
                    return
                        switch generated_let_declarationResult_commentsAfterFields {
                        case List_List.List_Empty:
                            Print_LineSpread.Print_SingleLine
                        case List_List.List_Cons(_, _):
                            Print_LineSpread.Print_MultipleLines
                        }
                },
                Print_lineSpreadMergeWith(
                    { (generated_argument0_right_left_left_letDeclaration4_declarationResult_0: Unit) in
                        let (_) =
                            generated_argument0_right_left_left_letDeclaration4_declarationResult_0
                        return ElmSyntaxPrintDefunctionalized_maybeLineSpread({ (generated_record: Generated_lineSpread_print<Print_LineSpread, Print_Print>) in generated_record.lineSpread }, generated_let_declarationResult_maybeCommentsBeforeRecordVariable)
                    },
                    ElmSyntaxPrintDefunctionalized_lineSpreadInRange(syntaxRecordUpdate.fullRange)
                )
            )
        )
    let generated_localReturnResult_argument0_right_argument0_argument0_right_left_left_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_commentsAfterFields {
        case List_List.List_Empty:
            Print_empty
        case let List_List.List_Cons(comment0, comment1Up):
            Print_followedBy(ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up)), Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_declarationResult_lineSpread), Print_linebreak))
        }
    let generated_localReturnResult_argument1_argument0_right_left_left_left_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_maybeCommentsBeforeRecordVariable {
        case Maybe_Maybe.Maybe_Nothing:
            generated_let_declarationResult_recordVariablePrint
        case let Maybe_Maybe.Maybe_Just(commentsCollapsibleBeforeRecordVariable):
            Print_followedBy(generated_let_declarationResult_recordVariablePrint, Print_followedBy(Print_spaceOrLinebreakIndented(commentsCollapsibleBeforeRecordVariable.lineSpread), commentsCollapsibleBeforeRecordVariable.print))
        }
    return Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyCurlyClosing, Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_declarationResult_lineSpread), Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(generated_localReturnResult_argument0_right_argument0_argument0_right_left_left_letResult_declarationResult, Print_followedBy(Print_listReverseAndIntersperseAndFlatten(Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyCommaSpace, Print_emptyOrLinebreakIndented(generated_let_declarationResult_lineSpread)), generated_let_declarationResult_fieldPrintsWithCommentsBefore.reverse), Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyVerticalBarSpace, Print_spaceOrLinebreakIndented(generated_let_declarationResult_lineSpread))))), Print_followedBy(Print_withIndentIncreasedBy(2.0, generated_localReturnResult_argument1_argument0_right_left_left_left_letResult_declarationResult), ElmSyntaxPrintDefunctionalized_printExactlyCurlyOpeningSpace))))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_expressionToNotParenthesized(_ generated_0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) ->  ElmSyntaxNode_Node<ElmSyntaxExpression_Expression> {
    let fullRange: ElmSyntaxRange_Range
    let syntaxExpression: ElmSyntaxExpression_Expression
    switch generated_0 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_fullRange, generated_destructured_syntaxExpression):
        fullRange =
            generated_destructured_fullRange
        syntaxExpression =
            generated_destructured_syntaxExpression
    }
    return
        switch syntaxExpression {
        case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_ParenthesizedExpression(inParens):
            ElmSyntaxPrintDefunctionalized_expressionToNotParenthesized(inParens)
        case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_TupledExpression(parts):
            switch parts {
            case let List_List.List_Cons(inParens, List_List.List_Empty):
                ElmSyntaxPrintDefunctionalized_expressionToNotParenthesized(inParens)
            case List_List.List_Empty:
                ElmSyntaxNode_Node.ElmSyntaxNode_Node(fullRange, ElmSyntaxExpression_Expression.ElmSyntaxExpression_UnitExpr)
            case let List_List.List_Cons(part0, List_List.List_Cons(part1, List_List.List_Empty)):
                ElmSyntaxNode_Node.ElmSyntaxNode_Node(
                    fullRange,
                    ElmSyntaxExpression_Expression.ElmSyntaxExpression_TupledExpression(
                        Array_toList(
                            [ part0,
                              part1
                            ]
                        )
                    )
                )
            case let List_List.List_Cons(part0, List_List.List_Cons(part1, List_List.List_Cons(part2, List_List.List_Empty))):
                ElmSyntaxNode_Node.ElmSyntaxNode_Node(
                    fullRange,
                    ElmSyntaxExpression_Expression.ElmSyntaxExpression_TupledExpression(
                        Array_toList(
                            [ part0,
                              part1,
                              part2
                            ]
                        )
                    )
                )
            case let List_List.List_Cons(part0, List_List.List_Cons(part1, List_List.List_Cons(part2, List_List.List_Cons(part3, part4Up)))):
                ElmSyntaxNode_Node.ElmSyntaxNode_Node(fullRange, ElmSyntaxExpression_Expression.ElmSyntaxExpression_TupledExpression(List_cons(part0, List_cons(part1, List_cons(part2, List_cons(part3, part4Up))))))
            }
        case let syntaxExpressionNotParenthesized:
            ElmSyntaxNode_Node.ElmSyntaxNode_Node(fullRange, syntaxExpressionNotParenthesized)
        }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_firstCommentInRange(_ range: Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location>, _ sortedComments: List_List<ElmSyntaxNode_Node<String>>) ->  Maybe_Maybe<ElmSyntaxNode_Node<String>> {
    switch sortedComments {
    case List_List.List_Empty:
        Maybe_Maybe.Maybe_Nothing
    case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(headCommentRange, headComment), tailComments):
        switch ElmSyntaxPrintDefunctionalized_locationCompareFast(headCommentRange.start, range.start) {
        case Basics_Order.Basics_LT:
            ElmSyntaxPrintDefunctionalized_firstCommentInRange(range, tailComments)
        case Basics_Order.Basics_EQ:
            Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(headCommentRange, headComment))
        case Basics_Order.Basics_GT:
            switch ElmSyntaxPrintDefunctionalized_locationCompareFast(headCommentRange.end, range.end) {
            case Basics_Order.Basics_GT:
                Maybe_Maybe.Maybe_Nothing
            case Basics_Order.Basics_LT:
                Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(headCommentRange, headComment))
            case Basics_Order.Basics_EQ:
                Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(headCommentRange, headComment))
            }
        }
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_floatLiteral(_ float: Double) ->  String {
    if Basics_eq(Basics_identity(Basics_truncate(float)), float) {
        String_append(String_fromFloat(float), ".0")
    } else {
        String_fromFloat(float)
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_hexLiteral(_ int: Double) ->  String {
    let generated_let_declarationResult_maybeSignPrint: String =
        if Basics_lt(int, 0.0) {
            "-"
        } else {
            ""
        }
    let generated_let_declarationResult_intAbs: Double =
        abs(int)
    let generated_let_declarationResult_digitCountToPrint: Double =
        if Basics_le(generated_let_declarationResult_intAbs, 255.0) {
            2.0
        } else {
            if Basics_le(generated_let_declarationResult_intAbs, 65535.0) {
                4.0
            } else {
                if Basics_le(generated_let_declarationResult_intAbs, 4294967295.0) {
                    8.0
                } else {
                    16.0
                }
            }
        }
    return String_append(generated_let_declarationResult_maybeSignPrint, String_append("0x", ElmSyntaxPrintDefunctionalized_stringResizePadLeftWith0s(generated_let_declarationResult_digitCountToPrint, ElmSyntaxPrintDefunctionalized_intToHexString(int))))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_importExposing(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ generated_1: ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>) ->  Print_Print {
    let exposingRange: ElmSyntaxRange_Range
    let syntaxExposing: ElmSyntaxExposing_Exposing
    switch generated_1 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_exposingRange, generated_destructured_syntaxExposing):
        exposingRange =
            generated_destructured_exposingRange
        syntaxExposing =
            generated_destructured_syntaxExposing
    }
    return
        switch syntaxExposing {
        case ElmSyntaxExposing_Exposing.ElmSyntaxExposing_All(_):
            ElmSyntaxPrintDefunctionalized_printExactlyParensOpeningDotDotParensClosing
        case let ElmSyntaxExposing_Exposing.ElmSyntaxExposing_Explicit(exposingSet):
            switch exposingSet {
            case List_List.List_Empty:
                ElmSyntaxPrintDefunctionalized_printExactlyParensOpeningParensClosed
            case let List_List.List_Cons(expose0, expose1Up):
                ElmSyntaxPrintDefunctionalized_exposingMulti(syntaxComments, Generated_expose0_expose1Up_fullRange.Record(expose0: expose0, expose1Up: expose1Up, fullRange: exposingRange))
            }
        }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_importToNormal(_ syntaxImport: Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>) ->  Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>> {
    let generated_localReturnResult_exposingList_declarationResult: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>> =
        switch syntaxImport.exposingList {
        case Maybe_Maybe.Maybe_Nothing:
            Maybe_Maybe.Maybe_Nothing
        case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(exposingRange, syntaxExposing)):
            Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(exposingRange, ElmSyntaxPrintDefunctionalized_exposingToNormal(syntaxExposing)))
        }
    return Generated_exposingList_moduleAlias_moduleName.Record(exposingList: generated_localReturnResult_exposingList_declarationResult, moduleAlias: syntaxImport.moduleAlias, moduleName: syntaxImport.moduleName)
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_import_(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ generated_1: ElmSyntaxNode_Node<Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>>) ->  Print_Print {
    let incorrectImportRange: ElmSyntaxRange_Range
    let syntaxImport: Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>
    switch generated_1 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_incorrectImportRange, generated_destructured_syntaxImport):
        incorrectImportRange =
            generated_destructured_incorrectImportRange
        syntaxImport =
            generated_destructured_syntaxImport
    }
    let generated_let_declarationResult_importRange: ElmSyntaxRange_Range =
        switch syntaxImport.exposingList {
        case Maybe_Maybe.Maybe_Nothing:
            incorrectImportRange
        case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(syntaxExposingRange, _)):
            Generated_end_start.Record(end: syntaxExposingRange.end, start: incorrectImportRange.start)
        }
    let generated_let_declarationResult_moduleNameRange: ElmSyntaxRange_Range
    let generated_let_declarationResult_syntaxModuleName: ElmSyntaxModuleName_ModuleName
    switch syntaxImport.moduleName {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_moduleNameRange, generated_destructured_syntaxModuleName):
        generated_let_declarationResult_moduleNameRange =
            generated_destructured_moduleNameRange
        generated_let_declarationResult_syntaxModuleName =
            generated_destructured_syntaxModuleName
    }
    let generated_localReturnResult_argument0_right_letResult_declarationResult: Print_Print
    switch syntaxImport.exposingList {
    case Maybe_Maybe.Maybe_Nothing:
        generated_localReturnResult_argument0_right_letResult_declarationResult =
            Print_empty
    case let Maybe_Maybe.Maybe_Just(syntaxExposing):
        let generated_let_caseResult_case1_argument0_right_letResult_declarationResult_exposingPrint: Print_Print =
            ElmSyntaxPrintDefunctionalized_importExposing(syntaxComments, syntaxExposing)
        let generated_let_caseResult_case1_argument0_right_letResult_declarationResult_exposingPartStart: ElmSyntaxRange_Location =
            switch syntaxImport.moduleAlias {
            case Maybe_Maybe.Maybe_Nothing:
                generated_let_declarationResult_moduleNameRange.end
            case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(moduleAliasRange, _)):
                moduleAliasRange.end
            }
        let generated_localReturnResult_letResult_caseResult_case1_argument0_right_letResult_declarationResult: Print_Print
        switch ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: generated_let_declarationResult_importRange.end, start: generated_let_caseResult_case1_argument0_right_letResult_declarationResult_exposingPartStart), syntaxComments) {
        case List_List.List_Empty:
            let generated_let_caseResult_case0_letResult_caseResult_case1_argument0_right_letResult_declarationResult_lineSpread: Print_LineSpread =
                Print_lineSpread(generated_let_caseResult_case1_argument0_right_letResult_declarationResult_exposingPrint)
            generated_localReturnResult_letResult_caseResult_case1_argument0_right_letResult_declarationResult =
                Print_withIndentAtNextMultipleOf4(Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(generated_let_caseResult_case1_argument0_right_letResult_declarationResult_exposingPrint, Print_spaceOrLinebreakIndented(generated_let_caseResult_case0_letResult_caseResult_case1_argument0_right_letResult_declarationResult_lineSpread))), Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyExposing, Print_spaceOrLinebreakIndented(generated_let_caseResult_case0_letResult_caseResult_case1_argument0_right_letResult_declarationResult_lineSpread))))
        case let List_List.List_Cons(exposingComment0, exposingComment1Up):
            generated_localReturnResult_letResult_caseResult_case1_argument0_right_letResult_declarationResult =
                Print_withIndentAtNextMultipleOf4(Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(generated_let_caseResult_case1_argument0_right_letResult_declarationResult_exposingPrint, Print_followedBy(Print_linebreakIndented, Print_followedBy(ElmSyntaxPrintDefunctionalized_comments(List_cons(exposingComment0, exposingComment1Up)), Print_linebreakIndented)))), ElmSyntaxPrintDefunctionalized_printLinebreakIndentedExposing))
        }
        generated_localReturnResult_argument0_right_letResult_declarationResult =
            generated_localReturnResult_letResult_caseResult_case1_argument0_right_letResult_declarationResult
    }
    let generated_localReturnResult_argument0_right_left_letResult_declarationResult: Print_Print
    switch syntaxImport.moduleAlias {
    case Maybe_Maybe.Maybe_Nothing:
        generated_localReturnResult_argument0_right_left_letResult_declarationResult =
            switch ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: generated_let_declarationResult_moduleNameRange.start, start: generated_let_declarationResult_importRange.start), syntaxComments) {
            case List_List.List_Empty:
                Print_exactly(String_append(" ", ElmSyntaxPrintDefunctionalized_moduleName(generated_let_declarationResult_syntaxModuleName)))
            case let List_List.List_Cons(comment0, comment1Up):
                Print_withIndentAtNextMultipleOf4(Print_followedBy(Print_exactly(ElmSyntaxPrintDefunctionalized_moduleName(generated_let_declarationResult_syntaxModuleName)), Print_followedBy(Print_linebreakIndented, Print_followedBy(ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up)), Print_linebreakIndented))))
            }
    case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(moduleAliasRange, moduleAlias)):
        let generated_localReturnResult_caseResult_case1_argument0_right_left_letResult_declarationResult: Print_Print
        switch ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: moduleAliasRange.start, start: generated_let_declarationResult_moduleNameRange.end), syntaxComments) {
        case List_List.List_Empty:
            let generated_localReturnResult_left_caseResult_case0_caseResult_case1_argument0_right_left_letResult_declarationResult: Print_Print =
                switch ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: generated_let_declarationResult_moduleNameRange.start, start: generated_let_declarationResult_importRange.start), syntaxComments) {
                case List_List.List_Empty:
                    Print_exactly(String_append(" ", ElmSyntaxPrintDefunctionalized_moduleName(generated_let_declarationResult_syntaxModuleName)))
                case let List_List.List_Cons(moduleNameComment0, moduleNameComment1Up):
                    Print_withIndentAtNextMultipleOf4(Print_followedBy(Print_exactly(ElmSyntaxPrintDefunctionalized_moduleName(generated_let_declarationResult_syntaxModuleName)), Print_followedBy(Print_linebreakIndented, Print_followedBy(ElmSyntaxPrintDefunctionalized_comments(List_cons(moduleNameComment0, moduleNameComment1Up)), Print_linebreakIndented))))
                }
            generated_localReturnResult_caseResult_case1_argument0_right_left_letResult_declarationResult =
                Print_followedBy(Print_exactly(String_append(" as ", ElmSyntaxPrintDefunctionalized_moduleName(moduleAlias))), generated_localReturnResult_left_caseResult_case0_caseResult_case1_argument0_right_left_letResult_declarationResult)
        case let List_List.List_Cons(aliasComment0, aliasComment1Up):
            let generated_localReturnResult_argument0_right_left_argument0_caseResult_case1_caseResult_case1_argument0_right_left_letResult_declarationResult: Print_Print =
                switch ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: generated_let_declarationResult_moduleNameRange.start, start: generated_let_declarationResult_importRange.start), syntaxComments) {
                case List_List.List_Empty:
                    Print_exactly(ElmSyntaxPrintDefunctionalized_moduleName(generated_let_declarationResult_syntaxModuleName))
                case let List_List.List_Cons(moduleNameComment0, moduleNameComment1Up):
                    Print_followedBy(Print_exactly(ElmSyntaxPrintDefunctionalized_moduleName(generated_let_declarationResult_syntaxModuleName)), Print_followedBy(Print_linebreakIndented, ElmSyntaxPrintDefunctionalized_comments(List_cons(moduleNameComment0, moduleNameComment1Up))))
                }
            generated_localReturnResult_caseResult_case1_argument0_right_left_letResult_declarationResult =
                Print_withIndentAtNextMultipleOf4(Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(Print_exactly(ElmSyntaxPrintDefunctionalized_moduleName(moduleAlias)), Print_followedBy(Print_linebreakIndented, Print_followedBy(ElmSyntaxPrintDefunctionalized_comments(List_cons(aliasComment0, aliasComment1Up)), Print_linebreakIndented)))), ElmSyntaxPrintDefunctionalized_printLinebreakIndentedAs)), Print_followedBy(generated_localReturnResult_argument0_right_left_argument0_caseResult_case1_caseResult_case1_argument0_right_left_letResult_declarationResult, Print_linebreakIndented)))
        }
        generated_localReturnResult_argument0_right_left_letResult_declarationResult =
            generated_localReturnResult_caseResult_case1_argument0_right_left_letResult_declarationResult
    }
    return Print_followedBy(generated_localReturnResult_argument0_right_letResult_declarationResult, Print_followedBy(generated_localReturnResult_argument0_right_left_letResult_declarationResult, ElmSyntaxPrintDefunctionalized_printExactImport))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_imports(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxImports: List_List<ElmSyntaxNode_Node<Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>>>) ->  Print_Print {
    let generated_localReturnResult_declarationResult: Print_Print
    switch syntaxImports {
    case List_List.List_Empty:
        generated_localReturnResult_declarationResult =
            Print_empty
    case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(import0Range, import0), imports1Up):
        let generated_let_caseResult_case1_declarationResult_commentsBetweenImports: List_List<String> =
            List_foldl(
                { (generated_argument0_right_left_letDeclaration0_caseResult_case1_declarationResult_0: ElmSyntaxNode_Node<Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>>) in
                    { (soFar: Generated_commentsBetweenImports_previousImportRange<List_List<String>, Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location>>) in
                        let importRange: ElmSyntaxRange_Range
                        switch generated_argument0_right_left_letDeclaration0_caseResult_case1_declarationResult_0 {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_importRange, _):
                            importRange =
                                generated_destructured_importRange
                        }
                        return Generated_commentsBetweenImports_previousImportRange.Record(commentsBetweenImports: List_append(soFar.commentsBetweenImports, ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: importRange.start, start: soFar.previousImportRange.end), syntaxComments)), previousImportRange: importRange)
                    }
                },
                Generated_commentsBetweenImports_previousImportRange.Record(commentsBetweenImports: List_List.List_Empty, previousImportRange: import0Range),
                List_cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(import0Range, import0), imports1Up)
            ).commentsBetweenImports
        let generated_localReturnResult_left_letResult_caseResult_case1_declarationResult: Print_Print =
            switch generated_let_caseResult_case1_declarationResult_commentsBetweenImports {
            case List_List.List_Empty:
                Print_empty
            case let List_List.List_Cons(comment0, comment1Up):
                Print_followedBy(Print_linebreak, ElmSyntaxPrintDefunctionalized_moduleLevelComments(List_cons(comment0, comment1Up)))
            }
        generated_localReturnResult_declarationResult =
            Print_followedBy(
                Print_listMapAndIntersperseAndFlatten(
                    { (syntaxImport: ElmSyntaxNode_Node<ElmSyntaxImport_Import>) in ElmSyntaxPrintDefunctionalized_import_(syntaxComments, syntaxImport) },
                    Print_linebreak,
                    ElmSyntaxPrintDefunctionalized_importsCombine(
                        List_sortWith(
                            { (generated_argument0_right_left_left_argument0_right_letResult_caseResult_case1_declarationResult_0: ElmSyntaxNode_Node<Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>>) in
                                { (generated_argument0_right_left_left_argument0_right_letResult_caseResult_case1_declarationResult_1: ElmSyntaxNode_Node<Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>>) in
                                    let a: Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>
                                    switch generated_argument0_right_left_left_argument0_right_letResult_caseResult_case1_declarationResult_0 {
                                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_a):
                                        a =
                                            generated_destructured_a
                                    }
                                    let b: Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>
                                    switch generated_argument0_right_left_left_argument0_right_letResult_caseResult_case1_declarationResult_1 {
                                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_b):
                                        b =
                                            generated_destructured_b
                                    }
                                    return Basics_compare(ElmSyntaxNode_value(a.moduleName), ElmSyntaxNode_value(b.moduleName))
                                }
                            },
                            List_cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(import0Range, import0), imports1Up)
                        )
                    )
                ),
                generated_localReturnResult_left_letResult_caseResult_case1_declarationResult
            )
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_importsCombine(_ syntaxImports: List_List<ElmSyntaxNode_Node<ElmSyntaxImport_Import>>) ->  List_List<ElmSyntaxNode_Node<Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>>> {
    switch syntaxImports {
    case List_List.List_Empty:
        List_List.List_Empty
    case let List_List.List_Cons(onlyImport, List_List.List_Empty):
        List_singleton(ElmSyntaxNode_map(ElmSyntaxPrintDefunctionalized_importToNormal, onlyImport))
    case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(import0Range, import0), List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(import1Range, import1), import2Up)):
        if Basics_eq(ElmSyntaxNode_value(import0.moduleName), ElmSyntaxNode_value(import1.moduleName)) {
            ElmSyntaxPrintDefunctionalized_importsCombine(List_cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(import1Range, ElmSyntaxPrintDefunctionalized_importsMerge(import0, import1)), import2Up))
        } else {
            List_cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(import0Range, ElmSyntaxPrintDefunctionalized_importToNormal(import0)), ElmSyntaxPrintDefunctionalized_importsCombine(List_cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(import1Range, import1), import2Up)))
        }
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_importsMerge(_ earlier: Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>, _ later: Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>) ->  Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>> {
    let generated_localReturnResult_moduleAlias_declarationResult: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>> =
        switch earlier.moduleAlias {
        case let Maybe_Maybe.Maybe_Just(alias):
            Maybe_Maybe.Maybe_Just(alias)
        case Maybe_Maybe.Maybe_Nothing:
            later.moduleAlias
        }
    return Generated_exposingList_moduleAlias_moduleName.Record(exposingList: ElmSyntaxPrintDefunctionalized_exposingCombine(earlier.exposingList, later.exposingList), moduleAlias: generated_localReturnResult_moduleAlias_declarationResult, moduleName: later.moduleName)
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_infixDirection(_ syntaxInfixDirection: ElmSyntaxInfix_InfixDirection) ->  String {
    switch syntaxInfixDirection {
    case ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Left:
        "left "
    case ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Right:
        "right"
    case ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Non:
        "non  "
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_intLiteral(_ generated_0: Double) ->  String {
    String_fromInt(generated_0)
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_intToHexString(_ int: Double) ->  String {
    if Basics_lt(int, 16.0) {
        ElmSyntaxPrintDefunctionalized_unsafeHexDigitIntToString(int)
    } else {
        String_append(ElmSyntaxPrintDefunctionalized_intToHexString(Basics_idiv(int, 16.0)), ElmSyntaxPrintDefunctionalized_unsafeHexDigitIntToString(Basics_remainderBy(16.0, int)))
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_invalidNTuple<a: Sendable, b: Sendable>(_ printPartNotParenthesized: @Sendable @escaping (b) -> (a) -> Print_Print, _ syntaxComments: b, _ syntaxTuple: Generated_fullRange_part0_part1_part2_part3_part4Up<ElmSyntaxRange_Range, a, a, a, a, List_List<a>>) ->  Print_Print {
    let generated_let_declarationResult_lineSpread: Print_LineSpread =
        ElmSyntaxPrintDefunctionalized_lineSpreadInRange(syntaxTuple.fullRange)
    return Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyParensClosing, Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_declarationResult_lineSpread), Print_followedBy(Print_listMapAndIntersperseAndFlatten({ (part: a) in Print_withIndentIncreasedBy(2.0, printPartNotParenthesized(syntaxComments)(part)) }, Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyCommaSpace, Print_emptyOrLinebreakIndented(generated_let_declarationResult_lineSpread)), List_cons(syntaxTuple.part0, List_cons(syntaxTuple.part1, List_cons(syntaxTuple.part2, List_cons(syntaxTuple.part3, syntaxTuple.part4Up))))), ElmSyntaxPrintDefunctionalized_printExactlyParensOpeningSpace)))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_lineIndentation(_ line: String) ->  Double {
    String_foldl(
        { (char: UnicodeScalar) in
            { (soFar: Generated_onlySpaces_spaceCount<Bool, Double>) in
                if soFar.onlySpaces {
                    switch char {
                    case " ":
                        Generated_onlySpaces_spaceCount.Record(onlySpaces: true, spaceCount: Basics_add(soFar.spaceCount, 1.0))
                    case _:
                        Generated_onlySpaces_spaceCount.Record(onlySpaces: false, spaceCount: soFar.spaceCount)
                    }
                } else {
                    soFar
                }
            }
        },
        ElmSyntaxPrintDefunctionalized_spaceCount0OnlySpacesTrue,
        line
    ).spaceCount
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_lineSpreadBetweenNodes<a__: Sendable, b__: Sendable>(_ generated_0: ElmSyntaxNode_Node<a__>, _ generated_1: ElmSyntaxNode_Node<b__>) ->  Print_LineSpread {
    let earlierRange: ElmSyntaxRange_Range
    switch generated_0 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_earlierRange, _):
        earlierRange =
            generated_destructured_earlierRange
    }
    let laterRange: ElmSyntaxRange_Range
    switch generated_1 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_laterRange, _):
        laterRange =
            generated_destructured_laterRange
    }
    return
        if Basics_eq(Basics_sub(laterRange.end.row, earlierRange.start.row), 0.0) {
            Print_LineSpread.Print_SingleLine
        } else {
            Print_LineSpread.Print_MultipleLines
        }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_lineSpreadBetweenRanges(_ earlierRange: Generated_end_start<ElmSyntaxRange_Location, Generated_column_row<Double, Double>>, _ laterRange: Generated_end_start<Generated_column_row<Double, Double>, ElmSyntaxRange_Location>) ->  Print_LineSpread {
    if Basics_eq(Basics_sub(laterRange.end.row, earlierRange.start.row), 0.0) {
        Print_LineSpread.Print_SingleLine
    } else {
        Print_LineSpread.Print_MultipleLines
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_lineSpreadInNode<a__: Sendable>(_ generated_0: ElmSyntaxNode_Node<a__>) ->  Print_LineSpread {
    let range: ElmSyntaxRange_Range
    switch generated_0 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_range, _):
        range =
            generated_destructured_range
    }
    return ElmSyntaxPrintDefunctionalized_lineSpreadInRange(range)
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_lineSpreadInRange(_ range: Generated_end_start<Generated_column_row<Double, Double>, ElmSyntaxRange_Location>) ->  Print_LineSpread {
    if Basics_eq(Basics_sub(range.end.row, range.start.row), 0.0) {
        Print_LineSpread.Print_SingleLine
    } else {
        Print_LineSpread.Print_MultipleLines
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_linebreaksFollowedByDeclaration(_ syntaxComments: Generated_comments_portDocumentationComment<List_List<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxNode_Node<String>>>, _ syntaxDeclaration: ElmSyntaxDeclaration_Declaration) ->  Print_Print {
    switch syntaxDeclaration {
    case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_FunctionDeclaration(syntaxExpressionDeclaration):
        Print_followedBy(ElmSyntaxPrintDefunctionalized_declarationExpression(syntaxComments.comments, syntaxExpressionDeclaration), ElmSyntaxPrintDefunctionalized_printLinebreakLinebreakLinebreak)
    case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_AliasDeclaration(syntaxTypeAliasDeclaration):
        Print_followedBy(ElmSyntaxPrintDefunctionalized_declarationTypeAlias(syntaxComments.comments, syntaxTypeAliasDeclaration), ElmSyntaxPrintDefunctionalized_printLinebreakLinebreakLinebreak)
    case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_CustomTypeDeclaration(syntaxChoiceTypeDeclaration):
        Print_followedBy(ElmSyntaxPrintDefunctionalized_declarationChoiceType(syntaxComments.comments, syntaxChoiceTypeDeclaration), ElmSyntaxPrintDefunctionalized_printLinebreakLinebreakLinebreak)
    case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_PortDeclaration(signature):
        Print_followedBy(ElmSyntaxPrintDefunctionalized_declarationPort(Generated_comments_documentationComment.Record(comments: syntaxComments.comments, documentationComment: syntaxComments.portDocumentationComment), signature), ElmSyntaxPrintDefunctionalized_printLinebreakLinebreakLinebreak)
    case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_InfixDeclaration(syntaxInfixDeclaration):
        Print_followedBy(ElmSyntaxPrintDefunctionalized_declarationInfix(syntaxInfixDeclaration), Print_linebreak)
    case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_Destructuring(destructuringPattern, destructuringExpression):
        Print_followedBy(ElmSyntaxPrintDefunctionalized_declarationDestructuring(syntaxComments.comments, destructuringPattern, destructuringExpression), ElmSyntaxPrintDefunctionalized_printLinebreakLinebreakLinebreak)
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_linesUnindentAndTrimRight(_ lines: List_List<String>) ->  List_List<String> {
    let generated_let_declarationResult_nonBlankLinesIndentationMinimum: Maybe_Maybe<Double> =
        List_foldl(
            { (line: String) in
                { (soFarMinimumIndentationOrNothing: Maybe_Maybe<Double>) in
                    let generated_localReturnResult_result_argument0_right_letDeclaration0_declarationResult: Maybe_Maybe<Double>
                    switch String_trim(line) {
                    case "":
                        generated_localReturnResult_result_argument0_right_letDeclaration0_declarationResult =
                            soFarMinimumIndentationOrNothing
                    case _:
                        let generated_let_caseResult_case1_result_argument0_right_letDeclaration0_declarationResult_currentLineIndentation: Double =
                            ElmSyntaxPrintDefunctionalized_lineIndentation(line)
                        let generated_localReturnResult_argument0_letResult_caseResult_case1_result_argument0_right_letDeclaration0_declarationResult: Double =
                            switch soFarMinimumIndentationOrNothing {
                            case Maybe_Maybe.Maybe_Nothing:
                                generated_let_caseResult_case1_result_argument0_right_letDeclaration0_declarationResult_currentLineIndentation
                            case let Maybe_Maybe.Maybe_Just(soFarMinimumIndentation):
                                min(soFarMinimumIndentation, generated_let_caseResult_case1_result_argument0_right_letDeclaration0_declarationResult_currentLineIndentation)
                            }
                        generated_localReturnResult_result_argument0_right_letDeclaration0_declarationResult =
                            Maybe_Maybe.Maybe_Just(generated_localReturnResult_argument0_letResult_caseResult_case1_result_argument0_right_letDeclaration0_declarationResult)
                    }
                    return generated_localReturnResult_result_argument0_right_letDeclaration0_declarationResult
                }
            },
            Maybe_Maybe.Maybe_Nothing,
            lines
        )
    return
        switch generated_let_declarationResult_nonBlankLinesIndentationMinimum {
        case Maybe_Maybe.Maybe_Nothing:
            List_map(
                { (generated_argument0_right_caseResult_case0_letResult_declarationResult_0: String) in
                    let (_) =
                        generated_argument0_right_caseResult_case0_letResult_declarationResult_0
                    return ""
                },
                lines
            )
        case let Maybe_Maybe.Maybe_Just(minimumIndentation):
            List_map({ (line: String) in String_trimRight(String_dropLeft(minimumIndentation, line)) }, lines)
        }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_listDropLastIfEmpty(_ list: List_List<String>) ->  List_List<String> {
    switch list {
    case List_List.List_Empty:
        List_List.List_Empty
    case let List_List.List_Cons(onlyElement, List_List.List_Empty):
        switch String_trim(onlyElement) {
        case "":
            List_List.List_Empty
        case _:
            List_singleton(onlyElement)
        }
    case let List_List.List_Cons(element0, List_List.List_Cons(element1, element2Up)):
        List_cons(element0, ElmSyntaxPrintDefunctionalized_listDropLastIfEmpty(List_cons(element1, element2Up)))
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_listFilledLast<a: Sendable>(_ head: a, _ tail: List_List<a>) ->  a {
    switch tail {
    case List_List.List_Empty:
        head
    case let List_List.List_Cons(tailHead, tailTail):
        ElmSyntaxPrintDefunctionalized_listFilledLast(tailHead, tailTail)
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_listFirstJustMap<a: Sendable, b: Sendable>(_ elementToMaybe: @Sendable @escaping (a) -> Maybe_Maybe<b>, _ list: List_List<a>) ->  Maybe_Maybe<b> {
    switch list {
    case List_List.List_Empty:
        Maybe_Maybe.Maybe_Nothing
    case let List_List.List_Cons(head, tail):
        switch elementToMaybe(head) {
        case Maybe_Maybe.Maybe_Nothing:
            ElmSyntaxPrintDefunctionalized_listFirstJustMap(elementToMaybe, tail)
        case let Maybe_Maybe.Maybe_Just(b):
            Maybe_Maybe.Maybe_Just(b)
        }
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_listMapAndFlattenToString<a: Sendable>(_ elementToString: @Sendable @escaping (a) -> String, _ elements: List_List<a>) ->  String {
    List_foldl({ (next: a) in { (soFar: String) in String_append(soFar, elementToString(next)) } }, "", elements)
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_listMapAndIntersperseAndFlattenToString<a: Sendable>(_ elementToString: @Sendable @escaping (a) -> String, _ betweenElements: String, _ elements: List_List<a>) ->  String {
    switch elements {
    case List_List.List_Empty:
        ""
    case let List_List.List_Cons(head, tail):
        List_foldl({ (next: a) in { (soFar: String) in String_append(soFar, String_append(betweenElements, elementToString(next))) } }, elementToString(head), tail)
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_locationCompareFast(_ left: Generated_column_row<Double, Double>, _ right: Generated_column_row<Double, Double>) ->  Basics_Order {
    if Basics_lt(Basics_sub(left.row, right.row), 0.0) {
        Basics_Order.Basics_LT
    } else {
        if Basics_gt(Basics_sub(left.row, right.row), 0.0) {
            Basics_Order.Basics_GT
        } else {
            Basics_compare(left.column, right.column)
        }
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_maybeLineSpread<a: Sendable>(_ valueToLineSpread: @Sendable @escaping (a) -> Print_LineSpread, _ maybe: Maybe_Maybe<a>) ->  Print_LineSpread {
    switch maybe {
    case Maybe_Maybe.Maybe_Nothing:
        Print_LineSpread.Print_SingleLine
    case let Maybe_Maybe.Maybe_Just(value):
        valueToLineSpread(value)
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_moduleDocumentation(_ ast: Generated_comments_declarations_imports_moduleDefinition<List_List<ElmSyntaxNode_Node<ElmSyntaxComments_Comment>>, List_List<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>, List_List<ElmSyntaxNode_Node<ElmSyntaxImport_Import>>, ElmSyntaxNode_Node<ElmSyntaxModule_Module>>) ->  Maybe_Maybe<ElmSyntaxNode_Node<String>> {
    let generated_let_declarationResult_cutOffLine: Double =
        switch ast.imports {
        case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(firstImportRange, _), _):
            firstImportRange.start.row
        case List_List.List_Empty:
            switch ast.declarations {
            case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(firstDeclarationRange, _), _):
                firstDeclarationRange.start.row
            case List_List.List_Empty:
                0.0
            }
        }
    return ElmSyntaxPrintDefunctionalized_moduleDocumentationBeforeCutOffLine(generated_let_declarationResult_cutOffLine, ast.comments)
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_moduleDocumentationBeforeCutOffLine(_ cutOffLine: Double, _ allComments: List_List<ElmSyntaxNode_Node<String>>) ->  Maybe_Maybe<ElmSyntaxNode_Node<String>> {
    let generated_localReturnResult_declarationResult: Maybe_Maybe<ElmSyntaxNode_Node<String>>
    switch allComments {
    case List_List.List_Empty:
        generated_localReturnResult_declarationResult =
            Maybe_Maybe.Maybe_Nothing
    case let List_List.List_Cons(headComment, restOfComments):
        let generated_let_caseResult_case1_declarationResult_range: ElmSyntaxRange_Range
        let generated_let_caseResult_case1_declarationResult_content: String
        switch headComment {
        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_range, generated_destructured_content):
            generated_let_caseResult_case1_declarationResult_range =
                generated_destructured_range
            generated_let_caseResult_case1_declarationResult_content =
                generated_destructured_content
        }
        generated_localReturnResult_declarationResult =
            if Basics_gt(generated_let_caseResult_case1_declarationResult_range.start.row, cutOffLine) {
                Maybe_Maybe.Maybe_Nothing
            } else {
                if String_startsWith("{-|", generated_let_caseResult_case1_declarationResult_content) {
                    Maybe_Maybe.Maybe_Just(headComment)
                } else {
                    ElmSyntaxPrintDefunctionalized_moduleDocumentationBeforeCutOffLine(cutOffLine, restOfComments)
                }
            }
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_moduleDocumentationParse(_ moduleDocumentationContent: String) ->  Generated_rawAfterAtDocsLines_whileAtDocsLines<String, List_List<Generated_atDocsLine_rawBefore<List_List<String>, String>>> {
    let generated_let_declarationResult_parsed: Generated_finishedBlocks_rawSinceAtDocs<List_List<Generated_atDocsLine_rawBefore<List_List<String>, String>>, String> =
        List_foldl(
            { (line: String) in
                { (soFar: Generated_finishedBlocks_rawSinceAtDocs<List_List<Generated_atDocsLine_rawBefore<List_List<String>, String>>, String>) in
                    if String_startsWith("@docs ", line) {
                        Generated_finishedBlocks_rawSinceAtDocs.Record(finishedBlocks: List_cons(Generated_atDocsLine_rawBefore.Record(atDocsLine: List_map(String_trim, String_split(",", String_slice(6.0, String_length(line), line))), rawBefore: soFar.rawSinceAtDocs), soFar.finishedBlocks), rawSinceAtDocs: "")
                    } else {
                        switch line {
                        case "@docs":
                            Generated_finishedBlocks_rawSinceAtDocs.Record(finishedBlocks: List_cons(Generated_atDocsLine_rawBefore.Record(atDocsLine: List_List.List_Empty, rawBefore: soFar.rawSinceAtDocs), soFar.finishedBlocks), rawSinceAtDocs: "")
                        case _:
                            Generated_finishedBlocks_rawSinceAtDocs.Record(finishedBlocks: soFar.finishedBlocks, rawSinceAtDocs: String_append(soFar.rawSinceAtDocs, String_append(line, "\n")))
                        }
                    }
                }
            },
            ElmSyntaxPrintDefunctionalized_rawSinceAtDocsEmptyFinishedBlocksEmpty(),
            String_lines(String_trimLeft(String_slice(3.0, Basics_sub(String_length(moduleDocumentationContent), 2.0), moduleDocumentationContent)))
        )
    return Generated_rawAfterAtDocsLines_whileAtDocsLines.Record(rawAfterAtDocsLines: generated_let_declarationResult_parsed.rawSinceAtDocs, whileAtDocsLines: List_reverse(generated_let_declarationResult_parsed.finishedBlocks))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_moduleExposing(_ context: Generated_atDocsLines_comments<List_List<List_List<String>>, List_List<ElmSyntaxNode_Node<String>>>, _ generated_1: ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>) ->  Print_Print {
    let exposingRange: ElmSyntaxRange_Range
    let syntaxExposing: ElmSyntaxExposing_Exposing
    switch generated_1 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_exposingRange, generated_destructured_syntaxExposing):
        exposingRange =
            generated_destructured_exposingRange
        syntaxExposing =
            generated_destructured_syntaxExposing
    }
    let generated_localReturnResult_declarationResult: Print_Print
    switch syntaxExposing {
    case ElmSyntaxExposing_Exposing.ElmSyntaxExposing_All(_):
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_printExactlyParensOpeningDotDotParensClosing
    case let ElmSyntaxExposing_Exposing.ElmSyntaxExposing_Explicit(exposingSet):
        let generated_localReturnResult_caseResult_case1_declarationResult: Print_Print
        switch ElmSyntaxPrintDefunctionalized_exposeListToNormal(exposingSet) {
        case List_List.List_Empty:
            generated_localReturnResult_caseResult_case1_declarationResult =
                ElmSyntaxPrintDefunctionalized_printExactlyParensOpeningParensClosed
        case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, onlySyntaxExpose), List_List.List_Empty):
            let generated_let_caseResult_case1_caseResult_case1_declarationResult_containedComments: List_List<String> =
                ElmSyntaxPrintDefunctionalized_commentsInRange(exposingRange, context.comments)
            let generated_let_caseResult_case1_caseResult_case1_declarationResult_lineSpread: Print_LineSpread =
                switch generated_let_caseResult_case1_caseResult_case1_declarationResult_containedComments {
                case List_List.List_Cons(_, _):
                    Print_LineSpread.Print_MultipleLines
                case List_List.List_Empty:
                    Print_LineSpread.Print_SingleLine
                }
            let generated_localReturnResult_argument0_right_letResult_caseResult_case1_caseResult_case1_declarationResult: Print_Print =
                switch generated_let_caseResult_case1_caseResult_case1_declarationResult_containedComments {
                case List_List.List_Empty:
                    ElmSyntaxPrintDefunctionalized_printExactlyParensClosing
                case let List_List.List_Cons(comment0, comment1Up):
                    Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyParensClosing, Print_followedBy(Print_emptyOrLinebreakIndented(generated_let_caseResult_case1_caseResult_case1_declarationResult_lineSpread), ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up))))
                }
            let generated_localReturnResult_left_argument0_left_left_letResult_caseResult_case1_caseResult_case1_declarationResult: String =
                switch generated_let_caseResult_case1_caseResult_case1_declarationResult_lineSpread {
                case Print_LineSpread.Print_SingleLine:
                    "("
                case Print_LineSpread.Print_MultipleLines:
                    "( "
                }
            generated_localReturnResult_caseResult_case1_declarationResult =
                Print_followedBy(generated_localReturnResult_argument0_right_letResult_caseResult_case1_caseResult_case1_declarationResult, Print_followedBy(Print_emptyOrLinebreakIndented(generated_let_caseResult_case1_caseResult_case1_declarationResult_lineSpread), Print_exactly(String_append(generated_localReturnResult_left_argument0_left_left_letResult_caseResult_case1_caseResult_case1_declarationResult, ElmSyntaxPrintDefunctionalized_expose(onlySyntaxExpose)))))
        case let List_List.List_Cons(expose0, List_List.List_Cons(expose1, expose2Up)):
            let generated_localReturnResult_caseResult_case2_caseResult_case1_declarationResult: Print_Print
            switch context.atDocsLines {
            case let List_List.List_Cons(atDocsLine0, atDocsLine1Up):
                let generated_let_caseResult_case0_caseResult_case2_caseResult_case1_declarationResult_atDocsExposeLines: Generated_atDocsExposeLines_remainingExposes<List_List<List_List<ElmSyntaxExposing_TopLevelExpose>>, List_List<ElmSyntaxExposing_TopLevelExpose>> =
                    List_foldr(
                        { (atDocsLine: List_List<String>) in
                            { (soFar: Generated_atDocsExposeLines_remainingExposes<List_List<List_List<ElmSyntaxExposing_TopLevelExpose>>, List_List<ElmSyntaxExposing_TopLevelExpose>>) in
                                let generated_let_result_argument0_right_letDeclaration0_caseResult_case0_caseResult_case2_caseResult_case1_declarationResult_atDocsExposeLine: Generated_exposes_remaining<List_List<ElmSyntaxExposing_TopLevelExpose>, List_List<ElmSyntaxExposing_TopLevelExpose>> =
                                    ElmSyntaxPrintDefunctionalized_atDocsLineToExposesAndRemaining(atDocsLine, soFar.remainingExposes)
                                return Generated_atDocsExposeLines_remainingExposes.Record(atDocsExposeLines: List_cons(generated_let_result_argument0_right_letDeclaration0_caseResult_case0_caseResult_case2_caseResult_case1_declarationResult_atDocsExposeLine.exposes, soFar.atDocsExposeLines), remainingExposes: generated_let_result_argument0_right_letDeclaration0_caseResult_case0_caseResult_case2_caseResult_case1_declarationResult_atDocsExposeLine.remaining)
                            }
                        },
                        Generated_atDocsExposeLines_remainingExposes.Record(atDocsExposeLines: List_List.List_Empty, remainingExposes: List_map(ElmSyntaxNode_value, List_cons(expose0, List_cons(expose1, expose2Up)))),
                        List_cons(atDocsLine0, atDocsLine1Up)
                    )
                let generated_localReturnResult_letResult_caseResult_case0_caseResult_case2_caseResult_case1_declarationResult: Print_Print
                switch
                    List_filter(
                        { (line: List_List<ElmSyntaxExposing_TopLevelExpose>) in
                            switch line {
                            case List_List.List_Empty:
                                false
                            case List_List.List_Cons(_, _):
                                true
                            }
                        },
                        generated_let_caseResult_case0_caseResult_case2_caseResult_case1_declarationResult_atDocsExposeLines.atDocsExposeLines
                    ) {
                case List_List.List_Empty:
                    generated_localReturnResult_letResult_caseResult_case0_caseResult_case2_caseResult_case1_declarationResult =
                        ElmSyntaxPrintDefunctionalized_exposingMulti(context.comments, Generated_expose0_expose1Up_fullRange.Record(expose0: expose0, expose1Up: List_cons(expose1, expose2Up), fullRange: exposingRange))
                case let List_List.List_Cons(atDocsExposeLine0, atDocsExposeLine1Up):
                    let generated_localReturnResult_argument0_right_caseResult_case1_letResult_caseResult_case0_caseResult_case2_caseResult_case1_declarationResult: Print_Print =
                        switch generated_let_caseResult_case0_caseResult_case2_caseResult_case1_declarationResult_atDocsExposeLines.remainingExposes {
                        case List_List.List_Empty:
                            ElmSyntaxPrintDefunctionalized_printExactlyParensClosing
                        case let List_List.List_Cons(remainingExpose0, remainingExpose1Up):
                            Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyParensClosing, Print_followedBy(Print_linebreakIndented, Print_exactly(String_append(", ", ElmSyntaxPrintDefunctionalized_listMapAndIntersperseAndFlattenToString(ElmSyntaxPrintDefunctionalized_expose, ", ", List_cons(remainingExpose0, remainingExpose1Up))))))
                        }
                    generated_localReturnResult_letResult_caseResult_case0_caseResult_case2_caseResult_case1_declarationResult =
                        Print_followedBy(generated_localReturnResult_argument0_right_caseResult_case1_letResult_caseResult_case0_caseResult_case2_caseResult_case1_declarationResult, Print_followedBy(Print_linebreakIndented, Print_followedBy(Print_listMapAndIntersperseAndFlatten({ (atDocsLine: List_List<ElmSyntaxExposing_TopLevelExpose>) in Print_exactly(ElmSyntaxPrintDefunctionalized_listMapAndIntersperseAndFlattenToString(ElmSyntaxPrintDefunctionalized_expose, ", ", atDocsLine)) }, ElmSyntaxPrintDefunctionalized_printLinebreakIndentedCommaSpace, List_cons(atDocsExposeLine0, atDocsExposeLine1Up)), ElmSyntaxPrintDefunctionalized_printExactlyParensOpeningSpace)))
                }
                generated_localReturnResult_caseResult_case2_caseResult_case1_declarationResult =
                    generated_localReturnResult_letResult_caseResult_case0_caseResult_case2_caseResult_case1_declarationResult
            case List_List.List_Empty:
                generated_localReturnResult_caseResult_case2_caseResult_case1_declarationResult =
                    ElmSyntaxPrintDefunctionalized_exposingMulti(context.comments, Generated_expose0_expose1Up_fullRange.Record(expose0: expose0, expose1Up: List_cons(expose1, expose2Up), fullRange: exposingRange))
            }
            generated_localReturnResult_caseResult_case1_declarationResult =
                generated_localReturnResult_caseResult_case2_caseResult_case1_declarationResult
        }
        generated_localReturnResult_declarationResult =
            generated_localReturnResult_caseResult_case1_declarationResult
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_moduleHeader(_ context: Generated_atDocsLines_comments<List_List<List_List<String>>, List_List<ElmSyntaxNode_Node<String>>>, _ syntaxModuleHeader: ElmSyntaxModule_Module) ->  Print_Print {
    let generated_localReturnResult_declarationResult: Print_Print
    switch syntaxModuleHeader {
    case let ElmSyntaxModule_Module.ElmSyntaxModule_NormalModule(defaultModuleData):
        let generated_let_caseResult_case0_declarationResult_exposingPrint: Print_Print =
            ElmSyntaxPrintDefunctionalized_moduleExposing(context, defaultModuleData.exposingList)
        let generated_let_caseResult_case0_declarationResult_lineSpread: Print_LineSpread =
            Print_lineSpread(generated_let_caseResult_case0_declarationResult_exposingPrint)
        generated_localReturnResult_declarationResult =
            Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(generated_let_caseResult_case0_declarationResult_exposingPrint, Print_spaceOrLinebreakIndented(generated_let_caseResult_case0_declarationResult_lineSpread))), Print_exactly(String_append("module ", String_append(ElmSyntaxPrintDefunctionalized_moduleName(ElmSyntaxNode_value(defaultModuleData.moduleName)), " exposing"))))
    case let ElmSyntaxModule_Module.ElmSyntaxModule_PortModule(defaultModuleData):
        let generated_let_caseResult_case1_declarationResult_exposingPrint: Print_Print =
            ElmSyntaxPrintDefunctionalized_moduleExposing(context, defaultModuleData.exposingList)
        let generated_let_caseResult_case1_declarationResult_lineSpread: Print_LineSpread =
            Print_lineSpread(generated_let_caseResult_case1_declarationResult_exposingPrint)
        generated_localReturnResult_declarationResult =
            Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(generated_let_caseResult_case1_declarationResult_exposingPrint, Print_spaceOrLinebreakIndented(generated_let_caseResult_case1_declarationResult_lineSpread))), Print_exactly(String_append("port module ", String_append(ElmSyntaxPrintDefunctionalized_moduleName(ElmSyntaxNode_value(defaultModuleData.moduleName)), " exposing"))))
    case let ElmSyntaxModule_Module.ElmSyntaxModule_EffectModule(effectModuleData):
        let generated_let_caseResult_case2_declarationResult_exposingPrint: Print_Print =
            ElmSyntaxPrintDefunctionalized_moduleExposing(context, effectModuleData.exposingList)
        let generated_let_caseResult_case2_declarationResult_lineSpread: Print_LineSpread =
            Print_lineSpread(generated_let_caseResult_case2_declarationResult_exposingPrint)
        let generated_localReturnResult_0_left_left_left_right_right_right_argument0_left_letResult_caseResult_case2_declarationResult: Maybe_Maybe<String> =
            switch effectModuleData.command {
            case Maybe_Maybe.Maybe_Nothing:
                Maybe_Maybe.Maybe_Nothing
            case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, name)):
                Maybe_Maybe.Maybe_Just(String_append("command = ", name))
            }
        let generated_localReturnResult_1_left_left_left_right_right_right_argument0_left_letResult_caseResult_case2_declarationResult: Maybe_Maybe<String> =
            switch effectModuleData.subscription {
            case Maybe_Maybe.Maybe_Nothing:
                Maybe_Maybe.Maybe_Nothing
            case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, name)):
                Maybe_Maybe.Maybe_Just(String_append("subscription = ", name))
            }
        generated_localReturnResult_declarationResult =
            Print_followedBy(
                Print_withIndentAtNextMultipleOf4(Print_followedBy(generated_let_caseResult_case2_declarationResult_exposingPrint, Print_spaceOrLinebreakIndented(generated_let_caseResult_case2_declarationResult_lineSpread))),
                Print_exactly(
                    String_append(
                        "effect module ",
                        String_append(
                            ElmSyntaxPrintDefunctionalized_moduleName(ElmSyntaxNode_value(effectModuleData.moduleName)),
                            String_append(
                                " where { ",
                                String_append(
                                    String_join(
                                        ", ",
                                        List_filterMap(
                                            Basics_identity,
                                            Array_toList(
                                                [ generated_localReturnResult_0_left_left_left_right_right_right_argument0_left_letResult_caseResult_case2_declarationResult,
                                                  generated_localReturnResult_1_left_left_left_right_right_right_argument0_left_letResult_caseResult_case2_declarationResult
                                                ]
                                            )
                                        )
                                    ),
                                    " } exposing"
                                )
                            )
                        )
                    )
                )
            )
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_moduleLevelComments(_ syntaxComments: List_List<String>) ->  Print_Print {
    switch syntaxComments {
    case List_List.List_Empty:
        Print_empty
    case let List_List.List_Cons(comment0, comment1Up):
        Print_followedBy(
            Print_listMapAndFlatten(
                { (syntaxComment: String) in
                    switch syntaxComment {
                    case "{--}":
                        ElmSyntaxPrintDefunctionalized_moduleLevelMultiLneCommentWithoutWhitespace
                    case let notEmptyMultiLineComment:
                        Print_followedBy(Print_linebreak, ElmSyntaxPrintDefunctionalized_comment(notEmptyMultiLineComment))
                    }
                },
                comment1Up
            ),
            Print_followedBy(Print_linebreak, ElmSyntaxPrintDefunctionalized_comment(comment0))
        )
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_moduleLevelCommentsBeforeDeclaration(_ syntaxComments: Generated_comment0_comment1Up<String, List_List<String>>) ->  Print_Print {
    let generated_localReturnResult_argument0_right_declarationResult: Print_Print =
        switch ElmSyntaxPrintDefunctionalized_listFilledLast(syntaxComments.comment0, syntaxComments.comment1Up) {
        case "{--}":
            Print_empty
        case _:
            ElmSyntaxPrintDefunctionalized_printLinebreakLinebreak
        }
    return Print_followedBy(generated_localReturnResult_argument0_right_declarationResult, Print_followedBy(ElmSyntaxPrintDefunctionalized_moduleLevelComments(List_cons(syntaxComments.comment0, syntaxComments.comment1Up)), Print_linebreak))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_moduleName(_ syntaxModuleName: List_List<String>) ->  String {
    String_join(".", syntaxModuleName)
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_module_(_ syntaxModule: ElmSyntaxFile_File) ->  Print_Print {
    let generated_let_declarationResult_maybeModuleDocumentation: Maybe_Maybe<ElmSyntaxNode_Node<String>> =
        ElmSyntaxPrintDefunctionalized_moduleDocumentation(syntaxModule)
    let generated_let_declarationResult_maybeModuleDocumentationParsed: Maybe_Maybe<Generated_rawAfterAtDocsLines_whileAtDocsLines<String, List_List<Generated_atDocsLine_rawBefore<List_List<String>, String>>>> =
        switch generated_let_declarationResult_maybeModuleDocumentation {
        case Maybe_Maybe.Maybe_Nothing:
            Maybe_Maybe.Maybe_Nothing
        case let Maybe_Maybe.Maybe_Just(ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, syntaxModuleDocumentation)):
            Maybe_Maybe.Maybe_Just(ElmSyntaxPrintDefunctionalized_moduleDocumentationParse(syntaxModuleDocumentation))
        }
    let generated_let_declarationResult_lastSyntaxLocationBeforeDeclarations: ElmSyntaxRange_Location =
        switch syntaxModule.imports {
        case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(firstImportRange, _), _):
            firstImportRange.end
        case List_List.List_Empty:
            ElmSyntaxNode_range(syntaxModule.moduleDefinition).end
        }
    let generated_localReturnResult_left_letDeclaration3_declarationResult: List_List<ElmSyntaxNode_Node<String>> =
        switch generated_let_declarationResult_maybeModuleDocumentation {
        case Maybe_Maybe.Maybe_Nothing:
            syntaxModule.comments
        case let Maybe_Maybe.Maybe_Just(syntaxModuleDocumentation):
            List_filter({ (c: ElmSyntaxNode_Node<String>) in Basics_neq(c, syntaxModuleDocumentation) }, syntaxModule.comments)
        }
    let generated_let_declarationResult_commentsAndPortDocumentationComments: Generated_portDocumentationComments_remainingComments<List_List<ElmSyntaxNode_Node<String>>, List_List<ElmSyntaxNode_Node<String>>> =
        ElmSyntaxPrintDefunctionalized_splitOffPortDocumentationComments(generated_localReturnResult_left_letDeclaration3_declarationResult)
    let generated_let_declarationResult_commentsBeforeDeclarations: List_List<String> =
        switch syntaxModule.declarations {
        case List_List.List_Empty:
            List_List.List_Empty
        case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(declaration0Range, _), _):
            ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: declaration0Range.start, start: generated_let_declarationResult_lastSyntaxLocationBeforeDeclarations), generated_let_declarationResult_commentsAndPortDocumentationComments.remainingComments)
        }
    let generated_let_declarationResult_atDocsLines: List_List<List_List<String>> =
        switch generated_let_declarationResult_maybeModuleDocumentationParsed {
        case Maybe_Maybe.Maybe_Nothing:
            List_List.List_Empty
        case let Maybe_Maybe.Maybe_Just(moduleDocumentationParsed):
            List_map({ (generated_record: Generated_atDocsLine_rawBefore<List_List<String>, String>) in generated_record.atDocsLine }, moduleDocumentationParsed.whileAtDocsLines)
        }
    let generated_localReturnResult_argument0_right_letResult_declarationResult: Print_Print =
        switch syntaxModule.declarations {
        case List_List.List_Empty:
            Print_empty
        case let List_List.List_Cons(declaration0, declaration1Up):
            switch ElmSyntaxPrintDefunctionalized_commentsAfter(ElmSyntaxNode_range(ElmSyntaxPrintDefunctionalized_listFilledLast(declaration0, declaration1Up)).end, generated_let_declarationResult_commentsAndPortDocumentationComments.remainingComments) {
            case List_List.List_Empty:
                Print_empty
            case let List_List.List_Cons(comment0, comment1Up):
                Print_followedBy(ElmSyntaxPrintDefunctionalized_moduleLevelComments(List_cons(comment0, comment1Up)), ElmSyntaxPrintDefunctionalized_printLinebreakLinebreakLinebreak)
            }
        }
    let generated_localReturnResult_argument0_right_left_left_left_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_commentsBeforeDeclarations {
        case List_List.List_Empty:
            Print_empty
        case let List_List.List_Cons(comment0, comment1Up):
            ElmSyntaxPrintDefunctionalized_moduleLevelCommentsBeforeDeclaration(Generated_comment0_comment1Up.Record(comment0: comment0, comment1Up: comment1Up))
        }
    let generated_localReturnResult_argument0_right_left_left_left_left_left_letResult_declarationResult: Print_Print
    switch syntaxModule.imports {
    case List_List.List_Empty:
        generated_localReturnResult_argument0_right_left_left_left_left_left_letResult_declarationResult =
            switch generated_let_declarationResult_maybeModuleDocumentation {
            case Maybe_Maybe.Maybe_Nothing:
                ElmSyntaxPrintDefunctionalized_printLinebreakLinebreak
            case Maybe_Maybe.Maybe_Just(_):
                switch generated_let_declarationResult_commentsBeforeDeclarations {
                case List_List.List_Empty:
                    ElmSyntaxPrintDefunctionalized_printLinebreakLinebreak
                case List_List.List_Cons(_, _):
                    Print_empty
                }
            }
    case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(import0Range, import0), import1Up):
        let generated_localReturnResult_left_left_left_caseResult_case1_argument0_right_left_left_left_left_left_letResult_declarationResult: Print_Print =
            switch ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: import0Range.start, start: ElmSyntaxNode_range(syntaxModule.moduleDefinition).end), generated_let_declarationResult_commentsAndPortDocumentationComments.remainingComments) {
            case List_List.List_Empty:
                Print_linebreak
            case let List_List.List_Cons(comment0, comment1Up):
                Print_followedBy(ElmSyntaxPrintDefunctionalized_moduleLevelComments(List_cons(comment0, comment1Up)), ElmSyntaxPrintDefunctionalized_printLinebreakLinebreak)
            }
        generated_localReturnResult_argument0_right_left_left_left_left_left_letResult_declarationResult =
            Print_followedBy(ElmSyntaxPrintDefunctionalized_printLinebreakLinebreak, Print_followedBy(ElmSyntaxPrintDefunctionalized_imports(generated_let_declarationResult_commentsAndPortDocumentationComments.remainingComments, List_cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(import0Range, import0), import1Up)), Print_followedBy(Print_linebreak, generated_localReturnResult_left_left_left_caseResult_case1_argument0_right_left_left_left_left_left_letResult_declarationResult)))
    }
    let generated_localReturnResult_argument0_right_left_left_left_left_left_left_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_maybeModuleDocumentationParsed {
        case Maybe_Maybe.Maybe_Nothing:
            Print_empty
        case let Maybe_Maybe.Maybe_Just(moduleDocumentationParsed):
            Print_followedBy(ElmSyntaxPrintDefunctionalized_printModuleDocumentation(moduleDocumentationParsed), ElmSyntaxPrintDefunctionalized_printLinebreakLinebreak)
        }
    return Print_followedBy(generated_localReturnResult_argument0_right_letResult_declarationResult, Print_followedBy(Print_linebreak, Print_followedBy(ElmSyntaxPrintDefunctionalized_declarations(Generated_comments_portDocumentationComments_previousEnd.Record(comments: generated_let_declarationResult_commentsAndPortDocumentationComments.remainingComments, portDocumentationComments: generated_let_declarationResult_commentsAndPortDocumentationComments.portDocumentationComments, previousEnd: generated_let_declarationResult_lastSyntaxLocationBeforeDeclarations), syntaxModule.declarations), Print_followedBy(generated_localReturnResult_argument0_right_left_left_left_letResult_declarationResult, Print_followedBy(Print_linebreak, Print_followedBy(generated_localReturnResult_argument0_right_left_left_left_left_left_letResult_declarationResult, Print_followedBy(generated_localReturnResult_argument0_right_left_left_left_left_left_left_letResult_declarationResult, ElmSyntaxPrintDefunctionalized_moduleHeader(Generated_atDocsLines_comments.Record(atDocsLines: generated_let_declarationResult_atDocsLines, comments: generated_let_declarationResult_commentsAndPortDocumentationComments.remainingComments), ElmSyntaxNode_value(syntaxModule.moduleDefinition)))))))))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_parenthesized<a: Sendable>(_ printNotParenthesized: @Sendable @escaping (List_List<ElmSyntaxNode_Node<String>>) -> (ElmSyntaxNode_Node<a>) -> Print_Print, _ syntax: Generated_fullRange_notParenthesized<Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location>, ElmSyntaxNode_Node<a>>, _ syntaxComments: List_List<ElmSyntaxNode_Node<String>>) ->  Print_Print {
    let generated_let_declarationResult_notParenthesizedPrint: Print_Print =
        printNotParenthesized(syntaxComments)(syntax.notParenthesized)
    let generated_let_declarationResult_commentsBeforeInner: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(syntax.notParenthesized).start, start: syntax.fullRange.start), syntaxComments)
    let generated_let_declarationResult_commentsBeforeInnerCollapsible: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
        ElmSyntaxPrintDefunctionalized_collapsibleComments(generated_let_declarationResult_commentsBeforeInner)
    let generated_let_declarationResult_commentsAfterInner: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: syntax.fullRange.end, start: ElmSyntaxNode_range(syntax.notParenthesized).end), syntaxComments)
    let generated_let_declarationResult_commentsAfterInnerCollapsible: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
        ElmSyntaxPrintDefunctionalized_collapsibleComments(generated_let_declarationResult_commentsAfterInner)
    let generated_let_declarationResult_lineSpread: Print_LineSpread =
        Print_lineSpreadMergeWithStrict(generated_let_declarationResult_commentsAfterInnerCollapsible.lineSpread, Print_lineSpreadMergeWithStrict(generated_let_declarationResult_commentsBeforeInnerCollapsible.lineSpread, Print_lineSpread(generated_let_declarationResult_notParenthesizedPrint)))
    let generated_localReturnResult_argument0_right_argument1_argument0_right_left_left_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_commentsAfterInner {
        case List_List.List_Empty:
            Print_empty
        case List_List.List_Cons(_, _):
            Print_followedBy(generated_let_declarationResult_commentsAfterInnerCollapsible.print, Print_spaceOrLinebreakIndented(generated_let_declarationResult_lineSpread))
        }
    let generated_localReturnResult_left_argument1_argument0_right_left_left_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_commentsBeforeInner {
        case List_List.List_Empty:
            generated_let_declarationResult_notParenthesizedPrint
        case List_List.List_Cons(_, _):
            Print_followedBy(generated_let_declarationResult_notParenthesizedPrint, Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_declarationResult_lineSpread), generated_let_declarationResult_commentsBeforeInnerCollapsible.print))
        }
    return Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyParensClosing, Print_followedBy(Print_emptyOrLinebreakIndented(generated_let_declarationResult_lineSpread), Print_followedBy(Print_withIndentIncreasedBy(1.0, Print_followedBy(generated_localReturnResult_argument0_right_argument1_argument0_right_left_left_letResult_declarationResult, generated_localReturnResult_left_argument1_argument0_right_left_left_letResult_declarationResult)), ElmSyntaxPrintDefunctionalized_printExactlyParensOpening)))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_patternAs(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxAs: Generated_aliasNameNode_aliasedPattern<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) ->  Print_Print {
    let generated_let_declarationResult_namePrint: Print_Print =
        Print_exactly(ElmSyntaxNode_value(syntaxAs.aliasNameNode))
    let generated_let_declarationResult_commentsBeforeAliasName: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(syntaxAs.aliasNameNode).start, start: ElmSyntaxNode_range(syntaxAs.aliasedPattern).end), syntaxComments)
    let generated_let_declarationResult_commentsCollapsibleBeforeAliasName: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
        ElmSyntaxPrintDefunctionalized_collapsibleComments(generated_let_declarationResult_commentsBeforeAliasName)
    let generated_let_declarationResult_aliasedPatternPrint: Print_Print =
        ElmSyntaxPrintDefunctionalized_patternParenthesizedIfSpaceSeparated(syntaxComments, syntaxAs.aliasedPattern)
    let generated_let_declarationResult_lineSpread: Print_LineSpread =
        Print_lineSpreadMergeWith(
            { (generated_argument0_right_letDeclaration4_declarationResult_0: Unit) in
                let (_) =
                    generated_argument0_right_letDeclaration4_declarationResult_0
                return Print_lineSpread(generated_let_declarationResult_aliasedPatternPrint)
            },
            generated_let_declarationResult_commentsCollapsibleBeforeAliasName.lineSpread
        )
    let generated_localReturnResult_argument0_right_argument0_argument0_right_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_commentsBeforeAliasName {
        case List_List.List_Empty:
            generated_let_declarationResult_namePrint
        case List_List.List_Cons(_, _):
            Print_followedBy(generated_let_declarationResult_namePrint, Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_declarationResult_commentsCollapsibleBeforeAliasName.lineSpread), generated_let_declarationResult_commentsCollapsibleBeforeAliasName.print))
        }
    return Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(generated_localReturnResult_argument0_right_argument0_argument0_right_letResult_declarationResult, Print_spaceOrLinebreakIndented(generated_let_declarationResult_lineSpread))), Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyAs, Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_declarationResult_lineSpread), generated_let_declarationResult_aliasedPatternPrint)))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_patternCons(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxCons: Generated_head_tail<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>) ->  Print_Print {
    let generated_let_declarationResult_tailPatterns: List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>> =
        ElmSyntaxPrintDefunctionalized_patternConsExpand(syntaxCons.tail)
    let generated_let_declarationResult_tailPatternPrintsAndCommentsBeforeReverse: List_List<Print_Print> =
        List_foldl(
            { (tailPatternNode: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in
                { (soFar: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Print_Print>>) in
                    let generated_let_result_argument0_right_left_letDeclaration1_declarationResult_print: Print_Print =
                        ElmSyntaxPrintDefunctionalized_patternParenthesizedIfSpaceSeparated(syntaxComments, tailPatternNode)
                    let generated_let_result_argument0_right_left_letDeclaration1_declarationResult_tailPatternRange: ElmSyntaxRange_Range
                    switch tailPatternNode {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_tailPatternRange, _):
                        generated_let_result_argument0_right_left_letDeclaration1_declarationResult_tailPatternRange =
                            generated_destructured_tailPatternRange
                    }
                    let generated_localReturnResult_left_reverse_letResult_result_argument0_right_left_letDeclaration1_declarationResult: Print_Print
                    switch ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: generated_let_result_argument0_right_left_letDeclaration1_declarationResult_tailPatternRange.start, start: soFar.endLocation), syntaxComments) {
                    case List_List.List_Empty:
                        generated_localReturnResult_left_reverse_letResult_result_argument0_right_left_letDeclaration1_declarationResult =
                            generated_let_result_argument0_right_left_letDeclaration1_declarationResult_print
                    case let List_List.List_Cons(comment0, comment1Up):
                        let generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_left_letDeclaration1_declarationResult_commentsBefore: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
                            ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up))
                        generated_localReturnResult_left_reverse_letResult_result_argument0_right_left_letDeclaration1_declarationResult =
                            Print_followedBy(
                                generated_let_result_argument0_right_left_letDeclaration1_declarationResult_print,
                                Print_followedBy(
                                    Print_spaceOrLinebreakIndented(
                                        Print_lineSpreadMergeWith(
                                            { (generated_argument0_right_argument0_argument0_right_left_letResult_caseResult_case1_left_reverse_letResult_result_argument0_right_left_letDeclaration1_declarationResult_0: Unit) in
                                                let (_) =
                                                    generated_argument0_right_argument0_argument0_right_left_letResult_caseResult_case1_left_reverse_letResult_result_argument0_right_left_letDeclaration1_declarationResult_0
                                                return Print_lineSpread(generated_let_result_argument0_right_left_letDeclaration1_declarationResult_print)
                                            },
                                            generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_left_letDeclaration1_declarationResult_commentsBefore.lineSpread
                                        )
                                    ),
                                    generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_left_letDeclaration1_declarationResult_commentsBefore.print
                                )
                            )
                    }
                    return Generated_endLocation_reverse.Record(endLocation: generated_let_result_argument0_right_left_letDeclaration1_declarationResult_tailPatternRange.end, reverse: List_cons(generated_localReturnResult_left_reverse_letResult_result_argument0_right_left_letDeclaration1_declarationResult, soFar.reverse))
                }
            },
            Generated_endLocation_reverse.Record(endLocation: ElmSyntaxNode_range(syntaxCons.head).end, reverse: List_List.List_Empty),
            generated_let_declarationResult_tailPatterns
        ).reverse
    let generated_let_declarationResult_headPrint: Print_Print =
        ElmSyntaxPrintDefunctionalized_patternParenthesizedIfSpaceSeparated(syntaxComments, syntaxCons.head)
    let generated_let_declarationResult_lineSpread: Print_LineSpread =
        Print_lineSpreadMergeWith(
            { (generated_argument0_right_letDeclaration3_declarationResult_0: Unit) in
                let (_) =
                    generated_argument0_right_letDeclaration3_declarationResult_0
                return Print_lineSpreadListMapAndCombine(Print_lineSpread, generated_let_declarationResult_tailPatternPrintsAndCommentsBeforeReverse)
            },
            Print_lineSpread(generated_let_declarationResult_headPrint)
        )
    return Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(Print_listReverseAndMapAndIntersperseAndFlatten({ (tailPatternElementPrintWithCommentsBefore: Print_Print) in Print_followedBy(Print_withIndentIncreasedBy(3.0, tailPatternElementPrintWithCommentsBefore), ElmSyntaxPrintDefunctionalized_printExactlyColonColonSpace) }, Print_spaceOrLinebreakIndented(generated_let_declarationResult_lineSpread), generated_let_declarationResult_tailPatternPrintsAndCommentsBeforeReverse), Print_spaceOrLinebreakIndented(generated_let_declarationResult_lineSpread))), generated_let_declarationResult_headPrint)
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_patternConsExpand(_ generated_0: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) ->  List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>> {
    let fulRange: ElmSyntaxRange_Range
    let syntaxPattern: ElmSyntaxPattern_Pattern
    switch generated_0 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_fulRange, generated_destructured_syntaxPattern):
        fulRange =
            generated_destructured_fulRange
        syntaxPattern =
            generated_destructured_syntaxPattern
    }
    return
        switch syntaxPattern {
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_UnConsPattern(headPattern, tailPattern):
            List_cons(headPattern, ElmSyntaxPrintDefunctionalized_patternConsExpand(tailPattern))
        case ElmSyntaxPattern_Pattern.ElmSyntaxPattern_AllPattern:
            List_singleton(ElmSyntaxNode_Node.ElmSyntaxNode_Node(fulRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_AllPattern))
        case ElmSyntaxPattern_Pattern.ElmSyntaxPattern_UnitPattern:
            List_singleton(ElmSyntaxNode_Node.ElmSyntaxNode_Node(fulRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_UnitPattern))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_CharPattern(char):
            List_singleton(ElmSyntaxNode_Node.ElmSyntaxNode_Node(fulRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_CharPattern(char)))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_StringPattern(string):
            List_singleton(ElmSyntaxNode_Node.ElmSyntaxNode_Node(fulRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_StringPattern(string)))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_IntPattern(int):
            List_singleton(ElmSyntaxNode_Node.ElmSyntaxNode_Node(fulRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_IntPattern(int)))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_HexPattern(int):
            List_singleton(ElmSyntaxNode_Node.ElmSyntaxNode_Node(fulRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_HexPattern(int)))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_FloatPattern(float):
            List_singleton(ElmSyntaxNode_Node.ElmSyntaxNode_Node(fulRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_FloatPattern(float)))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_TuplePattern(parts):
            switch parts {
            case let List_List.List_Cons(part0, List_List.List_Cons(part1, List_List.List_Empty)):
                List_singleton(
                    ElmSyntaxNode_Node.ElmSyntaxNode_Node(
                        fulRange,
                        ElmSyntaxPattern_Pattern.ElmSyntaxPattern_TuplePattern(
                            Array_toList(
                                [ part0,
                                  part1
                                ]
                            )
                        )
                    )
                )
            case let List_List.List_Cons(part0, List_List.List_Cons(part1, List_List.List_Cons(part2, List_List.List_Empty))):
                List_singleton(
                    ElmSyntaxNode_Node.ElmSyntaxNode_Node(
                        fulRange,
                        ElmSyntaxPattern_Pattern.ElmSyntaxPattern_TuplePattern(
                            Array_toList(
                                [ part0,
                                  part1,
                                  part2
                                ]
                            )
                        )
                    )
                )
            case List_List.List_Empty:
                List_singleton(ElmSyntaxNode_Node.ElmSyntaxNode_Node(fulRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_UnitPattern))
            case let List_List.List_Cons(inParens, List_List.List_Empty):
                List_singleton(ElmSyntaxNode_Node.ElmSyntaxNode_Node(fulRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_TuplePattern(List_singleton(inParens))))
            case let List_List.List_Cons(part0, List_List.List_Cons(part1, List_List.List_Cons(part2, List_List.List_Cons(part3, part4Up)))):
                List_singleton(ElmSyntaxNode_Node.ElmSyntaxNode_Node(fulRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_TuplePattern(List_cons(part0, List_cons(part1, List_cons(part2, List_cons(part3, part4Up)))))))
            }
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_RecordPattern(fields):
            List_singleton(ElmSyntaxNode_Node.ElmSyntaxNode_Node(fulRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_RecordPattern(fields)))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ListPattern(elements):
            List_singleton(ElmSyntaxNode_Node.ElmSyntaxNode_Node(fulRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ListPattern(elements)))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_VarPattern(variableName):
            List_singleton(ElmSyntaxNode_Node.ElmSyntaxNode_Node(fulRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_VarPattern(variableName)))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_NamedPattern(reference, parameters):
            List_singleton(ElmSyntaxNode_Node.ElmSyntaxNode_Node(fulRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_NamedPattern(reference, parameters)))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_AsPattern(aliasedPattern, aliasName):
            List_singleton(ElmSyntaxNode_Node.ElmSyntaxNode_Node(fulRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_AsPattern(aliasedPattern, aliasName)))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ParenthesizedPattern(inParens):
            List_singleton(ElmSyntaxNode_Node.ElmSyntaxNode_Node(fulRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ParenthesizedPattern(inParens)))
        }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_patternIsSpaceSeparated(_ syntaxPattern: ElmSyntaxPattern_Pattern) ->  Bool {
    switch syntaxPattern {
    case ElmSyntaxPattern_Pattern.ElmSyntaxPattern_AllPattern:
        false
    case ElmSyntaxPattern_Pattern.ElmSyntaxPattern_UnitPattern:
        false
    case ElmSyntaxPattern_Pattern.ElmSyntaxPattern_VarPattern(_):
        false
    case ElmSyntaxPattern_Pattern.ElmSyntaxPattern_CharPattern(_):
        false
    case ElmSyntaxPattern_Pattern.ElmSyntaxPattern_StringPattern(_):
        false
    case ElmSyntaxPattern_Pattern.ElmSyntaxPattern_IntPattern(_):
        false
    case ElmSyntaxPattern_Pattern.ElmSyntaxPattern_HexPattern(_):
        false
    case ElmSyntaxPattern_Pattern.ElmSyntaxPattern_FloatPattern(_):
        false
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ParenthesizedPattern(ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, inParens)):
        ElmSyntaxPrintDefunctionalized_patternIsSpaceSeparated(inParens)
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_TuplePattern(parts):
        switch parts {
        case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, inParens), List_List.List_Empty):
            ElmSyntaxPrintDefunctionalized_patternIsSpaceSeparated(inParens)
        case List_List.List_Empty:
            false
        case List_List.List_Cons(_, List_List.List_Cons(_, List_List.List_Empty)):
            false
        case List_List.List_Cons(_, List_List.List_Cons(_, List_List.List_Cons(_, List_List.List_Empty))):
            false
        case List_List.List_Cons(_, List_List.List_Cons(_, List_List.List_Cons(_, List_List.List_Cons(_, _)))):
            false
        }
    case ElmSyntaxPattern_Pattern.ElmSyntaxPattern_RecordPattern(_):
        false
    case ElmSyntaxPattern_Pattern.ElmSyntaxPattern_UnConsPattern(_, _):
        true
    case ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ListPattern(_):
        false
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_NamedPattern(_, argumentPatterns):
        switch argumentPatterns {
        case List_List.List_Empty:
            false
        case List_List.List_Cons(_, _):
            true
        }
    case ElmSyntaxPattern_Pattern.ElmSyntaxPattern_AsPattern(_, _):
        true
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_patternList(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxList: Generated_elements_fullRange<List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>, ElmSyntaxRange_Range>) ->  Print_Print {
    let generated_localReturnResult_declarationResult: Print_Print
    switch syntaxList.elements {
    case List_List.List_Empty:
        let generated_localReturnResult_argument0_right_caseResult_case0_declarationResult: Print_Print
        switch ElmSyntaxPrintDefunctionalized_commentsInRange(syntaxList.fullRange, syntaxComments) {
        case List_List.List_Empty:
            generated_localReturnResult_argument0_right_caseResult_case0_declarationResult =
                ElmSyntaxPrintDefunctionalized_printExactlySquareClosing
        case let List_List.List_Cons(comment0, comment1Up):
            let generated_let_caseResult_case1_argument0_right_caseResult_case0_declarationResult_commentsCollapsed: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
                ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up))
            generated_localReturnResult_argument0_right_caseResult_case0_declarationResult =
                Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlySquareClosing, Print_followedBy(Print_emptyOrLinebreakIndented(generated_let_caseResult_case1_argument0_right_caseResult_case0_declarationResult_commentsCollapsed.lineSpread), Print_withIndentIncreasedBy(1.0, generated_let_caseResult_case1_argument0_right_caseResult_case0_declarationResult_commentsCollapsed.print)))
        }
        generated_localReturnResult_declarationResult =
            Print_followedBy(generated_localReturnResult_argument0_right_caseResult_case0_declarationResult, ElmSyntaxPrintDefunctionalized_printExactlySquareOpening)
    case let List_List.List_Cons(element0, element1Up):
        let generated_let_caseResult_case1_declarationResult_elementPrintsWithCommentsBefore: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Print_Print>> =
            List_foldl(
                { (elementNode: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in
                    { (soFar: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Print_Print>>) in
                        let generated_let_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_elementPrint: Print_Print =
                            ElmSyntaxPrintDefunctionalized_patternNotParenthesized(syntaxComments, elementNode)
                        let generated_let_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_elementRange: ElmSyntaxRange_Range
                        switch elementNode {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_elementRange, _):
                            generated_let_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_elementRange =
                                generated_destructured_elementRange
                        }
                        let generated_localReturnResult_left_reverse_letResult_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult: Print_Print
                        switch ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: generated_let_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_elementRange.start, start: soFar.endLocation), syntaxComments) {
                        case List_List.List_Empty:
                            generated_localReturnResult_left_reverse_letResult_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult =
                                generated_let_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_elementPrint
                        case let List_List.List_Cons(comment0, comment1Up):
                            let generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_commentsBeforeElement: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
                                ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up))
                            generated_localReturnResult_left_reverse_letResult_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult =
                                Print_followedBy(
                                    generated_let_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_elementPrint,
                                    Print_followedBy(
                                        Print_spaceOrLinebreakIndented(
                                            Print_lineSpreadMergeWith(
                                                { (generated_argument0_right_argument0_argument0_right_left_letResult_caseResult_case1_left_reverse_letResult_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_0: Unit) in
                                                    let (_) =
                                                        generated_argument0_right_argument0_argument0_right_left_letResult_caseResult_case1_left_reverse_letResult_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_0
                                                    return Print_lineSpread(generated_let_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_elementPrint)
                                                },
                                                generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_commentsBeforeElement.lineSpread
                                            )
                                        ),
                                        generated_let_caseResult_case1_left_reverse_letResult_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_commentsBeforeElement.print
                                    )
                                )
                        }
                        return Generated_endLocation_reverse.Record(endLocation: generated_let_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_elementRange.end, reverse: List_cons(generated_localReturnResult_left_reverse_letResult_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult, soFar.reverse))
                    }
                },
                Generated_endLocation_reverse.Record(endLocation: syntaxList.fullRange.start, reverse: List_List.List_Empty),
                List_cons(element0, element1Up)
            )
        let generated_let_caseResult_case1_declarationResult_commentsAfterElements: Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>> =
            switch ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: syntaxList.fullRange.end, start: generated_let_caseResult_case1_declarationResult_elementPrintsWithCommentsBefore.endLocation), syntaxComments) {
            case List_List.List_Empty:
                Maybe_Maybe.Maybe_Nothing
            case let List_List.List_Cons(comment0, comment1Up):
                Maybe_Maybe.Maybe_Just(ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up)))
            }
        let generated_let_caseResult_case1_declarationResult_lineSpread: Print_LineSpread =
            Print_lineSpreadMergeWith(
                { (generated_argument0_right_letDeclaration2_caseResult_case1_declarationResult_0: Unit) in
                    let (_) =
                        generated_argument0_right_letDeclaration2_caseResult_case1_declarationResult_0
                    return ElmSyntaxPrintDefunctionalized_maybeLineSpread({ (generated_record: Generated_lineSpread_print<Print_LineSpread, Print_Print>) in generated_record.lineSpread }, generated_let_caseResult_case1_declarationResult_commentsAfterElements)
                },
                Print_lineSpreadListMapAndCombine(Print_lineSpread, generated_let_caseResult_case1_declarationResult_elementPrintsWithCommentsBefore.reverse)
            )
        let generated_localReturnResult_argument0_right_left_letResult_caseResult_case1_declarationResult: Print_Print =
            switch generated_let_caseResult_case1_declarationResult_commentsAfterElements {
            case Maybe_Maybe.Maybe_Nothing:
                Print_spaceOrLinebreakIndented(generated_let_caseResult_case1_declarationResult_lineSpread)
            case let Maybe_Maybe.Maybe_Just(commentsCollapsibleAfterElements):
                Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_caseResult_case1_declarationResult_lineSpread), Print_withIndentIncreasedBy(2.0, Print_followedBy(commentsCollapsibleAfterElements.print, Print_spaceOrLinebreakIndented(generated_let_caseResult_case1_declarationResult_lineSpread))))
            }
        generated_localReturnResult_declarationResult =
            Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlySquareClosing, Print_followedBy(generated_localReturnResult_argument0_right_left_letResult_caseResult_case1_declarationResult, Print_followedBy(Print_listReverseAndMapAndIntersperseAndFlatten({ (elementPrintWithCommentsBefore: Print_Print) in Print_withIndentIncreasedBy(2.0, elementPrintWithCommentsBefore) }, Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyCommaSpace, Print_emptyOrLinebreakIndented(generated_let_caseResult_case1_declarationResult_lineSpread)), generated_let_caseResult_case1_declarationResult_elementPrintsWithCommentsBefore.reverse), ElmSyntaxPrintDefunctionalized_printExactlySquareOpeningSpace)))
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_patternNotParenthesized(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ generated_1: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) ->  Print_Print {
    let fullRange: ElmSyntaxRange_Range
    let syntaxPattern: ElmSyntaxPattern_Pattern
    switch generated_1 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_fullRange, generated_destructured_syntaxPattern):
        fullRange =
            generated_destructured_fullRange
        syntaxPattern =
            generated_destructured_syntaxPattern
    }
    let generated_localReturnResult_declarationResult: Print_Print
    switch syntaxPattern {
    case ElmSyntaxPattern_Pattern.ElmSyntaxPattern_AllPattern:
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_printExactlyUnderscore
    case ElmSyntaxPattern_Pattern.ElmSyntaxPattern_UnitPattern:
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_printExactlyParensOpeningParensClosed
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_VarPattern(name):
        generated_localReturnResult_declarationResult =
            Print_exactly(name)
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_CharPattern(char):
        generated_localReturnResult_declarationResult =
            Print_exactly(ElmSyntaxPrintDefunctionalized_charLiteral(char))
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_StringPattern(string):
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_stringLiteral(ElmSyntaxNode_Node.ElmSyntaxNode_Node(fullRange, string))
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_IntPattern(int):
        generated_localReturnResult_declarationResult =
            Print_exactly(ElmSyntaxPrintDefunctionalized_intLiteral(int))
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_HexPattern(int):
        generated_localReturnResult_declarationResult =
            Print_exactly(ElmSyntaxPrintDefunctionalized_hexLiteral(int))
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_FloatPattern(float):
        generated_localReturnResult_declarationResult =
            Print_exactly(String_fromFloat(float))
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ParenthesizedPattern(inParens):
        let generated_let_caseResult_case8_declarationResult_commentsBeforeInParens: List_List<String> =
            ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(inParens).start, start: fullRange.start), syntaxComments)
        let generated_let_caseResult_case8_declarationResult_commentsAfterInParens: List_List<String> =
            ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: fullRange.end, start: ElmSyntaxNode_range(inParens).end), syntaxComments)
        generated_localReturnResult_declarationResult =
            switch Tuple.Tuple(generated_let_caseResult_case8_declarationResult_commentsBeforeInParens, generated_let_caseResult_case8_declarationResult_commentsAfterInParens) {
            case Tuple.Tuple(List_List.List_Empty, List_List.List_Empty):
                ElmSyntaxPrintDefunctionalized_patternNotParenthesized(syntaxComments, inParens)
            case _:
                ElmSyntaxPrintDefunctionalized_parenthesized({ (generated_argument0_caseResult_case1_letResult_caseResult_case8_declarationResult_0: List_List<ElmSyntaxNode_Node<String>>) in { (generated_argument0_caseResult_case1_letResult_caseResult_case8_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in ElmSyntaxPrintDefunctionalized_patternNotParenthesized(generated_argument0_caseResult_case1_letResult_caseResult_case8_declarationResult_0, generated_argument0_caseResult_case1_letResult_caseResult_case8_declarationResult_1) } }, Generated_fullRange_notParenthesized.Record(fullRange: fullRange, notParenthesized: ElmSyntaxPrintDefunctionalized_patternToNotParenthesized(inParens)), syntaxComments)
            }
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_TuplePattern(parts):
        let generated_localReturnResult_caseResult_case9_declarationResult: Print_Print
        switch parts {
        case let List_List.List_Cons(part0, List_List.List_Cons(part1, List_List.List_Empty)):
            generated_localReturnResult_caseResult_case9_declarationResult =
                ElmSyntaxPrintDefunctionalized_tuple(Generated_lineSpreadMinimum_printPartNotParenthesized.Record(lineSpreadMinimum: Print_LineSpread.Print_SingleLine, printPartNotParenthesized: { (generated_printPartNotParenthesized_argument0_right_caseResult_case0_caseResult_case9_declarationResult_0: List_List<ElmSyntaxNode_Node<String>>) in { (generated_printPartNotParenthesized_argument0_right_caseResult_case0_caseResult_case9_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in ElmSyntaxPrintDefunctionalized_patternNotParenthesized(generated_printPartNotParenthesized_argument0_right_caseResult_case0_caseResult_case9_declarationResult_0, generated_printPartNotParenthesized_argument0_right_caseResult_case0_caseResult_case9_declarationResult_1) } }), syntaxComments, Generated_fullRange_part0_part1.Record(fullRange: fullRange, part0: part0, part1: part1))
        case let List_List.List_Cons(part0, List_List.List_Cons(part1, List_List.List_Cons(part2, List_List.List_Empty))):
            generated_localReturnResult_caseResult_case9_declarationResult =
                ElmSyntaxPrintDefunctionalized_triple(Generated_lineSpreadMinimum_printPartNotParenthesized.Record(lineSpreadMinimum: Print_LineSpread.Print_SingleLine, printPartNotParenthesized: { (generated_printPartNotParenthesized_argument0_right_caseResult_case1_caseResult_case9_declarationResult_0: List_List<ElmSyntaxNode_Node<String>>) in { (generated_printPartNotParenthesized_argument0_right_caseResult_case1_caseResult_case9_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in ElmSyntaxPrintDefunctionalized_patternNotParenthesized(generated_printPartNotParenthesized_argument0_right_caseResult_case1_caseResult_case9_declarationResult_0, generated_printPartNotParenthesized_argument0_right_caseResult_case1_caseResult_case9_declarationResult_1) } }), syntaxComments, Generated_fullRange_part0_part1_part2.Record(fullRange: fullRange, part0: part0, part1: part1, part2: part2))
        case List_List.List_Empty:
            generated_localReturnResult_caseResult_case9_declarationResult =
                ElmSyntaxPrintDefunctionalized_printExactlyParensOpeningParensClosed
        case let List_List.List_Cons(inParens, List_List.List_Empty):
            let generated_let_caseResult_case3_caseResult_case9_declarationResult_commentsBeforeInParens: List_List<String> =
                ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(inParens).start, start: fullRange.start), syntaxComments)
            let generated_let_caseResult_case3_caseResult_case9_declarationResult_commentsAfterInParens: List_List<String> =
                ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: fullRange.end, start: ElmSyntaxNode_range(inParens).end), syntaxComments)
            generated_localReturnResult_caseResult_case9_declarationResult =
                switch Tuple.Tuple(generated_let_caseResult_case3_caseResult_case9_declarationResult_commentsBeforeInParens, generated_let_caseResult_case3_caseResult_case9_declarationResult_commentsAfterInParens) {
                case Tuple.Tuple(List_List.List_Empty, List_List.List_Empty):
                    ElmSyntaxPrintDefunctionalized_patternNotParenthesized(syntaxComments, inParens)
                case _:
                    ElmSyntaxPrintDefunctionalized_parenthesized({ (generated_argument0_caseResult_case1_letResult_caseResult_case3_caseResult_case9_declarationResult_0: List_List<ElmSyntaxNode_Node<String>>) in { (generated_argument0_caseResult_case1_letResult_caseResult_case3_caseResult_case9_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in ElmSyntaxPrintDefunctionalized_patternNotParenthesized(generated_argument0_caseResult_case1_letResult_caseResult_case3_caseResult_case9_declarationResult_0, generated_argument0_caseResult_case1_letResult_caseResult_case3_caseResult_case9_declarationResult_1) } }, Generated_fullRange_notParenthesized.Record(fullRange: fullRange, notParenthesized: ElmSyntaxPrintDefunctionalized_patternToNotParenthesized(inParens)), syntaxComments)
                }
        case let List_List.List_Cons(part0, List_List.List_Cons(part1, List_List.List_Cons(part2, List_List.List_Cons(part3, part4Up)))):
            generated_localReturnResult_caseResult_case9_declarationResult =
                ElmSyntaxPrintDefunctionalized_invalidNTuple({ (generated_argument0_caseResult_case4_caseResult_case9_declarationResult_0: List_List<ElmSyntaxNode_Node<String>>) in { (generated_argument0_caseResult_case4_caseResult_case9_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in ElmSyntaxPrintDefunctionalized_patternNotParenthesized(generated_argument0_caseResult_case4_caseResult_case9_declarationResult_0, generated_argument0_caseResult_case4_caseResult_case9_declarationResult_1) } }, syntaxComments, Generated_fullRange_part0_part1_part2_part3_part4Up.Record(fullRange: fullRange, part0: part0, part1: part1, part2: part2, part3: part3, part4Up: part4Up))
        }
        generated_localReturnResult_declarationResult =
            generated_localReturnResult_caseResult_case9_declarationResult
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_RecordPattern(fields):
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_patternRecord(syntaxComments, Generated_fields_fullRange.Record(fields: fields, fullRange: fullRange))
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_UnConsPattern(headPattern, tailPattern):
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_patternCons(syntaxComments, Generated_head_tail.Record(head: headPattern, tail: tailPattern))
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ListPattern(elementPatterns):
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_patternList(syntaxComments, Generated_elements_fullRange.Record(elements: elementPatterns, fullRange: fullRange))
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_NamedPattern(syntaxQualifiedNameRef, argumentPatterns):
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_construct(Generated_lineSpreadMinimum_printArgumentParenthesizedIfSpaceSeparated.Record(lineSpreadMinimum: Print_LineSpread.Print_SingleLine, printArgumentParenthesizedIfSpaceSeparated: { (generated_printArgumentParenthesizedIfSpaceSeparated_argument0_caseResult_case13_declarationResult_0: List_List<ElmSyntaxNode_Node<String>>) in { (generated_printArgumentParenthesizedIfSpaceSeparated_argument0_caseResult_case13_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in ElmSyntaxPrintDefunctionalized_patternParenthesizedIfSpaceSeparated(generated_printArgumentParenthesizedIfSpaceSeparated_argument0_caseResult_case13_declarationResult_0, generated_printArgumentParenthesizedIfSpaceSeparated_argument0_caseResult_case13_declarationResult_1) } }), syntaxComments, Generated_arguments_fullRange_start.Record(arguments: argumentPatterns, fullRange: fullRange, start: ElmSyntaxPrintDefunctionalized_qualifiedReference(Generated_qualification_unqualified.Record(qualification: syntaxQualifiedNameRef.moduleName, unqualified: syntaxQualifiedNameRef.name))))
    case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_AsPattern(aliasedPattern, aliasNameNode):
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_patternAs(syntaxComments, Generated_aliasNameNode_aliasedPattern.Record(aliasNameNode: aliasNameNode, aliasedPattern: aliasedPattern))
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_patternParenthesized(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ patternNode: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) ->  Print_Print {
    ElmSyntaxPrintDefunctionalized_parenthesized({ (generated_argument0_declarationResult_0: List_List<ElmSyntaxNode_Node<String>>) in { (generated_argument0_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) in ElmSyntaxPrintDefunctionalized_patternNotParenthesized(generated_argument0_declarationResult_0, generated_argument0_declarationResult_1) } }, Generated_fullRange_notParenthesized.Record(fullRange: ElmSyntaxNode_range(patternNode), notParenthesized: ElmSyntaxPrintDefunctionalized_patternToNotParenthesized(patternNode)), syntaxComments)
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_patternParenthesizedIfSpaceSeparated(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxPattern: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) ->  Print_Print {
    if ElmSyntaxPrintDefunctionalized_patternIsSpaceSeparated(ElmSyntaxNode_value(syntaxPattern)) {
        ElmSyntaxPrintDefunctionalized_patternParenthesized(syntaxComments, syntaxPattern)
    } else {
        ElmSyntaxPrintDefunctionalized_patternNotParenthesized(syntaxComments, syntaxPattern)
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_patternRecord(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxRecord: Generated_fields_fullRange<List_List<ElmSyntaxNode_Node<String>>, ElmSyntaxRange_Range>) ->  Print_Print {
    let generated_localReturnResult_declarationResult: Print_Print
    switch syntaxRecord.fields {
    case List_List.List_Empty:
        let generated_localReturnResult_argument0_right_caseResult_case0_declarationResult: Print_Print
        switch ElmSyntaxPrintDefunctionalized_commentsInRange(syntaxRecord.fullRange, syntaxComments) {
        case List_List.List_Empty:
            generated_localReturnResult_argument0_right_caseResult_case0_declarationResult =
                ElmSyntaxPrintDefunctionalized_printExactlyCurlyClosing
        case let List_List.List_Cons(comment0, comment1Up):
            let generated_let_caseResult_case1_argument0_right_caseResult_case0_declarationResult_commentsCollapsed: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
                ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up))
            generated_localReturnResult_argument0_right_caseResult_case0_declarationResult =
                Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyCurlyClosing, Print_followedBy(Print_emptyOrLinebreakIndented(generated_let_caseResult_case1_argument0_right_caseResult_case0_declarationResult_commentsCollapsed.lineSpread), Print_withIndentIncreasedBy(1.0, generated_let_caseResult_case1_argument0_right_caseResult_case0_declarationResult_commentsCollapsed.print)))
        }
        generated_localReturnResult_declarationResult =
            Print_followedBy(generated_localReturnResult_argument0_right_caseResult_case0_declarationResult, ElmSyntaxPrintDefunctionalized_printExactlyCurlyOpening)
    case let List_List.List_Cons(field0, field1Up):
        let generated_let_caseResult_case1_declarationResult_fieldPrintsWithCommentsBefore: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Print_Print>> =
            List_foldl(
                { (generated_argument0_right_letDeclaration0_caseResult_case1_declarationResult_0: ElmSyntaxNode_Node<String>) in
                    { (soFar: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Print_Print>>) in
                        let elementRange: ElmSyntaxRange_Range
                        let fieldName: String
                        switch generated_argument0_right_letDeclaration0_caseResult_case1_declarationResult_0 {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_elementRange, generated_destructured_fieldName):
                            elementRange =
                                generated_destructured_elementRange
                            fieldName =
                                generated_destructured_fieldName
                        }
                        let generated_localReturnResult_left_reverse_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult: Print_Print
                        switch ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: elementRange.start, start: soFar.endLocation), syntaxComments) {
                        case List_List.List_Empty:
                            generated_localReturnResult_left_reverse_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult =
                                Print_exactly(fieldName)
                        case let List_List.List_Cons(comment0, comment1Up):
                            let generated_let_caseResult_case1_left_reverse_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_commentsBefore: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
                                ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up))
                            generated_localReturnResult_left_reverse_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult =
                                Print_followedBy(Print_exactly(fieldName), Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_caseResult_case1_left_reverse_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_commentsBefore.lineSpread), generated_let_caseResult_case1_left_reverse_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_commentsBefore.print))
                        }
                        return Generated_endLocation_reverse.Record(endLocation: elementRange.end, reverse: List_cons(generated_localReturnResult_left_reverse_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult, soFar.reverse))
                    }
                },
                Generated_endLocation_reverse.Record(endLocation: syntaxRecord.fullRange.start, reverse: List_List.List_Empty),
                List_cons(field0, field1Up)
            )
        let generated_let_caseResult_case1_declarationResult_maybeCommentsAfterFields: Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>> =
            switch ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: syntaxRecord.fullRange.end, start: generated_let_caseResult_case1_declarationResult_fieldPrintsWithCommentsBefore.endLocation), syntaxComments) {
            case List_List.List_Empty:
                Maybe_Maybe.Maybe_Nothing
            case let List_List.List_Cons(comment0, comment1Up):
                Maybe_Maybe.Maybe_Just(ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up)))
            }
        let generated_let_caseResult_case1_declarationResult_lineSpread: Print_LineSpread =
            Print_lineSpreadMergeWith(
                { (generated_argument0_right_letDeclaration2_caseResult_case1_declarationResult_0: Unit) in
                    let (_) =
                        generated_argument0_right_letDeclaration2_caseResult_case1_declarationResult_0
                    return ElmSyntaxPrintDefunctionalized_maybeLineSpread({ (generated_record: Generated_lineSpread_print<Print_LineSpread, Print_Print>) in generated_record.lineSpread }, generated_let_caseResult_case1_declarationResult_maybeCommentsAfterFields)
                },
                Print_lineSpreadListMapAndCombine(Print_lineSpread, generated_let_caseResult_case1_declarationResult_fieldPrintsWithCommentsBefore.reverse)
            )
        let generated_localReturnResult_argument0_right_left_letResult_caseResult_case1_declarationResult: Print_Print =
            switch generated_let_caseResult_case1_declarationResult_maybeCommentsAfterFields {
            case Maybe_Maybe.Maybe_Nothing:
                Print_spaceOrLinebreakIndented(generated_let_caseResult_case1_declarationResult_lineSpread)
            case let Maybe_Maybe.Maybe_Just(commentsAfterFields):
                Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_caseResult_case1_declarationResult_lineSpread), Print_withIndentIncreasedBy(2.0, Print_followedBy(commentsAfterFields.print, Print_spaceOrLinebreakIndented(generated_let_caseResult_case1_declarationResult_lineSpread))))
            }
        generated_localReturnResult_declarationResult =
            Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyCurlyClosing, Print_followedBy(generated_localReturnResult_argument0_right_left_letResult_caseResult_case1_declarationResult, Print_followedBy(Print_listReverseAndMapAndIntersperseAndFlatten({ (fieldPrintWithComments: Print_Print) in Print_withIndentIncreasedBy(2.0, fieldPrintWithComments) }, Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyCommaSpace, Print_emptyOrLinebreakIndented(generated_let_caseResult_case1_declarationResult_lineSpread)), generated_let_caseResult_case1_declarationResult_fieldPrintsWithCommentsBefore.reverse), ElmSyntaxPrintDefunctionalized_printExactlyCurlyOpeningSpace)))
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_patternToNotParenthesized(_ generated_0: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) ->  ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern> {
    let fullRange: ElmSyntaxRange_Range
    let syntaxPattern: ElmSyntaxPattern_Pattern
    switch generated_0 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_fullRange, generated_destructured_syntaxPattern):
        fullRange =
            generated_destructured_fullRange
        syntaxPattern =
            generated_destructured_syntaxPattern
    }
    return
        switch syntaxPattern {
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ParenthesizedPattern(inParens):
            ElmSyntaxPrintDefunctionalized_patternToNotParenthesized(inParens)
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_TuplePattern(parts):
            switch parts {
            case let List_List.List_Cons(inParens, List_List.List_Empty):
                ElmSyntaxPrintDefunctionalized_patternToNotParenthesized(inParens)
            case let List_List.List_Cons(part0, List_List.List_Cons(part1, List_List.List_Empty)):
                ElmSyntaxNode_Node.ElmSyntaxNode_Node(
                    fullRange,
                    ElmSyntaxPattern_Pattern.ElmSyntaxPattern_TuplePattern(
                        Array_toList(
                            [ part0,
                              part1
                            ]
                        )
                    )
                )
            case let List_List.List_Cons(part0, List_List.List_Cons(part1, List_List.List_Cons(part2, List_List.List_Empty))):
                ElmSyntaxNode_Node.ElmSyntaxNode_Node(
                    fullRange,
                    ElmSyntaxPattern_Pattern.ElmSyntaxPattern_TuplePattern(
                        Array_toList(
                            [ part0,
                              part1,
                              part2
                            ]
                        )
                    )
                )
            case List_List.List_Empty:
                ElmSyntaxNode_Node.ElmSyntaxNode_Node(fullRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_UnitPattern)
            case let List_List.List_Cons(part0, List_List.List_Cons(part1, List_List.List_Cons(part2, List_List.List_Cons(part3, part4Up)))):
                ElmSyntaxNode_Node.ElmSyntaxNode_Node(fullRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_TuplePattern(List_cons(part0, List_cons(part1, List_cons(part2, List_cons(part3, part4Up))))))
            }
        case ElmSyntaxPattern_Pattern.ElmSyntaxPattern_AllPattern:
            ElmSyntaxNode_Node.ElmSyntaxNode_Node(fullRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_AllPattern)
        case ElmSyntaxPattern_Pattern.ElmSyntaxPattern_UnitPattern:
            ElmSyntaxNode_Node.ElmSyntaxNode_Node(fullRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_UnitPattern)
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_VarPattern(name):
            ElmSyntaxNode_Node.ElmSyntaxNode_Node(fullRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_VarPattern(name))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_CharPattern(char):
            ElmSyntaxNode_Node.ElmSyntaxNode_Node(fullRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_CharPattern(char))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_StringPattern(string):
            ElmSyntaxNode_Node.ElmSyntaxNode_Node(fullRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_StringPattern(string))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_IntPattern(int):
            ElmSyntaxNode_Node.ElmSyntaxNode_Node(fullRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_IntPattern(int))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_HexPattern(int):
            ElmSyntaxNode_Node.ElmSyntaxNode_Node(fullRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_HexPattern(int))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_FloatPattern(float):
            ElmSyntaxNode_Node.ElmSyntaxNode_Node(fullRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_FloatPattern(float))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_RecordPattern(fields):
            ElmSyntaxNode_Node.ElmSyntaxNode_Node(fullRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_RecordPattern(fields))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_UnConsPattern(headPattern, tailPattern):
            ElmSyntaxNode_Node.ElmSyntaxNode_Node(fullRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_UnConsPattern(headPattern, tailPattern))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ListPattern(elementPatterns):
            ElmSyntaxNode_Node.ElmSyntaxNode_Node(fullRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ListPattern(elementPatterns))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_NamedPattern(syntaxQualifiedNameRef, argumentPatterns):
            ElmSyntaxNode_Node.ElmSyntaxNode_Node(fullRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_NamedPattern(syntaxQualifiedNameRef, argumentPatterns))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_AsPattern(aliasedPattern, aliasNameNode):
            ElmSyntaxNode_Node.ElmSyntaxNode_Node(fullRange, ElmSyntaxPattern_Pattern.ElmSyntaxPattern_AsPattern(aliasedPattern, aliasNameNode))
        }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_printDocumentationComment(_ documentationCommentIncludingOpeningAndClosingTokens: String) ->  Print_Print {
    let generated_let_declarationResult_contentLines: List_List<String> =
        List_map(String_trimRight, String_lines(String_trim(String_dropRight(2.0, String_dropLeft(3.0, documentationCommentIncludingOpeningAndClosingTokens)))))
    let generated_localReturnResult_letResult_declarationResult: Print_Print
    if List_all(String_isEmpty, generated_let_declarationResult_contentLines) {
        generated_localReturnResult_letResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_printDocumentationCommentEmpty
    } else {
        let generated_localReturnResult_argument0_right_onFalse_letResult_declarationResult: Print_Print =
            if List_any(String_isEmpty, generated_let_declarationResult_contentLines) {
                ElmSyntaxPrintDefunctionalized_linebreakFollowedByLinebreakFollowedByMinusCurlyBraceClosing
            } else {
                ElmSyntaxPrintDefunctionalized_linebreakFollowedByMinusCurlyBraceClosing
            }
        generated_localReturnResult_letResult_declarationResult =
            Print_followedBy(generated_localReturnResult_argument0_right_onFalse_letResult_declarationResult, Print_followedBy(Print_listMapAndIntersperseAndFlatten(Print_exactly, Print_linebreak, generated_let_declarationResult_contentLines), ElmSyntaxPrintDefunctionalized_printExactlyCurlyBraceOpeningMinusVerticalBar))
    }
    return generated_localReturnResult_letResult_declarationResult
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_printExpressionNegation(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ negated: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) ->  Print_Print {
    if ElmSyntaxPrintDefunctionalized_expressionIsBase10Zero(negated) {
        ElmSyntaxPrintDefunctionalized_printExactlyZero
    } else {
        if ElmSyntaxPrintDefunctionalized_expressionIsBase16Zero(negated) {
            ElmSyntaxPrintDefunctionalized_printExactlyZeroXZeroZero
        } else {
            switch ElmSyntaxPrintDefunctionalized_expressionToNotParenthesized(negated) {
            case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(doublyNegatedRange, ElmSyntaxExpression_Expression.ElmSyntaxExpression_Negation(doublyNegated)):
                Print_followedBy(ElmSyntaxPrintDefunctionalized_expressionParenthesized(syntaxComments, ElmSyntaxNode_Node.ElmSyntaxNode_Node(doublyNegatedRange, ElmSyntaxExpression_Expression.ElmSyntaxExpression_Negation(doublyNegated))), ElmSyntaxPrintDefunctionalized_printExactlyMinus)
            case let negatedNotNegationOrIntegerZero:
                Print_followedBy(ElmSyntaxPrintDefunctionalized_expressionParenthesizedIfSpaceSeparated(syntaxComments, negatedNotNegationOrIntegerZero), ElmSyntaxPrintDefunctionalized_printExactlyMinus)
            }
        }
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_printModuleDocumentation(_ moduleDocumentationBlocks: Generated_rawAfterAtDocsLines_whileAtDocsLines<String, List_List<Generated_atDocsLine_rawBefore<List_List<String>, String>>>) ->  Print_Print {
    let generated_let_declarationResult_content: String =
        String_trimRight(
            String_append(
                ElmSyntaxPrintDefunctionalized_listMapAndFlattenToString(
                    { (atDocsLineAndBefore: Generated_atDocsLine_rawBefore<List_List<String>, String>) in
                        let generated_localReturnResult_right_result_argument0_right_left_left_letDeclaration0_declarationResult: String =
                            switch atDocsLineAndBefore.atDocsLine {
                            case List_List.List_Empty:
                                ""
                            case let List_List.List_Cons(atDocsExpose0, atDocsExpose1Up):
                                String_append("@docs ", String_append(String_join(", ", List_cons(atDocsExpose0, atDocsExpose1Up)), "\n"))
                            }
                        return String_append(atDocsLineAndBefore.rawBefore, generated_localReturnResult_right_result_argument0_right_left_left_letDeclaration0_declarationResult)
                    },
                    moduleDocumentationBlocks.whileAtDocsLines
                ),
                moduleDocumentationBlocks.rawAfterAtDocsLines
            )
        )
    let generated_localReturnResult_left_right_argument0_letResult_declarationResult: String =
        if String_startsWith("@docs ", generated_let_declarationResult_content) {
            "\n\n"
        } else {
            " "
        }
    let generated_localReturnResult_right_right_right_argument0_letResult_declarationResult: String =
        if String_contains("\n", generated_let_declarationResult_content) {
            "\n\n-}"
        } else {
            "\n-}"
        }
    return Print_exactly(String_append("{-|", String_append(generated_localReturnResult_left_right_argument0_letResult_declarationResult, String_append(generated_let_declarationResult_content, generated_localReturnResult_right_right_right_argument0_letResult_declarationResult))))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_qualifiedReference(_ syntaxReference: Generated_qualification_unqualified<List_List<String>, String>) ->  String {
    switch syntaxReference.qualification {
    case List_List.List_Empty:
        syntaxReference.unqualified
    case let List_List.List_Cons(modulePartHead, modulePartTail):
        String_append(modulePartHead, String_append(ElmSyntaxPrintDefunctionalized_listMapAndFlattenToString({ (modulePart: String) in String_append(".", modulePart) }, modulePartTail), String_append(".", syntaxReference.unqualified)))
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_quotedCharToEscaped(_ character: UnicodeScalar) ->  String {
    switch character {
    case "'":
        "\\'"
    case "\\":
        "\\\\"
    case "\t":
        "\\t"
    case "\n":
        "\\n"
    case "\r":
        "\\u{000D}"
    case let otherCharacter:
        if ElmSyntaxPrintDefunctionalized_characterIsNotPrint(otherCharacter) {
            String_append("\\u{", String_append(ElmSyntaxPrintDefunctionalized_characterHex(otherCharacter), "}"))
        } else {
            String_fromChar(otherCharacter)
        }
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_rawSinceAtDocsEmptyFinishedBlocksEmpty<a__: Sendable>() ->  Generated_finishedBlocks_rawSinceAtDocs<List_List<a__>, String> {
    Generated_finishedBlocks_rawSinceAtDocs.Record(finishedBlocks: List_List.List_Empty, rawSinceAtDocs: "")
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_recordLiteral<fieldValue: Sendable>(_ fieldSpecific: Generated_nameValueSeparator_printValueNotParenthesized<String, @Sendable (List_List<ElmSyntaxNode_Node<String>>) -> (ElmSyntaxNode_Node<fieldValue>) -> Print_Print>, _ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxRecord: Generated_fields_fullRange<List_List<ElmSyntaxNode_Node<Tuple<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<fieldValue>>>>, ElmSyntaxRange_Range>) ->  Print_Print {
    let generated_localReturnResult_declarationResult: Print_Print
    switch syntaxRecord.fields {
    case List_List.List_Empty:
        let generated_localReturnResult_argument0_right_caseResult_case0_declarationResult: Print_Print
        switch ElmSyntaxPrintDefunctionalized_commentsInRange(syntaxRecord.fullRange, syntaxComments) {
        case List_List.List_Empty:
            generated_localReturnResult_argument0_right_caseResult_case0_declarationResult =
                ElmSyntaxPrintDefunctionalized_printExactlyCurlyClosing
        case let List_List.List_Cons(comment0, comment1Up):
            let generated_let_caseResult_case1_argument0_right_caseResult_case0_declarationResult_commentsCollapsed: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
                ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up))
            generated_localReturnResult_argument0_right_caseResult_case0_declarationResult =
                Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyCurlyClosing, Print_followedBy(Print_emptyOrLinebreakIndented(generated_let_caseResult_case1_argument0_right_caseResult_case0_declarationResult_commentsCollapsed.lineSpread), Print_withIndentIncreasedBy(1.0, generated_let_caseResult_case1_argument0_right_caseResult_case0_declarationResult_commentsCollapsed.print)))
        }
        generated_localReturnResult_declarationResult =
            Print_followedBy(generated_localReturnResult_argument0_right_caseResult_case0_declarationResult, ElmSyntaxPrintDefunctionalized_printExactlyCurlyOpening)
    case let List_List.List_Cons(field0, field1Up):
        @Sendable func generated_let_caseResult_case1_declarationResult_fieldPrintsAndComments() ->  Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Generated_maybeCommentsBeforeName_maybeCommentsBetweenNameAndValue_syntax_valuePrint<Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>>, Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>>, Tuple<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<fieldValue>>, Print_Print>>> {
            List_foldl(
                { (generated_argument0_right_letDeclaration0_caseResult_case1_declarationResult_0: ElmSyntaxNode_Node<Tuple<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<fieldValue>>>) in
                    { (soFar: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Generated_maybeCommentsBeforeName_maybeCommentsBetweenNameAndValue_syntax_valuePrint<Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>>, Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>>, Tuple<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<fieldValue>>, Print_Print>>>) in
                        let fieldNameRange: ElmSyntaxRange_Range
                        let fieldName: String
                        let fieldValueNode: ElmSyntaxNode_Node<fieldValue>
                        switch generated_argument0_right_letDeclaration0_caseResult_case1_declarationResult_0 {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, Tuple.Tuple(ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_fieldNameRange, generated_destructured_fieldName), generated_destructured_fieldValueNode)):
                            fieldNameRange =
                                generated_destructured_fieldNameRange
                            fieldName =
                                generated_destructured_fieldName
                            fieldValueNode =
                                generated_destructured_fieldValueNode
                        }
                        let generated_let_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_fieldValueRange: ElmSyntaxRange_Range
                        switch fieldValueNode {
                        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_fieldValueRange, _):
                            generated_let_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_fieldValueRange =
                                generated_destructured_fieldValueRange
                        }
                        let generated_let_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_commentsBetweenNameAndValue: List_List<String> =
                            ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: generated_let_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_fieldValueRange.start, start: fieldNameRange.start), syntaxComments)
                        let generated_let_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_commentsBeforeName: List_List<String> =
                            ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: fieldNameRange.start, start: soFar.endLocation), syntaxComments)
                        let generated_localReturnResult_maybeCommentsBeforeName_left_reverse_letResult_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult: Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>> =
                            switch generated_let_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_commentsBeforeName {
                            case List_List.List_Empty:
                                Maybe_Maybe.Maybe_Nothing
                            case let List_List.List_Cons(comment0, comment1Up):
                                Maybe_Maybe.Maybe_Just(ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up)))
                            }
                        let generated_localReturnResult_maybeCommentsBetweenNameAndValue_left_reverse_letResult_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult: Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>> =
                            switch generated_let_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_commentsBetweenNameAndValue {
                            case List_List.List_Empty:
                                Maybe_Maybe.Maybe_Nothing
                            case let List_List.List_Cons(comment0, comment1Up):
                                Maybe_Maybe.Maybe_Just(ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up)))
                            }
                        return Generated_endLocation_reverse.Record(endLocation: generated_let_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult_fieldValueRange.end, reverse: List_cons(Generated_maybeCommentsBeforeName_maybeCommentsBetweenNameAndValue_syntax_valuePrint.Record(maybeCommentsBeforeName: generated_localReturnResult_maybeCommentsBeforeName_left_reverse_letResult_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult, maybeCommentsBetweenNameAndValue: generated_localReturnResult_maybeCommentsBetweenNameAndValue_left_reverse_letResult_result_argument0_right_letDeclaration0_caseResult_case1_declarationResult, syntax: Tuple.Tuple(ElmSyntaxNode_Node.ElmSyntaxNode_Node(fieldNameRange, fieldName), fieldValueNode), valuePrint: fieldSpecific.printValueNotParenthesized(syntaxComments)(fieldValueNode)), soFar.reverse))
                    }
                },
                Generated_endLocation_reverse.Record(endLocation: syntaxRecord.fullRange.start, reverse: List_List.List_Empty),
                List_cons(field0, field1Up)
            )
        }
        let generated_let_caseResult_case1_declarationResult_commentsAfterFields: List_List<String> =
            ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: syntaxRecord.fullRange.end, start: generated_let_caseResult_case1_declarationResult_fieldPrintsAndComments().endLocation), syntaxComments)
        let generated_let_caseResult_case1_declarationResult_lineSpread: Print_LineSpread =
            Print_lineSpreadMergeWith(
                { (generated_argument0_right_letDeclaration2_caseResult_case1_declarationResult_0: Unit) in
                    let (_) =
                        generated_argument0_right_letDeclaration2_caseResult_case1_declarationResult_0
                    return
                        switch generated_let_caseResult_case1_declarationResult_commentsAfterFields {
                        case List_List.List_Empty:
                            Print_LineSpread.Print_SingleLine
                        case List_List.List_Cons(_, _):
                            Print_LineSpread.Print_MultipleLines
                        }
                },
                Print_lineSpreadMergeWith(
                    { (generated_argument0_right_left_letDeclaration2_caseResult_case1_declarationResult_0: Unit) in
                        let (_) =
                            generated_argument0_right_left_letDeclaration2_caseResult_case1_declarationResult_0
                        return
                            Print_lineSpreadListMapAndCombine(
                                { (field: Generated_maybeCommentsBeforeName_maybeCommentsBetweenNameAndValue_syntax_valuePrint<Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>>, Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>>, Tuple<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<fieldValue>>, Print_Print>) in
                                    Print_lineSpreadMergeWith(
                                        { (generated_argument0_right_result_argument0_right_result_argument0_right_left_letDeclaration2_caseResult_case1_declarationResult_0: Unit) in
                                            let (_) =
                                                generated_argument0_right_result_argument0_right_result_argument0_right_left_letDeclaration2_caseResult_case1_declarationResult_0
                                            return
                                                switch field.maybeCommentsBetweenNameAndValue {
                                                case Maybe_Maybe.Maybe_Nothing:
                                                    Print_LineSpread.Print_SingleLine
                                                case let Maybe_Maybe.Maybe_Just(commentsBetweenNameAndValue):
                                                    commentsBetweenNameAndValue.lineSpread
                                                }
                                        },
                                        Print_lineSpreadMergeWith(
                                            { (generated_argument0_right_left_result_argument0_right_result_argument0_right_left_letDeclaration2_caseResult_case1_declarationResult_0: Unit) in
                                                let (_) =
                                                    generated_argument0_right_left_result_argument0_right_result_argument0_right_left_letDeclaration2_caseResult_case1_declarationResult_0
                                                return
                                                    switch field.maybeCommentsBeforeName {
                                                    case Maybe_Maybe.Maybe_Nothing:
                                                        Print_LineSpread.Print_SingleLine
                                                    case let Maybe_Maybe.Maybe_Just(commentsBeforeName):
                                                        commentsBeforeName.lineSpread
                                                    }
                                            },
                                            Print_lineSpread(field.valuePrint)
                                        )
                                    )
                                },
                                generated_let_caseResult_case1_declarationResult_fieldPrintsAndComments().reverse
                            )
                    },
                    ElmSyntaxPrintDefunctionalized_lineSpreadInRange(syntaxRecord.fullRange)
                )
            )
        let generated_localReturnResult_argument0_right_left_letResult_caseResult_case1_declarationResult: Print_Print =
            switch generated_let_caseResult_case1_declarationResult_commentsAfterFields {
            case List_List.List_Empty:
                Print_spaceOrLinebreakIndented(generated_let_caseResult_case1_declarationResult_lineSpread)
            case let List_List.List_Cons(comment0, comment1Up):
                Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_caseResult_case1_declarationResult_lineSpread), Print_followedBy(ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up)), Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_caseResult_case1_declarationResult_lineSpread), Print_linebreak)))
            }
        generated_localReturnResult_declarationResult =
            Print_followedBy(
                ElmSyntaxPrintDefunctionalized_printExactlyCurlyClosing,
                Print_followedBy(
                    generated_localReturnResult_argument0_right_left_letResult_caseResult_case1_declarationResult,
                    Print_followedBy(
                        Print_listReverseAndMapAndIntersperseAndFlatten(
                            { (field: Generated_maybeCommentsBeforeName_maybeCommentsBetweenNameAndValue_syntax_valuePrint<Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>>, Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>>, Tuple<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<fieldValue>>, Print_Print>) in
                                let generated_let_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult_fieldNameRange: ElmSyntaxRange_Range
                                let generated_let_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult_fieldName: String
                                let generated_let_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult_fieldValue: ElmSyntaxNode_Node<fieldValue>
                                switch field.syntax {
                                case let Tuple.Tuple(ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_fieldNameRange, generated_destructured_fieldName), generated_destructured_fieldValue):
                                    generated_let_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult_fieldNameRange =
                                        generated_destructured_fieldNameRange
                                    generated_let_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult_fieldName =
                                        generated_destructured_fieldName
                                    generated_let_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult_fieldValue =
                                        generated_destructured_fieldValue
                                }
                                @Sendable func generated_let_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult_lineSpreadBetweenNameAndValueNotConsideringComments(_ generated_letDeclaration1_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult_0: Unit) ->  Print_LineSpread {
                                    let (_) =
                                        generated_letDeclaration1_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult_0
                                    return
                                        Print_lineSpreadMergeWith(
                                            { (generated_argument0_right_letDeclarationResult_letDeclaration1_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult_0: Unit) in
                                                let (_) =
                                                    generated_argument0_right_letDeclarationResult_letDeclaration1_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult_0
                                                return Print_lineSpread(field.valuePrint)
                                            },
                                            ElmSyntaxPrintDefunctionalized_lineSpreadInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(generated_let_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult_fieldValue).end, start: generated_let_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult_fieldNameRange.start))
                                        )
                                }
                                let generated_localReturnResult_left_argument0_argument0_right_letDeclaration2_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult: Print_Print =
                                    switch field.maybeCommentsBetweenNameAndValue {
                                    case Maybe_Maybe.Maybe_Nothing:
                                        Print_spaceOrLinebreakIndented(generated_let_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult_lineSpreadBetweenNameAndValueNotConsideringComments(Unit.Unit))
                                    case let Maybe_Maybe.Maybe_Just(commentsBetweenNameAndValue):
                                        Print_followedBy(
                                            Print_spaceOrLinebreakIndented(
                                                Print_lineSpreadMergeWith(
                                                    { (generated_argument0_right_argument0_argument0_right_caseResult_case1_left_argument0_argument0_right_letDeclaration2_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult_0: Unit) in
                                                        let (_) =
                                                            generated_argument0_right_argument0_argument0_right_caseResult_case1_left_argument0_argument0_right_letDeclaration2_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult_0
                                                        return Print_lineSpread(field.valuePrint)
                                                    },
                                                    commentsBetweenNameAndValue.lineSpread
                                                )
                                            ),
                                            Print_followedBy(commentsBetweenNameAndValue.print, Print_spaceOrLinebreakIndented(Print_lineSpreadMergeWith(generated_let_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult_lineSpreadBetweenNameAndValueNotConsideringComments, commentsBetweenNameAndValue.lineSpread)))
                                        )
                                    }
                                let generated_let_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult_nameSeparatorValuePrint: Print_Print =
                                    Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(field.valuePrint, generated_localReturnResult_left_argument0_argument0_right_letDeclaration2_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult)), Print_exactly(String_append(generated_let_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult_fieldName, String_append(" ", fieldSpecific.nameValueSeparator))))
                                let generated_localReturnResult_argument1_letResult_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult: Print_Print =
                                    switch field.maybeCommentsBeforeName {
                                    case Maybe_Maybe.Maybe_Nothing:
                                        generated_let_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult_nameSeparatorValuePrint
                                    case let Maybe_Maybe.Maybe_Just(commentsBeforeName):
                                        Print_followedBy(generated_let_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult_nameSeparatorValuePrint, Print_followedBy(Print_spaceOrLinebreakIndented(commentsBeforeName.lineSpread), commentsBeforeName.print))
                                    }
                                return Print_withIndentIncreasedBy(2.0, generated_localReturnResult_argument1_letResult_result_argument0_right_argument0_right_left_left_letResult_caseResult_case1_declarationResult)
                            },
                            Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyCommaSpace, Print_emptyOrLinebreakIndented(generated_let_caseResult_case1_declarationResult_lineSpread)),
                            generated_let_caseResult_case1_declarationResult_fieldPrintsAndComments().reverse
                        ),
                        ElmSyntaxPrintDefunctionalized_printExactlyCurlyOpeningSpace
                    )
                )
            )
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_singleDoubleQuotedStringCharToEscaped(_ character: UnicodeScalar) ->  String {
    switch character {
    case "\"":
        "\\\""
    case "\\":
        "\\\\"
    case "\t":
        "\\t"
    case "\n":
        "\\n"
    case "\r":
        "\\u{000D}"
    case let otherCharacter:
        if ElmSyntaxPrintDefunctionalized_characterIsNotPrint(otherCharacter) {
            String_append("\\u{", String_append(ElmSyntaxPrintDefunctionalized_characterHex(otherCharacter), "}"))
        } else {
            String_fromChar(otherCharacter)
        }
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_splitOffPortDocumentationComments(_ commentsAndPortDocumentationComments: List_List<ElmSyntaxNode_Node<String>>) ->  Generated_portDocumentationComments_remainingComments<List_List<ElmSyntaxNode_Node<String>>, List_List<ElmSyntaxNode_Node<String>>> {
    List_foldr(
        { (commentOrPortDocumentationComments: ElmSyntaxNode_Node<String>) in
            { (soFar: Generated_portDocumentationComments_remainingComments<List_List<ElmSyntaxNode_Node<String>>, List_List<ElmSyntaxNode_Node<String>>>) in
                if String_startsWith("{-|", ElmSyntaxNode_value(commentOrPortDocumentationComments)) {
                    Generated_portDocumentationComments_remainingComments.Record(portDocumentationComments: List_cons(commentOrPortDocumentationComments, soFar.portDocumentationComments), remainingComments: soFar.remainingComments)
                } else {
                    Generated_portDocumentationComments_remainingComments.Record(portDocumentationComments: soFar.portDocumentationComments, remainingComments: List_cons(commentOrPortDocumentationComments, soFar.remainingComments))
                }
            }
        },
        ElmSyntaxPrintDefunctionalized_commentsEmptyPortDocumentationRemainingCommentsEmpty(),
        commentsAndPortDocumentationComments
    )
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_stringLiteral(_ generated_0: ElmSyntaxNode_Node<String>) ->  Print_Print {
    let range: ElmSyntaxRange_Range
    let stringContent: String
    switch generated_0 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_range, generated_destructured_stringContent):
        range =
            generated_destructured_range
        stringContent =
            generated_destructured_stringContent
    }
    let generated_let_declarationResult_singleDoubleQuotedStringContentEscaped: String =
        String_foldl({ (contentChar: UnicodeScalar) in { (soFar: String) in String_append(soFar, ElmSyntaxPrintDefunctionalized_singleDoubleQuotedStringCharToEscaped(contentChar)) } }, "", stringContent)
    let generated_let_declarationResult_wasProbablyTripleDoubleQuoteOriginally: Bool =
        Basics_or(Basics_neq(range.start.row, range.end.row), Basics_neq(Basics_sub(Basics_sub(range.end.column, range.start.column), ElmSyntaxPrintDefunctionalized_stringUnicodeLength(generated_let_declarationResult_singleDoubleQuotedStringContentEscaped)), 2.0))
    return
        if generated_let_declarationResult_wasProbablyTripleDoubleQuoteOriginally {
            Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyDoubleQuoteDoubleQuoteDoubleQuote, Print_followedBy(Print_listMapAndIntersperseAndFlatten(Print_exactly, Print_linebreak, String_lines(ElmSyntaxPrintDefunctionalized_tripleDoubleQuotedStringEscapeDoubleQuotes(String_foldl({ (contentChar: UnicodeScalar) in { (soFar: String) in String_append(soFar, ElmSyntaxPrintDefunctionalized_tripleDoubleQuotedStringCharToEscaped(contentChar)) } }, "", stringContent)))), ElmSyntaxPrintDefunctionalized_printExactlyDoubleQuoteDoubleQuoteDoubleQuote))
        } else {
            Print_exactly(String_append("\"", String_append(generated_let_declarationResult_singleDoubleQuotedStringContentEscaped, "\"")))
        }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_stringResizePadLeftWith0s(_ length: Double, _ unpaddedString: String) ->  String {
    if Basics_lt(length, String_length(unpaddedString)) {
        String_left(length, unpaddedString)
    } else {
        String_append(String_repeat(Basics_sub(length, String_length(unpaddedString)), "0"), unpaddedString)
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_stringUnicodeLength(_ string: String) ->  Double {
    String_foldl(
        { (generated_argument0_right_declarationResult_0: UnicodeScalar) in
            { (soFar: Double) in
                let (_) =
                    generated_argument0_right_declarationResult_0
                return Basics_add(soFar, 1.0)
            }
        },
        0.0,
        string
    )
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_triple<part: Sendable>(_ config: Generated_lineSpreadMinimum_printPartNotParenthesized<Print_LineSpread, @Sendable (List_List<ElmSyntaxNode_Node<String>>) -> (ElmSyntaxNode_Node<part>) -> Print_Print>, _ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxTriple: Generated_fullRange_part0_part1_part2<Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location>, ElmSyntaxNode_Node<part>, ElmSyntaxNode_Node<part>, ElmSyntaxNode_Node<part>>) ->  Print_Print {
    let generated_let_declarationResult_part2Print: Print_Print =
        config.printPartNotParenthesized(syntaxComments)(syntaxTriple.part2)
    let generated_let_declarationResult_part1Print: Print_Print =
        config.printPartNotParenthesized(syntaxComments)(syntaxTriple.part1)
    let generated_let_declarationResult_part0Print: Print_Print =
        config.printPartNotParenthesized(syntaxComments)(syntaxTriple.part0)
    let generated_let_declarationResult_beforePart2Comments: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(syntaxTriple.part2).start, start: ElmSyntaxNode_range(syntaxTriple.part1).end), syntaxComments)
    let generated_let_declarationResult_beforePart2CommentsCollapsible: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
        ElmSyntaxPrintDefunctionalized_collapsibleComments(generated_let_declarationResult_beforePart2Comments)
    let generated_let_declarationResult_beforePart1Comments: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(syntaxTriple.part1).start, start: ElmSyntaxNode_range(syntaxTriple.part0).end), syntaxComments)
    let generated_let_declarationResult_beforePart1CommentsCollapsible: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
        ElmSyntaxPrintDefunctionalized_collapsibleComments(generated_let_declarationResult_beforePart1Comments)
    let generated_let_declarationResult_beforePart0Comments: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(syntaxTriple.part0).start, start: syntaxTriple.fullRange.start), syntaxComments)
    let generated_let_declarationResult_beforePart0CommentsCollapsible: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
        ElmSyntaxPrintDefunctionalized_collapsibleComments(generated_let_declarationResult_beforePart0Comments)
    let generated_let_declarationResult_afterPart2Comments: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: syntaxTriple.fullRange.end, start: ElmSyntaxNode_range(syntaxTriple.part2).end), syntaxComments)
    let generated_let_declarationResult_lineSpread: Print_LineSpread =
        Print_lineSpreadMergeWith(
            { (generated_argument0_right_letDeclaration10_declarationResult_0: Unit) in
                let (_) =
                    generated_argument0_right_letDeclaration10_declarationResult_0
                return
                    switch generated_let_declarationResult_afterPart2Comments {
                    case List_List.List_Cons(_, _):
                        Print_LineSpread.Print_MultipleLines
                    case List_List.List_Empty:
                        Print_LineSpread.Print_SingleLine
                    }
            },
            Print_lineSpreadMergeWithStrict(generated_let_declarationResult_beforePart2CommentsCollapsible.lineSpread, Print_lineSpreadMergeWithStrict(generated_let_declarationResult_beforePart1CommentsCollapsible.lineSpread, Print_lineSpreadMergeWithStrict(generated_let_declarationResult_beforePart0CommentsCollapsible.lineSpread, config.lineSpreadMinimum)))
        )
    let generated_localReturnResult_argument0_right_argument1_argument0_right_left_left_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_afterPart2Comments {
        case List_List.List_Empty:
            Print_empty
        case let List_List.List_Cons(comment0, comment1Up):
            Print_followedBy(ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up)), Print_linebreakIndented)
        }
    let generated_localReturnResult_left_argument1_argument0_right_left_left_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_beforePart2Comments {
        case List_List.List_Empty:
            generated_let_declarationResult_part2Print
        case List_List.List_Cons(_, _):
            Print_followedBy(
                generated_let_declarationResult_part2Print,
                Print_followedBy(
                    Print_spaceOrLinebreakIndented(
                        Print_lineSpreadMergeWith(
                            { (generated_argument0_right_argument0_argument0_right_left_caseResult_case1_left_argument1_argument0_right_left_left_letResult_declarationResult_0: Unit) in
                                let (_) =
                                    generated_argument0_right_argument0_argument0_right_left_caseResult_case1_left_argument1_argument0_right_left_left_letResult_declarationResult_0
                                return Print_lineSpread(generated_let_declarationResult_part2Print)
                            },
                            generated_let_declarationResult_beforePart2CommentsCollapsible.lineSpread
                        )
                    ),
                    generated_let_declarationResult_beforePart2CommentsCollapsible.print
                )
            )
        }
    let generated_localReturnResult_argument1_argument0_right_left_left_left_left_left_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_beforePart1Comments {
        case List_List.List_Empty:
            generated_let_declarationResult_part1Print
        case List_List.List_Cons(_, _):
            Print_followedBy(
                generated_let_declarationResult_part1Print,
                Print_followedBy(
                    Print_spaceOrLinebreakIndented(
                        Print_lineSpreadMergeWith(
                            { (generated_argument0_right_argument0_argument0_right_left_caseResult_case1_argument1_argument0_right_left_left_left_left_left_letResult_declarationResult_0: Unit) in
                                let (_) =
                                    generated_argument0_right_argument0_argument0_right_left_caseResult_case1_argument1_argument0_right_left_left_left_left_left_letResult_declarationResult_0
                                return Print_lineSpread(generated_let_declarationResult_part1Print)
                            },
                            generated_let_declarationResult_beforePart1CommentsCollapsible.lineSpread
                        )
                    ),
                    generated_let_declarationResult_beforePart1CommentsCollapsible.print
                )
            )
        }
    let generated_localReturnResult_argument1_argument0_right_left_left_left_left_left_left_left_left_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_beforePart0Comments {
        case List_List.List_Empty:
            generated_let_declarationResult_part0Print
        case List_List.List_Cons(_, _):
            Print_followedBy(
                generated_let_declarationResult_part0Print,
                Print_followedBy(
                    Print_spaceOrLinebreakIndented(
                        Print_lineSpreadMergeWith(
                            { (generated_argument0_right_argument0_argument0_right_left_caseResult_case1_argument1_argument0_right_left_left_left_left_left_left_left_left_letResult_declarationResult_0: Unit) in
                                let (_) =
                                    generated_argument0_right_argument0_argument0_right_left_caseResult_case1_argument1_argument0_right_left_left_left_left_left_left_left_left_letResult_declarationResult_0
                                return Print_lineSpread(generated_let_declarationResult_part0Print)
                            },
                            generated_let_declarationResult_beforePart0CommentsCollapsible.lineSpread
                        )
                    ),
                    generated_let_declarationResult_beforePart0CommentsCollapsible.print
                )
            )
        }
    return Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyParensClosing, Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_declarationResult_lineSpread), Print_followedBy(Print_withIndentIncreasedBy(2.0, Print_followedBy(generated_localReturnResult_argument0_right_argument1_argument0_right_left_left_letResult_declarationResult, generated_localReturnResult_left_argument1_argument0_right_left_left_letResult_declarationResult)), Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyCommaSpace, Print_followedBy(Print_emptyOrLinebreakIndented(generated_let_declarationResult_lineSpread), Print_followedBy(Print_withIndentIncreasedBy(2.0, generated_localReturnResult_argument1_argument0_right_left_left_left_left_left_letResult_declarationResult), Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyCommaSpace, Print_followedBy(Print_emptyOrLinebreakIndented(generated_let_declarationResult_lineSpread), Print_followedBy(Print_withIndentIncreasedBy(2.0, generated_localReturnResult_argument1_argument0_right_left_left_left_left_left_left_left_left_letResult_declarationResult), ElmSyntaxPrintDefunctionalized_printExactlyParensOpeningSpace)))))))))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_tripleDoubleQuotedStringCharToEscaped(_ character: UnicodeScalar) ->  String {
    switch character {
    case "\"":
        "\""
    case "\\":
        "\\\\"
    case "\t":
        "\\t"
    case "\n":
        "\n"
    case "\r":
        "\r"
    case let otherCharacter:
        if ElmSyntaxPrintDefunctionalized_characterIsNotPrint(otherCharacter) {
            String_append("\\u{", String_append(ElmSyntaxPrintDefunctionalized_characterHex(otherCharacter), "}"))
        } else {
            String_fromChar(otherCharacter)
        }
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_tripleDoubleQuotedStringEscapeDoubleQuotes(_ string: String) ->  String {
    let generated_let_declarationResult_beforeLastCharEscaped: Generated_consecutiveDoubleQuoteCount_result<Double, String> =
        String_foldl(
            { (char: UnicodeScalar) in
                { (soFar: Generated_consecutiveDoubleQuoteCount_result<Double, String>) in
                    let generated_localReturnResult_result_argument0_right_letDeclaration0_declarationResult: Generated_consecutiveDoubleQuoteCount_result<Double, String>
                    switch char {
                    case "\"":
                        generated_localReturnResult_result_argument0_right_letDeclaration0_declarationResult =
                            Generated_consecutiveDoubleQuoteCount_result.Record(consecutiveDoubleQuoteCount: Basics_add(soFar.consecutiveDoubleQuoteCount, 1.0), result: soFar.result)
                    case let firstCharNotDoubleQuote:
                        let generated_localReturnResult_left_right_result_caseResult_case1_result_argument0_right_letDeclaration0_declarationResult: String =
                            switch soFar.consecutiveDoubleQuoteCount {
                            case 0:
                                ""
                            case 1:
                                "\""
                            case 2:
                                "\"\""
                            case let atLeast3ConsecutiveDoubleQuoteCount:
                                String_repeat(atLeast3ConsecutiveDoubleQuoteCount, "\\\"")
                            }
                        generated_localReturnResult_result_argument0_right_letDeclaration0_declarationResult =
                            Generated_consecutiveDoubleQuoteCount_result.Record(consecutiveDoubleQuoteCount: 0.0, result: String_append(soFar.result, String_append(generated_localReturnResult_left_right_result_caseResult_case1_result_argument0_right_letDeclaration0_declarationResult, String_fromChar(firstCharNotDoubleQuote))))
                    }
                    return generated_localReturnResult_result_argument0_right_letDeclaration0_declarationResult
                }
            },
            ElmSyntaxPrintDefunctionalized_consecutiveDoubleQuoteCountResultStringEmpty,
            string
        )
    return String_append(generated_let_declarationResult_beforeLastCharEscaped.result, String_repeat(generated_let_declarationResult_beforeLastCharEscaped.consecutiveDoubleQuoteCount, "\\\""))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_tuple<part: Sendable>(_ config: Generated_lineSpreadMinimum_printPartNotParenthesized<Print_LineSpread, @Sendable (List_List<ElmSyntaxNode_Node<String>>) -> (ElmSyntaxNode_Node<part>) -> Print_Print>, _ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxTuple: Generated_fullRange_part0_part1<Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location>, ElmSyntaxNode_Node<part>, ElmSyntaxNode_Node<part>>) ->  Print_Print {
    let generated_let_declarationResult_part1Print: Print_Print =
        config.printPartNotParenthesized(syntaxComments)(syntaxTuple.part1)
    let generated_let_declarationResult_part0Print: Print_Print =
        config.printPartNotParenthesized(syntaxComments)(syntaxTuple.part0)
    let generated_let_declarationResult_beforePart1Comments: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(syntaxTuple.part1).start, start: ElmSyntaxNode_range(syntaxTuple.part0).end), syntaxComments)
    let generated_let_declarationResult_beforePart1CommentsCollapsible: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
        ElmSyntaxPrintDefunctionalized_collapsibleComments(generated_let_declarationResult_beforePart1Comments)
    let generated_let_declarationResult_beforePart0Comments: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(syntaxTuple.part0).start, start: syntaxTuple.fullRange.start), syntaxComments)
    let generated_let_declarationResult_beforePart0CommentsCollapsible: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
        ElmSyntaxPrintDefunctionalized_collapsibleComments(generated_let_declarationResult_beforePart0Comments)
    let generated_let_declarationResult_afterPart1Comments: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: syntaxTuple.fullRange.end, start: ElmSyntaxNode_range(syntaxTuple.part1).end), syntaxComments)
    let generated_let_declarationResult_lineSpread: Print_LineSpread =
        Print_lineSpreadMergeWith(
            { (generated_argument0_right_letDeclaration7_declarationResult_0: Unit) in
                let (_) =
                    generated_argument0_right_letDeclaration7_declarationResult_0
                return
                    switch generated_let_declarationResult_afterPart1Comments {
                    case List_List.List_Cons(_, _):
                        Print_LineSpread.Print_MultipleLines
                    case List_List.List_Empty:
                        Print_LineSpread.Print_SingleLine
                    }
            },
            Print_lineSpreadMergeWithStrict(generated_let_declarationResult_beforePart1CommentsCollapsible.lineSpread, Print_lineSpreadMergeWithStrict(generated_let_declarationResult_beforePart0CommentsCollapsible.lineSpread, config.lineSpreadMinimum))
        )
    let generated_localReturnResult_argument0_right_argument1_argument0_right_left_left_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_afterPart1Comments {
        case List_List.List_Empty:
            Print_empty
        case let List_List.List_Cons(comment0, comment1Up):
            Print_followedBy(ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up)), Print_linebreakIndented)
        }
    let generated_localReturnResult_left_argument1_argument0_right_left_left_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_beforePart1Comments {
        case List_List.List_Empty:
            generated_let_declarationResult_part1Print
        case List_List.List_Cons(_, _):
            Print_followedBy(
                generated_let_declarationResult_part1Print,
                Print_followedBy(
                    Print_spaceOrLinebreakIndented(
                        Print_lineSpreadMergeWith(
                            { (generated_argument0_right_argument0_argument0_right_left_caseResult_case1_left_argument1_argument0_right_left_left_letResult_declarationResult_0: Unit) in
                                let (_) =
                                    generated_argument0_right_argument0_argument0_right_left_caseResult_case1_left_argument1_argument0_right_left_left_letResult_declarationResult_0
                                return Print_lineSpread(generated_let_declarationResult_part1Print)
                            },
                            generated_let_declarationResult_beforePart1CommentsCollapsible.lineSpread
                        )
                    ),
                    generated_let_declarationResult_beforePart1CommentsCollapsible.print
                )
            )
        }
    let generated_localReturnResult_argument1_argument0_right_left_left_left_left_left_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_beforePart0Comments {
        case List_List.List_Empty:
            generated_let_declarationResult_part0Print
        case List_List.List_Cons(_, _):
            Print_followedBy(
                generated_let_declarationResult_part0Print,
                Print_followedBy(
                    Print_spaceOrLinebreakIndented(
                        Print_lineSpreadMergeWith(
                            { (generated_argument0_right_argument0_argument0_right_left_caseResult_case1_argument1_argument0_right_left_left_left_left_left_letResult_declarationResult_0: Unit) in
                                let (_) =
                                    generated_argument0_right_argument0_argument0_right_left_caseResult_case1_argument1_argument0_right_left_left_left_left_left_letResult_declarationResult_0
                                return Print_lineSpread(generated_let_declarationResult_part0Print)
                            },
                            generated_let_declarationResult_beforePart0CommentsCollapsible.lineSpread
                        )
                    ),
                    generated_let_declarationResult_beforePart0CommentsCollapsible.print
                )
            )
        }
    return Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyParensClosing, Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_declarationResult_lineSpread), Print_followedBy(Print_withIndentIncreasedBy(2.0, Print_followedBy(generated_localReturnResult_argument0_right_argument1_argument0_right_left_left_letResult_declarationResult, generated_localReturnResult_left_argument1_argument0_right_left_left_letResult_declarationResult)), Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyCommaSpace, Print_followedBy(Print_emptyOrLinebreakIndented(generated_let_declarationResult_lineSpread), Print_followedBy(Print_withIndentIncreasedBy(2.0, generated_localReturnResult_argument1_argument0_right_left_left_left_left_left_letResult_declarationResult), ElmSyntaxPrintDefunctionalized_printExactlyParensOpeningSpace))))))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_typeFunctionExpand(_ typeNode: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) ->  Generated_beforeRightest_rightest<List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>> {
    let generated_localReturnResult_declarationResult: Generated_beforeRightest_rightest<List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>
    switch typeNode {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_FunctionTypeAnnotation(inType, outType)):
        let generated_let_caseResult_case0_declarationResult_outTypeExpanded: Generated_beforeRightest_rightest<List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>> =
            ElmSyntaxPrintDefunctionalized_typeFunctionExpand(outType)
        generated_localReturnResult_declarationResult =
            Generated_beforeRightest_rightest.Record(beforeRightest: List_cons(inType, generated_let_caseResult_case0_declarationResult_outTypeExpanded.beforeRightest), rightest: generated_let_caseResult_case0_declarationResult_outTypeExpanded.rightest)
    case let typeNodeNotFunction:
        generated_localReturnResult_declarationResult =
            Generated_beforeRightest_rightest.Record(beforeRightest: List_List.List_Empty, rightest: typeNodeNotFunction)
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_typeFunctionNotParenthesized(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ function: Generated_fullRange_inType_outType<ElmSyntaxRange_Range, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) ->  Print_Print {
    let generated_let_declarationResult_inTypePrint: Print_Print =
        ElmSyntaxPrintDefunctionalized_typeParenthesizedIfFunction(syntaxComments, function.inType)
    let generated_let_declarationResult_afterArrowTypes: Generated_beforeRightest_rightest<List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>> =
        ElmSyntaxPrintDefunctionalized_typeFunctionExpand(function.outType)
    let generated_let_declarationResult_afterArrowTypesBeforeRightestPrintsWithCommentsBefore: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Print_Print>> =
        List_foldl(
            { (afterArrowTypeNode: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in
                { (soFar: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Print_Print>>) in
                    let generated_let_result_argument0_right_letDeclaration2_declarationResult_print: Print_Print =
                        ElmSyntaxPrintDefunctionalized_typeParenthesizedIfFunction(syntaxComments, afterArrowTypeNode)
                    let generated_let_result_argument0_right_letDeclaration2_declarationResult_afterArrowTypeRange: ElmSyntaxRange_Range
                    switch afterArrowTypeNode {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_afterArrowTypeRange, _):
                        generated_let_result_argument0_right_letDeclaration2_declarationResult_afterArrowTypeRange =
                            generated_destructured_afterArrowTypeRange
                    }
                    let generated_localReturnResult_left_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult: Print_Print
                    switch ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: generated_let_result_argument0_right_letDeclaration2_declarationResult_afterArrowTypeRange.start, start: soFar.endLocation), syntaxComments) {
                    case List_List.List_Empty:
                        generated_localReturnResult_left_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult =
                            Print_spaceOrLinebreakIndented(Print_lineSpread(generated_let_result_argument0_right_letDeclaration2_declarationResult_print))
                    case let List_List.List_Cons(comment0, comment1Up):
                        let generated_let_caseResult_case1_left_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult_commentsBeforeAfterArrowType: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
                            ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up))
                        let generated_let_caseResult_case1_left_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult_lineSpread: Print_LineSpread =
                            Print_lineSpreadMergeWith(
                                { (generated_argument0_right_letDeclaration1_caseResult_case1_left_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult_0: Unit) in
                                    let (_) =
                                        generated_argument0_right_letDeclaration1_caseResult_case1_left_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult_0
                                    return Print_lineSpread(generated_let_result_argument0_right_letDeclaration2_declarationResult_print)
                                },
                                generated_let_caseResult_case1_left_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult_commentsBeforeAfterArrowType.lineSpread
                            )
                        generated_localReturnResult_left_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult =
                            Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_caseResult_case1_left_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult_lineSpread), Print_followedBy(generated_let_caseResult_case1_left_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult_commentsBeforeAfterArrowType.print, Print_spaceOrLinebreakIndented(generated_let_caseResult_case1_left_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult_lineSpread)))
                    }
                    return Generated_endLocation_reverse.Record(endLocation: generated_let_result_argument0_right_letDeclaration2_declarationResult_afterArrowTypeRange.end, reverse: List_cons(Print_followedBy(generated_let_result_argument0_right_letDeclaration2_declarationResult_print, generated_localReturnResult_left_left_reverse_letResult_result_argument0_right_letDeclaration2_declarationResult), soFar.reverse))
                }
            },
            Generated_endLocation_reverse.Record(endLocation: ElmSyntaxNode_range(function.inType).end, reverse: List_List.List_Empty),
            generated_let_declarationResult_afterArrowTypes.beforeRightest
        )
    let generated_let_declarationResult_commentsBeforeRightestAfterArrowType: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(generated_let_declarationResult_afterArrowTypes.rightest).start, start: generated_let_declarationResult_afterArrowTypesBeforeRightestPrintsWithCommentsBefore.endLocation), syntaxComments)
    let generated_let_declarationResult_commentsCollapsibleBeforeRightestAfterArrowType: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
        ElmSyntaxPrintDefunctionalized_collapsibleComments(generated_let_declarationResult_commentsBeforeRightestAfterArrowType)
    let generated_let_declarationResult_rightestAfterArrowTypePrint: Print_Print =
        ElmSyntaxPrintDefunctionalized_typeParenthesizedIfParenthesizedFunction(syntaxComments, generated_let_declarationResult_afterArrowTypes.rightest)
    let generated_localReturnResult_left_letDeclaration6_declarationResult: Print_Print
    switch generated_let_declarationResult_commentsBeforeRightestAfterArrowType {
    case List_List.List_Empty:
        generated_localReturnResult_left_letDeclaration6_declarationResult =
            Print_spaceOrLinebreakIndented(Print_lineSpread(generated_let_declarationResult_rightestAfterArrowTypePrint))
    case let List_List.List_Cons(comment0, comment1Up):
        let generated_let_caseResult_case1_left_letDeclaration6_declarationResult_commentsCollapsible: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
            ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up))
        let generated_let_caseResult_case1_left_letDeclaration6_declarationResult_lineSpread: Print_LineSpread =
            Print_lineSpreadMergeWith(
                { (generated_argument0_right_letDeclaration1_caseResult_case1_left_letDeclaration6_declarationResult_0: Unit) in
                    let (_) =
                        generated_argument0_right_letDeclaration1_caseResult_case1_left_letDeclaration6_declarationResult_0
                    return Print_lineSpread(generated_let_declarationResult_rightestAfterArrowTypePrint)
                },
                generated_let_caseResult_case1_left_letDeclaration6_declarationResult_commentsCollapsible.lineSpread
            )
        generated_localReturnResult_left_letDeclaration6_declarationResult =
            Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_caseResult_case1_left_letDeclaration6_declarationResult_lineSpread), Print_followedBy(generated_let_caseResult_case1_left_letDeclaration6_declarationResult_commentsCollapsible.print, Print_spaceOrLinebreakIndented(generated_let_caseResult_case1_left_letDeclaration6_declarationResult_lineSpread)))
    }
    let generated_let_declarationResult_rightestAfterArrowTypeWithCommentsBeforePrint: Print_Print =
        Print_followedBy(generated_let_declarationResult_rightestAfterArrowTypePrint, generated_localReturnResult_left_letDeclaration6_declarationResult)
    let generated_let_declarationResult_fullLineSpread: Print_LineSpread =
        Print_lineSpreadMergeWith(
            { (generated_argument0_right_letDeclaration7_declarationResult_0: Unit) in
                let (_) =
                    generated_argument0_right_letDeclaration7_declarationResult_0
                return Print_lineSpreadListMapAndCombine(Print_lineSpread, generated_let_declarationResult_afterArrowTypesBeforeRightestPrintsWithCommentsBefore.reverse)
            },
            Print_lineSpreadMergeWithStrict(
                generated_let_declarationResult_commentsCollapsibleBeforeRightestAfterArrowType.lineSpread,
                Print_lineSpreadMergeWith(
                    { (generated_argument0_right_left_left_letDeclaration7_declarationResult_0: Unit) in
                        let (_) =
                            generated_argument0_right_left_left_letDeclaration7_declarationResult_0
                        return Print_lineSpread(generated_let_declarationResult_rightestAfterArrowTypeWithCommentsBeforePrint)
                    },
                    Print_lineSpreadMergeWith(
                        { (generated_argument0_right_left_left_left_letDeclaration7_declarationResult_0: Unit) in
                            let (_) =
                                generated_argument0_right_left_left_left_letDeclaration7_declarationResult_0
                            return Print_lineSpread(generated_let_declarationResult_inTypePrint)
                        },
                        ElmSyntaxPrintDefunctionalized_lineSpreadInRange(function.fullRange)
                    )
                )
            )
        )
    return Print_followedBy(Print_followedBy(Print_withIndentAtNextMultipleOf4(generated_let_declarationResult_rightestAfterArrowTypeWithCommentsBeforePrint), Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyMinusGreaterThan, Print_spaceOrLinebreakIndented(generated_let_declarationResult_fullLineSpread))), Print_followedBy(Print_listReverseAndMapAndFlatten({ (printWithCommentsBefore: Print_Print) in Print_followedBy(Print_withIndentAtNextMultipleOf4(printWithCommentsBefore), Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyMinusGreaterThan, Print_spaceOrLinebreakIndented(generated_let_declarationResult_fullLineSpread))) }, generated_let_declarationResult_afterArrowTypesBeforeRightestPrintsWithCommentsBefore.reverse), generated_let_declarationResult_inTypePrint))
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_typeIsSpaceSeparated(_ syntaxType: ElmSyntaxTypeAnnotation_TypeAnnotation) ->  Bool {
    switch syntaxType {
    case ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_GenericType(_):
        false
    case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Typed(_, arguments):
        switch arguments {
        case List_List.List_Empty:
            false
        case List_List.List_Cons(_, _):
            true
        }
    case ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Unit:
        false
    case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Tupled(parts):
        switch parts {
        case List_List.List_Empty:
            false
        case let List_List.List_Cons(ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, inParens), List_List.List_Empty):
            ElmSyntaxPrintDefunctionalized_typeIsSpaceSeparated(inParens)
        case List_List.List_Cons(_, List_List.List_Cons(_, List_List.List_Empty)):
            false
        case List_List.List_Cons(_, List_List.List_Cons(_, List_List.List_Cons(_, List_List.List_Empty))):
            false
        case List_List.List_Cons(_, List_List.List_Cons(_, List_List.List_Cons(_, List_List.List_Cons(_, _)))):
            false
        }
    case ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Record(_):
        false
    case ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_GenericRecord(_, _):
        false
    case ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_FunctionTypeAnnotation(_, _):
        true
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_typeNotParenthesized(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ generated_1: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) ->  Print_Print {
    let fullRange: ElmSyntaxRange_Range
    let syntaxType: ElmSyntaxTypeAnnotation_TypeAnnotation
    switch generated_1 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_fullRange, generated_destructured_syntaxType):
        fullRange =
            generated_destructured_fullRange
        syntaxType =
            generated_destructured_syntaxType
    }
    let generated_localReturnResult_declarationResult: Print_Print
    switch syntaxType {
    case ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Unit:
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_printExactlyParensOpeningParensClosed
    case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_GenericType(name):
        generated_localReturnResult_declarationResult =
            Print_exactly(name)
    case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Typed(ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, Tuple.Tuple(referenceQualification, referenceUnqualified)), arguments):
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_construct(Generated_lineSpreadMinimum_printArgumentParenthesizedIfSpaceSeparated.Record(lineSpreadMinimum: ElmSyntaxPrintDefunctionalized_lineSpreadInRange(fullRange), printArgumentParenthesizedIfSpaceSeparated: { (generated_printArgumentParenthesizedIfSpaceSeparated_argument0_caseResult_case2_declarationResult_0: List_List<ElmSyntaxNode_Node<String>>) in { (generated_printArgumentParenthesizedIfSpaceSeparated_argument0_caseResult_case2_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in ElmSyntaxPrintDefunctionalized_typeParenthesizedIfSpaceSeparated(generated_printArgumentParenthesizedIfSpaceSeparated_argument0_caseResult_case2_declarationResult_0, generated_printArgumentParenthesizedIfSpaceSeparated_argument0_caseResult_case2_declarationResult_1) } }), syntaxComments, Generated_arguments_fullRange_start.Record(arguments: arguments, fullRange: fullRange, start: ElmSyntaxPrintDefunctionalized_qualifiedReference(Generated_qualification_unqualified.Record(qualification: referenceQualification, unqualified: referenceUnqualified))))
    case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Tupled(parts):
        let generated_localReturnResult_caseResult_case3_declarationResult: Print_Print
        switch parts {
        case List_List.List_Empty:
            generated_localReturnResult_caseResult_case3_declarationResult =
                ElmSyntaxPrintDefunctionalized_printExactlyParensOpeningParensClosed
        case let List_List.List_Cons(inParens, List_List.List_Empty):
            let generated_let_caseResult_case1_caseResult_case3_declarationResult_commentsBeforeInParens: List_List<String> =
                ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(inParens).start, start: fullRange.start), syntaxComments)
            let generated_let_caseResult_case1_caseResult_case3_declarationResult_commentsAfterInParens: List_List<String> =
                ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: fullRange.end, start: ElmSyntaxNode_range(inParens).end), syntaxComments)
            generated_localReturnResult_caseResult_case3_declarationResult =
                switch Tuple.Tuple(generated_let_caseResult_case1_caseResult_case3_declarationResult_commentsBeforeInParens, generated_let_caseResult_case1_caseResult_case3_declarationResult_commentsAfterInParens) {
                case Tuple.Tuple(List_List.List_Empty, List_List.List_Empty):
                    ElmSyntaxPrintDefunctionalized_typeNotParenthesized(syntaxComments, inParens)
                case _:
                    ElmSyntaxPrintDefunctionalized_parenthesized({ (generated_argument0_caseResult_case1_letResult_caseResult_case1_caseResult_case3_declarationResult_0: List_List<ElmSyntaxNode_Node<String>>) in { (generated_argument0_caseResult_case1_letResult_caseResult_case1_caseResult_case3_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in ElmSyntaxPrintDefunctionalized_typeNotParenthesized(generated_argument0_caseResult_case1_letResult_caseResult_case1_caseResult_case3_declarationResult_0, generated_argument0_caseResult_case1_letResult_caseResult_case1_caseResult_case3_declarationResult_1) } }, Generated_fullRange_notParenthesized.Record(fullRange: fullRange, notParenthesized: ElmSyntaxPrintDefunctionalized_typeToNotParenthesized(inParens)), syntaxComments)
                }
        case let List_List.List_Cons(part0, List_List.List_Cons(part1, List_List.List_Empty)):
            generated_localReturnResult_caseResult_case3_declarationResult =
                ElmSyntaxPrintDefunctionalized_tuple(Generated_lineSpreadMinimum_printPartNotParenthesized.Record(lineSpreadMinimum: ElmSyntaxPrintDefunctionalized_lineSpreadInRange(fullRange), printPartNotParenthesized: { (generated_printPartNotParenthesized_argument0_caseResult_case2_caseResult_case3_declarationResult_0: List_List<ElmSyntaxNode_Node<String>>) in { (generated_printPartNotParenthesized_argument0_caseResult_case2_caseResult_case3_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in ElmSyntaxPrintDefunctionalized_typeNotParenthesized(generated_printPartNotParenthesized_argument0_caseResult_case2_caseResult_case3_declarationResult_0, generated_printPartNotParenthesized_argument0_caseResult_case2_caseResult_case3_declarationResult_1) } }), syntaxComments, Generated_fullRange_part0_part1.Record(fullRange: fullRange, part0: part0, part1: part1))
        case let List_List.List_Cons(part0, List_List.List_Cons(part1, List_List.List_Cons(part2, List_List.List_Empty))):
            generated_localReturnResult_caseResult_case3_declarationResult =
                ElmSyntaxPrintDefunctionalized_triple(Generated_lineSpreadMinimum_printPartNotParenthesized.Record(lineSpreadMinimum: ElmSyntaxPrintDefunctionalized_lineSpreadInRange(fullRange), printPartNotParenthesized: { (generated_printPartNotParenthesized_argument0_caseResult_case3_caseResult_case3_declarationResult_0: List_List<ElmSyntaxNode_Node<String>>) in { (generated_printPartNotParenthesized_argument0_caseResult_case3_caseResult_case3_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in ElmSyntaxPrintDefunctionalized_typeNotParenthesized(generated_printPartNotParenthesized_argument0_caseResult_case3_caseResult_case3_declarationResult_0, generated_printPartNotParenthesized_argument0_caseResult_case3_caseResult_case3_declarationResult_1) } }), syntaxComments, Generated_fullRange_part0_part1_part2.Record(fullRange: fullRange, part0: part0, part1: part1, part2: part2))
        case let List_List.List_Cons(part0, List_List.List_Cons(part1, List_List.List_Cons(part2, List_List.List_Cons(part3, part4Up)))):
            generated_localReturnResult_caseResult_case3_declarationResult =
                ElmSyntaxPrintDefunctionalized_invalidNTuple({ (generated_argument0_caseResult_case4_caseResult_case3_declarationResult_0: List_List<ElmSyntaxNode_Node<String>>) in { (generated_argument0_caseResult_case4_caseResult_case3_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in ElmSyntaxPrintDefunctionalized_typeNotParenthesized(generated_argument0_caseResult_case4_caseResult_case3_declarationResult_0, generated_argument0_caseResult_case4_caseResult_case3_declarationResult_1) } }, syntaxComments, Generated_fullRange_part0_part1_part2_part3_part4Up.Record(fullRange: fullRange, part0: part0, part1: part1, part2: part2, part3: part3, part4Up: part4Up))
        }
        generated_localReturnResult_declarationResult =
            generated_localReturnResult_caseResult_case3_declarationResult
    case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Record(fields):
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_recordLiteral(Generated_nameValueSeparator_printValueNotParenthesized.Record(nameValueSeparator: ":", printValueNotParenthesized: { (generated_printValueNotParenthesized_argument0_caseResult_case4_declarationResult_0: List_List<ElmSyntaxNode_Node<String>>) in { (generated_printValueNotParenthesized_argument0_caseResult_case4_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in ElmSyntaxPrintDefunctionalized_typeNotParenthesized(generated_printValueNotParenthesized_argument0_caseResult_case4_declarationResult_0, generated_printValueNotParenthesized_argument0_caseResult_case4_declarationResult_1) } }), syntaxComments, Generated_fields_fullRange.Record(fields: fields, fullRange: fullRange))
    case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_GenericRecord(recordVariable, ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, fields)):
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_typeRecordExtension(syntaxComments, Generated_fields_fullRange_recordVariable.Record(fields: fields, fullRange: fullRange, recordVariable: recordVariable))
    case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_FunctionTypeAnnotation(inType, outType):
        generated_localReturnResult_declarationResult =
            ElmSyntaxPrintDefunctionalized_typeFunctionNotParenthesized(syntaxComments, Generated_fullRange_inType_outType.Record(fullRange: fullRange, inType: inType, outType: outType))
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_typeParenthesized(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ typeNode: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) ->  Print_Print {
    ElmSyntaxPrintDefunctionalized_parenthesized({ (generated_argument0_declarationResult_0: List_List<ElmSyntaxNode_Node<String>>) in { (generated_argument0_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in ElmSyntaxPrintDefunctionalized_typeNotParenthesized(generated_argument0_declarationResult_0, generated_argument0_declarationResult_1) } }, Generated_fullRange_notParenthesized.Record(fullRange: ElmSyntaxNode_range(typeNode), notParenthesized: ElmSyntaxPrintDefunctionalized_typeToNotParenthesized(typeNode)), syntaxComments)
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_typeParenthesizedIfFunction(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ typeNode: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) ->  Print_Print {
    switch ElmSyntaxPrintDefunctionalized_typeToFunction(typeNode) {
    case Maybe_Maybe.Maybe_Just(_):
        ElmSyntaxPrintDefunctionalized_typeParenthesized(syntaxComments, typeNode)
    case Maybe_Maybe.Maybe_Nothing:
        ElmSyntaxPrintDefunctionalized_typeNotParenthesized(syntaxComments, typeNode)
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_typeParenthesizedIfParenthesizedFunction(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ typeNode: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) ->  Print_Print {
    switch ElmSyntaxNode_value(typeNode) {
    case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Tupled(List_List.List_Cons(inParens, List_List.List_Empty)):
        ElmSyntaxPrintDefunctionalized_typeParenthesizedIfFunction(syntaxComments, inParens)
    case _:
        ElmSyntaxPrintDefunctionalized_typeNotParenthesized(syntaxComments, typeNode)
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_typeParenthesizedIfSpaceSeparated(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ typeNode: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) ->  Print_Print {
    if ElmSyntaxPrintDefunctionalized_typeIsSpaceSeparated(ElmSyntaxNode_value(typeNode)) {
        ElmSyntaxPrintDefunctionalized_typeParenthesized(syntaxComments, typeNode)
    } else {
        ElmSyntaxPrintDefunctionalized_typeNotParenthesized(syntaxComments, typeNode)
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_typeRecordExtension(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxRecordExtension: Generated_fields_fullRange_recordVariable<List_List<ElmSyntaxNode_Node<Tuple<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>>>, Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location>, ElmSyntaxNode_Node<String>>) ->  Print_Print {
    let generated_let_declarationResult_recordVariablePrint: Print_Print =
        Print_exactly(ElmSyntaxNode_value(syntaxRecordExtension.recordVariable))
    let generated_let_declarationResult_fieldPrintsAndComments: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Generated_maybeCommentsBeforeName_maybeCommentsBetweenNameAndValue_syntax_valuePrint<Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>>, Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>>, Tuple<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>, Print_Print>>> =
        List_foldl(
            { (generated_argument0_right_letDeclaration1_declarationResult_0: ElmSyntaxNode_Node<Tuple<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>>) in
                { (soFar: Generated_endLocation_reverse<ElmSyntaxRange_Location, List_List<Generated_maybeCommentsBeforeName_maybeCommentsBetweenNameAndValue_syntax_valuePrint<Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>>, Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>>, Tuple<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>, Print_Print>>>) in
                    let fieldNameRange: ElmSyntaxRange_Range
                    let fieldName: String
                    let fieldValueNode: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>
                    switch generated_argument0_right_letDeclaration1_declarationResult_0 {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, Tuple.Tuple(ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_fieldNameRange, generated_destructured_fieldName), generated_destructured_fieldValueNode)):
                        fieldNameRange =
                            generated_destructured_fieldNameRange
                        fieldName =
                            generated_destructured_fieldName
                        fieldValueNode =
                            generated_destructured_fieldValueNode
                    }
                    let generated_let_result_argument0_right_letDeclaration1_declarationResult_fieldValueRange: ElmSyntaxRange_Range
                    switch fieldValueNode {
                    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_fieldValueRange, _):
                        generated_let_result_argument0_right_letDeclaration1_declarationResult_fieldValueRange =
                            generated_destructured_fieldValueRange
                    }
                    let generated_let_result_argument0_right_letDeclaration1_declarationResult_commentsBetweenNameAndValue: List_List<String> =
                        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: generated_let_result_argument0_right_letDeclaration1_declarationResult_fieldValueRange.start, start: fieldNameRange.start), syntaxComments)
                    let generated_let_result_argument0_right_letDeclaration1_declarationResult_commentsBeforeName: List_List<String> =
                        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: fieldNameRange.start, start: soFar.endLocation), syntaxComments)
                    let generated_localReturnResult_maybeCommentsBeforeName_left_reverse_letResult_result_argument0_right_letDeclaration1_declarationResult: Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>> =
                        switch generated_let_result_argument0_right_letDeclaration1_declarationResult_commentsBeforeName {
                        case List_List.List_Empty:
                            Maybe_Maybe.Maybe_Nothing
                        case let List_List.List_Cons(comment0, comment1Up):
                            Maybe_Maybe.Maybe_Just(ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up)))
                        }
                    let generated_localReturnResult_maybeCommentsBetweenNameAndValue_left_reverse_letResult_result_argument0_right_letDeclaration1_declarationResult: Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>> =
                        switch generated_let_result_argument0_right_letDeclaration1_declarationResult_commentsBetweenNameAndValue {
                        case List_List.List_Empty:
                            Maybe_Maybe.Maybe_Nothing
                        case let List_List.List_Cons(comment0, comment1Up):
                            Maybe_Maybe.Maybe_Just(ElmSyntaxPrintDefunctionalized_collapsibleComments(List_cons(comment0, comment1Up)))
                        }
                    return Generated_endLocation_reverse.Record(endLocation: generated_let_result_argument0_right_letDeclaration1_declarationResult_fieldValueRange.end, reverse: List_cons(Generated_maybeCommentsBeforeName_maybeCommentsBetweenNameAndValue_syntax_valuePrint.Record(maybeCommentsBeforeName: generated_localReturnResult_maybeCommentsBeforeName_left_reverse_letResult_result_argument0_right_letDeclaration1_declarationResult, maybeCommentsBetweenNameAndValue: generated_localReturnResult_maybeCommentsBetweenNameAndValue_left_reverse_letResult_result_argument0_right_letDeclaration1_declarationResult, syntax: Tuple.Tuple(ElmSyntaxNode_Node.ElmSyntaxNode_Node(fieldNameRange, fieldName), fieldValueNode), valuePrint: ElmSyntaxPrintDefunctionalized_typeNotParenthesized(syntaxComments, fieldValueNode)), soFar.reverse))
                }
            },
            Generated_endLocation_reverse.Record(endLocation: ElmSyntaxNode_range(syntaxRecordExtension.recordVariable).end, reverse: List_List.List_Empty),
            syntaxRecordExtension.fields
        )
    let generated_let_declarationResult_commentsBeforeRecordVariable: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(syntaxRecordExtension.recordVariable).start, start: syntaxRecordExtension.fullRange.start), syntaxComments)
    let generated_let_declarationResult_commentsCollapsibleBeforeRecordVariable: Generated_lineSpread_print<Print_LineSpread, Print_Print> =
        ElmSyntaxPrintDefunctionalized_collapsibleComments(generated_let_declarationResult_commentsBeforeRecordVariable)
    let generated_let_declarationResult_commentsAfterFields: List_List<String> =
        ElmSyntaxPrintDefunctionalized_commentsInRange(Generated_end_start.Record(end: syntaxRecordExtension.fullRange.end, start: generated_let_declarationResult_fieldPrintsAndComments.endLocation), syntaxComments)
    let generated_let_declarationResult_lineSpread: Print_LineSpread =
        Print_lineSpreadMergeWith(
            { (generated_argument0_right_letDeclaration5_declarationResult_0: Unit) in
                let (_) =
                    generated_argument0_right_letDeclaration5_declarationResult_0
                return
                    switch generated_let_declarationResult_commentsAfterFields {
                    case List_List.List_Empty:
                        Print_LineSpread.Print_SingleLine
                    case List_List.List_Cons(_, _):
                        Print_LineSpread.Print_MultipleLines
                    }
            },
            Print_lineSpreadMergeWith(
                { (generated_argument0_right_left_letDeclaration5_declarationResult_0: Unit) in
                    let (_) =
                        generated_argument0_right_left_letDeclaration5_declarationResult_0
                    return
                        Print_lineSpreadListMapAndCombine(
                            { (field: Generated_maybeCommentsBeforeName_maybeCommentsBetweenNameAndValue_syntax_valuePrint<Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>>, Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>>, Tuple<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>, Print_Print>) in
                                Print_lineSpreadMergeWith(
                                    { (generated_argument0_right_result_argument0_right_result_argument0_right_left_letDeclaration5_declarationResult_0: Unit) in
                                        let (_) =
                                            generated_argument0_right_result_argument0_right_result_argument0_right_left_letDeclaration5_declarationResult_0
                                        return
                                            switch field.maybeCommentsBetweenNameAndValue {
                                            case Maybe_Maybe.Maybe_Nothing:
                                                Print_LineSpread.Print_SingleLine
                                            case let Maybe_Maybe.Maybe_Just(commentsBetweenNameAndValue):
                                                commentsBetweenNameAndValue.lineSpread
                                            }
                                    },
                                    Print_lineSpreadMergeWith(
                                        { (generated_argument0_right_left_result_argument0_right_result_argument0_right_left_letDeclaration5_declarationResult_0: Unit) in
                                            let (_) =
                                                generated_argument0_right_left_result_argument0_right_result_argument0_right_left_letDeclaration5_declarationResult_0
                                            return
                                                switch field.maybeCommentsBeforeName {
                                                case Maybe_Maybe.Maybe_Nothing:
                                                    Print_LineSpread.Print_SingleLine
                                                case let Maybe_Maybe.Maybe_Just(commentsBeforeName):
                                                    commentsBeforeName.lineSpread
                                                }
                                        },
                                        Print_lineSpread(field.valuePrint)
                                    )
                                )
                            },
                            generated_let_declarationResult_fieldPrintsAndComments.reverse
                        )
                },
                Print_lineSpreadMergeWithStrict(generated_let_declarationResult_commentsCollapsibleBeforeRecordVariable.lineSpread, ElmSyntaxPrintDefunctionalized_lineSpreadInRange(syntaxRecordExtension.fullRange))
            )
        )
    let generated_localReturnResult_argument0_right_argument0_argument0_right_left_left_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_commentsAfterFields {
        case List_List.List_Empty:
            Print_empty
        case let List_List.List_Cons(comment0, comment1Up):
            Print_followedBy(ElmSyntaxPrintDefunctionalized_comments(List_cons(comment0, comment1Up)), Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_declarationResult_lineSpread), Print_linebreak))
        }
    let generated_localReturnResult_argument1_argument0_right_left_left_left_letResult_declarationResult: Print_Print =
        switch generated_let_declarationResult_commentsBeforeRecordVariable {
        case List_List.List_Empty:
            generated_let_declarationResult_recordVariablePrint
        case List_List.List_Cons(_, _):
            Print_followedBy(generated_let_declarationResult_recordVariablePrint, Print_followedBy(Print_spaceOrLinebreakIndented(generated_let_declarationResult_commentsCollapsibleBeforeRecordVariable.lineSpread), generated_let_declarationResult_commentsCollapsibleBeforeRecordVariable.print))
        }
    return
        Print_followedBy(
            ElmSyntaxPrintDefunctionalized_printExactlyCurlyClosing,
            Print_followedBy(
                Print_spaceOrLinebreakIndented(generated_let_declarationResult_lineSpread),
                Print_followedBy(
                    Print_withIndentAtNextMultipleOf4(
                        Print_followedBy(
                            generated_localReturnResult_argument0_right_argument0_argument0_right_left_left_letResult_declarationResult,
                            Print_followedBy(
                                Print_listReverseAndMapAndIntersperseAndFlatten(
                                    { (field: Generated_maybeCommentsBeforeName_maybeCommentsBetweenNameAndValue_syntax_valuePrint<Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>>, Maybe_Maybe<Generated_lineSpread_print<Print_LineSpread, Print_Print>>, Tuple<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>, Print_Print>) in
                                        let generated_let_result_argument0_right_argument0_right_left_argument0_argument0_right_left_left_letResult_declarationResult_fieldNameRange: ElmSyntaxRange_Range
                                        let generated_let_result_argument0_right_argument0_right_left_argument0_argument0_right_left_left_letResult_declarationResult_fieldName: String
                                        let generated_let_result_argument0_right_argument0_right_left_argument0_argument0_right_left_left_letResult_declarationResult_fieldValueNode: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>
                                        switch field.syntax {
                                        case let Tuple.Tuple(ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_fieldNameRange, generated_destructured_fieldName), generated_destructured_fieldValueNode):
                                            generated_let_result_argument0_right_argument0_right_left_argument0_argument0_right_left_left_letResult_declarationResult_fieldNameRange =
                                                generated_destructured_fieldNameRange
                                            generated_let_result_argument0_right_argument0_right_left_argument0_argument0_right_left_left_letResult_declarationResult_fieldName =
                                                generated_destructured_fieldName
                                            generated_let_result_argument0_right_argument0_right_left_argument0_argument0_right_left_left_letResult_declarationResult_fieldValueNode =
                                                generated_destructured_fieldValueNode
                                        }
                                        @Sendable func generated_let_result_argument0_right_argument0_right_left_argument0_argument0_right_left_left_letResult_declarationResult_lineSpreadBetweenNameAndValueNotConsideringComments(_ generated_letDeclaration1_result_argument0_right_argument0_right_left_argument0_argument0_right_left_left_letResult_declarationResult_0: Unit) ->  Print_LineSpread {
                                            let (_) =
                                                generated_letDeclaration1_result_argument0_right_argument0_right_left_argument0_argument0_right_left_left_letResult_declarationResult_0
                                            return
                                                Print_lineSpreadMergeWith(
                                                    { (generated_argument0_right_letDeclarationResult_letDeclaration1_result_argument0_right_argument0_right_left_argument0_argument0_right_left_left_letResult_declarationResult_0: Unit) in
                                                        let (_) =
                                                            generated_argument0_right_letDeclarationResult_letDeclaration1_result_argument0_right_argument0_right_left_argument0_argument0_right_left_left_letResult_declarationResult_0
                                                        return Print_lineSpread(field.valuePrint)
                                                    },
                                                    ElmSyntaxPrintDefunctionalized_lineSpreadInRange(Generated_end_start.Record(end: ElmSyntaxNode_range(generated_let_result_argument0_right_argument0_right_left_argument0_argument0_right_left_left_letResult_declarationResult_fieldValueNode).end, start: generated_let_result_argument0_right_argument0_right_left_argument0_argument0_right_left_left_letResult_declarationResult_fieldNameRange.start))
                                                )
                                        }
                                        let generated_localReturnResult_left_argument0_argument0_right_argument1_letResult_result_argument0_right_argument0_right_left_argument0_argument0_right_left_left_letResult_declarationResult: Print_Print =
                                            switch field.maybeCommentsBetweenNameAndValue {
                                            case Maybe_Maybe.Maybe_Nothing:
                                                Print_spaceOrLinebreakIndented(generated_let_result_argument0_right_argument0_right_left_argument0_argument0_right_left_left_letResult_declarationResult_lineSpreadBetweenNameAndValueNotConsideringComments(Unit.Unit))
                                            case let Maybe_Maybe.Maybe_Just(commentsBetweenNameAndValue):
                                                Print_followedBy(
                                                    Print_spaceOrLinebreakIndented(
                                                        Print_lineSpreadMergeWith(
                                                            { (generated_argument0_right_argument0_argument0_right_caseResult_case1_left_argument0_argument0_right_argument1_letResult_result_argument0_right_argument0_right_left_argument0_argument0_right_left_left_letResult_declarationResult_0: Unit) in
                                                                let (_) =
                                                                    generated_argument0_right_argument0_argument0_right_caseResult_case1_left_argument0_argument0_right_argument1_letResult_result_argument0_right_argument0_right_left_argument0_argument0_right_left_left_letResult_declarationResult_0
                                                                return Print_lineSpread(field.valuePrint)
                                                            },
                                                            commentsBetweenNameAndValue.lineSpread
                                                        )
                                                    ),
                                                    Print_followedBy(commentsBetweenNameAndValue.print, Print_spaceOrLinebreakIndented(Print_lineSpreadMergeWith(generated_let_result_argument0_right_argument0_right_left_argument0_argument0_right_left_left_letResult_declarationResult_lineSpreadBetweenNameAndValueNotConsideringComments, commentsBetweenNameAndValue.lineSpread)))
                                                )
                                            }
                                        let generated_localReturnResult_left_argument1_letResult_result_argument0_right_argument0_right_left_argument0_argument0_right_left_left_letResult_declarationResult: Print_Print =
                                            switch field.maybeCommentsBeforeName {
                                            case Maybe_Maybe.Maybe_Nothing:
                                                Print_exactly(String_append(generated_let_result_argument0_right_argument0_right_left_argument0_argument0_right_left_left_letResult_declarationResult_fieldName, " :"))
                                            case let Maybe_Maybe.Maybe_Just(commentsBeforeName):
                                                Print_followedBy(Print_exactly(String_append(generated_let_result_argument0_right_argument0_right_left_argument0_argument0_right_left_left_letResult_declarationResult_fieldName, " :")), Print_followedBy(Print_spaceOrLinebreakIndented(commentsBeforeName.lineSpread), commentsBeforeName.print))
                                            }
                                        return Print_withIndentIncreasedBy(2.0, Print_followedBy(Print_withIndentAtNextMultipleOf4(Print_followedBy(field.valuePrint, generated_localReturnResult_left_argument0_argument0_right_argument1_letResult_result_argument0_right_argument0_right_left_argument0_argument0_right_left_left_letResult_declarationResult)), generated_localReturnResult_left_argument1_letResult_result_argument0_right_argument0_right_left_argument0_argument0_right_left_left_letResult_declarationResult))
                                    },
                                    Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyCommaSpace, Print_emptyOrLinebreakIndented(generated_let_declarationResult_lineSpread)),
                                    generated_let_declarationResult_fieldPrintsAndComments.reverse
                                ),
                                Print_followedBy(ElmSyntaxPrintDefunctionalized_printExactlyVerticalBarSpace, Print_spaceOrLinebreakIndented(generated_let_declarationResult_lineSpread))
                            )
                        )
                    ),
                    Print_followedBy(Print_withIndentIncreasedBy(2.0, generated_localReturnResult_argument1_argument0_right_left_left_left_letResult_declarationResult), ElmSyntaxPrintDefunctionalized_printExactlyCurlyOpeningSpace)
                )
            )
        )
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_typeToFunction(_ typeNode: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) ->  Maybe_Maybe<Generated_inType_outType<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>> {
    switch ElmSyntaxNode_value(ElmSyntaxPrintDefunctionalized_typeToNotParenthesized(typeNode)) {
    case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_FunctionTypeAnnotation(inType, outType):
        Maybe_Maybe.Maybe_Just(Generated_inType_outType.Record(inType: inType, outType: outType))
    case ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_GenericType(_):
        Maybe_Maybe.Maybe_Nothing
    case ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Typed(_, _):
        Maybe_Maybe.Maybe_Nothing
    case ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Unit:
        Maybe_Maybe.Maybe_Nothing
    case ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Tupled(_):
        Maybe_Maybe.Maybe_Nothing
    case ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Record(_):
        Maybe_Maybe.Maybe_Nothing
    case ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_GenericRecord(_, _):
        Maybe_Maybe.Maybe_Nothing
    }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_typeToNotParenthesized(_ generated_0: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) ->  ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation> {
    let typeRange: ElmSyntaxRange_Range
    let syntaxType: ElmSyntaxTypeAnnotation_TypeAnnotation
    switch generated_0 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_typeRange, generated_destructured_syntaxType):
        typeRange =
            generated_destructured_typeRange
        syntaxType =
            generated_destructured_syntaxType
    }
    return
        switch syntaxType {
        case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_GenericType(name):
            ElmSyntaxNode_Node.ElmSyntaxNode_Node(typeRange, ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_GenericType(name))
        case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Typed(reference, arguments):
            ElmSyntaxNode_Node.ElmSyntaxNode_Node(typeRange, ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Typed(reference, arguments))
        case ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Unit:
            ElmSyntaxNode_Node.ElmSyntaxNode_Node(typeRange, ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Unit)
        case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Tupled(parts):
            switch parts {
            case let List_List.List_Cons(inParens, List_List.List_Empty):
                ElmSyntaxPrintDefunctionalized_typeToNotParenthesized(inParens)
            case List_List.List_Empty:
                ElmSyntaxNode_Node.ElmSyntaxNode_Node(typeRange, ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Unit)
            case let List_List.List_Cons(part0, List_List.List_Cons(part1, List_List.List_Empty)):
                ElmSyntaxNode_Node.ElmSyntaxNode_Node(
                    typeRange,
                    ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Tupled(
                        Array_toList(
                            [ part0,
                              part1
                            ]
                        )
                    )
                )
            case let List_List.List_Cons(part0, List_List.List_Cons(part1, List_List.List_Cons(part2, List_List.List_Empty))):
                ElmSyntaxNode_Node.ElmSyntaxNode_Node(
                    typeRange,
                    ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Tupled(
                        Array_toList(
                            [ part0,
                              part1,
                              part2
                            ]
                        )
                    )
                )
            case let List_List.List_Cons(part0, List_List.List_Cons(part1, List_List.List_Cons(part2, List_List.List_Cons(part3, part4Up)))):
                ElmSyntaxNode_Node.ElmSyntaxNode_Node(typeRange, ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Tupled(List_cons(part0, List_cons(part1, List_cons(part2, List_cons(part3, part4Up))))))
            }
        case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Record(fields):
            ElmSyntaxNode_Node.ElmSyntaxNode_Node(typeRange, ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Record(fields))
        case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_GenericRecord(extendedRecordVariableName, additionalFieldsNode):
            ElmSyntaxNode_Node.ElmSyntaxNode_Node(typeRange, ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_GenericRecord(extendedRecordVariableName, additionalFieldsNode))
        case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_FunctionTypeAnnotation(inType, outType):
            ElmSyntaxNode_Node.ElmSyntaxNode_Node(typeRange, ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_FunctionTypeAnnotation(inType, outType))
        }
}

@Sendable public static func ElmSyntaxPrintDefunctionalized_unsafeHexDigitIntToString(_ int: Double) ->  String {
    switch int {
    case 0:
        "0"
    case 1:
        "1"
    case 2:
        "2"
    case 3:
        "3"
    case 4:
        "4"
    case 5:
        "5"
    case 6:
        "6"
    case 7:
        "7"
    case 8:
        "8"
    case 9:
        "9"
    case 10:
        "A"
    case 11:
        "B"
    case 12:
        "C"
    case 13:
        "D"
    case 14:
        "E"
    case _:
        "F"
    }
}

@Sendable public static func ElmSyntaxPrint_case_(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxCase: ElmSyntaxExpression_Case, _ generated_2: Generated_indent<Double>) ->  String {
    Print_toStringWithIndent(generated_2.indent, ElmSyntaxPrintDefunctionalized_case_(syntaxComments, syntaxCase))
}

@Sendable public static func ElmSyntaxPrint_comment(_ syntaxComment: String, _ generated_1: Generated_indent<Double>) ->  String {
    Print_toStringWithIndent(generated_1.indent, ElmSyntaxPrintDefunctionalized_comment(syntaxComment))
}

@Sendable public static func ElmSyntaxPrint_comments(_ syntaxComments: List_List<String>, _ generated_1: Generated_indent<Double>) ->  String {
    Print_toStringWithIndent(generated_1.indent, ElmSyntaxPrintDefunctionalized_comments(syntaxComments))
}

@Sendable public static func ElmSyntaxPrint_declaration(_ syntaxComments: Generated_comments_portDocumentationComment<List_List<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxNode_Node<String>>>, _ syntaxDeclaration: ElmSyntaxDeclaration_Declaration, _ generated_2: Generated_indent<Double>) ->  String {
    Print_toStringWithIndent(generated_2.indent, ElmSyntaxPrintDefunctionalized_declaration(syntaxComments, syntaxDeclaration))
}

@Sendable public static func ElmSyntaxPrint_declarationChoiceType(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxChoiceTypeDeclaration: ElmSyntaxType_Type, _ generated_2: Generated_indent<Double>) ->  String {
    Print_toStringWithIndent(generated_2.indent, ElmSyntaxPrintDefunctionalized_declarationChoiceType(syntaxComments, syntaxChoiceTypeDeclaration))
}

@Sendable public static func ElmSyntaxPrint_declarationExpression(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxExpressionDeclaration: ElmSyntaxExpression_Function, _ generated_2: Generated_indent<Double>) ->  String {
    Print_toStringWithIndent(generated_2.indent, ElmSyntaxPrintDefunctionalized_declarationExpression(syntaxComments, syntaxExpressionDeclaration))
}

@Sendable public static func ElmSyntaxPrint_declarationInfix(_ syntaxInfixDeclaration: ElmSyntaxInfix_Infix, _ generated_1: Generated_indent<Double>) ->  String {
    Print_toStringWithIndent(generated_1.indent, ElmSyntaxPrintDefunctionalized_declarationInfix(syntaxInfixDeclaration))
}

@Sendable public static func ElmSyntaxPrint_declarationPort(_ syntaxComments: Generated_comments_documentationComment<List_List<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxNode_Node<String>>>, _ signature: ElmSyntaxSignature_Signature, _ generated_2: Generated_indent<Double>) ->  String {
    Print_toStringWithIndent(generated_2.indent, ElmSyntaxPrintDefunctionalized_declarationPort(syntaxComments, signature))
}

@Sendable public static func ElmSyntaxPrint_declarationSignature(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ signature: ElmSyntaxSignature_Signature, _ generated_2: Generated_indent<Double>) ->  String {
    Print_toStringWithIndent(generated_2.indent, ElmSyntaxPrintDefunctionalized_declarationSignature(syntaxComments, signature))
}

@Sendable public static func ElmSyntaxPrint_declarationTypeAlias(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxTypeAliasDeclaration: ElmSyntaxTypeAlias_TypeAlias, _ generated_2: Generated_indent<Double>) ->  String {
    Print_toStringWithIndent(generated_2.indent, ElmSyntaxPrintDefunctionalized_declarationTypeAlias(syntaxComments, syntaxTypeAliasDeclaration))
}

@Sendable public static func ElmSyntaxPrint_declarations(_ context: Generated_comments_portDocumentationComments_previousEnd<List_List<ElmSyntaxNode_Node<String>>, List_List<ElmSyntaxNode_Node<String>>, ElmSyntaxRange_Location>, _ syntaxDeclarations: List_List<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>, _ generated_2: Generated_indent<Double>) ->  String {
    Print_toStringWithIndent(generated_2.indent, ElmSyntaxPrintDefunctionalized_declarations(context, syntaxDeclarations))
}

@Sendable public static func ElmSyntaxPrint_expose(_ syntaxExpose: ElmSyntaxExposing_TopLevelExpose, _ generated_1: Generated_indent<Double>) ->  String {
    let (_) =
        generated_1
    return ElmSyntaxPrintDefunctionalized_expose(syntaxExpose)
}

@Sendable public static func ElmSyntaxPrint_expressionNotParenthesized(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ expressionNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, _ generated_2: Generated_indent<Double>) ->  String {
    Print_toStringWithIndent(generated_2.indent, ElmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, expressionNode))
}

@Sendable public static func ElmSyntaxPrint_importExposing(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ importExposingNode: ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>, _ generated_2: Generated_indent<Double>) ->  String {
    Print_toStringWithIndent(generated_2.indent, ElmSyntaxPrintDefunctionalized_importExposing(syntaxComments, importExposingNode))
}

@Sendable public static func ElmSyntaxPrint_import_(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ importNode: ElmSyntaxNode_Node<ElmSyntaxImport_Import>, _ generated_2: Generated_indent<Double>) ->  String {
    Print_toStringWithIndent(generated_2.indent, ElmSyntaxPrintDefunctionalized_import_(syntaxComments, importNode))
}

@Sendable public static func ElmSyntaxPrint_imports(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxImports: List_List<ElmSyntaxNode_Node<ElmSyntaxImport_Import>>, _ generated_2: Generated_indent<Double>) ->  String {
    Print_toStringWithIndent(generated_2.indent, ElmSyntaxPrintDefunctionalized_imports(syntaxComments, syntaxImports))
}

@Sendable public static func ElmSyntaxPrint_moduleExposing(_ context: Generated_atDocsLines_comments<List_List<List_List<String>>, List_List<ElmSyntaxNode_Node<String>>>, _ moduleExposingNode: ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>, _ generated_2: Generated_indent<Double>) ->  String {
    Print_toStringWithIndent(generated_2.indent, ElmSyntaxPrintDefunctionalized_moduleExposing(context, moduleExposingNode))
}

@Sendable public static func ElmSyntaxPrint_moduleHeader(_ context: Generated_atDocsLines_comments<List_List<List_List<String>>, List_List<ElmSyntaxNode_Node<String>>>, _ syntaxModuleHeader: ElmSyntaxModule_Module, _ generated_2: Generated_indent<Double>) ->  String {
    Print_toStringWithIndent(generated_2.indent, ElmSyntaxPrintDefunctionalized_moduleHeader(context, syntaxModuleHeader))
}

@Sendable public static func ElmSyntaxPrint_moduleLevelComments(_ syntaxComments: List_List<String>, _ generated_1: Generated_indent<Double>) ->  String {
    Print_toStringWithIndent(generated_1.indent, ElmSyntaxPrintDefunctionalized_moduleLevelComments(syntaxComments))
}

@Sendable public static func ElmSyntaxPrint_moduleName(_ syntaxModuleName: ElmSyntaxModuleName_ModuleName, _ generated_1: Generated_indent<Double>) ->  String {
    let (_) =
        generated_1
    return ElmSyntaxPrintDefunctionalized_moduleName(syntaxModuleName)
}

@Sendable public static func ElmSyntaxPrint_module_(_ syntaxModule: ElmSyntaxFile_File, _ generated_1: Generated_indent<Double>) ->  String {
    Print_toStringWithIndent(generated_1.indent, ElmSyntaxPrintDefunctionalized_module_(syntaxModule))
}

@Sendable public static func ElmSyntaxPrint_patternNotParenthesized(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ patternNode: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, _ generated_2: Generated_indent<Double>) ->  String {
    Print_toStringWithIndent(generated_2.indent, ElmSyntaxPrintDefunctionalized_patternNotParenthesized(syntaxComments, patternNode))
}

@Sendable public static func ElmSyntaxPrint_qualifiedReference(_ syntaxReference: Generated_qualification_unqualified<List_List<String>, String>, _ generated_1: Generated_indent<Double>) ->  String {
    let (_) =
        generated_1
    return ElmSyntaxPrintDefunctionalized_qualifiedReference(syntaxReference)
}

@Sendable public static func ElmSyntaxPrint_toString(_ print: @Sendable @escaping (Generated_indent<Double>) -> String) ->  String {
    print(ElmSyntaxPrint_indent0)
}

@Sendable public static func ElmSyntaxPrint_typeNotParenthesized(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ typeNode: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>, _ generated_2: Generated_indent<Double>) ->  String {
    Print_toStringWithIndent(generated_2.indent, ElmSyntaxPrintDefunctionalized_typeNotParenthesized(syntaxComments, typeNode))
}

@Sendable public static func ElmSyntaxRange_combine(_ ranges: List_List<Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location>>) ->  Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location> {
    switch ranges {
    case List_List.List_Empty:
        ElmSyntaxRange_empty
    case let List_List.List_Cons(head, tail):
        ElmSyntaxRange_combineHelp(tail, head.start, head.end)
    }
}

@Sendable public static func ElmSyntaxRange_combineHelp(_ ranges: List_List<Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location>>, _ previousStart: ElmSyntaxRange_Location, _ previousEnd: ElmSyntaxRange_Location) ->  Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location> {
    let generated_localReturnResult_declarationResult: Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location>
    switch ranges {
    case List_List.List_Empty:
        generated_localReturnResult_declarationResult =
            Generated_end_start.Record(end: previousEnd, start: previousStart)
    case let List_List.List_Cons(Generated_end_start.Record(end: end, start: start), rest):
        let generated_let_caseResult_case1_declarationResult_newStart: ElmSyntaxRange_Location =
            switch ElmSyntaxRange_compareLocations(start, previousStart) {
            case Basics_Order.Basics_LT:
                start
            case _:
                previousStart
            }
        let generated_let_caseResult_case1_declarationResult_newEnd: ElmSyntaxRange_Location =
            switch ElmSyntaxRange_compareLocations(end, previousEnd) {
            case Basics_Order.Basics_GT:
                end
            case _:
                previousEnd
            }
        generated_localReturnResult_declarationResult =
            ElmSyntaxRange_combineHelp(rest, generated_let_caseResult_case1_declarationResult_newStart, generated_let_caseResult_case1_declarationResult_newEnd)
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ElmSyntaxRange_compare(_ left: Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location>, _ right: Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location>) ->  Basics_Order {
    switch ElmSyntaxRange_compareLocations(left.start, right.start) {
    case Basics_Order.Basics_EQ:
        ElmSyntaxRange_compareLocations(left.end, right.end)
    case let order:
        order
    }
}

@Sendable public static func ElmSyntaxRange_compareLocations(_ left: Generated_column_row<Double, Double>, _ right: Generated_column_row<Double, Double>) ->  Basics_Order {
    if Basics_lt(left.row, right.row) {
        Basics_Order.Basics_LT
    } else {
        if Basics_gt(left.row, right.row) {
            Basics_Order.Basics_GT
        } else {
            Basics_compare(left.column, right.column)
        }
    }
}

@Sendable public static func ElmSyntaxRange_encode(_ generated_0: Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location>) ->  JsonEncode_Value {
    let start: Generated_column_row<Double, Double>
    let end: Generated_column_row<Double, Double>
    switch generated_0 {
    case let Generated_end_start.Record(end: generated_destructured_end, start: generated_destructured_start):
        end =
            generated_destructured_end
        start =
            generated_destructured_start
    }
    return
        JsonEncode_list(
            JsonEncode_int,
            Array_toList(
                [ start.row,
                  start.column,
                  end.row,
                  end.column
                ]
            )
        )
}

@Sendable public static func ElmSyntaxRange_fromList(_ input: List_List<Double>) ->  JsonDecode_Decoder<Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location>> {
    switch input {
    case let List_List.List_Cons(a, List_List.List_Cons(b, List_List.List_Cons(c, List_List.List_Cons(d, List_List.List_Empty)))):
        JsonDecode_succeed(Generated_end_start.Record(end: Generated_column_row.Record(column: d, row: c), start: Generated_column_row.Record(column: b, row: a)))
    case _:
        JsonDecode_fail("Invalid input list")
    }
}

@Sendable public static func ElmSyntaxSignature_encode(_ generated_0: Generated_name_typeAnnotation<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) ->  JsonEncode_Value {
    let name: ElmSyntaxNode_Node<String>
    let typeAnnotation: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>
    switch generated_0 {
    case let Generated_name_typeAnnotation.Record(name: generated_destructured_name, typeAnnotation: generated_destructured_typeAnnotation):
        name =
            generated_destructured_name
        typeAnnotation =
            generated_destructured_typeAnnotation
    }
    return
        JsonEncode_object(
            Array_toList(
                [ Tuple.Tuple("name", ElmSyntaxNode_encode(JsonEncode_string, name)),
                  Tuple.Tuple("typeAnnotation", ElmSyntaxNode_encode(ElmSyntaxTypeAnnotation_encode, typeAnnotation))
                ]
            )
        )
}

@Sendable public static func ElmSyntaxTypeAlias_encode(_ generated_0: Generated_documentation_generics_name_typeAnnotation<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>, List_List<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) ->  JsonEncode_Value {
    let documentation: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>
    let name: ElmSyntaxNode_Node<String>
    let generics: List_List<ElmSyntaxNode_Node<String>>
    let typeAnnotation: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>
    switch generated_0 {
    case let Generated_documentation_generics_name_typeAnnotation.Record(documentation: generated_destructured_documentation, generics: generated_destructured_generics, name: generated_destructured_name, typeAnnotation: generated_destructured_typeAnnotation):
        documentation =
            generated_destructured_documentation
        generics =
            generated_destructured_generics
        name =
            generated_destructured_name
        typeAnnotation =
            generated_destructured_typeAnnotation
    }
    return
        JsonEncode_object(
            Array_toList(
                [ Tuple.Tuple("documentation", Maybe_withDefault(JsonEncode_null, Maybe_map({ (generated_called_argument0_left_part1_0_argument0_declarationResult_1: ElmSyntaxNode_Node<String>) in ElmSyntaxNode_encode(ElmSyntaxDocumentation_encode, generated_called_argument0_left_part1_0_argument0_declarationResult_1) }, documentation))),
                  Tuple.Tuple("name", ElmSyntaxNode_encode(JsonEncode_string, name)),
                  Tuple.Tuple("generics", JsonEncode_list({ (generated_called_argument0_part1_2_argument0_declarationResult_1: ElmSyntaxNode_Node<String>) in ElmSyntaxNode_encode(JsonEncode_string, generated_called_argument0_part1_2_argument0_declarationResult_1) }, generics)),
                  Tuple.Tuple("typeAnnotation", ElmSyntaxNode_encode(ElmSyntaxTypeAnnotation_encode, typeAnnotation))
                ]
            )
        )
}

@Sendable public static func ElmSyntaxTypeAnnotation_encode(_ typeAnnotation: ElmSyntaxTypeAnnotation_TypeAnnotation) ->  JsonEncode_Value {
    let generated_localReturnResult_declarationResult: JsonEncode_Value
    switch typeAnnotation {
    case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_GenericType(name):
        generated_localReturnResult_declarationResult =
            ElmJsonUtil_encodeTyped("generic", JsonEncode_object(List_singleton(Tuple.Tuple("value", JsonEncode_string(name)))))
    case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Typed(moduleNameAndName, args):
        @Sendable func generated_let_caseResult_case1_declarationResult_inner(_ generated_letDeclaration0_caseResult_case1_declarationResult_0: Tuple<ElmSyntaxModuleName_ModuleName, String>) ->  JsonEncode_Value {
            let mod: ElmSyntaxModuleName_ModuleName
            let n: String
            switch generated_letDeclaration0_caseResult_case1_declarationResult_0 {
            case let Tuple.Tuple(generated_destructured_mod, generated_destructured_n):
                mod =
                    generated_destructured_mod
                n =
                    generated_destructured_n
            }
            return
                JsonEncode_object(
                    Array_toList(
                        [ Tuple.Tuple("moduleName", ElmSyntaxModuleName_encode(mod)),
                          Tuple.Tuple("name", JsonEncode_string(n))
                        ]
                    )
                )
        }
        generated_localReturnResult_declarationResult =
            ElmJsonUtil_encodeTyped(
                "typed",
                JsonEncode_object(
                    Array_toList(
                        [ Tuple.Tuple("moduleNameAndName", ElmSyntaxNode_encode(generated_let_caseResult_case1_declarationResult_inner, moduleNameAndName)),
                          Tuple.Tuple("args", JsonEncode_list({ (generated_called_argument0_part1_1_argument0_right_letResult_caseResult_case1_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in ElmSyntaxNode_encode(ElmSyntaxTypeAnnotation_encode, generated_called_argument0_part1_1_argument0_right_letResult_caseResult_case1_declarationResult_1) }, args))
                        ]
                    )
                )
            )
    case ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Unit:
        generated_localReturnResult_declarationResult =
            ElmJsonUtil_encodeTyped("unit", JsonEncode_object(List_List.List_Empty))
    case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Tupled(t):
        generated_localReturnResult_declarationResult =
            ElmJsonUtil_encodeTyped("tupled", JsonEncode_object(List_singleton(Tuple.Tuple("values", JsonEncode_list({ (generated_called_argument0_part1_0_argument0_right_caseResult_case3_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in ElmSyntaxNode_encode(ElmSyntaxTypeAnnotation_encode, generated_called_argument0_part1_0_argument0_right_caseResult_case3_declarationResult_1) }, t)))))
    case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_FunctionTypeAnnotation(left, right):
        generated_localReturnResult_declarationResult =
            ElmJsonUtil_encodeTyped(
                "function",
                JsonEncode_object(
                    Array_toList(
                        [ Tuple.Tuple("left", ElmSyntaxNode_encode(ElmSyntaxTypeAnnotation_encode, left)),
                          Tuple.Tuple("right", ElmSyntaxNode_encode(ElmSyntaxTypeAnnotation_encode, right))
                        ]
                    )
                )
            )
    case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Record(recordDefinition):
        generated_localReturnResult_declarationResult =
            ElmJsonUtil_encodeTyped("record", JsonEncode_object(List_singleton(Tuple.Tuple("value", ElmSyntaxTypeAnnotation_encodeRecordDefinition(recordDefinition)))))
    case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_GenericRecord(name, recordDefinition):
        generated_localReturnResult_declarationResult =
            ElmJsonUtil_encodeTyped(
                "genericRecord",
                JsonEncode_object(
                    Array_toList(
                        [ Tuple.Tuple("name", ElmSyntaxNode_encode(JsonEncode_string, name)),
                          Tuple.Tuple("values", ElmSyntaxNode_encode(ElmSyntaxTypeAnnotation_encodeRecordDefinition, recordDefinition))
                        ]
                    )
                )
            )
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ElmSyntaxTypeAnnotation_encodeRecordDefinition(_ generated_0: List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordField>>) ->  JsonEncode_Value {
    JsonEncode_list({ (generated_called_argument0_declarationResult_1: ElmSyntaxNode_Node<Tuple<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>>) in ElmSyntaxNode_encode(ElmSyntaxTypeAnnotation_encodeRecordField, generated_called_argument0_declarationResult_1) }, generated_0)
}

@Sendable public static func ElmSyntaxTypeAnnotation_encodeRecordField(_ generated_0: Tuple<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) ->  JsonEncode_Value {
    let name: ElmSyntaxNode_Node<String>
    let ref: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>
    switch generated_0 {
    case let Tuple.Tuple(generated_destructured_name, generated_destructured_ref):
        name =
            generated_destructured_name
        ref =
            generated_destructured_ref
    }
    return
        JsonEncode_object(
            Array_toList(
                [ Tuple.Tuple("name", ElmSyntaxNode_encode(JsonEncode_string, name)),
                  Tuple.Tuple("typeAnnotation", ElmSyntaxNode_encode(ElmSyntaxTypeAnnotation_encode, ref))
                ]
            )
        )
}

@Sendable public static func ElmSyntaxType_encode(_ generated_0: Generated_constructors_documentation_generics_name<List_List<ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>, List_List<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<String>>) ->  JsonEncode_Value {
    let documentation: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>
    let name: ElmSyntaxNode_Node<String>
    let generics: List_List<ElmSyntaxNode_Node<String>>
    let constructors: List_List<ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>
    switch generated_0 {
    case let Generated_constructors_documentation_generics_name.Record(constructors: generated_destructured_constructors, documentation: generated_destructured_documentation, generics: generated_destructured_generics, name: generated_destructured_name):
        constructors =
            generated_destructured_constructors
        documentation =
            generated_destructured_documentation
        generics =
            generated_destructured_generics
        name =
            generated_destructured_name
    }
    return
        JsonEncode_object(
            Array_toList(
                [ Tuple.Tuple("documentation", Maybe_withDefault(JsonEncode_null, Maybe_map({ (generated_called_argument0_left_part1_0_argument0_declarationResult_1: ElmSyntaxNode_Node<String>) in ElmSyntaxNode_encode(ElmSyntaxDocumentation_encode, generated_called_argument0_left_part1_0_argument0_declarationResult_1) }, documentation))),
                  Tuple.Tuple("name", ElmSyntaxNode_encode(JsonEncode_string, name)),
                  Tuple.Tuple("generics", JsonEncode_list({ (generated_called_argument0_part1_2_argument0_declarationResult_1: ElmSyntaxNode_Node<String>) in ElmSyntaxNode_encode(JsonEncode_string, generated_called_argument0_part1_2_argument0_declarationResult_1) }, generics)),
                  Tuple.Tuple("constructors", JsonEncode_list({ (generated_called_argument0_part1_3_argument0_declarationResult_1: ElmSyntaxNode_Node<Generated_arguments_name<List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>, ElmSyntaxNode_Node<String>>>) in ElmSyntaxNode_encode(ElmSyntaxType_encodeValueConstructor, generated_called_argument0_part1_3_argument0_declarationResult_1) }, constructors))
                ]
            )
        )
}

@Sendable public static func ElmSyntaxType_encodeValueConstructor(_ generated_0: Generated_arguments_name<List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>, ElmSyntaxNode_Node<String>>) ->  JsonEncode_Value {
    let name: ElmSyntaxNode_Node<String>
    let arguments: List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>
    switch generated_0 {
    case let Generated_arguments_name.Record(arguments: generated_destructured_arguments, name: generated_destructured_name):
        arguments =
            generated_destructured_arguments
        name =
            generated_destructured_name
    }
    return
        JsonEncode_object(
            Array_toList(
                [ Tuple.Tuple("name", ElmSyntaxNode_encode(JsonEncode_string, name)),
                  Tuple.Tuple("arguments", JsonEncode_list({ (generated_called_argument0_part1_1_argument0_declarationResult_1: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) in ElmSyntaxNode_encode(ElmSyntaxTypeAnnotation_encode, generated_called_argument0_part1_1_argument0_declarationResult_1) }, arguments))
                ]
            )
        )
}

@Sendable public static func ElmWriter_escapeString(_ generated_0: String) ->  String {
    String_replace("\"", "\\\"", generated_0)
}

@Sendable public static func ElmWriter_parensIfContainsSpaces(_ w: StructuredWriter_Writer) ->  StructuredWriter_Writer {
    if String_contains(" ", StructuredWriter_write(w)) {
        StructuredWriter_join(
            Array_toList(
                [ StructuredWriter_string("("),
                  w,
                  StructuredWriter_string(")")
                ]
            )
        )
    } else {
        w
    }
}

@Sendable public static func ElmWriter_startOnDifferentLines(_ xs: List_List<Generated_end_start<ElmSyntaxRange_Location, Generated_column_row<Double, Double>>>) ->  Bool {
    Basics_gt(List_length(ListExtra_unique(List_map(Basics_composeR({ (generated_record: Generated_end_start<ElmSyntaxRange_Location, Generated_column_row<Double, Double>>) in generated_record.start }, { (generated_record: Generated_column_row<Double, Double>) in generated_record.row }), xs))), 1.0)
}

@Sendable public static func ElmWriter_wrapInSurroundingParentheses(_ node: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) ->  ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation> {
    @Sendable func generated_let_declarationResult_withParens(_ n: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) ->  ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation> {
        ElmSyntaxNode_empty(ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Tupled(List_singleton(n)))
    }
    return
        switch ElmSyntaxNode_value(node) {
        case ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_FunctionTypeAnnotation(_, _):
            generated_let_declarationResult_withParens(node)
        case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Typed(_, typeParameters):
            switch typeParameters {
            case List_List.List_Empty:
                node
            case _:
                generated_let_declarationResult_withParens(node)
            }
        case _:
            node
        }
}

@Sendable public static func ElmWriter_write(_ generated_0: StructuredWriter_Writer) ->  String {
    StructuredWriter_write(generated_0)
}

@Sendable public static func ElmWriter_writeChar(_ c: UnicodeScalar) ->  StructuredWriter_Writer {
    let generated_let_declarationResult_escape: String =
        switch c {
        case "\t":
            "'\\"
        case "'":
            "'\\"
        case "\\":
            "'\\"
        case _:
            "'"
        }
    return StructuredWriter_string(String_append(generated_let_declarationResult_escape, String_append(String_fromChar(c), "'")))
}

@Sendable public static func ElmWriter_writeDeclaration(_ generated_0: ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>) ->  StructuredWriter_Writer {
    let decl: ElmSyntaxDeclaration_Declaration
    switch generated_0 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_decl):
        decl =
            generated_destructured_decl
    }
    return
        switch decl {
        case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_FunctionDeclaration(function):
            ElmWriter_writeFunction(function)
        case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_AliasDeclaration(typeAlias):
            ElmWriter_writeTypeAlias(typeAlias)
        case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_CustomTypeDeclaration(type__):
            ElmWriter_writeType(type__)
        case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_PortDeclaration(p):
            ElmWriter_writePortDeclaration(p)
        case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_InfixDeclaration(i):
            ElmWriter_writeInfix(i)
        case let ElmSyntaxDeclaration_Declaration.ElmSyntaxDeclaration_Destructuring(pattern, expression):
            ElmWriter_writeDestructuring(pattern, expression)
        }
}

@Sendable public static func ElmWriter_writeDefaultModuleData(_ generated_0: Generated_exposingList_moduleName<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>) ->  StructuredWriter_Writer {
    let moduleName: ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>
    let exposingList: ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>
    switch generated_0 {
    case let Generated_exposingList_moduleName.Record(exposingList: generated_destructured_exposingList, moduleName: generated_destructured_moduleName):
        exposingList =
            generated_destructured_exposingList
        moduleName =
            generated_destructured_moduleName
    }
    return
        StructuredWriter_spaced(
            Array_toList(
                [ StructuredWriter_string("module"),
                  ElmWriter_writeModuleName(ElmSyntaxNode_value(moduleName)),
                  ElmWriter_writeExposureExpose(ElmSyntaxNode_value(exposingList))
                ]
            )
        )
}

@Sendable public static func ElmWriter_writeDestructuring(_ pattern: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, _ expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) ->  StructuredWriter_Writer {
    StructuredWriter_breaked(
        Array_toList(
            [ StructuredWriter_spaced(
                Array_toList(
                    [ ElmWriter_writePattern(pattern),
                      StructuredWriter_string("=")
                    ]
                )
              ),
              StructuredWriter_indent(4.0, ElmWriter_writeExpression(expression))
            ]
        )
    )
}

@Sendable public static func ElmWriter_writeDocumentation(_ generated_0: ElmSyntaxNode_Node<String>) ->  StructuredWriter_Writer {
    Basics_composeR(ElmSyntaxNode_value, StructuredWriter_string)(generated_0)
}

@Sendable public static func ElmWriter_writeEffectModuleData(_ generated_0: Generated_command_exposingList_moduleName_subscription<Maybe_Maybe<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>, Maybe_Maybe<ElmSyntaxNode_Node<String>>>) ->  StructuredWriter_Writer {
    let moduleName: ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>
    let exposingList: ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>
    let command: Maybe_Maybe<ElmSyntaxNode_Node<String>>
    let subscription: Maybe_Maybe<ElmSyntaxNode_Node<String>>
    switch generated_0 {
    case let Generated_command_exposingList_moduleName_subscription.Record(command: generated_destructured_command, exposingList: generated_destructured_exposingList, moduleName: generated_destructured_moduleName, subscription: generated_destructured_subscription):
        command =
            generated_destructured_command
        exposingList =
            generated_destructured_exposingList
        moduleName =
            generated_destructured_moduleName
        subscription =
            generated_destructured_subscription
    }
    return
        StructuredWriter_spaced(
            Array_toList(
                [ StructuredWriter_string("effect"),
                  StructuredWriter_string("module"),
                  ElmWriter_writeModuleName(ElmSyntaxNode_value(moduleName)),
                  ElmWriter_writeWhere(Tuple.Tuple(command, subscription)),
                  ElmWriter_writeExposureExpose(ElmSyntaxNode_value(exposingList))
                ]
            )
        )
}

@Sendable public static func ElmWriter_writeExpose(_ generated_0: ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>) ->  StructuredWriter_Writer {
    let exp: ElmSyntaxExposing_TopLevelExpose
    switch generated_0 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_exp):
        exp =
            generated_destructured_exp
    }
    return
        switch exp {
        case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_InfixExpose(x):
            StructuredWriter_string(String_append("(", String_append(x, ")")))
        case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_FunctionExpose(f):
            StructuredWriter_string(f)
        case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeOrAliasExpose(t):
            StructuredWriter_string(t)
        case let ElmSyntaxExposing_TopLevelExpose.ElmSyntaxExposing_TypeExpose(Generated_name_open_.Record(name: name, open_: open_)):
            switch open_ {
            case Maybe_Maybe.Maybe_Just(_):
                StructuredWriter_spaced(
                    Array_toList(
                        [ StructuredWriter_string(name),
                          StructuredWriter_string("(..)")
                        ]
                    )
                )
            case Maybe_Maybe.Maybe_Nothing:
                StructuredWriter_string(name)
            }
        }
}

@Sendable public static func ElmWriter_writeExposureExpose(_ x: ElmSyntaxExposing_Exposing) ->  StructuredWriter_Writer {
    let generated_localReturnResult_declarationResult: StructuredWriter_Writer
    switch x {
    case ElmSyntaxExposing_Exposing.ElmSyntaxExposing_All(_):
        generated_localReturnResult_declarationResult =
            StructuredWriter_string("exposing (..)")
    case let ElmSyntaxExposing_Exposing.ElmSyntaxExposing_Explicit(exposeList):
        let generated_let_caseResult_case1_declarationResult_diffLines: Bool =
            ElmWriter_startOnDifferentLines(List_map(ElmSyntaxNode_range, exposeList))
        generated_localReturnResult_declarationResult =
            StructuredWriter_spaced(
                Array_toList(
                    [ StructuredWriter_string("exposing"),
                      StructuredWriter_parensComma(generated_let_caseResult_case1_declarationResult_diffLines, List_map(ElmWriter_writeExpose, exposeList))
                    ]
                )
            )
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ElmWriter_writeExpression(_ generated_0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) ->  StructuredWriter_Writer {
    let range: ElmSyntaxRange_Range
    let inner: ElmSyntaxExpression_Expression
    switch generated_0 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_range, generated_destructured_inner):
        range =
            generated_destructured_range
        inner =
            generated_destructured_inner
    }
    @Sendable func generated_let_declarationResult_writeRecordSetter(_ generated_letDeclaration0_declarationResult_0: Tuple<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) ->  Tuple<Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location>, StructuredWriter_Writer> {
        let name: ElmSyntaxNode_Node<String>
        let expr: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
        switch generated_letDeclaration0_declarationResult_0 {
        case let Tuple.Tuple(generated_destructured_name, generated_destructured_expr):
            name =
                generated_destructured_name
            expr =
                generated_destructured_expr
        }
        return
            Tuple.Tuple(
                ElmSyntaxNode_range(expr),
                StructuredWriter_spaced(
                    Array_toList(
                        [ StructuredWriter_string(ElmSyntaxNode_value(name)),
                          StructuredWriter_string("="),
                          ElmWriter_writeExpression(expr)
                        ]
                    )
                )
            )
    }
    @Sendable func generated_let_declarationResult_sepHelper(_ f: @Sendable @escaping (Bool) -> (List_List<StructuredWriter_Writer>) -> StructuredWriter_Writer, _ l: List_List<Tuple<ElmSyntaxRange_Range, StructuredWriter_Writer>>) ->  StructuredWriter_Writer {
        let generated_let_letDeclarationResult_letDeclaration1_declarationResult_diffLines: Bool =
            ElmWriter_startOnDifferentLines(List_map(Tuple_first, l))
        return f(generated_let_letDeclarationResult_letDeclaration1_declarationResult_diffLines)(List_map(Tuple_second, l))
    }
    @Sendable func generated_let_declarationResult_recurRangeHelper(_ generated_letDeclaration2_declarationResult_0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) ->  Tuple<Generated_end_start<ElmSyntaxRange_Location, ElmSyntaxRange_Location>, StructuredWriter_Writer> {
        let x: ElmSyntaxRange_Range
        let y: ElmSyntaxExpression_Expression
        switch generated_letDeclaration2_declarationResult_0 {
        case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(generated_destructured_x, generated_destructured_y):
            x =
                generated_destructured_x
            y =
                generated_destructured_y
        }
        return Tuple.Tuple(x, ElmWriter_writeExpression(ElmSyntaxNode_Node.ElmSyntaxNode_Node(x, y)))
    }
    let generated_localReturnResult_letResult_declarationResult: StructuredWriter_Writer
    switch inner {
    case ElmSyntaxExpression_Expression.ElmSyntaxExpression_UnitExpr:
        generated_localReturnResult_letResult_declarationResult =
            StructuredWriter_string("()")
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_Application(xs):
        generated_localReturnResult_letResult_declarationResult =
            switch xs {
            case List_List.List_Empty:
                StructuredWriter_epsilon
            case let List_List.List_Cons(x, List_List.List_Empty):
                ElmWriter_writeExpression(x)
            case let List_List.List_Cons(x, rest):
                StructuredWriter_spaced(
                    Array_toList(
                        [ ElmWriter_writeExpression(x),
                          generated_let_declarationResult_sepHelper({ (generated_argument0_1_argument0_caseResult_case2_caseResult_case1_letResult_declarationResult_0: Bool) in { (generated_argument0_1_argument0_caseResult_case2_caseResult_case1_letResult_declarationResult_1: List_List<StructuredWriter_Writer>) in StructuredWriter_sepBySpace(generated_argument0_1_argument0_caseResult_case2_caseResult_case1_letResult_declarationResult_0, generated_argument0_1_argument0_caseResult_case2_caseResult_case1_letResult_declarationResult_1) } }, List_map(generated_let_declarationResult_recurRangeHelper, rest))
                        ]
                    )
                )
            }
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_OperatorApplication(x, dir, left, right):
        generated_localReturnResult_letResult_declarationResult =
            switch dir {
            case ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Left:
                generated_let_declarationResult_sepHelper(
                    { (generated_argument0_caseResult_case0_caseResult_case2_letResult_declarationResult_0: Bool) in { (generated_argument0_caseResult_case0_caseResult_case2_letResult_declarationResult_1: List_List<StructuredWriter_Writer>) in StructuredWriter_sepBySpace(generated_argument0_caseResult_case0_caseResult_case2_letResult_declarationResult_0, generated_argument0_caseResult_case0_caseResult_case2_letResult_declarationResult_1) } },
                    Array_toList(
                        [ Tuple.Tuple(ElmSyntaxNode_range(left), ElmWriter_writeExpression(left)),
                          Tuple.Tuple(
                            range,
                            StructuredWriter_spaced(
                                Array_toList(
                                    [ StructuredWriter_string(x),
                                      ElmWriter_writeExpression(right)
                                    ]
                                )
                            )
                          )
                        ]
                    )
                )
            case ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Right:
                generated_let_declarationResult_sepHelper(
                    { (generated_argument0_caseResult_case1_caseResult_case2_letResult_declarationResult_0: Bool) in { (generated_argument0_caseResult_case1_caseResult_case2_letResult_declarationResult_1: List_List<StructuredWriter_Writer>) in StructuredWriter_sepBySpace(generated_argument0_caseResult_case1_caseResult_case2_letResult_declarationResult_0, generated_argument0_caseResult_case1_caseResult_case2_letResult_declarationResult_1) } },
                    Array_toList(
                        [ Tuple.Tuple(
                            ElmSyntaxNode_range(left),
                            StructuredWriter_spaced(
                                Array_toList(
                                    [ ElmWriter_writeExpression(left),
                                      StructuredWriter_string(x)
                                    ]
                                )
                            )
                          ),
                          Tuple.Tuple(ElmSyntaxNode_range(right), ElmWriter_writeExpression(right))
                        ]
                    )
                )
            case ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Non:
                generated_let_declarationResult_sepHelper(
                    { (generated_argument0_caseResult_case2_caseResult_case2_letResult_declarationResult_0: Bool) in { (generated_argument0_caseResult_case2_caseResult_case2_letResult_declarationResult_1: List_List<StructuredWriter_Writer>) in StructuredWriter_sepBySpace(generated_argument0_caseResult_case2_caseResult_case2_letResult_declarationResult_0, generated_argument0_caseResult_case2_caseResult_case2_letResult_declarationResult_1) } },
                    Array_toList(
                        [ Tuple.Tuple(
                            ElmSyntaxNode_range(left),
                            StructuredWriter_spaced(
                                Array_toList(
                                    [ ElmWriter_writeExpression(left),
                                      StructuredWriter_string(x)
                                    ]
                                )
                            )
                          ),
                          Tuple.Tuple(ElmSyntaxNode_range(right), ElmWriter_writeExpression(right))
                        ]
                    )
                )
            }
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_FunctionOrValue(moduleName, name):
        generated_localReturnResult_letResult_declarationResult =
            switch moduleName {
            case List_List.List_Empty:
                StructuredWriter_string(name)
            case _:
                StructuredWriter_join(
                    Array_toList(
                        [ ElmWriter_writeModuleName(moduleName),
                          StructuredWriter_string("."),
                          StructuredWriter_string(name)
                        ]
                    )
                )
            }
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_IfBlock(condition, thenCase, elseCase):
        generated_localReturnResult_letResult_declarationResult =
            StructuredWriter_breaked(
                Array_toList(
                    [ StructuredWriter_spaced(
                        Array_toList(
                            [ StructuredWriter_string("if"),
                              ElmWriter_writeExpression(condition),
                              StructuredWriter_string("then")
                            ]
                        )
                      ),
                      StructuredWriter_indent(2.0, ElmWriter_writeExpression(thenCase)),
                      StructuredWriter_string("else"),
                      StructuredWriter_indent(2.0, ElmWriter_writeExpression(elseCase))
                    ]
                )
            )
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_PrefixOperator(x):
        generated_localReturnResult_letResult_declarationResult =
            StructuredWriter_string(String_append("(", String_append(x, ")")))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_Operator(x):
        generated_localReturnResult_letResult_declarationResult =
            StructuredWriter_string(x)
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_Hex(h):
        generated_localReturnResult_letResult_declarationResult =
            StructuredWriter_join(
                Array_toList(
                    [ StructuredWriter_string("0x"),
                      StructuredWriter_string(Hex_toString(h))
                    ]
                )
            )
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_Integer(i):
        generated_localReturnResult_letResult_declarationResult =
            StructuredWriter_string(String_fromInt(i))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_Floatable(f):
        generated_localReturnResult_letResult_declarationResult =
            StructuredWriter_string(String_fromFloat(f))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_Negation(x):
        generated_localReturnResult_letResult_declarationResult =
            StructuredWriter_append(StructuredWriter_string("-"), ElmWriter_writeExpression(x))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_Literal(s):
        generated_localReturnResult_letResult_declarationResult =
            StructuredWriter_string(String_append("\"", String_append(s, "\"")))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_CharLiteral(c):
        generated_localReturnResult_letResult_declarationResult =
            ElmWriter_writeChar(c)
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_TupledExpression(t):
        generated_localReturnResult_letResult_declarationResult =
            StructuredWriter_join(
                Array_toList(
                    [ StructuredWriter_string("("),
                      generated_let_declarationResult_sepHelper({ (generated_argument0_1_argument0_caseResult_case13_letResult_declarationResult_0: Bool) in { (generated_argument0_1_argument0_caseResult_case13_letResult_declarationResult_1: List_List<StructuredWriter_Writer>) in StructuredWriter_sepByComma(generated_argument0_1_argument0_caseResult_case13_letResult_declarationResult_0, generated_argument0_1_argument0_caseResult_case13_letResult_declarationResult_1) } }, List_map(generated_let_declarationResult_recurRangeHelper, t)),
                      StructuredWriter_string(")")
                    ]
                )
            )
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_ParenthesizedExpression(x):
        generated_localReturnResult_letResult_declarationResult =
            StructuredWriter_join(
                Array_toList(
                    [ StructuredWriter_string("("),
                      ElmWriter_writeExpression(x),
                      StructuredWriter_string(")")
                    ]
                )
            )
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_LetExpression(letBlock):
        generated_localReturnResult_letResult_declarationResult =
            StructuredWriter_breaked(
                Array_toList(
                    [ StructuredWriter_string("let"),
                      StructuredWriter_indent(2.0, StructuredWriter_breaked(List_map(ElmWriter_writeLetDeclaration, letBlock.declarations))),
                      StructuredWriter_string("in"),
                      StructuredWriter_indent(2.0, ElmWriter_writeExpression(letBlock.expression))
                    ]
                )
            )
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_CaseExpression(caseBlock):
        @Sendable func generated_let_caseResult_case16_letResult_declarationResult_writeCaseBranch(_ generated_letDeclaration0_caseResult_case16_letResult_declarationResult_0: Tuple<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>) ->  StructuredWriter_Writer {
            let pattern: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>
            let expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
            switch generated_letDeclaration0_caseResult_case16_letResult_declarationResult_0 {
            case let Tuple.Tuple(generated_destructured_pattern, generated_destructured_expression):
                pattern =
                    generated_destructured_pattern
                expression =
                    generated_destructured_expression
            }
            return
                StructuredWriter_indent(
                    2.0,
                    StructuredWriter_breaked(
                        Array_toList(
                            [ StructuredWriter_spaced(
                                Array_toList(
                                    [ ElmWriter_writePattern(pattern),
                                      StructuredWriter_string("->")
                                    ]
                                )
                              ),
                              StructuredWriter_indent(2.0, ElmWriter_writeExpression(expression))
                            ]
                        )
                    )
                )
        }
        generated_localReturnResult_letResult_declarationResult =
            StructuredWriter_breaked(
                Array_toList(
                    [ StructuredWriter_string(""),
                      StructuredWriter_spaced(
                        Array_toList(
                            [ StructuredWriter_string("case"),
                              ElmWriter_writeExpression(caseBlock.expression),
                              StructuredWriter_string("of")
                            ]
                        )
                      ),
                      StructuredWriter_breaked(List_map(generated_let_caseResult_case16_letResult_declarationResult_writeCaseBranch, caseBlock.cases)),
                      StructuredWriter_string("")
                    ]
                )
            )
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_LambdaExpression(lambda):
        generated_localReturnResult_letResult_declarationResult =
            StructuredWriter_spaced(
                Array_toList(
                    [ StructuredWriter_join(
                        Array_toList(
                            [ StructuredWriter_string("\\"),
                              StructuredWriter_spaced(List_map(ElmWriter_writePattern, lambda.args))
                            ]
                        )
                      ),
                      StructuredWriter_string("->"),
                      ElmWriter_writeExpression(lambda.expression)
                    ]
                )
            )
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordExpr(setters):
        generated_localReturnResult_letResult_declarationResult =
            generated_let_declarationResult_sepHelper({ (generated_argument0_caseResult_case18_letResult_declarationResult_0: Bool) in { (generated_argument0_caseResult_case18_letResult_declarationResult_1: List_List<StructuredWriter_Writer>) in StructuredWriter_bracesComma(generated_argument0_caseResult_case18_letResult_declarationResult_0, generated_argument0_caseResult_case18_letResult_declarationResult_1) } }, List_map(Basics_composeR(ElmSyntaxNode_value, generated_let_declarationResult_writeRecordSetter), setters))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_ListExpr(xs):
        generated_localReturnResult_letResult_declarationResult =
            generated_let_declarationResult_sepHelper({ (generated_argument0_caseResult_case19_letResult_declarationResult_0: Bool) in { (generated_argument0_caseResult_case19_letResult_declarationResult_1: List_List<StructuredWriter_Writer>) in StructuredWriter_bracketsComma(generated_argument0_caseResult_case19_letResult_declarationResult_0, generated_argument0_caseResult_case19_letResult_declarationResult_1) } }, List_map(generated_let_declarationResult_recurRangeHelper, xs))
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordAccess(expression, accessor):
        generated_localReturnResult_letResult_declarationResult =
            StructuredWriter_join(
                Array_toList(
                    [ ElmWriter_writeExpression(expression),
                      StructuredWriter_string("."),
                      StructuredWriter_string(ElmSyntaxNode_value(accessor))
                    ]
                )
            )
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordAccessFunction(s):
        generated_localReturnResult_letResult_declarationResult =
            if String_startsWith(".", s) {
                StructuredWriter_string(s)
            } else {
                StructuredWriter_join(
                    Array_toList(
                        [ StructuredWriter_string("."),
                          StructuredWriter_string(s)
                        ]
                    )
                )
            }
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_RecordUpdateExpression(name, updates):
        generated_localReturnResult_letResult_declarationResult =
            StructuredWriter_spaced(
                Array_toList(
                    [ StructuredWriter_string("{"),
                      StructuredWriter_string(ElmSyntaxNode_value(name)),
                      StructuredWriter_string("|"),
                      generated_let_declarationResult_sepHelper({ (generated_argument0_3_argument0_caseResult_case22_letResult_declarationResult_0: Bool) in { (generated_argument0_3_argument0_caseResult_case22_letResult_declarationResult_1: List_List<StructuredWriter_Writer>) in StructuredWriter_sepByComma(generated_argument0_3_argument0_caseResult_case22_letResult_declarationResult_0, generated_argument0_3_argument0_caseResult_case22_letResult_declarationResult_1) } }, List_map(Basics_composeR(ElmSyntaxNode_value, generated_let_declarationResult_writeRecordSetter), updates)),
                      StructuredWriter_string("}")
                    ]
                )
            )
    case let ElmSyntaxExpression_Expression.ElmSyntaxExpression_GLSLExpression(s):
        generated_localReturnResult_letResult_declarationResult =
            StructuredWriter_join(
                Array_toList(
                    [ StructuredWriter_string("[glsl|"),
                      StructuredWriter_string(s),
                      StructuredWriter_string("|]")
                    ]
                )
            )
    }
    return generated_localReturnResult_letResult_declarationResult
}

@Sendable public static func ElmWriter_writeFile(_ file: Generated_comments_declarations_imports_moduleDefinition<List_List<ElmSyntaxNode_Node<ElmSyntaxComments_Comment>>, List_List<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>, List_List<ElmSyntaxNode_Node<ElmSyntaxImport_Import>>, ElmSyntaxNode_Node<ElmSyntaxModule_Module>>) ->  StructuredWriter_Writer {
    StructuredWriter_breaked(
        Array_toList(
            [ ElmWriter_writeModule(ElmSyntaxNode_value(file.moduleDefinition)),
              StructuredWriter_breaked(List_map(Basics_composeR(ElmSyntaxNode_value, ElmWriter_writeImport), file.imports)),
              StructuredWriter_breaked(List_map(ElmWriter_writeDeclaration, file.declarations))
            ]
        )
    )
}

@Sendable public static func ElmWriter_writeFunction(_ generated_0: Generated_declaration_documentation_signature<ElmSyntaxNode_Node<ElmSyntaxExpression_FunctionImplementation>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxSignature_Signature>>>) ->  StructuredWriter_Writer {
    let documentation: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>
    let signature: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxSignature_Signature>>
    let declaration: ElmSyntaxNode_Node<ElmSyntaxExpression_FunctionImplementation>
    switch generated_0 {
    case let Generated_declaration_documentation_signature.Record(declaration: generated_destructured_declaration, documentation: generated_destructured_documentation, signature: generated_destructured_signature):
        declaration =
            generated_destructured_declaration
        documentation =
            generated_destructured_documentation
        signature =
            generated_destructured_signature
    }
    return
        StructuredWriter_breaked(
            Array_toList(
                [ StructuredWriter_maybe(Maybe_map(ElmWriter_writeDocumentation, documentation)),
                  StructuredWriter_maybe(Maybe_map(Basics_composeR(ElmSyntaxNode_value, ElmWriter_writeSignature), signature)),
                  ElmWriter_writeFunctionImplementation(ElmSyntaxNode_value(declaration))
                ]
            )
        )
}

@Sendable public static func ElmWriter_writeFunctionImplementation(_ declaration: Generated_arguments_expression_name<List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>, ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, ElmSyntaxNode_Node<String>>) ->  StructuredWriter_Writer {
    StructuredWriter_breaked(
        Array_toList(
            [ StructuredWriter_spaced(
                Array_toList(
                    [ StructuredWriter_string(ElmSyntaxNode_value(declaration.name)),
                      StructuredWriter_spaced(List_map(ElmWriter_writePattern, declaration.arguments)),
                      StructuredWriter_string("=")
                    ]
                )
              ),
              StructuredWriter_indent(4.0, ElmWriter_writeExpression(declaration.expression))
            ]
        )
    )
}

@Sendable public static func ElmWriter_writeImport(_ generated_0: Generated_exposingList_moduleAlias_moduleName<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>, ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>) ->  StructuredWriter_Writer {
    let moduleName: ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>
    let moduleAlias: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>
    let exposingList: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>
    switch generated_0 {
    case let Generated_exposingList_moduleAlias_moduleName.Record(exposingList: generated_destructured_exposingList, moduleAlias: generated_destructured_moduleAlias, moduleName: generated_destructured_moduleName):
        exposingList =
            generated_destructured_exposingList
        moduleAlias =
            generated_destructured_moduleAlias
        moduleName =
            generated_destructured_moduleName
    }
    return
        StructuredWriter_spaced(
            Array_toList(
                [ StructuredWriter_string("import"),
                  ElmWriter_writeModuleName(ElmSyntaxNode_value(moduleName)),
                  StructuredWriter_maybe(
                    Maybe_map(
                        Basics_composeR(
                            ElmSyntaxNode_value,
                            Basics_composeR(
                                ElmWriter_writeModuleName,
                                { (x: StructuredWriter_Writer) in
                                    StructuredWriter_spaced(
                                        Array_toList(
                                            [ StructuredWriter_string("as"),
                                              x
                                            ]
                                        )
                                    )
                                }
                            )
                        ),
                        moduleAlias
                    )
                  ),
                  StructuredWriter_maybe(Maybe_map(Basics_composeR(ElmSyntaxNode_value, ElmWriter_writeExposureExpose), exposingList))
                ]
            )
        )
}

@Sendable public static func ElmWriter_writeInfix(_ generated_0: Generated_direction_function_operator__precedence<ElmSyntaxNode_Node<ElmSyntaxInfix_InfixDirection>, ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<Double>>) ->  StructuredWriter_Writer {
    let direction: ElmSyntaxNode_Node<ElmSyntaxInfix_InfixDirection>
    let precedence: ElmSyntaxNode_Node<Double>
    let operator_: ElmSyntaxNode_Node<String>
    let function: ElmSyntaxNode_Node<String>
    switch generated_0 {
    case let Generated_direction_function_operator__precedence.Record(direction: generated_destructured_direction, function: generated_destructured_function, operator_: generated_destructured_operator_, precedence: generated_destructured_precedence):
        direction =
            generated_destructured_direction
        function =
            generated_destructured_function
        operator_ =
            generated_destructured_operator_
        precedence =
            generated_destructured_precedence
    }
    let generated_localReturnResult_1_argument0_declarationResult: StructuredWriter_Writer =
        switch ElmSyntaxNode_value(direction) {
        case ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Left:
            StructuredWriter_string("left")
        case ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Right:
            StructuredWriter_string("right")
        case ElmSyntaxInfix_InfixDirection.ElmSyntaxInfix_Non:
            StructuredWriter_string("non")
        }
    return
        StructuredWriter_spaced(
            Array_toList(
                [ StructuredWriter_string("infix"),
                  generated_localReturnResult_1_argument0_declarationResult,
                  StructuredWriter_string(String_fromInt(ElmSyntaxNode_value(precedence))),
                  StructuredWriter_string(ElmSyntaxNode_value(operator_)),
                  StructuredWriter_string("="),
                  StructuredWriter_string(ElmSyntaxNode_value(function))
                ]
            )
        )
}

@Sendable public static func ElmWriter_writeLetDeclaration(_ generated_0: ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>) ->  StructuredWriter_Writer {
    let letDeclaration: ElmSyntaxExpression_LetDeclaration
    switch generated_0 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_letDeclaration):
        letDeclaration =
            generated_destructured_letDeclaration
    }
    return
        switch letDeclaration {
        case let ElmSyntaxExpression_LetDeclaration.ElmSyntaxExpression_LetFunction(function):
            ElmWriter_writeFunction(function)
        case let ElmSyntaxExpression_LetDeclaration.ElmSyntaxExpression_LetDestructuring(pattern, expression):
            ElmWriter_writeDestructuring(pattern, expression)
        }
}

@Sendable public static func ElmWriter_writeModule(_ m: ElmSyntaxModule_Module) ->  StructuredWriter_Writer {
    switch m {
    case let ElmSyntaxModule_Module.ElmSyntaxModule_NormalModule(defaultModuleData):
        ElmWriter_writeDefaultModuleData(defaultModuleData)
    case let ElmSyntaxModule_Module.ElmSyntaxModule_PortModule(defaultModuleData):
        StructuredWriter_spaced(
            Array_toList(
                [ StructuredWriter_string("port"),
                  ElmWriter_writeDefaultModuleData(defaultModuleData)
                ]
            )
        )
    case let ElmSyntaxModule_Module.ElmSyntaxModule_EffectModule(effectModuleData):
        ElmWriter_writeEffectModuleData(effectModuleData)
    }
}

@Sendable public static func ElmWriter_writeModuleName(_ moduleName: List_List<String>) ->  StructuredWriter_Writer {
    StructuredWriter_string(String_join(".", moduleName))
}

@Sendable public static func ElmWriter_writePattern(_ generated_0: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) ->  StructuredWriter_Writer {
    let p: ElmSyntaxPattern_Pattern
    switch generated_0 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_p):
        p =
            generated_destructured_p
    }
    return
        switch p {
        case ElmSyntaxPattern_Pattern.ElmSyntaxPattern_AllPattern:
            StructuredWriter_string("_")
        case ElmSyntaxPattern_Pattern.ElmSyntaxPattern_UnitPattern:
            StructuredWriter_string("()")
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_CharPattern(c):
            ElmWriter_writeChar(c)
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_StringPattern(s):
            StructuredWriter_string(String_append("\"", String_append(ElmWriter_escapeString(s), "\"")))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_HexPattern(h):
            StructuredWriter_join(
                Array_toList(
                    [ StructuredWriter_string("0x"),
                      StructuredWriter_string(Hex_toString(h))
                    ]
                )
            )
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_IntPattern(i):
            StructuredWriter_string(String_fromInt(i))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_FloatPattern(f):
            StructuredWriter_string(String_fromFloat(f))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_TuplePattern(inner):
            StructuredWriter_parensComma(false, List_map(ElmWriter_writePattern, inner))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_RecordPattern(inner):
            StructuredWriter_bracesComma(false, List_map(Basics_composeR(ElmSyntaxNode_value, StructuredWriter_string), inner))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_UnConsPattern(left, right):
            StructuredWriter_spaced(
                Array_toList(
                    [ ElmWriter_writePattern(left),
                      StructuredWriter_string("::"),
                      ElmWriter_writePattern(right)
                    ]
                )
            )
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ListPattern(inner):
            StructuredWriter_bracketsComma(false, List_map(ElmWriter_writePattern, inner))
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_VarPattern(var_):
            StructuredWriter_string(var_)
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_NamedPattern(qnr, others):
            StructuredWriter_spaced(
                Array_toList(
                    [ ElmWriter_writeQualifiedNameRef(qnr),
                      StructuredWriter_spaced(List_map(ElmWriter_writePattern, others))
                    ]
                )
            )
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_AsPattern(innerPattern, asName):
            StructuredWriter_spaced(
                Array_toList(
                    [ ElmWriter_writePattern(innerPattern),
                      StructuredWriter_string("as"),
                      StructuredWriter_string(ElmSyntaxNode_value(asName))
                    ]
                )
            )
        case let ElmSyntaxPattern_Pattern.ElmSyntaxPattern_ParenthesizedPattern(innerPattern):
            StructuredWriter_spaced(
                Array_toList(
                    [ StructuredWriter_string("("),
                      ElmWriter_writePattern(innerPattern),
                      StructuredWriter_string(")")
                    ]
                )
            )
        }
}

@Sendable public static func ElmWriter_writePortDeclaration(_ signature: ElmSyntaxSignature_Signature) ->  StructuredWriter_Writer {
    StructuredWriter_spaced(
        Array_toList(
            [ StructuredWriter_string("port"),
              ElmWriter_writeSignature(signature)
            ]
        )
    )
}

@Sendable public static func ElmWriter_writeQualifiedNameRef(_ generated_0: Generated_moduleName_name<List_List<String>, String>) ->  StructuredWriter_Writer {
    let moduleName: List_List<String>
    let name: String
    switch generated_0 {
    case let Generated_moduleName_name.Record(moduleName: generated_destructured_moduleName, name: generated_destructured_name):
        moduleName =
            generated_destructured_moduleName
        name =
            generated_destructured_name
    }
    return
        switch moduleName {
        case List_List.List_Empty:
            StructuredWriter_string(name)
        case _:
            StructuredWriter_join(
                Array_toList(
                    [ ElmWriter_writeModuleName(moduleName),
                      StructuredWriter_string("."),
                      StructuredWriter_string(name)
                    ]
                )
            )
        }
}

@Sendable public static func ElmWriter_writeRecordField(_ generated_0: ElmSyntaxNode_Node<Tuple<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>>) ->  StructuredWriter_Writer {
    let name: ElmSyntaxNode_Node<String>
    let ref: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>
    switch generated_0 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, Tuple.Tuple(generated_destructured_name, generated_destructured_ref)):
        name =
            generated_destructured_name
        ref =
            generated_destructured_ref
    }
    return
        StructuredWriter_spaced(
            Array_toList(
                [ StructuredWriter_string(ElmSyntaxNode_value(name)),
                  StructuredWriter_string(":"),
                  ElmWriter_writeTypeAnnotation(ref)
                ]
            )
        )
}

@Sendable public static func ElmWriter_writeSignature(_ signature: Generated_name_typeAnnotation<ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) ->  StructuredWriter_Writer {
    StructuredWriter_spaced(
        Array_toList(
            [ StructuredWriter_string(ElmSyntaxNode_value(signature.name)),
              StructuredWriter_string(":"),
              ElmWriter_writeTypeAnnotation(signature.typeAnnotation)
            ]
        )
    )
}

@Sendable public static func ElmWriter_writeType(_ type__: Generated_constructors_documentation_generics_name<List_List<ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>, Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>, List_List<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<String>>) ->  StructuredWriter_Writer {
    let generated_let_1_argument0_declarationResult_diffLines: Bool =
        ElmWriter_startOnDifferentLines(List_map(ElmSyntaxNode_range, type__.constructors))
    return
        StructuredWriter_breaked(
            Array_toList(
                [ StructuredWriter_spaced(
                    Array_toList(
                        [ StructuredWriter_string("type"),
                          StructuredWriter_string(ElmSyntaxNode_value(type__.name)),
                          StructuredWriter_spaced(List_map(Basics_composeR(ElmSyntaxNode_value, StructuredWriter_string), type__.generics))
                        ]
                    )
                  ),
                  StructuredWriter_indent(4.0, StructuredWriter_sepBy(Triple.Triple("= ", " | ", ""), generated_let_1_argument0_declarationResult_diffLines, List_map(Basics_composeR(ElmSyntaxNode_value, ElmWriter_writeValueConstructor), type__.constructors)))
                ]
            )
        )
}

@Sendable public static func ElmWriter_writeTypeAlias(_ typeAlias: Generated_documentation_generics_name_typeAnnotation<Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>, List_List<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<String>, ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>) ->  StructuredWriter_Writer {
    StructuredWriter_breaked(
        Array_toList(
            [ StructuredWriter_spaced(
                Array_toList(
                    [ StructuredWriter_string("type alias"),
                      StructuredWriter_string(ElmSyntaxNode_value(typeAlias.name)),
                      StructuredWriter_spaced(List_map(Basics_composeR(ElmSyntaxNode_value, StructuredWriter_string), typeAlias.generics)),
                      StructuredWriter_string("=")
                    ]
                )
              ),
              StructuredWriter_indent(4.0, ElmWriter_writeTypeAnnotation(typeAlias.typeAnnotation))
            ]
        )
    )
}

@Sendable public static func ElmWriter_writeTypeAnnotation(_ generated_0: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) ->  StructuredWriter_Writer {
    let typeAnnotation: ElmSyntaxTypeAnnotation_TypeAnnotation
    switch generated_0 {
    case let ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, generated_destructured_typeAnnotation):
        typeAnnotation =
            generated_destructured_typeAnnotation
    }
    let generated_localReturnResult_declarationResult: StructuredWriter_Writer
    switch typeAnnotation {
    case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_GenericType(s):
        generated_localReturnResult_declarationResult =
            StructuredWriter_string(s)
    case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Typed(ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, Tuple.Tuple(moduleName, name)), args):
        generated_localReturnResult_declarationResult =
            StructuredWriter_spaced(List_cons(StructuredWriter_string(String_join(".", List_append(moduleName, List_singleton(name)))), List_map(Basics_composeR(ElmWriter_writeTypeAnnotation, ElmWriter_parensIfContainsSpaces), args)))
    case ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Unit:
        generated_localReturnResult_declarationResult =
            StructuredWriter_string("()")
    case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Tupled(xs):
        generated_localReturnResult_declarationResult =
            StructuredWriter_parensComma(false, List_map(ElmWriter_writeTypeAnnotation, xs))
    case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_Record(xs):
        generated_localReturnResult_declarationResult =
            StructuredWriter_bracesComma(false, List_map(ElmWriter_writeRecordField, xs))
    case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_GenericRecord(name, fields):
        generated_localReturnResult_declarationResult =
            StructuredWriter_spaced(
                Array_toList(
                    [ StructuredWriter_string("{"),
                      StructuredWriter_string(ElmSyntaxNode_value(name)),
                      StructuredWriter_string("|"),
                      StructuredWriter_sepByComma(false, List_map(ElmWriter_writeRecordField, ElmSyntaxNode_value(fields))),
                      StructuredWriter_string("}")
                    ]
                )
            )
    case let ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_FunctionTypeAnnotation(left, right):
        @Sendable func generated_let_caseResult_case6_declarationResult_addParensForSubTypeAnnotation(_ type__: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) ->  StructuredWriter_Writer {
            switch type__ {
            case ElmSyntaxNode_Node.ElmSyntaxNode_Node(_, ElmSyntaxTypeAnnotation_TypeAnnotation.ElmSyntaxTypeAnnotation_FunctionTypeAnnotation(_, _)):
                StructuredWriter_join(
                    Array_toList(
                        [ StructuredWriter_string("("),
                          ElmWriter_writeTypeAnnotation(type__),
                          StructuredWriter_string(")")
                        ]
                    )
                )
            case _:
                ElmWriter_writeTypeAnnotation(type__)
            }
        }
        generated_localReturnResult_declarationResult =
            StructuredWriter_spaced(
                Array_toList(
                    [ generated_let_caseResult_case6_declarationResult_addParensForSubTypeAnnotation(left),
                      StructuredWriter_string("->"),
                      generated_let_caseResult_case6_declarationResult_addParensForSubTypeAnnotation(right)
                    ]
                )
            )
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ElmWriter_writeValueConstructor(_ generated_0: Generated_arguments_name<List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>, ElmSyntaxNode_Node<String>>) ->  StructuredWriter_Writer {
    let name: ElmSyntaxNode_Node<String>
    let arguments: List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>
    switch generated_0 {
    case let Generated_arguments_name.Record(arguments: generated_destructured_arguments, name: generated_destructured_name):
        arguments =
            generated_destructured_arguments
        name =
            generated_destructured_name
    }
    return StructuredWriter_spaced(List_cons(StructuredWriter_string(ElmSyntaxNode_value(name)), List_map(Basics_composeR(ElmWriter_wrapInSurroundingParentheses, ElmWriter_writeTypeAnnotation), arguments)))
}

@Sendable public static func ElmWriter_writeWhere(_ input: Tuple<Maybe_Maybe<ElmSyntaxNode_Node<String>>, Maybe_Maybe<ElmSyntaxNode_Node<String>>>) ->  StructuredWriter_Writer {
    switch input {
    case Tuple.Tuple(Maybe_Maybe.Maybe_Nothing, Maybe_Maybe.Maybe_Nothing):
        StructuredWriter_epsilon
    case let Tuple.Tuple(Maybe_Maybe.Maybe_Just(x), Maybe_Maybe.Maybe_Nothing):
        StructuredWriter_spaced(
            Array_toList(
                [ StructuredWriter_string("where { command ="),
                  StructuredWriter_string(ElmSyntaxNode_value(x)),
                  StructuredWriter_string("}")
                ]
            )
        )
    case let Tuple.Tuple(Maybe_Maybe.Maybe_Nothing, Maybe_Maybe.Maybe_Just(x)):
        StructuredWriter_spaced(
            Array_toList(
                [ StructuredWriter_string("where { subscription ="),
                  StructuredWriter_string(ElmSyntaxNode_value(x)),
                  StructuredWriter_string("}")
                ]
            )
        )
    case let Tuple.Tuple(Maybe_Maybe.Maybe_Just(x), Maybe_Maybe.Maybe_Just(y)):
        StructuredWriter_spaced(
            Array_toList(
                [ StructuredWriter_string("where { command ="),
                  StructuredWriter_string(ElmSyntaxNode_value(x)),
                  StructuredWriter_string(", subscription ="),
                  StructuredWriter_string(ElmSyntaxNode_value(y)),
                  StructuredWriter_string("}")
                ]
            )
        )
    }
}

@Sendable public static func FormatSingleModule_formatSingleModule(_ originalSource: String) ->  String {
    switch ElmSyntaxParserLenient_run(ElmSyntaxParserLenient_module_, originalSource) {
    case let Maybe_Maybe.Maybe_Just(syntaxModule):
        ElmSyntaxPrint_toString({ (generated_right_left_caseResult_case0_declarationResult_1: Generated_indent<Double>) in ElmSyntaxPrint_module_(syntaxModule, generated_right_left_caseResult_case0_declarationResult_1) })
    case Maybe_Maybe.Maybe_Nothing:
        originalSource
    }
}

@Sendable public static func Hex_fromString(_ str: String) ->  Result_Result<String, Double> {
    let generated_localReturnResult_declarationResult: Result_Result<String, Double>
    if String_isEmpty(str) {
        generated_localReturnResult_declarationResult =
            Result_Result.Result_Err("Empty strings are not valid hexadecimal strings.")
    } else {
        let generated_localReturnResult_letDeclaration0_onFalse_declarationResult: Result_Result<String, Double>
        if String_startsWith("-", str) {
            let generated_let_onTrue_letDeclaration0_onFalse_declarationResult_list: List_List<UnicodeScalar> =
                Maybe_withDefault(List_List.List_Empty, List_tail(String_toList(str)))
            generated_localReturnResult_letDeclaration0_onFalse_declarationResult =
                Result_map(Basics_negate, Hex_fromStringHelp(Basics_sub(List_length(generated_let_onTrue_letDeclaration0_onFalse_declarationResult_list), 1.0), generated_let_onTrue_letDeclaration0_onFalse_declarationResult_list, 0.0))
        } else {
            generated_localReturnResult_letDeclaration0_onFalse_declarationResult =
                Hex_fromStringHelp(Basics_sub(String_length(str), 1.0), String_toList(str), 0.0)
        }
        let generated_let_onFalse_declarationResult_result: Result_Result<String, Double> =
            generated_localReturnResult_letDeclaration0_onFalse_declarationResult
        @Sendable func generated_let_onFalse_declarationResult_formatError(_ err: String) ->  String {
            String_join(
                " ",
                Array_toList(
                    [ String_append("\"", String_append(str, "\"")),
                      "is not a valid hexadecimal string because",
                      err
                    ]
                )
            )
        }
        generated_localReturnResult_declarationResult =
            Result_mapError(generated_let_onFalse_declarationResult_formatError, generated_let_onFalse_declarationResult_result)
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func Hex_fromStringHelp(_ position: Double, _ chars: List_List<UnicodeScalar>, _ accumulated: Double) ->  Result_Result<String, Double> {
    switch chars {
    case List_List.List_Empty:
        Result_Result.Result_Ok(accumulated)
    case let List_List.List_Cons(char, rest):
        switch char {
        case "0":
            Hex_fromStringHelp(Basics_sub(position, 1.0), rest, accumulated)
        case "1":
            Hex_fromStringHelp(Basics_sub(position, 1.0), rest, Basics_add(accumulated, Basics_pow(16.0, position)))
        case "2":
            Hex_fromStringHelp(Basics_sub(position, 1.0), rest, Basics_add(accumulated, Basics_mul(2.0, Basics_pow(16.0, position))))
        case "3":
            Hex_fromStringHelp(Basics_sub(position, 1.0), rest, Basics_add(accumulated, Basics_mul(3.0, Basics_pow(16.0, position))))
        case "4":
            Hex_fromStringHelp(Basics_sub(position, 1.0), rest, Basics_add(accumulated, Basics_mul(4.0, Basics_pow(16.0, position))))
        case "5":
            Hex_fromStringHelp(Basics_sub(position, 1.0), rest, Basics_add(accumulated, Basics_mul(5.0, Basics_pow(16.0, position))))
        case "6":
            Hex_fromStringHelp(Basics_sub(position, 1.0), rest, Basics_add(accumulated, Basics_mul(6.0, Basics_pow(16.0, position))))
        case "7":
            Hex_fromStringHelp(Basics_sub(position, 1.0), rest, Basics_add(accumulated, Basics_mul(7.0, Basics_pow(16.0, position))))
        case "8":
            Hex_fromStringHelp(Basics_sub(position, 1.0), rest, Basics_add(accumulated, Basics_mul(8.0, Basics_pow(16.0, position))))
        case "9":
            Hex_fromStringHelp(Basics_sub(position, 1.0), rest, Basics_add(accumulated, Basics_mul(9.0, Basics_pow(16.0, position))))
        case "a":
            Hex_fromStringHelp(Basics_sub(position, 1.0), rest, Basics_add(accumulated, Basics_mul(10.0, Basics_pow(16.0, position))))
        case "b":
            Hex_fromStringHelp(Basics_sub(position, 1.0), rest, Basics_add(accumulated, Basics_mul(11.0, Basics_pow(16.0, position))))
        case "c":
            Hex_fromStringHelp(Basics_sub(position, 1.0), rest, Basics_add(accumulated, Basics_mul(12.0, Basics_pow(16.0, position))))
        case "d":
            Hex_fromStringHelp(Basics_sub(position, 1.0), rest, Basics_add(accumulated, Basics_mul(13.0, Basics_pow(16.0, position))))
        case "e":
            Hex_fromStringHelp(Basics_sub(position, 1.0), rest, Basics_add(accumulated, Basics_mul(14.0, Basics_pow(16.0, position))))
        case "f":
            Hex_fromStringHelp(Basics_sub(position, 1.0), rest, Basics_add(accumulated, Basics_mul(15.0, Basics_pow(16.0, position))))
        case let nonHex:
            Result_Result.Result_Err(String_append(String_fromChar(nonHex), " is not a valid hexadecimal character."))
        }
    }
}

@Sendable public static func Hex_toString(_ num: Double) ->  String {
    let generated_localReturnResult_right_declarationResult: List_List<UnicodeScalar> =
        if Basics_lt(num, 0.0) {
            List_cons("-", Hex_unsafePositiveToDigits(List_List.List_Empty, Basics_negate(num)))
        } else {
            Hex_unsafePositiveToDigits(List_List.List_Empty, num)
        }
    return String_fromList(generated_localReturnResult_right_declarationResult)
}

@Sendable public static func Hex_unsafePositiveToDigits(_ digits: List_List<UnicodeScalar>, _ num: Double) ->  List_List<UnicodeScalar> {
    if Basics_lt(num, 16.0) {
        List_cons(Hex_unsafeToDigit(num), digits)
    } else {
        Hex_unsafePositiveToDigits(List_cons(Hex_unsafeToDigit(Basics_modBy(16.0, num)), digits), Basics_idiv(num, 16.0))
    }
}

@Sendable public static func Hex_unsafeToDigit(_ num: Double) ->  UnicodeScalar {
    switch num {
    case 0:
        "0"
    case 1:
        "1"
    case 2:
        "2"
    case 3:
        "3"
    case 4:
        "4"
    case 5:
        "5"
    case 6:
        "6"
    case 7:
        "7"
    case 8:
        "8"
    case 9:
        "9"
    case 10:
        "a"
    case 11:
        "b"
    case 12:
        "c"
    case 13:
        "d"
    case 14:
        "e"
    case 15:
        "f"
    case _:
        Hex_unsafeToDigit(num)
    }
}

@Sendable public static func ListExtra_find<a: Sendable>(_ predicate: @Sendable @escaping (a) -> Bool, _ list: List_List<a>) ->  Maybe_Maybe<a> {
    switch list {
    case List_List.List_Empty:
        Maybe_Maybe.Maybe_Nothing
    case let List_List.List_Cons(x, xs):
        if predicate(x) {
            Maybe_Maybe.Maybe_Just(x)
        } else {
            ListExtra_find(predicate, xs)
        }
    }
}

@Sendable public static func ListExtra_unique<a: Sendable>(_ list: List_List<a>) ->  List_List<a> {
    ListExtra_uniqueHelp(List_List.List_Empty, list, List_List.List_Empty)
}

@Sendable public static func ListExtra_uniqueHelp<a: Sendable>(_ existing: List_List<a>, _ remaining: List_List<a>, _ accumulator: List_List<a>) ->  List_List<a> {
    switch remaining {
    case List_List.List_Empty:
        accumulator
    case let List_List.List_Cons(first, rest):
        if List_member(first, existing) {
            ListExtra_uniqueHelp(existing, rest, accumulator)
        } else {
            ListExtra_uniqueHelp(List_cons(first, existing), rest, List_cons(first, accumulator))
        }
    }
}

@Sendable public static func ParserAdvanced_andThen<a: Sendable, b: Sendable, c: Sendable, x: Sendable>(_ callback: @Sendable @escaping (a) -> ParserAdvanced_Parser<c, x, b>, _ generated_1: ParserAdvanced_Parser<c, x, a>) ->  ParserAdvanced_Parser<c, x, b> {
    let parseA: @Sendable (ParserAdvanced_State<c>) -> ParserAdvanced_PStep<c, x, a>
    switch generated_1 {
    case let ParserAdvanced_Parser.ParserAdvanced_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    return
        ParserAdvanced_Parser.ParserAdvanced_Parser(
            { (s0: ParserAdvanced_State<c>) in
                let generated_localReturnResult_result_right_declarationResult: ParserAdvanced_PStep<c, x, b>
                switch parseA(s0) {
                case let ParserAdvanced_PStep.ParserAdvanced_Bad(p, x):
                    generated_localReturnResult_result_right_declarationResult =
                        ParserAdvanced_PStep.ParserAdvanced_Bad(p, x)
                case let ParserAdvanced_PStep.ParserAdvanced_Good(p1, a, s1):
                    let generated_let_caseResult_case1_result_right_declarationResult_parseB: @Sendable (ParserAdvanced_State<c>) -> ParserAdvanced_PStep<c, x, b>
                    switch callback(a) {
                    case let ParserAdvanced_Parser.ParserAdvanced_Parser(generated_destructured_parseB):
                        generated_let_caseResult_case1_result_right_declarationResult_parseB =
                            generated_destructured_parseB
                    }
                    generated_localReturnResult_result_right_declarationResult =
                        switch generated_let_caseResult_case1_result_right_declarationResult_parseB(s1) {
                        case let ParserAdvanced_PStep.ParserAdvanced_Bad(p2, x):
                            ParserAdvanced_PStep.ParserAdvanced_Bad(Basics_or(p1, p2), x)
                        case let ParserAdvanced_PStep.ParserAdvanced_Good(p2, b, s2):
                            ParserAdvanced_PStep.ParserAdvanced_Good(Basics_or(p1, p2), b, s2)
                        }
                }
                return generated_localReturnResult_result_right_declarationResult
            }
        )
}

@Sendable public static func ParserAdvanced_backtrackable<a: Sendable, c: Sendable, x: Sendable>(_ generated_0: ParserAdvanced_Parser<c, x, a>) ->  ParserAdvanced_Parser<c, x, a> {
    let parse: @Sendable (ParserAdvanced_State<c>) -> ParserAdvanced_PStep<c, x, a>
    switch generated_0 {
    case let ParserAdvanced_Parser.ParserAdvanced_Parser(generated_destructured_parse):
        parse =
            generated_destructured_parse
    }
    return
        ParserAdvanced_Parser.ParserAdvanced_Parser(
            { (s0: ParserAdvanced_State<c>) in
                switch parse(s0) {
                case let ParserAdvanced_PStep.ParserAdvanced_Bad(_, x):
                    ParserAdvanced_PStep.ParserAdvanced_Bad(false, x)
                case let ParserAdvanced_PStep.ParserAdvanced_Good(_, a, s1):
                    ParserAdvanced_PStep.ParserAdvanced_Good(false, a, s1)
                }
            }
        )
}

@Sendable public static func ParserAdvanced_bagToList<c: Sendable, x: Sendable>(_ bag: ParserAdvanced_Bag<c, x>, _ list: List_List<ParserAdvanced_DeadEnd<c, x>>) ->  List_List<Generated_col_contextStack_problem_row<Double, List_List<Generated_col_context_row<Double, c, Double>>, x, Double>> {
    switch bag {
    case ParserAdvanced_Bag.ParserAdvanced_Empty:
        list
    case let ParserAdvanced_Bag.ParserAdvanced_AddRight(bag1, x):
        ParserAdvanced_bagToList(bag1, List_cons(x, list))
    case let ParserAdvanced_Bag.ParserAdvanced_Append(bag1, bag2):
        ParserAdvanced_bagToList(bag1, ParserAdvanced_bagToList(bag2, list))
    }
}

@Sendable public static func ParserAdvanced_bumpOffset<c: Sendable>(_ newOffset: Double, _ s: Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String>) ->  Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String> {
    Generated_col_context_indent_offset_row_src.Record(col: Basics_add(s.col, Basics_sub(newOffset, s.offset)), context: s.context, indent: s.indent, offset: newOffset, row: s.row, src: s.src)
}

@Sendable public static func ParserAdvanced_changeContext<c: Sendable>(_ newContext: List_List<ParserAdvanced_Located<c>>, _ s: Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String>) ->  Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String> {
    Generated_col_context_indent_offset_row_src.Record(col: s.col, context: newContext, indent: s.indent, offset: s.offset, row: s.row, src: s.src)
}

@Sendable public static func ParserAdvanced_changeIndent<c: Sendable>(_ newIndent: Double, _ s: Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String>) ->  Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String> {
    Generated_col_context_indent_offset_row_src.Record(col: s.col, context: s.context, indent: newIndent, offset: s.offset, row: s.row, src: s.src)
}

@Sendable public static func ParserAdvanced_chompBase10(_ generated_0: Double, _ generated_1: String) ->  Double {
    ElmKernelParser_chompBase10(generated_0, generated_1)
}

@Sendable public static func ParserAdvanced_chompIf<c: Sendable, x: Sendable>(_ isGood: @Sendable @escaping (UnicodeScalar) -> Bool, _ expecting: x) ->  ParserAdvanced_Parser<c, x, Unit> {
    ParserAdvanced_Parser.ParserAdvanced_Parser(
        { (s: Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String>) in
            let generated_let_result_right_declarationResult_newOffset: Double =
                ParserAdvanced_isSubChar(isGood, s.offset, s.src)
            return
                if Basics_eq(generated_let_result_right_declarationResult_newOffset, -1.0) {
                    ParserAdvanced_PStep.ParserAdvanced_Bad(false, ParserAdvanced_fromState(s, expecting))
                } else {
                    if Basics_eq(generated_let_result_right_declarationResult_newOffset, -2.0) {
                        ParserAdvanced_PStep.ParserAdvanced_Good(true, Unit.Unit, Generated_col_context_indent_offset_row_src.Record(col: 1.0, context: s.context, indent: s.indent, offset: Basics_add(s.offset, 1.0), row: Basics_add(s.row, 1.0), src: s.src))
                    } else {
                        ParserAdvanced_PStep.ParserAdvanced_Good(true, Unit.Unit, Generated_col_context_indent_offset_row_src.Record(col: Basics_add(s.col, 1.0), context: s.context, indent: s.indent, offset: generated_let_result_right_declarationResult_newOffset, row: s.row, src: s.src))
                    }
                }
        }
    )
}

@Sendable public static func ParserAdvanced_chompUntil<c: Sendable, x: Sendable>(_ generated_0: ParserAdvanced_Token<x>) ->  ParserAdvanced_Parser<c, x, Unit> {
    let str: String
    let expecting: x
    switch generated_0 {
    case let ParserAdvanced_Token.ParserAdvanced_Token(generated_destructured_str, generated_destructured_expecting):
        str =
            generated_destructured_str
        expecting =
            generated_destructured_expecting
    }
    return
        ParserAdvanced_Parser.ParserAdvanced_Parser(
            { (s: Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String>) in
                let generated_let_result_right_declarationResult_newOffset: Double
                let generated_let_result_right_declarationResult_newRow: Double
                let generated_let_result_right_declarationResult_newCol: Double
                switch ParserAdvanced_findSubString(str, s.offset, s.row, s.col, s.src) {
                case let Triple.Triple(generated_destructured_newOffset, generated_destructured_newRow, generated_destructured_newCol):
                    generated_let_result_right_declarationResult_newOffset =
                        generated_destructured_newOffset
                    generated_let_result_right_declarationResult_newRow =
                        generated_destructured_newRow
                    generated_let_result_right_declarationResult_newCol =
                        generated_destructured_newCol
                }
                return
                    if Basics_eq(generated_let_result_right_declarationResult_newOffset, -1.0) {
                        ParserAdvanced_PStep.ParserAdvanced_Bad(false, ParserAdvanced_fromInfo(generated_let_result_right_declarationResult_newRow, generated_let_result_right_declarationResult_newCol, expecting, s.context))
                    } else {
                        ParserAdvanced_PStep.ParserAdvanced_Good(Basics_lt(s.offset, generated_let_result_right_declarationResult_newOffset), Unit.Unit, Generated_col_context_indent_offset_row_src.Record(col: generated_let_result_right_declarationResult_newCol, context: s.context, indent: s.indent, offset: generated_let_result_right_declarationResult_newOffset, row: generated_let_result_right_declarationResult_newRow, src: s.src))
                    }
            }
        )
}

@Sendable public static func ParserAdvanced_chompUntilEndOr<c: Sendable, x: Sendable>(_ str: String) ->  ParserAdvanced_Parser<c, x, Unit> {
    ParserAdvanced_Parser.ParserAdvanced_Parser(
        { (s: Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String>) in
            let generated_let_result_right_declarationResult_newOffset: Double
            let generated_let_result_right_declarationResult_newRow: Double
            let generated_let_result_right_declarationResult_newCol: Double
            switch ElmKernelParser_findSubString(str, s.offset, s.row, s.col, s.src) {
            case let Triple.Triple(generated_destructured_newOffset, generated_destructured_newRow, generated_destructured_newCol):
                generated_let_result_right_declarationResult_newOffset =
                    generated_destructured_newOffset
                generated_let_result_right_declarationResult_newRow =
                    generated_destructured_newRow
                generated_let_result_right_declarationResult_newCol =
                    generated_destructured_newCol
            }
            let generated_let_result_right_declarationResult_adjustedOffset: Double =
                if Basics_lt(generated_let_result_right_declarationResult_newOffset, 0.0) {
                    String_length(s.src)
                } else {
                    generated_let_result_right_declarationResult_newOffset
                }
            return ParserAdvanced_PStep.ParserAdvanced_Good(Basics_lt(s.offset, generated_let_result_right_declarationResult_adjustedOffset), Unit.Unit, Generated_col_context_indent_offset_row_src.Record(col: generated_let_result_right_declarationResult_newCol, context: s.context, indent: s.indent, offset: generated_let_result_right_declarationResult_adjustedOffset, row: generated_let_result_right_declarationResult_newRow, src: s.src))
        }
    )
}

@Sendable public static func ParserAdvanced_chompWhile<c: Sendable, x: Sendable>(_ isGood: @Sendable @escaping (UnicodeScalar) -> Bool) ->  ParserAdvanced_Parser<c, x, Unit> {
    ParserAdvanced_Parser.ParserAdvanced_Parser({ (s: Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String>) in ParserAdvanced_chompWhileHelp(isGood, s.offset, s.row, s.col, s) })
}

@Sendable public static func ParserAdvanced_chompWhileHelp<c: Sendable, x: Sendable>(_ isGood: @Sendable @escaping (UnicodeScalar) -> Bool, _ offset: Double, _ row: Double, _ col: Double, _ s0: Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String>) ->  ParserAdvanced_PStep<c, x, Unit> {
    let generated_let_declarationResult_newOffset: Double =
        ParserAdvanced_isSubChar(isGood, offset, s0.src)
    return
        if Basics_eq(generated_let_declarationResult_newOffset, -1.0) {
            ParserAdvanced_PStep.ParserAdvanced_Good(Basics_lt(s0.offset, offset), Unit.Unit, Generated_col_context_indent_offset_row_src.Record(col: col, context: s0.context, indent: s0.indent, offset: offset, row: row, src: s0.src))
        } else {
            if Basics_eq(generated_let_declarationResult_newOffset, -2.0) {
                ParserAdvanced_chompWhileHelp(isGood, Basics_add(offset, 1.0), Basics_add(row, 1.0), 1.0, s0)
            } else {
                ParserAdvanced_chompWhileHelp(isGood, generated_let_declarationResult_newOffset, row, Basics_add(col, 1.0), s0)
            }
        }
}

@Sendable public static func ParserAdvanced_commit<a: Sendable, c: Sendable, x: Sendable>(_ a: a) ->  ParserAdvanced_Parser<c, x, a> {
    ParserAdvanced_Parser.ParserAdvanced_Parser({ (s: ParserAdvanced_State<c>) in ParserAdvanced_PStep.ParserAdvanced_Good(true, a, s) })
}

@Sendable public static func ParserAdvanced_consumeBase(_ generated_0: Double, _ generated_1: Double, _ generated_2: String) ->  Tuple<Double, Double> {
    ElmKernelParser_consumeBase(generated_0, generated_1, generated_2)
}

@Sendable public static func ParserAdvanced_consumeBase16(_ generated_0: Double, _ generated_1: String) ->  Tuple<Double, Double> {
    ElmKernelParser_consumeBase16(generated_0, generated_1)
}

@Sendable public static func ParserAdvanced_consumeDotAndExp(_ offset: Double, _ src: String) ->  Double {
    if ParserAdvanced_isAsciiCode(46.0, offset, src) {
        ParserAdvanced_consumeExp(ParserAdvanced_chompBase10(Basics_add(offset, 1.0), src), src)
    } else {
        ParserAdvanced_consumeExp(offset, src)
    }
}

@Sendable public static func ParserAdvanced_consumeExp(_ offset: Double, _ src: String) ->  Double {
    let generated_localReturnResult_declarationResult: Double
    if Basics_or(ParserAdvanced_isAsciiCode(101.0, offset, src), ParserAdvanced_isAsciiCode(69.0, offset, src)) {
        let generated_let_onTrue_declarationResult_eOffset: Double =
            Basics_add(offset, 1.0)
        let generated_let_onTrue_declarationResult_expOffset: Double =
            if Basics_or(ParserAdvanced_isAsciiCode(43.0, generated_let_onTrue_declarationResult_eOffset, src), ParserAdvanced_isAsciiCode(45.0, generated_let_onTrue_declarationResult_eOffset, src)) {
                Basics_add(generated_let_onTrue_declarationResult_eOffset, 1.0)
            } else {
                generated_let_onTrue_declarationResult_eOffset
            }
        let generated_let_onTrue_declarationResult_newOffset: Double =
            ParserAdvanced_chompBase10(generated_let_onTrue_declarationResult_expOffset, src)
        generated_localReturnResult_declarationResult =
            if Basics_eq(generated_let_onTrue_declarationResult_expOffset, generated_let_onTrue_declarationResult_newOffset) {
                -generated_let_onTrue_declarationResult_newOffset
            } else {
                generated_let_onTrue_declarationResult_newOffset
            }
    } else {
        generated_localReturnResult_declarationResult =
            offset
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ParserAdvanced_end<c: Sendable, x: Sendable>(_ x: x) ->  ParserAdvanced_Parser<c, x, Unit> {
    ParserAdvanced_Parser.ParserAdvanced_Parser(
        { (s: Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String>) in
            if Basics_eq(String_length(s.src), s.offset) {
                ParserAdvanced_PStep.ParserAdvanced_Good(false, Unit.Unit, s)
            } else {
                ParserAdvanced_PStep.ParserAdvanced_Bad(false, ParserAdvanced_fromState(s, x))
            }
        }
    )
}

@Sendable public static func ParserAdvanced_finalizeFloat<a: Sendable, c: Sendable, x: Sendable>(_ invalid: x, _ expecting: x, _ intSettings: Result_Result<x, @Sendable (Double) -> a>, _ floatSettings: Result_Result<x, @Sendable (Double) -> a>, _ intPair: Tuple<Double, Double>, _ s: Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String>) ->  ParserAdvanced_PStep<c, x, a> {
    let generated_let_declarationResult_intOffset: Double =
        Tuple_first(intPair)
    let generated_let_declarationResult_floatOffset: Double =
        ParserAdvanced_consumeDotAndExp(generated_let_declarationResult_intOffset, s.src)
    return
        if Basics_lt(generated_let_declarationResult_floatOffset, 0.0) {
            ParserAdvanced_PStep.ParserAdvanced_Bad(true, ParserAdvanced_fromInfo(s.row, Basics_sub(s.col, Basics_add(generated_let_declarationResult_floatOffset, s.offset)), invalid, s.context))
        } else {
            if Basics_eq(s.offset, generated_let_declarationResult_floatOffset) {
                ParserAdvanced_PStep.ParserAdvanced_Bad(false, ParserAdvanced_fromState(s, expecting))
            } else {
                if Basics_eq(generated_let_declarationResult_intOffset, generated_let_declarationResult_floatOffset) {
                    ParserAdvanced_finalizeInt(invalid, intSettings, s.offset, intPair, s)
                } else {
                    switch floatSettings {
                    case let Result_Result.Result_Err(x):
                        ParserAdvanced_PStep.ParserAdvanced_Bad(true, ParserAdvanced_fromState(s, invalid))
                    case let Result_Result.Result_Ok(toValue):
                        switch String_toFloat(String_slice(s.offset, generated_let_declarationResult_floatOffset, s.src)) {
                        case Maybe_Maybe.Maybe_Nothing:
                            ParserAdvanced_PStep.ParserAdvanced_Bad(true, ParserAdvanced_fromState(s, invalid))
                        case let Maybe_Maybe.Maybe_Just(n):
                            ParserAdvanced_PStep.ParserAdvanced_Good(true, toValue(n), ParserAdvanced_bumpOffset(generated_let_declarationResult_floatOffset, s))
                        }
                    }
                }
            }
        }
}

@Sendable public static func ParserAdvanced_finalizeInt<a: Sendable, c: Sendable, x: Sendable>(_ invalid: x, _ handler: Result_Result<x, @Sendable (Double) -> a>, _ startOffset: Double, _ generated_3: Tuple<Double, Double>, _ s: ParserAdvanced_State<c>) ->  ParserAdvanced_PStep<c, x, a> {
    let endOffset: Double
    let n: Double
    switch generated_3 {
    case let Tuple.Tuple(generated_destructured_endOffset, generated_destructured_n):
        endOffset =
            generated_destructured_endOffset
        n =
            generated_destructured_n
    }
    return
        switch handler {
        case let Result_Result.Result_Err(x):
            ParserAdvanced_PStep.ParserAdvanced_Bad(true, ParserAdvanced_fromState(s, x))
        case let Result_Result.Result_Ok(toValue):
            if Basics_eq(startOffset, endOffset) {
                ParserAdvanced_PStep.ParserAdvanced_Bad(Basics_lt(s.offset, startOffset), ParserAdvanced_fromState(s, invalid))
            } else {
                ParserAdvanced_PStep.ParserAdvanced_Good(true, toValue(n), ParserAdvanced_bumpOffset(endOffset, s))
            }
        }
}

@Sendable public static func ParserAdvanced_findSubString(_ generated_0: String, _ generated_1: Double, _ generated_2: Double, _ generated_3: Double, _ generated_4: String) ->  Triple<Double, Double, Double> {
    ElmKernelParser_findSubString(generated_0, generated_1, generated_2, generated_3, generated_4)
}

@Sendable public static func ParserAdvanced_float<c: Sendable, x: Sendable>(_ expecting: x, _ invalid: x) ->  ParserAdvanced_Parser<c, x, Double> {
    ParserAdvanced_number(Generated_binary_expecting_float_hex_int_invalid_octal.Record(binary: Result_Result.Result_Err(invalid), expecting: expecting, float: Result_Result.Result_Ok(Basics_identity), hex: Result_Result.Result_Err(invalid), int: Result_Result.Result_Ok(Basics_identity), invalid: invalid, octal: Result_Result.Result_Err(invalid)))
}

@Sendable public static func ParserAdvanced_fromInfo<c: Sendable, x: Sendable>(_ row: Double, _ col: Double, _ x: x, _ context: List_List<Generated_col_context_row<Double, c, Double>>) ->  ParserAdvanced_Bag<c, x> {
    ParserAdvanced_Bag.ParserAdvanced_AddRight(ParserAdvanced_Bag.ParserAdvanced_Empty, Generated_col_contextStack_problem_row.Record(col: col, contextStack: context, problem: x, row: row))
}

@Sendable public static func ParserAdvanced_fromState<c: Sendable, x: Sendable>(_ s: Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String>, _ x: x) ->  ParserAdvanced_Bag<c, x> {
    ParserAdvanced_Bag.ParserAdvanced_AddRight(ParserAdvanced_Bag.ParserAdvanced_Empty, Generated_col_contextStack_problem_row.Record(col: s.col, contextStack: s.context, problem: x, row: s.row))
}

@Sendable public static func ParserAdvanced_getChompedString<a: Sendable, c: Sendable, x: Sendable>(_ parser: ParserAdvanced_Parser<c, x, a>) ->  ParserAdvanced_Parser<c, x, String> {
    ParserAdvanced_mapChompedString({ (generated_argument0_declarationResult_0: String) in { (generated_argument0_declarationResult_1: a) in Basics_always(generated_argument0_declarationResult_0, generated_argument0_declarationResult_1) } }, parser)
}

@Sendable public static func ParserAdvanced_getCol<c: Sendable, x: Sendable>() ->  ParserAdvanced_Parser<c, x, Double> {
    ParserAdvanced_Parser.ParserAdvanced_Parser({ (s: Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String>) in ParserAdvanced_PStep.ParserAdvanced_Good(false, s.col, s) })
}

@Sendable public static func ParserAdvanced_getIndent<c: Sendable, x: Sendable>() ->  ParserAdvanced_Parser<c, x, Double> {
    ParserAdvanced_Parser.ParserAdvanced_Parser({ (s: Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String>) in ParserAdvanced_PStep.ParserAdvanced_Good(false, s.indent, s) })
}

@Sendable public static func ParserAdvanced_getOffset<c: Sendable, x: Sendable>() ->  ParserAdvanced_Parser<c, x, Double> {
    ParserAdvanced_Parser.ParserAdvanced_Parser({ (s: Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String>) in ParserAdvanced_PStep.ParserAdvanced_Good(false, s.offset, s) })
}

@Sendable public static func ParserAdvanced_getPosition<c: Sendable, x: Sendable>() ->  ParserAdvanced_Parser<c, x, Tuple<Double, Double>> {
    ParserAdvanced_Parser.ParserAdvanced_Parser({ (s: Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String>) in ParserAdvanced_PStep.ParserAdvanced_Good(false, Tuple.Tuple(s.row, s.col), s) })
}

@Sendable public static func ParserAdvanced_getRow<c: Sendable, x: Sendable>() ->  ParserAdvanced_Parser<c, x, Double> {
    ParserAdvanced_Parser.ParserAdvanced_Parser({ (s: Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String>) in ParserAdvanced_PStep.ParserAdvanced_Good(false, s.row, s) })
}

@Sendable public static func ParserAdvanced_getSource<c: Sendable, x: Sendable>() ->  ParserAdvanced_Parser<c, x, String> {
    ParserAdvanced_Parser.ParserAdvanced_Parser({ (s: Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String>) in ParserAdvanced_PStep.ParserAdvanced_Good(false, s.src, s) })
}

@Sendable public static func ParserAdvanced_ignorer<c: Sendable, ignore: Sendable, keep: Sendable, x: Sendable>(_ keepParser: ParserAdvanced_Parser<c, x, keep>, _ ignoreParser: ParserAdvanced_Parser<c, x, ignore>) ->  ParserAdvanced_Parser<c, x, keep> {
    ParserAdvanced_map2({ (generated_argument0_declarationResult_0: keep) in { (generated_argument0_declarationResult_1: ignore) in Basics_always(generated_argument0_declarationResult_0, generated_argument0_declarationResult_1) } }, keepParser, ignoreParser)
}

@Sendable public static func ParserAdvanced_inContext<a: Sendable, context: Sendable, x: Sendable>(_ context: context, _ generated_1: ParserAdvanced_Parser<context, x, a>) ->  ParserAdvanced_Parser<context, x, a> {
    let parse: @Sendable (ParserAdvanced_State<context>) -> ParserAdvanced_PStep<context, x, a>
    switch generated_1 {
    case let ParserAdvanced_Parser.ParserAdvanced_Parser(generated_destructured_parse):
        parse =
            generated_destructured_parse
    }
    return
        ParserAdvanced_Parser.ParserAdvanced_Parser(
            { (s0: Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<context>>, Double, Double, Double, String>) in
                let generated_localReturnResult_result_right_declarationResult: ParserAdvanced_PStep<context, x, a>
                switch parse(ParserAdvanced_changeContext(List_cons(Generated_col_context_row.Record(col: s0.col, context: context, row: s0.row), s0.context), s0)) {
                case let ParserAdvanced_PStep.ParserAdvanced_Good(p, a, s1):
                    generated_localReturnResult_result_right_declarationResult =
                        ParserAdvanced_PStep.ParserAdvanced_Good(p, a, ParserAdvanced_changeContext(s0.context, s1))
                case let ParserAdvanced_PStep.ParserAdvanced_Bad(generated_0, generated_1):
                    let step: ParserAdvanced_PStep<context, x, a> =
                        ParserAdvanced_PStep.ParserAdvanced_Bad(generated_0, generated_1)
                    generated_localReturnResult_result_right_declarationResult =
                        step
                }
                return generated_localReturnResult_result_right_declarationResult
            }
        )
}

@Sendable public static func ParserAdvanced_int<c: Sendable, x: Sendable>(_ expecting: x, _ invalid: x) ->  ParserAdvanced_Parser<c, x, Double> {
    ParserAdvanced_number(Generated_binary_expecting_float_hex_int_invalid_octal.Record(binary: Result_Result.Result_Err(invalid), expecting: expecting, float: Result_Result.Result_Err(invalid), hex: Result_Result.Result_Err(invalid), int: Result_Result.Result_Ok(Basics_identity), invalid: invalid, octal: Result_Result.Result_Err(invalid)))
}

@Sendable public static func ParserAdvanced_isAsciiCode(_ generated_0: Double, _ generated_1: Double, _ generated_2: String) ->  Bool {
    ElmKernelParser_isAsciiCode(generated_0, generated_1, generated_2)
}

@Sendable public static func ParserAdvanced_isChar(_ char: UnicodeScalar) ->  Bool {
    true
}

@Sendable public static func ParserAdvanced_isSubChar(_ generated_0: @Sendable @escaping (UnicodeScalar) -> Bool, _ generated_1: Double, _ generated_2: String) ->  Double {
    ElmKernelParser_isSubChar(generated_0, generated_1, generated_2)
}

@Sendable public static func ParserAdvanced_isSubString(_ generated_0: String, _ generated_1: Double, _ generated_2: Double, _ generated_3: Double, _ generated_4: String) ->  Triple<Double, Double, Double> {
    ElmKernelParser_isSubString(generated_0, generated_1, generated_2, generated_3, generated_4)
}

@Sendable public static func ParserAdvanced_keeper<a: Sendable, b: Sendable, c: Sendable, x: Sendable>(_ parseFunc: ParserAdvanced_Parser<c, x, @Sendable (a) -> b>, _ parseArg: ParserAdvanced_Parser<c, x, a>) ->  ParserAdvanced_Parser<c, x, b> {
    ParserAdvanced_map2({ (generated_left: @Sendable @escaping (a) -> b) in { (generated_right: a) in Basics_apL(generated_left, generated_right) } }, parseFunc, parseArg)
}

@Sendable public static func ParserAdvanced_keyword<c: Sendable, x: Sendable>(_ generated_0: ParserAdvanced_Token<x>) ->  ParserAdvanced_Parser<c, x, Unit> {
    let kwd: String
    let expecting: x
    switch generated_0 {
    case let ParserAdvanced_Token.ParserAdvanced_Token(generated_destructured_kwd, generated_destructured_expecting):
        kwd =
            generated_destructured_kwd
        expecting =
            generated_destructured_expecting
    }
    let generated_let_declarationResult_progress: Bool =
        Basics_not(String_isEmpty(kwd))
    return
        ParserAdvanced_Parser.ParserAdvanced_Parser(
            { (s: Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String>) in
                let generated_let_result_right_letResult_declarationResult_newOffset: Double
                let generated_let_result_right_letResult_declarationResult_newRow: Double
                let generated_let_result_right_letResult_declarationResult_newCol: Double
                switch ParserAdvanced_isSubString(kwd, s.offset, s.row, s.col, s.src) {
                case let Triple.Triple(generated_destructured_newOffset, generated_destructured_newRow, generated_destructured_newCol):
                    generated_let_result_right_letResult_declarationResult_newOffset =
                        generated_destructured_newOffset
                    generated_let_result_right_letResult_declarationResult_newRow =
                        generated_destructured_newRow
                    generated_let_result_right_letResult_declarationResult_newCol =
                        generated_destructured_newCol
                }
                return
                    if Basics_or(Basics_eq(generated_let_result_right_letResult_declarationResult_newOffset, -1.0), Basics_le(0.0, ParserAdvanced_isSubChar({ (c: UnicodeScalar) in Basics_or(Char_isAlphaNum(c), Basics_eq(c, "_")) }, generated_let_result_right_letResult_declarationResult_newOffset, s.src))) {
                        ParserAdvanced_PStep.ParserAdvanced_Bad(false, ParserAdvanced_fromState(s, expecting))
                    } else {
                        ParserAdvanced_PStep.ParserAdvanced_Good(generated_let_declarationResult_progress, Unit.Unit, Generated_col_context_indent_offset_row_src.Record(col: generated_let_result_right_letResult_declarationResult_newCol, context: s.context, indent: s.indent, offset: generated_let_result_right_letResult_declarationResult_newOffset, row: generated_let_result_right_letResult_declarationResult_newRow, src: s.src))
                    }
            }
        )
}

@Sendable public static func ParserAdvanced_lazy<a: Sendable, c: Sendable, x: Sendable>(_ thunk: @Sendable @escaping (Unit) -> ParserAdvanced_Parser<c, x, a>) ->  ParserAdvanced_Parser<c, x, a> {
    ParserAdvanced_Parser.ParserAdvanced_Parser(
        { (s: ParserAdvanced_State<c>) in
            let generated_let_result_right_declarationResult_parse: @Sendable (ParserAdvanced_State<c>) -> ParserAdvanced_PStep<c, x, a>
            switch thunk(Unit.Unit) {
            case let ParserAdvanced_Parser.ParserAdvanced_Parser(generated_destructured_parse):
                generated_let_result_right_declarationResult_parse =
                    generated_destructured_parse
            }
            return generated_let_result_right_declarationResult_parse(s)
        }
    )
}

@Sendable public static func ParserAdvanced_lineComment<c: Sendable, x: Sendable>(_ start: ParserAdvanced_Token<x>) ->  ParserAdvanced_Parser<c, x, Unit> {
    ParserAdvanced_ignorer(ParserAdvanced_token(start), ParserAdvanced_chompUntilEndOr("\n"))
}

@Sendable public static func ParserAdvanced_loop<a: Sendable, c: Sendable, state: Sendable, x: Sendable>(_ state: state, _ callback: @Sendable @escaping (state) -> ParserAdvanced_Parser<c, x, ParserAdvanced_Step<state, a>>) ->  ParserAdvanced_Parser<c, x, a> {
    ParserAdvanced_Parser.ParserAdvanced_Parser({ (s: ParserAdvanced_State<c>) in ParserAdvanced_loopHelp(false, state, callback, s) })
}

@Sendable public static func ParserAdvanced_loopHelp<a: Sendable, c: Sendable, state: Sendable, x: Sendable>(_ p: Bool, _ state: state, _ callback: @Sendable @escaping (state) -> ParserAdvanced_Parser<c, x, ParserAdvanced_Step<state, a>>, _ s0: ParserAdvanced_State<c>) ->  ParserAdvanced_PStep<c, x, a> {
    let generated_let_declarationResult_parse: @Sendable (ParserAdvanced_State<c>) -> ParserAdvanced_PStep<c, x, ParserAdvanced_Step<state, a>>
    switch callback(state) {
    case let ParserAdvanced_Parser.ParserAdvanced_Parser(generated_destructured_parse):
        generated_let_declarationResult_parse =
            generated_destructured_parse
    }
    return
        switch generated_let_declarationResult_parse(s0) {
        case let ParserAdvanced_PStep.ParserAdvanced_Good(p1, step, s1):
            switch step {
            case let ParserAdvanced_Step.ParserAdvanced_Loop(newState):
                ParserAdvanced_loopHelp(Basics_or(p, p1), newState, callback, s1)
            case let ParserAdvanced_Step.ParserAdvanced_Done(result):
                ParserAdvanced_PStep.ParserAdvanced_Good(Basics_or(p, p1), result, s1)
            }
        case let ParserAdvanced_PStep.ParserAdvanced_Bad(p1, x):
            ParserAdvanced_PStep.ParserAdvanced_Bad(Basics_or(p, p1), x)
        }
}

@Sendable public static func ParserAdvanced_map<a: Sendable, b: Sendable, c: Sendable, x: Sendable>(_ func_: @Sendable @escaping (a) -> b, _ generated_1: ParserAdvanced_Parser<c, x, a>) ->  ParserAdvanced_Parser<c, x, b> {
    let parse: @Sendable (ParserAdvanced_State<c>) -> ParserAdvanced_PStep<c, x, a>
    switch generated_1 {
    case let ParserAdvanced_Parser.ParserAdvanced_Parser(generated_destructured_parse):
        parse =
            generated_destructured_parse
    }
    return
        ParserAdvanced_Parser.ParserAdvanced_Parser(
            { (s0: ParserAdvanced_State<c>) in
                switch parse(s0) {
                case let ParserAdvanced_PStep.ParserAdvanced_Good(p, a, s1):
                    ParserAdvanced_PStep.ParserAdvanced_Good(p, func_(a), s1)
                case let ParserAdvanced_PStep.ParserAdvanced_Bad(p, x):
                    ParserAdvanced_PStep.ParserAdvanced_Bad(p, x)
                }
            }
        )
}

@Sendable public static func ParserAdvanced_map2<a: Sendable, b: Sendable, c: Sendable, value: Sendable, x: Sendable>(_ func_: @Sendable @escaping (a) -> (b) -> value, _ generated_1: ParserAdvanced_Parser<c, x, a>, _ generated_2: ParserAdvanced_Parser<c, x, b>) ->  ParserAdvanced_Parser<c, x, value> {
    let parseA: @Sendable (ParserAdvanced_State<c>) -> ParserAdvanced_PStep<c, x, a>
    switch generated_1 {
    case let ParserAdvanced_Parser.ParserAdvanced_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserAdvanced_State<c>) -> ParserAdvanced_PStep<c, x, b>
    switch generated_2 {
    case let ParserAdvanced_Parser.ParserAdvanced_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    return
        ParserAdvanced_Parser.ParserAdvanced_Parser(
            { (s0: ParserAdvanced_State<c>) in
                switch parseA(s0) {
                case let ParserAdvanced_PStep.ParserAdvanced_Bad(p, x):
                    ParserAdvanced_PStep.ParserAdvanced_Bad(p, x)
                case let ParserAdvanced_PStep.ParserAdvanced_Good(p1, a, s1):
                    switch parseB(s1) {
                    case let ParserAdvanced_PStep.ParserAdvanced_Bad(p2, x):
                        ParserAdvanced_PStep.ParserAdvanced_Bad(Basics_or(p1, p2), x)
                    case let ParserAdvanced_PStep.ParserAdvanced_Good(p2, b, s2):
                        ParserAdvanced_PStep.ParserAdvanced_Good(Basics_or(p1, p2), func_(a)(b), s2)
                    }
                }
            }
        )
}

@Sendable public static func ParserAdvanced_mapChompedString<a: Sendable, b: Sendable, c: Sendable, x: Sendable>(_ func_: @Sendable @escaping (String) -> (a) -> b, _ generated_1: ParserAdvanced_Parser<c, x, a>) ->  ParserAdvanced_Parser<c, x, b> {
    let parse: @Sendable (ParserAdvanced_State<c>) -> ParserAdvanced_PStep<c, x, a>
    switch generated_1 {
    case let ParserAdvanced_Parser.ParserAdvanced_Parser(generated_destructured_parse):
        parse =
            generated_destructured_parse
    }
    return
        ParserAdvanced_Parser.ParserAdvanced_Parser(
            { (s0: ParserAdvanced_State<c>) in
                switch parse(s0) {
                case let ParserAdvanced_PStep.ParserAdvanced_Bad(p, x):
                    ParserAdvanced_PStep.ParserAdvanced_Bad(p, x)
                case let ParserAdvanced_PStep.ParserAdvanced_Good(p, a, s1):
                    ParserAdvanced_PStep.ParserAdvanced_Good(p, func_(String_slice(s0.offset, s1.offset, s0.src))(a), s1)
                }
            }
        )
}

@Sendable public static func ParserAdvanced_multiComment<c: Sendable, x: Sendable>(_ open_: ParserAdvanced_Token<x>, _ close: ParserAdvanced_Token<x>, _ nestable: ParserAdvanced_Nestable) ->  ParserAdvanced_Parser<c, x, Unit> {
    switch nestable {
    case ParserAdvanced_Nestable.ParserAdvanced_NotNestable:
        ParserAdvanced_ignorer(ParserAdvanced_token(open_), ParserAdvanced_chompUntil(close))
    case ParserAdvanced_Nestable.ParserAdvanced_Nestable:
        ParserAdvanced_nestableComment(open_, close)
    }
}

@Sendable public static func ParserAdvanced_nestableComment<c: Sendable, x: Sendable>(_ generated_0: ParserAdvanced_Token<x>, _ generated_1: ParserAdvanced_Token<x>) ->  ParserAdvanced_Parser<c, x, Unit> {
    let open_: ParserAdvanced_Token<x>
    let oStr: String
    let oX: x
    let (generated_destructured_open_) =
        generated_0
    open_ =
        generated_destructured_open_
    switch open_ {
    case let ParserAdvanced_Token.ParserAdvanced_Token(generated_destructured_oStr, generated_destructured_oX):
        oStr =
            generated_destructured_oStr
        oX =
            generated_destructured_oX
    }
    let close: ParserAdvanced_Token<x>
    let cStr: String
    let cX: x
    let (generated_destructured_close) =
        generated_1
    close =
        generated_destructured_close
    switch close {
    case let ParserAdvanced_Token.ParserAdvanced_Token(generated_destructured_cStr, generated_destructured_cX):
        cStr =
            generated_destructured_cStr
        cX =
            generated_destructured_cX
    }
    let generated_localReturnResult_declarationResult: ParserAdvanced_Parser<c, x, Unit>
    switch String_uncons(oStr) {
    case Maybe_Maybe.Maybe_Nothing:
        generated_localReturnResult_declarationResult =
            ParserAdvanced_problem(oX)
    case let Maybe_Maybe.Maybe_Just(Tuple.Tuple(openChar, _)):
        let generated_localReturnResult_caseResult_case1_declarationResult: ParserAdvanced_Parser<c, x, Unit>
        switch String_uncons(cStr) {
        case Maybe_Maybe.Maybe_Nothing:
            generated_localReturnResult_caseResult_case1_declarationResult =
                ParserAdvanced_problem(cX)
        case let Maybe_Maybe.Maybe_Just(Tuple.Tuple(closeChar, _)):
            @Sendable func generated_let_caseResult_case1_caseResult_case1_declarationResult_isNotRelevant(_ char: UnicodeScalar) ->  Bool {
                Basics_and(Basics_neq(char, openChar), Basics_neq(char, closeChar))
            }
            @Sendable func generated_let_caseResult_case1_caseResult_case1_declarationResult_chompOpen() ->  ParserAdvanced_Parser<c, x, Unit> {
                ParserAdvanced_token(open_)
            }
            generated_localReturnResult_caseResult_case1_declarationResult =
                ParserAdvanced_ignorer(generated_let_caseResult_case1_caseResult_case1_declarationResult_chompOpen(), ParserAdvanced_nestableHelp(generated_let_caseResult_case1_caseResult_case1_declarationResult_isNotRelevant, generated_let_caseResult_case1_caseResult_case1_declarationResult_chompOpen(), ParserAdvanced_token(close), cX, 1.0))
        }
        generated_localReturnResult_declarationResult =
            generated_localReturnResult_caseResult_case1_declarationResult
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ParserAdvanced_nestableHelp<c: Sendable, x: Sendable>(_ isNotRelevant: @Sendable @escaping (UnicodeScalar) -> Bool, _ open_: ParserAdvanced_Parser<c, x, Unit>, _ close: ParserAdvanced_Parser<c, x, Unit>, _ expectingClose: x, _ nestLevel: Double) ->  ParserAdvanced_Parser<c, x, Unit> {
    let generated_localReturnResult_0_argument0_right_declarationResult: ParserAdvanced_Parser<c, x, Unit> =
        if Basics_eq(nestLevel, 1.0) {
            close
        } else {
            ParserAdvanced_andThen(
                { (generated_argument0_right_onFalse_0_argument0_right_declarationResult_0: Unit) in
                    let (_) =
                        generated_argument0_right_onFalse_0_argument0_right_declarationResult_0
                    return ParserAdvanced_nestableHelp(isNotRelevant, open_, close, expectingClose, Basics_sub(nestLevel, 1.0))
                },
                close
            )
        }
    return
        ParserAdvanced_skip(
            ParserAdvanced_chompWhile(isNotRelevant),
            ParserAdvanced_oneOf(
                Array_toList(
                    [ generated_localReturnResult_0_argument0_right_declarationResult,
                      ParserAdvanced_andThen(
                        { (generated_argument0_right_1_argument0_right_declarationResult_0: Unit) in
                            let (_) =
                                generated_argument0_right_1_argument0_right_declarationResult_0
                            return ParserAdvanced_nestableHelp(isNotRelevant, open_, close, expectingClose, Basics_add(nestLevel, 1.0))
                        },
                        open_
                      ),
                      ParserAdvanced_andThen(
                        { (generated_argument0_right_2_argument0_right_declarationResult_0: Unit) in
                            let (_) =
                                generated_argument0_right_2_argument0_right_declarationResult_0
                            return ParserAdvanced_nestableHelp(isNotRelevant, open_, close, expectingClose, nestLevel)
                        },
                        ParserAdvanced_chompIf(ParserAdvanced_isChar, expectingClose)
                      )
                    ]
                )
            )
        )
}

@Sendable public static func ParserAdvanced_number<a: Sendable, c: Sendable, x: Sendable>(_ c: Generated_binary_expecting_float_hex_int_invalid_octal<Result_Result<x, @Sendable (Double) -> a>, x, Result_Result<x, @Sendable (Double) -> a>, Result_Result<x, @Sendable (Double) -> a>, Result_Result<x, @Sendable (Double) -> a>, x, Result_Result<x, @Sendable (Double) -> a>>) ->  ParserAdvanced_Parser<c, x, a> {
    ParserAdvanced_Parser.ParserAdvanced_Parser(
        { (s: Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String>) in
            let generated_localReturnResult_result_right_declarationResult: ParserAdvanced_PStep<c, x, a>
            if ParserAdvanced_isAsciiCode(48.0, s.offset, s.src) {
                let generated_let_onTrue_result_right_declarationResult_zeroOffset: Double =
                    Basics_add(s.offset, 1.0)
                let generated_let_onTrue_result_right_declarationResult_baseOffset: Double =
                    Basics_add(generated_let_onTrue_result_right_declarationResult_zeroOffset, 1.0)
                generated_localReturnResult_result_right_declarationResult =
                    if ParserAdvanced_isAsciiCode(120.0, generated_let_onTrue_result_right_declarationResult_zeroOffset, s.src) {
                        ParserAdvanced_finalizeInt(c.invalid, c.hex, generated_let_onTrue_result_right_declarationResult_baseOffset, ParserAdvanced_consumeBase16(generated_let_onTrue_result_right_declarationResult_baseOffset, s.src), s)
                    } else {
                        if ParserAdvanced_isAsciiCode(111.0, generated_let_onTrue_result_right_declarationResult_zeroOffset, s.src) {
                            ParserAdvanced_finalizeInt(c.invalid, c.octal, generated_let_onTrue_result_right_declarationResult_baseOffset, ParserAdvanced_consumeBase(8.0, generated_let_onTrue_result_right_declarationResult_baseOffset, s.src), s)
                        } else {
                            if ParserAdvanced_isAsciiCode(98.0, generated_let_onTrue_result_right_declarationResult_zeroOffset, s.src) {
                                ParserAdvanced_finalizeInt(c.invalid, c.binary, generated_let_onTrue_result_right_declarationResult_baseOffset, ParserAdvanced_consumeBase(2.0, generated_let_onTrue_result_right_declarationResult_baseOffset, s.src), s)
                            } else {
                                ParserAdvanced_finalizeFloat(c.invalid, c.expecting, c.int, c.float, Tuple.Tuple(generated_let_onTrue_result_right_declarationResult_zeroOffset, 0.0), s)
                            }
                        }
                    }
            } else {
                generated_localReturnResult_result_right_declarationResult =
                    ParserAdvanced_finalizeFloat(c.invalid, c.expecting, c.int, c.float, ParserAdvanced_consumeBase(10.0, s.offset, s.src), s)
            }
            return generated_localReturnResult_result_right_declarationResult
        }
    )
}

@Sendable public static func ParserAdvanced_oneOf<a: Sendable, c: Sendable, x: Sendable>(_ parsers: List_List<ParserAdvanced_Parser<c, x, a>>) ->  ParserAdvanced_Parser<c, x, a> {
    ParserAdvanced_Parser.ParserAdvanced_Parser({ (s: ParserAdvanced_State<c>) in ParserAdvanced_oneOfHelp(s, ParserAdvanced_Bag.ParserAdvanced_Empty, parsers) })
}

@Sendable public static func ParserAdvanced_oneOfHelp<a: Sendable, c: Sendable, x: Sendable>(_ s0: ParserAdvanced_State<c>, _ bag: ParserAdvanced_Bag<c, x>, _ parsers: List_List<ParserAdvanced_Parser<c, x, a>>) ->  ParserAdvanced_PStep<c, x, a> {
    let generated_localReturnResult_declarationResult: ParserAdvanced_PStep<c, x, a>
    switch parsers {
    case List_List.List_Empty:
        generated_localReturnResult_declarationResult =
            ParserAdvanced_PStep.ParserAdvanced_Bad(false, bag)
    case let List_List.List_Cons(ParserAdvanced_Parser.ParserAdvanced_Parser(parse), remainingParsers):
        let generated_localReturnResult_caseResult_case1_declarationResult: ParserAdvanced_PStep<c, x, a>
        switch parse(s0) {
        case let ParserAdvanced_PStep.ParserAdvanced_Good(generated_0, generated_1, generated_2):
            let step: ParserAdvanced_PStep<c, x, a> =
                ParserAdvanced_PStep.ParserAdvanced_Good(generated_0, generated_1, generated_2)
            generated_localReturnResult_caseResult_case1_declarationResult =
                step
        case let ParserAdvanced_PStep.ParserAdvanced_Bad(p, x):
            let step: ParserAdvanced_PStep<c, x, a> =
                ParserAdvanced_PStep.ParserAdvanced_Bad(p, x)
            generated_localReturnResult_caseResult_case1_declarationResult =
                if p {
                    step
                } else {
                    ParserAdvanced_oneOfHelp(s0, ParserAdvanced_Bag.ParserAdvanced_Append(bag, x), remainingParsers)
                }
        }
        generated_localReturnResult_declarationResult =
            generated_localReturnResult_caseResult_case1_declarationResult
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ParserAdvanced_problem<a: Sendable, c: Sendable, x: Sendable>(_ x: x) ->  ParserAdvanced_Parser<c, x, a> {
    ParserAdvanced_Parser.ParserAdvanced_Parser({ (s: ParserAdvanced_State<c>) in ParserAdvanced_PStep.ParserAdvanced_Bad(false, ParserAdvanced_fromState(s, x)) })
}

@Sendable public static func ParserAdvanced_revAlways<a: Sendable, b: Sendable>(_ generated_0: a, _ b: b) ->  b {
    let (_) =
        generated_0
    return b
}

@Sendable public static func ParserAdvanced_run<a: Sendable, c: Sendable, x: Sendable>(_ generated_0: ParserAdvanced_Parser<c, x, a>, _ src: String) ->  Result_Result<List_List<Generated_col_contextStack_problem_row<Double, List_List<Generated_col_context_row<Double, c, Double>>, x, Double>>, a> {
    let parse: @Sendable (ParserAdvanced_State<c>) -> ParserAdvanced_PStep<c, x, a>
    switch generated_0 {
    case let ParserAdvanced_Parser.ParserAdvanced_Parser(generated_destructured_parse):
        parse =
            generated_destructured_parse
    }
    return
        switch parse(Generated_col_context_indent_offset_row_src.Record(col: 1.0, context: List_List.List_Empty, indent: 1.0, offset: 0.0, row: 1.0, src: src)) {
        case let ParserAdvanced_PStep.ParserAdvanced_Good(_, value, _):
            Result_Result.Result_Ok(value)
        case let ParserAdvanced_PStep.ParserAdvanced_Bad(_, bag):
            Result_Result.Result_Err(ParserAdvanced_bagToList(bag, List_List.List_Empty))
        }
}

@Sendable public static func ParserAdvanced_sequence<a: Sendable, c: Sendable, x: Sendable>(_ i: Generated_end_item_separator_spaces_start_trailing<ParserAdvanced_Token<x>, ParserAdvanced_Parser<c, x, a>, ParserAdvanced_Token<x>, ParserAdvanced_Parser<c, x, Unit>, ParserAdvanced_Token<x>, ParserAdvanced_Trailing>) ->  ParserAdvanced_Parser<c, x, List_List<a>> {
    ParserAdvanced_skip(ParserAdvanced_token(i.start), ParserAdvanced_skip(i.spaces, ParserAdvanced_sequenceEnd(ParserAdvanced_token(i.end), i.spaces, i.item, ParserAdvanced_token(i.separator), i.trailing)))
}

@Sendable public static func ParserAdvanced_sequenceEnd<a: Sendable, c: Sendable, x: Sendable>(_ ender: ParserAdvanced_Parser<c, x, Unit>, _ ws: ParserAdvanced_Parser<c, x, Unit>, _ parseItem: ParserAdvanced_Parser<c, x, a>, _ sep: ParserAdvanced_Parser<c, x, Unit>, _ trailing: ParserAdvanced_Trailing) ->  ParserAdvanced_Parser<c, x, List_List<a>> {
    @Sendable func generated_let_declarationResult_chompRest(_ item: a) ->  ParserAdvanced_Parser<c, x, List_List<a>> {
        switch trailing {
        case ParserAdvanced_Trailing.ParserAdvanced_Forbidden:
            ParserAdvanced_loop(List_singleton(item), { (generated_called_argument1_caseResult_case0_letDeclarationResult_letDeclaration0_declarationResult_4: List_List<a>) in ParserAdvanced_sequenceEndForbidden(ender, ws, parseItem, sep, generated_called_argument1_caseResult_case0_letDeclarationResult_letDeclaration0_declarationResult_4) })
        case ParserAdvanced_Trailing.ParserAdvanced_Optional:
            ParserAdvanced_loop(List_singleton(item), { (generated_called_argument1_caseResult_case1_letDeclarationResult_letDeclaration0_declarationResult_4: List_List<a>) in ParserAdvanced_sequenceEndOptional(ender, ws, parseItem, sep, generated_called_argument1_caseResult_case1_letDeclarationResult_letDeclaration0_declarationResult_4) })
        case ParserAdvanced_Trailing.ParserAdvanced_Mandatory:
            ParserAdvanced_ignorer(ParserAdvanced_skip(ws, ParserAdvanced_skip(sep, ParserAdvanced_skip(ws, ParserAdvanced_loop(List_singleton(item), { (generated_called_argument1_right_right_right_argument0_caseResult_case2_letDeclarationResult_letDeclaration0_declarationResult_3: List_List<a>) in ParserAdvanced_sequenceEndMandatory(ws, parseItem, sep, generated_called_argument1_right_right_right_argument0_caseResult_case2_letDeclarationResult_letDeclaration0_declarationResult_3) })))), ender)
        }
    }
    return
        ParserAdvanced_oneOf(
            Array_toList(
                [ ParserAdvanced_andThen(generated_let_declarationResult_chompRest, parseItem),
                  ParserAdvanced_map(
                    { (generated_argument0_right_1_argument0_letResult_declarationResult_0: Unit) in
                        let (_) =
                            generated_argument0_right_1_argument0_letResult_declarationResult_0
                        return List_List.List_Empty
                    },
                    ender
                  )
                ]
            )
        )
}

@Sendable public static func ParserAdvanced_sequenceEndForbidden<a: Sendable, c: Sendable, x: Sendable>(_ ender: ParserAdvanced_Parser<c, x, Unit>, _ ws: ParserAdvanced_Parser<c, x, Unit>, _ parseItem: ParserAdvanced_Parser<c, x, a>, _ sep: ParserAdvanced_Parser<c, x, Unit>, _ revItems: List_List<a>) ->  ParserAdvanced_Parser<c, x, ParserAdvanced_Step<List_List<a>, List_List<a>>> {
    @Sendable func generated_let_declarationResult_chompRest(_ item: a) ->  ParserAdvanced_Parser<c, x, ParserAdvanced_Step<List_List<a>, List_List<a>>> {
        ParserAdvanced_sequenceEndForbidden(ender, ws, parseItem, sep, List_cons(item, revItems))
    }
    return
        ParserAdvanced_skip(
            ws,
            ParserAdvanced_oneOf(
                Array_toList(
                    [ ParserAdvanced_skip(sep, ParserAdvanced_skip(ws, ParserAdvanced_map({ (item: a) in ParserAdvanced_Step.ParserAdvanced_Loop(List_cons(item, revItems)) }, parseItem))),
                      ParserAdvanced_map(
                        { (generated_argument0_right_1_argument0_right_letResult_declarationResult_0: Unit) in
                            let (_) =
                                generated_argument0_right_1_argument0_right_letResult_declarationResult_0
                            return ParserAdvanced_Step.ParserAdvanced_Done(List_reverse(revItems))
                        },
                        ender
                      )
                    ]
                )
            )
        )
}

@Sendable public static func ParserAdvanced_sequenceEndMandatory<a: Sendable, c: Sendable, x: Sendable>(_ ws: ParserAdvanced_Parser<c, x, Unit>, _ parseItem: ParserAdvanced_Parser<c, x, a>, _ sep: ParserAdvanced_Parser<c, x, Unit>, _ revItems: List_List<a>) ->  ParserAdvanced_Parser<c, x, ParserAdvanced_Step<List_List<a>, List_List<a>>> {
    ParserAdvanced_oneOf(
        Array_toList(
            [ ParserAdvanced_map({ (item: a) in ParserAdvanced_Step.ParserAdvanced_Loop(List_cons(item, revItems)) }, ParserAdvanced_ignorer(parseItem, ParserAdvanced_ignorer(ws, ParserAdvanced_ignorer(sep, ws)))),
              ParserAdvanced_map(
                { (generated_argument0_1_argument0_declarationResult_0: Unit) in
                    let (_) =
                        generated_argument0_1_argument0_declarationResult_0
                    return ParserAdvanced_Step.ParserAdvanced_Done(List_reverse(revItems))
                },
                ParserAdvanced_succeed(Unit.Unit)
              )
            ]
        )
    )
}

@Sendable public static func ParserAdvanced_sequenceEndOptional<a: Sendable, c: Sendable, x: Sendable>(_ ender: ParserAdvanced_Parser<c, x, Unit>, _ ws: ParserAdvanced_Parser<c, x, Unit>, _ parseItem: ParserAdvanced_Parser<c, x, a>, _ sep: ParserAdvanced_Parser<c, x, Unit>, _ revItems: List_List<a>) ->  ParserAdvanced_Parser<c, x, ParserAdvanced_Step<List_List<a>, List_List<a>>> {
    @Sendable func generated_let_declarationResult_parseEnd<state: Sendable>() ->  ParserAdvanced_Parser<c, x, ParserAdvanced_Step<state, List_List<a>>> {
        ParserAdvanced_map(
            { (generated_argument0_letDeclaration0_declarationResult_0: Unit) in
                let (_) =
                    generated_argument0_letDeclaration0_declarationResult_0
                return ParserAdvanced_Step.ParserAdvanced_Done(List_reverse(revItems))
            },
            ender
        )
    }
    return
        ParserAdvanced_skip(
            ws,
            ParserAdvanced_oneOf(
                Array_toList(
                    [ ParserAdvanced_skip(
                        sep,
                        ParserAdvanced_skip(
                            ws,
                            ParserAdvanced_oneOf(
                                Array_toList(
                                    [ ParserAdvanced_map({ (item: a) in ParserAdvanced_Step.ParserAdvanced_Loop(List_cons(item, revItems)) }, parseItem),
                                      generated_let_declarationResult_parseEnd()
                                    ]
                                )
                            )
                        )
                      ),
                      generated_let_declarationResult_parseEnd()
                    ]
                )
            )
        )
}

@Sendable public static func ParserAdvanced_skip<c: Sendable, ignore: Sendable, keep: Sendable, x: Sendable>(_ iParser: ParserAdvanced_Parser<c, x, ignore>, _ kParser: ParserAdvanced_Parser<c, x, keep>) ->  ParserAdvanced_Parser<c, x, keep> {
    ParserAdvanced_map2({ (generated_argument0_declarationResult_0: ignore) in { (generated_argument0_declarationResult_1: keep) in ParserAdvanced_revAlways(generated_argument0_declarationResult_0, generated_argument0_declarationResult_1) } }, iParser, kParser)
}

@Sendable public static func ParserAdvanced_spaces<c: Sendable, x: Sendable>() ->  ParserAdvanced_Parser<c, x, Unit> {
    ParserAdvanced_chompWhile({ (c: UnicodeScalar) in Basics_or(Basics_eq(c, " "), Basics_or(Basics_eq(c, "\n"), Basics_eq(c, "\r"))) })
}

@Sendable public static func ParserAdvanced_succeed<a: Sendable, c: Sendable, x: Sendable>(_ a: a) ->  ParserAdvanced_Parser<c, x, a> {
    ParserAdvanced_Parser.ParserAdvanced_Parser({ (s: ParserAdvanced_State<c>) in ParserAdvanced_PStep.ParserAdvanced_Good(false, a, s) })
}

@Sendable public static func ParserAdvanced_symbol<c: Sendable, x: Sendable>(_ generated_0: ParserAdvanced_Token<x>) ->  ParserAdvanced_Parser<c, x, Unit> {
    ParserAdvanced_token(generated_0)
}

@Sendable public static func ParserAdvanced_token<c: Sendable, x: Sendable>(_ generated_0: ParserAdvanced_Token<x>) ->  ParserAdvanced_Parser<c, x, Unit> {
    let str: String
    let expecting: x
    switch generated_0 {
    case let ParserAdvanced_Token.ParserAdvanced_Token(generated_destructured_str, generated_destructured_expecting):
        str =
            generated_destructured_str
        expecting =
            generated_destructured_expecting
    }
    let generated_let_declarationResult_progress: Bool =
        Basics_not(String_isEmpty(str))
    return
        ParserAdvanced_Parser.ParserAdvanced_Parser(
            { (s: Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String>) in
                let generated_let_result_right_letResult_declarationResult_newOffset: Double
                let generated_let_result_right_letResult_declarationResult_newRow: Double
                let generated_let_result_right_letResult_declarationResult_newCol: Double
                switch ParserAdvanced_isSubString(str, s.offset, s.row, s.col, s.src) {
                case let Triple.Triple(generated_destructured_newOffset, generated_destructured_newRow, generated_destructured_newCol):
                    generated_let_result_right_letResult_declarationResult_newOffset =
                        generated_destructured_newOffset
                    generated_let_result_right_letResult_declarationResult_newRow =
                        generated_destructured_newRow
                    generated_let_result_right_letResult_declarationResult_newCol =
                        generated_destructured_newCol
                }
                return
                    if Basics_eq(generated_let_result_right_letResult_declarationResult_newOffset, -1.0) {
                        ParserAdvanced_PStep.ParserAdvanced_Bad(false, ParserAdvanced_fromState(s, expecting))
                    } else {
                        ParserAdvanced_PStep.ParserAdvanced_Good(generated_let_declarationResult_progress, Unit.Unit, Generated_col_context_indent_offset_row_src.Record(col: generated_let_result_right_letResult_declarationResult_newCol, context: s.context, indent: s.indent, offset: generated_let_result_right_letResult_declarationResult_newOffset, row: generated_let_result_right_letResult_declarationResult_newRow, src: s.src))
                    }
            }
        )
}

@Sendable public static func ParserAdvanced_varHelp<c: Sendable>(_ isGood: @Sendable @escaping (UnicodeScalar) -> Bool, _ offset: Double, _ row: Double, _ col: Double, _ src: String, _ indent: Double, _ context: List_List<ParserAdvanced_Located<c>>) ->  Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String> {
    let generated_let_declarationResult_newOffset: Double =
        ParserAdvanced_isSubChar(isGood, offset, src)
    return
        if Basics_eq(generated_let_declarationResult_newOffset, -1.0) {
            Generated_col_context_indent_offset_row_src.Record(col: col, context: context, indent: indent, offset: offset, row: row, src: src)
        } else {
            if Basics_eq(generated_let_declarationResult_newOffset, -2.0) {
                ParserAdvanced_varHelp(isGood, Basics_add(offset, 1.0), Basics_add(row, 1.0), 1.0, src, indent, context)
            } else {
                ParserAdvanced_varHelp(isGood, generated_let_declarationResult_newOffset, row, Basics_add(col, 1.0), src, indent, context)
            }
        }
}

@Sendable public static func ParserAdvanced_variable<c: Sendable, x: Sendable>(_ i: Generated_expecting_inner_reserved_start<x, @Sendable (UnicodeScalar) -> Bool, Set<String>, @Sendable (UnicodeScalar) -> Bool>) ->  ParserAdvanced_Parser<c, x, String> {
    ParserAdvanced_Parser.ParserAdvanced_Parser(
        { (s: Generated_col_context_indent_offset_row_src<Double, List_List<ParserAdvanced_Located<c>>, Double, Double, Double, String>) in
            let generated_let_result_right_declarationResult_firstOffset: Double =
                ParserAdvanced_isSubChar(i.start, s.offset, s.src)
            let generated_localReturnResult_letResult_result_right_declarationResult: ParserAdvanced_PStep<c, x, String>
            if Basics_eq(generated_let_result_right_declarationResult_firstOffset, -1.0) {
                generated_localReturnResult_letResult_result_right_declarationResult =
                    ParserAdvanced_PStep.ParserAdvanced_Bad(false, ParserAdvanced_fromState(s, i.expecting))
            } else {
                @Sendable func generated_let_onFalse_letResult_result_right_declarationResult_s1() ->  ParserAdvanced_State<c> {
                    if Basics_eq(generated_let_result_right_declarationResult_firstOffset, -2.0) {
                        ParserAdvanced_varHelp(i.inner, Basics_add(s.offset, 1.0), Basics_add(s.row, 1.0), 1.0, s.src, s.indent, s.context)
                    } else {
                        ParserAdvanced_varHelp(i.inner, generated_let_result_right_declarationResult_firstOffset, s.row, Basics_add(s.col, 1.0), s.src, s.indent, s.context)
                    }
                }
                let generated_let_onFalse_letResult_result_right_declarationResult_name: String =
                    String_slice(s.offset, generated_let_onFalse_letResult_result_right_declarationResult_s1().offset, s.src)
                generated_localReturnResult_letResult_result_right_declarationResult =
                    if Set_member(generated_let_onFalse_letResult_result_right_declarationResult_name, i.reserved) {
                        ParserAdvanced_PStep.ParserAdvanced_Bad(false, ParserAdvanced_fromState(s, i.expecting))
                    } else {
                        ParserAdvanced_PStep.ParserAdvanced_Good(true, generated_let_onFalse_letResult_result_right_declarationResult_name, generated_let_onFalse_letResult_result_right_declarationResult_s1())
                    }
            }
            return generated_localReturnResult_letResult_result_right_declarationResult
        }
    )
}

@Sendable public static func ParserAdvanced_withIndent<a: Sendable, c: Sendable, x: Sendable>(_ newIndent: Double, _ generated_1: ParserAdvanced_Parser<c, x, a>) ->  ParserAdvanced_Parser<c, x, a> {
    let parse: @Sendable (ParserAdvanced_State<c>) -> ParserAdvanced_PStep<c, x, a>
    switch generated_1 {
    case let ParserAdvanced_Parser.ParserAdvanced_Parser(generated_destructured_parse):
        parse =
            generated_destructured_parse
    }
    return
        ParserAdvanced_Parser.ParserAdvanced_Parser(
            { (s0: ParserAdvanced_State<c>) in
                switch parse(ParserAdvanced_changeIndent(newIndent, s0)) {
                case let ParserAdvanced_PStep.ParserAdvanced_Good(p, a, s1):
                    ParserAdvanced_PStep.ParserAdvanced_Good(p, a, ParserAdvanced_changeIndent(s0.indent, s1))
                case let ParserAdvanced_PStep.ParserAdvanced_Bad(p, x):
                    ParserAdvanced_PStep.ParserAdvanced_Bad(p, x)
                }
            }
        )
}

@Sendable public static func ParserFast_anyCharFollowedByWhileMap<res: Sendable>(_ consumedStringToRes: @Sendable @escaping (String) -> res, _ afterFirstIsOkay: @Sendable @escaping (UnicodeScalar) -> Bool) ->  ParserFast_Parser<res> {
    ParserFast_Parser.ParserFast_Parser(
        { (s: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_firstOffset: Double =
                ParserFast_charOrEnd(s.offset, s.src)
            let generated_localReturnResult_letResult_result_argument0_declarationResult: ParserFast_PStep<res>
            if Basics_eq(generated_let_result_argument0_declarationResult_firstOffset, -1.0) {
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingAnyChar(s.row, s.col))
            } else {
                let generated_let_onFalse_letResult_result_argument0_declarationResult_s1: ParserFast_State =
                    if Basics_eq(generated_let_result_argument0_declarationResult_firstOffset, -2.0) {
                        ParserFast_skipWhileHelp(afterFirstIsOkay, Basics_add(s.offset, 1.0), Basics_add(s.row, 1.0), 1.0, s.src, s.indent)
                    } else {
                        ParserFast_skipWhileHelp(afterFirstIsOkay, generated_let_result_argument0_declarationResult_firstOffset, s.row, Basics_add(s.col, 1.0), s.src, s.indent)
                    }
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserFast_PStep.ParserFast_Good(consumedStringToRes(String_slice(s.offset, generated_let_onFalse_letResult_result_argument0_declarationResult_s1.offset, s.src)), generated_let_onFalse_letResult_result_argument0_declarationResult_s1)
            }
            return generated_localReturnResult_letResult_result_argument0_declarationResult
        }
    )
}

@Sendable public static func ParserFast_changeIndent(_ newIndent: Double, _ s: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) ->  Generated_col_indent_offset_row_src<Double, Double, Double, Double, String> {
    Generated_col_indent_offset_row_src.Record(col: s.col, indent: newIndent, offset: s.offset, row: s.row, src: s.src)
}

@Sendable public static func ParserFast_charOrEnd(_ offset: Double, _ string: String) ->  Double {
    let generated_let_declarationResult_actualChar: String =
        String_slice(offset, Basics_add(offset, 1.0), string)
    return
        switch generated_let_declarationResult_actualChar {
        case "\n":
            -2.0
        case "":
            -1.0
        case _:
            if ParserFast_charStringIsUtf16HighSurrogate(generated_let_declarationResult_actualChar) {
                Basics_add(offset, 2.0)
            } else {
                Basics_add(offset, 1.0)
            }
        }
}

@Sendable public static func ParserFast_charStringIsUtf16HighSurrogate(_ charString: String) ->  Bool {
    String_any(CharExtra_isUtf16Surrogate, charString)
}

@Sendable public static func ParserFast_columnAndThen<a: Sendable>(_ callback: @Sendable @escaping (Double) -> ParserFast_Parser<a>) ->  ParserFast_Parser<a> {
    ParserFast_Parser.ParserFast_Parser(
        { (s: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_parse: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
            switch callback(s.col) {
            case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parse):
                generated_let_result_argument0_declarationResult_parse =
                    generated_destructured_parse
            }
            return generated_let_result_argument0_declarationResult_parse(s)
        }
    )
}

@Sendable public static func ParserFast_columnIndentAndThen<b: Sendable>(_ callback: @Sendable @escaping (Double) -> (Double) -> ParserFast_Parser<b>) ->  ParserFast_Parser<b> {
    ParserFast_Parser.ParserFast_Parser(
        { (s: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_parse: @Sendable (ParserFast_State) -> ParserFast_PStep<b>
            switch callback(s.col)(s.indent) {
            case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parse):
                generated_let_result_argument0_declarationResult_parse =
                    generated_destructured_parse
            }
            return generated_let_result_argument0_declarationResult_parse(s)
        }
    )
}

@Sendable public static func ParserFast_convert0OrMore0To9s(_ soFar: Double, _ offset: Double, _ src: String) ->  Generated_int_offset<Double, Double> {
    switch String_slice(offset, Basics_add(offset, 1.0), src) {
    case "0":
        ParserFast_convert0OrMore0To9s(Basics_mul(soFar, 10.0), Basics_add(offset, 1.0), src)
    case "1":
        ParserFast_convert0OrMore0To9s(Basics_add(Basics_mul(soFar, 10.0), 1.0), Basics_add(offset, 1.0), src)
    case "2":
        ParserFast_convert0OrMore0To9s(Basics_add(Basics_mul(soFar, 10.0), 2.0), Basics_add(offset, 1.0), src)
    case "3":
        ParserFast_convert0OrMore0To9s(Basics_add(Basics_mul(soFar, 10.0), 3.0), Basics_add(offset, 1.0), src)
    case "4":
        ParserFast_convert0OrMore0To9s(Basics_add(Basics_mul(soFar, 10.0), 4.0), Basics_add(offset, 1.0), src)
    case "5":
        ParserFast_convert0OrMore0To9s(Basics_add(Basics_mul(soFar, 10.0), 5.0), Basics_add(offset, 1.0), src)
    case "6":
        ParserFast_convert0OrMore0To9s(Basics_add(Basics_mul(soFar, 10.0), 6.0), Basics_add(offset, 1.0), src)
    case "7":
        ParserFast_convert0OrMore0To9s(Basics_add(Basics_mul(soFar, 10.0), 7.0), Basics_add(offset, 1.0), src)
    case "8":
        ParserFast_convert0OrMore0To9s(Basics_add(Basics_mul(soFar, 10.0), 8.0), Basics_add(offset, 1.0), src)
    case "9":
        ParserFast_convert0OrMore0To9s(Basics_add(Basics_mul(soFar, 10.0), 9.0), Basics_add(offset, 1.0), src)
    case _:
        Generated_int_offset.Record(int: soFar, offset: offset)
    }
}

@Sendable public static func ParserFast_convert0OrMoreHexadecimal(_ soFar: Double, _ offset: Double, _ src: String) ->  Generated_int_offset<Double, Double> {
    switch String_slice(offset, Basics_add(offset, 1.0), src) {
    case "0":
        ParserFast_convert0OrMoreHexadecimal(Basics_mul(soFar, 16.0), Basics_add(offset, 1.0), src)
    case "1":
        ParserFast_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 1.0), Basics_add(offset, 1.0), src)
    case "2":
        ParserFast_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 2.0), Basics_add(offset, 1.0), src)
    case "3":
        ParserFast_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 3.0), Basics_add(offset, 1.0), src)
    case "4":
        ParserFast_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 4.0), Basics_add(offset, 1.0), src)
    case "5":
        ParserFast_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 5.0), Basics_add(offset, 1.0), src)
    case "6":
        ParserFast_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 6.0), Basics_add(offset, 1.0), src)
    case "7":
        ParserFast_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 7.0), Basics_add(offset, 1.0), src)
    case "8":
        ParserFast_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 8.0), Basics_add(offset, 1.0), src)
    case "9":
        ParserFast_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 9.0), Basics_add(offset, 1.0), src)
    case "a":
        ParserFast_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 10.0), Basics_add(offset, 1.0), src)
    case "A":
        ParserFast_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 10.0), Basics_add(offset, 1.0), src)
    case "b":
        ParserFast_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 11.0), Basics_add(offset, 1.0), src)
    case "B":
        ParserFast_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 11.0), Basics_add(offset, 1.0), src)
    case "c":
        ParserFast_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 12.0), Basics_add(offset, 1.0), src)
    case "C":
        ParserFast_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 12.0), Basics_add(offset, 1.0), src)
    case "d":
        ParserFast_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 13.0), Basics_add(offset, 1.0), src)
    case "D":
        ParserFast_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 13.0), Basics_add(offset, 1.0), src)
    case "e":
        ParserFast_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 14.0), Basics_add(offset, 1.0), src)
    case "E":
        ParserFast_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 14.0), Basics_add(offset, 1.0), src)
    case "f":
        ParserFast_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 15.0), Basics_add(offset, 1.0), src)
    case "F":
        ParserFast_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 15.0), Basics_add(offset, 1.0), src)
    case _:
        Generated_int_offset.Record(int: soFar, offset: offset)
    }
}

@Sendable public static func ParserFast_convert1OrMoreHexadecimal(_ offset: Double, _ src: String) ->  Generated_int_offset<Double, Double> {
    switch String_slice(offset, Basics_add(offset, 1.0), src) {
    case "0":
        ParserFast_convert0OrMoreHexadecimal(0.0, Basics_add(offset, 1.0), src)
    case "1":
        ParserFast_convert0OrMoreHexadecimal(1.0, Basics_add(offset, 1.0), src)
    case "2":
        ParserFast_convert0OrMoreHexadecimal(2.0, Basics_add(offset, 1.0), src)
    case "3":
        ParserFast_convert0OrMoreHexadecimal(3.0, Basics_add(offset, 1.0), src)
    case "4":
        ParserFast_convert0OrMoreHexadecimal(4.0, Basics_add(offset, 1.0), src)
    case "5":
        ParserFast_convert0OrMoreHexadecimal(5.0, Basics_add(offset, 1.0), src)
    case "6":
        ParserFast_convert0OrMoreHexadecimal(6.0, Basics_add(offset, 1.0), src)
    case "7":
        ParserFast_convert0OrMoreHexadecimal(7.0, Basics_add(offset, 1.0), src)
    case "8":
        ParserFast_convert0OrMoreHexadecimal(8.0, Basics_add(offset, 1.0), src)
    case "9":
        ParserFast_convert0OrMoreHexadecimal(9.0, Basics_add(offset, 1.0), src)
    case "a":
        ParserFast_convert0OrMoreHexadecimal(10.0, Basics_add(offset, 1.0), src)
    case "A":
        ParserFast_convert0OrMoreHexadecimal(10.0, Basics_add(offset, 1.0), src)
    case "b":
        ParserFast_convert0OrMoreHexadecimal(11.0, Basics_add(offset, 1.0), src)
    case "B":
        ParserFast_convert0OrMoreHexadecimal(11.0, Basics_add(offset, 1.0), src)
    case "c":
        ParserFast_convert0OrMoreHexadecimal(12.0, Basics_add(offset, 1.0), src)
    case "C":
        ParserFast_convert0OrMoreHexadecimal(12.0, Basics_add(offset, 1.0), src)
    case "d":
        ParserFast_convert0OrMoreHexadecimal(13.0, Basics_add(offset, 1.0), src)
    case "D":
        ParserFast_convert0OrMoreHexadecimal(13.0, Basics_add(offset, 1.0), src)
    case "e":
        ParserFast_convert0OrMoreHexadecimal(14.0, Basics_add(offset, 1.0), src)
    case "E":
        ParserFast_convert0OrMoreHexadecimal(14.0, Basics_add(offset, 1.0), src)
    case "f":
        ParserFast_convert0OrMoreHexadecimal(15.0, Basics_add(offset, 1.0), src)
    case "F":
        ParserFast_convert0OrMoreHexadecimal(15.0, Basics_add(offset, 1.0), src)
    case _:
        Generated_int_offset.Record(int: 0.0, offset: -1.0)
    }
}

@Sendable public static func ParserFast_convertIntegerDecimal(_ offset: Double, _ src: String) ->  Generated_int_offset<Double, Double> {
    switch String_slice(offset, Basics_add(offset, 1.0), src) {
    case "0":
        Generated_int_offset.Record(int: 0.0, offset: Basics_add(offset, 1.0))
    case "1":
        ParserFast_convert0OrMore0To9s(1.0, Basics_add(offset, 1.0), src)
    case "2":
        ParserFast_convert0OrMore0To9s(2.0, Basics_add(offset, 1.0), src)
    case "3":
        ParserFast_convert0OrMore0To9s(3.0, Basics_add(offset, 1.0), src)
    case "4":
        ParserFast_convert0OrMore0To9s(4.0, Basics_add(offset, 1.0), src)
    case "5":
        ParserFast_convert0OrMore0To9s(5.0, Basics_add(offset, 1.0), src)
    case "6":
        ParserFast_convert0OrMore0To9s(6.0, Basics_add(offset, 1.0), src)
    case "7":
        ParserFast_convert0OrMore0To9s(7.0, Basics_add(offset, 1.0), src)
    case "8":
        ParserFast_convert0OrMore0To9s(8.0, Basics_add(offset, 1.0), src)
    case "9":
        ParserFast_convert0OrMore0To9s(9.0, Basics_add(offset, 1.0), src)
    case _:
        ParserFast_errorAsOffsetAndInt
    }
}

@Sendable public static func ParserFast_convertIntegerDecimalOrHexadecimal(_ offset: Double, _ src: String) ->  Generated_base_offsetAndInt<ParserFast_Base, Generated_int_offset<Double, Double>> {
    let generated_localReturnResult_declarationResult: Generated_base_offsetAndInt<ParserFast_Base, Generated_int_offset<Double, Double>>
    switch String_slice(offset, Basics_add(offset, 1.0), src) {
    case "0":
        let generated_localReturnResult_caseResult_case0_declarationResult: Generated_base_offsetAndInt<ParserFast_Base, Generated_int_offset<Double, Double>>
        switch String_slice(Basics_add(offset, 1.0), Basics_add(offset, 2.0), src) {
        case "x":
            let generated_let_caseResult_case0_caseResult_case0_declarationResult_hex: Generated_int_offset<Double, Double> =
                ParserFast_convert1OrMoreHexadecimal(Basics_add(offset, 2.0), src)
            generated_localReturnResult_caseResult_case0_declarationResult =
                Generated_base_offsetAndInt.Record(base: ParserFast_Base.ParserFast_Hexadecimal, offsetAndInt: Generated_int_offset.Record(int: generated_let_caseResult_case0_caseResult_case0_declarationResult_hex.int, offset: generated_let_caseResult_case0_caseResult_case0_declarationResult_hex.offset))
        case _:
            generated_localReturnResult_caseResult_case0_declarationResult =
                Generated_base_offsetAndInt.Record(base: ParserFast_Base.ParserFast_Decimal, offsetAndInt: Generated_int_offset.Record(int: 0.0, offset: Basics_add(offset, 1.0)))
        }
        generated_localReturnResult_declarationResult =
            generated_localReturnResult_caseResult_case0_declarationResult
    case "1":
        generated_localReturnResult_declarationResult =
            Generated_base_offsetAndInt.Record(base: ParserFast_Base.ParserFast_Decimal, offsetAndInt: ParserFast_convert0OrMore0To9s(1.0, Basics_add(offset, 1.0), src))
    case "2":
        generated_localReturnResult_declarationResult =
            Generated_base_offsetAndInt.Record(base: ParserFast_Base.ParserFast_Decimal, offsetAndInt: ParserFast_convert0OrMore0To9s(2.0, Basics_add(offset, 1.0), src))
    case "3":
        generated_localReturnResult_declarationResult =
            Generated_base_offsetAndInt.Record(base: ParserFast_Base.ParserFast_Decimal, offsetAndInt: ParserFast_convert0OrMore0To9s(3.0, Basics_add(offset, 1.0), src))
    case "4":
        generated_localReturnResult_declarationResult =
            Generated_base_offsetAndInt.Record(base: ParserFast_Base.ParserFast_Decimal, offsetAndInt: ParserFast_convert0OrMore0To9s(4.0, Basics_add(offset, 1.0), src))
    case "5":
        generated_localReturnResult_declarationResult =
            Generated_base_offsetAndInt.Record(base: ParserFast_Base.ParserFast_Decimal, offsetAndInt: ParserFast_convert0OrMore0To9s(5.0, Basics_add(offset, 1.0), src))
    case "6":
        generated_localReturnResult_declarationResult =
            Generated_base_offsetAndInt.Record(base: ParserFast_Base.ParserFast_Decimal, offsetAndInt: ParserFast_convert0OrMore0To9s(6.0, Basics_add(offset, 1.0), src))
    case "7":
        generated_localReturnResult_declarationResult =
            Generated_base_offsetAndInt.Record(base: ParserFast_Base.ParserFast_Decimal, offsetAndInt: ParserFast_convert0OrMore0To9s(7.0, Basics_add(offset, 1.0), src))
    case "8":
        generated_localReturnResult_declarationResult =
            Generated_base_offsetAndInt.Record(base: ParserFast_Base.ParserFast_Decimal, offsetAndInt: ParserFast_convert0OrMore0To9s(8.0, Basics_add(offset, 1.0), src))
    case "9":
        generated_localReturnResult_declarationResult =
            Generated_base_offsetAndInt.Record(base: ParserFast_Base.ParserFast_Decimal, offsetAndInt: ParserFast_convert0OrMore0To9s(9.0, Basics_add(offset, 1.0), src))
    case _:
        generated_localReturnResult_declarationResult =
            ParserFast_errorAsBaseOffsetAndInt
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ParserFast_floatOrIntegerDecimalOrHexadecimalMapWithRange<res: Sendable>(_ rangeAndFloatToRes: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (Double) -> res, _ rangeAndIntDecimalToRes: @Sendable @escaping (ElmSyntaxRange_Range) -> (Double) -> res, _ rangeAndIntHexadecimalToRes: @Sendable @escaping (ElmSyntaxRange_Range) -> (Double) -> res) ->  ParserFast_Parser<res> {
    ParserFast_Parser.ParserFast_Parser(
        { (s0: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_s1: Generated_base_offsetAndInt<ParserFast_Base, Generated_int_offset<Double, Double>> =
                ParserFast_convertIntegerDecimalOrHexadecimal(s0.offset, s0.src)
            let generated_localReturnResult_letResult_result_argument0_declarationResult: ParserFast_PStep<res>
            if Basics_eq(generated_let_result_argument0_declarationResult_s1.offsetAndInt.offset, -1.0) {
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingNumber(s0.row, s0.col))
            } else {
                let generated_let_onFalse_letResult_result_argument0_declarationResult_offsetAfterFloat: Double =
                    ParserFast_skipFloatAfterIntegerDecimal(generated_let_result_argument0_declarationResult_s1.offsetAndInt.offset, s0.src)
                let generated_localReturnResult_letResult_onFalse_letResult_result_argument0_declarationResult: ParserFast_PStep<res>
                if Basics_eq(generated_let_onFalse_letResult_result_argument0_declarationResult_offsetAfterFloat, -1.0) {
                    let generated_let_onTrue_letResult_onFalse_letResult_result_argument0_declarationResult_newColumn: Double =
                        Basics_add(s0.col, Basics_sub(generated_let_result_argument0_declarationResult_s1.offsetAndInt.offset, s0.offset))
                    let generated_let_onTrue_letResult_onFalse_letResult_result_argument0_declarationResult_range: ElmSyntaxRange_Range =
                        Generated_end_start.Record(end: Generated_column_row.Record(column: generated_let_onTrue_letResult_onFalse_letResult_result_argument0_declarationResult_newColumn, row: s0.row), start: Generated_column_row.Record(column: s0.col, row: s0.row))
                    let generated_localReturnResult_argument0_letResult_onTrue_letResult_onFalse_letResult_result_argument0_declarationResult: res =
                        switch generated_let_result_argument0_declarationResult_s1.base {
                        case ParserFast_Base.ParserFast_Decimal:
                            rangeAndIntDecimalToRes(generated_let_onTrue_letResult_onFalse_letResult_result_argument0_declarationResult_range)(generated_let_result_argument0_declarationResult_s1.offsetAndInt.int)
                        case ParserFast_Base.ParserFast_Hexadecimal:
                            rangeAndIntHexadecimalToRes(generated_let_onTrue_letResult_onFalse_letResult_result_argument0_declarationResult_range)(generated_let_result_argument0_declarationResult_s1.offsetAndInt.int)
                        }
                    generated_localReturnResult_letResult_onFalse_letResult_result_argument0_declarationResult =
                        ParserFast_PStep.ParserFast_Good(generated_localReturnResult_argument0_letResult_onTrue_letResult_onFalse_letResult_result_argument0_declarationResult, Generated_col_indent_offset_row_src.Record(col: generated_let_onTrue_letResult_onFalse_letResult_result_argument0_declarationResult_newColumn, indent: s0.indent, offset: generated_let_result_argument0_declarationResult_s1.offsetAndInt.offset, row: s0.row, src: s0.src))
                } else {
                    let generated_localReturnResult_onFalse_letResult_onFalse_letResult_result_argument0_declarationResult: ParserFast_PStep<res>
                    switch String_toFloat(String_slice(s0.offset, generated_let_onFalse_letResult_result_argument0_declarationResult_offsetAfterFloat, s0.src)) {
                    case let Maybe_Maybe.Maybe_Just(float):
                        let generated_let_caseResult_case0_onFalse_letResult_onFalse_letResult_result_argument0_declarationResult_newColumn: Double =
                            Basics_add(s0.col, Basics_sub(generated_let_onFalse_letResult_result_argument0_declarationResult_offsetAfterFloat, s0.offset))
                        generated_localReturnResult_onFalse_letResult_onFalse_letResult_result_argument0_declarationResult =
                            ParserFast_PStep.ParserFast_Good(rangeAndFloatToRes(Generated_end_start.Record(end: Generated_column_row.Record(column: generated_let_caseResult_case0_onFalse_letResult_onFalse_letResult_result_argument0_declarationResult_newColumn, row: s0.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(float), Generated_col_indent_offset_row_src.Record(col: generated_let_caseResult_case0_onFalse_letResult_onFalse_letResult_result_argument0_declarationResult_newColumn, indent: s0.indent, offset: generated_let_onFalse_letResult_result_argument0_declarationResult_offsetAfterFloat, row: s0.row, src: s0.src))
                    case Maybe_Maybe.Maybe_Nothing:
                        generated_localReturnResult_onFalse_letResult_onFalse_letResult_result_argument0_declarationResult =
                            ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingNumber(s0.row, s0.col))
                    }
                    generated_localReturnResult_letResult_onFalse_letResult_result_argument0_declarationResult =
                        generated_localReturnResult_onFalse_letResult_onFalse_letResult_result_argument0_declarationResult
                }
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    generated_localReturnResult_letResult_onFalse_letResult_result_argument0_declarationResult
            }
            return generated_localReturnResult_letResult_result_argument0_declarationResult
        }
    )
}

@Sendable public static func ParserFast_followedBySkipWhileWhitespace<before: Sendable>(_ generated_0: ParserFast_Parser<before>) ->  ParserFast_Parser<before> {
    let parseBefore: @Sendable (ParserFast_State) -> ParserFast_PStep<before>
    switch generated_0 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseBefore):
        parseBefore =
            generated_destructured_parseBefore
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                let generated_localReturnResult_result_argument0_declarationResult: ParserFast_PStep<before>
                switch parseBefore(s0) {
                case let ParserFast_PStep.ParserFast_Good(res, s1):
                    let generated_let_caseResult_case0_result_argument0_declarationResult_s2: ParserFast_State =
                        ParserFast_skipWhileWhitespaceHelp(s1.offset, s1.row, s1.col, s1.src, s1.indent)
                    generated_localReturnResult_result_argument0_declarationResult =
                        ParserFast_PStep.ParserFast_Good(res, generated_let_caseResult_case0_result_argument0_declarationResult_s2)
                case let bad:
                    generated_localReturnResult_result_argument0_declarationResult =
                        bad
                }
                return generated_localReturnResult_result_argument0_declarationResult
            }
        )
}

@Sendable public static func ParserFast_followedBySymbol<a: Sendable>(_ str: String, _ generated_1: ParserFast_Parser<a>) ->  ParserFast_Parser<a> {
    let parsePrevious: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parsePrevious):
        parsePrevious =
            generated_destructured_parsePrevious
    }
    let generated_let_declarationResult_strLength: Double =
        String_length(str)
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                let generated_localReturnResult_result_argument0_letResult_declarationResult: ParserFast_PStep<a>
                switch parsePrevious(s0) {
                case let ParserFast_PStep.ParserFast_Good(res, s1):
                    let generated_let_caseResult_case0_result_argument0_letResult_declarationResult_newOffset: Double =
                        Basics_add(s1.offset, generated_let_declarationResult_strLength)
                    generated_localReturnResult_result_argument0_letResult_declarationResult =
                        if Basics_eq(String_slice(s1.offset, generated_let_caseResult_case0_result_argument0_letResult_declarationResult_newOffset, s1.src), str) {
                            ParserFast_PStep.ParserFast_Good(res, Generated_col_indent_offset_row_src.Record(col: Basics_add(s1.col, generated_let_declarationResult_strLength), indent: s1.indent, offset: generated_let_caseResult_case0_result_argument0_letResult_declarationResult_newOffset, row: s1.row, src: s1.src))
                        } else {
                            ParserFast_PStep.ParserFast_Bad(true, ParserFast_Problem.ParserFast_ExpectingSymbol(s1.row, s1.col, str))
                        }
                case let bad:
                    generated_localReturnResult_result_argument0_letResult_declarationResult =
                        bad
                }
                return generated_localReturnResult_result_argument0_letResult_declarationResult
            }
        )
}

@Sendable public static func ParserFast_ifFollowedByWhileMapWithRangeWithoutLinebreak<res: Sendable>(_ rangeAndConsumedStringToRes: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (String) -> res, _ firstIsOkay: @Sendable @escaping (UnicodeScalar) -> Bool, _ afterFirstIsOkay: @Sendable @escaping (UnicodeScalar) -> Bool) ->  ParserFast_Parser<res> {
    ParserFast_Parser.ParserFast_Parser(
        { (s0: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_firstOffset: Double =
                ParserFast_isSubCharWithoutLinebreak(firstIsOkay, s0.offset, s0.src)
            let generated_localReturnResult_letResult_result_argument0_declarationResult: ParserFast_PStep<res>
            if Basics_eq(generated_let_result_argument0_declarationResult_firstOffset, -1.0) {
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingCharSatisfyingPredicate(s0.row, s0.col))
            } else {
                let generated_let_onFalse_letResult_result_argument0_declarationResult_s1: ParserFast_State =
                    ParserFast_skipWhileWithoutLinebreakHelp(afterFirstIsOkay, generated_let_result_argument0_declarationResult_firstOffset, s0.row, Basics_add(s0.col, 1.0), s0.src, s0.indent)
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserFast_PStep.ParserFast_Good(rangeAndConsumedStringToRes(Generated_end_start.Record(end: Generated_column_row.Record(column: generated_let_onFalse_letResult_result_argument0_declarationResult_s1.col, row: generated_let_onFalse_letResult_result_argument0_declarationResult_s1.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(String_slice(s0.offset, generated_let_onFalse_letResult_result_argument0_declarationResult_s1.offset, s0.src)), generated_let_onFalse_letResult_result_argument0_declarationResult_s1)
            }
            return generated_localReturnResult_letResult_result_argument0_declarationResult
        }
    )
}

@Sendable public static func ParserFast_ifFollowedByWhileMapWithoutLinebreak<res: Sendable>(_ consumedStringToRes: @Sendable @escaping (String) -> res, _ firstIsOkay: @Sendable @escaping (UnicodeScalar) -> Bool, _ afterFirstIsOkay: @Sendable @escaping (UnicodeScalar) -> Bool) ->  ParserFast_Parser<res> {
    ParserFast_Parser.ParserFast_Parser(
        { (s0: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_firstOffset: Double =
                ParserFast_isSubCharWithoutLinebreak(firstIsOkay, s0.offset, s0.src)
            let generated_localReturnResult_letResult_result_argument0_declarationResult: ParserFast_PStep<res>
            if Basics_eq(generated_let_result_argument0_declarationResult_firstOffset, -1.0) {
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingCharSatisfyingPredicate(s0.row, s0.col))
            } else {
                let generated_let_onFalse_letResult_result_argument0_declarationResult_s1: ParserFast_State =
                    ParserFast_skipWhileWithoutLinebreakHelp(afterFirstIsOkay, generated_let_result_argument0_declarationResult_firstOffset, s0.row, Basics_add(s0.col, 1.0), s0.src, s0.indent)
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserFast_PStep.ParserFast_Good(consumedStringToRes(String_slice(s0.offset, generated_let_onFalse_letResult_result_argument0_declarationResult_s1.offset, s0.src)), generated_let_onFalse_letResult_result_argument0_declarationResult_s1)
            }
            return generated_localReturnResult_letResult_result_argument0_declarationResult
        }
    )
}

@Sendable public static func ParserFast_ifFollowedByWhileValidateMapWithRangeWithoutLinebreak<res: Sendable>(_ toResult: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (String) -> res, _ firstIsOkay: @Sendable @escaping (UnicodeScalar) -> Bool, _ afterFirstIsOkay: @Sendable @escaping (UnicodeScalar) -> Bool, _ resultIsOkay: @Sendable @escaping (String) -> Bool) ->  ParserFast_Parser<res> {
    ParserFast_Parser.ParserFast_Parser(
        { (s0: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_firstOffset: Double =
                ParserFast_isSubCharWithoutLinebreak(firstIsOkay, s0.offset, s0.src)
            let generated_localReturnResult_letResult_result_argument0_declarationResult: ParserFast_PStep<res>
            if Basics_eq(generated_let_result_argument0_declarationResult_firstOffset, -1.0) {
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingCharSatisfyingPredicate(s0.row, s0.col))
            } else {
                let generated_let_onFalse_letResult_result_argument0_declarationResult_s1: ParserFast_State =
                    ParserFast_skipWhileWithoutLinebreakHelp(afterFirstIsOkay, generated_let_result_argument0_declarationResult_firstOffset, s0.row, Basics_add(s0.col, 1.0), s0.src, s0.indent)
                let generated_let_onFalse_letResult_result_argument0_declarationResult_name: String =
                    String_slice(s0.offset, generated_let_onFalse_letResult_result_argument0_declarationResult_s1.offset, s0.src)
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    if resultIsOkay(generated_let_onFalse_letResult_result_argument0_declarationResult_name) {
                        ParserFast_PStep.ParserFast_Good(toResult(Generated_end_start.Record(end: Generated_column_row.Record(column: generated_let_onFalse_letResult_result_argument0_declarationResult_s1.col, row: generated_let_onFalse_letResult_result_argument0_declarationResult_s1.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(generated_let_onFalse_letResult_result_argument0_declarationResult_name), generated_let_onFalse_letResult_result_argument0_declarationResult_s1)
                    } else {
                        ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingStringSatisfyingPredicate(s0.row, Basics_add(s0.col, 1.0)))
                    }
            }
            return generated_localReturnResult_letResult_result_argument0_declarationResult
        }
    )
}

@Sendable public static func ParserFast_ifFollowedByWhileValidateWithoutLinebreak(_ firstIsOkay: @Sendable @escaping (UnicodeScalar) -> Bool, _ afterFirstIsOkay: @Sendable @escaping (UnicodeScalar) -> Bool, _ resultIsOkay: @Sendable @escaping (String) -> Bool) ->  ParserFast_Parser<String> {
    ParserFast_Parser.ParserFast_Parser(
        { (s: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_firstOffset: Double =
                ParserFast_isSubCharWithoutLinebreak(firstIsOkay, s.offset, s.src)
            let generated_localReturnResult_letResult_result_argument0_declarationResult: ParserFast_PStep<String>
            if Basics_eq(generated_let_result_argument0_declarationResult_firstOffset, -1.0) {
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingCharSatisfyingPredicate(s.row, s.col))
            } else {
                let generated_let_onFalse_letResult_result_argument0_declarationResult_s1: ParserFast_State =
                    ParserFast_skipWhileWithoutLinebreakHelp(afterFirstIsOkay, generated_let_result_argument0_declarationResult_firstOffset, s.row, Basics_add(s.col, 1.0), s.src, s.indent)
                let generated_let_onFalse_letResult_result_argument0_declarationResult_name: String =
                    String_slice(s.offset, generated_let_onFalse_letResult_result_argument0_declarationResult_s1.offset, s.src)
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    if resultIsOkay(generated_let_onFalse_letResult_result_argument0_declarationResult_name) {
                        ParserFast_PStep.ParserFast_Good(generated_let_onFalse_letResult_result_argument0_declarationResult_name, generated_let_onFalse_letResult_result_argument0_declarationResult_s1)
                    } else {
                        ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingStringSatisfyingPredicate(s.row, Basics_add(s.col, 1.0)))
                    }
            }
            return generated_localReturnResult_letResult_result_argument0_declarationResult
        }
    )
}

@Sendable public static func ParserFast_ifFollowedByWhileWithoutLinebreak(_ firstIsOkay: @Sendable @escaping (UnicodeScalar) -> Bool, _ afterFirstIsOkay: @Sendable @escaping (UnicodeScalar) -> Bool) ->  ParserFast_Parser<String> {
    ParserFast_Parser.ParserFast_Parser(
        { (s: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_firstOffset: Double =
                ParserFast_isSubCharWithoutLinebreak(firstIsOkay, s.offset, s.src)
            let generated_localReturnResult_letResult_result_argument0_declarationResult: ParserFast_PStep<String>
            if Basics_eq(generated_let_result_argument0_declarationResult_firstOffset, -1.0) {
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingCharSatisfyingPredicate(s.row, s.col))
            } else {
                let generated_let_onFalse_letResult_result_argument0_declarationResult_s1: ParserFast_State =
                    ParserFast_skipWhileWithoutLinebreakHelp(afterFirstIsOkay, generated_let_result_argument0_declarationResult_firstOffset, s.row, Basics_add(s.col, 1.0), s.src, s.indent)
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserFast_PStep.ParserFast_Good(String_slice(s.offset, generated_let_onFalse_letResult_result_argument0_declarationResult_s1.offset, s.src), generated_let_onFalse_letResult_result_argument0_declarationResult_s1)
            }
            return generated_localReturnResult_letResult_result_argument0_declarationResult
        }
    )
}

@Sendable public static func ParserFast_integerDecimalMapWithRange<res: Sendable>(_ rangeAndIntToRes: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (Double) -> res) ->  ParserFast_Parser<res> {
    ParserFast_Parser.ParserFast_Parser(
        { (s0: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_s1: Generated_int_offset<Double, Double> =
                ParserFast_convertIntegerDecimal(s0.offset, s0.src)
            let generated_localReturnResult_letResult_result_argument0_declarationResult: ParserFast_PStep<res>
            if Basics_eq(generated_let_result_argument0_declarationResult_s1.offset, -1.0) {
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingNumber(s0.row, s0.col))
            } else {
                let generated_let_onFalse_letResult_result_argument0_declarationResult_newColumn: Double =
                    Basics_add(s0.col, Basics_sub(generated_let_result_argument0_declarationResult_s1.offset, s0.offset))
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserFast_PStep.ParserFast_Good(rangeAndIntToRes(Generated_end_start.Record(end: Generated_column_row.Record(column: generated_let_onFalse_letResult_result_argument0_declarationResult_newColumn, row: s0.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(generated_let_result_argument0_declarationResult_s1.int), Generated_col_indent_offset_row_src.Record(col: generated_let_onFalse_letResult_result_argument0_declarationResult_newColumn, indent: s0.indent, offset: generated_let_result_argument0_declarationResult_s1.offset, row: s0.row, src: s0.src))
            }
            return generated_localReturnResult_letResult_result_argument0_declarationResult
        }
    )
}

@Sendable public static func ParserFast_integerDecimalOrHexadecimalMapWithRange<res: Sendable>(_ rangeAndIntDecimalToRes: @Sendable @escaping (ElmSyntaxRange_Range) -> (Double) -> res, _ rangeAndIntHexadecimalToRes: @Sendable @escaping (ElmSyntaxRange_Range) -> (Double) -> res) ->  ParserFast_Parser<res> {
    ParserFast_Parser.ParserFast_Parser(
        { (s0: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_s1: Generated_base_offsetAndInt<ParserFast_Base, Generated_int_offset<Double, Double>> =
                ParserFast_convertIntegerDecimalOrHexadecimal(s0.offset, s0.src)
            let generated_localReturnResult_letResult_result_argument0_declarationResult: ParserFast_PStep<res>
            if Basics_eq(generated_let_result_argument0_declarationResult_s1.offsetAndInt.offset, -1.0) {
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingNumber(s0.row, s0.col))
            } else {
                let generated_let_onFalse_letResult_result_argument0_declarationResult_newColumn: Double =
                    Basics_add(s0.col, Basics_sub(generated_let_result_argument0_declarationResult_s1.offsetAndInt.offset, s0.offset))
                let generated_let_onFalse_letResult_result_argument0_declarationResult_range: ElmSyntaxRange_Range =
                    Generated_end_start.Record(end: Generated_column_row.Record(column: generated_let_onFalse_letResult_result_argument0_declarationResult_newColumn, row: s0.row), start: Generated_column_row.Record(column: s0.col, row: s0.row))
                let generated_localReturnResult_argument0_letResult_onFalse_letResult_result_argument0_declarationResult: res =
                    switch generated_let_result_argument0_declarationResult_s1.base {
                    case ParserFast_Base.ParserFast_Decimal:
                        rangeAndIntDecimalToRes(generated_let_onFalse_letResult_result_argument0_declarationResult_range)(generated_let_result_argument0_declarationResult_s1.offsetAndInt.int)
                    case ParserFast_Base.ParserFast_Hexadecimal:
                        rangeAndIntHexadecimalToRes(generated_let_onFalse_letResult_result_argument0_declarationResult_range)(generated_let_result_argument0_declarationResult_s1.offsetAndInt.int)
                    }
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserFast_PStep.ParserFast_Good(generated_localReturnResult_argument0_letResult_onFalse_letResult_result_argument0_declarationResult, Generated_col_indent_offset_row_src.Record(col: generated_let_onFalse_letResult_result_argument0_declarationResult_newColumn, indent: s0.indent, offset: generated_let_result_argument0_declarationResult_s1.offsetAndInt.offset, row: s0.row, src: s0.src))
            }
            return generated_localReturnResult_letResult_result_argument0_declarationResult
        }
    )
}

@Sendable public static func ParserFast_isSubCharAlphaNumOrUnderscore(_ offset: Double, _ string: String) ->  Bool {
    String_any(CharExtra_isLatinAlphaNumOrUnderscoreFast, String_slice(offset, Basics_add(offset, 1.0), string))
}

@Sendable public static func ParserFast_isSubCharWithoutLinebreak(_ predicate: @Sendable @escaping (UnicodeScalar) -> Bool, _ offset: Double, _ string: String) ->  Double {
    let generated_let_declarationResult_actualChar: String =
        String_slice(offset, Basics_add(offset, 1.0), string)
    return
        if String_any(predicate, generated_let_declarationResult_actualChar) {
            Basics_add(offset, 1.0)
        } else {
            if Basics_and(ParserFast_charStringIsUtf16HighSurrogate(generated_let_declarationResult_actualChar), String_any(predicate, String_slice(offset, Basics_add(offset, 2.0), string))) {
                Basics_add(offset, 2.0)
            } else {
                -1.0
            }
        }
}

@Sendable public static func ParserFast_keyword<res: Sendable>(_ kwd: String, _ res: res) ->  ParserFast_Parser<res> {
    let generated_let_declarationResult_kwdLength: Double =
        String_length(kwd)
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
                let generated_let_result_argument0_letResult_declarationResult_newOffset: Double =
                    Basics_add(s.offset, generated_let_declarationResult_kwdLength)
                return
                    if Basics_and(Basics_eq(String_slice(s.offset, generated_let_result_argument0_letResult_declarationResult_newOffset, s.src), kwd), Basics_not(ParserFast_isSubCharAlphaNumOrUnderscore(generated_let_result_argument0_letResult_declarationResult_newOffset, s.src))) {
                        ParserFast_PStep.ParserFast_Good(res, Generated_col_indent_offset_row_src.Record(col: Basics_add(s.col, generated_let_declarationResult_kwdLength), indent: s.indent, offset: generated_let_result_argument0_letResult_declarationResult_newOffset, row: s.row, src: s.src))
                    } else {
                        ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingKeyword(s.row, s.col, kwd))
                    }
            }
        )
}

@Sendable public static func ParserFast_keywordFollowedBy<next: Sendable>(_ kwd: String, _ generated_1: ParserFast_Parser<next>) ->  ParserFast_Parser<next> {
    let parseNext: @Sendable (ParserFast_State) -> ParserFast_PStep<next>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseNext):
        parseNext =
            generated_destructured_parseNext
    }
    let generated_let_declarationResult_kwdLength: Double =
        String_length(kwd)
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
                let generated_let_result_argument0_letResult_declarationResult_newOffset: Double =
                    Basics_add(s.offset, generated_let_declarationResult_kwdLength)
                return
                    if Basics_and(Basics_eq(String_slice(s.offset, generated_let_result_argument0_letResult_declarationResult_newOffset, s.src), kwd), Basics_not(ParserFast_isSubCharAlphaNumOrUnderscore(generated_let_result_argument0_letResult_declarationResult_newOffset, s.src))) {
                        ParserFast_pStepCommit(parseNext(Generated_col_indent_offset_row_src.Record(col: Basics_add(s.col, generated_let_declarationResult_kwdLength), indent: s.indent, offset: generated_let_result_argument0_letResult_declarationResult_newOffset, row: s.row, src: s.src)))
                    } else {
                        ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingKeyword(s.row, s.col, kwd))
                    }
            }
        )
}

@Sendable public static func ParserFast_lazy<a: Sendable>(_ thunk: @Sendable @escaping (Unit) -> ParserFast_Parser<a>) ->  ParserFast_Parser<a> {
    ParserFast_Parser.ParserFast_Parser(
        { (s: ParserFast_State) in
            let generated_let_result_argument0_declarationResult_parse: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
            switch thunk(Unit.Unit) {
            case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parse):
                generated_let_result_argument0_declarationResult_parse =
                    generated_destructured_parse
            }
            return generated_let_result_argument0_declarationResult_parse(s)
        }
    )
}

@Sendable public static func ParserFast_loop<a: Sendable, extension_: Sendable, state: Sendable>(_ state: state, _ element: ParserFast_Parser<extension_>, _ reduce: @Sendable @escaping (extension_) -> (state) -> ParserFast_Step<state, a>) ->  ParserFast_Parser<a> {
    ParserFast_Parser.ParserFast_Parser({ (s: ParserFast_State) in ParserFast_loopHelp(false, state, element, reduce, s) })
}

@Sendable public static func ParserFast_loopHelp<a: Sendable, extension_: Sendable, state: Sendable>(_ committedSoFar: Bool, _ state: state, _ generated_2: ParserFast_Parser<extension_>, _ reduce: @Sendable @escaping (extension_) -> (state) -> ParserFast_Step<state, a>, _ s0: ParserFast_State) ->  ParserFast_PStep<a> {
    let element: ParserFast_Parser<extension_>
    let parseElement: @Sendable (ParserFast_State) -> ParserFast_PStep<extension_>
    let (generated_destructured_element) =
        generated_2
    element =
        generated_destructured_element
    switch element {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseElement):
        parseElement =
            generated_destructured_parseElement
    }
    return
        switch parseElement(s0) {
        case let ParserFast_PStep.ParserFast_Good(step, s1):
            switch reduce(step)(state) {
            case let ParserFast_Step.ParserFast_Loop(newState):
                ParserFast_loopHelp(true, newState, element, reduce, s1)
            case let ParserFast_Step.ParserFast_Done(result):
                ParserFast_PStep.ParserFast_Good(result, s1)
            }
        case let ParserFast_PStep.ParserFast_Bad(elementCommitted, x):
            ParserFast_PStep.ParserFast_Bad(Basics_or(committedSoFar, elementCommitted), x)
        }
}

@Sendable public static func ParserFast_loopUntil<element: Sendable, folded: Sendable, res: Sendable>(_ endParser: ParserFast_Parser<Unit>, _ element: ParserFast_Parser<element>, _ initialFolded: folded, _ reduce: @Sendable @escaping (element) -> (folded) -> folded, _ foldedToRes: @Sendable @escaping (folded) -> res) ->  ParserFast_Parser<res> {
    ParserFast_Parser.ParserFast_Parser({ (s: ParserFast_State) in ParserFast_loopUntilHelp(false, endParser, element, initialFolded, reduce, foldedToRes, s) })
}

@Sendable public static func ParserFast_loopUntilHelp<element: Sendable, folded: Sendable, res: Sendable>(_ committedSoFar: Bool, _ generated_1: ParserFast_Parser<Unit>, _ generated_2: ParserFast_Parser<element>, _ soFar: folded, _ reduce: @Sendable @escaping (element) -> (folded) -> folded, _ foldedToRes: @Sendable @escaping (folded) -> res, _ s0: ParserFast_State) ->  ParserFast_PStep<res> {
    let endParser: ParserFast_Parser<Unit>
    let parseEnd: @Sendable (ParserFast_State) -> ParserFast_PStep<Unit>
    let (generated_destructured_endParser) =
        generated_1
    endParser =
        generated_destructured_endParser
    switch endParser {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseEnd):
        parseEnd =
            generated_destructured_parseEnd
    }
    let element: ParserFast_Parser<element>
    let parseElement: @Sendable (ParserFast_State) -> ParserFast_PStep<element>
    let (generated_destructured_element) =
        generated_2
    element =
        generated_destructured_element
    switch element {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseElement):
        parseElement =
            generated_destructured_parseElement
    }
    return
        switch parseEnd(s0) {
        case let ParserFast_PStep.ParserFast_Good(_, s1):
            ParserFast_PStep.ParserFast_Good(foldedToRes(soFar), s1)
        case let ParserFast_PStep.ParserFast_Bad(endCommitted, endX):
            if endCommitted {
                ParserFast_PStep.ParserFast_Bad(true, endX)
            } else {
                switch parseElement(s0) {
                case let ParserFast_PStep.ParserFast_Good(elementResult, s1):
                    ParserFast_loopUntilHelp(true, endParser, element, reduce(elementResult)(soFar), reduce, foldedToRes, s1)
                case let ParserFast_PStep.ParserFast_Bad(elementCommitted, x):
                    ParserFast_PStep.ParserFast_Bad(Basics_or(committedSoFar, elementCommitted), x)
                }
            }
        }
}

@Sendable public static func ParserFast_loopWhileSucceeds<element: Sendable, folded: Sendable, res: Sendable>(_ element: ParserFast_Parser<element>, _ initialFolded: folded, _ reduce: @Sendable @escaping (element) -> (folded) -> folded, _ foldedToRes: @Sendable @escaping (folded) -> res) ->  ParserFast_Parser<res> {
    ParserFast_Parser.ParserFast_Parser({ (s: ParserFast_State) in ParserFast_loopWhileSucceedsHelp(element, initialFolded, reduce, foldedToRes, s) })
}

@Sendable public static func ParserFast_loopWhileSucceedsHelp<element: Sendable, folded: Sendable, res: Sendable>(_ generated_0: ParserFast_Parser<element>, _ soFar: folded, _ reduce: @Sendable @escaping (element) -> (folded) -> folded, _ foldedToRes: @Sendable @escaping (folded) -> res, _ s0: ParserFast_State) ->  ParserFast_PStep<res> {
    let element: ParserFast_Parser<element>
    let parseElement: @Sendable (ParserFast_State) -> ParserFast_PStep<element>
    let (generated_destructured_element) =
        generated_0
    element =
        generated_destructured_element
    switch element {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseElement):
        parseElement =
            generated_destructured_parseElement
    }
    return
        switch parseElement(s0) {
        case let ParserFast_PStep.ParserFast_Good(elementResult, s1):
            ParserFast_loopWhileSucceedsHelp(element, reduce(elementResult)(soFar), reduce, foldedToRes, s1)
        case let ParserFast_PStep.ParserFast_Bad(elementCommitted, x):
            if elementCommitted {
                ParserFast_PStep.ParserFast_Bad(true, x)
            } else {
                ParserFast_PStep.ParserFast_Good(foldedToRes(soFar), s0)
            }
        }
}

@Sendable public static func ParserFast_loopWhileSucceedsOntoResultFromParser<element: Sendable, folded: Sendable, res: Sendable>(_ element: ParserFast_Parser<element>, _ generated_1: ParserFast_Parser<folded>, _ reduce: @Sendable @escaping (element) -> (folded) -> folded, _ foldedToRes: @Sendable @escaping (folded) -> res) ->  ParserFast_Parser<res> {
    let parseInitialFolded: @Sendable (ParserFast_State) -> ParserFast_PStep<folded>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseInitialFolded):
        parseInitialFolded =
            generated_destructured_parseInitialFolded
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                switch parseInitialFolded(s0) {
                case let ParserFast_PStep.ParserFast_Good(initialFolded, s1):
                    ParserFast_loopWhileSucceedsHelp(element, initialFolded, reduce, foldedToRes, s1)
                case let ParserFast_PStep.ParserFast_Bad(committed, x):
                    ParserFast_PStep.ParserFast_Bad(committed, x)
                }
            }
        )
}

@Sendable public static func ParserFast_map<a: Sendable, b: Sendable>(_ func_: @Sendable @escaping (a) -> b, _ generated_1: ParserFast_Parser<a>) ->  ParserFast_Parser<b> {
    let parse: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parse):
        parse =
            generated_destructured_parse
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                switch parse(s0) {
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    ParserFast_PStep.ParserFast_Good(func_(a), s1)
                case let ParserFast_PStep.ParserFast_Bad(committed, x):
                    ParserFast_PStep.ParserFast_Bad(committed, x)
                }
            }
        )
}

@Sendable public static func ParserFast_map2<a: Sendable, b: Sendable, value: Sendable>(_ func_: @Sendable @escaping (a) -> (b) -> value, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<b>) ->  ParserFast_Parser<value> {
    let parseA: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserFast_State) -> ParserFast_PStep<b>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                switch parseA(s0) {
                case let ParserFast_PStep.ParserFast_Bad(committed, x):
                    ParserFast_PStep.ParserFast_Bad(committed, x)
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    switch parseB(s1) {
                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    case let ParserFast_PStep.ParserFast_Good(b, s2):
                        ParserFast_PStep.ParserFast_Good(func_(a)(b), s2)
                    }
                }
            }
        )
}

@Sendable public static func ParserFast_map2OrSucceed<a: Sendable, b: Sendable, value: Sendable>(_ func_: @Sendable @escaping (a) -> (b) -> value, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<b>, _ fallback: value) ->  ParserFast_Parser<value> {
    let parseA: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserFast_State) -> ParserFast_PStep<b>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                switch parseA(s0) {
                case let ParserFast_PStep.ParserFast_Bad(c1, x):
                    if c1 {
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    } else {
                        ParserFast_PStep.ParserFast_Good(fallback, s0)
                    }
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    switch parseB(s1) {
                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    case let ParserFast_PStep.ParserFast_Good(b, s2):
                        ParserFast_PStep.ParserFast_Good(func_(a)(b), s2)
                    }
                }
            }
        )
}

@Sendable public static func ParserFast_map2WithRange<a: Sendable, b: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (a) -> (b) -> value, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<b>) ->  ParserFast_Parser<value> {
    let parseA: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserFast_State) -> ParserFast_PStep<b>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                switch parseA(s0) {
                case let ParserFast_PStep.ParserFast_Bad(committed, x):
                    ParserFast_PStep.ParserFast_Bad(committed, x)
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    switch parseB(s1) {
                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    case let ParserFast_PStep.ParserFast_Good(b, s2):
                        ParserFast_PStep.ParserFast_Good(func_(Generated_end_start.Record(end: Generated_column_row.Record(column: s2.col, row: s2.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(a)(b), s2)
                    }
                }
            }
        )
}

@Sendable public static func ParserFast_map2WithRangeOrSucceed<a: Sendable, b: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (a) -> (b) -> value, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<b>, _ fallback: value) ->  ParserFast_Parser<value> {
    let parseA: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserFast_State) -> ParserFast_PStep<b>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                switch parseA(s0) {
                case let ParserFast_PStep.ParserFast_Bad(c1, x):
                    if c1 {
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    } else {
                        ParserFast_PStep.ParserFast_Good(fallback, s0)
                    }
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    switch parseB(s1) {
                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    case let ParserFast_PStep.ParserFast_Good(b, s2):
                        ParserFast_PStep.ParserFast_Good(func_(Generated_end_start.Record(end: Generated_column_row.Record(column: s2.col, row: s2.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(a)(b), s2)
                    }
                }
            }
        )
}

@Sendable public static func ParserFast_map2WithStartLocation<a: Sendable, b: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_column_row<Double, Double>) -> (a) -> (b) -> value, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<b>) ->  ParserFast_Parser<value> {
    let parseA: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserFast_State) -> ParserFast_PStep<b>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                switch parseA(s0) {
                case let ParserFast_PStep.ParserFast_Bad(committed, x):
                    ParserFast_PStep.ParserFast_Bad(committed, x)
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    switch parseB(s1) {
                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    case let ParserFast_PStep.ParserFast_Good(b, s2):
                        ParserFast_PStep.ParserFast_Good(func_(Generated_column_row.Record(column: s0.col, row: s0.row))(a)(b), s2)
                    }
                }
            }
        )
}

@Sendable public static func ParserFast_map3<a: Sendable, b: Sendable, c: Sendable, value: Sendable>(_ func_: @Sendable @escaping (a) -> (b) -> (c) -> value, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<b>, _ generated_3: ParserFast_Parser<c>) ->  ParserFast_Parser<value> {
    let parseA: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserFast_State) -> ParserFast_PStep<b>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserFast_State) -> ParserFast_PStep<c>
    switch generated_3 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                switch parseA(s0) {
                case let ParserFast_PStep.ParserFast_Bad(committed, x):
                    ParserFast_PStep.ParserFast_Bad(committed, x)
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    switch parseB(s1) {
                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    case let ParserFast_PStep.ParserFast_Good(b, s2):
                        switch parseC(s2) {
                        case let ParserFast_PStep.ParserFast_Bad(_, x):
                            ParserFast_PStep.ParserFast_Bad(true, x)
                        case let ParserFast_PStep.ParserFast_Good(c, s3):
                            ParserFast_PStep.ParserFast_Good(func_(a)(b)(c), s3)
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserFast_map3OrSucceed<a: Sendable, b: Sendable, c: Sendable, value: Sendable>(_ func_: @Sendable @escaping (a) -> (b) -> (c) -> value, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<b>, _ generated_3: ParserFast_Parser<c>, _ fallback: value) ->  ParserFast_Parser<value> {
    let parseA: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserFast_State) -> ParserFast_PStep<b>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserFast_State) -> ParserFast_PStep<c>
    switch generated_3 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                switch parseA(s0) {
                case let ParserFast_PStep.ParserFast_Bad(c1, x):
                    if c1 {
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    } else {
                        ParserFast_PStep.ParserFast_Good(fallback, s0)
                    }
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    switch parseB(s1) {
                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    case let ParserFast_PStep.ParserFast_Good(b, s2):
                        switch parseC(s2) {
                        case let ParserFast_PStep.ParserFast_Bad(_, x):
                            ParserFast_PStep.ParserFast_Bad(true, x)
                        case let ParserFast_PStep.ParserFast_Good(c, s3):
                            ParserFast_PStep.ParserFast_Good(func_(a)(b)(c), s3)
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserFast_map3WithRange<a: Sendable, b: Sendable, c: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (a) -> (b) -> (c) -> value, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<b>, _ generated_3: ParserFast_Parser<c>) ->  ParserFast_Parser<value> {
    let parseA: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserFast_State) -> ParserFast_PStep<b>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserFast_State) -> ParserFast_PStep<c>
    switch generated_3 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                switch parseA(s0) {
                case let ParserFast_PStep.ParserFast_Bad(committed, x):
                    ParserFast_PStep.ParserFast_Bad(committed, x)
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    switch parseB(s1) {
                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    case let ParserFast_PStep.ParserFast_Good(b, s2):
                        switch parseC(s2) {
                        case let ParserFast_PStep.ParserFast_Bad(_, x):
                            ParserFast_PStep.ParserFast_Bad(true, x)
                        case let ParserFast_PStep.ParserFast_Good(c, s3):
                            ParserFast_PStep.ParserFast_Good(func_(Generated_end_start.Record(end: Generated_column_row.Record(column: s3.col, row: s3.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(a)(b)(c), s3)
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserFast_map3WithStartLocation<a: Sendable, b: Sendable, c: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_column_row<Double, Double>) -> (a) -> (b) -> (c) -> value, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<b>, _ generated_3: ParserFast_Parser<c>) ->  ParserFast_Parser<value> {
    let parseA: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserFast_State) -> ParserFast_PStep<b>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserFast_State) -> ParserFast_PStep<c>
    switch generated_3 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                switch parseA(s0) {
                case let ParserFast_PStep.ParserFast_Bad(committed, x):
                    ParserFast_PStep.ParserFast_Bad(committed, x)
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    switch parseB(s1) {
                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    case let ParserFast_PStep.ParserFast_Good(b, s2):
                        switch parseC(s2) {
                        case let ParserFast_PStep.ParserFast_Bad(_, x):
                            ParserFast_PStep.ParserFast_Bad(true, x)
                        case let ParserFast_PStep.ParserFast_Good(c, s3):
                            ParserFast_PStep.ParserFast_Good(func_(Generated_column_row.Record(column: s0.col, row: s0.row))(a)(b)(c), s3)
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserFast_map4<a: Sendable, b: Sendable, c: Sendable, d: Sendable, value: Sendable>(_ func_: @Sendable @escaping (a) -> (b) -> (c) -> (d) -> value, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<b>, _ generated_3: ParserFast_Parser<c>, _ generated_4: ParserFast_Parser<d>) ->  ParserFast_Parser<value> {
    let parseA: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserFast_State) -> ParserFast_PStep<b>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserFast_State) -> ParserFast_PStep<c>
    switch generated_3 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserFast_State) -> ParserFast_PStep<d>
    switch generated_4 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                switch parseA(s0) {
                case let ParserFast_PStep.ParserFast_Bad(committed, x):
                    ParserFast_PStep.ParserFast_Bad(committed, x)
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    switch parseB(s1) {
                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    case let ParserFast_PStep.ParserFast_Good(b, s2):
                        switch parseC(s2) {
                        case let ParserFast_PStep.ParserFast_Bad(_, x):
                            ParserFast_PStep.ParserFast_Bad(true, x)
                        case let ParserFast_PStep.ParserFast_Good(c, s3):
                            switch parseD(s3) {
                            case let ParserFast_PStep.ParserFast_Bad(_, x):
                                ParserFast_PStep.ParserFast_Bad(true, x)
                            case let ParserFast_PStep.ParserFast_Good(d, s4):
                                ParserFast_PStep.ParserFast_Good(func_(a)(b)(c)(d), s4)
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserFast_map4OrSucceed<a: Sendable, b: Sendable, c: Sendable, d: Sendable, value: Sendable>(_ func_: @Sendable @escaping (a) -> (b) -> (c) -> (d) -> value, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<b>, _ generated_3: ParserFast_Parser<c>, _ generated_4: ParserFast_Parser<d>, _ fallback: value) ->  ParserFast_Parser<value> {
    let parseA: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserFast_State) -> ParserFast_PStep<b>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserFast_State) -> ParserFast_PStep<c>
    switch generated_3 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserFast_State) -> ParserFast_PStep<d>
    switch generated_4 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                switch parseA(s0) {
                case let ParserFast_PStep.ParserFast_Bad(c1, x):
                    if c1 {
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    } else {
                        ParserFast_PStep.ParserFast_Good(fallback, s0)
                    }
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    switch parseB(s1) {
                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    case let ParserFast_PStep.ParserFast_Good(b, s2):
                        switch parseC(s2) {
                        case let ParserFast_PStep.ParserFast_Bad(_, x):
                            ParserFast_PStep.ParserFast_Bad(true, x)
                        case let ParserFast_PStep.ParserFast_Good(c, s3):
                            switch parseD(s3) {
                            case let ParserFast_PStep.ParserFast_Bad(_, x):
                                ParserFast_PStep.ParserFast_Bad(true, x)
                            case let ParserFast_PStep.ParserFast_Good(d, s4):
                                ParserFast_PStep.ParserFast_Good(func_(a)(b)(c)(d), s4)
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserFast_map4WithRange<a: Sendable, b: Sendable, c: Sendable, d: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (a) -> (b) -> (c) -> (d) -> value, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<b>, _ generated_3: ParserFast_Parser<c>, _ generated_4: ParserFast_Parser<d>) ->  ParserFast_Parser<value> {
    let parseA: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserFast_State) -> ParserFast_PStep<b>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserFast_State) -> ParserFast_PStep<c>
    switch generated_3 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserFast_State) -> ParserFast_PStep<d>
    switch generated_4 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                switch parseA(s0) {
                case let ParserFast_PStep.ParserFast_Bad(committed, x):
                    ParserFast_PStep.ParserFast_Bad(committed, x)
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    switch parseB(s1) {
                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    case let ParserFast_PStep.ParserFast_Good(b, s2):
                        switch parseC(s2) {
                        case let ParserFast_PStep.ParserFast_Bad(_, x):
                            ParserFast_PStep.ParserFast_Bad(true, x)
                        case let ParserFast_PStep.ParserFast_Good(c, s3):
                            switch parseD(s3) {
                            case let ParserFast_PStep.ParserFast_Bad(_, x):
                                ParserFast_PStep.ParserFast_Bad(true, x)
                            case let ParserFast_PStep.ParserFast_Good(d, s4):
                                ParserFast_PStep.ParserFast_Good(func_(Generated_end_start.Record(end: Generated_column_row.Record(column: s4.col, row: s4.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(a)(b)(c)(d), s4)
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserFast_map5<a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, value: Sendable>(_ func_: @Sendable @escaping (a) -> (b) -> (c) -> (d) -> (e) -> value, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<b>, _ generated_3: ParserFast_Parser<c>, _ generated_4: ParserFast_Parser<d>, _ generated_5: ParserFast_Parser<e>) ->  ParserFast_Parser<value> {
    let parseA: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserFast_State) -> ParserFast_PStep<b>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserFast_State) -> ParserFast_PStep<c>
    switch generated_3 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserFast_State) -> ParserFast_PStep<d>
    switch generated_4 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    let parseE: @Sendable (ParserFast_State) -> ParserFast_PStep<e>
    switch generated_5 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseE):
        parseE =
            generated_destructured_parseE
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                switch parseA(s0) {
                case let ParserFast_PStep.ParserFast_Bad(committed, x):
                    ParserFast_PStep.ParserFast_Bad(committed, x)
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    switch parseB(s1) {
                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    case let ParserFast_PStep.ParserFast_Good(b, s2):
                        switch parseC(s2) {
                        case let ParserFast_PStep.ParserFast_Bad(_, x):
                            ParserFast_PStep.ParserFast_Bad(true, x)
                        case let ParserFast_PStep.ParserFast_Good(c, s3):
                            switch parseD(s3) {
                            case let ParserFast_PStep.ParserFast_Bad(_, x):
                                ParserFast_PStep.ParserFast_Bad(true, x)
                            case let ParserFast_PStep.ParserFast_Good(d, s4):
                                switch parseE(s4) {
                                case let ParserFast_PStep.ParserFast_Bad(_, x):
                                    ParserFast_PStep.ParserFast_Bad(true, x)
                                case let ParserFast_PStep.ParserFast_Good(e, s5):
                                    ParserFast_PStep.ParserFast_Good(func_(a)(b)(c)(d)(e), s5)
                                }
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserFast_map5WithRange<a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (a) -> (b) -> (c) -> (d) -> (e) -> value, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<b>, _ generated_3: ParserFast_Parser<c>, _ generated_4: ParserFast_Parser<d>, _ generated_5: ParserFast_Parser<e>) ->  ParserFast_Parser<value> {
    let parseA: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserFast_State) -> ParserFast_PStep<b>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserFast_State) -> ParserFast_PStep<c>
    switch generated_3 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserFast_State) -> ParserFast_PStep<d>
    switch generated_4 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    let parseE: @Sendable (ParserFast_State) -> ParserFast_PStep<e>
    switch generated_5 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseE):
        parseE =
            generated_destructured_parseE
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                switch parseA(s0) {
                case let ParserFast_PStep.ParserFast_Bad(committed, x):
                    ParserFast_PStep.ParserFast_Bad(committed, x)
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    switch parseB(s1) {
                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    case let ParserFast_PStep.ParserFast_Good(b, s2):
                        switch parseC(s2) {
                        case let ParserFast_PStep.ParserFast_Bad(_, x):
                            ParserFast_PStep.ParserFast_Bad(true, x)
                        case let ParserFast_PStep.ParserFast_Good(c, s3):
                            switch parseD(s3) {
                            case let ParserFast_PStep.ParserFast_Bad(_, x):
                                ParserFast_PStep.ParserFast_Bad(true, x)
                            case let ParserFast_PStep.ParserFast_Good(d, s4):
                                switch parseE(s4) {
                                case let ParserFast_PStep.ParserFast_Bad(_, x):
                                    ParserFast_PStep.ParserFast_Bad(true, x)
                                case let ParserFast_PStep.ParserFast_Good(e, s5):
                                    ParserFast_PStep.ParserFast_Good(func_(Generated_end_start.Record(end: Generated_column_row.Record(column: s5.col, row: s5.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(a)(b)(c)(d)(e), s5)
                                }
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserFast_map5WithStartLocation<a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_column_row<Double, Double>) -> (a) -> (b) -> (c) -> (d) -> (e) -> value, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<b>, _ generated_3: ParserFast_Parser<c>, _ generated_4: ParserFast_Parser<d>, _ generated_5: ParserFast_Parser<e>) ->  ParserFast_Parser<value> {
    let parseA: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserFast_State) -> ParserFast_PStep<b>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserFast_State) -> ParserFast_PStep<c>
    switch generated_3 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserFast_State) -> ParserFast_PStep<d>
    switch generated_4 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    let parseE: @Sendable (ParserFast_State) -> ParserFast_PStep<e>
    switch generated_5 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseE):
        parseE =
            generated_destructured_parseE
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                switch parseA(s0) {
                case let ParserFast_PStep.ParserFast_Bad(committed, x):
                    ParserFast_PStep.ParserFast_Bad(committed, x)
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    switch parseB(s1) {
                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    case let ParserFast_PStep.ParserFast_Good(b, s2):
                        switch parseC(s2) {
                        case let ParserFast_PStep.ParserFast_Bad(_, x):
                            ParserFast_PStep.ParserFast_Bad(true, x)
                        case let ParserFast_PStep.ParserFast_Good(c, s3):
                            switch parseD(s3) {
                            case let ParserFast_PStep.ParserFast_Bad(_, x):
                                ParserFast_PStep.ParserFast_Bad(true, x)
                            case let ParserFast_PStep.ParserFast_Good(d, s4):
                                switch parseE(s4) {
                                case let ParserFast_PStep.ParserFast_Bad(_, x):
                                    ParserFast_PStep.ParserFast_Bad(true, x)
                                case let ParserFast_PStep.ParserFast_Good(e, s5):
                                    ParserFast_PStep.ParserFast_Good(func_(Generated_column_row.Record(column: s0.col, row: s0.row))(a)(b)(c)(d)(e), s5)
                                }
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserFast_map6<a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, f: Sendable, value: Sendable>(_ func_: @Sendable @escaping (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> value, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<b>, _ generated_3: ParserFast_Parser<c>, _ generated_4: ParserFast_Parser<d>, _ generated_5: ParserFast_Parser<e>, _ generated_6: ParserFast_Parser<f>) ->  ParserFast_Parser<value> {
    let parseA: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserFast_State) -> ParserFast_PStep<b>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserFast_State) -> ParserFast_PStep<c>
    switch generated_3 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserFast_State) -> ParserFast_PStep<d>
    switch generated_4 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    let parseE: @Sendable (ParserFast_State) -> ParserFast_PStep<e>
    switch generated_5 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseE):
        parseE =
            generated_destructured_parseE
    }
    let parseF: @Sendable (ParserFast_State) -> ParserFast_PStep<f>
    switch generated_6 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseF):
        parseF =
            generated_destructured_parseF
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                switch parseA(s0) {
                case let ParserFast_PStep.ParserFast_Bad(committed, x):
                    ParserFast_PStep.ParserFast_Bad(committed, x)
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    switch parseB(s1) {
                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    case let ParserFast_PStep.ParserFast_Good(b, s2):
                        switch parseC(s2) {
                        case let ParserFast_PStep.ParserFast_Bad(_, x):
                            ParserFast_PStep.ParserFast_Bad(true, x)
                        case let ParserFast_PStep.ParserFast_Good(c, s3):
                            switch parseD(s3) {
                            case let ParserFast_PStep.ParserFast_Bad(_, x):
                                ParserFast_PStep.ParserFast_Bad(true, x)
                            case let ParserFast_PStep.ParserFast_Good(d, s4):
                                switch parseE(s4) {
                                case let ParserFast_PStep.ParserFast_Bad(_, x):
                                    ParserFast_PStep.ParserFast_Bad(true, x)
                                case let ParserFast_PStep.ParserFast_Good(e, s5):
                                    switch parseF(s5) {
                                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                                        ParserFast_PStep.ParserFast_Bad(true, x)
                                    case let ParserFast_PStep.ParserFast_Good(f, s6):
                                        ParserFast_PStep.ParserFast_Good(func_(a)(b)(c)(d)(e)(f), s6)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserFast_map6WithRange<a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, f: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> value, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<b>, _ generated_3: ParserFast_Parser<c>, _ generated_4: ParserFast_Parser<d>, _ generated_5: ParserFast_Parser<e>, _ generated_6: ParserFast_Parser<f>) ->  ParserFast_Parser<value> {
    let parseA: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserFast_State) -> ParserFast_PStep<b>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserFast_State) -> ParserFast_PStep<c>
    switch generated_3 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserFast_State) -> ParserFast_PStep<d>
    switch generated_4 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    let parseE: @Sendable (ParserFast_State) -> ParserFast_PStep<e>
    switch generated_5 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseE):
        parseE =
            generated_destructured_parseE
    }
    let parseF: @Sendable (ParserFast_State) -> ParserFast_PStep<f>
    switch generated_6 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseF):
        parseF =
            generated_destructured_parseF
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                switch parseA(s0) {
                case let ParserFast_PStep.ParserFast_Bad(committed, x):
                    ParserFast_PStep.ParserFast_Bad(committed, x)
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    switch parseB(s1) {
                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    case let ParserFast_PStep.ParserFast_Good(b, s2):
                        switch parseC(s2) {
                        case let ParserFast_PStep.ParserFast_Bad(_, x):
                            ParserFast_PStep.ParserFast_Bad(true, x)
                        case let ParserFast_PStep.ParserFast_Good(c, s3):
                            switch parseD(s3) {
                            case let ParserFast_PStep.ParserFast_Bad(_, x):
                                ParserFast_PStep.ParserFast_Bad(true, x)
                            case let ParserFast_PStep.ParserFast_Good(d, s4):
                                switch parseE(s4) {
                                case let ParserFast_PStep.ParserFast_Bad(_, x):
                                    ParserFast_PStep.ParserFast_Bad(true, x)
                                case let ParserFast_PStep.ParserFast_Good(e, s5):
                                    switch parseF(s5) {
                                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                                        ParserFast_PStep.ParserFast_Bad(true, x)
                                    case let ParserFast_PStep.ParserFast_Good(f, s6):
                                        ParserFast_PStep.ParserFast_Good(func_(Generated_end_start.Record(end: Generated_column_row.Record(column: s6.col, row: s6.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(a)(b)(c)(d)(e)(f), s6)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserFast_map6WithStartLocation<a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, f: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_column_row<Double, Double>) -> (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> value, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<b>, _ generated_3: ParserFast_Parser<c>, _ generated_4: ParserFast_Parser<d>, _ generated_5: ParserFast_Parser<e>, _ generated_6: ParserFast_Parser<f>) ->  ParserFast_Parser<value> {
    let parseA: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserFast_State) -> ParserFast_PStep<b>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserFast_State) -> ParserFast_PStep<c>
    switch generated_3 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserFast_State) -> ParserFast_PStep<d>
    switch generated_4 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    let parseE: @Sendable (ParserFast_State) -> ParserFast_PStep<e>
    switch generated_5 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseE):
        parseE =
            generated_destructured_parseE
    }
    let parseF: @Sendable (ParserFast_State) -> ParserFast_PStep<f>
    switch generated_6 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseF):
        parseF =
            generated_destructured_parseF
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                switch parseA(s0) {
                case let ParserFast_PStep.ParserFast_Bad(committed, x):
                    ParserFast_PStep.ParserFast_Bad(committed, x)
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    switch parseB(s1) {
                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    case let ParserFast_PStep.ParserFast_Good(b, s2):
                        switch parseC(s2) {
                        case let ParserFast_PStep.ParserFast_Bad(_, x):
                            ParserFast_PStep.ParserFast_Bad(true, x)
                        case let ParserFast_PStep.ParserFast_Good(c, s3):
                            switch parseD(s3) {
                            case let ParserFast_PStep.ParserFast_Bad(_, x):
                                ParserFast_PStep.ParserFast_Bad(true, x)
                            case let ParserFast_PStep.ParserFast_Good(d, s4):
                                switch parseE(s4) {
                                case let ParserFast_PStep.ParserFast_Bad(_, x):
                                    ParserFast_PStep.ParserFast_Bad(true, x)
                                case let ParserFast_PStep.ParserFast_Good(e, s5):
                                    switch parseF(s5) {
                                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                                        ParserFast_PStep.ParserFast_Bad(true, x)
                                    case let ParserFast_PStep.ParserFast_Good(f, s6):
                                        ParserFast_PStep.ParserFast_Good(func_(Generated_column_row.Record(column: s0.col, row: s0.row))(a)(b)(c)(d)(e)(f), s6)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserFast_map7WithRange<a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, f: Sendable, g: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> (g) -> value, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<b>, _ generated_3: ParserFast_Parser<c>, _ generated_4: ParserFast_Parser<d>, _ generated_5: ParserFast_Parser<e>, _ generated_6: ParserFast_Parser<f>, _ generated_7: ParserFast_Parser<g>) ->  ParserFast_Parser<value> {
    let parseA: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserFast_State) -> ParserFast_PStep<b>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserFast_State) -> ParserFast_PStep<c>
    switch generated_3 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserFast_State) -> ParserFast_PStep<d>
    switch generated_4 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    let parseE: @Sendable (ParserFast_State) -> ParserFast_PStep<e>
    switch generated_5 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseE):
        parseE =
            generated_destructured_parseE
    }
    let parseF: @Sendable (ParserFast_State) -> ParserFast_PStep<f>
    switch generated_6 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseF):
        parseF =
            generated_destructured_parseF
    }
    let parseG: @Sendable (ParserFast_State) -> ParserFast_PStep<g>
    switch generated_7 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseG):
        parseG =
            generated_destructured_parseG
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                switch parseA(s0) {
                case let ParserFast_PStep.ParserFast_Bad(committed, x):
                    ParserFast_PStep.ParserFast_Bad(committed, x)
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    switch parseB(s1) {
                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    case let ParserFast_PStep.ParserFast_Good(b, s2):
                        switch parseC(s2) {
                        case let ParserFast_PStep.ParserFast_Bad(_, x):
                            ParserFast_PStep.ParserFast_Bad(true, x)
                        case let ParserFast_PStep.ParserFast_Good(c, s3):
                            switch parseD(s3) {
                            case let ParserFast_PStep.ParserFast_Bad(_, x):
                                ParserFast_PStep.ParserFast_Bad(true, x)
                            case let ParserFast_PStep.ParserFast_Good(d, s4):
                                switch parseE(s4) {
                                case let ParserFast_PStep.ParserFast_Bad(_, x):
                                    ParserFast_PStep.ParserFast_Bad(true, x)
                                case let ParserFast_PStep.ParserFast_Good(e, s5):
                                    switch parseF(s5) {
                                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                                        ParserFast_PStep.ParserFast_Bad(true, x)
                                    case let ParserFast_PStep.ParserFast_Good(f, s6):
                                        switch parseG(s6) {
                                        case let ParserFast_PStep.ParserFast_Bad(_, x):
                                            ParserFast_PStep.ParserFast_Bad(true, x)
                                        case let ParserFast_PStep.ParserFast_Good(g, s7):
                                            ParserFast_PStep.ParserFast_Good(func_(Generated_end_start.Record(end: Generated_column_row.Record(column: s7.col, row: s7.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(a)(b)(c)(d)(e)(f)(g), s7)
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserFast_map8WithStartLocation<a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, f: Sendable, g: Sendable, h: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_column_row<Double, Double>) -> (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> (g) -> (h) -> value, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<b>, _ generated_3: ParserFast_Parser<c>, _ generated_4: ParserFast_Parser<d>, _ generated_5: ParserFast_Parser<e>, _ generated_6: ParserFast_Parser<f>, _ generated_7: ParserFast_Parser<g>, _ generated_8: ParserFast_Parser<h>) ->  ParserFast_Parser<value> {
    let parseA: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserFast_State) -> ParserFast_PStep<b>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserFast_State) -> ParserFast_PStep<c>
    switch generated_3 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserFast_State) -> ParserFast_PStep<d>
    switch generated_4 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    let parseE: @Sendable (ParserFast_State) -> ParserFast_PStep<e>
    switch generated_5 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseE):
        parseE =
            generated_destructured_parseE
    }
    let parseF: @Sendable (ParserFast_State) -> ParserFast_PStep<f>
    switch generated_6 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseF):
        parseF =
            generated_destructured_parseF
    }
    let parseG: @Sendable (ParserFast_State) -> ParserFast_PStep<g>
    switch generated_7 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseG):
        parseG =
            generated_destructured_parseG
    }
    let parseH: @Sendable (ParserFast_State) -> ParserFast_PStep<h>
    switch generated_8 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseH):
        parseH =
            generated_destructured_parseH
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                switch parseA(s0) {
                case let ParserFast_PStep.ParserFast_Bad(committed, x):
                    ParserFast_PStep.ParserFast_Bad(committed, x)
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    switch parseB(s1) {
                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    case let ParserFast_PStep.ParserFast_Good(b, s2):
                        switch parseC(s2) {
                        case let ParserFast_PStep.ParserFast_Bad(_, x):
                            ParserFast_PStep.ParserFast_Bad(true, x)
                        case let ParserFast_PStep.ParserFast_Good(c, s3):
                            switch parseD(s3) {
                            case let ParserFast_PStep.ParserFast_Bad(_, x):
                                ParserFast_PStep.ParserFast_Bad(true, x)
                            case let ParserFast_PStep.ParserFast_Good(d, s4):
                                switch parseE(s4) {
                                case let ParserFast_PStep.ParserFast_Bad(_, x):
                                    ParserFast_PStep.ParserFast_Bad(true, x)
                                case let ParserFast_PStep.ParserFast_Good(e, s5):
                                    switch parseF(s5) {
                                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                                        ParserFast_PStep.ParserFast_Bad(true, x)
                                    case let ParserFast_PStep.ParserFast_Good(f, s6):
                                        switch parseG(s6) {
                                        case let ParserFast_PStep.ParserFast_Bad(_, x):
                                            ParserFast_PStep.ParserFast_Bad(true, x)
                                        case let ParserFast_PStep.ParserFast_Good(g, s7):
                                            switch parseH(s7) {
                                            case let ParserFast_PStep.ParserFast_Bad(_, x):
                                                ParserFast_PStep.ParserFast_Bad(true, x)
                                            case let ParserFast_PStep.ParserFast_Good(h, s8):
                                                ParserFast_PStep.ParserFast_Good(func_(Generated_column_row.Record(column: s0.col, row: s0.row))(a)(b)(c)(d)(e)(f)(g)(h), s8)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserFast_map9WithRange<a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, f: Sendable, g: Sendable, h: Sendable, i: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> (g) -> (h) -> (i) -> value, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<b>, _ generated_3: ParserFast_Parser<c>, _ generated_4: ParserFast_Parser<d>, _ generated_5: ParserFast_Parser<e>, _ generated_6: ParserFast_Parser<f>, _ generated_7: ParserFast_Parser<g>, _ generated_8: ParserFast_Parser<h>, _ generated_9: ParserFast_Parser<i>) ->  ParserFast_Parser<value> {
    let parseA: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserFast_State) -> ParserFast_PStep<b>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserFast_State) -> ParserFast_PStep<c>
    switch generated_3 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserFast_State) -> ParserFast_PStep<d>
    switch generated_4 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    let parseE: @Sendable (ParserFast_State) -> ParserFast_PStep<e>
    switch generated_5 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseE):
        parseE =
            generated_destructured_parseE
    }
    let parseF: @Sendable (ParserFast_State) -> ParserFast_PStep<f>
    switch generated_6 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseF):
        parseF =
            generated_destructured_parseF
    }
    let parseG: @Sendable (ParserFast_State) -> ParserFast_PStep<g>
    switch generated_7 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseG):
        parseG =
            generated_destructured_parseG
    }
    let parseH: @Sendable (ParserFast_State) -> ParserFast_PStep<h>
    switch generated_8 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseH):
        parseH =
            generated_destructured_parseH
    }
    let parseI: @Sendable (ParserFast_State) -> ParserFast_PStep<i>
    switch generated_9 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseI):
        parseI =
            generated_destructured_parseI
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                switch parseA(s0) {
                case let ParserFast_PStep.ParserFast_Bad(committed, x):
                    ParserFast_PStep.ParserFast_Bad(committed, x)
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    switch parseB(s1) {
                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                        ParserFast_PStep.ParserFast_Bad(true, x)
                    case let ParserFast_PStep.ParserFast_Good(b, s2):
                        switch parseC(s2) {
                        case let ParserFast_PStep.ParserFast_Bad(_, x):
                            ParserFast_PStep.ParserFast_Bad(true, x)
                        case let ParserFast_PStep.ParserFast_Good(c, s3):
                            switch parseD(s3) {
                            case let ParserFast_PStep.ParserFast_Bad(_, x):
                                ParserFast_PStep.ParserFast_Bad(true, x)
                            case let ParserFast_PStep.ParserFast_Good(d, s4):
                                switch parseE(s4) {
                                case let ParserFast_PStep.ParserFast_Bad(_, x):
                                    ParserFast_PStep.ParserFast_Bad(true, x)
                                case let ParserFast_PStep.ParserFast_Good(e, s5):
                                    switch parseF(s5) {
                                    case let ParserFast_PStep.ParserFast_Bad(_, x):
                                        ParserFast_PStep.ParserFast_Bad(true, x)
                                    case let ParserFast_PStep.ParserFast_Good(f, s6):
                                        switch parseG(s6) {
                                        case let ParserFast_PStep.ParserFast_Bad(_, x):
                                            ParserFast_PStep.ParserFast_Bad(true, x)
                                        case let ParserFast_PStep.ParserFast_Good(g, s7):
                                            switch parseH(s7) {
                                            case let ParserFast_PStep.ParserFast_Bad(_, x):
                                                ParserFast_PStep.ParserFast_Bad(true, x)
                                            case let ParserFast_PStep.ParserFast_Good(h, s8):
                                                switch parseI(s8) {
                                                case let ParserFast_PStep.ParserFast_Bad(_, x):
                                                    ParserFast_PStep.ParserFast_Bad(true, x)
                                                case let ParserFast_PStep.ParserFast_Good(i, s9):
                                                    ParserFast_PStep.ParserFast_Good(func_(Generated_end_start.Record(end: Generated_column_row.Record(column: s9.col, row: s9.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(a)(b)(c)(d)(e)(f)(g)(h)(i), s9)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserFast_mapWithRange<a: Sendable, b: Sendable>(_ combineStartAndResult: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (a) -> b, _ generated_1: ParserFast_Parser<a>) ->  ParserFast_Parser<b> {
    let parse: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parse):
        parse =
            generated_destructured_parse
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                switch parse(s0) {
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    ParserFast_PStep.ParserFast_Good(combineStartAndResult(Generated_end_start.Record(end: Generated_column_row.Record(column: s1.col, row: s1.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(a), s1)
                case let ParserFast_PStep.ParserFast_Bad(committed, x):
                    ParserFast_PStep.ParserFast_Bad(committed, x)
                }
            }
        )
}

@Sendable public static func ParserFast_nestableMultiCommentMapWithRange<res: Sendable>(_ rangeContentToRes: @Sendable @escaping (ElmSyntaxRange_Range) -> (String) -> res, _ generated_1: Tuple<UnicodeScalar, String>, _ generated_2: Tuple<UnicodeScalar, String>) ->  ParserFast_Parser<res> {
    let openChar: UnicodeScalar
    let openTail: String
    switch generated_1 {
    case let Tuple.Tuple(generated_destructured_openChar, generated_destructured_openTail):
        openChar =
            generated_destructured_openChar
        openTail =
            generated_destructured_openTail
    }
    let closeChar: UnicodeScalar
    let closeTail: String
    switch generated_2 {
    case let Tuple.Tuple(generated_destructured_closeChar, generated_destructured_closeTail):
        closeChar =
            generated_destructured_closeChar
        closeTail =
            generated_destructured_closeTail
    }
    let open_: String =
        String_cons(openChar, openTail)
    @Sendable func generated_let_declarationResult_isNotRelevant(_ char: UnicodeScalar) ->  Bool {
        Basics_and(Basics_neq(char, openChar), Basics_and(Basics_neq(char, closeChar), Basics_not(CharExtra_isUtf16Surrogate(char))))
    }
    let generated_let_declarationResult_close: String =
        String_cons(closeChar, closeTail)
    return
        ParserFast_map2WithRange(
            { (range: ElmSyntaxRange_Range) in { (afterOpen: String) in { (contentAfterAfterOpen: String) in rangeContentToRes(range)(String_append(open_, String_append(afterOpen, String_append(contentAfterAfterOpen, generated_let_declarationResult_close)))) } } },
            ParserFast_symbolFollowedBy(open_, ParserFast_while(generated_let_declarationResult_isNotRelevant)),
            ParserFast_oneOf2(
                ParserFast_symbol(generated_let_declarationResult_close, ""),
                ParserFast_loop(
                    Tuple.Tuple("", 1.0),
                    ParserFast_oneOf3(ParserFast_symbol(generated_let_declarationResult_close, Tuple.Tuple(generated_let_declarationResult_close, -1.0)), ParserFast_symbol(open_, Tuple.Tuple(open_, 1.0)), ParserFast_anyCharFollowedByWhileMap({ (consumed: String) in Tuple.Tuple(consumed, 0.0) }, generated_let_declarationResult_isNotRelevant)),
                    { (generated_argument2_argument1_argument2_letResult_declarationResult_0: Tuple<String, Double>) in
                        { (generated_argument2_argument1_argument2_letResult_declarationResult_1: Tuple<String, Double>) in
                            let toAppend: String
                            let nestingChange: Double
                            switch generated_argument2_argument1_argument2_letResult_declarationResult_0 {
                            case let Tuple.Tuple(generated_destructured_toAppend, generated_destructured_nestingChange):
                                toAppend =
                                    generated_destructured_toAppend
                                nestingChange =
                                    generated_destructured_nestingChange
                            }
                            let soFarContent: String
                            let soFarNesting: Double
                            switch generated_argument2_argument1_argument2_letResult_declarationResult_1 {
                            case let Tuple.Tuple(generated_destructured_soFarContent, generated_destructured_soFarNesting):
                                soFarContent =
                                    generated_destructured_soFarContent
                                soFarNesting =
                                    generated_destructured_soFarNesting
                            }
                            let generated_let_result_argument2_argument1_argument2_letResult_declarationResult_newNesting: Double =
                                Basics_add(soFarNesting, nestingChange)
                            return
                                if Basics_eq(generated_let_result_argument2_argument1_argument2_letResult_declarationResult_newNesting, 0.0) {
                                    ParserFast_Step.ParserFast_Done(soFarContent)
                                } else {
                                    ParserFast_Step.ParserFast_Loop(Tuple.Tuple(String_append(soFarContent, toAppend), generated_let_result_argument2_argument1_argument2_letResult_declarationResult_newNesting))
                                }
                        }
                    }
                )
            )
        )
}

@Sendable public static func ParserFast_offsetSourceAndThen<a: Sendable>(_ callback: @Sendable @escaping (Double) -> (String) -> ParserFast_Parser<a>) ->  ParserFast_Parser<a> {
    ParserFast_Parser.ParserFast_Parser(
        { (s: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_parse: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
            switch callback(s.offset)(s.src) {
            case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parse):
                generated_let_result_argument0_declarationResult_parse =
                    generated_destructured_parse
            }
            return generated_let_result_argument0_declarationResult_parse(s)
        }
    )
}

@Sendable public static func ParserFast_offsetSourceAndThenOrSucceed<a: Sendable>(_ callback: @Sendable @escaping (Double) -> (String) -> Maybe_Maybe<ParserFast_Parser<a>>, _ fallback: a) ->  ParserFast_Parser<a> {
    ParserFast_Parser.ParserFast_Parser(
        { (s: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
            switch callback(s.offset)(s.src) {
            case Maybe_Maybe.Maybe_Nothing:
                ParserFast_PStep.ParserFast_Good(fallback, s)
            case let Maybe_Maybe.Maybe_Just(ParserFast_Parser.ParserFast_Parser(parse)):
                parse(s)
            }
        }
    )
}

@Sendable public static func ParserFast_oneOf2<a: Sendable>(_ generated_0: ParserFast_Parser<a>, _ generated_1: ParserFast_Parser<a>) ->  ParserFast_Parser<a> {
    let attemptFirst: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_0 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attemptFirst):
        attemptFirst =
            generated_destructured_attemptFirst
    }
    let attemptSecond: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attemptSecond):
        attemptSecond =
            generated_destructured_attemptSecond
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s: ParserFast_State) in
                let generated_localReturnResult_result_argument0_declarationResult: ParserFast_PStep<a>
                switch attemptFirst(s) {
                case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                    let firstGood: ParserFast_PStep<a> =
                        ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                    generated_localReturnResult_result_argument0_declarationResult =
                        firstGood
                case let ParserFast_PStep.ParserFast_Bad(firstCommitted, firstX):
                    let firstBad: ParserFast_PStep<a> =
                        ParserFast_PStep.ParserFast_Bad(firstCommitted, firstX)
                    let generated_localReturnResult_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                    if firstCommitted {
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            firstBad
                    } else {
                        let generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                        switch attemptSecond(s) {
                        case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                            let secondGood: ParserFast_PStep<a> =
                                ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                secondGood
                        case let ParserFast_PStep.ParserFast_Bad(secondCommitted, secondX):
                            let secondBad: ParserFast_PStep<a> =
                                ParserFast_PStep.ParserFast_Bad(secondCommitted, secondX)
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                if secondCommitted {
                                    secondBad
                                } else {
                                    ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingOneOf(firstX, secondX, List_List.List_Empty))
                                }
                        }
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult
                    }
                    generated_localReturnResult_result_argument0_declarationResult =
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult
                }
                return generated_localReturnResult_result_argument0_declarationResult
            }
        )
}

@Sendable public static func ParserFast_oneOf2Map<choice: Sendable, first: Sendable, second: Sendable>(_ firstToChoice: @Sendable @escaping (first) -> choice, _ generated_1: ParserFast_Parser<first>, _ secondToChoice: @Sendable @escaping (second) -> choice, _ generated_3: ParserFast_Parser<second>) ->  ParserFast_Parser<choice> {
    let attemptFirst: @Sendable (ParserFast_State) -> ParserFast_PStep<first>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attemptFirst):
        attemptFirst =
            generated_destructured_attemptFirst
    }
    let attemptSecond: @Sendable (ParserFast_State) -> ParserFast_PStep<second>
    switch generated_3 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attemptSecond):
        attemptSecond =
            generated_destructured_attemptSecond
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s: ParserFast_State) in
                switch attemptFirst(s) {
                case let ParserFast_PStep.ParserFast_Good(first, s1):
                    ParserFast_PStep.ParserFast_Good(firstToChoice(first), s1)
                case let ParserFast_PStep.ParserFast_Bad(firstCommitted, firstX):
                    if firstCommitted {
                        ParserFast_PStep.ParserFast_Bad(firstCommitted, firstX)
                    } else {
                        switch attemptSecond(s) {
                        case let ParserFast_PStep.ParserFast_Good(second, s1):
                            ParserFast_PStep.ParserFast_Good(secondToChoice(second), s1)
                        case let ParserFast_PStep.ParserFast_Bad(secondCommitted, secondX):
                            if secondCommitted {
                                ParserFast_PStep.ParserFast_Bad(secondCommitted, secondX)
                            } else {
                                ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingOneOf(firstX, secondX, List_List.List_Empty))
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserFast_oneOf2MapWithStartRowColumnAndEndRowColumn<choice: Sendable, first: Sendable, second: Sendable>(_ firstToChoice: @Sendable @escaping (Double) -> (Double) -> (first) -> (Double) -> (Double) -> choice, _ generated_1: ParserFast_Parser<first>, _ secondToChoice: @Sendable @escaping (Double) -> (Double) -> (second) -> (Double) -> (Double) -> choice, _ generated_3: ParserFast_Parser<second>) ->  ParserFast_Parser<choice> {
    let attemptFirst: @Sendable (ParserFast_State) -> ParserFast_PStep<first>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attemptFirst):
        attemptFirst =
            generated_destructured_attemptFirst
    }
    let attemptSecond: @Sendable (ParserFast_State) -> ParserFast_PStep<second>
    switch generated_3 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attemptSecond):
        attemptSecond =
            generated_destructured_attemptSecond
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s: ParserFast_State) in
                switch attemptFirst(s) {
                case let ParserFast_PStep.ParserFast_Good(first, s1):
                    ParserFast_PStep.ParserFast_Good(firstToChoice(s.row)(s.col)(first)(s1.row)(s1.col), s1)
                case let ParserFast_PStep.ParserFast_Bad(firstCommitted, firstX):
                    if firstCommitted {
                        ParserFast_PStep.ParserFast_Bad(firstCommitted, firstX)
                    } else {
                        switch attemptSecond(s) {
                        case let ParserFast_PStep.ParserFast_Good(second, s1):
                            ParserFast_PStep.ParserFast_Good(secondToChoice(s.row)(s.col)(second)(s1.row)(s1.col), s1)
                        case let ParserFast_PStep.ParserFast_Bad(secondCommitted, secondX):
                            if secondCommitted {
                                ParserFast_PStep.ParserFast_Bad(secondCommitted, secondX)
                            } else {
                                ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingOneOf(firstX, secondX, List_List.List_Empty))
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserFast_oneOf2OrSucceed<a: Sendable>(_ generated_0: ParserFast_Parser<a>, _ generated_1: ParserFast_Parser<a>, _ thirdRes: a) ->  ParserFast_Parser<a> {
    let attemptFirst: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_0 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attemptFirst):
        attemptFirst =
            generated_destructured_attemptFirst
    }
    let attemptSecond: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attemptSecond):
        attemptSecond =
            generated_destructured_attemptSecond
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s: ParserFast_State) in
                let generated_localReturnResult_result_argument0_declarationResult: ParserFast_PStep<a>
                switch attemptFirst(s) {
                case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                    let firstGood: ParserFast_PStep<a> =
                        ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                    generated_localReturnResult_result_argument0_declarationResult =
                        firstGood
                case let ParserFast_PStep.ParserFast_Bad(firstCommitted, generated_1):
                    let firstBad: ParserFast_PStep<a> =
                        ParserFast_PStep.ParserFast_Bad(firstCommitted, generated_1)
                    let generated_localReturnResult_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                    if firstCommitted {
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            firstBad
                    } else {
                        let generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                        switch attemptSecond(s) {
                        case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                            let secondGood: ParserFast_PStep<a> =
                                ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                secondGood
                        case let ParserFast_PStep.ParserFast_Bad(secondCommitted, generated_1):
                            let secondBad: ParserFast_PStep<a> =
                                ParserFast_PStep.ParserFast_Bad(secondCommitted, generated_1)
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                if secondCommitted {
                                    secondBad
                                } else {
                                    ParserFast_PStep.ParserFast_Good(thirdRes, s)
                                }
                        }
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult
                    }
                    generated_localReturnResult_result_argument0_declarationResult =
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult
                }
                return generated_localReturnResult_result_argument0_declarationResult
            }
        )
}

@Sendable public static func ParserFast_oneOf3<a: Sendable>(_ generated_0: ParserFast_Parser<a>, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<a>) ->  ParserFast_Parser<a> {
    let attemptFirst: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_0 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attemptFirst):
        attemptFirst =
            generated_destructured_attemptFirst
    }
    let attemptSecond: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attemptSecond):
        attemptSecond =
            generated_destructured_attemptSecond
    }
    let attemptThird: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attemptThird):
        attemptThird =
            generated_destructured_attemptThird
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s: ParserFast_State) in
                let generated_localReturnResult_result_argument0_declarationResult: ParserFast_PStep<a>
                switch attemptFirst(s) {
                case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                    let firstGood: ParserFast_PStep<a> =
                        ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                    generated_localReturnResult_result_argument0_declarationResult =
                        firstGood
                case let ParserFast_PStep.ParserFast_Bad(firstCommitted, firstX):
                    let firstBad: ParserFast_PStep<a> =
                        ParserFast_PStep.ParserFast_Bad(firstCommitted, firstX)
                    let generated_localReturnResult_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                    if firstCommitted {
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            firstBad
                    } else {
                        let generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                        switch attemptSecond(s) {
                        case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                            let secondGood: ParserFast_PStep<a> =
                                ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                secondGood
                        case let ParserFast_PStep.ParserFast_Bad(secondCommitted, secondX):
                            let secondBad: ParserFast_PStep<a> =
                                ParserFast_PStep.ParserFast_Bad(secondCommitted, secondX)
                            let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                            if secondCommitted {
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                    secondBad
                            } else {
                                let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                switch attemptThird(s) {
                                case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                                    let thirdGood: ParserFast_PStep<a> =
                                        ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                        thirdGood
                                case let ParserFast_PStep.ParserFast_Bad(thirdCommitted, thirdX):
                                    let thirdBad: ParserFast_PStep<a> =
                                        ParserFast_PStep.ParserFast_Bad(thirdCommitted, thirdX)
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                        if thirdCommitted {
                                            thirdBad
                                        } else {
                                            ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingOneOf(firstX, secondX, List_singleton(thirdX)))
                                        }
                                }
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                            }
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                        }
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult
                    }
                    generated_localReturnResult_result_argument0_declarationResult =
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult
                }
                return generated_localReturnResult_result_argument0_declarationResult
            }
        )
}

@Sendable public static func ParserFast_oneOf4<a: Sendable>(_ generated_0: ParserFast_Parser<a>, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<a>, _ generated_3: ParserFast_Parser<a>) ->  ParserFast_Parser<a> {
    let attemptFirst: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_0 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attemptFirst):
        attemptFirst =
            generated_destructured_attemptFirst
    }
    let attemptSecond: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attemptSecond):
        attemptSecond =
            generated_destructured_attemptSecond
    }
    let attemptThird: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attemptThird):
        attemptThird =
            generated_destructured_attemptThird
    }
    let attemptFourth: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_3 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attemptFourth):
        attemptFourth =
            generated_destructured_attemptFourth
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s: ParserFast_State) in
                let generated_localReturnResult_result_argument0_declarationResult: ParserFast_PStep<a>
                switch attemptFirst(s) {
                case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                    let firstGood: ParserFast_PStep<a> =
                        ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                    generated_localReturnResult_result_argument0_declarationResult =
                        firstGood
                case let ParserFast_PStep.ParserFast_Bad(firstCommitted, firstX):
                    let firstBad: ParserFast_PStep<a> =
                        ParserFast_PStep.ParserFast_Bad(firstCommitted, firstX)
                    let generated_localReturnResult_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                    if firstCommitted {
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            firstBad
                    } else {
                        let generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                        switch attemptSecond(s) {
                        case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                            let secondGood: ParserFast_PStep<a> =
                                ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                secondGood
                        case let ParserFast_PStep.ParserFast_Bad(secondCommitted, secondX):
                            let secondBad: ParserFast_PStep<a> =
                                ParserFast_PStep.ParserFast_Bad(secondCommitted, secondX)
                            let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                            if secondCommitted {
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                    secondBad
                            } else {
                                let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                switch attemptThird(s) {
                                case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                                    let thirdGood: ParserFast_PStep<a> =
                                        ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                        thirdGood
                                case let ParserFast_PStep.ParserFast_Bad(thirdCommitted, thirdX):
                                    let thirdBad: ParserFast_PStep<a> =
                                        ParserFast_PStep.ParserFast_Bad(thirdCommitted, thirdX)
                                    let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                    if thirdCommitted {
                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                            thirdBad
                                    } else {
                                        let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                        switch attemptFourth(s) {
                                        case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                                            let fourthGood: ParserFast_PStep<a> =
                                                ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                fourthGood
                                        case let ParserFast_PStep.ParserFast_Bad(fourthCommitted, fourthX):
                                            let fourthBad: ParserFast_PStep<a> =
                                                ParserFast_PStep.ParserFast_Bad(fourthCommitted, fourthX)
                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                if fourthCommitted {
                                                    fourthBad
                                                } else {
                                                    ParserFast_PStep.ParserFast_Bad(
                                                        false,
                                                        ParserFast_Problem.ParserFast_ExpectingOneOf(
                                                            firstX,
                                                            secondX,
                                                            Array_toList(
                                                                [ thirdX,
                                                                  fourthX
                                                                ]
                                                            )
                                                        )
                                                    )
                                                }
                                        }
                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                    }
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                }
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                            }
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                        }
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult
                    }
                    generated_localReturnResult_result_argument0_declarationResult =
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult
                }
                return generated_localReturnResult_result_argument0_declarationResult
            }
        )
}

@Sendable public static func ParserFast_oneOf5<a: Sendable>(_ generated_0: ParserFast_Parser<a>, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<a>, _ generated_3: ParserFast_Parser<a>, _ generated_4: ParserFast_Parser<a>) ->  ParserFast_Parser<a> {
    let attemptFirst: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_0 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attemptFirst):
        attemptFirst =
            generated_destructured_attemptFirst
    }
    let attemptSecond: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attemptSecond):
        attemptSecond =
            generated_destructured_attemptSecond
    }
    let attemptThird: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attemptThird):
        attemptThird =
            generated_destructured_attemptThird
    }
    let attemptFourth: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_3 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attemptFourth):
        attemptFourth =
            generated_destructured_attemptFourth
    }
    let attemptFifth: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_4 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attemptFifth):
        attemptFifth =
            generated_destructured_attemptFifth
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s: ParserFast_State) in
                let generated_localReturnResult_result_argument0_declarationResult: ParserFast_PStep<a>
                switch attemptFirst(s) {
                case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                    let firstGood: ParserFast_PStep<a> =
                        ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                    generated_localReturnResult_result_argument0_declarationResult =
                        firstGood
                case let ParserFast_PStep.ParserFast_Bad(firstCommitted, firstX):
                    let firstBad: ParserFast_PStep<a> =
                        ParserFast_PStep.ParserFast_Bad(firstCommitted, firstX)
                    let generated_localReturnResult_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                    if firstCommitted {
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            firstBad
                    } else {
                        let generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                        switch attemptSecond(s) {
                        case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                            let secondGood: ParserFast_PStep<a> =
                                ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                secondGood
                        case let ParserFast_PStep.ParserFast_Bad(secondCommitted, secondX):
                            let secondBad: ParserFast_PStep<a> =
                                ParserFast_PStep.ParserFast_Bad(secondCommitted, secondX)
                            let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                            if secondCommitted {
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                    secondBad
                            } else {
                                let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                switch attemptThird(s) {
                                case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                                    let thirdGood: ParserFast_PStep<a> =
                                        ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                        thirdGood
                                case let ParserFast_PStep.ParserFast_Bad(thirdCommitted, thirdX):
                                    let thirdBad: ParserFast_PStep<a> =
                                        ParserFast_PStep.ParserFast_Bad(thirdCommitted, thirdX)
                                    let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                    if thirdCommitted {
                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                            thirdBad
                                    } else {
                                        let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                        switch attemptFourth(s) {
                                        case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                                            let fourthGood: ParserFast_PStep<a> =
                                                ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                fourthGood
                                        case let ParserFast_PStep.ParserFast_Bad(fourthCommitted, fourthX):
                                            let fourthBad: ParserFast_PStep<a> =
                                                ParserFast_PStep.ParserFast_Bad(fourthCommitted, fourthX)
                                            let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                            if fourthCommitted {
                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                    fourthBad
                                            } else {
                                                let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                                switch attemptFifth(s) {
                                                case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                                                    let fifthGood: ParserFast_PStep<a> =
                                                        ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                        fifthGood
                                                case let ParserFast_PStep.ParserFast_Bad(fifthCommitted, fifthX):
                                                    let fifthBad: ParserFast_PStep<a> =
                                                        ParserFast_PStep.ParserFast_Bad(fifthCommitted, fifthX)
                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                        if fifthCommitted {
                                                            fifthBad
                                                        } else {
                                                            ParserFast_PStep.ParserFast_Bad(
                                                                false,
                                                                ParserFast_Problem.ParserFast_ExpectingOneOf(
                                                                    firstX,
                                                                    secondX,
                                                                    Array_toList(
                                                                        [ thirdX,
                                                                          fourthX,
                                                                          fifthX
                                                                        ]
                                                                    )
                                                                )
                                                            )
                                                        }
                                                }
                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                            }
                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                        }
                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                    }
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                }
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                            }
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                        }
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult
                    }
                    generated_localReturnResult_result_argument0_declarationResult =
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult
                }
                return generated_localReturnResult_result_argument0_declarationResult
            }
        )
}

@Sendable public static func ParserFast_oneOf7<a: Sendable>(_ generated_0: ParserFast_Parser<a>, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<a>, _ generated_3: ParserFast_Parser<a>, _ generated_4: ParserFast_Parser<a>, _ generated_5: ParserFast_Parser<a>, _ generated_6: ParserFast_Parser<a>) ->  ParserFast_Parser<a> {
    let attempt0: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_0 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attempt0):
        attempt0 =
            generated_destructured_attempt0
    }
    let attempt1: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attempt1):
        attempt1 =
            generated_destructured_attempt1
    }
    let attempt2: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attempt2):
        attempt2 =
            generated_destructured_attempt2
    }
    let attempt3: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_3 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attempt3):
        attempt3 =
            generated_destructured_attempt3
    }
    let attempt4: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_4 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attempt4):
        attempt4 =
            generated_destructured_attempt4
    }
    let attempt5: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_5 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attempt5):
        attempt5 =
            generated_destructured_attempt5
    }
    let attempt6: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_6 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attempt6):
        attempt6 =
            generated_destructured_attempt6
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s: ParserFast_State) in
                let generated_localReturnResult_result_argument0_declarationResult: ParserFast_PStep<a>
                switch attempt0(s) {
                case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                    let good: ParserFast_PStep<a> =
                        ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                    generated_localReturnResult_result_argument0_declarationResult =
                        good
                case let ParserFast_PStep.ParserFast_Bad(committed0, x0):
                    let bad0: ParserFast_PStep<a> =
                        ParserFast_PStep.ParserFast_Bad(committed0, x0)
                    let generated_localReturnResult_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                    if committed0 {
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            bad0
                    } else {
                        let generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                        switch attempt1(s) {
                        case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                            let good: ParserFast_PStep<a> =
                                ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                good
                        case let ParserFast_PStep.ParserFast_Bad(committed1, x1):
                            let bad1: ParserFast_PStep<a> =
                                ParserFast_PStep.ParserFast_Bad(committed1, x1)
                            let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                            if committed1 {
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                    bad1
                            } else {
                                let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                switch attempt2(s) {
                                case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                                    let good: ParserFast_PStep<a> =
                                        ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                        good
                                case let ParserFast_PStep.ParserFast_Bad(committed2, x2):
                                    let bad2: ParserFast_PStep<a> =
                                        ParserFast_PStep.ParserFast_Bad(committed2, x2)
                                    let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                    if committed2 {
                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                            bad2
                                    } else {
                                        let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                        switch attempt3(s) {
                                        case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                                            let good: ParserFast_PStep<a> =
                                                ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                good
                                        case let ParserFast_PStep.ParserFast_Bad(committed3, x3):
                                            let bad3: ParserFast_PStep<a> =
                                                ParserFast_PStep.ParserFast_Bad(committed3, x3)
                                            let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                            if committed3 {
                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                    bad3
                                            } else {
                                                let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                                switch attempt4(s) {
                                                case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                                                    let good: ParserFast_PStep<a> =
                                                        ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                        good
                                                case let ParserFast_PStep.ParserFast_Bad(committed4, x4):
                                                    let bad4: ParserFast_PStep<a> =
                                                        ParserFast_PStep.ParserFast_Bad(committed4, x4)
                                                    let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                                    if committed4 {
                                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                            bad4
                                                    } else {
                                                        let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                                        switch attempt5(s) {
                                                        case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                                                            let good: ParserFast_PStep<a> =
                                                                ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                good
                                                        case let ParserFast_PStep.ParserFast_Bad(committed5, x5):
                                                            let bad5: ParserFast_PStep<a> =
                                                                ParserFast_PStep.ParserFast_Bad(committed5, x5)
                                                            let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                                            if committed5 {
                                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                    bad5
                                                            } else {
                                                                let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                                                switch attempt6(s) {
                                                                case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                                                                    let good: ParserFast_PStep<a> =
                                                                        ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                        good
                                                                case let ParserFast_PStep.ParserFast_Bad(committed6, x6):
                                                                    let bad6: ParserFast_PStep<a> =
                                                                        ParserFast_PStep.ParserFast_Bad(committed6, x6)
                                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                        if committed6 {
                                                                            bad6
                                                                        } else {
                                                                            ParserFast_PStep.ParserFast_Bad(
                                                                                false,
                                                                                ParserFast_Problem.ParserFast_ExpectingOneOf(
                                                                                    x0,
                                                                                    x1,
                                                                                    Array_toList(
                                                                                        [ x2,
                                                                                          x3,
                                                                                          x4,
                                                                                          x5,
                                                                                          x6
                                                                                        ]
                                                                                    )
                                                                                )
                                                                            )
                                                                        }
                                                                }
                                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                                            }
                                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                                        }
                                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                                    }
                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                                }
                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                            }
                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                        }
                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                    }
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                }
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                            }
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                        }
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult
                    }
                    generated_localReturnResult_result_argument0_declarationResult =
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult
                }
                return generated_localReturnResult_result_argument0_declarationResult
            }
        )
}

@Sendable public static func ParserFast_oneOf9<a: Sendable>(_ generated_0: ParserFast_Parser<a>, _ generated_1: ParserFast_Parser<a>, _ generated_2: ParserFast_Parser<a>, _ generated_3: ParserFast_Parser<a>, _ generated_4: ParserFast_Parser<a>, _ generated_5: ParserFast_Parser<a>, _ generated_6: ParserFast_Parser<a>, _ generated_7: ParserFast_Parser<a>, _ generated_8: ParserFast_Parser<a>) ->  ParserFast_Parser<a> {
    let attempt0: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_0 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attempt0):
        attempt0 =
            generated_destructured_attempt0
    }
    let attempt1: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attempt1):
        attempt1 =
            generated_destructured_attempt1
    }
    let attempt2: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attempt2):
        attempt2 =
            generated_destructured_attempt2
    }
    let attempt3: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_3 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attempt3):
        attempt3 =
            generated_destructured_attempt3
    }
    let attempt4: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_4 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attempt4):
        attempt4 =
            generated_destructured_attempt4
    }
    let attempt5: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_5 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attempt5):
        attempt5 =
            generated_destructured_attempt5
    }
    let attempt6: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_6 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attempt6):
        attempt6 =
            generated_destructured_attempt6
    }
    let attempt7: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_7 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attempt7):
        attempt7 =
            generated_destructured_attempt7
    }
    let attempt8: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_8 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attempt8):
        attempt8 =
            generated_destructured_attempt8
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s: ParserFast_State) in
                let generated_localReturnResult_result_argument0_declarationResult: ParserFast_PStep<a>
                switch attempt0(s) {
                case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                    let good: ParserFast_PStep<a> =
                        ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                    generated_localReturnResult_result_argument0_declarationResult =
                        good
                case let ParserFast_PStep.ParserFast_Bad(committed0, x0):
                    let bad0: ParserFast_PStep<a> =
                        ParserFast_PStep.ParserFast_Bad(committed0, x0)
                    let generated_localReturnResult_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                    if committed0 {
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            bad0
                    } else {
                        let generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                        switch attempt1(s) {
                        case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                            let good: ParserFast_PStep<a> =
                                ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                good
                        case let ParserFast_PStep.ParserFast_Bad(committed1, x1):
                            let bad1: ParserFast_PStep<a> =
                                ParserFast_PStep.ParserFast_Bad(committed1, x1)
                            let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                            if committed1 {
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                    bad1
                            } else {
                                let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                switch attempt2(s) {
                                case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                                    let good: ParserFast_PStep<a> =
                                        ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                        good
                                case let ParserFast_PStep.ParserFast_Bad(committed2, x2):
                                    let bad2: ParserFast_PStep<a> =
                                        ParserFast_PStep.ParserFast_Bad(committed2, x2)
                                    let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                    if committed2 {
                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                            bad2
                                    } else {
                                        let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                        switch attempt3(s) {
                                        case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                                            let good: ParserFast_PStep<a> =
                                                ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                good
                                        case let ParserFast_PStep.ParserFast_Bad(committed3, x3):
                                            let bad3: ParserFast_PStep<a> =
                                                ParserFast_PStep.ParserFast_Bad(committed3, x3)
                                            let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                            if committed3 {
                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                    bad3
                                            } else {
                                                let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                                switch attempt4(s) {
                                                case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                                                    let good: ParserFast_PStep<a> =
                                                        ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                        good
                                                case let ParserFast_PStep.ParserFast_Bad(committed4, x4):
                                                    let bad4: ParserFast_PStep<a> =
                                                        ParserFast_PStep.ParserFast_Bad(committed4, x4)
                                                    let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                                    if committed4 {
                                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                            bad4
                                                    } else {
                                                        let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                                        switch attempt5(s) {
                                                        case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                                                            let good: ParserFast_PStep<a> =
                                                                ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                good
                                                        case let ParserFast_PStep.ParserFast_Bad(committed5, x5):
                                                            let bad5: ParserFast_PStep<a> =
                                                                ParserFast_PStep.ParserFast_Bad(committed5, x5)
                                                            let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                                            if committed5 {
                                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                    bad5
                                                            } else {
                                                                let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                                                switch attempt6(s) {
                                                                case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                                                                    let good: ParserFast_PStep<a> =
                                                                        ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                        good
                                                                case let ParserFast_PStep.ParserFast_Bad(committed6, x6):
                                                                    let bad6: ParserFast_PStep<a> =
                                                                        ParserFast_PStep.ParserFast_Bad(committed6, x6)
                                                                    let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                                                    if committed6 {
                                                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                            bad6
                                                                    } else {
                                                                        let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                                                        switch attempt7(s) {
                                                                        case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                                                                            let good: ParserFast_PStep<a> =
                                                                                ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                                                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                                good
                                                                        case let ParserFast_PStep.ParserFast_Bad(committed7, x7):
                                                                            let bad7: ParserFast_PStep<a> =
                                                                                ParserFast_PStep.ParserFast_Bad(committed7, x7)
                                                                            let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                                                            if committed7 {
                                                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                                    bad7
                                                                            } else {
                                                                                let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserFast_PStep<a>
                                                                                switch attempt8(s) {
                                                                                case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                                                                                    let good: ParserFast_PStep<a> =
                                                                                        ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                                                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                                        good
                                                                                case let ParserFast_PStep.ParserFast_Bad(committed8, x8):
                                                                                    let bad8: ParserFast_PStep<a> =
                                                                                        ParserFast_PStep.ParserFast_Bad(committed8, x8)
                                                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                                        if committed8 {
                                                                                            bad8
                                                                                        } else {
                                                                                            ParserFast_PStep.ParserFast_Bad(
                                                                                                false,
                                                                                                ParserFast_Problem.ParserFast_ExpectingOneOf(
                                                                                                    x0,
                                                                                                    x1,
                                                                                                    Array_toList(
                                                                                                        [ x2,
                                                                                                          x3,
                                                                                                          x4,
                                                                                                          x5,
                                                                                                          x6,
                                                                                                          x7,
                                                                                                          x8
                                                                                                        ]
                                                                                                    )
                                                                                                )
                                                                                            )
                                                                                        }
                                                                                }
                                                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                                                            }
                                                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                                                        }
                                                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                                                    }
                                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                                                }
                                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                                            }
                                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                                        }
                                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                                    }
                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                                }
                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                            }
                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                        }
                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                    }
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                }
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                            }
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                        }
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult
                    }
                    generated_localReturnResult_result_argument0_declarationResult =
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult
                }
                return generated_localReturnResult_result_argument0_declarationResult
            }
        )
}

@Sendable public static func ParserFast_orSucceed<a: Sendable>(_ generated_0: ParserFast_Parser<a>, _ secondRes: a) ->  ParserFast_Parser<a> {
    let attemptFirst: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_0 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_attemptFirst):
        attemptFirst =
            generated_destructured_attemptFirst
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s: ParserFast_State) in
                let generated_localReturnResult_result_argument0_declarationResult: ParserFast_PStep<a>
                switch attemptFirst(s) {
                case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
                    let firstGood: ParserFast_PStep<a> =
                        ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
                    generated_localReturnResult_result_argument0_declarationResult =
                        firstGood
                case let ParserFast_PStep.ParserFast_Bad(firstCommitted, generated_1):
                    let firstBad: ParserFast_PStep<a> =
                        ParserFast_PStep.ParserFast_Bad(firstCommitted, generated_1)
                    generated_localReturnResult_result_argument0_declarationResult =
                        if firstCommitted {
                            firstBad
                        } else {
                            ParserFast_PStep.ParserFast_Good(secondRes, s)
                        }
                }
                return generated_localReturnResult_result_argument0_declarationResult
            }
        )
}

@Sendable public static func ParserFast_pStepCommit<a: Sendable>(_ pStep: ParserFast_PStep<a>) ->  ParserFast_PStep<a> {
    let generated_localReturnResult_declarationResult: ParserFast_PStep<a>
    switch pStep {
    case let ParserFast_PStep.ParserFast_Good(generated_0, generated_1):
        let good: ParserFast_PStep<a> =
            ParserFast_PStep.ParserFast_Good(generated_0, generated_1)
        generated_localReturnResult_declarationResult =
            good
    case let ParserFast_PStep.ParserFast_Bad(_, x):
        generated_localReturnResult_declarationResult =
            ParserFast_PStep.ParserFast_Bad(true, x)
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ParserFast_problem<a: Sendable>(_ msg: String) ->  ParserFast_Parser<a> {
    ParserFast_Parser.ParserFast_Parser({ (s: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingCustom(s.row, s.col, msg)) })
}

@Sendable public static func ParserFast_ropeFilledToList(_ problemToConvert: ParserFast_Problem, _ soFar: List_List<Parser_DeadEnd>) ->  List_List<Generated_col_problem_row<Double, Parser_Problem, Double>> {
    switch problemToConvert {
    case let ParserFast_Problem.ParserFast_ExpectingOneOf(firstTry, secondTry, thirdTryUp):
        ParserFast_ropeFilledToList(firstTry, ParserFast_ropeFilledToList(secondTry, List_foldr({ (generated_argument0_left_left_caseResult_case0_declarationResult_0: ParserFast_Problem) in { (generated_argument0_left_left_caseResult_case0_declarationResult_1: List_List<Generated_col_problem_row<Double, Parser_Problem, Double>>) in ParserFast_ropeFilledToList(generated_argument0_left_left_caseResult_case0_declarationResult_0, generated_argument0_left_left_caseResult_case0_declarationResult_1) } }, soFar, thirdTryUp)))
    case let ParserFast_Problem.ParserFast_ExpectingNumber(row, col):
        List_cons(Generated_col_problem_row.Record(col: col, problem: Parser_Problem.Parser_ExpectingNumber, row: row), soFar)
    case let ParserFast_Problem.ParserFast_ExpectingSymbol(row, col, symbolString):
        List_cons(Generated_col_problem_row.Record(col: col, problem: Parser_Problem.Parser_ExpectingSymbol(symbolString), row: row), soFar)
    case let ParserFast_Problem.ParserFast_ExpectingAnyChar(row, col):
        List_cons(Generated_col_problem_row.Record(col: col, problem: Parser_Problem.Parser_Problem("expecting any char"), row: row), soFar)
    case let ParserFast_Problem.ParserFast_ExpectingKeyword(row, col, keywordString):
        List_cons(Generated_col_problem_row.Record(col: col, problem: Parser_Problem.Parser_ExpectingKeyword(keywordString), row: row), soFar)
    case let ParserFast_Problem.ParserFast_ExpectingCharSatisfyingPredicate(row, col):
        List_cons(Generated_col_problem_row.Record(col: col, problem: Parser_Problem.Parser_UnexpectedChar, row: row), soFar)
    case let ParserFast_Problem.ParserFast_ExpectingStringSatisfyingPredicate(row, col):
        List_cons(Generated_col_problem_row.Record(col: col, problem: Parser_Problem.Parser_Problem("expected string to pass validation"), row: row), soFar)
    case let ParserFast_Problem.ParserFast_ExpectingCustom(row, col, customMessage):
        List_cons(Generated_col_problem_row.Record(col: col, problem: Parser_Problem.Parser_Problem(customMessage), row: row), soFar)
    }
}

@Sendable public static func ParserFast_run<a: Sendable>(_ generated_0: ParserFast_Parser<a>, _ src: String) ->  Result_Result<List_List<Generated_col_problem_row<Double, Parser_Problem, Double>>, a> {
    let parse: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_0 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parse):
        parse =
            generated_destructured_parse
    }
    return
        switch parse(Generated_col_indent_offset_row_src.Record(col: 1.0, indent: 1.0, offset: 0.0, row: 1.0, src: src)) {
        case let ParserFast_PStep.ParserFast_Good(value, finalState):
            if Basics_eq(Basics_sub(finalState.offset, String_length(finalState.src)), 0.0) {
                Result_Result.Result_Ok(value)
            } else {
                Result_Result.Result_Err(List_singleton(Generated_col_problem_row.Record(col: finalState.col, problem: Parser_Problem.Parser_ExpectingEnd, row: finalState.row)))
            }
        case let ParserFast_PStep.ParserFast_Bad(_, deadEnds):
            Result_Result.Result_Err(ParserFast_ropeFilledToList(deadEnds, List_List.List_Empty))
        }
}

@Sendable public static func ParserFast_skip0OrMoreDigits0To9(_ offset: Double, _ src: String) ->  Double {
    switch String_slice(offset, Basics_add(offset, 1.0), src) {
    case "0":
        ParserFast_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "1":
        ParserFast_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "2":
        ParserFast_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "3":
        ParserFast_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "4":
        ParserFast_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "5":
        ParserFast_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "6":
        ParserFast_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "7":
        ParserFast_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "8":
        ParserFast_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "9":
        ParserFast_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case _:
        offset
    }
}

@Sendable public static func ParserFast_skip1OrMoreDigits0To9(_ offset: Double, _ src: String) ->  Double {
    switch String_slice(offset, Basics_add(offset, 1.0), src) {
    case "0":
        ParserFast_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "1":
        ParserFast_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "2":
        ParserFast_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "3":
        ParserFast_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "4":
        ParserFast_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "5":
        ParserFast_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "6":
        ParserFast_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "7":
        ParserFast_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "8":
        ParserFast_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "9":
        ParserFast_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case _:
        -1.0
    }
}

@Sendable public static func ParserFast_skipAfterFloatExponentMark(_ offset: Double, _ src: String) ->  Double {
    switch String_slice(offset, Basics_add(offset, 1.0), src) {
    case "+":
        ParserFast_skip1OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "-":
        ParserFast_skip1OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case _:
        ParserFast_skip1OrMoreDigits0To9(offset, src)
    }
}

@Sendable public static func ParserFast_skipFloatAfterIntegerDecimal(_ offset: Double, _ src: String) ->  Double {
    let generated_localReturnResult_declarationResult: Double
    switch String_slice(offset, Basics_add(offset, 1.0), src) {
    case ".":
        let generated_let_caseResult_case0_declarationResult_offsetAfterDigits: Double =
            ParserFast_skip1OrMoreDigits0To9(Basics_add(offset, 1.0), src)
        generated_localReturnResult_declarationResult =
            if Basics_eq(generated_let_caseResult_case0_declarationResult_offsetAfterDigits, -1.0) {
                -1.0
            } else {
                switch String_slice(generated_let_caseResult_case0_declarationResult_offsetAfterDigits, Basics_add(generated_let_caseResult_case0_declarationResult_offsetAfterDigits, 1.0), src) {
                case "e":
                    ParserFast_skipAfterFloatExponentMark(Basics_add(generated_let_caseResult_case0_declarationResult_offsetAfterDigits, 1.0), src)
                case "E":
                    ParserFast_skipAfterFloatExponentMark(Basics_add(generated_let_caseResult_case0_declarationResult_offsetAfterDigits, 1.0), src)
                case _:
                    generated_let_caseResult_case0_declarationResult_offsetAfterDigits
                }
            }
    case "e":
        generated_localReturnResult_declarationResult =
            ParserFast_skipAfterFloatExponentMark(Basics_add(offset, 1.0), src)
    case "E":
        generated_localReturnResult_declarationResult =
            ParserFast_skipAfterFloatExponentMark(Basics_add(offset, 1.0), src)
    case _:
        generated_localReturnResult_declarationResult =
            -1.0
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ParserFast_skipWhileHelp(_ isGood: @Sendable @escaping (UnicodeScalar) -> Bool, _ offset: Double, _ row: Double, _ col: Double, _ src: String, _ indent: Double) ->  Generated_col_indent_offset_row_src<Double, Double, Double, Double, String> {
    let generated_let_declarationResult_actualChar: String =
        String_slice(offset, Basics_add(offset, 1.0), src)
    return
        if String_any(isGood, generated_let_declarationResult_actualChar) {
            switch generated_let_declarationResult_actualChar {
            case "\n":
                ParserFast_skipWhileHelp(isGood, Basics_add(offset, 1.0), Basics_add(row, 1.0), 1.0, src, indent)
            case _:
                ParserFast_skipWhileHelp(isGood, Basics_add(offset, 1.0), row, Basics_add(col, 1.0), src, indent)
            }
        } else {
            if Basics_and(ParserFast_charStringIsUtf16HighSurrogate(generated_let_declarationResult_actualChar), String_any(isGood, String_slice(offset, Basics_add(offset, 2.0), src))) {
                ParserFast_skipWhileHelp(isGood, Basics_add(offset, 2.0), row, Basics_add(col, 1.0), src, indent)
            } else {
                Generated_col_indent_offset_row_src.Record(col: col, indent: indent, offset: offset, row: row, src: src)
            }
        }
}

@Sendable public static func ParserFast_skipWhileWhitespaceFollowedBy<next: Sendable>(_ generated_0: ParserFast_Parser<next>) ->  ParserFast_Parser<next> {
    let parseNext: @Sendable (ParserFast_State) -> ParserFast_PStep<next>
    switch generated_0 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseNext):
        parseNext =
            generated_destructured_parseNext
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
                let generated_let_result_argument0_declarationResult_s1: ParserFast_State =
                    ParserFast_skipWhileWhitespaceHelp(s0.offset, s0.row, s0.col, s0.src, s0.indent)
                return ParserFast_pStepCommit(parseNext(generated_let_result_argument0_declarationResult_s1))
            }
        )
}

@Sendable public static func ParserFast_skipWhileWhitespaceHelp(_ offset: Double, _ row: Double, _ col: Double, _ src: String, _ indent: Double) ->  Generated_col_indent_offset_row_src<Double, Double, Double, Double, String> {
    switch String_slice(offset, Basics_add(offset, 1.0), src) {
    case " ":
        ParserFast_skipWhileWhitespaceHelp(Basics_add(offset, 1.0), row, Basics_add(col, 1.0), src, indent)
    case "\n":
        ParserFast_skipWhileWhitespaceHelp(Basics_add(offset, 1.0), Basics_add(row, 1.0), 1.0, src, indent)
    case "\r":
        ParserFast_skipWhileWhitespaceHelp(Basics_add(offset, 1.0), row, Basics_add(col, 1.0), src, indent)
    case _:
        Generated_col_indent_offset_row_src.Record(col: col, indent: indent, offset: offset, row: row, src: src)
    }
}

@Sendable public static func ParserFast_skipWhileWithoutLinebreakAnd2PartUtf16Help(_ isGood: @Sendable @escaping (UnicodeScalar) -> Bool, _ offset: Double, _ src: String) ->  Double {
    if String_any(isGood, String_slice(offset, Basics_add(offset, 1.0), src)) {
        ParserFast_skipWhileWithoutLinebreakAnd2PartUtf16Help(isGood, Basics_add(offset, 1.0), src)
    } else {
        offset
    }
}

@Sendable public static func ParserFast_skipWhileWithoutLinebreakHelp(_ isGood: @Sendable @escaping (UnicodeScalar) -> Bool, _ offset: Double, _ row: Double, _ col: Double, _ src: String, _ indent: Double) ->  Generated_col_indent_offset_row_src<Double, Double, Double, Double, String> {
    let generated_let_declarationResult_actualChar: String =
        String_slice(offset, Basics_add(offset, 1.0), src)
    return
        if String_any(isGood, generated_let_declarationResult_actualChar) {
            ParserFast_skipWhileWithoutLinebreakHelp(isGood, Basics_add(offset, 1.0), row, Basics_add(col, 1.0), src, indent)
        } else {
            if Basics_and(ParserFast_charStringIsUtf16HighSurrogate(generated_let_declarationResult_actualChar), String_any(isGood, String_slice(offset, Basics_add(offset, 2.0), src))) {
                ParserFast_skipWhileWithoutLinebreakHelp(isGood, Basics_add(offset, 2.0), row, Basics_add(col, 1.0), src, indent)
            } else {
                Generated_col_indent_offset_row_src.Record(col: col, indent: indent, offset: offset, row: row, src: src)
            }
        }
}

@Sendable public static func ParserFast_symbol<res: Sendable>(_ str: String, _ res: res) ->  ParserFast_Parser<res> {
    let generated_let_declarationResult_strLength: Double =
        String_length(str)
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
                let generated_let_result_argument0_letResult_declarationResult_newOffset: Double =
                    Basics_add(s.offset, generated_let_declarationResult_strLength)
                return
                    if Basics_eq(String_slice(s.offset, generated_let_result_argument0_letResult_declarationResult_newOffset, s.src), str) {
                        ParserFast_PStep.ParserFast_Good(res, Generated_col_indent_offset_row_src.Record(col: Basics_add(s.col, generated_let_declarationResult_strLength), indent: s.indent, offset: generated_let_result_argument0_letResult_declarationResult_newOffset, row: s.row, src: s.src))
                    } else {
                        ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingSymbol(s.row, s.col, str))
                    }
            }
        )
}

@Sendable public static func ParserFast_symbolBacktrackableFollowedBy<next: Sendable>(_ str: String, _ generated_1: ParserFast_Parser<next>) ->  ParserFast_Parser<next> {
    let parseNext: @Sendable (ParserFast_State) -> ParserFast_PStep<next>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseNext):
        parseNext =
            generated_destructured_parseNext
    }
    let generated_let_declarationResult_strLength: Double =
        String_length(str)
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
                let generated_let_result_argument0_letResult_declarationResult_newOffset: Double =
                    Basics_add(s.offset, generated_let_declarationResult_strLength)
                return
                    if Basics_eq(String_slice(s.offset, generated_let_result_argument0_letResult_declarationResult_newOffset, s.src), str) {
                        parseNext(Generated_col_indent_offset_row_src.Record(col: Basics_add(s.col, generated_let_declarationResult_strLength), indent: s.indent, offset: generated_let_result_argument0_letResult_declarationResult_newOffset, row: s.row, src: s.src))
                    } else {
                        ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingSymbol(s.row, s.col, str))
                    }
            }
        )
}

@Sendable public static func ParserFast_symbolFollowedBy<next: Sendable>(_ str: String, _ generated_1: ParserFast_Parser<next>) ->  ParserFast_Parser<next> {
    let parseNext: @Sendable (ParserFast_State) -> ParserFast_PStep<next>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseNext):
        parseNext =
            generated_destructured_parseNext
    }
    let generated_let_declarationResult_strLength: Double =
        String_length(str)
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
                let generated_let_result_argument0_letResult_declarationResult_newOffset: Double =
                    Basics_add(s.offset, generated_let_declarationResult_strLength)
                return
                    if Basics_eq(String_slice(s.offset, generated_let_result_argument0_letResult_declarationResult_newOffset, s.src), str) {
                        ParserFast_pStepCommit(parseNext(Generated_col_indent_offset_row_src.Record(col: Basics_add(s.col, generated_let_declarationResult_strLength), indent: s.indent, offset: generated_let_result_argument0_letResult_declarationResult_newOffset, row: s.row, src: s.src)))
                    } else {
                        ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingSymbol(s.row, s.col, str))
                    }
            }
        )
}

@Sendable public static func ParserFast_symbolWithEndLocation<res: Sendable>(_ str: String, _ endLocationToRes: @Sendable @escaping (Generated_column_row<Double, Double>) -> res) ->  ParserFast_Parser<res> {
    let generated_let_declarationResult_strLength: Double =
        String_length(str)
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
                let generated_let_result_argument0_letResult_declarationResult_newOffset: Double =
                    Basics_add(s.offset, generated_let_declarationResult_strLength)
                let generated_localReturnResult_letResult_result_argument0_letResult_declarationResult: ParserFast_PStep<res>
                if Basics_eq(String_slice(s.offset, generated_let_result_argument0_letResult_declarationResult_newOffset, s.src), str) {
                    let generated_let_onTrue_letResult_result_argument0_letResult_declarationResult_newCol: Double =
                        Basics_add(s.col, generated_let_declarationResult_strLength)
                    generated_localReturnResult_letResult_result_argument0_letResult_declarationResult =
                        ParserFast_PStep.ParserFast_Good(endLocationToRes(Generated_column_row.Record(column: generated_let_onTrue_letResult_result_argument0_letResult_declarationResult_newCol, row: s.row)), Generated_col_indent_offset_row_src.Record(col: generated_let_onTrue_letResult_result_argument0_letResult_declarationResult_newCol, indent: s.indent, offset: generated_let_result_argument0_letResult_declarationResult_newOffset, row: s.row, src: s.src))
                } else {
                    generated_localReturnResult_letResult_result_argument0_letResult_declarationResult =
                        ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingSymbol(s.row, s.col, str))
                }
                return generated_localReturnResult_letResult_result_argument0_letResult_declarationResult
            }
        )
}

@Sendable public static func ParserFast_symbolWithRange<res: Sendable>(_ str: String, _ startAndEndLocationToRes: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> res) ->  ParserFast_Parser<res> {
    let generated_let_declarationResult_strLength: Double =
        String_length(str)
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
                let generated_let_result_argument0_letResult_declarationResult_newOffset: Double =
                    Basics_add(s.offset, generated_let_declarationResult_strLength)
                let generated_localReturnResult_letResult_result_argument0_letResult_declarationResult: ParserFast_PStep<res>
                if Basics_eq(String_slice(s.offset, generated_let_result_argument0_letResult_declarationResult_newOffset, s.src), str) {
                    let generated_let_onTrue_letResult_result_argument0_letResult_declarationResult_newCol: Double =
                        Basics_add(s.col, generated_let_declarationResult_strLength)
                    generated_localReturnResult_letResult_result_argument0_letResult_declarationResult =
                        ParserFast_PStep.ParserFast_Good(startAndEndLocationToRes(Generated_end_start.Record(end: Generated_column_row.Record(column: generated_let_onTrue_letResult_result_argument0_letResult_declarationResult_newCol, row: s.row), start: Generated_column_row.Record(column: s.col, row: s.row))), Generated_col_indent_offset_row_src.Record(col: generated_let_onTrue_letResult_result_argument0_letResult_declarationResult_newCol, indent: s.indent, offset: generated_let_result_argument0_letResult_declarationResult_newOffset, row: s.row, src: s.src))
                } else {
                    generated_localReturnResult_letResult_result_argument0_letResult_declarationResult =
                        ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingSymbol(s.row, s.col, str))
                }
                return generated_localReturnResult_letResult_result_argument0_letResult_declarationResult
            }
        )
}

@Sendable public static func ParserFast_validate<a: Sendable>(_ isOkay: @Sendable @escaping (a) -> Bool, _ problemOnNotOkay: String, _ generated_2: ParserFast_Parser<a>) ->  ParserFast_Parser<a> {
    let parseA: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                let generated_localReturnResult_result_argument0_declarationResult: ParserFast_PStep<a>
                switch parseA(s0) {
                case let ParserFast_PStep.ParserFast_Bad(committed, x):
                    generated_localReturnResult_result_argument0_declarationResult =
                        ParserFast_PStep.ParserFast_Bad(committed, x)
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    let good: ParserFast_PStep<a> =
                        ParserFast_PStep.ParserFast_Good(a, s1)
                    generated_localReturnResult_result_argument0_declarationResult =
                        if isOkay(a) {
                            good
                        } else {
                            ParserFast_PStep.ParserFast_Bad(true, ParserFast_Problem.ParserFast_ExpectingCustom(s1.row, s1.col, problemOnNotOkay))
                        }
                }
                return generated_localReturnResult_result_argument0_declarationResult
            }
        )
}

@Sendable public static func ParserFast_validateEndColumnIndentation<a: Sendable>(_ isOkay: @Sendable @escaping (Double) -> (Double) -> Bool, _ problemOnIsNotOkay: String, _ generated_2: ParserFast_Parser<a>) ->  ParserFast_Parser<a> {
    let parse: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_2 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parse):
        parse =
            generated_destructured_parse
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: ParserFast_State) in
                let generated_localReturnResult_result_argument0_declarationResult: ParserFast_PStep<a>
                switch parse(s0) {
                case let ParserFast_PStep.ParserFast_Good(generated_0, s1):
                    let good: ParserFast_PStep<a> =
                        ParserFast_PStep.ParserFast_Good(generated_0, s1)
                    generated_localReturnResult_result_argument0_declarationResult =
                        if isOkay(s1.col)(s1.indent) {
                            good
                        } else {
                            ParserFast_PStep.ParserFast_Bad(true, ParserFast_Problem.ParserFast_ExpectingCustom(s1.row, s1.col, problemOnIsNotOkay))
                        }
                case let bad:
                    generated_localReturnResult_result_argument0_declarationResult =
                        bad
                }
                return generated_localReturnResult_result_argument0_declarationResult
            }
        )
}

@Sendable public static func ParserFast_while(_ isGood: @Sendable @escaping (UnicodeScalar) -> Bool) ->  ParserFast_Parser<String> {
    ParserFast_Parser.ParserFast_Parser(
        { (s0: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_s1: ParserFast_State =
                ParserFast_skipWhileHelp(isGood, s0.offset, s0.row, s0.col, s0.src, s0.indent)
            return ParserFast_PStep.ParserFast_Good(String_slice(s0.offset, generated_let_result_argument0_declarationResult_s1.offset, s0.src), generated_let_result_argument0_declarationResult_s1)
        }
    )
}

@Sendable public static func ParserFast_whileMapWithRange<res: Sendable>(_ isGood: @Sendable @escaping (UnicodeScalar) -> Bool, _ rangeAndConsumedStringToRes: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (String) -> res) ->  ParserFast_Parser<res> {
    ParserFast_Parser.ParserFast_Parser(
        { (s0: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_s1: ParserFast_State =
                ParserFast_skipWhileHelp(isGood, s0.offset, s0.row, s0.col, s0.src, s0.indent)
            return ParserFast_PStep.ParserFast_Good(rangeAndConsumedStringToRes(Generated_end_start.Record(end: Generated_column_row.Record(column: generated_let_result_argument0_declarationResult_s1.col, row: generated_let_result_argument0_declarationResult_s1.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(String_slice(s0.offset, generated_let_result_argument0_declarationResult_s1.offset, s0.src)), generated_let_result_argument0_declarationResult_s1)
        }
    )
}

@Sendable public static func ParserFast_whileWithoutLinebreak(_ isGood: @Sendable @escaping (UnicodeScalar) -> Bool) ->  ParserFast_Parser<String> {
    ParserFast_Parser.ParserFast_Parser(
        { (s0: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_s1: ParserFast_State =
                ParserFast_skipWhileWithoutLinebreakHelp(isGood, s0.offset, s0.row, s0.col, s0.src, s0.indent)
            return ParserFast_PStep.ParserFast_Good(String_slice(s0.offset, generated_let_result_argument0_declarationResult_s1.offset, s0.src), generated_let_result_argument0_declarationResult_s1)
        }
    )
}

@Sendable public static func ParserFast_whileWithoutLinebreakAnd2PartUtf16ToResultAndThen<intermediate: Sendable, res: Sendable>(_ whileCharIsOkay: @Sendable @escaping (UnicodeScalar) -> Bool, _ consumedStringToIntermediateOrErr: @Sendable @escaping (String) -> Result_Result<String, intermediate>, _ intermediateToFollowupParser: @Sendable @escaping (intermediate) -> ParserFast_Parser<res>) ->  ParserFast_Parser<res> {
    ParserFast_Parser.ParserFast_Parser(
        { (s0: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_s1Offset: Double =
                ParserFast_skipWhileWithoutLinebreakAnd2PartUtf16Help(whileCharIsOkay, s0.offset, s0.src)
            let generated_let_result_argument0_declarationResult_whileContent: String =
                String_slice(s0.offset, generated_let_result_argument0_declarationResult_s1Offset, s0.src)
            let generated_localReturnResult_letResult_result_argument0_declarationResult: ParserFast_PStep<res>
            switch consumedStringToIntermediateOrErr(generated_let_result_argument0_declarationResult_whileContent) {
            case let Result_Result.Result_Err(problemMessage):
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingCustom(s0.row, s0.col, problemMessage))
            case let Result_Result.Result_Ok(intermediate):
                let generated_let_caseResult_case1_letResult_result_argument0_declarationResult_s1Column: Double =
                    Basics_add(s0.col, Basics_sub(generated_let_result_argument0_declarationResult_s1Offset, s0.offset))
                let generated_let_caseResult_case1_letResult_result_argument0_declarationResult_parseFollowup: @Sendable (ParserFast_State) -> ParserFast_PStep<res>
                switch intermediateToFollowupParser(intermediate) {
                case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parseFollowup):
                    generated_let_caseResult_case1_letResult_result_argument0_declarationResult_parseFollowup =
                        generated_destructured_parseFollowup
                }
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserFast_pStepCommit(generated_let_caseResult_case1_letResult_result_argument0_declarationResult_parseFollowup(Generated_col_indent_offset_row_src.Record(col: generated_let_caseResult_case1_letResult_result_argument0_declarationResult_s1Column, indent: s0.indent, offset: generated_let_result_argument0_declarationResult_s1Offset, row: s0.row, src: s0.src)))
            }
            return generated_localReturnResult_letResult_result_argument0_declarationResult
        }
    )
}

@Sendable public static func ParserFast_whileWithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol<res: Sendable>(_ whileRangeAndContentToRes: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (String) -> res, _ whileCharIsOkay: @Sendable @escaping (UnicodeScalar) -> Bool, _ whileResultIsOkay: @Sendable @escaping (String) -> Bool, _ mandatoryFinalSymbol: String) ->  ParserFast_Parser<res> {
    let generated_let_declarationResult_mandatoryFinalSymbolLength: Double =
        String_length(mandatoryFinalSymbol)
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
                let generated_let_result_argument0_letResult_declarationResult_s1Offset: Double =
                    ParserFast_skipWhileWithoutLinebreakAnd2PartUtf16Help(whileCharIsOkay, s0.offset, s0.src)
                let generated_let_result_argument0_letResult_declarationResult_whileContent: String =
                    String_slice(s0.offset, generated_let_result_argument0_letResult_declarationResult_s1Offset, s0.src)
                let generated_localReturnResult_letResult_result_argument0_letResult_declarationResult: ParserFast_PStep<res>
                if Basics_and(Basics_eq(String_slice(generated_let_result_argument0_letResult_declarationResult_s1Offset, Basics_add(generated_let_result_argument0_letResult_declarationResult_s1Offset, generated_let_declarationResult_mandatoryFinalSymbolLength), s0.src), mandatoryFinalSymbol), whileResultIsOkay(generated_let_result_argument0_letResult_declarationResult_whileContent)) {
                    let generated_let_onTrue_letResult_result_argument0_letResult_declarationResult_s1Column: Double =
                        Basics_add(s0.col, Basics_sub(generated_let_result_argument0_letResult_declarationResult_s1Offset, s0.offset))
                    generated_localReturnResult_letResult_result_argument0_letResult_declarationResult =
                        ParserFast_PStep.ParserFast_Good(whileRangeAndContentToRes(Generated_end_start.Record(end: Generated_column_row.Record(column: generated_let_onTrue_letResult_result_argument0_letResult_declarationResult_s1Column, row: s0.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(generated_let_result_argument0_letResult_declarationResult_whileContent), Generated_col_indent_offset_row_src.Record(col: Basics_add(generated_let_onTrue_letResult_result_argument0_letResult_declarationResult_s1Column, generated_let_declarationResult_mandatoryFinalSymbolLength), indent: s0.indent, offset: Basics_add(generated_let_result_argument0_letResult_declarationResult_s1Offset, generated_let_declarationResult_mandatoryFinalSymbolLength), row: s0.row, src: s0.src))
                } else {
                    generated_localReturnResult_letResult_result_argument0_letResult_declarationResult =
                        ParserFast_PStep.ParserFast_Bad(false, ParserFast_Problem.ParserFast_ExpectingStringSatisfyingPredicate(s0.row, Basics_add(s0.col, 1.0)))
                }
                return generated_localReturnResult_letResult_result_argument0_letResult_declarationResult
            }
        )
}

@Sendable public static func ParserFast_withIndentSetToColumn<a: Sendable>(_ generated_0: ParserFast_Parser<a>) ->  ParserFast_Parser<a> {
    let parse: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_0 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parse):
        parse =
            generated_destructured_parse
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
                switch parse(ParserFast_changeIndent(s0.col, s0)) {
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    ParserFast_PStep.ParserFast_Good(a, ParserFast_changeIndent(s0.indent, s1))
                case let bad:
                    bad
                }
            }
        )
}

@Sendable public static func ParserFast_withIndentSetToColumnMinus<a: Sendable>(_ columnToMoveIndentationBaseBackBy: Double, _ generated_1: ParserFast_Parser<a>) ->  ParserFast_Parser<a> {
    let parse: @Sendable (ParserFast_State) -> ParserFast_PStep<a>
    switch generated_1 {
    case let ParserFast_Parser.ParserFast_Parser(generated_destructured_parse):
        parse =
            generated_destructured_parse
    }
    return
        ParserFast_Parser.ParserFast_Parser(
            { (s0: Generated_col_indent_offset_row_src<Double, Double, Double, Double, String>) in
                switch parse(ParserFast_changeIndent(Basics_sub(s0.col, columnToMoveIndentationBaseBackBy), s0)) {
                case let ParserFast_PStep.ParserFast_Good(a, s1):
                    ParserFast_PStep.ParserFast_Good(a, ParserFast_changeIndent(s0.indent, s1))
                case let bad:
                    bad
                }
            }
        )
}

@Sendable public static func ParserLenient_anyCharFollowedByWhileMap<res: Sendable>(_ consumedStringToRes: @Sendable @escaping (String) -> res, _ afterFirstIsOkay: @Sendable @escaping (UnicodeScalar) -> Bool) ->  ParserLenient_Parser<res> {
    ParserLenient_Parser.ParserLenient_Parser(
        { (s: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_firstOffset: Double =
                ParserLenient_charOrEnd(s.offset, s.src)
            let generated_localReturnResult_letResult_result_argument0_declarationResult: ParserLenient_PStep<res>
            if Basics_eq(generated_let_result_argument0_declarationResult_firstOffset, -1.0) {
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserLenient_pStepBadBacktracking()
            } else {
                let generated_let_onFalse_letResult_result_argument0_declarationResult_s1: ParserLenient_State =
                    if Basics_eq(generated_let_result_argument0_declarationResult_firstOffset, -2.0) {
                        ParserLenient_skipWhileHelp(afterFirstIsOkay, Basics_add(s.offset, 1.0), Basics_add(s.row, 1.0), 1.0, s.src, s.indent)
                    } else {
                        ParserLenient_skipWhileHelp(afterFirstIsOkay, generated_let_result_argument0_declarationResult_firstOffset, s.row, Basics_add(s.col, 1.0), s.src, s.indent)
                    }
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserLenient_PStep.ParserLenient_Good(consumedStringToRes(String_slice(s.offset, generated_let_onFalse_letResult_result_argument0_declarationResult_s1.offset, s.src)), generated_let_onFalse_letResult_result_argument0_declarationResult_s1)
            }
            return generated_localReturnResult_letResult_result_argument0_declarationResult
        }
    )
}

@Sendable public static func ParserLenient_changeIndent(_ newIndent: @Sendable @escaping (List_List<Double>) -> List_List<Double>, _ s: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) ->  Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String> {
    Generated_col_indent_offset_row_src.Record(col: s.col, indent: newIndent(s.indent), offset: s.offset, row: s.row, src: s.src)
}

@Sendable public static func ParserLenient_charOrEnd(_ offset: Double, _ string: String) ->  Double {
    switch String_slice(offset, Basics_add(offset, 1.0), string) {
    case "\n":
        -2.0
    case "":
        -1.0
    case let charNotLinebreakNotEndOfSource:
        if ParserLenient_charStringIsUtf16HighSurrogate(charNotLinebreakNotEndOfSource) {
            Basics_add(offset, 2.0)
        } else {
            Basics_add(offset, 1.0)
        }
    }
}

@Sendable public static func ParserLenient_charStringIsUtf16HighSurrogate(_ charString: String) ->  Bool {
    String_any(CharExtra_isUtf16Surrogate, charString)
}

@Sendable public static func ParserLenient_columnIndentAndThen<b: Sendable>(_ callback: @Sendable @escaping (Double) -> (List_List<Double>) -> ParserLenient_Parser<b>) ->  ParserLenient_Parser<b> {
    ParserLenient_Parser.ParserLenient_Parser(
        { (s: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_parse: @Sendable (ParserLenient_State) -> ParserLenient_PStep<b>
            switch callback(s.col)(s.indent) {
            case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parse):
                generated_let_result_argument0_declarationResult_parse =
                    generated_destructured_parse
            }
            return generated_let_result_argument0_declarationResult_parse(s)
        }
    )
}

@Sendable public static func ParserLenient_convert0OrMore0To9s(_ soFar: Double, _ offset: Double, _ src: String) ->  Generated_int_offset<Double, Double> {
    switch String_slice(offset, Basics_add(offset, 1.0), src) {
    case "0":
        ParserLenient_convert0OrMore0To9s(Basics_mul(soFar, 10.0), Basics_add(offset, 1.0), src)
    case "1":
        ParserLenient_convert0OrMore0To9s(Basics_add(Basics_mul(soFar, 10.0), 1.0), Basics_add(offset, 1.0), src)
    case "2":
        ParserLenient_convert0OrMore0To9s(Basics_add(Basics_mul(soFar, 10.0), 2.0), Basics_add(offset, 1.0), src)
    case "3":
        ParserLenient_convert0OrMore0To9s(Basics_add(Basics_mul(soFar, 10.0), 3.0), Basics_add(offset, 1.0), src)
    case "4":
        ParserLenient_convert0OrMore0To9s(Basics_add(Basics_mul(soFar, 10.0), 4.0), Basics_add(offset, 1.0), src)
    case "5":
        ParserLenient_convert0OrMore0To9s(Basics_add(Basics_mul(soFar, 10.0), 5.0), Basics_add(offset, 1.0), src)
    case "6":
        ParserLenient_convert0OrMore0To9s(Basics_add(Basics_mul(soFar, 10.0), 6.0), Basics_add(offset, 1.0), src)
    case "7":
        ParserLenient_convert0OrMore0To9s(Basics_add(Basics_mul(soFar, 10.0), 7.0), Basics_add(offset, 1.0), src)
    case "8":
        ParserLenient_convert0OrMore0To9s(Basics_add(Basics_mul(soFar, 10.0), 8.0), Basics_add(offset, 1.0), src)
    case "9":
        ParserLenient_convert0OrMore0To9s(Basics_add(Basics_mul(soFar, 10.0), 9.0), Basics_add(offset, 1.0), src)
    case _:
        Generated_int_offset.Record(int: soFar, offset: offset)
    }
}

@Sendable public static func ParserLenient_convert0OrMoreHexadecimal(_ soFar: Double, _ offset: Double, _ src: String) ->  Generated_int_offset<Double, Double> {
    switch String_slice(offset, Basics_add(offset, 1.0), src) {
    case "0":
        ParserLenient_convert0OrMoreHexadecimal(Basics_mul(soFar, 16.0), Basics_add(offset, 1.0), src)
    case "1":
        ParserLenient_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 1.0), Basics_add(offset, 1.0), src)
    case "2":
        ParserLenient_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 2.0), Basics_add(offset, 1.0), src)
    case "3":
        ParserLenient_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 3.0), Basics_add(offset, 1.0), src)
    case "4":
        ParserLenient_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 4.0), Basics_add(offset, 1.0), src)
    case "5":
        ParserLenient_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 5.0), Basics_add(offset, 1.0), src)
    case "6":
        ParserLenient_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 6.0), Basics_add(offset, 1.0), src)
    case "7":
        ParserLenient_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 7.0), Basics_add(offset, 1.0), src)
    case "8":
        ParserLenient_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 8.0), Basics_add(offset, 1.0), src)
    case "9":
        ParserLenient_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 9.0), Basics_add(offset, 1.0), src)
    case "a":
        ParserLenient_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 10.0), Basics_add(offset, 1.0), src)
    case "A":
        ParserLenient_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 10.0), Basics_add(offset, 1.0), src)
    case "b":
        ParserLenient_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 11.0), Basics_add(offset, 1.0), src)
    case "B":
        ParserLenient_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 11.0), Basics_add(offset, 1.0), src)
    case "c":
        ParserLenient_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 12.0), Basics_add(offset, 1.0), src)
    case "C":
        ParserLenient_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 12.0), Basics_add(offset, 1.0), src)
    case "d":
        ParserLenient_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 13.0), Basics_add(offset, 1.0), src)
    case "D":
        ParserLenient_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 13.0), Basics_add(offset, 1.0), src)
    case "e":
        ParserLenient_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 14.0), Basics_add(offset, 1.0), src)
    case "E":
        ParserLenient_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 14.0), Basics_add(offset, 1.0), src)
    case "f":
        ParserLenient_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 15.0), Basics_add(offset, 1.0), src)
    case "F":
        ParserLenient_convert0OrMoreHexadecimal(Basics_add(Basics_mul(soFar, 16.0), 15.0), Basics_add(offset, 1.0), src)
    case _:
        Generated_int_offset.Record(int: soFar, offset: offset)
    }
}

@Sendable public static func ParserLenient_convert1OrMoreHexadecimal(_ offset: Double, _ src: String) ->  Generated_int_offset<Double, Double> {
    switch String_slice(offset, Basics_add(offset, 1.0), src) {
    case "0":
        ParserLenient_convert0OrMoreHexadecimal(0.0, Basics_add(offset, 1.0), src)
    case "1":
        ParserLenient_convert0OrMoreHexadecimal(1.0, Basics_add(offset, 1.0), src)
    case "2":
        ParserLenient_convert0OrMoreHexadecimal(2.0, Basics_add(offset, 1.0), src)
    case "3":
        ParserLenient_convert0OrMoreHexadecimal(3.0, Basics_add(offset, 1.0), src)
    case "4":
        ParserLenient_convert0OrMoreHexadecimal(4.0, Basics_add(offset, 1.0), src)
    case "5":
        ParserLenient_convert0OrMoreHexadecimal(5.0, Basics_add(offset, 1.0), src)
    case "6":
        ParserLenient_convert0OrMoreHexadecimal(6.0, Basics_add(offset, 1.0), src)
    case "7":
        ParserLenient_convert0OrMoreHexadecimal(7.0, Basics_add(offset, 1.0), src)
    case "8":
        ParserLenient_convert0OrMoreHexadecimal(8.0, Basics_add(offset, 1.0), src)
    case "9":
        ParserLenient_convert0OrMoreHexadecimal(9.0, Basics_add(offset, 1.0), src)
    case "a":
        ParserLenient_convert0OrMoreHexadecimal(10.0, Basics_add(offset, 1.0), src)
    case "A":
        ParserLenient_convert0OrMoreHexadecimal(10.0, Basics_add(offset, 1.0), src)
    case "b":
        ParserLenient_convert0OrMoreHexadecimal(11.0, Basics_add(offset, 1.0), src)
    case "B":
        ParserLenient_convert0OrMoreHexadecimal(11.0, Basics_add(offset, 1.0), src)
    case "c":
        ParserLenient_convert0OrMoreHexadecimal(12.0, Basics_add(offset, 1.0), src)
    case "C":
        ParserLenient_convert0OrMoreHexadecimal(12.0, Basics_add(offset, 1.0), src)
    case "d":
        ParserLenient_convert0OrMoreHexadecimal(13.0, Basics_add(offset, 1.0), src)
    case "D":
        ParserLenient_convert0OrMoreHexadecimal(13.0, Basics_add(offset, 1.0), src)
    case "e":
        ParserLenient_convert0OrMoreHexadecimal(14.0, Basics_add(offset, 1.0), src)
    case "E":
        ParserLenient_convert0OrMoreHexadecimal(14.0, Basics_add(offset, 1.0), src)
    case "f":
        ParserLenient_convert0OrMoreHexadecimal(15.0, Basics_add(offset, 1.0), src)
    case "F":
        ParserLenient_convert0OrMoreHexadecimal(15.0, Basics_add(offset, 1.0), src)
    case _:
        ParserLenient_int0OffsetNegative1
    }
}

@Sendable public static func ParserLenient_convertIntegerDecimal(_ offset: Double, _ src: String) ->  Generated_int_offset<Double, Double> {
    switch String_slice(offset, Basics_add(offset, 1.0), src) {
    case "0":
        Generated_int_offset.Record(int: 0.0, offset: Basics_add(offset, 1.0))
    case "1":
        ParserLenient_convert0OrMore0To9s(1.0, Basics_add(offset, 1.0), src)
    case "2":
        ParserLenient_convert0OrMore0To9s(2.0, Basics_add(offset, 1.0), src)
    case "3":
        ParserLenient_convert0OrMore0To9s(3.0, Basics_add(offset, 1.0), src)
    case "4":
        ParserLenient_convert0OrMore0To9s(4.0, Basics_add(offset, 1.0), src)
    case "5":
        ParserLenient_convert0OrMore0To9s(5.0, Basics_add(offset, 1.0), src)
    case "6":
        ParserLenient_convert0OrMore0To9s(6.0, Basics_add(offset, 1.0), src)
    case "7":
        ParserLenient_convert0OrMore0To9s(7.0, Basics_add(offset, 1.0), src)
    case "8":
        ParserLenient_convert0OrMore0To9s(8.0, Basics_add(offset, 1.0), src)
    case "9":
        ParserLenient_convert0OrMore0To9s(9.0, Basics_add(offset, 1.0), src)
    case _:
        ParserLenient_errorAsOffsetAndInt
    }
}

@Sendable public static func ParserLenient_convertIntegerDecimalOrHexadecimal(_ offset: Double, _ src: String) ->  Generated_base_offsetAndInt<ParserLenient_Base, Generated_int_offset<Double, Double>> {
    let generated_localReturnResult_declarationResult: Generated_base_offsetAndInt<ParserLenient_Base, Generated_int_offset<Double, Double>>
    switch String_slice(offset, Basics_add(offset, 1.0), src) {
    case "0":
        let generated_localReturnResult_caseResult_case0_declarationResult: Generated_base_offsetAndInt<ParserLenient_Base, Generated_int_offset<Double, Double>>
        switch String_slice(Basics_add(offset, 1.0), Basics_add(offset, 2.0), src) {
        case "x":
            let generated_let_caseResult_case0_caseResult_case0_declarationResult_hex: Generated_int_offset<Double, Double> =
                ParserLenient_convert1OrMoreHexadecimal(Basics_add(offset, 2.0), src)
            generated_localReturnResult_caseResult_case0_declarationResult =
                Generated_base_offsetAndInt.Record(base: ParserLenient_Base.ParserLenient_Hexadecimal, offsetAndInt: Generated_int_offset.Record(int: generated_let_caseResult_case0_caseResult_case0_declarationResult_hex.int, offset: generated_let_caseResult_case0_caseResult_case0_declarationResult_hex.offset))
        case _:
            generated_localReturnResult_caseResult_case0_declarationResult =
                Generated_base_offsetAndInt.Record(base: ParserLenient_Base.ParserLenient_Decimal, offsetAndInt: Generated_int_offset.Record(int: 0.0, offset: Basics_add(offset, 1.0)))
        }
        generated_localReturnResult_declarationResult =
            generated_localReturnResult_caseResult_case0_declarationResult
    case "1":
        generated_localReturnResult_declarationResult =
            Generated_base_offsetAndInt.Record(base: ParserLenient_Base.ParserLenient_Decimal, offsetAndInt: ParserLenient_convert0OrMore0To9s(1.0, Basics_add(offset, 1.0), src))
    case "2":
        generated_localReturnResult_declarationResult =
            Generated_base_offsetAndInt.Record(base: ParserLenient_Base.ParserLenient_Decimal, offsetAndInt: ParserLenient_convert0OrMore0To9s(2.0, Basics_add(offset, 1.0), src))
    case "3":
        generated_localReturnResult_declarationResult =
            Generated_base_offsetAndInt.Record(base: ParserLenient_Base.ParserLenient_Decimal, offsetAndInt: ParserLenient_convert0OrMore0To9s(3.0, Basics_add(offset, 1.0), src))
    case "4":
        generated_localReturnResult_declarationResult =
            Generated_base_offsetAndInt.Record(base: ParserLenient_Base.ParserLenient_Decimal, offsetAndInt: ParserLenient_convert0OrMore0To9s(4.0, Basics_add(offset, 1.0), src))
    case "5":
        generated_localReturnResult_declarationResult =
            Generated_base_offsetAndInt.Record(base: ParserLenient_Base.ParserLenient_Decimal, offsetAndInt: ParserLenient_convert0OrMore0To9s(5.0, Basics_add(offset, 1.0), src))
    case "6":
        generated_localReturnResult_declarationResult =
            Generated_base_offsetAndInt.Record(base: ParserLenient_Base.ParserLenient_Decimal, offsetAndInt: ParserLenient_convert0OrMore0To9s(6.0, Basics_add(offset, 1.0), src))
    case "7":
        generated_localReturnResult_declarationResult =
            Generated_base_offsetAndInt.Record(base: ParserLenient_Base.ParserLenient_Decimal, offsetAndInt: ParserLenient_convert0OrMore0To9s(7.0, Basics_add(offset, 1.0), src))
    case "8":
        generated_localReturnResult_declarationResult =
            Generated_base_offsetAndInt.Record(base: ParserLenient_Base.ParserLenient_Decimal, offsetAndInt: ParserLenient_convert0OrMore0To9s(8.0, Basics_add(offset, 1.0), src))
    case "9":
        generated_localReturnResult_declarationResult =
            Generated_base_offsetAndInt.Record(base: ParserLenient_Base.ParserLenient_Decimal, offsetAndInt: ParserLenient_convert0OrMore0To9s(9.0, Basics_add(offset, 1.0), src))
    case _:
        generated_localReturnResult_declarationResult =
            ParserLenient_errorAsBaseOffsetAndInt
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ParserLenient_floatOrIntegerDecimalOrHexadecimalMapWithRange<res: Sendable>(_ rangeAndFloatToRes: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (Double) -> res, _ rangeAndIntDecimalToRes: @Sendable @escaping (ElmSyntaxRange_Range) -> (Double) -> res, _ rangeAndIntHexadecimalToRes: @Sendable @escaping (ElmSyntaxRange_Range) -> (Double) -> res) ->  ParserLenient_Parser<res> {
    ParserLenient_Parser.ParserLenient_Parser(
        { (s0: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_s1: Generated_base_offsetAndInt<ParserLenient_Base, Generated_int_offset<Double, Double>> =
                ParserLenient_convertIntegerDecimalOrHexadecimal(s0.offset, s0.src)
            let generated_localReturnResult_letResult_result_argument0_declarationResult: ParserLenient_PStep<res>
            if Basics_eq(generated_let_result_argument0_declarationResult_s1.offsetAndInt.offset, -1.0) {
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserLenient_pStepBadBacktracking()
            } else {
                let generated_let_onFalse_letResult_result_argument0_declarationResult_offsetAfterFloat: Double =
                    ParserLenient_skipFloatAfterIntegerDecimal(generated_let_result_argument0_declarationResult_s1.offsetAndInt.offset, s0.src)
                let generated_localReturnResult_letResult_onFalse_letResult_result_argument0_declarationResult: ParserLenient_PStep<res>
                if Basics_eq(generated_let_onFalse_letResult_result_argument0_declarationResult_offsetAfterFloat, -1.0) {
                    let generated_let_onTrue_letResult_onFalse_letResult_result_argument0_declarationResult_newColumn: Double =
                        Basics_add(s0.col, Basics_sub(generated_let_result_argument0_declarationResult_s1.offsetAndInt.offset, s0.offset))
                    let generated_let_onTrue_letResult_onFalse_letResult_result_argument0_declarationResult_range: ElmSyntaxRange_Range =
                        Generated_end_start.Record(end: Generated_column_row.Record(column: generated_let_onTrue_letResult_onFalse_letResult_result_argument0_declarationResult_newColumn, row: s0.row), start: Generated_column_row.Record(column: s0.col, row: s0.row))
                    let generated_localReturnResult_argument0_letResult_onTrue_letResult_onFalse_letResult_result_argument0_declarationResult: res =
                        switch generated_let_result_argument0_declarationResult_s1.base {
                        case ParserLenient_Base.ParserLenient_Decimal:
                            rangeAndIntDecimalToRes(generated_let_onTrue_letResult_onFalse_letResult_result_argument0_declarationResult_range)(generated_let_result_argument0_declarationResult_s1.offsetAndInt.int)
                        case ParserLenient_Base.ParserLenient_Hexadecimal:
                            rangeAndIntHexadecimalToRes(generated_let_onTrue_letResult_onFalse_letResult_result_argument0_declarationResult_range)(generated_let_result_argument0_declarationResult_s1.offsetAndInt.int)
                        }
                    generated_localReturnResult_letResult_onFalse_letResult_result_argument0_declarationResult =
                        ParserLenient_PStep.ParserLenient_Good(generated_localReturnResult_argument0_letResult_onTrue_letResult_onFalse_letResult_result_argument0_declarationResult, Generated_col_indent_offset_row_src.Record(col: generated_let_onTrue_letResult_onFalse_letResult_result_argument0_declarationResult_newColumn, indent: s0.indent, offset: generated_let_result_argument0_declarationResult_s1.offsetAndInt.offset, row: s0.row, src: s0.src))
                } else {
                    let generated_localReturnResult_onFalse_letResult_onFalse_letResult_result_argument0_declarationResult: ParserLenient_PStep<res>
                    switch String_toFloat(String_slice(s0.offset, generated_let_onFalse_letResult_result_argument0_declarationResult_offsetAfterFloat, s0.src)) {
                    case let Maybe_Maybe.Maybe_Just(float):
                        let generated_let_caseResult_case0_onFalse_letResult_onFalse_letResult_result_argument0_declarationResult_newColumn: Double =
                            Basics_add(s0.col, Basics_sub(generated_let_onFalse_letResult_result_argument0_declarationResult_offsetAfterFloat, s0.offset))
                        generated_localReturnResult_onFalse_letResult_onFalse_letResult_result_argument0_declarationResult =
                            ParserLenient_PStep.ParserLenient_Good(rangeAndFloatToRes(Generated_end_start.Record(end: Generated_column_row.Record(column: generated_let_caseResult_case0_onFalse_letResult_onFalse_letResult_result_argument0_declarationResult_newColumn, row: s0.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(float), Generated_col_indent_offset_row_src.Record(col: generated_let_caseResult_case0_onFalse_letResult_onFalse_letResult_result_argument0_declarationResult_newColumn, indent: s0.indent, offset: generated_let_onFalse_letResult_result_argument0_declarationResult_offsetAfterFloat, row: s0.row, src: s0.src))
                    case Maybe_Maybe.Maybe_Nothing:
                        generated_localReturnResult_onFalse_letResult_onFalse_letResult_result_argument0_declarationResult =
                            ParserLenient_pStepBadBacktracking()
                    }
                    generated_localReturnResult_letResult_onFalse_letResult_result_argument0_declarationResult =
                        generated_localReturnResult_onFalse_letResult_onFalse_letResult_result_argument0_declarationResult
                }
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    generated_localReturnResult_letResult_onFalse_letResult_result_argument0_declarationResult
            }
            return generated_localReturnResult_letResult_result_argument0_declarationResult
        }
    )
}

@Sendable public static func ParserLenient_followedBySkipWhileWhitespace<before: Sendable>(_ generated_0: ParserLenient_Parser<before>) ->  ParserLenient_Parser<before> {
    let parseBefore: @Sendable (ParserLenient_State) -> ParserLenient_PStep<before>
    switch generated_0 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseBefore):
        parseBefore =
            generated_destructured_parseBefore
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseBefore(s0) {
                case let ParserLenient_PStep.ParserLenient_Good(res, s1):
                    ParserLenient_PStep.ParserLenient_Good(res, ParserLenient_skipWhileWhitespaceHelp(s1.offset, s1.row, s1.col, s1.src, s1.indent))
                case let bad:
                    bad
                }
            }
        )
}

@Sendable public static func ParserLenient_followedBySymbol<a: Sendable>(_ str: String, _ generated_1: ParserLenient_Parser<a>) ->  ParserLenient_Parser<a> {
    let parsePrevious: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parsePrevious):
        parsePrevious =
            generated_destructured_parsePrevious
    }
    let generated_let_declarationResult_strLength: Double =
        String_length(str)
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                let generated_localReturnResult_result_argument0_letResult_declarationResult: ParserLenient_PStep<a>
                switch parsePrevious(s0) {
                case let ParserLenient_PStep.ParserLenient_Good(res, s1):
                    let generated_let_caseResult_case0_result_argument0_letResult_declarationResult_newOffset: Double =
                        Basics_add(s1.offset, generated_let_declarationResult_strLength)
                    generated_localReturnResult_result_argument0_letResult_declarationResult =
                        if Basics_eq(String_slice(s1.offset, generated_let_caseResult_case0_result_argument0_letResult_declarationResult_newOffset, s1.src), str) {
                            ParserLenient_PStep.ParserLenient_Good(res, Generated_col_indent_offset_row_src.Record(col: Basics_add(s1.col, generated_let_declarationResult_strLength), indent: s1.indent, offset: generated_let_caseResult_case0_result_argument0_letResult_declarationResult_newOffset, row: s1.row, src: s1.src))
                        } else {
                            ParserLenient_pStepBadCommitting()
                        }
                case let bad:
                    generated_localReturnResult_result_argument0_letResult_declarationResult =
                        bad
                }
                return generated_localReturnResult_result_argument0_letResult_declarationResult
            }
        )
}

@Sendable public static func ParserLenient_ifFollowedByWhileMapWithRangeWithoutLinebreak<res: Sendable>(_ rangeAndConsumedStringToRes: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (String) -> res, _ firstIsOkay: @Sendable @escaping (UnicodeScalar) -> Bool, _ afterFirstIsOkay: @Sendable @escaping (UnicodeScalar) -> Bool) ->  ParserLenient_Parser<res> {
    ParserLenient_Parser.ParserLenient_Parser(
        { (s0: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_firstOffset: Double =
                ParserLenient_isSubCharWithoutLinebreak(firstIsOkay, s0.offset, s0.src)
            let generated_localReturnResult_letResult_result_argument0_declarationResult: ParserLenient_PStep<res>
            if Basics_eq(generated_let_result_argument0_declarationResult_firstOffset, -1.0) {
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserLenient_pStepBadBacktracking()
            } else {
                let generated_let_onFalse_letResult_result_argument0_declarationResult_s1: ParserLenient_State =
                    ParserLenient_skipWhileWithoutLinebreakHelp(afterFirstIsOkay, generated_let_result_argument0_declarationResult_firstOffset, s0.row, Basics_add(s0.col, 1.0), s0.src, s0.indent)
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserLenient_PStep.ParserLenient_Good(rangeAndConsumedStringToRes(Generated_end_start.Record(end: Generated_column_row.Record(column: generated_let_onFalse_letResult_result_argument0_declarationResult_s1.col, row: generated_let_onFalse_letResult_result_argument0_declarationResult_s1.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(String_slice(s0.offset, generated_let_onFalse_letResult_result_argument0_declarationResult_s1.offset, s0.src)), generated_let_onFalse_letResult_result_argument0_declarationResult_s1)
            }
            return generated_localReturnResult_letResult_result_argument0_declarationResult
        }
    )
}

@Sendable public static func ParserLenient_ifFollowedByWhileMapWithoutLinebreak<res: Sendable>(_ consumedStringToRes: @Sendable @escaping (String) -> res, _ firstIsOkay: @Sendable @escaping (UnicodeScalar) -> Bool, _ afterFirstIsOkay: @Sendable @escaping (UnicodeScalar) -> Bool) ->  ParserLenient_Parser<res> {
    ParserLenient_Parser.ParserLenient_Parser(
        { (s0: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_firstOffset: Double =
                ParserLenient_isSubCharWithoutLinebreak(firstIsOkay, s0.offset, s0.src)
            let generated_localReturnResult_letResult_result_argument0_declarationResult: ParserLenient_PStep<res>
            if Basics_eq(generated_let_result_argument0_declarationResult_firstOffset, -1.0) {
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserLenient_pStepBadBacktracking()
            } else {
                let generated_let_onFalse_letResult_result_argument0_declarationResult_s1: ParserLenient_State =
                    ParserLenient_skipWhileWithoutLinebreakHelp(afterFirstIsOkay, generated_let_result_argument0_declarationResult_firstOffset, s0.row, Basics_add(s0.col, 1.0), s0.src, s0.indent)
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserLenient_PStep.ParserLenient_Good(consumedStringToRes(String_slice(s0.offset, generated_let_onFalse_letResult_result_argument0_declarationResult_s1.offset, s0.src)), generated_let_onFalse_letResult_result_argument0_declarationResult_s1)
            }
            return generated_localReturnResult_letResult_result_argument0_declarationResult
        }
    )
}

@Sendable public static func ParserLenient_ifFollowedByWhileValidateMapWithRangeWithoutLinebreak<res: Sendable>(_ toResult: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (String) -> res, _ firstIsOkay: @Sendable @escaping (UnicodeScalar) -> Bool, _ afterFirstIsOkay: @Sendable @escaping (UnicodeScalar) -> Bool, _ resultIsOkay: @Sendable @escaping (String) -> Bool) ->  ParserLenient_Parser<res> {
    ParserLenient_Parser.ParserLenient_Parser(
        { (s0: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_firstOffset: Double =
                ParserLenient_isSubCharWithoutLinebreak(firstIsOkay, s0.offset, s0.src)
            let generated_localReturnResult_letResult_result_argument0_declarationResult: ParserLenient_PStep<res>
            if Basics_eq(generated_let_result_argument0_declarationResult_firstOffset, -1.0) {
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserLenient_pStepBadBacktracking()
            } else {
                let generated_let_onFalse_letResult_result_argument0_declarationResult_s1: ParserLenient_State =
                    ParserLenient_skipWhileWithoutLinebreakHelp(afterFirstIsOkay, generated_let_result_argument0_declarationResult_firstOffset, s0.row, Basics_add(s0.col, 1.0), s0.src, s0.indent)
                let generated_let_onFalse_letResult_result_argument0_declarationResult_name: String =
                    String_slice(s0.offset, generated_let_onFalse_letResult_result_argument0_declarationResult_s1.offset, s0.src)
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    if resultIsOkay(generated_let_onFalse_letResult_result_argument0_declarationResult_name) {
                        ParserLenient_PStep.ParserLenient_Good(toResult(Generated_end_start.Record(end: Generated_column_row.Record(column: generated_let_onFalse_letResult_result_argument0_declarationResult_s1.col, row: generated_let_onFalse_letResult_result_argument0_declarationResult_s1.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(generated_let_onFalse_letResult_result_argument0_declarationResult_name), generated_let_onFalse_letResult_result_argument0_declarationResult_s1)
                    } else {
                        ParserLenient_pStepBadBacktracking()
                    }
            }
            return generated_localReturnResult_letResult_result_argument0_declarationResult
        }
    )
}

@Sendable public static func ParserLenient_ifFollowedByWhileValidateWithoutLinebreak(_ firstIsOkay: @Sendable @escaping (UnicodeScalar) -> Bool, _ afterFirstIsOkay: @Sendable @escaping (UnicodeScalar) -> Bool, _ resultIsOkay: @Sendable @escaping (String) -> Bool) ->  ParserLenient_Parser<String> {
    ParserLenient_Parser.ParserLenient_Parser(
        { (s: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_firstOffset: Double =
                ParserLenient_isSubCharWithoutLinebreak(firstIsOkay, s.offset, s.src)
            let generated_localReturnResult_letResult_result_argument0_declarationResult: ParserLenient_PStep<String>
            if Basics_eq(generated_let_result_argument0_declarationResult_firstOffset, -1.0) {
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserLenient_pStepBadBacktracking()
            } else {
                let generated_let_onFalse_letResult_result_argument0_declarationResult_s1: ParserLenient_State =
                    ParserLenient_skipWhileWithoutLinebreakHelp(afterFirstIsOkay, generated_let_result_argument0_declarationResult_firstOffset, s.row, Basics_add(s.col, 1.0), s.src, s.indent)
                let generated_let_onFalse_letResult_result_argument0_declarationResult_name: String =
                    String_slice(s.offset, generated_let_onFalse_letResult_result_argument0_declarationResult_s1.offset, s.src)
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    if resultIsOkay(generated_let_onFalse_letResult_result_argument0_declarationResult_name) {
                        ParserLenient_PStep.ParserLenient_Good(generated_let_onFalse_letResult_result_argument0_declarationResult_name, generated_let_onFalse_letResult_result_argument0_declarationResult_s1)
                    } else {
                        ParserLenient_pStepBadBacktracking()
                    }
            }
            return generated_localReturnResult_letResult_result_argument0_declarationResult
        }
    )
}

@Sendable public static func ParserLenient_ifFollowedByWhileWithoutLinebreak(_ firstIsOkay: @Sendable @escaping (UnicodeScalar) -> Bool, _ afterFirstIsOkay: @Sendable @escaping (UnicodeScalar) -> Bool) ->  ParserLenient_Parser<String> {
    ParserLenient_Parser.ParserLenient_Parser(
        { (s: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_firstOffset: Double =
                ParserLenient_isSubCharWithoutLinebreak(firstIsOkay, s.offset, s.src)
            let generated_localReturnResult_letResult_result_argument0_declarationResult: ParserLenient_PStep<String>
            if Basics_eq(generated_let_result_argument0_declarationResult_firstOffset, -1.0) {
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserLenient_pStepBadBacktracking()
            } else {
                let generated_let_onFalse_letResult_result_argument0_declarationResult_s1: ParserLenient_State =
                    ParserLenient_skipWhileWithoutLinebreakHelp(afterFirstIsOkay, generated_let_result_argument0_declarationResult_firstOffset, s.row, Basics_add(s.col, 1.0), s.src, s.indent)
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserLenient_PStep.ParserLenient_Good(String_slice(s.offset, generated_let_onFalse_letResult_result_argument0_declarationResult_s1.offset, s.src), generated_let_onFalse_letResult_result_argument0_declarationResult_s1)
            }
            return generated_localReturnResult_letResult_result_argument0_declarationResult
        }
    )
}

@Sendable public static func ParserLenient_integerDecimalMapWithRange<res: Sendable>(_ rangeAndIntToRes: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (Double) -> res) ->  ParserLenient_Parser<res> {
    ParserLenient_Parser.ParserLenient_Parser(
        { (s0: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_s1: Generated_int_offset<Double, Double> =
                ParserLenient_convertIntegerDecimal(s0.offset, s0.src)
            let generated_localReturnResult_letResult_result_argument0_declarationResult: ParserLenient_PStep<res>
            if Basics_eq(generated_let_result_argument0_declarationResult_s1.offset, -1.0) {
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserLenient_pStepBadBacktracking()
            } else {
                let generated_let_onFalse_letResult_result_argument0_declarationResult_newColumn: Double =
                    Basics_add(s0.col, Basics_sub(generated_let_result_argument0_declarationResult_s1.offset, s0.offset))
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserLenient_PStep.ParserLenient_Good(rangeAndIntToRes(Generated_end_start.Record(end: Generated_column_row.Record(column: generated_let_onFalse_letResult_result_argument0_declarationResult_newColumn, row: s0.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(generated_let_result_argument0_declarationResult_s1.int), Generated_col_indent_offset_row_src.Record(col: generated_let_onFalse_letResult_result_argument0_declarationResult_newColumn, indent: s0.indent, offset: generated_let_result_argument0_declarationResult_s1.offset, row: s0.row, src: s0.src))
            }
            return generated_localReturnResult_letResult_result_argument0_declarationResult
        }
    )
}

@Sendable public static func ParserLenient_integerDecimalOrHexadecimalMapWithRange<res: Sendable>(_ rangeAndIntDecimalToRes: @Sendable @escaping (ElmSyntaxRange_Range) -> (Double) -> res, _ rangeAndIntHexadecimalToRes: @Sendable @escaping (ElmSyntaxRange_Range) -> (Double) -> res) ->  ParserLenient_Parser<res> {
    ParserLenient_Parser.ParserLenient_Parser(
        { (s0: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_s1: Generated_base_offsetAndInt<ParserLenient_Base, Generated_int_offset<Double, Double>> =
                ParserLenient_convertIntegerDecimalOrHexadecimal(s0.offset, s0.src)
            let generated_localReturnResult_letResult_result_argument0_declarationResult: ParserLenient_PStep<res>
            if Basics_eq(generated_let_result_argument0_declarationResult_s1.offsetAndInt.offset, -1.0) {
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserLenient_pStepBadBacktracking()
            } else {
                let generated_let_onFalse_letResult_result_argument0_declarationResult_newColumn: Double =
                    Basics_add(s0.col, Basics_sub(generated_let_result_argument0_declarationResult_s1.offsetAndInt.offset, s0.offset))
                let generated_let_onFalse_letResult_result_argument0_declarationResult_range: ElmSyntaxRange_Range =
                    Generated_end_start.Record(end: Generated_column_row.Record(column: generated_let_onFalse_letResult_result_argument0_declarationResult_newColumn, row: s0.row), start: Generated_column_row.Record(column: s0.col, row: s0.row))
                let generated_localReturnResult_argument0_letResult_onFalse_letResult_result_argument0_declarationResult: res =
                    switch generated_let_result_argument0_declarationResult_s1.base {
                    case ParserLenient_Base.ParserLenient_Decimal:
                        rangeAndIntDecimalToRes(generated_let_onFalse_letResult_result_argument0_declarationResult_range)(generated_let_result_argument0_declarationResult_s1.offsetAndInt.int)
                    case ParserLenient_Base.ParserLenient_Hexadecimal:
                        rangeAndIntHexadecimalToRes(generated_let_onFalse_letResult_result_argument0_declarationResult_range)(generated_let_result_argument0_declarationResult_s1.offsetAndInt.int)
                    }
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserLenient_PStep.ParserLenient_Good(generated_localReturnResult_argument0_letResult_onFalse_letResult_result_argument0_declarationResult, Generated_col_indent_offset_row_src.Record(col: generated_let_onFalse_letResult_result_argument0_declarationResult_newColumn, indent: s0.indent, offset: generated_let_result_argument0_declarationResult_s1.offsetAndInt.offset, row: s0.row, src: s0.src))
            }
            return generated_localReturnResult_letResult_result_argument0_declarationResult
        }
    )
}

@Sendable public static func ParserLenient_isSubCharAlphaNumOrUnderscore(_ offset: Double, _ string: String) ->  Bool {
    String_any(CharExtra_isLatinAlphaNumOrUnderscoreFast, String_slice(offset, Basics_add(offset, 1.0), string))
}

@Sendable public static func ParserLenient_isSubCharWithoutLinebreak(_ predicate: @Sendable @escaping (UnicodeScalar) -> Bool, _ offset: Double, _ string: String) ->  Double {
    let generated_let_declarationResult_actualChar: String =
        String_slice(offset, Basics_add(offset, 1.0), string)
    return
        if String_any(predicate, generated_let_declarationResult_actualChar) {
            Basics_add(offset, 1.0)
        } else {
            if Basics_and(ParserLenient_charStringIsUtf16HighSurrogate(generated_let_declarationResult_actualChar), String_any(predicate, String_slice(offset, Basics_add(offset, 2.0), string))) {
                Basics_add(offset, 2.0)
            } else {
                -1.0
            }
        }
}

@Sendable public static func ParserLenient_keyword<res: Sendable>(_ kwd: String, _ res: res) ->  ParserLenient_Parser<res> {
    let generated_let_declarationResult_kwdLength: Double =
        String_length(kwd)
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
                let generated_let_result_argument0_letResult_declarationResult_newOffset: Double =
                    Basics_add(s.offset, generated_let_declarationResult_kwdLength)
                return
                    if Basics_and(Basics_eq(String_slice(s.offset, generated_let_result_argument0_letResult_declarationResult_newOffset, s.src), kwd), Basics_not(ParserLenient_isSubCharAlphaNumOrUnderscore(generated_let_result_argument0_letResult_declarationResult_newOffset, s.src))) {
                        ParserLenient_PStep.ParserLenient_Good(res, Generated_col_indent_offset_row_src.Record(col: Basics_add(s.col, generated_let_declarationResult_kwdLength), indent: s.indent, offset: generated_let_result_argument0_letResult_declarationResult_newOffset, row: s.row, src: s.src))
                    } else {
                        ParserLenient_pStepBadBacktracking()
                    }
            }
        )
}

@Sendable public static func ParserLenient_keywordFollowedBy<next: Sendable>(_ kwd: String, _ generated_1: ParserLenient_Parser<next>) ->  ParserLenient_Parser<next> {
    let parseNext: @Sendable (ParserLenient_State) -> ParserLenient_PStep<next>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseNext):
        parseNext =
            generated_destructured_parseNext
    }
    let generated_let_declarationResult_kwdLength: Double =
        String_length(kwd)
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
                let generated_let_result_argument0_letResult_declarationResult_newOffset: Double =
                    Basics_add(s.offset, generated_let_declarationResult_kwdLength)
                return
                    if Basics_and(Basics_eq(String_slice(s.offset, generated_let_result_argument0_letResult_declarationResult_newOffset, s.src), kwd), Basics_not(ParserLenient_isSubCharAlphaNumOrUnderscore(generated_let_result_argument0_letResult_declarationResult_newOffset, s.src))) {
                        ParserLenient_pStepCommit(parseNext(Generated_col_indent_offset_row_src.Record(col: Basics_add(s.col, generated_let_declarationResult_kwdLength), indent: s.indent, offset: generated_let_result_argument0_letResult_declarationResult_newOffset, row: s.row, src: s.src)))
                    } else {
                        ParserLenient_pStepBadBacktracking()
                    }
            }
        )
}

@Sendable public static func ParserLenient_lazy<a: Sendable>(_ thunk: @Sendable @escaping (Unit) -> ParserLenient_Parser<a>) ->  ParserLenient_Parser<a> {
    ParserLenient_Parser.ParserLenient_Parser(
        { (s: ParserLenient_State) in
            let generated_let_result_argument0_declarationResult_parse: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
            switch thunk(Unit.Unit) {
            case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parse):
                generated_let_result_argument0_declarationResult_parse =
                    generated_destructured_parse
            }
            return generated_let_result_argument0_declarationResult_parse(s)
        }
    )
}

@Sendable public static func ParserLenient_loop<a: Sendable, extension_: Sendable, state: Sendable>(_ state: state, _ element: ParserLenient_Parser<extension_>, _ reduce: @Sendable @escaping (extension_) -> (state) -> ParserLenient_Step<state, a>) ->  ParserLenient_Parser<a> {
    ParserLenient_Parser.ParserLenient_Parser({ (s: ParserLenient_State) in ParserLenient_loopHelp(false, state, element, reduce, s) })
}

@Sendable public static func ParserLenient_loopHelp<a: Sendable, extension_: Sendable, state: Sendable>(_ committedSoFar: Bool, _ state: state, _ generated_2: ParserLenient_Parser<extension_>, _ reduce: @Sendable @escaping (extension_) -> (state) -> ParserLenient_Step<state, a>, _ s0: ParserLenient_State) ->  ParserLenient_PStep<a> {
    let element: ParserLenient_Parser<extension_>
    let parseElement: @Sendable (ParserLenient_State) -> ParserLenient_PStep<extension_>
    let (generated_destructured_element) =
        generated_2
    element =
        generated_destructured_element
    switch element {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseElement):
        parseElement =
            generated_destructured_parseElement
    }
    return
        switch parseElement(s0) {
        case let ParserLenient_PStep.ParserLenient_Good(step, s1):
            switch reduce(step)(state) {
            case let ParserLenient_Step.ParserLenient_Loop(newState):
                ParserLenient_loopHelp(true, newState, element, reduce, s1)
            case let ParserLenient_Step.ParserLenient_Done(result):
                ParserLenient_PStep.ParserLenient_Good(result, s1)
            }
        case let ParserLenient_PStep.ParserLenient_Bad(elementCommitted, _):
            ParserLenient_PStep.ParserLenient_Bad(Basics_or(committedSoFar, elementCommitted), Unit.Unit)
        }
}

@Sendable public static func ParserLenient_loopUntil<element: Sendable, folded: Sendable, res: Sendable>(_ endParser: ParserLenient_Parser<Unit>, _ element: ParserLenient_Parser<element>, _ initialFolded: folded, _ reduce: @Sendable @escaping (element) -> (folded) -> folded, _ foldedToRes: @Sendable @escaping (folded) -> res) ->  ParserLenient_Parser<res> {
    ParserLenient_Parser.ParserLenient_Parser({ (s: ParserLenient_State) in ParserLenient_loopUntilHelp(endParser, element, initialFolded, reduce, foldedToRes, s) })
}

@Sendable public static func ParserLenient_loopUntilHelp<element: Sendable, folded: Sendable, res: Sendable>(_ generated_0: ParserLenient_Parser<Unit>, _ generated_1: ParserLenient_Parser<element>, _ soFar: folded, _ reduce: @Sendable @escaping (element) -> (folded) -> folded, _ foldedToRes: @Sendable @escaping (folded) -> res, _ s0: ParserLenient_State) ->  ParserLenient_PStep<res> {
    let endParser: ParserLenient_Parser<Unit>
    let parseEnd: @Sendable (ParserLenient_State) -> ParserLenient_PStep<Unit>
    let (generated_destructured_endParser) =
        generated_0
    endParser =
        generated_destructured_endParser
    switch endParser {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseEnd):
        parseEnd =
            generated_destructured_parseEnd
    }
    let element: ParserLenient_Parser<element>
    let parseElement: @Sendable (ParserLenient_State) -> ParserLenient_PStep<element>
    let (generated_destructured_element) =
        generated_1
    element =
        generated_destructured_element
    switch element {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseElement):
        parseElement =
            generated_destructured_parseElement
    }
    return
        switch parseEnd(s0) {
        case let ParserLenient_PStep.ParserLenient_Good(_, s1):
            ParserLenient_PStep.ParserLenient_Good(foldedToRes(soFar), s1)
        case let ParserLenient_PStep.ParserLenient_Bad(endCommitted, _):
            if endCommitted {
                ParserLenient_pStepBadCommitting()
            } else {
                switch parseElement(s0) {
                case let ParserLenient_PStep.ParserLenient_Good(elementResult, s1):
                    ParserLenient_loopUntilHelp(endParser, element, reduce(elementResult)(soFar), reduce, foldedToRes, s1)
                case ParserLenient_PStep.ParserLenient_Bad(_, _):
                    ParserLenient_pStepBadCommitting()
                }
            }
        }
}

@Sendable public static func ParserLenient_loopWhileSucceeds<element: Sendable, folded: Sendable, res: Sendable>(_ element: ParserLenient_Parser<element>, _ initialFolded: folded, _ reduce: @Sendable @escaping (element) -> (folded) -> folded, _ foldedToRes: @Sendable @escaping (folded) -> res) ->  ParserLenient_Parser<res> {
    ParserLenient_Parser.ParserLenient_Parser({ (s: ParserLenient_State) in ParserLenient_loopWhileSucceedsHelp(element, initialFolded, reduce, foldedToRes, s) })
}

@Sendable public static func ParserLenient_loopWhileSucceedsFromRightToLeftStackUnsafeHelp<element: Sendable, folded: Sendable>(_ generated_0: ParserLenient_Parser<element>, _ initialFolded: folded, _ reduce: @Sendable @escaping (element) -> (folded) -> folded, _ s0: ParserLenient_State) ->  ParserLenient_PStep<folded> {
    let element: ParserLenient_Parser<element>
    let parseElement: @Sendable (ParserLenient_State) -> ParserLenient_PStep<element>
    let (generated_destructured_element) =
        generated_0
    element =
        generated_destructured_element
    switch element {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseElement):
        parseElement =
            generated_destructured_parseElement
    }
    return
        switch parseElement(s0) {
        case let ParserLenient_PStep.ParserLenient_Good(elementResult, s1):
            switch ParserLenient_loopWhileSucceedsFromRightToLeftStackUnsafeHelp(element, initialFolded, reduce, s1) {
            case let ParserLenient_PStep.ParserLenient_Good(tailFolded, s2):
                ParserLenient_PStep.ParserLenient_Good(reduce(elementResult)(tailFolded), s2)
            case let tailBad:
                tailBad
            }
        case let ParserLenient_PStep.ParserLenient_Bad(elementCommitted, _):
            if elementCommitted {
                ParserLenient_pStepBadCommitting()
            } else {
                ParserLenient_PStep.ParserLenient_Good(initialFolded, s0)
            }
        }
}

@Sendable public static func ParserLenient_loopWhileSucceedsHelp<element: Sendable, folded: Sendable, res: Sendable>(_ generated_0: ParserLenient_Parser<element>, _ soFar: folded, _ reduce: @Sendable @escaping (element) -> (folded) -> folded, _ foldedToRes: @Sendable @escaping (folded) -> res, _ s0: ParserLenient_State) ->  ParserLenient_PStep<res> {
    let element: ParserLenient_Parser<element>
    let parseElement: @Sendable (ParserLenient_State) -> ParserLenient_PStep<element>
    let (generated_destructured_element) =
        generated_0
    element =
        generated_destructured_element
    switch element {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseElement):
        parseElement =
            generated_destructured_parseElement
    }
    return
        switch parseElement(s0) {
        case let ParserLenient_PStep.ParserLenient_Good(elementResult, s1):
            ParserLenient_loopWhileSucceedsHelp(element, reduce(elementResult)(soFar), reduce, foldedToRes, s1)
        case let ParserLenient_PStep.ParserLenient_Bad(elementCommitted, _):
            if elementCommitted {
                ParserLenient_pStepBadCommitting()
            } else {
                ParserLenient_PStep.ParserLenient_Good(foldedToRes(soFar), s0)
            }
        }
}

@Sendable public static func ParserLenient_loopWhileSucceedsOntoResultFromParser<element: Sendable, folded: Sendable, res: Sendable>(_ element: ParserLenient_Parser<element>, _ generated_1: ParserLenient_Parser<folded>, _ reduce: @Sendable @escaping (element) -> (folded) -> folded, _ foldedToRes: @Sendable @escaping (folded) -> res) ->  ParserLenient_Parser<res> {
    let parseInitialFolded: @Sendable (ParserLenient_State) -> ParserLenient_PStep<folded>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseInitialFolded):
        parseInitialFolded =
            generated_destructured_parseInitialFolded
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseInitialFolded(s0) {
                case let ParserLenient_PStep.ParserLenient_Good(initialFolded, s1):
                    ParserLenient_loopWhileSucceedsHelp(element, initialFolded, reduce, foldedToRes, s1)
                case let ParserLenient_PStep.ParserLenient_Bad(committed, _):
                    ParserLenient_PStep.ParserLenient_Bad(committed, Unit.Unit)
                }
            }
        )
}

@Sendable public static func ParserLenient_loopWhileSucceedsOntoResultFromParserRightToLeftStackUnsafe<element: Sendable>(_ generated_0: ParserLenient_Parser<element>, _ taiElement: ParserLenient_Parser<element>, _ reduce: @Sendable @escaping (element) -> (element) -> element) ->  ParserLenient_Parser<element> {
    let parseLeftestElement: @Sendable (ParserLenient_State) -> ParserLenient_PStep<element>
    switch generated_0 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseLeftestElement):
        parseLeftestElement =
            generated_destructured_parseLeftestElement
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseLeftestElement(s0) {
                case let ParserLenient_PStep.ParserLenient_Good(elementResult, s1):
                    switch ParserLenient_loopWhileSucceedsRightToLeftStackUnsafeHelp(taiElement, reduce, s1) {
                    case let ParserLenient_PStep.ParserLenient_Good(tailFolded, s2):
                        ParserLenient_PStep.ParserLenient_Good(reduce(elementResult)(tailFolded), s2)
                    case let ParserLenient_PStep.ParserLenient_Bad(tailCommitted, _):
                        if tailCommitted {
                            ParserLenient_pStepBadCommitting()
                        } else {
                            ParserLenient_PStep.ParserLenient_Good(elementResult, s1)
                        }
                    }
                case let ParserLenient_PStep.ParserLenient_Bad(elementCommitted, _):
                    ParserLenient_PStep.ParserLenient_Bad(elementCommitted, Unit.Unit)
                }
            }
        )
}

@Sendable public static func ParserLenient_loopWhileSucceedsRightToLeftStackUnsafe<element: Sendable, folded: Sendable>(_ element: ParserLenient_Parser<element>, _ initialFolded: folded, _ reduce: @Sendable @escaping (element) -> (folded) -> folded) ->  ParserLenient_Parser<folded> {
    ParserLenient_Parser.ParserLenient_Parser({ (s: ParserLenient_State) in ParserLenient_loopWhileSucceedsFromRightToLeftStackUnsafeHelp(element, initialFolded, reduce, s) })
}

@Sendable public static func ParserLenient_loopWhileSucceedsRightToLeftStackUnsafeHelp<element: Sendable>(_ generated_0: ParserLenient_Parser<element>, _ reduce: @Sendable @escaping (element) -> (element) -> element, _ s0: ParserLenient_State) ->  ParserLenient_PStep<element> {
    let element: ParserLenient_Parser<element>
    let parseElement: @Sendable (ParserLenient_State) -> ParserLenient_PStep<element>
    let (generated_destructured_element) =
        generated_0
    element =
        generated_destructured_element
    switch element {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseElement):
        parseElement =
            generated_destructured_parseElement
    }
    return
        switch parseElement(s0) {
        case let ParserLenient_PStep.ParserLenient_Good(elementResult, s1):
            switch ParserLenient_loopWhileSucceedsRightToLeftStackUnsafeHelp(element, reduce, s1) {
            case let ParserLenient_PStep.ParserLenient_Good(tailFolded, s2):
                ParserLenient_PStep.ParserLenient_Good(reduce(elementResult)(tailFolded), s2)
            case let ParserLenient_PStep.ParserLenient_Bad(tailCommitted, _):
                if tailCommitted {
                    ParserLenient_pStepBadCommitting()
                } else {
                    ParserLenient_PStep.ParserLenient_Good(elementResult, s1)
                }
            }
        case let ParserLenient_PStep.ParserLenient_Bad(elementCommitted, _):
            ParserLenient_PStep.ParserLenient_Bad(elementCommitted, Unit.Unit)
        }
}

@Sendable public static func ParserLenient_map<a: Sendable, b: Sendable>(_ func_: @Sendable @escaping (a) -> b, _ generated_1: ParserLenient_Parser<a>) ->  ParserLenient_Parser<b> {
    let parse: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parse):
        parse =
            generated_destructured_parse
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parse(s0) {
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    ParserLenient_PStep.ParserLenient_Good(func_(a), s1)
                case let ParserLenient_PStep.ParserLenient_Bad(committed, _):
                    ParserLenient_PStep.ParserLenient_Bad(committed, Unit.Unit)
                }
            }
        )
}

@Sendable public static func ParserLenient_map2<a: Sendable, b: Sendable, value: Sendable>(_ func_: @Sendable @escaping (a) -> (b) -> value, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<b>) ->  ParserLenient_Parser<value> {
    let parseA: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserLenient_State) -> ParserLenient_PStep<b>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseA(s0) {
                case let ParserLenient_PStep.ParserLenient_Bad(committed, _):
                    ParserLenient_PStep.ParserLenient_Bad(committed, Unit.Unit)
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    switch parseB(s1) {
                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                        ParserLenient_pStepBadCommitting()
                    case let ParserLenient_PStep.ParserLenient_Good(b, s2):
                        ParserLenient_PStep.ParserLenient_Good(func_(a)(b), s2)
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_map2OrSucceed<a: Sendable, b: Sendable, value: Sendable>(_ func_: @Sendable @escaping (a) -> (b) -> value, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<b>, _ fallback: value) ->  ParserLenient_Parser<value> {
    let parseA: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserLenient_State) -> ParserLenient_PStep<b>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseA(s0) {
                case let ParserLenient_PStep.ParserLenient_Bad(c1, _):
                    if c1 {
                        ParserLenient_pStepBadCommitting()
                    } else {
                        ParserLenient_PStep.ParserLenient_Good(fallback, s0)
                    }
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    switch parseB(s1) {
                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                        ParserLenient_pStepBadCommitting()
                    case let ParserLenient_PStep.ParserLenient_Good(b, s2):
                        ParserLenient_PStep.ParserLenient_Good(func_(a)(b), s2)
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_map2WithRange<a: Sendable, b: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (a) -> (b) -> value, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<b>) ->  ParserLenient_Parser<value> {
    let parseA: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserLenient_State) -> ParserLenient_PStep<b>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseA(s0) {
                case let ParserLenient_PStep.ParserLenient_Bad(committed, _):
                    ParserLenient_PStep.ParserLenient_Bad(committed, Unit.Unit)
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    switch parseB(s1) {
                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                        ParserLenient_pStepBadCommitting()
                    case let ParserLenient_PStep.ParserLenient_Good(b, s2):
                        ParserLenient_PStep.ParserLenient_Good(func_(Generated_end_start.Record(end: Generated_column_row.Record(column: s2.col, row: s2.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(a)(b), s2)
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_map2WithRangeOrSucceed<a: Sendable, b: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (a) -> (b) -> value, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<b>, _ fallback: value) ->  ParserLenient_Parser<value> {
    let parseA: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserLenient_State) -> ParserLenient_PStep<b>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseA(s0) {
                case let ParserLenient_PStep.ParserLenient_Bad(c1, _):
                    if c1 {
                        ParserLenient_pStepBadCommitting()
                    } else {
                        ParserLenient_PStep.ParserLenient_Good(fallback, s0)
                    }
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    switch parseB(s1) {
                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                        ParserLenient_pStepBadCommitting()
                    case let ParserLenient_PStep.ParserLenient_Good(b, s2):
                        ParserLenient_PStep.ParserLenient_Good(func_(Generated_end_start.Record(end: Generated_column_row.Record(column: s2.col, row: s2.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(a)(b), s2)
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_map2WithStartLocation<a: Sendable, b: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_column_row<Double, Double>) -> (a) -> (b) -> value, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<b>) ->  ParserLenient_Parser<value> {
    let parseA: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserLenient_State) -> ParserLenient_PStep<b>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseA(s0) {
                case let ParserLenient_PStep.ParserLenient_Bad(committed, _):
                    ParserLenient_PStep.ParserLenient_Bad(committed, Unit.Unit)
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    switch parseB(s1) {
                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                        ParserLenient_pStepBadCommitting()
                    case let ParserLenient_PStep.ParserLenient_Good(b, s2):
                        ParserLenient_PStep.ParserLenient_Good(func_(Generated_column_row.Record(column: s0.col, row: s0.row))(a)(b), s2)
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_map3<a: Sendable, b: Sendable, c: Sendable, value: Sendable>(_ func_: @Sendable @escaping (a) -> (b) -> (c) -> value, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<b>, _ generated_3: ParserLenient_Parser<c>) ->  ParserLenient_Parser<value> {
    let parseA: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserLenient_State) -> ParserLenient_PStep<b>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserLenient_State) -> ParserLenient_PStep<c>
    switch generated_3 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseA(s0) {
                case let ParserLenient_PStep.ParserLenient_Bad(committed, _):
                    ParserLenient_PStep.ParserLenient_Bad(committed, Unit.Unit)
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    switch parseB(s1) {
                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                        ParserLenient_pStepBadCommitting()
                    case let ParserLenient_PStep.ParserLenient_Good(b, s2):
                        switch parseC(s2) {
                        case ParserLenient_PStep.ParserLenient_Bad(_, _):
                            ParserLenient_pStepBadCommitting()
                        case let ParserLenient_PStep.ParserLenient_Good(c, s3):
                            ParserLenient_PStep.ParserLenient_Good(func_(a)(b)(c), s3)
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_map3OrSucceed<a: Sendable, b: Sendable, c: Sendable, value: Sendable>(_ func_: @Sendable @escaping (a) -> (b) -> (c) -> value, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<b>, _ generated_3: ParserLenient_Parser<c>, _ fallback: value) ->  ParserLenient_Parser<value> {
    let parseA: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserLenient_State) -> ParserLenient_PStep<b>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserLenient_State) -> ParserLenient_PStep<c>
    switch generated_3 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseA(s0) {
                case let ParserLenient_PStep.ParserLenient_Bad(c1, _):
                    if c1 {
                        ParserLenient_pStepBadCommitting()
                    } else {
                        ParserLenient_PStep.ParserLenient_Good(fallback, s0)
                    }
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    switch parseB(s1) {
                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                        ParserLenient_pStepBadCommitting()
                    case let ParserLenient_PStep.ParserLenient_Good(b, s2):
                        switch parseC(s2) {
                        case ParserLenient_PStep.ParserLenient_Bad(_, _):
                            ParserLenient_pStepBadCommitting()
                        case let ParserLenient_PStep.ParserLenient_Good(c, s3):
                            ParserLenient_PStep.ParserLenient_Good(func_(a)(b)(c), s3)
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_map3WithRange<a: Sendable, b: Sendable, c: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (a) -> (b) -> (c) -> value, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<b>, _ generated_3: ParserLenient_Parser<c>) ->  ParserLenient_Parser<value> {
    let parseA: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserLenient_State) -> ParserLenient_PStep<b>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserLenient_State) -> ParserLenient_PStep<c>
    switch generated_3 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseA(s0) {
                case let ParserLenient_PStep.ParserLenient_Bad(committed, _):
                    ParserLenient_PStep.ParserLenient_Bad(committed, Unit.Unit)
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    switch parseB(s1) {
                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                        ParserLenient_pStepBadCommitting()
                    case let ParserLenient_PStep.ParserLenient_Good(b, s2):
                        switch parseC(s2) {
                        case ParserLenient_PStep.ParserLenient_Bad(_, _):
                            ParserLenient_pStepBadCommitting()
                        case let ParserLenient_PStep.ParserLenient_Good(c, s3):
                            ParserLenient_PStep.ParserLenient_Good(func_(Generated_end_start.Record(end: Generated_column_row.Record(column: s3.col, row: s3.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(a)(b)(c), s3)
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_map3WithStartLocation<a: Sendable, b: Sendable, c: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_column_row<Double, Double>) -> (a) -> (b) -> (c) -> value, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<b>, _ generated_3: ParserLenient_Parser<c>) ->  ParserLenient_Parser<value> {
    let parseA: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserLenient_State) -> ParserLenient_PStep<b>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserLenient_State) -> ParserLenient_PStep<c>
    switch generated_3 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseA(s0) {
                case let ParserLenient_PStep.ParserLenient_Bad(committed, _):
                    ParserLenient_PStep.ParserLenient_Bad(committed, Unit.Unit)
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    switch parseB(s1) {
                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                        ParserLenient_pStepBadCommitting()
                    case let ParserLenient_PStep.ParserLenient_Good(b, s2):
                        switch parseC(s2) {
                        case ParserLenient_PStep.ParserLenient_Bad(_, _):
                            ParserLenient_pStepBadCommitting()
                        case let ParserLenient_PStep.ParserLenient_Good(c, s3):
                            ParserLenient_PStep.ParserLenient_Good(func_(Generated_column_row.Record(column: s0.col, row: s0.row))(a)(b)(c), s3)
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_map4<a: Sendable, b: Sendable, c: Sendable, d: Sendable, value: Sendable>(_ func_: @Sendable @escaping (a) -> (b) -> (c) -> (d) -> value, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<b>, _ generated_3: ParserLenient_Parser<c>, _ generated_4: ParserLenient_Parser<d>) ->  ParserLenient_Parser<value> {
    let parseA: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserLenient_State) -> ParserLenient_PStep<b>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserLenient_State) -> ParserLenient_PStep<c>
    switch generated_3 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserLenient_State) -> ParserLenient_PStep<d>
    switch generated_4 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseA(s0) {
                case let ParserLenient_PStep.ParserLenient_Bad(committed, _):
                    ParserLenient_PStep.ParserLenient_Bad(committed, Unit.Unit)
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    switch parseB(s1) {
                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                        ParserLenient_pStepBadCommitting()
                    case let ParserLenient_PStep.ParserLenient_Good(b, s2):
                        switch parseC(s2) {
                        case ParserLenient_PStep.ParserLenient_Bad(_, _):
                            ParserLenient_pStepBadCommitting()
                        case let ParserLenient_PStep.ParserLenient_Good(c, s3):
                            switch parseD(s3) {
                            case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                ParserLenient_pStepBadCommitting()
                            case let ParserLenient_PStep.ParserLenient_Good(d, s4):
                                ParserLenient_PStep.ParserLenient_Good(func_(a)(b)(c)(d), s4)
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_map4OrSucceed<a: Sendable, b: Sendable, c: Sendable, d: Sendable, value: Sendable>(_ func_: @Sendable @escaping (a) -> (b) -> (c) -> (d) -> value, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<b>, _ generated_3: ParserLenient_Parser<c>, _ generated_4: ParserLenient_Parser<d>, _ fallback: value) ->  ParserLenient_Parser<value> {
    let parseA: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserLenient_State) -> ParserLenient_PStep<b>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserLenient_State) -> ParserLenient_PStep<c>
    switch generated_3 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserLenient_State) -> ParserLenient_PStep<d>
    switch generated_4 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseA(s0) {
                case let ParserLenient_PStep.ParserLenient_Bad(c1, _):
                    if c1 {
                        ParserLenient_pStepBadCommitting()
                    } else {
                        ParserLenient_PStep.ParserLenient_Good(fallback, s0)
                    }
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    switch parseB(s1) {
                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                        ParserLenient_pStepBadCommitting()
                    case let ParserLenient_PStep.ParserLenient_Good(b, s2):
                        switch parseC(s2) {
                        case ParserLenient_PStep.ParserLenient_Bad(_, _):
                            ParserLenient_pStepBadCommitting()
                        case let ParserLenient_PStep.ParserLenient_Good(c, s3):
                            switch parseD(s3) {
                            case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                ParserLenient_pStepBadCommitting()
                            case let ParserLenient_PStep.ParserLenient_Good(d, s4):
                                ParserLenient_PStep.ParserLenient_Good(func_(a)(b)(c)(d), s4)
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_map4WithRange<a: Sendable, b: Sendable, c: Sendable, d: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (a) -> (b) -> (c) -> (d) -> value, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<b>, _ generated_3: ParserLenient_Parser<c>, _ generated_4: ParserLenient_Parser<d>) ->  ParserLenient_Parser<value> {
    let parseA: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserLenient_State) -> ParserLenient_PStep<b>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserLenient_State) -> ParserLenient_PStep<c>
    switch generated_3 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserLenient_State) -> ParserLenient_PStep<d>
    switch generated_4 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseA(s0) {
                case let ParserLenient_PStep.ParserLenient_Bad(committed, _):
                    ParserLenient_PStep.ParserLenient_Bad(committed, Unit.Unit)
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    switch parseB(s1) {
                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                        ParserLenient_pStepBadCommitting()
                    case let ParserLenient_PStep.ParserLenient_Good(b, s2):
                        switch parseC(s2) {
                        case ParserLenient_PStep.ParserLenient_Bad(_, _):
                            ParserLenient_pStepBadCommitting()
                        case let ParserLenient_PStep.ParserLenient_Good(c, s3):
                            switch parseD(s3) {
                            case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                ParserLenient_pStepBadCommitting()
                            case let ParserLenient_PStep.ParserLenient_Good(d, s4):
                                ParserLenient_PStep.ParserLenient_Good(func_(Generated_end_start.Record(end: Generated_column_row.Record(column: s4.col, row: s4.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(a)(b)(c)(d), s4)
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_map4WithStartLocation<a: Sendable, b: Sendable, c: Sendable, d: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_column_row<Double, Double>) -> (a) -> (b) -> (c) -> (d) -> value, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<b>, _ generated_3: ParserLenient_Parser<c>, _ generated_4: ParserLenient_Parser<d>) ->  ParserLenient_Parser<value> {
    let parseA: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserLenient_State) -> ParserLenient_PStep<b>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserLenient_State) -> ParserLenient_PStep<c>
    switch generated_3 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserLenient_State) -> ParserLenient_PStep<d>
    switch generated_4 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseA(s0) {
                case let ParserLenient_PStep.ParserLenient_Bad(committed, _):
                    ParserLenient_PStep.ParserLenient_Bad(committed, Unit.Unit)
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    switch parseB(s1) {
                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                        ParserLenient_pStepBadCommitting()
                    case let ParserLenient_PStep.ParserLenient_Good(b, s2):
                        switch parseC(s2) {
                        case ParserLenient_PStep.ParserLenient_Bad(_, _):
                            ParserLenient_pStepBadCommitting()
                        case let ParserLenient_PStep.ParserLenient_Good(c, s3):
                            switch parseD(s3) {
                            case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                ParserLenient_pStepBadCommitting()
                            case let ParserLenient_PStep.ParserLenient_Good(d, s4):
                                ParserLenient_PStep.ParserLenient_Good(func_(Generated_column_row.Record(column: s0.col, row: s0.row))(a)(b)(c)(d), s4)
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_map5<a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, value: Sendable>(_ func_: @Sendable @escaping (a) -> (b) -> (c) -> (d) -> (e) -> value, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<b>, _ generated_3: ParserLenient_Parser<c>, _ generated_4: ParserLenient_Parser<d>, _ generated_5: ParserLenient_Parser<e>) ->  ParserLenient_Parser<value> {
    let parseA: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserLenient_State) -> ParserLenient_PStep<b>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserLenient_State) -> ParserLenient_PStep<c>
    switch generated_3 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserLenient_State) -> ParserLenient_PStep<d>
    switch generated_4 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    let parseE: @Sendable (ParserLenient_State) -> ParserLenient_PStep<e>
    switch generated_5 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseE):
        parseE =
            generated_destructured_parseE
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseA(s0) {
                case let ParserLenient_PStep.ParserLenient_Bad(committed, _):
                    ParserLenient_PStep.ParserLenient_Bad(committed, Unit.Unit)
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    switch parseB(s1) {
                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                        ParserLenient_pStepBadCommitting()
                    case let ParserLenient_PStep.ParserLenient_Good(b, s2):
                        switch parseC(s2) {
                        case ParserLenient_PStep.ParserLenient_Bad(_, _):
                            ParserLenient_pStepBadCommitting()
                        case let ParserLenient_PStep.ParserLenient_Good(c, s3):
                            switch parseD(s3) {
                            case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                ParserLenient_pStepBadCommitting()
                            case let ParserLenient_PStep.ParserLenient_Good(d, s4):
                                switch parseE(s4) {
                                case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                    ParserLenient_pStepBadCommitting()
                                case let ParserLenient_PStep.ParserLenient_Good(e, s5):
                                    ParserLenient_PStep.ParserLenient_Good(func_(a)(b)(c)(d)(e), s5)
                                }
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_map5WithRange<a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (a) -> (b) -> (c) -> (d) -> (e) -> value, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<b>, _ generated_3: ParserLenient_Parser<c>, _ generated_4: ParserLenient_Parser<d>, _ generated_5: ParserLenient_Parser<e>) ->  ParserLenient_Parser<value> {
    let parseA: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserLenient_State) -> ParserLenient_PStep<b>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserLenient_State) -> ParserLenient_PStep<c>
    switch generated_3 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserLenient_State) -> ParserLenient_PStep<d>
    switch generated_4 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    let parseE: @Sendable (ParserLenient_State) -> ParserLenient_PStep<e>
    switch generated_5 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseE):
        parseE =
            generated_destructured_parseE
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseA(s0) {
                case let ParserLenient_PStep.ParserLenient_Bad(committed, _):
                    ParserLenient_PStep.ParserLenient_Bad(committed, Unit.Unit)
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    switch parseB(s1) {
                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                        ParserLenient_pStepBadCommitting()
                    case let ParserLenient_PStep.ParserLenient_Good(b, s2):
                        switch parseC(s2) {
                        case ParserLenient_PStep.ParserLenient_Bad(_, _):
                            ParserLenient_pStepBadCommitting()
                        case let ParserLenient_PStep.ParserLenient_Good(c, s3):
                            switch parseD(s3) {
                            case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                ParserLenient_pStepBadCommitting()
                            case let ParserLenient_PStep.ParserLenient_Good(d, s4):
                                switch parseE(s4) {
                                case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                    ParserLenient_pStepBadCommitting()
                                case let ParserLenient_PStep.ParserLenient_Good(e, s5):
                                    ParserLenient_PStep.ParserLenient_Good(func_(Generated_end_start.Record(end: Generated_column_row.Record(column: s5.col, row: s5.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(a)(b)(c)(d)(e), s5)
                                }
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_map5WithStartLocation<a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_column_row<Double, Double>) -> (a) -> (b) -> (c) -> (d) -> (e) -> value, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<b>, _ generated_3: ParserLenient_Parser<c>, _ generated_4: ParserLenient_Parser<d>, _ generated_5: ParserLenient_Parser<e>) ->  ParserLenient_Parser<value> {
    let parseA: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserLenient_State) -> ParserLenient_PStep<b>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserLenient_State) -> ParserLenient_PStep<c>
    switch generated_3 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserLenient_State) -> ParserLenient_PStep<d>
    switch generated_4 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    let parseE: @Sendable (ParserLenient_State) -> ParserLenient_PStep<e>
    switch generated_5 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseE):
        parseE =
            generated_destructured_parseE
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseA(s0) {
                case let ParserLenient_PStep.ParserLenient_Bad(committed, _):
                    ParserLenient_PStep.ParserLenient_Bad(committed, Unit.Unit)
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    switch parseB(s1) {
                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                        ParserLenient_pStepBadCommitting()
                    case let ParserLenient_PStep.ParserLenient_Good(b, s2):
                        switch parseC(s2) {
                        case ParserLenient_PStep.ParserLenient_Bad(_, _):
                            ParserLenient_pStepBadCommitting()
                        case let ParserLenient_PStep.ParserLenient_Good(c, s3):
                            switch parseD(s3) {
                            case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                ParserLenient_pStepBadCommitting()
                            case let ParserLenient_PStep.ParserLenient_Good(d, s4):
                                switch parseE(s4) {
                                case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                    ParserLenient_pStepBadCommitting()
                                case let ParserLenient_PStep.ParserLenient_Good(e, s5):
                                    ParserLenient_PStep.ParserLenient_Good(func_(Generated_column_row.Record(column: s0.col, row: s0.row))(a)(b)(c)(d)(e), s5)
                                }
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_map6<a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, f: Sendable, value: Sendable>(_ func_: @Sendable @escaping (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> value, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<b>, _ generated_3: ParserLenient_Parser<c>, _ generated_4: ParserLenient_Parser<d>, _ generated_5: ParserLenient_Parser<e>, _ generated_6: ParserLenient_Parser<f>) ->  ParserLenient_Parser<value> {
    let parseA: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserLenient_State) -> ParserLenient_PStep<b>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserLenient_State) -> ParserLenient_PStep<c>
    switch generated_3 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserLenient_State) -> ParserLenient_PStep<d>
    switch generated_4 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    let parseE: @Sendable (ParserLenient_State) -> ParserLenient_PStep<e>
    switch generated_5 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseE):
        parseE =
            generated_destructured_parseE
    }
    let parseF: @Sendable (ParserLenient_State) -> ParserLenient_PStep<f>
    switch generated_6 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseF):
        parseF =
            generated_destructured_parseF
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseA(s0) {
                case let ParserLenient_PStep.ParserLenient_Bad(committed, _):
                    ParserLenient_PStep.ParserLenient_Bad(committed, Unit.Unit)
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    switch parseB(s1) {
                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                        ParserLenient_pStepBadCommitting()
                    case let ParserLenient_PStep.ParserLenient_Good(b, s2):
                        switch parseC(s2) {
                        case ParserLenient_PStep.ParserLenient_Bad(_, _):
                            ParserLenient_pStepBadCommitting()
                        case let ParserLenient_PStep.ParserLenient_Good(c, s3):
                            switch parseD(s3) {
                            case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                ParserLenient_pStepBadCommitting()
                            case let ParserLenient_PStep.ParserLenient_Good(d, s4):
                                switch parseE(s4) {
                                case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                    ParserLenient_pStepBadCommitting()
                                case let ParserLenient_PStep.ParserLenient_Good(e, s5):
                                    switch parseF(s5) {
                                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                        ParserLenient_pStepBadCommitting()
                                    case let ParserLenient_PStep.ParserLenient_Good(f, s6):
                                        ParserLenient_PStep.ParserLenient_Good(func_(a)(b)(c)(d)(e)(f), s6)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_map6WithStartLocation<a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, f: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_column_row<Double, Double>) -> (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> value, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<b>, _ generated_3: ParserLenient_Parser<c>, _ generated_4: ParserLenient_Parser<d>, _ generated_5: ParserLenient_Parser<e>, _ generated_6: ParserLenient_Parser<f>) ->  ParserLenient_Parser<value> {
    let parseA: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserLenient_State) -> ParserLenient_PStep<b>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserLenient_State) -> ParserLenient_PStep<c>
    switch generated_3 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserLenient_State) -> ParserLenient_PStep<d>
    switch generated_4 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    let parseE: @Sendable (ParserLenient_State) -> ParserLenient_PStep<e>
    switch generated_5 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseE):
        parseE =
            generated_destructured_parseE
    }
    let parseF: @Sendable (ParserLenient_State) -> ParserLenient_PStep<f>
    switch generated_6 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseF):
        parseF =
            generated_destructured_parseF
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseA(s0) {
                case let ParserLenient_PStep.ParserLenient_Bad(committed, _):
                    ParserLenient_PStep.ParserLenient_Bad(committed, Unit.Unit)
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    switch parseB(s1) {
                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                        ParserLenient_pStepBadCommitting()
                    case let ParserLenient_PStep.ParserLenient_Good(b, s2):
                        switch parseC(s2) {
                        case ParserLenient_PStep.ParserLenient_Bad(_, _):
                            ParserLenient_pStepBadCommitting()
                        case let ParserLenient_PStep.ParserLenient_Good(c, s3):
                            switch parseD(s3) {
                            case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                ParserLenient_pStepBadCommitting()
                            case let ParserLenient_PStep.ParserLenient_Good(d, s4):
                                switch parseE(s4) {
                                case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                    ParserLenient_pStepBadCommitting()
                                case let ParserLenient_PStep.ParserLenient_Good(e, s5):
                                    switch parseF(s5) {
                                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                        ParserLenient_pStepBadCommitting()
                                    case let ParserLenient_PStep.ParserLenient_Good(f, s6):
                                        ParserLenient_PStep.ParserLenient_Good(func_(Generated_column_row.Record(column: s0.col, row: s0.row))(a)(b)(c)(d)(e)(f), s6)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_map7<a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, f: Sendable, g: Sendable, value: Sendable>(_ func_: @Sendable @escaping (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> (g) -> value, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<b>, _ generated_3: ParserLenient_Parser<c>, _ generated_4: ParserLenient_Parser<d>, _ generated_5: ParserLenient_Parser<e>, _ generated_6: ParserLenient_Parser<f>, _ generated_7: ParserLenient_Parser<g>) ->  ParserLenient_Parser<value> {
    let parseA: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserLenient_State) -> ParserLenient_PStep<b>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserLenient_State) -> ParserLenient_PStep<c>
    switch generated_3 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserLenient_State) -> ParserLenient_PStep<d>
    switch generated_4 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    let parseE: @Sendable (ParserLenient_State) -> ParserLenient_PStep<e>
    switch generated_5 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseE):
        parseE =
            generated_destructured_parseE
    }
    let parseF: @Sendable (ParserLenient_State) -> ParserLenient_PStep<f>
    switch generated_6 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseF):
        parseF =
            generated_destructured_parseF
    }
    let parseG: @Sendable (ParserLenient_State) -> ParserLenient_PStep<g>
    switch generated_7 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseG):
        parseG =
            generated_destructured_parseG
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseA(s0) {
                case let ParserLenient_PStep.ParserLenient_Bad(committed, _):
                    ParserLenient_PStep.ParserLenient_Bad(committed, Unit.Unit)
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    switch parseB(s1) {
                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                        ParserLenient_pStepBadCommitting()
                    case let ParserLenient_PStep.ParserLenient_Good(b, s2):
                        switch parseC(s2) {
                        case ParserLenient_PStep.ParserLenient_Bad(_, _):
                            ParserLenient_pStepBadCommitting()
                        case let ParserLenient_PStep.ParserLenient_Good(c, s3):
                            switch parseD(s3) {
                            case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                ParserLenient_pStepBadCommitting()
                            case let ParserLenient_PStep.ParserLenient_Good(d, s4):
                                switch parseE(s4) {
                                case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                    ParserLenient_pStepBadCommitting()
                                case let ParserLenient_PStep.ParserLenient_Good(e, s5):
                                    switch parseF(s5) {
                                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                        ParserLenient_pStepBadCommitting()
                                    case let ParserLenient_PStep.ParserLenient_Good(f, s6):
                                        switch parseG(s6) {
                                        case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                            ParserLenient_pStepBadCommitting()
                                        case let ParserLenient_PStep.ParserLenient_Good(g, s7):
                                            ParserLenient_PStep.ParserLenient_Good(func_(a)(b)(c)(d)(e)(f)(g), s7)
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_map7WithRange<a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, f: Sendable, g: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> (g) -> value, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<b>, _ generated_3: ParserLenient_Parser<c>, _ generated_4: ParserLenient_Parser<d>, _ generated_5: ParserLenient_Parser<e>, _ generated_6: ParserLenient_Parser<f>, _ generated_7: ParserLenient_Parser<g>) ->  ParserLenient_Parser<value> {
    let parseA: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserLenient_State) -> ParserLenient_PStep<b>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserLenient_State) -> ParserLenient_PStep<c>
    switch generated_3 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserLenient_State) -> ParserLenient_PStep<d>
    switch generated_4 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    let parseE: @Sendable (ParserLenient_State) -> ParserLenient_PStep<e>
    switch generated_5 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseE):
        parseE =
            generated_destructured_parseE
    }
    let parseF: @Sendable (ParserLenient_State) -> ParserLenient_PStep<f>
    switch generated_6 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseF):
        parseF =
            generated_destructured_parseF
    }
    let parseG: @Sendable (ParserLenient_State) -> ParserLenient_PStep<g>
    switch generated_7 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseG):
        parseG =
            generated_destructured_parseG
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseA(s0) {
                case let ParserLenient_PStep.ParserLenient_Bad(committed, _):
                    ParserLenient_PStep.ParserLenient_Bad(committed, Unit.Unit)
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    switch parseB(s1) {
                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                        ParserLenient_pStepBadCommitting()
                    case let ParserLenient_PStep.ParserLenient_Good(b, s2):
                        switch parseC(s2) {
                        case ParserLenient_PStep.ParserLenient_Bad(_, _):
                            ParserLenient_pStepBadCommitting()
                        case let ParserLenient_PStep.ParserLenient_Good(c, s3):
                            switch parseD(s3) {
                            case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                ParserLenient_pStepBadCommitting()
                            case let ParserLenient_PStep.ParserLenient_Good(d, s4):
                                switch parseE(s4) {
                                case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                    ParserLenient_pStepBadCommitting()
                                case let ParserLenient_PStep.ParserLenient_Good(e, s5):
                                    switch parseF(s5) {
                                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                        ParserLenient_pStepBadCommitting()
                                    case let ParserLenient_PStep.ParserLenient_Good(f, s6):
                                        switch parseG(s6) {
                                        case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                            ParserLenient_pStepBadCommitting()
                                        case let ParserLenient_PStep.ParserLenient_Good(g, s7):
                                            ParserLenient_PStep.ParserLenient_Good(func_(Generated_end_start.Record(end: Generated_column_row.Record(column: s7.col, row: s7.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(a)(b)(c)(d)(e)(f)(g), s7)
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_map8WithStartLocation<a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, f: Sendable, g: Sendable, h: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_column_row<Double, Double>) -> (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> (g) -> (h) -> value, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<b>, _ generated_3: ParserLenient_Parser<c>, _ generated_4: ParserLenient_Parser<d>, _ generated_5: ParserLenient_Parser<e>, _ generated_6: ParserLenient_Parser<f>, _ generated_7: ParserLenient_Parser<g>, _ generated_8: ParserLenient_Parser<h>) ->  ParserLenient_Parser<value> {
    let parseA: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserLenient_State) -> ParserLenient_PStep<b>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserLenient_State) -> ParserLenient_PStep<c>
    switch generated_3 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserLenient_State) -> ParserLenient_PStep<d>
    switch generated_4 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    let parseE: @Sendable (ParserLenient_State) -> ParserLenient_PStep<e>
    switch generated_5 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseE):
        parseE =
            generated_destructured_parseE
    }
    let parseF: @Sendable (ParserLenient_State) -> ParserLenient_PStep<f>
    switch generated_6 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseF):
        parseF =
            generated_destructured_parseF
    }
    let parseG: @Sendable (ParserLenient_State) -> ParserLenient_PStep<g>
    switch generated_7 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseG):
        parseG =
            generated_destructured_parseG
    }
    let parseH: @Sendable (ParserLenient_State) -> ParserLenient_PStep<h>
    switch generated_8 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseH):
        parseH =
            generated_destructured_parseH
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseA(s0) {
                case let ParserLenient_PStep.ParserLenient_Bad(committed, _):
                    ParserLenient_PStep.ParserLenient_Bad(committed, Unit.Unit)
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    switch parseB(s1) {
                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                        ParserLenient_pStepBadCommitting()
                    case let ParserLenient_PStep.ParserLenient_Good(b, s2):
                        switch parseC(s2) {
                        case ParserLenient_PStep.ParserLenient_Bad(_, _):
                            ParserLenient_pStepBadCommitting()
                        case let ParserLenient_PStep.ParserLenient_Good(c, s3):
                            switch parseD(s3) {
                            case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                ParserLenient_pStepBadCommitting()
                            case let ParserLenient_PStep.ParserLenient_Good(d, s4):
                                switch parseE(s4) {
                                case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                    ParserLenient_pStepBadCommitting()
                                case let ParserLenient_PStep.ParserLenient_Good(e, s5):
                                    switch parseF(s5) {
                                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                        ParserLenient_pStepBadCommitting()
                                    case let ParserLenient_PStep.ParserLenient_Good(f, s6):
                                        switch parseG(s6) {
                                        case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                            ParserLenient_pStepBadCommitting()
                                        case let ParserLenient_PStep.ParserLenient_Good(g, s7):
                                            switch parseH(s7) {
                                            case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                                ParserLenient_pStepBadCommitting()
                                            case let ParserLenient_PStep.ParserLenient_Good(h, s8):
                                                ParserLenient_PStep.ParserLenient_Good(func_(Generated_column_row.Record(column: s0.col, row: s0.row))(a)(b)(c)(d)(e)(f)(g)(h), s8)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_map9WithRange<a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, f: Sendable, g: Sendable, h: Sendable, i: Sendable, value: Sendable>(_ func_: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> (g) -> (h) -> (i) -> value, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<b>, _ generated_3: ParserLenient_Parser<c>, _ generated_4: ParserLenient_Parser<d>, _ generated_5: ParserLenient_Parser<e>, _ generated_6: ParserLenient_Parser<f>, _ generated_7: ParserLenient_Parser<g>, _ generated_8: ParserLenient_Parser<h>, _ generated_9: ParserLenient_Parser<i>) ->  ParserLenient_Parser<value> {
    let parseA: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    let parseB: @Sendable (ParserLenient_State) -> ParserLenient_PStep<b>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseB):
        parseB =
            generated_destructured_parseB
    }
    let parseC: @Sendable (ParserLenient_State) -> ParserLenient_PStep<c>
    switch generated_3 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseC):
        parseC =
            generated_destructured_parseC
    }
    let parseD: @Sendable (ParserLenient_State) -> ParserLenient_PStep<d>
    switch generated_4 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseD):
        parseD =
            generated_destructured_parseD
    }
    let parseE: @Sendable (ParserLenient_State) -> ParserLenient_PStep<e>
    switch generated_5 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseE):
        parseE =
            generated_destructured_parseE
    }
    let parseF: @Sendable (ParserLenient_State) -> ParserLenient_PStep<f>
    switch generated_6 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseF):
        parseF =
            generated_destructured_parseF
    }
    let parseG: @Sendable (ParserLenient_State) -> ParserLenient_PStep<g>
    switch generated_7 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseG):
        parseG =
            generated_destructured_parseG
    }
    let parseH: @Sendable (ParserLenient_State) -> ParserLenient_PStep<h>
    switch generated_8 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseH):
        parseH =
            generated_destructured_parseH
    }
    let parseI: @Sendable (ParserLenient_State) -> ParserLenient_PStep<i>
    switch generated_9 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseI):
        parseI =
            generated_destructured_parseI
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parseA(s0) {
                case let ParserLenient_PStep.ParserLenient_Bad(committed, _):
                    ParserLenient_PStep.ParserLenient_Bad(committed, Unit.Unit)
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    switch parseB(s1) {
                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                        ParserLenient_pStepBadCommitting()
                    case let ParserLenient_PStep.ParserLenient_Good(b, s2):
                        switch parseC(s2) {
                        case ParserLenient_PStep.ParserLenient_Bad(_, _):
                            ParserLenient_pStepBadCommitting()
                        case let ParserLenient_PStep.ParserLenient_Good(c, s3):
                            switch parseD(s3) {
                            case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                ParserLenient_pStepBadCommitting()
                            case let ParserLenient_PStep.ParserLenient_Good(d, s4):
                                switch parseE(s4) {
                                case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                    ParserLenient_pStepBadCommitting()
                                case let ParserLenient_PStep.ParserLenient_Good(e, s5):
                                    switch parseF(s5) {
                                    case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                        ParserLenient_pStepBadCommitting()
                                    case let ParserLenient_PStep.ParserLenient_Good(f, s6):
                                        switch parseG(s6) {
                                        case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                            ParserLenient_pStepBadCommitting()
                                        case let ParserLenient_PStep.ParserLenient_Good(g, s7):
                                            switch parseH(s7) {
                                            case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                                ParserLenient_pStepBadCommitting()
                                            case let ParserLenient_PStep.ParserLenient_Good(h, s8):
                                                switch parseI(s8) {
                                                case ParserLenient_PStep.ParserLenient_Bad(_, _):
                                                    ParserLenient_pStepBadCommitting()
                                                case let ParserLenient_PStep.ParserLenient_Good(i, s9):
                                                    ParserLenient_PStep.ParserLenient_Good(func_(Generated_end_start.Record(end: Generated_column_row.Record(column: s9.col, row: s9.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(a)(b)(c)(d)(e)(f)(g)(h)(i), s9)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_mapOrSucceed<a: Sendable, attempt: Sendable>(_ attemptToResult: @Sendable @escaping (attempt) -> a, _ generated_1: ParserLenient_Parser<attempt>, _ fallbackResult: a) ->  ParserLenient_Parser<a> {
    let attempt: @Sendable (ParserLenient_State) -> ParserLenient_PStep<attempt>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attempt):
        attempt =
            generated_destructured_attempt
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s: ParserLenient_State) in
                switch attempt(s) {
                case let ParserLenient_PStep.ParserLenient_Good(attemptResult, s1):
                    ParserLenient_PStep.ParserLenient_Good(attemptToResult(attemptResult), s1)
                case let ParserLenient_PStep.ParserLenient_Bad(firstCommitted, _):
                    if firstCommitted {
                        ParserLenient_pStepBadCommitting()
                    } else {
                        ParserLenient_PStep.ParserLenient_Good(fallbackResult, s)
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_mapWithRange<a: Sendable, b: Sendable>(_ combineStartAndResult: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (a) -> b, _ generated_1: ParserLenient_Parser<a>) ->  ParserLenient_Parser<b> {
    let parse: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parse):
        parse =
            generated_destructured_parse
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                switch parse(s0) {
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    ParserLenient_PStep.ParserLenient_Good(combineStartAndResult(Generated_end_start.Record(end: Generated_column_row.Record(column: s1.col, row: s1.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(a), s1)
                case let ParserLenient_PStep.ParserLenient_Bad(committed, _):
                    ParserLenient_PStep.ParserLenient_Bad(committed, Unit.Unit)
                }
            }
        )
}

@Sendable public static func ParserLenient_nestableMultiCommentMapWithRange<res: Sendable>(_ rangeContentToRes: @Sendable @escaping (ElmSyntaxRange_Range) -> (String) -> res, _ generated_1: Tuple<UnicodeScalar, String>, _ generated_2: Tuple<UnicodeScalar, String>) ->  ParserLenient_Parser<res> {
    let openChar: UnicodeScalar
    let openTail: String
    switch generated_1 {
    case let Tuple.Tuple(generated_destructured_openChar, generated_destructured_openTail):
        openChar =
            generated_destructured_openChar
        openTail =
            generated_destructured_openTail
    }
    let closeChar: UnicodeScalar
    let closeTail: String
    switch generated_2 {
    case let Tuple.Tuple(generated_destructured_closeChar, generated_destructured_closeTail):
        closeChar =
            generated_destructured_closeChar
        closeTail =
            generated_destructured_closeTail
    }
    let open_: String =
        String_cons(openChar, openTail)
    @Sendable func generated_let_declarationResult_isNotRelevant(_ char: UnicodeScalar) ->  Bool {
        Basics_and(Basics_neq(char, openChar), Basics_and(Basics_neq(char, closeChar), Basics_not(CharExtra_isUtf16Surrogate(char))))
    }
    let generated_let_declarationResult_close: String =
        String_cons(closeChar, closeTail)
    return
        ParserLenient_map2WithRange(
            { (range: ElmSyntaxRange_Range) in { (afterOpen: String) in { (contentAfterAfterOpen: String) in rangeContentToRes(range)(String_append(open_, String_append(afterOpen, String_append(contentAfterAfterOpen, generated_let_declarationResult_close)))) } } },
            ParserLenient_symbolFollowedBy(open_, ParserLenient_while(generated_let_declarationResult_isNotRelevant)),
            ParserLenient_oneOf2(
                ParserLenient_symbol(generated_let_declarationResult_close, ""),
                ParserLenient_loop(
                    ParserLenient_tupleStringEmpty1,
                    ParserLenient_oneOf3(ParserLenient_symbol(generated_let_declarationResult_close, Tuple.Tuple(generated_let_declarationResult_close, -1.0)), ParserLenient_symbol(open_, Tuple.Tuple(open_, 1.0)), ParserLenient_anyCharFollowedByWhileMap({ (consumed: String) in Tuple.Tuple(consumed, 0.0) }, generated_let_declarationResult_isNotRelevant)),
                    { (generated_argument2_argument1_argument2_letResult_declarationResult_0: Tuple<String, Double>) in
                        { (generated_argument2_argument1_argument2_letResult_declarationResult_1: Tuple<String, Double>) in
                            let toAppend: String
                            let nestingChange: Double
                            switch generated_argument2_argument1_argument2_letResult_declarationResult_0 {
                            case let Tuple.Tuple(generated_destructured_toAppend, generated_destructured_nestingChange):
                                toAppend =
                                    generated_destructured_toAppend
                                nestingChange =
                                    generated_destructured_nestingChange
                            }
                            let soFarContent: String
                            let soFarNesting: Double
                            switch generated_argument2_argument1_argument2_letResult_declarationResult_1 {
                            case let Tuple.Tuple(generated_destructured_soFarContent, generated_destructured_soFarNesting):
                                soFarContent =
                                    generated_destructured_soFarContent
                                soFarNesting =
                                    generated_destructured_soFarNesting
                            }
                            let generated_let_result_argument2_argument1_argument2_letResult_declarationResult_newNesting: Double =
                                Basics_add(Basics_add(soFarNesting, nestingChange), 0.0)
                            return
                                if Basics_eq(generated_let_result_argument2_argument1_argument2_letResult_declarationResult_newNesting, 0.0) {
                                    ParserLenient_Step.ParserLenient_Done(soFarContent)
                                } else {
                                    ParserLenient_Step.ParserLenient_Loop(Tuple.Tuple(String_append(soFarContent, toAppend), generated_let_result_argument2_argument1_argument2_letResult_declarationResult_newNesting))
                                }
                        }
                    }
                )
            )
        )
}

@Sendable public static func ParserLenient_offsetSourceAndThen<a: Sendable>(_ callback: @Sendable @escaping (Double) -> (String) -> ParserLenient_Parser<a>) ->  ParserLenient_Parser<a> {
    ParserLenient_Parser.ParserLenient_Parser(
        { (s: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_parse: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
            switch callback(s.offset)(s.src) {
            case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parse):
                generated_let_result_argument0_declarationResult_parse =
                    generated_destructured_parse
            }
            return generated_let_result_argument0_declarationResult_parse(s)
        }
    )
}

@Sendable public static func ParserLenient_offsetSourceAndThenOrSucceed<a: Sendable>(_ callback: @Sendable @escaping (Double) -> (String) -> Maybe_Maybe<ParserLenient_Parser<a>>, _ fallback: a) ->  ParserLenient_Parser<a> {
    ParserLenient_Parser.ParserLenient_Parser(
        { (s: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
            switch callback(s.offset)(s.src) {
            case Maybe_Maybe.Maybe_Nothing:
                ParserLenient_PStep.ParserLenient_Good(fallback, s)
            case let Maybe_Maybe.Maybe_Just(ParserLenient_Parser.ParserLenient_Parser(parse)):
                parse(s)
            }
        }
    )
}

@Sendable public static func ParserLenient_oneOf2<a: Sendable>(_ generated_0: ParserLenient_Parser<a>, _ generated_1: ParserLenient_Parser<a>) ->  ParserLenient_Parser<a> {
    let attemptFirst: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_0 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attemptFirst):
        attemptFirst =
            generated_destructured_attemptFirst
    }
    let attemptSecond: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attemptSecond):
        attemptSecond =
            generated_destructured_attemptSecond
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s: ParserLenient_State) in
                let generated_localReturnResult_result_argument0_declarationResult: ParserLenient_PStep<a>
                switch attemptFirst(s) {
                case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                    let firstGood: ParserLenient_PStep<a> =
                        ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                    generated_localReturnResult_result_argument0_declarationResult =
                        firstGood
                case let ParserLenient_PStep.ParserLenient_Bad(firstCommitted, _):
                    let generated_localReturnResult_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                    if firstCommitted {
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            ParserLenient_pStepBadCommitting()
                    } else {
                        let generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                        switch attemptSecond(s) {
                        case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                            let secondGood: ParserLenient_PStep<a> =
                                ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                secondGood
                        case let ParserLenient_PStep.ParserLenient_Bad(secondCommitted, _):
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                if secondCommitted {
                                    ParserLenient_pStepBadCommitting()
                                } else {
                                    ParserLenient_pStepBadBacktracking()
                                }
                        }
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult
                    }
                    generated_localReturnResult_result_argument0_declarationResult =
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult
                }
                return generated_localReturnResult_result_argument0_declarationResult
            }
        )
}

@Sendable public static func ParserLenient_oneOf2Map<choice: Sendable, first: Sendable, second: Sendable>(_ firstToChoice: @Sendable @escaping (first) -> choice, _ generated_1: ParserLenient_Parser<first>, _ secondToChoice: @Sendable @escaping (second) -> choice, _ generated_3: ParserLenient_Parser<second>) ->  ParserLenient_Parser<choice> {
    let attemptFirst: @Sendable (ParserLenient_State) -> ParserLenient_PStep<first>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attemptFirst):
        attemptFirst =
            generated_destructured_attemptFirst
    }
    let attemptSecond: @Sendable (ParserLenient_State) -> ParserLenient_PStep<second>
    switch generated_3 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attemptSecond):
        attemptSecond =
            generated_destructured_attemptSecond
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s: ParserLenient_State) in
                switch attemptFirst(s) {
                case let ParserLenient_PStep.ParserLenient_Good(first, s1):
                    ParserLenient_PStep.ParserLenient_Good(firstToChoice(first), s1)
                case let ParserLenient_PStep.ParserLenient_Bad(firstCommitted, _):
                    if firstCommitted {
                        ParserLenient_pStepBadCommitting()
                    } else {
                        switch attemptSecond(s) {
                        case let ParserLenient_PStep.ParserLenient_Good(second, s1):
                            ParserLenient_PStep.ParserLenient_Good(secondToChoice(second), s1)
                        case let ParserLenient_PStep.ParserLenient_Bad(secondCommitted, _):
                            if secondCommitted {
                                ParserLenient_pStepBadCommitting()
                            } else {
                                ParserLenient_pStepBadBacktracking()
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_oneOf2MapWithStartRowColumnAndEndRowColumn<choice: Sendable, first: Sendable, second: Sendable>(_ firstToChoice: @Sendable @escaping (Double) -> (Double) -> (first) -> (Double) -> (Double) -> choice, _ generated_1: ParserLenient_Parser<first>, _ secondToChoice: @Sendable @escaping (Double) -> (Double) -> (second) -> (Double) -> (Double) -> choice, _ generated_3: ParserLenient_Parser<second>) ->  ParserLenient_Parser<choice> {
    let attemptFirst: @Sendable (ParserLenient_State) -> ParserLenient_PStep<first>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attemptFirst):
        attemptFirst =
            generated_destructured_attemptFirst
    }
    let attemptSecond: @Sendable (ParserLenient_State) -> ParserLenient_PStep<second>
    switch generated_3 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attemptSecond):
        attemptSecond =
            generated_destructured_attemptSecond
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s: ParserLenient_State) in
                switch attemptFirst(s) {
                case let ParserLenient_PStep.ParserLenient_Good(first, s1):
                    ParserLenient_PStep.ParserLenient_Good(firstToChoice(s.row)(s.col)(first)(s1.row)(s1.col), s1)
                case let ParserLenient_PStep.ParserLenient_Bad(firstCommitted, _):
                    if firstCommitted {
                        ParserLenient_pStepBadCommitting()
                    } else {
                        switch attemptSecond(s) {
                        case let ParserLenient_PStep.ParserLenient_Good(second, s1):
                            ParserLenient_PStep.ParserLenient_Good(secondToChoice(s.row)(s.col)(second)(s1.row)(s1.col), s1)
                        case let ParserLenient_PStep.ParserLenient_Bad(secondCommitted, _):
                            if secondCommitted {
                                ParserLenient_pStepBadCommitting()
                            } else {
                                ParserLenient_pStepBadBacktracking()
                            }
                        }
                    }
                }
            }
        )
}

@Sendable public static func ParserLenient_oneOf2OrSucceed<a: Sendable>(_ generated_0: ParserLenient_Parser<a>, _ generated_1: ParserLenient_Parser<a>, _ fallbackResult: a) ->  ParserLenient_Parser<a> {
    let attemptFirst: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_0 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attemptFirst):
        attemptFirst =
            generated_destructured_attemptFirst
    }
    let attemptSecond: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attemptSecond):
        attemptSecond =
            generated_destructured_attemptSecond
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s: ParserLenient_State) in
                let generated_localReturnResult_result_argument0_declarationResult: ParserLenient_PStep<a>
                switch attemptFirst(s) {
                case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                    let firstGood: ParserLenient_PStep<a> =
                        ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                    generated_localReturnResult_result_argument0_declarationResult =
                        firstGood
                case let ParserLenient_PStep.ParserLenient_Bad(firstCommitted, _):
                    let generated_localReturnResult_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                    if firstCommitted {
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            ParserLenient_pStepBadCommitting()
                    } else {
                        let generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                        switch attemptSecond(s) {
                        case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                            let secondGood: ParserLenient_PStep<a> =
                                ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                secondGood
                        case let ParserLenient_PStep.ParserLenient_Bad(secondCommitted, _):
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                if secondCommitted {
                                    ParserLenient_pStepBadCommitting()
                                } else {
                                    ParserLenient_PStep.ParserLenient_Good(fallbackResult, s)
                                }
                        }
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult
                    }
                    generated_localReturnResult_result_argument0_declarationResult =
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult
                }
                return generated_localReturnResult_result_argument0_declarationResult
            }
        )
}

@Sendable public static func ParserLenient_oneOf3<a: Sendable>(_ generated_0: ParserLenient_Parser<a>, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<a>) ->  ParserLenient_Parser<a> {
    let attemptFirst: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_0 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attemptFirst):
        attemptFirst =
            generated_destructured_attemptFirst
    }
    let attemptSecond: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attemptSecond):
        attemptSecond =
            generated_destructured_attemptSecond
    }
    let attemptThird: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attemptThird):
        attemptThird =
            generated_destructured_attemptThird
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s: ParserLenient_State) in
                let generated_localReturnResult_result_argument0_declarationResult: ParserLenient_PStep<a>
                switch attemptFirst(s) {
                case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                    let firstGood: ParserLenient_PStep<a> =
                        ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                    generated_localReturnResult_result_argument0_declarationResult =
                        firstGood
                case let ParserLenient_PStep.ParserLenient_Bad(firstCommitted, _):
                    let generated_localReturnResult_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                    if firstCommitted {
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            ParserLenient_pStepBadCommitting()
                    } else {
                        let generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                        switch attemptSecond(s) {
                        case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                            let secondGood: ParserLenient_PStep<a> =
                                ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                secondGood
                        case let ParserLenient_PStep.ParserLenient_Bad(secondCommitted, _):
                            let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                            if secondCommitted {
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                    ParserLenient_pStepBadCommitting()
                            } else {
                                let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                switch attemptThird(s) {
                                case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                                    let thirdGood: ParserLenient_PStep<a> =
                                        ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                        thirdGood
                                case let ParserLenient_PStep.ParserLenient_Bad(thirdCommitted, _):
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                        if thirdCommitted {
                                            ParserLenient_pStepBadCommitting()
                                        } else {
                                            ParserLenient_pStepBadBacktracking()
                                        }
                                }
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                            }
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                        }
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult
                    }
                    generated_localReturnResult_result_argument0_declarationResult =
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult
                }
                return generated_localReturnResult_result_argument0_declarationResult
            }
        )
}

@Sendable public static func ParserLenient_oneOf4<a: Sendable>(_ generated_0: ParserLenient_Parser<a>, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<a>, _ generated_3: ParserLenient_Parser<a>) ->  ParserLenient_Parser<a> {
    let attemptFirst: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_0 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attemptFirst):
        attemptFirst =
            generated_destructured_attemptFirst
    }
    let attemptSecond: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attemptSecond):
        attemptSecond =
            generated_destructured_attemptSecond
    }
    let attemptThird: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attemptThird):
        attemptThird =
            generated_destructured_attemptThird
    }
    let attemptFourth: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_3 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attemptFourth):
        attemptFourth =
            generated_destructured_attemptFourth
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s: ParserLenient_State) in
                let generated_localReturnResult_result_argument0_declarationResult: ParserLenient_PStep<a>
                switch attemptFirst(s) {
                case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                    let firstGood: ParserLenient_PStep<a> =
                        ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                    generated_localReturnResult_result_argument0_declarationResult =
                        firstGood
                case let ParserLenient_PStep.ParserLenient_Bad(firstCommitted, _):
                    let generated_localReturnResult_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                    if firstCommitted {
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            ParserLenient_pStepBadCommitting()
                    } else {
                        let generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                        switch attemptSecond(s) {
                        case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                            let secondGood: ParserLenient_PStep<a> =
                                ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                secondGood
                        case let ParserLenient_PStep.ParserLenient_Bad(secondCommitted, _):
                            let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                            if secondCommitted {
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                    ParserLenient_pStepBadCommitting()
                            } else {
                                let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                switch attemptThird(s) {
                                case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                                    let thirdGood: ParserLenient_PStep<a> =
                                        ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                        thirdGood
                                case let ParserLenient_PStep.ParserLenient_Bad(thirdCommitted, _):
                                    let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                    if thirdCommitted {
                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                            ParserLenient_pStepBadCommitting()
                                    } else {
                                        let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                        switch attemptFourth(s) {
                                        case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                                            let fourthGood: ParserLenient_PStep<a> =
                                                ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                fourthGood
                                        case let ParserLenient_PStep.ParserLenient_Bad(fourthCommitted, _):
                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                if fourthCommitted {
                                                    ParserLenient_pStepBadCommitting()
                                                } else {
                                                    ParserLenient_pStepBadBacktracking()
                                                }
                                        }
                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                    }
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                }
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                            }
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                        }
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult
                    }
                    generated_localReturnResult_result_argument0_declarationResult =
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult
                }
                return generated_localReturnResult_result_argument0_declarationResult
            }
        )
}

@Sendable public static func ParserLenient_oneOf5<a: Sendable>(_ generated_0: ParserLenient_Parser<a>, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<a>, _ generated_3: ParserLenient_Parser<a>, _ generated_4: ParserLenient_Parser<a>) ->  ParserLenient_Parser<a> {
    let attemptFirst: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_0 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attemptFirst):
        attemptFirst =
            generated_destructured_attemptFirst
    }
    let attemptSecond: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attemptSecond):
        attemptSecond =
            generated_destructured_attemptSecond
    }
    let attemptThird: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attemptThird):
        attemptThird =
            generated_destructured_attemptThird
    }
    let attemptFourth: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_3 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attemptFourth):
        attemptFourth =
            generated_destructured_attemptFourth
    }
    let attemptFifth: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_4 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attemptFifth):
        attemptFifth =
            generated_destructured_attemptFifth
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s: ParserLenient_State) in
                let generated_localReturnResult_result_argument0_declarationResult: ParserLenient_PStep<a>
                switch attemptFirst(s) {
                case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                    let firstGood: ParserLenient_PStep<a> =
                        ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                    generated_localReturnResult_result_argument0_declarationResult =
                        firstGood
                case let ParserLenient_PStep.ParserLenient_Bad(firstCommitted, _):
                    let generated_localReturnResult_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                    if firstCommitted {
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            ParserLenient_pStepBadCommitting()
                    } else {
                        let generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                        switch attemptSecond(s) {
                        case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                            let secondGood: ParserLenient_PStep<a> =
                                ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                secondGood
                        case let ParserLenient_PStep.ParserLenient_Bad(secondCommitted, _):
                            let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                            if secondCommitted {
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                    ParserLenient_pStepBadCommitting()
                            } else {
                                let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                switch attemptThird(s) {
                                case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                                    let thirdGood: ParserLenient_PStep<a> =
                                        ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                        thirdGood
                                case let ParserLenient_PStep.ParserLenient_Bad(thirdCommitted, _):
                                    let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                    if thirdCommitted {
                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                            ParserLenient_pStepBadCommitting()
                                    } else {
                                        let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                        switch attemptFourth(s) {
                                        case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                                            let fourthGood: ParserLenient_PStep<a> =
                                                ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                fourthGood
                                        case let ParserLenient_PStep.ParserLenient_Bad(fourthCommitted, _):
                                            let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                            if fourthCommitted {
                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                    ParserLenient_pStepBadCommitting()
                                            } else {
                                                let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                                switch attemptFifth(s) {
                                                case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                                                    let fifthGood: ParserLenient_PStep<a> =
                                                        ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                        fifthGood
                                                case let ParserLenient_PStep.ParserLenient_Bad(generated_0, _):
                                                    let fifthBad: ParserLenient_PStep<a> =
                                                        ParserLenient_PStep.ParserLenient_Bad(generated_0, Unit.Unit)
                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                        fifthBad
                                                }
                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                            }
                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                        }
                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                    }
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                }
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                            }
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                        }
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult
                    }
                    generated_localReturnResult_result_argument0_declarationResult =
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult
                }
                return generated_localReturnResult_result_argument0_declarationResult
            }
        )
}

@Sendable public static func ParserLenient_oneOf7<a: Sendable>(_ generated_0: ParserLenient_Parser<a>, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<a>, _ generated_3: ParserLenient_Parser<a>, _ generated_4: ParserLenient_Parser<a>, _ generated_5: ParserLenient_Parser<a>, _ generated_6: ParserLenient_Parser<a>) ->  ParserLenient_Parser<a> {
    let attempt0: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_0 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attempt0):
        attempt0 =
            generated_destructured_attempt0
    }
    let attempt1: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attempt1):
        attempt1 =
            generated_destructured_attempt1
    }
    let attempt2: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attempt2):
        attempt2 =
            generated_destructured_attempt2
    }
    let attempt3: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_3 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attempt3):
        attempt3 =
            generated_destructured_attempt3
    }
    let attempt4: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_4 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attempt4):
        attempt4 =
            generated_destructured_attempt4
    }
    let attempt5: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_5 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attempt5):
        attempt5 =
            generated_destructured_attempt5
    }
    let attempt6: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_6 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attempt6):
        attempt6 =
            generated_destructured_attempt6
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s: ParserLenient_State) in
                let generated_localReturnResult_result_argument0_declarationResult: ParserLenient_PStep<a>
                switch attempt0(s) {
                case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                    let good: ParserLenient_PStep<a> =
                        ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                    generated_localReturnResult_result_argument0_declarationResult =
                        good
                case let ParserLenient_PStep.ParserLenient_Bad(committed0, _):
                    let bad0: ParserLenient_PStep<a> =
                        ParserLenient_PStep.ParserLenient_Bad(committed0, Unit.Unit)
                    let generated_localReturnResult_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                    if committed0 {
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            bad0
                    } else {
                        let generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                        switch attempt1(s) {
                        case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                            let good: ParserLenient_PStep<a> =
                                ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                good
                        case let ParserLenient_PStep.ParserLenient_Bad(committed1, _):
                            let bad1: ParserLenient_PStep<a> =
                                ParserLenient_PStep.ParserLenient_Bad(committed1, Unit.Unit)
                            let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                            if committed1 {
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                    bad1
                            } else {
                                let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                switch attempt2(s) {
                                case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                                    let good: ParserLenient_PStep<a> =
                                        ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                        good
                                case let ParserLenient_PStep.ParserLenient_Bad(committed2, _):
                                    let bad2: ParserLenient_PStep<a> =
                                        ParserLenient_PStep.ParserLenient_Bad(committed2, Unit.Unit)
                                    let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                    if committed2 {
                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                            bad2
                                    } else {
                                        let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                        switch attempt3(s) {
                                        case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                                            let good: ParserLenient_PStep<a> =
                                                ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                good
                                        case let ParserLenient_PStep.ParserLenient_Bad(committed3, _):
                                            let bad3: ParserLenient_PStep<a> =
                                                ParserLenient_PStep.ParserLenient_Bad(committed3, Unit.Unit)
                                            let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                            if committed3 {
                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                    bad3
                                            } else {
                                                let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                                switch attempt4(s) {
                                                case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                                                    let good: ParserLenient_PStep<a> =
                                                        ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                        good
                                                case let ParserLenient_PStep.ParserLenient_Bad(committed4, _):
                                                    let bad4: ParserLenient_PStep<a> =
                                                        ParserLenient_PStep.ParserLenient_Bad(committed4, Unit.Unit)
                                                    let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                                    if committed4 {
                                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                            bad4
                                                    } else {
                                                        let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                                        switch attempt5(s) {
                                                        case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                                                            let good: ParserLenient_PStep<a> =
                                                                ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                good
                                                        case let ParserLenient_PStep.ParserLenient_Bad(committed5, _):
                                                            let bad5: ParserLenient_PStep<a> =
                                                                ParserLenient_PStep.ParserLenient_Bad(committed5, Unit.Unit)
                                                            let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                                            if committed5 {
                                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                    bad5
                                                            } else {
                                                                let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                                                switch attempt6(s) {
                                                                case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                                                                    let good: ParserLenient_PStep<a> =
                                                                        ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                        good
                                                                case let ParserLenient_PStep.ParserLenient_Bad(committed6, _):
                                                                    let bad6: ParserLenient_PStep<a> =
                                                                        ParserLenient_PStep.ParserLenient_Bad(committed6, Unit.Unit)
                                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                        if committed6 {
                                                                            bad6
                                                                        } else {
                                                                            ParserLenient_pStepBadBacktracking()
                                                                        }
                                                                }
                                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                                            }
                                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                                        }
                                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                                    }
                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                                }
                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                            }
                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                        }
                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                    }
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                }
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                            }
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                        }
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult
                    }
                    generated_localReturnResult_result_argument0_declarationResult =
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult
                }
                return generated_localReturnResult_result_argument0_declarationResult
            }
        )
}

@Sendable public static func ParserLenient_oneOf9<a: Sendable>(_ generated_0: ParserLenient_Parser<a>, _ generated_1: ParserLenient_Parser<a>, _ generated_2: ParserLenient_Parser<a>, _ generated_3: ParserLenient_Parser<a>, _ generated_4: ParserLenient_Parser<a>, _ generated_5: ParserLenient_Parser<a>, _ generated_6: ParserLenient_Parser<a>, _ generated_7: ParserLenient_Parser<a>, _ generated_8: ParserLenient_Parser<a>) ->  ParserLenient_Parser<a> {
    let attempt0: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_0 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attempt0):
        attempt0 =
            generated_destructured_attempt0
    }
    let attempt1: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attempt1):
        attempt1 =
            generated_destructured_attempt1
    }
    let attempt2: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_2 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attempt2):
        attempt2 =
            generated_destructured_attempt2
    }
    let attempt3: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_3 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attempt3):
        attempt3 =
            generated_destructured_attempt3
    }
    let attempt4: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_4 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attempt4):
        attempt4 =
            generated_destructured_attempt4
    }
    let attempt5: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_5 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attempt5):
        attempt5 =
            generated_destructured_attempt5
    }
    let attempt6: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_6 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attempt6):
        attempt6 =
            generated_destructured_attempt6
    }
    let attempt7: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_7 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attempt7):
        attempt7 =
            generated_destructured_attempt7
    }
    let attempt8: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_8 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attempt8):
        attempt8 =
            generated_destructured_attempt8
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s: ParserLenient_State) in
                let generated_localReturnResult_result_argument0_declarationResult: ParserLenient_PStep<a>
                switch attempt0(s) {
                case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                    let good: ParserLenient_PStep<a> =
                        ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                    generated_localReturnResult_result_argument0_declarationResult =
                        good
                case let ParserLenient_PStep.ParserLenient_Bad(committed0, _):
                    let bad0: ParserLenient_PStep<a> =
                        ParserLenient_PStep.ParserLenient_Bad(committed0, Unit.Unit)
                    let generated_localReturnResult_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                    if committed0 {
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            bad0
                    } else {
                        let generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                        switch attempt1(s) {
                        case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                            let good: ParserLenient_PStep<a> =
                                ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                good
                        case let ParserLenient_PStep.ParserLenient_Bad(committed1, _):
                            let bad1: ParserLenient_PStep<a> =
                                ParserLenient_PStep.ParserLenient_Bad(committed1, Unit.Unit)
                            let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                            if committed1 {
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                    bad1
                            } else {
                                let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                switch attempt2(s) {
                                case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                                    let good: ParserLenient_PStep<a> =
                                        ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                        good
                                case let ParserLenient_PStep.ParserLenient_Bad(committed2, _):
                                    let bad2: ParserLenient_PStep<a> =
                                        ParserLenient_PStep.ParserLenient_Bad(committed2, Unit.Unit)
                                    let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                    if committed2 {
                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                            bad2
                                    } else {
                                        let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                        switch attempt3(s) {
                                        case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                                            let good: ParserLenient_PStep<a> =
                                                ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                good
                                        case let ParserLenient_PStep.ParserLenient_Bad(committed3, _):
                                            let bad3: ParserLenient_PStep<a> =
                                                ParserLenient_PStep.ParserLenient_Bad(committed3, Unit.Unit)
                                            let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                            if committed3 {
                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                    bad3
                                            } else {
                                                let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                                switch attempt4(s) {
                                                case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                                                    let good: ParserLenient_PStep<a> =
                                                        ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                        good
                                                case let ParserLenient_PStep.ParserLenient_Bad(committed4, _):
                                                    let bad4: ParserLenient_PStep<a> =
                                                        ParserLenient_PStep.ParserLenient_Bad(committed4, Unit.Unit)
                                                    let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                                    if committed4 {
                                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                            bad4
                                                    } else {
                                                        let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                                        switch attempt5(s) {
                                                        case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                                                            let good: ParserLenient_PStep<a> =
                                                                ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                good
                                                        case let ParserLenient_PStep.ParserLenient_Bad(committed5, _):
                                                            let bad5: ParserLenient_PStep<a> =
                                                                ParserLenient_PStep.ParserLenient_Bad(committed5, Unit.Unit)
                                                            let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                                            if committed5 {
                                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                    bad5
                                                            } else {
                                                                let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                                                switch attempt6(s) {
                                                                case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                                                                    let good: ParserLenient_PStep<a> =
                                                                        ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                        good
                                                                case let ParserLenient_PStep.ParserLenient_Bad(committed6, _):
                                                                    let bad6: ParserLenient_PStep<a> =
                                                                        ParserLenient_PStep.ParserLenient_Bad(committed6, Unit.Unit)
                                                                    let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                                                    if committed6 {
                                                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                            bad6
                                                                    } else {
                                                                        let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                                                        switch attempt7(s) {
                                                                        case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                                                                            let good: ParserLenient_PStep<a> =
                                                                                ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                                                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                                good
                                                                        case let ParserLenient_PStep.ParserLenient_Bad(committed7, _):
                                                                            let bad7: ParserLenient_PStep<a> =
                                                                                ParserLenient_PStep.ParserLenient_Bad(committed7, Unit.Unit)
                                                                            let generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                                                            if committed7 {
                                                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                                    bad7
                                                                            } else {
                                                                                let generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult: ParserLenient_PStep<a>
                                                                                switch attempt8(s) {
                                                                                case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                                                                                    let good: ParserLenient_PStep<a> =
                                                                                        ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                                                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                                        good
                                                                                case let ParserLenient_PStep.ParserLenient_Bad(committed8, _):
                                                                                    let bad8: ParserLenient_PStep<a> =
                                                                                        ParserLenient_PStep.ParserLenient_Bad(committed8, Unit.Unit)
                                                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                                        if committed8 {
                                                                                            bad8
                                                                                        } else {
                                                                                            ParserLenient_pStepBadBacktracking()
                                                                                        }
                                                                                }
                                                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                                                            }
                                                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                                                        }
                                                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                                                    }
                                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                                                }
                                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                                            }
                                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                                        }
                                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                                    }
                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                                }
                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                            }
                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                        }
                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                            generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                    }
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                        generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                                }
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult =
                                    generated_localReturnResult_onFalse_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                            }
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult =
                                generated_localReturnResult_caseResult_case1_onFalse_caseResult_case1_result_argument0_declarationResult
                        }
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult =
                            generated_localReturnResult_onFalse_caseResult_case1_result_argument0_declarationResult
                    }
                    generated_localReturnResult_result_argument0_declarationResult =
                        generated_localReturnResult_caseResult_case1_result_argument0_declarationResult
                }
                return generated_localReturnResult_result_argument0_declarationResult
            }
        )
}

@Sendable public static func ParserLenient_orSucceed<a: Sendable>(_ generated_0: ParserLenient_Parser<a>, _ fallbackResult: a) ->  ParserLenient_Parser<a> {
    let attempt: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_0 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_attempt):
        attempt =
            generated_destructured_attempt
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s: ParserLenient_State) in
                let generated_localReturnResult_result_argument0_declarationResult: ParserLenient_PStep<a>
                switch attempt(s) {
                case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
                    let firstGood: ParserLenient_PStep<a> =
                        ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
                    generated_localReturnResult_result_argument0_declarationResult =
                        firstGood
                case let ParserLenient_PStep.ParserLenient_Bad(firstCommitted, _):
                    generated_localReturnResult_result_argument0_declarationResult =
                        if firstCommitted {
                            ParserLenient_pStepBadCommitting()
                        } else {
                            ParserLenient_PStep.ParserLenient_Good(fallbackResult, s)
                        }
                }
                return generated_localReturnResult_result_argument0_declarationResult
            }
        )
}

@Sendable public static func ParserLenient_pStepBadBacktracking<a__: Sendable>() ->  ParserLenient_PStep<a__> {
    ParserLenient_PStep.ParserLenient_Bad(false, Unit.Unit)
}

@Sendable public static func ParserLenient_pStepBadCommitting<a__: Sendable>() ->  ParserLenient_PStep<a__> {
    ParserLenient_PStep.ParserLenient_Bad(true, Unit.Unit)
}

@Sendable public static func ParserLenient_pStepCommit<a: Sendable>(_ pStep: ParserLenient_PStep<a>) ->  ParserLenient_PStep<a> {
    let generated_localReturnResult_declarationResult: ParserLenient_PStep<a>
    switch pStep {
    case let ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1):
        let good: ParserLenient_PStep<a> =
            ParserLenient_PStep.ParserLenient_Good(generated_0, generated_1)
        generated_localReturnResult_declarationResult =
            good
    case ParserLenient_PStep.ParserLenient_Bad(_, _):
        generated_localReturnResult_declarationResult =
            ParserLenient_pStepBadCommitting()
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ParserLenient_problem<a__: Sendable>() ->  ParserLenient_Parser<a__> {
    ParserLenient_Parser.ParserLenient_Parser(
        { (generated_argument0_0: ParserLenient_State) in
            let (_) =
                generated_argument0_0
            return ParserLenient_pStepBadBacktracking()
        }
    )
}

@Sendable public static func ParserLenient_run<a: Sendable>(_ generated_0: ParserLenient_Parser<a>, _ src: String) ->  Maybe_Maybe<a> {
    let parse: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_0 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parse):
        parse =
            generated_destructured_parse
    }
    return
        switch parse(Generated_col_indent_offset_row_src.Record(col: 1.0, indent: List_List.List_Empty, offset: 0.0, row: 1.0, src: src)) {
        case let ParserLenient_PStep.ParserLenient_Good(value, finalState):
            if Basics_eq(Basics_sub(finalState.offset, String_length(finalState.src)), 0.0) {
                Maybe_Maybe.Maybe_Just(value)
            } else {
                Maybe_Maybe.Maybe_Nothing
            }
        case ParserLenient_PStep.ParserLenient_Bad(_, _):
            Maybe_Maybe.Maybe_Nothing
        }
}

@Sendable public static func ParserLenient_skip0OrMoreDigits0To9(_ offset: Double, _ src: String) ->  Double {
    switch String_slice(offset, Basics_add(offset, 1.0), src) {
    case "0":
        ParserLenient_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "1":
        ParserLenient_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "2":
        ParserLenient_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "3":
        ParserLenient_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "4":
        ParserLenient_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "5":
        ParserLenient_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "6":
        ParserLenient_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "7":
        ParserLenient_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "8":
        ParserLenient_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "9":
        ParserLenient_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case _:
        offset
    }
}

@Sendable public static func ParserLenient_skip1OrMoreDigits0To9(_ offset: Double, _ src: String) ->  Double {
    switch String_slice(offset, Basics_add(offset, 1.0), src) {
    case "0":
        ParserLenient_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "1":
        ParserLenient_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "2":
        ParserLenient_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "3":
        ParserLenient_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "4":
        ParserLenient_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "5":
        ParserLenient_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "6":
        ParserLenient_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "7":
        ParserLenient_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "8":
        ParserLenient_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "9":
        ParserLenient_skip0OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case _:
        -1.0
    }
}

@Sendable public static func ParserLenient_skipAfterFloatExponentMark(_ offset: Double, _ src: String) ->  Double {
    switch String_slice(offset, Basics_add(offset, 1.0), src) {
    case "+":
        ParserLenient_skip1OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case "-":
        ParserLenient_skip1OrMoreDigits0To9(Basics_add(offset, 1.0), src)
    case _:
        ParserLenient_skip1OrMoreDigits0To9(offset, src)
    }
}

@Sendable public static func ParserLenient_skipFloatAfterIntegerDecimal(_ offset: Double, _ src: String) ->  Double {
    let generated_localReturnResult_declarationResult: Double
    switch String_slice(offset, Basics_add(offset, 1.0), src) {
    case ".":
        let generated_let_caseResult_case0_declarationResult_offsetAfterDigits: Double =
            ParserLenient_skip1OrMoreDigits0To9(Basics_add(offset, 1.0), src)
        generated_localReturnResult_declarationResult =
            if Basics_eq(generated_let_caseResult_case0_declarationResult_offsetAfterDigits, -1.0) {
                -1.0
            } else {
                switch String_slice(generated_let_caseResult_case0_declarationResult_offsetAfterDigits, Basics_add(generated_let_caseResult_case0_declarationResult_offsetAfterDigits, 1.0), src) {
                case "e":
                    ParserLenient_skipAfterFloatExponentMark(Basics_add(generated_let_caseResult_case0_declarationResult_offsetAfterDigits, 1.0), src)
                case "E":
                    ParserLenient_skipAfterFloatExponentMark(Basics_add(generated_let_caseResult_case0_declarationResult_offsetAfterDigits, 1.0), src)
                case _:
                    generated_let_caseResult_case0_declarationResult_offsetAfterDigits
                }
            }
    case "e":
        generated_localReturnResult_declarationResult =
            ParserLenient_skipAfterFloatExponentMark(Basics_add(offset, 1.0), src)
    case "E":
        generated_localReturnResult_declarationResult =
            ParserLenient_skipAfterFloatExponentMark(Basics_add(offset, 1.0), src)
    case _:
        generated_localReturnResult_declarationResult =
            -1.0
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func ParserLenient_skipWhileHelp(_ isGood: @Sendable @escaping (UnicodeScalar) -> Bool, _ offset: Double, _ row: Double, _ col: Double, _ src: String, _ indent: List_List<Double>) ->  Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String> {
    let generated_let_declarationResult_actualChar: String =
        String_slice(offset, Basics_add(offset, 1.0), src)
    return
        if String_any(isGood, generated_let_declarationResult_actualChar) {
            switch generated_let_declarationResult_actualChar {
            case "\n":
                ParserLenient_skipWhileHelp(isGood, Basics_add(offset, 1.0), Basics_add(row, 1.0), 1.0, src, indent)
            case _:
                ParserLenient_skipWhileHelp(isGood, Basics_add(offset, 1.0), row, Basics_add(col, 1.0), src, indent)
            }
        } else {
            if Basics_and(ParserLenient_charStringIsUtf16HighSurrogate(generated_let_declarationResult_actualChar), String_any(isGood, String_slice(offset, Basics_add(offset, 2.0), src))) {
                ParserLenient_skipWhileHelp(isGood, Basics_add(offset, 2.0), row, Basics_add(col, 1.0), src, indent)
            } else {
                Generated_col_indent_offset_row_src.Record(col: col, indent: indent, offset: offset, row: row, src: src)
            }
        }
}

@Sendable public static func ParserLenient_skipWhileWhitespaceBacktrackableFollowedBy<next: Sendable>(_ generated_0: ParserLenient_Parser<next>) ->  ParserLenient_Parser<next> {
    let parseNext: @Sendable (ParserLenient_State) -> ParserLenient_PStep<next>
    switch generated_0 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseNext):
        parseNext =
            generated_destructured_parseNext
    }
    return ParserLenient_Parser.ParserLenient_Parser({ (s0: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in parseNext(ParserLenient_skipWhileWhitespaceHelp(s0.offset, s0.row, s0.col, s0.src, s0.indent)) })
}

@Sendable public static func ParserLenient_skipWhileWhitespaceHelp(_ offset: Double, _ row: Double, _ col: Double, _ src: String, _ indent: List_List<Double>) ->  Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String> {
    switch String_slice(offset, Basics_add(offset, 1.0), src) {
    case " ":
        ParserLenient_skipWhileWhitespaceHelp(Basics_add(offset, 1.0), row, Basics_add(col, 1.0), src, indent)
    case "\n":
        ParserLenient_skipWhileWhitespaceHelp(Basics_add(offset, 1.0), Basics_add(row, 1.0), 1.0, src, indent)
    case "\r":
        ParserLenient_skipWhileWhitespaceHelp(Basics_add(offset, 1.0), row, Basics_add(col, 1.0), src, indent)
    case _:
        Generated_col_indent_offset_row_src.Record(col: col, indent: indent, offset: offset, row: row, src: src)
    }
}

@Sendable public static func ParserLenient_skipWhileWithoutLinebreakHelp(_ isGood: @Sendable @escaping (UnicodeScalar) -> Bool, _ offset: Double, _ row: Double, _ col: Double, _ src: String, _ indent: List_List<Double>) ->  Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String> {
    let generated_let_declarationResult_actualChar: String =
        String_slice(offset, Basics_add(offset, 1.0), src)
    return
        if String_any(isGood, generated_let_declarationResult_actualChar) {
            ParserLenient_skipWhileWithoutLinebreakHelp(isGood, Basics_add(offset, 1.0), row, Basics_add(col, 1.0), src, indent)
        } else {
            if Basics_and(ParserLenient_charStringIsUtf16HighSurrogate(generated_let_declarationResult_actualChar), String_any(isGood, String_slice(offset, Basics_add(offset, 2.0), src))) {
                ParserLenient_skipWhileWithoutLinebreakHelp(isGood, Basics_add(offset, 2.0), row, Basics_add(col, 1.0), src, indent)
            } else {
                Generated_col_indent_offset_row_src.Record(col: col, indent: indent, offset: offset, row: row, src: src)
            }
        }
}

@Sendable public static func ParserLenient_symbol<res: Sendable>(_ str: String, _ res: res) ->  ParserLenient_Parser<res> {
    let generated_let_declarationResult_strLength: Double =
        String_length(str)
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
                let generated_let_result_argument0_letResult_declarationResult_newOffset: Double =
                    Basics_add(s.offset, generated_let_declarationResult_strLength)
                return
                    if Basics_eq(String_slice(s.offset, generated_let_result_argument0_letResult_declarationResult_newOffset, s.src), str) {
                        ParserLenient_PStep.ParserLenient_Good(res, Generated_col_indent_offset_row_src.Record(col: Basics_add(s.col, generated_let_declarationResult_strLength), indent: s.indent, offset: generated_let_result_argument0_letResult_declarationResult_newOffset, row: s.row, src: s.src))
                    } else {
                        ParserLenient_pStepBadBacktracking()
                    }
            }
        )
}

@Sendable public static func ParserLenient_symbolBacktrackableFollowedBy<next: Sendable>(_ str: String, _ generated_1: ParserLenient_Parser<next>) ->  ParserLenient_Parser<next> {
    let parseNext: @Sendable (ParserLenient_State) -> ParserLenient_PStep<next>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseNext):
        parseNext =
            generated_destructured_parseNext
    }
    let generated_let_declarationResult_strLength: Double =
        String_length(str)
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
                let generated_let_result_argument0_letResult_declarationResult_newOffset: Double =
                    Basics_add(s.offset, generated_let_declarationResult_strLength)
                return
                    if Basics_eq(String_slice(s.offset, generated_let_result_argument0_letResult_declarationResult_newOffset, s.src), str) {
                        parseNext(Generated_col_indent_offset_row_src.Record(col: Basics_add(s.col, generated_let_declarationResult_strLength), indent: s.indent, offset: generated_let_result_argument0_letResult_declarationResult_newOffset, row: s.row, src: s.src))
                    } else {
                        ParserLenient_pStepBadBacktracking()
                    }
            }
        )
}

@Sendable public static func ParserLenient_symbolFollowedBy<next: Sendable>(_ str: String, _ generated_1: ParserLenient_Parser<next>) ->  ParserLenient_Parser<next> {
    let parseNext: @Sendable (ParserLenient_State) -> ParserLenient_PStep<next>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseNext):
        parseNext =
            generated_destructured_parseNext
    }
    let generated_let_declarationResult_strLength: Double =
        String_length(str)
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
                let generated_let_result_argument0_letResult_declarationResult_newOffset: Double =
                    Basics_add(s.offset, generated_let_declarationResult_strLength)
                return
                    if Basics_eq(String_slice(s.offset, generated_let_result_argument0_letResult_declarationResult_newOffset, s.src), str) {
                        ParserLenient_pStepCommit(parseNext(Generated_col_indent_offset_row_src.Record(col: Basics_add(s.col, generated_let_declarationResult_strLength), indent: s.indent, offset: generated_let_result_argument0_letResult_declarationResult_newOffset, row: s.row, src: s.src)))
                    } else {
                        ParserLenient_pStepBadBacktracking()
                    }
            }
        )
}

@Sendable public static func ParserLenient_symbolWithEndLocation<res: Sendable>(_ str: String, _ endLocationToRes: @Sendable @escaping (Generated_column_row<Double, Double>) -> res) ->  ParserLenient_Parser<res> {
    let generated_let_declarationResult_strLength: Double =
        String_length(str)
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
                let generated_let_result_argument0_letResult_declarationResult_newOffset: Double =
                    Basics_add(s.offset, generated_let_declarationResult_strLength)
                let generated_localReturnResult_letResult_result_argument0_letResult_declarationResult: ParserLenient_PStep<res>
                if Basics_eq(String_slice(s.offset, generated_let_result_argument0_letResult_declarationResult_newOffset, s.src), str) {
                    let generated_let_onTrue_letResult_result_argument0_letResult_declarationResult_newCol: Double =
                        Basics_add(s.col, generated_let_declarationResult_strLength)
                    generated_localReturnResult_letResult_result_argument0_letResult_declarationResult =
                        ParserLenient_PStep.ParserLenient_Good(endLocationToRes(Generated_column_row.Record(column: generated_let_onTrue_letResult_result_argument0_letResult_declarationResult_newCol, row: s.row)), Generated_col_indent_offset_row_src.Record(col: generated_let_onTrue_letResult_result_argument0_letResult_declarationResult_newCol, indent: s.indent, offset: generated_let_result_argument0_letResult_declarationResult_newOffset, row: s.row, src: s.src))
                } else {
                    generated_localReturnResult_letResult_result_argument0_letResult_declarationResult =
                        ParserLenient_pStepBadBacktracking()
                }
                return generated_localReturnResult_letResult_result_argument0_letResult_declarationResult
            }
        )
}

@Sendable public static func ParserLenient_symbolWithRange<res: Sendable>(_ str: String, _ startAndEndLocationToRes: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> res) ->  ParserLenient_Parser<res> {
    let generated_let_declarationResult_strLength: Double =
        String_length(str)
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
                let generated_let_result_argument0_letResult_declarationResult_newOffset: Double =
                    Basics_add(s.offset, generated_let_declarationResult_strLength)
                let generated_localReturnResult_letResult_result_argument0_letResult_declarationResult: ParserLenient_PStep<res>
                if Basics_eq(String_slice(s.offset, generated_let_result_argument0_letResult_declarationResult_newOffset, s.src), str) {
                    let generated_let_onTrue_letResult_result_argument0_letResult_declarationResult_newCol: Double =
                        Basics_add(s.col, generated_let_declarationResult_strLength)
                    generated_localReturnResult_letResult_result_argument0_letResult_declarationResult =
                        ParserLenient_PStep.ParserLenient_Good(startAndEndLocationToRes(Generated_end_start.Record(end: Generated_column_row.Record(column: generated_let_onTrue_letResult_result_argument0_letResult_declarationResult_newCol, row: s.row), start: Generated_column_row.Record(column: s.col, row: s.row))), Generated_col_indent_offset_row_src.Record(col: generated_let_onTrue_letResult_result_argument0_letResult_declarationResult_newCol, indent: s.indent, offset: generated_let_result_argument0_letResult_declarationResult_newOffset, row: s.row, src: s.src))
                } else {
                    generated_localReturnResult_letResult_result_argument0_letResult_declarationResult =
                        ParserLenient_pStepBadBacktracking()
                }
                return generated_localReturnResult_letResult_result_argument0_letResult_declarationResult
            }
        )
}

@Sendable public static func ParserLenient_validate<a: Sendable>(_ isOkay: @Sendable @escaping (a) -> Bool, _ generated_1: ParserLenient_Parser<a>) ->  ParserLenient_Parser<a> {
    let parseA: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseA):
        parseA =
            generated_destructured_parseA
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                let generated_localReturnResult_result_argument0_declarationResult: ParserLenient_PStep<a>
                switch parseA(s0) {
                case let ParserLenient_PStep.ParserLenient_Bad(committed, _):
                    generated_localReturnResult_result_argument0_declarationResult =
                        ParserLenient_PStep.ParserLenient_Bad(committed, Unit.Unit)
                case let ParserLenient_PStep.ParserLenient_Good(a, generated_1):
                    let good: ParserLenient_PStep<a> =
                        ParserLenient_PStep.ParserLenient_Good(a, generated_1)
                    generated_localReturnResult_result_argument0_declarationResult =
                        if isOkay(a) {
                            good
                        } else {
                            ParserLenient_pStepBadCommitting()
                        }
                }
                return generated_localReturnResult_result_argument0_declarationResult
            }
        )
}

@Sendable public static func ParserLenient_validateEndColumnIndentation<a: Sendable>(_ isOkay: @Sendable @escaping (Double) -> (List_List<Double>) -> Bool, _ generated_1: ParserLenient_Parser<a>) ->  ParserLenient_Parser<a> {
    let parse: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_1 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parse):
        parse =
            generated_destructured_parse
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: ParserLenient_State) in
                let generated_localReturnResult_result_argument0_declarationResult: ParserLenient_PStep<a>
                switch parse(s0) {
                case let ParserLenient_PStep.ParserLenient_Good(generated_0, s1):
                    let good: ParserLenient_PStep<a> =
                        ParserLenient_PStep.ParserLenient_Good(generated_0, s1)
                    generated_localReturnResult_result_argument0_declarationResult =
                        if isOkay(s1.col)(s1.indent) {
                            good
                        } else {
                            ParserLenient_pStepBadCommitting()
                        }
                case let bad:
                    generated_localReturnResult_result_argument0_declarationResult =
                        bad
                }
                return generated_localReturnResult_result_argument0_declarationResult
            }
        )
}

@Sendable public static func ParserLenient_while(_ isGood: @Sendable @escaping (UnicodeScalar) -> Bool) ->  ParserLenient_Parser<String> {
    ParserLenient_Parser.ParserLenient_Parser(
        { (s0: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_s1: ParserLenient_State =
                ParserLenient_skipWhileHelp(isGood, s0.offset, s0.row, s0.col, s0.src, s0.indent)
            return ParserLenient_PStep.ParserLenient_Good(String_slice(s0.offset, generated_let_result_argument0_declarationResult_s1.offset, s0.src), generated_let_result_argument0_declarationResult_s1)
        }
    )
}

@Sendable public static func ParserLenient_whileAtLeast1WithoutLinebreak(_ isGood: @Sendable @escaping (UnicodeScalar) -> Bool) ->  ParserLenient_Parser<String> {
    ParserLenient_Parser.ParserLenient_Parser(
        { (s0: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_s1: ParserLenient_State =
                ParserLenient_skipWhileWithoutLinebreakHelp(isGood, s0.offset, s0.row, s0.col, s0.src, s0.indent)
            return
                if Basics_eq(Basics_sub(generated_let_result_argument0_declarationResult_s1.offset, s0.offset), 0.0) {
                    ParserLenient_pStepBadBacktracking()
                } else {
                    ParserLenient_PStep.ParserLenient_Good(String_slice(s0.offset, generated_let_result_argument0_declarationResult_s1.offset, s0.src), generated_let_result_argument0_declarationResult_s1)
                }
        }
    )
}

@Sendable public static func ParserLenient_whileAtMost3WithoutLinebreakAnd2PartUtf16ToResultAndThen<intermediate: Sendable, res: Sendable>(_ charAsStringIsOkay: @Sendable @escaping (String) -> Bool, _ consumedStringToIntermediateOrErr: @Sendable @escaping (String) -> Maybe_Maybe<intermediate>, _ intermediateToFollowupParser: @Sendable @escaping (intermediate) -> ParserLenient_Parser<res>) ->  ParserLenient_Parser<res> {
    ParserLenient_Parser.ParserLenient_Parser(
        { (s0: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_src: String =
                s0.src
            let generated_let_result_argument0_declarationResult_s0Offset: Double =
                s0.offset
            let generated_let_result_argument0_declarationResult_consumed: Generated_length_string<Double, String> =
                if charAsStringIsOkay(String_slice(generated_let_result_argument0_declarationResult_s0Offset, Basics_add(generated_let_result_argument0_declarationResult_s0Offset, 1.0), generated_let_result_argument0_declarationResult_src)) {
                    if charAsStringIsOkay(String_slice(Basics_add(generated_let_result_argument0_declarationResult_s0Offset, 1.0), Basics_add(generated_let_result_argument0_declarationResult_s0Offset, 2.0), generated_let_result_argument0_declarationResult_src)) {
                        if charAsStringIsOkay(String_slice(Basics_add(generated_let_result_argument0_declarationResult_s0Offset, 2.0), Basics_add(generated_let_result_argument0_declarationResult_s0Offset, 3.0), generated_let_result_argument0_declarationResult_src)) {
                            Generated_length_string.Record(length: 3.0, string: String_slice(generated_let_result_argument0_declarationResult_s0Offset, Basics_add(generated_let_result_argument0_declarationResult_s0Offset, 3.0), generated_let_result_argument0_declarationResult_src))
                        } else {
                            Generated_length_string.Record(length: 2.0, string: String_slice(generated_let_result_argument0_declarationResult_s0Offset, Basics_add(generated_let_result_argument0_declarationResult_s0Offset, 2.0), generated_let_result_argument0_declarationResult_src))
                        }
                    } else {
                        Generated_length_string.Record(length: 1.0, string: String_slice(generated_let_result_argument0_declarationResult_s0Offset, Basics_add(generated_let_result_argument0_declarationResult_s0Offset, 1.0), generated_let_result_argument0_declarationResult_src))
                    }
                } else {
                    ParserLenient_length0StringEmpty
                }
            let generated_localReturnResult_letResult_result_argument0_declarationResult: ParserLenient_PStep<res>
            switch consumedStringToIntermediateOrErr(generated_let_result_argument0_declarationResult_consumed.string) {
            case let Maybe_Maybe.Maybe_Just(intermediate):
                let generated_let_caseResult_case0_letResult_result_argument0_declarationResult_parseFollowup: @Sendable (ParserLenient_State) -> ParserLenient_PStep<res>
                switch intermediateToFollowupParser(intermediate) {
                case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parseFollowup):
                    generated_let_caseResult_case0_letResult_result_argument0_declarationResult_parseFollowup =
                        generated_destructured_parseFollowup
                }
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserLenient_pStepCommit(generated_let_caseResult_case0_letResult_result_argument0_declarationResult_parseFollowup(Generated_col_indent_offset_row_src.Record(col: Basics_add(s0.col, generated_let_result_argument0_declarationResult_consumed.length), indent: s0.indent, offset: Basics_add(generated_let_result_argument0_declarationResult_s0Offset, generated_let_result_argument0_declarationResult_consumed.length), row: s0.row, src: generated_let_result_argument0_declarationResult_src)))
            case Maybe_Maybe.Maybe_Nothing:
                generated_localReturnResult_letResult_result_argument0_declarationResult =
                    ParserLenient_pStepBadBacktracking()
            }
            return generated_localReturnResult_letResult_result_argument0_declarationResult
        }
    )
}

@Sendable public static func ParserLenient_whileAtMost3WithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol<res: Sendable>(_ whileRangeAndContentToRes: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (String) -> res, _ whileCharIsOkay: @Sendable @escaping (String) -> Bool, _ whileResultIsOkay: @Sendable @escaping (String) -> Bool, _ mandatoryFinalSymbol: String) ->  ParserLenient_Parser<res> {
    let generated_let_declarationResult_mandatoryFinalSymbolLength: Double =
        String_length(mandatoryFinalSymbol)
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
                let generated_let_result_argument0_letResult_declarationResult_src: String =
                    s0.src
                let generated_let_result_argument0_letResult_declarationResult_s0Offset: Double =
                    s0.offset
                let generated_let_result_argument0_letResult_declarationResult_consumedBeforeFinalSymbolLength: Double
                let generated_let_result_argument0_letResult_declarationResult_consumedBeforeFinalSymbolString: String
                let generated_localReturnResult_destructuredExpression_letDeclaration2_result_argument0_letResult_declarationResult: Tuple<Double, String> =
                    if whileCharIsOkay(String_slice(generated_let_result_argument0_letResult_declarationResult_s0Offset, Basics_add(generated_let_result_argument0_letResult_declarationResult_s0Offset, 1.0), generated_let_result_argument0_letResult_declarationResult_src)) {
                        if whileCharIsOkay(String_slice(Basics_add(generated_let_result_argument0_letResult_declarationResult_s0Offset, 1.0), Basics_add(generated_let_result_argument0_letResult_declarationResult_s0Offset, 2.0), generated_let_result_argument0_letResult_declarationResult_src)) {
                            if whileCharIsOkay(String_slice(Basics_add(generated_let_result_argument0_letResult_declarationResult_s0Offset, 2.0), Basics_add(generated_let_result_argument0_letResult_declarationResult_s0Offset, 3.0), generated_let_result_argument0_letResult_declarationResult_src)) {
                                Tuple.Tuple(3.0, String_slice(generated_let_result_argument0_letResult_declarationResult_s0Offset, Basics_add(generated_let_result_argument0_letResult_declarationResult_s0Offset, 3.0), generated_let_result_argument0_letResult_declarationResult_src))
                            } else {
                                Tuple.Tuple(2.0, String_slice(generated_let_result_argument0_letResult_declarationResult_s0Offset, Basics_add(generated_let_result_argument0_letResult_declarationResult_s0Offset, 2.0), generated_let_result_argument0_letResult_declarationResult_src))
                            }
                        } else {
                            Tuple.Tuple(1.0, String_slice(generated_let_result_argument0_letResult_declarationResult_s0Offset, Basics_add(generated_let_result_argument0_letResult_declarationResult_s0Offset, 1.0), generated_let_result_argument0_letResult_declarationResult_src))
                        }
                    } else {
                        ParserLenient_tuple0StringEmpty
                    }
                switch generated_localReturnResult_destructuredExpression_letDeclaration2_result_argument0_letResult_declarationResult {
                case let Tuple.Tuple(generated_destructured_consumedBeforeFinalSymbolLength, generated_destructured_consumedBeforeFinalSymbolString):
                    generated_let_result_argument0_letResult_declarationResult_consumedBeforeFinalSymbolLength =
                        generated_destructured_consumedBeforeFinalSymbolLength
                    generated_let_result_argument0_letResult_declarationResult_consumedBeforeFinalSymbolString =
                        generated_destructured_consumedBeforeFinalSymbolString
                }
                return
                    if Basics_and(Basics_eq(String_slice(Basics_add(generated_let_result_argument0_letResult_declarationResult_s0Offset, generated_let_result_argument0_letResult_declarationResult_consumedBeforeFinalSymbolLength), Basics_add(Basics_add(generated_let_result_argument0_letResult_declarationResult_s0Offset, generated_let_result_argument0_letResult_declarationResult_consumedBeforeFinalSymbolLength), generated_let_declarationResult_mandatoryFinalSymbolLength), generated_let_result_argument0_letResult_declarationResult_src), mandatoryFinalSymbol), whileResultIsOkay(generated_let_result_argument0_letResult_declarationResult_consumedBeforeFinalSymbolString)) {
                        ParserLenient_PStep.ParserLenient_Good(whileRangeAndContentToRes(Generated_end_start.Record(end: Generated_column_row.Record(column: Basics_add(s0.col, generated_let_result_argument0_letResult_declarationResult_consumedBeforeFinalSymbolLength), row: s0.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(generated_let_result_argument0_letResult_declarationResult_consumedBeforeFinalSymbolString), Generated_col_indent_offset_row_src.Record(col: Basics_add(Basics_add(s0.col, generated_let_result_argument0_letResult_declarationResult_consumedBeforeFinalSymbolLength), generated_let_declarationResult_mandatoryFinalSymbolLength), indent: s0.indent, offset: Basics_add(Basics_add(generated_let_result_argument0_letResult_declarationResult_s0Offset, generated_let_result_argument0_letResult_declarationResult_consumedBeforeFinalSymbolLength), generated_let_declarationResult_mandatoryFinalSymbolLength), row: s0.row, src: generated_let_result_argument0_letResult_declarationResult_src))
                    } else {
                        ParserLenient_pStepBadBacktracking()
                    }
            }
        )
}

@Sendable public static func ParserLenient_whileMapWithRange<res: Sendable>(_ isGood: @Sendable @escaping (UnicodeScalar) -> Bool, _ rangeAndConsumedStringToRes: @Sendable @escaping (Generated_end_start<Generated_column_row<Double, Double>, Generated_column_row<Double, Double>>) -> (String) -> res) ->  ParserLenient_Parser<res> {
    ParserLenient_Parser.ParserLenient_Parser(
        { (s0: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
            let generated_let_result_argument0_declarationResult_s1: ParserLenient_State =
                ParserLenient_skipWhileHelp(isGood, s0.offset, s0.row, s0.col, s0.src, s0.indent)
            return ParserLenient_PStep.ParserLenient_Good(rangeAndConsumedStringToRes(Generated_end_start.Record(end: Generated_column_row.Record(column: generated_let_result_argument0_declarationResult_s1.col, row: generated_let_result_argument0_declarationResult_s1.row), start: Generated_column_row.Record(column: s0.col, row: s0.row)))(String_slice(s0.offset, generated_let_result_argument0_declarationResult_s1.offset, s0.src)), generated_let_result_argument0_declarationResult_s1)
        }
    )
}

@Sendable public static func ParserLenient_withIndentSetToColumn<a: Sendable>(_ generated_0: ParserLenient_Parser<a>) ->  ParserLenient_Parser<a> {
    let parse: @Sendable (ParserLenient_State) -> ParserLenient_PStep<a>
    switch generated_0 {
    case let ParserLenient_Parser.ParserLenient_Parser(generated_destructured_parse):
        parse =
            generated_destructured_parse
    }
    return
        ParserLenient_Parser.ParserLenient_Parser(
            { (s0: Generated_col_indent_offset_row_src<Double, List_List<Double>, Double, Double, String>) in
                switch parse(ParserLenient_changeIndent({ (indent: List_List<Double>) in List_cons(s0.col, indent) }, s0)) {
                case let ParserLenient_PStep.ParserLenient_Good(a, s1):
                    ParserLenient_PStep.ParserLenient_Good(a, ParserLenient_changeIndent({ (indent: List_List<Double>) in List_drop(1.0, indent) }, s1))
                case let bad:
                    bad
                }
            }
        )
}

@Sendable public static func ParserWithComments_many<a: Sendable>(_ p: ParserFast_Parser<Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, a>>) ->  ParserFast_Parser<Generated_comments_syntax<ParserWithComments_Comments, List_List<a>>> {
    ParserFast_loopWhileSucceeds(
        p,
        Tuple.Tuple(Rope_empty(), List_List.List_Empty),
        { (pResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, a>) in
            { (generated_argument2_declarationResult_1: Tuple<Rope_Rope<ElmSyntaxNode_Node<String>>, List_List<a>>) in
                let commentsSoFar: Rope_Rope<ElmSyntaxNode_Node<String>>
                let itemsSoFar: List_List<a>
                switch generated_argument2_declarationResult_1 {
                case let Tuple.Tuple(generated_destructured_commentsSoFar, generated_destructured_itemsSoFar):
                    commentsSoFar =
                        generated_destructured_commentsSoFar
                    itemsSoFar =
                        generated_destructured_itemsSoFar
                }
                return Tuple.Tuple(Rope_prependTo(pResult.comments, commentsSoFar), List_cons(pResult.syntax, itemsSoFar))
            }
        },
        { (generated_argument3_declarationResult_0: Tuple<Rope_Rope<ElmSyntaxNode_Node<String>>, List_List<a>>) in
            let commentsSoFar: Rope_Rope<ElmSyntaxNode_Node<String>>
            let itemsSoFar: List_List<a>
            switch generated_argument3_declarationResult_0 {
            case let Tuple.Tuple(generated_destructured_commentsSoFar, generated_destructured_itemsSoFar):
                commentsSoFar =
                    generated_destructured_commentsSoFar
                itemsSoFar =
                    generated_destructured_itemsSoFar
            }
            return Generated_comments_syntax.Record(comments: commentsSoFar, syntax: List_reverse(itemsSoFar))
        }
    )
}

@Sendable public static func ParserWithComments_manyWithoutReverse<a: Sendable>(_ p: ParserFast_Parser<Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, a>>) ->  ParserFast_Parser<Generated_comments_syntax<ParserWithComments_Comments, List_List<a>>> {
    ParserFast_loopWhileSucceeds(
        p,
        Tuple.Tuple(Rope_empty(), List_List.List_Empty),
        { (pResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, a>) in
            { (generated_argument2_declarationResult_1: Tuple<Rope_Rope<ElmSyntaxNode_Node<String>>, List_List<a>>) in
                let commentsSoFar: Rope_Rope<ElmSyntaxNode_Node<String>>
                let itemsSoFar: List_List<a>
                switch generated_argument2_declarationResult_1 {
                case let Tuple.Tuple(generated_destructured_commentsSoFar, generated_destructured_itemsSoFar):
                    commentsSoFar =
                        generated_destructured_commentsSoFar
                    itemsSoFar =
                        generated_destructured_itemsSoFar
                }
                return Tuple.Tuple(Rope_prependTo(pResult.comments, commentsSoFar), List_cons(pResult.syntax, itemsSoFar))
            }
        },
        { (generated_argument3_declarationResult_0: Tuple<Rope_Rope<ElmSyntaxNode_Node<String>>, List_List<a>>) in
            let commentsSoFar: Rope_Rope<ElmSyntaxNode_Node<String>>
            let itemsSoFar: List_List<a>
            switch generated_argument3_declarationResult_0 {
            case let Tuple.Tuple(generated_destructured_commentsSoFar, generated_destructured_itemsSoFar):
                commentsSoFar =
                    generated_destructured_commentsSoFar
                itemsSoFar =
                    generated_destructured_itemsSoFar
            }
            return Generated_comments_syntax.Record(comments: commentsSoFar, syntax: itemsSoFar)
        }
    )
}

@Sendable public static func ParserWithComments_until<a: Sendable>(_ end: ParserFast_Parser<Unit>, _ element: ParserFast_Parser<Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, a>>) ->  ParserFast_Parser<Generated_comments_syntax<ParserWithComments_Comments, List_List<a>>> {
    ParserFast_loopUntil(
        end,
        element,
        Tuple.Tuple(Rope_empty(), List_List.List_Empty),
        { (pResult: Generated_comments_syntax<Maybe_Maybe<Rope_RopeFilled<ElmSyntaxNode_Node<String>>>, a>) in
            { (generated_argument3_declarationResult_1: Tuple<Rope_Rope<ElmSyntaxNode_Node<String>>, List_List<a>>) in
                let commentsSoFar: Rope_Rope<ElmSyntaxNode_Node<String>>
                let itemsSoFar: List_List<a>
                switch generated_argument3_declarationResult_1 {
                case let Tuple.Tuple(generated_destructured_commentsSoFar, generated_destructured_itemsSoFar):
                    commentsSoFar =
                        generated_destructured_commentsSoFar
                    itemsSoFar =
                        generated_destructured_itemsSoFar
                }
                return Tuple.Tuple(Rope_prependTo(pResult.comments, commentsSoFar), List_cons(pResult.syntax, itemsSoFar))
            }
        },
        { (generated_argument4_declarationResult_0: Tuple<Rope_Rope<ElmSyntaxNode_Node<String>>, List_List<a>>) in
            let commentsSoFar: Rope_Rope<ElmSyntaxNode_Node<String>>
            let itemsSoFar: List_List<a>
            switch generated_argument4_declarationResult_0 {
            case let Tuple.Tuple(generated_destructured_commentsSoFar, generated_destructured_itemsSoFar):
                commentsSoFar =
                    generated_destructured_commentsSoFar
                itemsSoFar =
                    generated_destructured_itemsSoFar
            }
            return Generated_comments_syntax.Record(comments: commentsSoFar, syntax: List_reverse(itemsSoFar))
        }
    )
}

@Sendable public static func Parser_andThen<a: Sendable, b: Sendable>(_ generated_0: @Sendable @escaping (a) -> ParserAdvanced_Parser<Never, Parser_Problem, b>, _ generated_1: ParserAdvanced_Parser<Never, Parser_Problem, a>) ->  ParserAdvanced_Parser<Never, Parser_Problem, b> {
    ParserAdvanced_andThen(generated_0, generated_1)
}

@Sendable public static func Parser_backtrackable<a: Sendable>(_ generated_0: ParserAdvanced_Parser<Never, Parser_Problem, a>) ->  ParserAdvanced_Parser<Never, Parser_Problem, a> {
    ParserAdvanced_backtrackable(generated_0)
}

@Sendable public static func Parser_chompIf(_ isGood: @Sendable @escaping (UnicodeScalar) -> Bool) ->  ParserAdvanced_Parser<Never, Parser_Problem, Unit> {
    ParserAdvanced_chompIf(isGood, Parser_Problem.Parser_UnexpectedChar)
}

@Sendable public static func Parser_chompUntil(_ str: String) ->  ParserAdvanced_Parser<Never, Parser_Problem, Unit> {
    ParserAdvanced_chompUntil(Parser_toToken(str))
}

@Sendable public static func Parser_chompUntilEndOr(_ generated_0: String) ->  ParserAdvanced_Parser<Never, Parser_Problem, Unit> {
    ParserAdvanced_chompUntilEndOr(generated_0)
}

@Sendable public static func Parser_chompWhile(_ generated_0: @Sendable @escaping (UnicodeScalar) -> Bool) ->  ParserAdvanced_Parser<Never, Parser_Problem, Unit> {
    ParserAdvanced_chompWhile(generated_0)
}

@Sendable public static func Parser_commit<a: Sendable>(_ generated_0: a) ->  ParserAdvanced_Parser<Never, Parser_Problem, a> {
    ParserAdvanced_commit(generated_0)
}

@Sendable public static func Parser_deadEndsToString(_ deadEnds: List_List<Parser_DeadEnd>) ->  String {
    "TODO deadEndsToString"
}

@Sendable public static func Parser_getChompedString<a: Sendable>(_ generated_0: ParserAdvanced_Parser<Never, Parser_Problem, a>) ->  ParserAdvanced_Parser<Never, Parser_Problem, String> {
    ParserAdvanced_getChompedString(generated_0)
}

@Sendable public static func Parser_ignorer<ignore: Sendable, keep: Sendable>(_ generated_0: ParserAdvanced_Parser<Never, Parser_Problem, keep>, _ generated_1: ParserAdvanced_Parser<Never, Parser_Problem, ignore>) ->  ParserAdvanced_Parser<Never, Parser_Problem, keep> {
    ParserAdvanced_ignorer(generated_0, generated_1)
}

@Sendable public static func Parser_keeper<a: Sendable, b: Sendable>(_ generated_0: ParserAdvanced_Parser<Never, Parser_Problem, @Sendable (a) -> b>, _ generated_1: ParserAdvanced_Parser<Never, Parser_Problem, a>) ->  ParserAdvanced_Parser<Never, Parser_Problem, b> {
    ParserAdvanced_keeper(generated_0, generated_1)
}

@Sendable public static func Parser_keyword(_ kwd: String) ->  ParserAdvanced_Parser<Never, Parser_Problem, Unit> {
    ParserAdvanced_keyword(ParserAdvanced_Token.ParserAdvanced_Token(kwd, Parser_Problem.Parser_ExpectingKeyword(kwd)))
}

@Sendable public static func Parser_lazy<a: Sendable>(_ generated_0: @Sendable @escaping (Unit) -> ParserAdvanced_Parser<Never, Parser_Problem, a>) ->  ParserAdvanced_Parser<Never, Parser_Problem, a> {
    ParserAdvanced_lazy(generated_0)
}

@Sendable public static func Parser_lineComment(_ str: String) ->  ParserAdvanced_Parser<Never, Parser_Problem, Unit> {
    ParserAdvanced_lineComment(Parser_toToken(str))
}

@Sendable public static func Parser_loop<a: Sendable, state: Sendable>(_ state: state, _ callback: @Sendable @escaping (state) -> Parser_Parser<Parser_Step<state, a>>) ->  ParserAdvanced_Parser<Never, Parser_Problem, a> {
    ParserAdvanced_loop(state, { (s: state) in Parser_map(Parser_toAdvancedStep, callback(s)) })
}

@Sendable public static func Parser_map<a: Sendable, b: Sendable>(_ generated_0: @Sendable @escaping (a) -> b, _ generated_1: ParserAdvanced_Parser<Never, Parser_Problem, a>) ->  ParserAdvanced_Parser<Never, Parser_Problem, b> {
    ParserAdvanced_map(generated_0, generated_1)
}

@Sendable public static func Parser_mapChompedString<a: Sendable, b: Sendable>(_ generated_0: @Sendable @escaping (String) -> (a) -> b, _ generated_1: ParserAdvanced_Parser<Never, Parser_Problem, a>) ->  ParserAdvanced_Parser<Never, Parser_Problem, b> {
    ParserAdvanced_mapChompedString(generated_0, generated_1)
}

@Sendable public static func Parser_multiComment(_ open_: String, _ close: String, _ nestable: Parser_Nestable) ->  ParserAdvanced_Parser<Never, Parser_Problem, Unit> {
    ParserAdvanced_multiComment(Parser_toToken(open_), Parser_toToken(close), Parser_toAdvancedNestable(nestable))
}

@Sendable public static func Parser_number<a: Sendable>(_ i: Generated_binary_float_hex_int_octal<Maybe_Maybe<@Sendable (Double) -> a>, Maybe_Maybe<@Sendable (Double) -> a>, Maybe_Maybe<@Sendable (Double) -> a>, Maybe_Maybe<@Sendable (Double) -> a>, Maybe_Maybe<@Sendable (Double) -> a>>) ->  ParserAdvanced_Parser<Never, Parser_Problem, a> {
    ParserAdvanced_number(Generated_binary_expecting_float_hex_int_invalid_octal.Record(binary: Result_fromMaybe(Parser_Problem.Parser_ExpectingBinary, i.binary), expecting: Parser_Problem.Parser_ExpectingNumber, float: Result_fromMaybe(Parser_Problem.Parser_ExpectingFloat, i.float), hex: Result_fromMaybe(Parser_Problem.Parser_ExpectingHex, i.hex), int: Result_fromMaybe(Parser_Problem.Parser_ExpectingInt, i.int), invalid: Parser_Problem.Parser_ExpectingNumber, octal: Result_fromMaybe(Parser_Problem.Parser_ExpectingOctal, i.octal)))
}

@Sendable public static func Parser_oneOf<a: Sendable>(_ generated_0: List_List<ParserAdvanced_Parser<Never, Parser_Problem, a>>) ->  ParserAdvanced_Parser<Never, Parser_Problem, a> {
    ParserAdvanced_oneOf(generated_0)
}

@Sendable public static func Parser_problem<a: Sendable>(_ msg: String) ->  ParserAdvanced_Parser<Never, Parser_Problem, a> {
    ParserAdvanced_problem(Parser_Problem.Parser_Problem(msg))
}

@Sendable public static func Parser_problemToDeadEnd(_ p: Generated_col_contextStack_problem_row<Double, List_List<Generated_col_context_row<Double, Never, Double>>, Parser_Problem, Double>) ->  Generated_col_problem_row<Double, Parser_Problem, Double> {
    Generated_col_problem_row.Record(col: p.col, problem: p.problem, row: p.row)
}

@Sendable public static func Parser_run<a: Sendable>(_ parser: ParserAdvanced_Parser<Never, Parser_Problem, a>, _ source: String) ->  Result_Result<List_List<Generated_col_problem_row<Double, Parser_Problem, Double>>, a> {
    switch ParserAdvanced_run(parser, source) {
    case let Result_Result.Result_Ok(a):
        Result_Result.Result_Ok(a)
    case let Result_Result.Result_Err(problems):
        Result_Result.Result_Err(List_map(Parser_problemToDeadEnd, problems))
    }
}

@Sendable public static func Parser_sequence<a: Sendable>(_ i: Generated_end_item_separator_spaces_start_trailing<String, Parser_Parser<a>, String, Parser_Parser<Unit>, String, Parser_Trailing>) ->  ParserAdvanced_Parser<Never, Parser_Problem, List_List<a>> {
    ParserAdvanced_sequence(Generated_end_item_separator_spaces_start_trailing.Record(end: Parser_toToken(i.end), item: i.item, separator: Parser_toToken(i.separator), spaces: i.spaces, start: Parser_toToken(i.start), trailing: Parser_toAdvancedTrailing(i.trailing)))
}

@Sendable public static func Parser_succeed<a: Sendable>(_ generated_0: a) ->  ParserAdvanced_Parser<Never, Parser_Problem, a> {
    ParserAdvanced_succeed(generated_0)
}

@Sendable public static func Parser_symbol(_ str: String) ->  ParserAdvanced_Parser<Never, Parser_Problem, Unit> {
    ParserAdvanced_symbol(ParserAdvanced_Token.ParserAdvanced_Token(str, Parser_Problem.Parser_ExpectingSymbol(str)))
}

@Sendable public static func Parser_toAdvancedNestable(_ nestable: Parser_Nestable) ->  ParserAdvanced_Nestable {
    switch nestable {
    case Parser_Nestable.Parser_NotNestable:
        ParserAdvanced_Nestable.ParserAdvanced_NotNestable
    case Parser_Nestable.Parser_Nestable:
        ParserAdvanced_Nestable.ParserAdvanced_Nestable
    }
}

@Sendable public static func Parser_toAdvancedStep<a: Sendable, s: Sendable>(_ step: Parser_Step<s, a>) ->  ParserAdvanced_Step<s, a> {
    switch step {
    case let Parser_Step.Parser_Loop(s):
        ParserAdvanced_Step.ParserAdvanced_Loop(s)
    case let Parser_Step.Parser_Done(a):
        ParserAdvanced_Step.ParserAdvanced_Done(a)
    }
}

@Sendable public static func Parser_toAdvancedTrailing(_ trailing: Parser_Trailing) ->  ParserAdvanced_Trailing {
    switch trailing {
    case Parser_Trailing.Parser_Forbidden:
        ParserAdvanced_Trailing.ParserAdvanced_Forbidden
    case Parser_Trailing.Parser_Optional:
        ParserAdvanced_Trailing.ParserAdvanced_Optional
    case Parser_Trailing.Parser_Mandatory:
        ParserAdvanced_Trailing.ParserAdvanced_Mandatory
    }
}

@Sendable public static func Parser_toToken(_ str: String) ->  ParserAdvanced_Token<Parser_Problem> {
    ParserAdvanced_Token.ParserAdvanced_Token(str, Parser_Problem.Parser_Expecting(str))
}

@Sendable public static func Parser_token(_ str: String) ->  ParserAdvanced_Parser<Never, Parser_Problem, Unit> {
    ParserAdvanced_token(Parser_toToken(str))
}

@Sendable public static func Parser_variable(_ i: Generated_inner_reserved_start<@Sendable (UnicodeScalar) -> Bool, Set<String>, @Sendable (UnicodeScalar) -> Bool>) ->  ParserAdvanced_Parser<Never, Parser_Problem, String> {
    ParserAdvanced_variable(Generated_expecting_inner_reserved_start.Record(expecting: Parser_Problem.Parser_ExpectingVariable, inner: i.inner, reserved: i.reserved, start: i.start))
}

@Sendable public static func Parser_withIndent<a: Sendable>(_ generated_0: Double, _ generated_1: ParserAdvanced_Parser<Never, Parser_Problem, a>) ->  ParserAdvanced_Parser<Never, Parser_Problem, a> {
    ParserAdvanced_withIndent(generated_0, generated_1)
}

@Sendable public static func Print_emptyOrLinebreakIndented(_ lineSpreadToUse: Print_LineSpread) ->  Print_Print {
    switch lineSpreadToUse {
    case Print_LineSpread.Print_SingleLine:
        Print_empty
    case Print_LineSpread.Print_MultipleLines:
        Print_linebreakIndented
    }
}

@Sendable public static func Print_exactly(_ exactNextString: String) ->  Print_Print {
    Print_Print.Print_Exact(exactNextString, Unit.Unit)
}

@Sendable public static func Print_followedBy(_ generated_0: Print_Print, _ generated_1: Print_Print) ->  Print_Print {
    Print_Print.Print_FollowedBy(generated_0, generated_1)
}

@Sendable public static func Print_indentAtMost4(_ atMost4: Double) ->  String {
    switch atMost4 {
    case 1:
        " "
    case 2:
        "  "
    case 3:
        "   "
    case _:
        "    "
    }
}

@Sendable public static func Print_indentInverseRemainderBy4(_ inverseRemainderBy4: Double) ->  String {
    switch inverseRemainderBy4 {
    case 0:
        "    "
    case 1:
        "   "
    case 2:
        "  "
    case _:
        " "
    }
}

@Sendable public static func Print_lineSpread(_ print: Print_Print) ->  Print_LineSpread {
    switch print {
    case Print_Print.Print_Exact(_, _):
        Print_LineSpread.Print_SingleLine
    case let Print_Print.Print_FollowedBy(b, a):
        Print_lineSpreadWithRemaining(a, List_singleton(b))
    case Print_Print.Print_Linebreak(_, _):
        Print_LineSpread.Print_MultipleLines
    case Print_Print.Print_LinebreakIndented(_, _):
        Print_LineSpread.Print_MultipleLines
    case let Print_Print.Print_WithIndentIncreasedBy(_, innerPrint):
        Print_lineSpread(innerPrint)
    case let Print_Print.Print_WithIndentAtNextMultipleOf4(innerPrint, _):
        Print_lineSpread(innerPrint)
    }
}

@Sendable public static func Print_lineSpreadListMapAndCombine<a: Sendable>(_ elementLineSpread: @Sendable @escaping (a) -> Print_LineSpread, _ lineSpreads: List_List<a>) ->  Print_LineSpread {
    switch lineSpreads {
    case List_List.List_Empty:
        Print_LineSpread.Print_SingleLine
    case let List_List.List_Cons(head, tail):
        switch elementLineSpread(head) {
        case Print_LineSpread.Print_MultipleLines:
            Print_LineSpread.Print_MultipleLines
        case Print_LineSpread.Print_SingleLine:
            Print_lineSpreadListMapAndCombine(elementLineSpread, tail)
        }
    }
}

@Sendable public static func Print_lineSpreadMergeWith(_ bLineSpreadLazy: @Sendable @escaping (Unit) -> Print_LineSpread, _ aLineSpread: Print_LineSpread) ->  Print_LineSpread {
    switch aLineSpread {
    case Print_LineSpread.Print_MultipleLines:
        Print_LineSpread.Print_MultipleLines
    case Print_LineSpread.Print_SingleLine:
        bLineSpreadLazy(Unit.Unit)
    }
}

@Sendable public static func Print_lineSpreadMergeWithStrict(_ bLineSpreadLazy: Print_LineSpread, _ aLineSpread: Print_LineSpread) ->  Print_LineSpread {
    switch aLineSpread {
    case Print_LineSpread.Print_MultipleLines:
        Print_LineSpread.Print_MultipleLines
    case Print_LineSpread.Print_SingleLine:
        bLineSpreadLazy
    }
}

@Sendable public static func Print_lineSpreadWithRemaining(_ print: Print_Print, _ remainingPrints: List_List<Print_Print>) ->  Print_LineSpread {
    switch print {
    case Print_Print.Print_Exact(_, _):
        switch remainingPrints {
        case List_List.List_Empty:
            Print_LineSpread.Print_SingleLine
        case let List_List.List_Cons(nextPrint, nextRemainingPrints):
            Print_lineSpreadWithRemaining(nextPrint, nextRemainingPrints)
        }
    case let Print_Print.Print_FollowedBy(b, a):
        Print_lineSpreadWithRemaining(a, List_cons(b, remainingPrints))
    case Print_Print.Print_Linebreak(_, _):
        Print_LineSpread.Print_MultipleLines
    case Print_Print.Print_LinebreakIndented(_, _):
        Print_LineSpread.Print_MultipleLines
    case let Print_Print.Print_WithIndentIncreasedBy(_, innerPrint):
        Print_lineSpreadWithRemaining(innerPrint, remainingPrints)
    case let Print_Print.Print_WithIndentAtNextMultipleOf4(innerPrint, _):
        Print_lineSpreadWithRemaining(innerPrint, remainingPrints)
    }
}

@Sendable public static func Print_listIntersperseAndFlatten(_ inBetweenPrint: Print_Print, _ elements: List_List<Print_Print>) ->  Print_Print {
    switch elements {
    case List_List.List_Empty:
        Print_empty
    case let List_List.List_Cons(head, tail):
        List_foldl({ (next: Print_Print) in { (soFar: Print_Print) in Print_followedBy(next, Print_followedBy(inBetweenPrint, soFar)) } }, head, tail)
    }
}

@Sendable public static func Print_listMapAndFlatten<a: Sendable>(_ elementToPrint: @Sendable @escaping (a) -> Print_Print, _ elements: List_List<a>) ->  Print_Print {
    List_foldl({ (next: a) in { (soFar: Print_Print) in Print_followedBy(elementToPrint(next), soFar) } }, Print_empty, elements)
}

@Sendable public static func Print_listMapAndIntersperseAndFlatten<a: Sendable>(_ elementToPrint: @Sendable @escaping (a) -> Print_Print, _ inBetweenPrint: Print_Print, _ prints: List_List<a>) ->  Print_Print {
    switch prints {
    case List_List.List_Empty:
        Print_empty
    case let List_List.List_Cons(head, tail):
        List_foldl({ (next: a) in { (soFar: Print_Print) in Print_followedBy(elementToPrint(next), Print_followedBy(inBetweenPrint, soFar)) } }, elementToPrint(head), tail)
    }
}

@Sendable public static func Print_listReverseAndIntersperseAndFlatten(_ inBetweenPrint: Print_Print, _ prints: List_List<Print_Print>) ->  Print_Print {
    switch prints {
    case List_List.List_Empty:
        Print_empty
    case let List_List.List_Cons(head, tail):
        List_foldl({ (next: Print_Print) in { (soFar: Print_Print) in Print_followedBy(soFar, Print_followedBy(inBetweenPrint, next)) } }, head, tail)
    }
}

@Sendable public static func Print_listReverseAndMapAndFlatten<a: Sendable>(_ elementToPrint: @Sendable @escaping (a) -> Print_Print, _ elements: List_List<a>) ->  Print_Print {
    List_foldr({ (next: a) in { (soFar: Print_Print) in Print_followedBy(elementToPrint(next), soFar) } }, Print_empty, elements)
}

@Sendable public static func Print_listReverseAndMapAndIntersperseAndFlatten<a: Sendable>(_ elementToPrint: @Sendable @escaping (a) -> Print_Print, _ inBetweenPrint: Print_Print, _ elements: List_List<a>) ->  Print_Print {
    switch elements {
    case List_List.List_Empty:
        Print_empty
    case let List_List.List_Cons(head, tail):
        List_foldl({ (next: a) in { (soFar: Print_Print) in Print_followedBy(soFar, Print_followedBy(inBetweenPrint, elementToPrint(next))) } }, elementToPrint(head), tail)
    }
}

@Sendable public static func Print_spaceOrLinebreakIndented(_ lineSpreadToUse: Print_LineSpread) ->  Print_Print {
    switch lineSpreadToUse {
    case Print_LineSpread.Print_SingleLine:
        Print_space
    case Print_LineSpread.Print_MultipleLines:
        Print_linebreakIndented
    }
}

@Sendable public static func Print_toString(_ print: Print_Print) ->  String {
    Print_toStringWithIndent(0.0, print)
}

@Sendable public static func Print_toStringWithIndent(_ indent: Double, _ print: Print_Print) ->  String {
    Print_toStringWithIndentAndLinebreakIndentAsStringWithRight(indent, "\n", "", print)
}

@Sendable public static func Print_toStringWithIndentAndLinebreakIndentAsStringWithRight(_ indentIgnoringMultiplesOfBy4: Double, _ linebreakIndentAsString: String, _ right: String, _ print: Print_Print) ->  String {
    switch print {
    case let Print_Print.Print_Exact(string, _):
        String_append(string, right)
    case let Print_Print.Print_FollowedBy(b, a):
        Print_toStringWithIndentAndLinebreakIndentAsStringWithRight(indentIgnoringMultiplesOfBy4, linebreakIndentAsString, Print_toStringWithIndentAndLinebreakIndentAsStringWithRight(indentIgnoringMultiplesOfBy4, linebreakIndentAsString, right, b), a)
    case Print_Print.Print_Linebreak(_, _):
        String_append("\n", right)
    case Print_Print.Print_LinebreakIndented(_, _):
        String_append(linebreakIndentAsString, right)
    case let Print_Print.Print_WithIndentIncreasedBy(increase, innerPrint):
        Print_toStringWithIndentAndLinebreakIndentAsStringWithRight(Basics_add(Basics_add(indentIgnoringMultiplesOfBy4, increase), 0.0), String_append(linebreakIndentAsString, Print_indentAtMost4(increase)), right, innerPrint)
    case let Print_Print.Print_WithIndentAtNextMultipleOf4(innerPrint, _):
        Print_toStringWithIndentAndLinebreakIndentAsStringWithRight(0.0, String_append(linebreakIndentAsString, Print_indentInverseRemainderBy4(Basics_sub(indentIgnoringMultiplesOfBy4, Basics_mul(Basics_idiv(indentIgnoringMultiplesOfBy4, 4.0), 4.0)))), right, innerPrint)
    }
}

@Sendable public static func Print_withIndentAtNextMultipleOf4(_ print: Print_Print) ->  Print_Print {
    Print_Print.Print_WithIndentAtNextMultipleOf4(print, Unit.Unit)
}

@Sendable public static func Print_withIndentIncreasedBy(_ generated_0: Double, _ generated_1: Print_Print) ->  Print_Print {
    Print_Print.Print_WithIndentIncreasedBy(generated_0, generated_1)
}

@Sendable public static func Rope_empty<a: Sendable>() ->  Rope_Rope<a> {
    Maybe_Maybe.Maybe_Nothing
}

@Sendable public static func Rope_filledPrependTo<a: Sendable>(_ right: Maybe_Maybe<Rope_RopeFilled<a>>, _ leftLikelyFilled: Rope_RopeFilled<a>) ->  Maybe_Maybe<Rope_RopeFilled<a>> {
    switch right {
    case Maybe_Maybe.Maybe_Nothing:
        Maybe_Maybe.Maybe_Just(leftLikelyFilled)
    case let Maybe_Maybe.Maybe_Just(rightLikelyFilled):
        Maybe_Maybe.Maybe_Just(Rope_RopeFilled.Rope_Branch2(leftLikelyFilled, rightLikelyFilled))
    }
}

@Sendable public static func Rope_one<a: Sendable>(_ onlyElement: a) ->  Rope_RopeFilled<a> {
    Rope_RopeFilled.Rope_Leaf(onlyElement, Unit.Unit)
}

@Sendable public static func Rope_prependTo<a: Sendable>(_ right: Maybe_Maybe<Rope_RopeFilled<a>>, _ left: Maybe_Maybe<Rope_RopeFilled<a>>) ->  Maybe_Maybe<Rope_RopeFilled<a>> {
    switch left {
    case Maybe_Maybe.Maybe_Nothing:
        right
    case let Maybe_Maybe.Maybe_Just(leftLikelyFilled):
        switch right {
        case Maybe_Maybe.Maybe_Nothing:
            left
        case let Maybe_Maybe.Maybe_Just(rightLikelyFilled):
            Maybe_Maybe.Maybe_Just(Rope_RopeFilled.Rope_Branch2(leftLikelyFilled, rightLikelyFilled))
        }
    }
}

@Sendable public static func Rope_prependToFilled<a: Sendable>(_ rightLikelyFilled: Rope_RopeFilled<a>, _ left: Maybe_Maybe<Rope_RopeFilled<a>>) ->  Maybe_Maybe<Rope_RopeFilled<a>> {
    switch left {
    case Maybe_Maybe.Maybe_Nothing:
        Maybe_Maybe.Maybe_Just(rightLikelyFilled)
    case let Maybe_Maybe.Maybe_Just(leftLikelyFilled):
        Maybe_Maybe.Maybe_Just(Rope_RopeFilled.Rope_Branch2(leftLikelyFilled, rightLikelyFilled))
    }
}

@Sendable public static func Rope_ropeLikelyFilledToListInto<a: Sendable>(_ initialAcc: List_List<a>, _ ropeLikelyFilled: Rope_RopeFilled<a>) ->  List_List<a> {
    switch ropeLikelyFilled {
    case let Rope_RopeFilled.Rope_Leaf(onlyElement, _):
        List_cons(onlyElement, initialAcc)
    case let Rope_RopeFilled.Rope_Branch2(left, right):
        Rope_ropeLikelyFilledToListInto(Rope_ropeLikelyFilledToListInto(initialAcc, right), left)
    }
}

@Sendable public static func Rope_toList<a: Sendable>(_ rope: Maybe_Maybe<Rope_RopeFilled<a>>) ->  List_List<a> {
    switch rope {
    case Maybe_Maybe.Maybe_Nothing:
        List_List.List_Empty
    case let Maybe_Maybe.Maybe_Just(ropeLikelyFilled):
        Rope_ropeLikelyFilledToListInto(List_List.List_Empty, ropeLikelyFilled)
    }
}

@Sendable public static func StructuredWriter_append(_ generated_0: StructuredWriter_Writer, _ generated_1: StructuredWriter_Writer) ->  StructuredWriter_Writer {
    StructuredWriter_Writer.StructuredWriter_Append(generated_0, generated_1)
}

@Sendable public static func StructuredWriter_asIndent(_ amount: Double) ->  String {
    String_repeat(amount, " ")
}

@Sendable public static func StructuredWriter_bracesComma(_ generated_0: Bool, _ generated_1: List_List<StructuredWriter_Writer>) ->  StructuredWriter_Writer {
    StructuredWriter_Writer.StructuredWriter_Sep(Triple.Triple("{", ", ", "}"), generated_0, generated_1)
}

@Sendable public static func StructuredWriter_bracketsComma(_ generated_0: Bool, _ generated_1: List_List<StructuredWriter_Writer>) ->  StructuredWriter_Writer {
    StructuredWriter_Writer.StructuredWriter_Sep(Triple.Triple("[", ", ", "]"), generated_0, generated_1)
}

@Sendable public static func StructuredWriter_breaked(_ generated_0: List_List<StructuredWriter_Writer>) ->  StructuredWriter_Writer {
    StructuredWriter_Writer.StructuredWriter_Breaked(generated_0)
}

@Sendable public static func StructuredWriter_indent(_ generated_0: Double, _ generated_1: StructuredWriter_Writer) ->  StructuredWriter_Writer {
    StructuredWriter_Writer.StructuredWriter_Indent(generated_0, generated_1)
}

@Sendable public static func StructuredWriter_join(_ generated_0: List_List<StructuredWriter_Writer>) ->  StructuredWriter_Writer {
    StructuredWriter_Writer.StructuredWriter_Joined(generated_0)
}

@Sendable public static func StructuredWriter_maybe(_ generated_0: Maybe_Maybe<StructuredWriter_Writer>) ->  StructuredWriter_Writer {
    Maybe_withDefault(StructuredWriter_epsilon, generated_0)
}

@Sendable public static func StructuredWriter_parensComma(_ generated_0: Bool, _ generated_1: List_List<StructuredWriter_Writer>) ->  StructuredWriter_Writer {
    StructuredWriter_Writer.StructuredWriter_Sep(Triple.Triple("(", ", ", ")"), generated_0, generated_1)
}

@Sendable public static func StructuredWriter_sepBy(_ generated_0: Triple<String, String, String>, _ generated_1: Bool, _ generated_2: List_List<StructuredWriter_Writer>) ->  StructuredWriter_Writer {
    StructuredWriter_Writer.StructuredWriter_Sep(generated_0, generated_1, generated_2)
}

@Sendable public static func StructuredWriter_sepByComma(_ generated_0: Bool, _ generated_1: List_List<StructuredWriter_Writer>) ->  StructuredWriter_Writer {
    StructuredWriter_Writer.StructuredWriter_Sep(Triple.Triple("", ", ", ""), generated_0, generated_1)
}

@Sendable public static func StructuredWriter_sepBySpace(_ generated_0: Bool, _ generated_1: List_List<StructuredWriter_Writer>) ->  StructuredWriter_Writer {
    StructuredWriter_Writer.StructuredWriter_Sep(Triple.Triple("", " ", ""), generated_0, generated_1)
}

@Sendable public static func StructuredWriter_spaced(_ generated_0: List_List<StructuredWriter_Writer>) ->  StructuredWriter_Writer {
    StructuredWriter_Writer.StructuredWriter_Spaced(generated_0)
}

@Sendable public static func StructuredWriter_string(_ generated_0: String) ->  StructuredWriter_Writer {
    StructuredWriter_Writer.StructuredWriter_Str(generated_0)
}

@Sendable public static func StructuredWriter_write(_ generated_0: StructuredWriter_Writer) ->  String {
    StructuredWriter_writeIndented(0.0, generated_0)
}

@Sendable public static func StructuredWriter_writeIndented(_ indent__: Double, _ w: StructuredWriter_Writer) ->  String {
    let generated_localReturnResult_declarationResult: String
    switch w {
    case let StructuredWriter_Writer.StructuredWriter_Sep(Triple.Triple(pre, sep, post), differentLines, items):
        let generated_let_caseResult_case0_declarationResult_seperator: String =
            if differentLines {
                String_append("\n", String_append(StructuredWriter_asIndent(indent__), sep))
            } else {
                sep
            }
        generated_localReturnResult_declarationResult =
            String_concat(
                Array_toList(
                    [ pre,
                      String_join(generated_let_caseResult_case0_declarationResult_seperator, List_map(Basics_composeR(Basics_identity, { (generated_called_right_argument0_argument1_1_argument0_letResult_caseResult_case0_declarationResult_1: StructuredWriter_Writer) in StructuredWriter_writeIndented(indent__, generated_called_right_argument0_argument1_1_argument0_letResult_caseResult_case0_declarationResult_1) }), items)),
                      post
                    ]
                )
            )
    case let StructuredWriter_Writer.StructuredWriter_Breaked(items):
        generated_localReturnResult_declarationResult =
            String_join(String_append("\n", StructuredWriter_asIndent(indent__)), List_concatMap(Basics_composeR({ (generated_called_left_argument0_right_left_caseResult_case1_declarationResult_1: StructuredWriter_Writer) in StructuredWriter_writeIndented(0.0, generated_called_left_argument0_right_left_caseResult_case1_declarationResult_1) }, { (generated_called_right_argument0_right_left_caseResult_case1_declarationResult_1: String) in String_split("\n", generated_called_right_argument0_right_left_caseResult_case1_declarationResult_1) }), items))
    case let StructuredWriter_Writer.StructuredWriter_Str(s):
        generated_localReturnResult_declarationResult =
            s
    case let StructuredWriter_Writer.StructuredWriter_Indent(n, next):
        generated_localReturnResult_declarationResult =
            String_append(StructuredWriter_asIndent(Basics_add(n, indent__)), StructuredWriter_writeIndented(Basics_add(n, indent__), next))
    case let StructuredWriter_Writer.StructuredWriter_Spaced(items):
        generated_localReturnResult_declarationResult =
            String_join(" ", List_map({ (generated_called_argument0_argument1_caseResult_case4_declarationResult_1: StructuredWriter_Writer) in StructuredWriter_writeIndented(indent__, generated_called_argument0_argument1_caseResult_case4_declarationResult_1) }, items))
    case let StructuredWriter_Writer.StructuredWriter_Joined(items):
        generated_localReturnResult_declarationResult =
            String_concat(List_map({ (generated_called_argument0_argument0_caseResult_case5_declarationResult_1: StructuredWriter_Writer) in StructuredWriter_writeIndented(indent__, generated_called_argument0_argument0_caseResult_case5_declarationResult_1) }, items))
    case let StructuredWriter_Writer.StructuredWriter_Append(x, y):
        generated_localReturnResult_declarationResult =
            String_append(StructuredWriter_writeIndented(indent__, x), StructuredWriter_writeIndented(indent__, y))
    }
    return generated_localReturnResult_declarationResult
}

@Sendable public static func Tuple_first<a: Sendable, b: Sendable>(_ generated_0: Tuple<a, b>) ->  a {
    let x: a
    switch generated_0 {
    case let Tuple.Tuple(generated_destructured_x, _):
        x =
            generated_destructured_x
    }
    return x
}

@Sendable public static func Tuple_mapBoth<a: Sendable, b: Sendable, x: Sendable, y: Sendable>(_ funcA: @Sendable @escaping (a) -> x, _ funcB: @Sendable @escaping (b) -> y, _ generated_2: Tuple<a, b>) ->  Tuple<x, y> {
    let x: a
    let y: b
    switch generated_2 {
    case let Tuple.Tuple(generated_destructured_x, generated_destructured_y):
        x =
            generated_destructured_x
        y =
            generated_destructured_y
    }
    return Tuple.Tuple(funcA(x), funcB(y))
}

@Sendable public static func Tuple_mapFirst<a: Sendable, b: Sendable, x: Sendable>(_ func_: @Sendable @escaping (a) -> x, _ generated_1: Tuple<a, b>) ->  Tuple<x, b> {
    let x: a
    let y: b
    switch generated_1 {
    case let Tuple.Tuple(generated_destructured_x, generated_destructured_y):
        x =
            generated_destructured_x
        y =
            generated_destructured_y
    }
    return Tuple.Tuple(func_(x), y)
}

@Sendable public static func Tuple_mapSecond<a: Sendable, b: Sendable, y: Sendable>(_ func_: @Sendable @escaping (b) -> y, _ generated_1: Tuple<a, b>) ->  Tuple<a, y> {
    let x: a
    let y: b
    switch generated_1 {
    case let Tuple.Tuple(generated_destructured_x, generated_destructured_y):
        x =
            generated_destructured_x
        y =
            generated_destructured_y
    }
    return Tuple.Tuple(x, func_(y))
}

@Sendable public static func Tuple_pair<a: Sendable, b: Sendable>(_ a: a, _ b: b) ->  Tuple<a, b> {
    Tuple.Tuple(a, b)
}

@Sendable public static func Tuple_second<a: Sendable, b: Sendable>(_ generated_0: Tuple<a, b>) ->  b {
    let y: b
    switch generated_0 {
    case let Tuple.Tuple(_, generated_destructured_y):
        y =
            generated_destructured_y
    }
    return y
}

@Sendable public static func Unicode_categoryFromString(_ generalCategory: String) ->  Maybe_Maybe<Unicode_Category> {
    switch generalCategory {
    case "Lu":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
    case "Ll":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
    case "Lt":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterTitlecase)
    case "Mn":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
    case "Mc":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
    case "Me":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkEnclosing)
    case "Nd":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
    case "Nl":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberLetter)
    case "No":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
    case "Zs":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SeparatorSpace)
    case "Zl":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SeparatorLine)
    case "Zp":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SeparatorParagraph)
    case "Cc":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherControl)
    case "Cf":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherFormat)
    case "Cs":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherSurrogate)
    case "Co":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherPrivateUse)
    case "Cn":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherNotAssigned)
    case "Lm":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
    case "Lo":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
    case "Pc":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationConnector)
    case "Pd":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationDash)
    case "Ps":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
    case "Pe":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
    case "Pi":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationInitialQuote)
    case "Pf":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationFinalQuote)
    case "Po":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
    case "Sm":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
    case "Sc":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolCurrency)
    case "Sk":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolModifier)
    case "So":
        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
    case _:
        Maybe_Maybe.Maybe_Nothing
    }
}

@Sendable public static func Unicode_categoryToDescription(_ generalCategory: Unicode_Category) ->  String {
    switch generalCategory {
    case Unicode_Category.Unicode_LetterUppercase:
        "Letter, Uppercase"
    case Unicode_Category.Unicode_LetterLowercase:
        "Letter, Lowercase"
    case Unicode_Category.Unicode_LetterTitlecase:
        "Letter, Titlecase"
    case Unicode_Category.Unicode_MarkNonSpacing:
        "Mark, Non-Spacing"
    case Unicode_Category.Unicode_MarkSpacingCombining:
        "Mark, Spacing Combining"
    case Unicode_Category.Unicode_MarkEnclosing:
        "Mark, Enclosing"
    case Unicode_Category.Unicode_NumberDecimalDigit:
        "Number, Decimal Digit"
    case Unicode_Category.Unicode_NumberLetter:
        "Number, Letter"
    case Unicode_Category.Unicode_NumberOther:
        "Number, Other"
    case Unicode_Category.Unicode_SeparatorSpace:
        "Separator, Space"
    case Unicode_Category.Unicode_SeparatorLine:
        "Separator, Line"
    case Unicode_Category.Unicode_SeparatorParagraph:
        "Separator, Paragraph"
    case Unicode_Category.Unicode_OtherControl:
        "Other, Control"
    case Unicode_Category.Unicode_OtherFormat:
        "Other, Format"
    case Unicode_Category.Unicode_OtherSurrogate:
        "Other, Surrogate"
    case Unicode_Category.Unicode_OtherPrivateUse:
        "Other, Private Use"
    case Unicode_Category.Unicode_OtherNotAssigned:
        "Other, Not Assigned"
    case Unicode_Category.Unicode_LetterModifier:
        "Letter, Modifier"
    case Unicode_Category.Unicode_LetterOther:
        "Letter, Other"
    case Unicode_Category.Unicode_PunctuationConnector:
        "Punctuation, Connector"
    case Unicode_Category.Unicode_PunctuationDash:
        "Punctuation, Dash"
    case Unicode_Category.Unicode_PunctuationOpen:
        "Punctuation, Open"
    case Unicode_Category.Unicode_PunctuationClose:
        "Punctuation, Close"
    case Unicode_Category.Unicode_PunctuationInitialQuote:
        "Punctuation, Initial quote"
    case Unicode_Category.Unicode_PunctuationFinalQuote:
        "Punctuation, Final quote"
    case Unicode_Category.Unicode_PunctuationOther:
        "Punctuation, Other"
    case Unicode_Category.Unicode_SymbolMath:
        "Symbol, Math"
    case Unicode_Category.Unicode_SymbolCurrency:
        "Symbol, Currency"
    case Unicode_Category.Unicode_SymbolModifier:
        "Symbol, Modifier"
    case Unicode_Category.Unicode_SymbolOther:
        "Symbol, Other"
    }
}

@Sendable public static func Unicode_categoryToString(_ generalCategory: Unicode_Category) ->  String {
    switch generalCategory {
    case Unicode_Category.Unicode_LetterUppercase:
        "Lu"
    case Unicode_Category.Unicode_LetterLowercase:
        "Ll"
    case Unicode_Category.Unicode_LetterTitlecase:
        "Lt"
    case Unicode_Category.Unicode_MarkNonSpacing:
        "Mn"
    case Unicode_Category.Unicode_MarkSpacingCombining:
        "Mc"
    case Unicode_Category.Unicode_MarkEnclosing:
        "Me"
    case Unicode_Category.Unicode_NumberDecimalDigit:
        "Nd"
    case Unicode_Category.Unicode_NumberLetter:
        "Nl"
    case Unicode_Category.Unicode_NumberOther:
        "No"
    case Unicode_Category.Unicode_SeparatorSpace:
        "Zs"
    case Unicode_Category.Unicode_SeparatorLine:
        "Zl"
    case Unicode_Category.Unicode_SeparatorParagraph:
        "Zp"
    case Unicode_Category.Unicode_OtherControl:
        "Cc"
    case Unicode_Category.Unicode_OtherFormat:
        "Cf"
    case Unicode_Category.Unicode_OtherSurrogate:
        "Cs"
    case Unicode_Category.Unicode_OtherPrivateUse:
        "Co"
    case Unicode_Category.Unicode_OtherNotAssigned:
        "Cn"
    case Unicode_Category.Unicode_LetterModifier:
        "Lm"
    case Unicode_Category.Unicode_LetterOther:
        "Lo"
    case Unicode_Category.Unicode_PunctuationConnector:
        "Pc"
    case Unicode_Category.Unicode_PunctuationDash:
        "Pd"
    case Unicode_Category.Unicode_PunctuationOpen:
        "Ps"
    case Unicode_Category.Unicode_PunctuationClose:
        "Pe"
    case Unicode_Category.Unicode_PunctuationInitialQuote:
        "Pi"
    case Unicode_Category.Unicode_PunctuationFinalQuote:
        "Pf"
    case Unicode_Category.Unicode_PunctuationOther:
        "Po"
    case Unicode_Category.Unicode_SymbolMath:
        "Sm"
    case Unicode_Category.Unicode_SymbolCurrency:
        "Sc"
    case Unicode_Category.Unicode_SymbolModifier:
        "Sk"
    case Unicode_Category.Unicode_SymbolOther:
        "So"
    }
}

@Sendable public static func Unicode_getCategory(_ c: UnicodeScalar) ->  Maybe_Maybe<Unicode_Category> {
    let generated_let_declarationResult_code: Double =
        Char_toCode(c)
    @Sendable func generated_let_declarationResult_e(_ hex: Double) ->  Bool {
        Basics_eq(hex, generated_let_declarationResult_code)
    }
    @Sendable func generated_let_declarationResult_l(_ hex: Double) ->  Bool {
        Basics_lt(generated_let_declarationResult_code, hex)
    }
    @Sendable func generated_let_declarationResult_r(_ from: Double, _ to: Double) ->  Bool {
        Basics_and(Basics_le(from, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, to))
    }
    return
        if generated_let_declarationResult_l(256.0) {
            if generated_let_declarationResult_l(160.0) {
                if generated_let_declarationResult_l(59.0) {
                    if generated_let_declarationResult_l(41.0) {
                        if Basics_le(generated_let_declarationResult_code, 31.0) {
                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherControl)
                        } else {
                            if generated_let_declarationResult_e(32.0) {
                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SeparatorSpace)
                            } else {
                                if Basics_or(generated_let_declarationResult_r(33.0, 35.0), generated_let_declarationResult_r(37.0, 39.0)) {
                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                } else {
                                    if generated_let_declarationResult_e(36.0) {
                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolCurrency)
                                    } else {
                                        if generated_let_declarationResult_e(40.0) {
                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                        } else {
                                            Maybe_Maybe.Maybe_Nothing
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if generated_let_declarationResult_e(41.0) {
                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                        } else {
                            if Basics_or(generated_let_declarationResult_e(42.0), Basics_or(generated_let_declarationResult_e(44.0), Basics_or(generated_let_declarationResult_r(46.0, 47.0), generated_let_declarationResult_e(58.0)))) {
                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                            } else {
                                if generated_let_declarationResult_e(43.0) {
                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                } else {
                                    if generated_let_declarationResult_e(45.0) {
                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationDash)
                                    } else {
                                        if generated_let_declarationResult_r(48.0, 57.0) {
                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                        } else {
                                            Maybe_Maybe.Maybe_Nothing
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if generated_let_declarationResult_l(94.0) {
                        if Basics_or(generated_let_declarationResult_e(59.0), Basics_or(generated_let_declarationResult_r(63.0, 64.0), generated_let_declarationResult_e(92.0))) {
                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                        } else {
                            if generated_let_declarationResult_r(60.0, 62.0) {
                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                            } else {
                                if generated_let_declarationResult_r(65.0, 90.0) {
                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                } else {
                                    if generated_let_declarationResult_e(91.0) {
                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                    } else {
                                        if generated_let_declarationResult_e(93.0) {
                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                        } else {
                                            Maybe_Maybe.Maybe_Nothing
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if Basics_or(generated_let_declarationResult_e(94.0), generated_let_declarationResult_e(96.0)) {
                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolModifier)
                        } else {
                            if generated_let_declarationResult_e(95.0) {
                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationConnector)
                            } else {
                                if generated_let_declarationResult_r(97.0, 122.0) {
                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                } else {
                                    if generated_let_declarationResult_e(123.0) {
                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                    } else {
                                        if Basics_or(generated_let_declarationResult_e(124.0), generated_let_declarationResult_e(126.0)) {
                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                        } else {
                                            if generated_let_declarationResult_e(125.0) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                            } else {
                                                if generated_let_declarationResult_r(127.0, 159.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherControl)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } else {
                if generated_let_declarationResult_l(177.0) {
                    if generated_let_declarationResult_l(169.0) {
                        if generated_let_declarationResult_e(160.0) {
                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SeparatorSpace)
                        } else {
                            if Basics_or(generated_let_declarationResult_e(161.0), generated_let_declarationResult_e(167.0)) {
                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                            } else {
                                if generated_let_declarationResult_r(162.0, 165.0) {
                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolCurrency)
                                } else {
                                    if generated_let_declarationResult_e(166.0) {
                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                    } else {
                                        if generated_let_declarationResult_e(168.0) {
                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolModifier)
                                        } else {
                                            Maybe_Maybe.Maybe_Nothing
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if Basics_or(generated_let_declarationResult_e(169.0), Basics_or(generated_let_declarationResult_e(174.0), generated_let_declarationResult_e(176.0))) {
                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                        } else {
                            if generated_let_declarationResult_e(170.0) {
                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                            } else {
                                if generated_let_declarationResult_e(171.0) {
                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationInitialQuote)
                                } else {
                                    if generated_let_declarationResult_e(172.0) {
                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                    } else {
                                        if generated_let_declarationResult_e(173.0) {
                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherFormat)
                                        } else {
                                            if generated_let_declarationResult_e(175.0) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolModifier)
                                            } else {
                                                Maybe_Maybe.Maybe_Nothing
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if generated_let_declarationResult_l(186.0) {
                        if generated_let_declarationResult_e(177.0) {
                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                        } else {
                            if Basics_or(generated_let_declarationResult_r(178.0, 179.0), generated_let_declarationResult_e(185.0)) {
                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                            } else {
                                if Basics_or(generated_let_declarationResult_e(180.0), generated_let_declarationResult_e(184.0)) {
                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolModifier)
                                } else {
                                    if generated_let_declarationResult_e(181.0) {
                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                    } else {
                                        if generated_let_declarationResult_r(182.0, 183.0) {
                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                        } else {
                                            Maybe_Maybe.Maybe_Nothing
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if generated_let_declarationResult_e(186.0) {
                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                        } else {
                            if generated_let_declarationResult_e(187.0) {
                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationFinalQuote)
                            } else {
                                if generated_let_declarationResult_r(188.0, 190.0) {
                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                } else {
                                    if generated_let_declarationResult_e(191.0) {
                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                    } else {
                                        if Basics_or(generated_let_declarationResult_r(192.0, 214.0), generated_let_declarationResult_r(216.0, 222.0)) {
                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                        } else {
                                            if Basics_or(generated_let_declarationResult_e(215.0), generated_let_declarationResult_e(247.0)) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(223.0, 246.0), generated_let_declarationResult_r(248.0, 255.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } else {
            if generated_let_declarationResult_l(9084.0) {
                if generated_let_declarationResult_l(3085.0) {
                    if generated_let_declarationResult_l(1166.0) {
                        if generated_let_declarationResult_l(488.0) {
                            if generated_let_declarationResult_l(356.0) {
                                if generated_let_declarationResult_l(304.0) {
                                    if generated_let_declarationResult_l(279.0) {
                                        if generated_let_declarationResult_l(266.0) {
                                            if Basics_or(generated_let_declarationResult_e(256.0), Basics_or(generated_let_declarationResult_e(258.0), Basics_or(generated_let_declarationResult_e(260.0), Basics_or(generated_let_declarationResult_e(262.0), generated_let_declarationResult_e(264.0))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(257.0), Basics_or(generated_let_declarationResult_e(259.0), Basics_or(generated_let_declarationResult_e(261.0), Basics_or(generated_let_declarationResult_e(263.0), generated_let_declarationResult_e(265.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(271.0) {
                                                if Basics_or(generated_let_declarationResult_e(266.0), Basics_or(generated_let_declarationResult_e(268.0), generated_let_declarationResult_e(270.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(267.0), generated_let_declarationResult_e(269.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(271.0), Basics_or(generated_let_declarationResult_e(273.0), Basics_or(generated_let_declarationResult_e(275.0), generated_let_declarationResult_e(277.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(272.0), Basics_or(generated_let_declarationResult_e(274.0), Basics_or(generated_let_declarationResult_e(276.0), generated_let_declarationResult_e(278.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(290.0) {
                                            if Basics_or(generated_let_declarationResult_e(279.0), Basics_or(generated_let_declarationResult_e(281.0), Basics_or(generated_let_declarationResult_e(283.0), Basics_or(generated_let_declarationResult_e(285.0), Basics_or(generated_let_declarationResult_e(287.0), generated_let_declarationResult_e(289.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(280.0), Basics_or(generated_let_declarationResult_e(282.0), Basics_or(generated_let_declarationResult_e(284.0), Basics_or(generated_let_declarationResult_e(286.0), generated_let_declarationResult_e(288.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(296.0) {
                                                if Basics_or(generated_let_declarationResult_e(290.0), Basics_or(generated_let_declarationResult_e(292.0), generated_let_declarationResult_e(294.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(291.0), Basics_or(generated_let_declarationResult_e(293.0), generated_let_declarationResult_e(295.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(296.0), Basics_or(generated_let_declarationResult_e(298.0), Basics_or(generated_let_declarationResult_e(300.0), generated_let_declarationResult_e(302.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(297.0), Basics_or(generated_let_declarationResult_e(299.0), Basics_or(generated_let_declarationResult_e(301.0), generated_let_declarationResult_e(303.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(330.0) {
                                        if generated_let_declarationResult_l(316.0) {
                                            if Basics_or(generated_let_declarationResult_e(304.0), Basics_or(generated_let_declarationResult_e(306.0), Basics_or(generated_let_declarationResult_e(308.0), Basics_or(generated_let_declarationResult_e(310.0), Basics_or(generated_let_declarationResult_e(313.0), generated_let_declarationResult_e(315.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(305.0), Basics_or(generated_let_declarationResult_e(307.0), Basics_or(generated_let_declarationResult_e(309.0), Basics_or(generated_let_declarationResult_r(311.0, 312.0), generated_let_declarationResult_e(314.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(321.0) {
                                                if Basics_or(generated_let_declarationResult_e(316.0), Basics_or(generated_let_declarationResult_e(318.0), generated_let_declarationResult_e(320.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(317.0), generated_let_declarationResult_e(319.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(321.0), Basics_or(generated_let_declarationResult_e(323.0), Basics_or(generated_let_declarationResult_e(325.0), generated_let_declarationResult_e(327.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(322.0), Basics_or(generated_let_declarationResult_e(324.0), Basics_or(generated_let_declarationResult_e(326.0), generated_let_declarationResult_r(328.0, 329.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(342.0) {
                                            if Basics_or(generated_let_declarationResult_e(330.0), Basics_or(generated_let_declarationResult_e(332.0), Basics_or(generated_let_declarationResult_e(334.0), Basics_or(generated_let_declarationResult_e(336.0), Basics_or(generated_let_declarationResult_e(338.0), generated_let_declarationResult_e(340.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(331.0), Basics_or(generated_let_declarationResult_e(333.0), Basics_or(generated_let_declarationResult_e(335.0), Basics_or(generated_let_declarationResult_e(337.0), Basics_or(generated_let_declarationResult_e(339.0), generated_let_declarationResult_e(341.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(348.0) {
                                                if Basics_or(generated_let_declarationResult_e(342.0), Basics_or(generated_let_declarationResult_e(344.0), generated_let_declarationResult_e(346.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(343.0), Basics_or(generated_let_declarationResult_e(345.0), generated_let_declarationResult_e(347.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(348.0), Basics_or(generated_let_declarationResult_e(350.0), Basics_or(generated_let_declarationResult_e(352.0), generated_let_declarationResult_e(354.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(349.0), Basics_or(generated_let_declarationResult_e(351.0), Basics_or(generated_let_declarationResult_e(353.0), generated_let_declarationResult_e(355.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if generated_let_declarationResult_l(424.0) {
                                    if generated_let_declarationResult_l(380.0) {
                                        if generated_let_declarationResult_l(366.0) {
                                            if Basics_or(generated_let_declarationResult_e(356.0), Basics_or(generated_let_declarationResult_e(358.0), Basics_or(generated_let_declarationResult_e(360.0), Basics_or(generated_let_declarationResult_e(362.0), generated_let_declarationResult_e(364.0))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(357.0), Basics_or(generated_let_declarationResult_e(359.0), Basics_or(generated_let_declarationResult_e(361.0), Basics_or(generated_let_declarationResult_e(363.0), generated_let_declarationResult_e(365.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(371.0) {
                                                if Basics_or(generated_let_declarationResult_e(366.0), Basics_or(generated_let_declarationResult_e(368.0), generated_let_declarationResult_e(370.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(367.0), generated_let_declarationResult_e(369.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(371.0), Basics_or(generated_let_declarationResult_e(373.0), Basics_or(generated_let_declarationResult_e(375.0), generated_let_declarationResult_e(378.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(372.0), Basics_or(generated_let_declarationResult_e(374.0), Basics_or(generated_let_declarationResult_r(376.0, 377.0), generated_let_declarationResult_e(379.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(402.0) {
                                            if Basics_or(generated_let_declarationResult_e(380.0), Basics_or(generated_let_declarationResult_r(382.0, 384.0), Basics_or(generated_let_declarationResult_e(387.0), Basics_or(generated_let_declarationResult_e(389.0), Basics_or(generated_let_declarationResult_e(392.0), generated_let_declarationResult_r(396.0, 397.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(381.0), Basics_or(generated_let_declarationResult_r(385.0, 386.0), Basics_or(generated_let_declarationResult_e(388.0), Basics_or(generated_let_declarationResult_r(390.0, 391.0), Basics_or(generated_let_declarationResult_r(393.0, 395.0), generated_let_declarationResult_r(398.0, 401.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(414.0) {
                                                if Basics_or(generated_let_declarationResult_e(402.0), Basics_or(generated_let_declarationResult_e(405.0), generated_let_declarationResult_r(409.0, 411.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(403.0, 404.0), Basics_or(generated_let_declarationResult_r(406.0, 408.0), generated_let_declarationResult_r(412.0, 413.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(414.0), Basics_or(generated_let_declarationResult_e(417.0), Basics_or(generated_let_declarationResult_e(419.0), generated_let_declarationResult_e(421.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(415.0, 416.0), Basics_or(generated_let_declarationResult_e(418.0), Basics_or(generated_let_declarationResult_e(420.0), generated_let_declarationResult_r(422.0, 423.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(460.0) {
                                        if generated_let_declarationResult_l(440.0) {
                                            if Basics_or(generated_let_declarationResult_e(424.0), Basics_or(generated_let_declarationResult_r(426.0, 427.0), Basics_or(generated_let_declarationResult_e(429.0), Basics_or(generated_let_declarationResult_e(432.0), Basics_or(generated_let_declarationResult_e(436.0), generated_let_declarationResult_e(438.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(425.0), Basics_or(generated_let_declarationResult_e(428.0), Basics_or(generated_let_declarationResult_r(430.0, 431.0), Basics_or(generated_let_declarationResult_r(433.0, 435.0), Basics_or(generated_let_declarationResult_e(437.0), generated_let_declarationResult_e(439.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(452.0) {
                                                if Basics_or(generated_let_declarationResult_e(440.0), generated_let_declarationResult_e(444.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(441.0, 442.0), generated_let_declarationResult_r(445.0, 447.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(443.0), generated_let_declarationResult_r(448.0, 451.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(452.0), Basics_or(generated_let_declarationResult_e(455.0), generated_let_declarationResult_e(458.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(453.0), Basics_or(generated_let_declarationResult_e(456.0), generated_let_declarationResult_e(459.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterTitlecase)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(454.0), generated_let_declarationResult_e(457.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(472.0) {
                                            if Basics_or(generated_let_declarationResult_e(460.0), Basics_or(generated_let_declarationResult_e(462.0), Basics_or(generated_let_declarationResult_e(464.0), Basics_or(generated_let_declarationResult_e(466.0), Basics_or(generated_let_declarationResult_e(468.0), generated_let_declarationResult_e(470.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(461.0), Basics_or(generated_let_declarationResult_e(463.0), Basics_or(generated_let_declarationResult_e(465.0), Basics_or(generated_let_declarationResult_e(467.0), Basics_or(generated_let_declarationResult_e(469.0), generated_let_declarationResult_e(471.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(479.0) {
                                                if Basics_or(generated_let_declarationResult_e(472.0), Basics_or(generated_let_declarationResult_e(474.0), generated_let_declarationResult_r(476.0, 477.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(473.0), Basics_or(generated_let_declarationResult_e(475.0), generated_let_declarationResult_e(478.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(479.0), Basics_or(generated_let_declarationResult_e(481.0), Basics_or(generated_let_declarationResult_e(483.0), Basics_or(generated_let_declarationResult_e(485.0), generated_let_declarationResult_e(487.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(480.0), Basics_or(generated_let_declarationResult_e(482.0), Basics_or(generated_let_declarationResult_e(484.0), generated_let_declarationResult_e(486.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if generated_let_declarationResult_l(767.0) {
                                if generated_let_declarationResult_l(540.0) {
                                    if generated_let_declarationResult_l(514.0) {
                                        if generated_let_declarationResult_l(499.0) {
                                            if Basics_or(generated_let_declarationResult_e(488.0), Basics_or(generated_let_declarationResult_e(490.0), Basics_or(generated_let_declarationResult_e(492.0), Basics_or(generated_let_declarationResult_e(494.0), generated_let_declarationResult_e(497.0))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(489.0), Basics_or(generated_let_declarationResult_e(491.0), Basics_or(generated_let_declarationResult_e(493.0), generated_let_declarationResult_r(495.0, 496.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if generated_let_declarationResult_e(498.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterTitlecase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(506.0) {
                                                if Basics_or(generated_let_declarationResult_e(499.0), Basics_or(generated_let_declarationResult_e(501.0), generated_let_declarationResult_e(505.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(500.0), generated_let_declarationResult_r(502.0, 504.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(506.0), Basics_or(generated_let_declarationResult_e(508.0), Basics_or(generated_let_declarationResult_e(510.0), generated_let_declarationResult_e(512.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(507.0), Basics_or(generated_let_declarationResult_e(509.0), Basics_or(generated_let_declarationResult_e(511.0), generated_let_declarationResult_e(513.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(526.0) {
                                            if Basics_or(generated_let_declarationResult_e(514.0), Basics_or(generated_let_declarationResult_e(516.0), Basics_or(generated_let_declarationResult_e(518.0), Basics_or(generated_let_declarationResult_e(520.0), Basics_or(generated_let_declarationResult_e(522.0), generated_let_declarationResult_e(524.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(515.0), Basics_or(generated_let_declarationResult_e(517.0), Basics_or(generated_let_declarationResult_e(519.0), Basics_or(generated_let_declarationResult_e(521.0), Basics_or(generated_let_declarationResult_e(523.0), generated_let_declarationResult_e(525.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(532.0) {
                                                if Basics_or(generated_let_declarationResult_e(526.0), Basics_or(generated_let_declarationResult_e(528.0), generated_let_declarationResult_e(530.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(527.0), Basics_or(generated_let_declarationResult_e(529.0), generated_let_declarationResult_e(531.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(532.0), Basics_or(generated_let_declarationResult_e(534.0), Basics_or(generated_let_declarationResult_e(536.0), generated_let_declarationResult_e(538.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(533.0), Basics_or(generated_let_declarationResult_e(535.0), Basics_or(generated_let_declarationResult_e(537.0), generated_let_declarationResult_e(539.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(572.0) {
                                        if generated_let_declarationResult_l(551.0) {
                                            if Basics_or(generated_let_declarationResult_e(540.0), Basics_or(generated_let_declarationResult_e(542.0), Basics_or(generated_let_declarationResult_e(544.0), Basics_or(generated_let_declarationResult_e(546.0), Basics_or(generated_let_declarationResult_e(548.0), generated_let_declarationResult_e(550.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(541.0), Basics_or(generated_let_declarationResult_e(543.0), Basics_or(generated_let_declarationResult_e(545.0), Basics_or(generated_let_declarationResult_e(547.0), generated_let_declarationResult_e(549.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(557.0) {
                                                if Basics_or(generated_let_declarationResult_e(551.0), Basics_or(generated_let_declarationResult_e(553.0), generated_let_declarationResult_e(555.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(552.0), Basics_or(generated_let_declarationResult_e(554.0), generated_let_declarationResult_e(556.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(557.0), Basics_or(generated_let_declarationResult_e(559.0), Basics_or(generated_let_declarationResult_e(561.0), generated_let_declarationResult_r(563.0, 569.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(558.0), Basics_or(generated_let_declarationResult_e(560.0), Basics_or(generated_let_declarationResult_e(562.0), generated_let_declarationResult_r(570.0, 571.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(589.0) {
                                            if Basics_or(generated_let_declarationResult_e(572.0), Basics_or(generated_let_declarationResult_r(575.0, 576.0), Basics_or(generated_let_declarationResult_e(578.0), Basics_or(generated_let_declarationResult_e(583.0), Basics_or(generated_let_declarationResult_e(585.0), generated_let_declarationResult_e(587.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(573.0, 574.0), Basics_or(generated_let_declarationResult_e(577.0), Basics_or(generated_let_declarationResult_r(579.0, 582.0), Basics_or(generated_let_declarationResult_e(584.0), Basics_or(generated_let_declarationResult_e(586.0), generated_let_declarationResult_e(588.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(709.0) {
                                                if Basics_or(generated_let_declarationResult_e(589.0), Basics_or(generated_let_declarationResult_r(591.0, 659.0), generated_let_declarationResult_r(661.0, 687.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if generated_let_declarationResult_e(590.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        if generated_let_declarationResult_e(660.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(688.0, 705.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                            } else {
                                                                if generated_let_declarationResult_r(706.0, 708.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolModifier)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(709.0), Basics_or(generated_let_declarationResult_r(722.0, 735.0), Basics_or(generated_let_declarationResult_r(741.0, 747.0), Basics_or(generated_let_declarationResult_e(749.0), generated_let_declarationResult_r(751.0, 766.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolModifier)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(710.0, 721.0), Basics_or(generated_let_declarationResult_r(736.0, 740.0), Basics_or(generated_let_declarationResult_e(748.0), generated_let_declarationResult_e(750.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if generated_let_declarationResult_l(1006.0) {
                                    if generated_let_declarationResult_l(975.0) {
                                        if generated_let_declarationResult_l(893.0) {
                                            if Basics_or(generated_let_declarationResult_e(767.0), generated_let_declarationResult_e(885.0)) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolModifier)
                                            } else {
                                                if generated_let_declarationResult_r(768.0, 879.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(880.0), Basics_or(generated_let_declarationResult_e(882.0), generated_let_declarationResult_e(886.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(881.0), Basics_or(generated_let_declarationResult_e(883.0), Basics_or(generated_let_declarationResult_e(887.0), generated_let_declarationResult_r(891.0, 892.0)))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_e(884.0), generated_let_declarationResult_e(890.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(903.0) {
                                                if generated_let_declarationResult_e(893.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if generated_let_declarationResult_e(894.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(895.0), generated_let_declarationResult_e(902.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                        } else {
                                                            if generated_let_declarationResult_r(900.0, 901.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolModifier)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if generated_let_declarationResult_e(903.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(904.0, 906.0), Basics_or(generated_let_declarationResult_e(908.0), Basics_or(generated_let_declarationResult_r(910.0, 911.0), Basics_or(generated_let_declarationResult_r(913.0, 929.0), generated_let_declarationResult_r(931.0, 939.0))))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(912.0), generated_let_declarationResult_r(940.0, 974.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(992.0) {
                                            if Basics_or(generated_let_declarationResult_e(975.0), Basics_or(generated_let_declarationResult_r(978.0, 980.0), Basics_or(generated_let_declarationResult_e(984.0), Basics_or(generated_let_declarationResult_e(986.0), Basics_or(generated_let_declarationResult_e(988.0), generated_let_declarationResult_e(990.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(976.0, 977.0), Basics_or(generated_let_declarationResult_r(981.0, 983.0), Basics_or(generated_let_declarationResult_e(985.0), Basics_or(generated_let_declarationResult_e(987.0), Basics_or(generated_let_declarationResult_e(989.0), generated_let_declarationResult_e(991.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(998.0) {
                                                if Basics_or(generated_let_declarationResult_e(992.0), Basics_or(generated_let_declarationResult_e(994.0), generated_let_declarationResult_e(996.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(993.0), Basics_or(generated_let_declarationResult_e(995.0), generated_let_declarationResult_e(997.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(998.0), Basics_or(generated_let_declarationResult_e(1000.0), Basics_or(generated_let_declarationResult_e(1002.0), generated_let_declarationResult_e(1004.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(999.0), Basics_or(generated_let_declarationResult_e(1001.0), Basics_or(generated_let_declarationResult_e(1003.0), generated_let_declarationResult_e(1005.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(1134.0) {
                                        if generated_let_declarationResult_l(1120.0) {
                                            if Basics_or(generated_let_declarationResult_e(1006.0), Basics_or(generated_let_declarationResult_e(1012.0), Basics_or(generated_let_declarationResult_e(1015.0), Basics_or(generated_let_declarationResult_r(1017.0, 1018.0), generated_let_declarationResult_r(1021.0, 1071.0))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(1007.0, 1011.0), Basics_or(generated_let_declarationResult_e(1013.0), Basics_or(generated_let_declarationResult_e(1016.0), Basics_or(generated_let_declarationResult_r(1019.0, 1020.0), generated_let_declarationResult_r(1072.0, 1119.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if generated_let_declarationResult_e(1014.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(1126.0) {
                                                if Basics_or(generated_let_declarationResult_e(1120.0), Basics_or(generated_let_declarationResult_e(1122.0), generated_let_declarationResult_e(1124.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(1121.0), Basics_or(generated_let_declarationResult_e(1123.0), generated_let_declarationResult_e(1125.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(1126.0), Basics_or(generated_let_declarationResult_e(1128.0), Basics_or(generated_let_declarationResult_e(1130.0), generated_let_declarationResult_e(1132.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(1127.0), Basics_or(generated_let_declarationResult_e(1129.0), Basics_or(generated_let_declarationResult_e(1131.0), generated_let_declarationResult_e(1133.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(1146.0) {
                                            if Basics_or(generated_let_declarationResult_e(1134.0), Basics_or(generated_let_declarationResult_e(1136.0), Basics_or(generated_let_declarationResult_e(1138.0), Basics_or(generated_let_declarationResult_e(1140.0), Basics_or(generated_let_declarationResult_e(1142.0), generated_let_declarationResult_e(1144.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(1135.0), Basics_or(generated_let_declarationResult_e(1137.0), Basics_or(generated_let_declarationResult_e(1139.0), Basics_or(generated_let_declarationResult_e(1141.0), Basics_or(generated_let_declarationResult_e(1143.0), generated_let_declarationResult_e(1145.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(1152.0) {
                                                if Basics_or(generated_let_declarationResult_e(1146.0), Basics_or(generated_let_declarationResult_e(1148.0), generated_let_declarationResult_e(1150.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(1147.0), Basics_or(generated_let_declarationResult_e(1149.0), generated_let_declarationResult_e(1151.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(1152.0), Basics_or(generated_let_declarationResult_e(1162.0), generated_let_declarationResult_e(1164.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(1153.0), Basics_or(generated_let_declarationResult_e(1163.0), generated_let_declarationResult_e(1165.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        if generated_let_declarationResult_e(1154.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(1155.0, 1159.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                            } else {
                                                                if generated_let_declarationResult_r(1160.0, 1161.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkEnclosing)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if generated_let_declarationResult_l(1756.0) {
                            if generated_let_declarationResult_l(1268.0) {
                                if generated_let_declarationResult_l(1215.0) {
                                    if generated_let_declarationResult_l(1189.0) {
                                        if generated_let_declarationResult_l(1176.0) {
                                            if Basics_or(generated_let_declarationResult_e(1166.0), Basics_or(generated_let_declarationResult_e(1168.0), Basics_or(generated_let_declarationResult_e(1170.0), Basics_or(generated_let_declarationResult_e(1172.0), generated_let_declarationResult_e(1174.0))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(1167.0), Basics_or(generated_let_declarationResult_e(1169.0), Basics_or(generated_let_declarationResult_e(1171.0), Basics_or(generated_let_declarationResult_e(1173.0), generated_let_declarationResult_e(1175.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(1181.0) {
                                                if Basics_or(generated_let_declarationResult_e(1176.0), Basics_or(generated_let_declarationResult_e(1178.0), generated_let_declarationResult_e(1180.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(1177.0), generated_let_declarationResult_e(1179.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(1181.0), Basics_or(generated_let_declarationResult_e(1183.0), Basics_or(generated_let_declarationResult_e(1185.0), generated_let_declarationResult_e(1187.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(1182.0), Basics_or(generated_let_declarationResult_e(1184.0), Basics_or(generated_let_declarationResult_e(1186.0), generated_let_declarationResult_e(1188.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(1201.0) {
                                            if Basics_or(generated_let_declarationResult_e(1189.0), Basics_or(generated_let_declarationResult_e(1191.0), Basics_or(generated_let_declarationResult_e(1193.0), Basics_or(generated_let_declarationResult_e(1195.0), Basics_or(generated_let_declarationResult_e(1197.0), generated_let_declarationResult_e(1199.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(1190.0), Basics_or(generated_let_declarationResult_e(1192.0), Basics_or(generated_let_declarationResult_e(1194.0), Basics_or(generated_let_declarationResult_e(1196.0), Basics_or(generated_let_declarationResult_e(1198.0), generated_let_declarationResult_e(1200.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(1207.0) {
                                                if Basics_or(generated_let_declarationResult_e(1201.0), Basics_or(generated_let_declarationResult_e(1203.0), generated_let_declarationResult_e(1205.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(1202.0), Basics_or(generated_let_declarationResult_e(1204.0), generated_let_declarationResult_e(1206.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(1207.0), Basics_or(generated_let_declarationResult_e(1209.0), Basics_or(generated_let_declarationResult_e(1211.0), generated_let_declarationResult_e(1213.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(1208.0), Basics_or(generated_let_declarationResult_e(1210.0), Basics_or(generated_let_declarationResult_e(1212.0), generated_let_declarationResult_e(1214.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(1241.0) {
                                        if generated_let_declarationResult_l(1227.0) {
                                            if Basics_or(generated_let_declarationResult_e(1215.0), Basics_or(generated_let_declarationResult_e(1218.0), Basics_or(generated_let_declarationResult_e(1220.0), Basics_or(generated_let_declarationResult_e(1222.0), Basics_or(generated_let_declarationResult_e(1224.0), generated_let_declarationResult_e(1226.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(1216.0, 1217.0), Basics_or(generated_let_declarationResult_e(1219.0), Basics_or(generated_let_declarationResult_e(1221.0), Basics_or(generated_let_declarationResult_e(1223.0), generated_let_declarationResult_e(1225.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(1233.0) {
                                                if Basics_or(generated_let_declarationResult_e(1227.0), Basics_or(generated_let_declarationResult_e(1229.0), generated_let_declarationResult_e(1232.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(1228.0), generated_let_declarationResult_r(1230.0, 1231.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(1233.0), Basics_or(generated_let_declarationResult_e(1235.0), Basics_or(generated_let_declarationResult_e(1237.0), generated_let_declarationResult_e(1239.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(1234.0), Basics_or(generated_let_declarationResult_e(1236.0), Basics_or(generated_let_declarationResult_e(1238.0), generated_let_declarationResult_e(1240.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(1253.0) {
                                            if Basics_or(generated_let_declarationResult_e(1241.0), Basics_or(generated_let_declarationResult_e(1243.0), Basics_or(generated_let_declarationResult_e(1245.0), Basics_or(generated_let_declarationResult_e(1247.0), Basics_or(generated_let_declarationResult_e(1249.0), generated_let_declarationResult_e(1251.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(1242.0), Basics_or(generated_let_declarationResult_e(1244.0), Basics_or(generated_let_declarationResult_e(1246.0), Basics_or(generated_let_declarationResult_e(1248.0), Basics_or(generated_let_declarationResult_e(1250.0), generated_let_declarationResult_e(1252.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(1259.0) {
                                                if Basics_or(generated_let_declarationResult_e(1253.0), Basics_or(generated_let_declarationResult_e(1255.0), generated_let_declarationResult_e(1257.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(1254.0), Basics_or(generated_let_declarationResult_e(1256.0), generated_let_declarationResult_e(1258.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(1259.0), Basics_or(generated_let_declarationResult_e(1261.0), Basics_or(generated_let_declarationResult_e(1263.0), Basics_or(generated_let_declarationResult_e(1265.0), generated_let_declarationResult_e(1267.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(1260.0), Basics_or(generated_let_declarationResult_e(1262.0), Basics_or(generated_let_declarationResult_e(1264.0), generated_let_declarationResult_e(1266.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if generated_let_declarationResult_l(1318.0) {
                                    if generated_let_declarationResult_l(1292.0) {
                                        if generated_let_declarationResult_l(1279.0) {
                                            if Basics_or(generated_let_declarationResult_e(1268.0), Basics_or(generated_let_declarationResult_e(1270.0), Basics_or(generated_let_declarationResult_e(1272.0), Basics_or(generated_let_declarationResult_e(1274.0), Basics_or(generated_let_declarationResult_e(1276.0), generated_let_declarationResult_e(1278.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(1269.0), Basics_or(generated_let_declarationResult_e(1271.0), Basics_or(generated_let_declarationResult_e(1273.0), Basics_or(generated_let_declarationResult_e(1275.0), generated_let_declarationResult_e(1277.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(1284.0) {
                                                if Basics_or(generated_let_declarationResult_e(1279.0), Basics_or(generated_let_declarationResult_e(1281.0), generated_let_declarationResult_e(1283.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(1280.0), generated_let_declarationResult_e(1282.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(1284.0), Basics_or(generated_let_declarationResult_e(1286.0), Basics_or(generated_let_declarationResult_e(1288.0), generated_let_declarationResult_e(1290.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(1285.0), Basics_or(generated_let_declarationResult_e(1287.0), Basics_or(generated_let_declarationResult_e(1289.0), generated_let_declarationResult_e(1291.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(1304.0) {
                                            if Basics_or(generated_let_declarationResult_e(1292.0), Basics_or(generated_let_declarationResult_e(1294.0), Basics_or(generated_let_declarationResult_e(1296.0), Basics_or(generated_let_declarationResult_e(1298.0), Basics_or(generated_let_declarationResult_e(1300.0), generated_let_declarationResult_e(1302.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(1293.0), Basics_or(generated_let_declarationResult_e(1295.0), Basics_or(generated_let_declarationResult_e(1297.0), Basics_or(generated_let_declarationResult_e(1299.0), Basics_or(generated_let_declarationResult_e(1301.0), generated_let_declarationResult_e(1303.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(1310.0) {
                                                if Basics_or(generated_let_declarationResult_e(1304.0), Basics_or(generated_let_declarationResult_e(1306.0), generated_let_declarationResult_e(1308.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(1305.0), Basics_or(generated_let_declarationResult_e(1307.0), generated_let_declarationResult_e(1309.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(1310.0), Basics_or(generated_let_declarationResult_e(1312.0), Basics_or(generated_let_declarationResult_e(1314.0), generated_let_declarationResult_e(1316.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(1311.0), Basics_or(generated_let_declarationResult_e(1313.0), Basics_or(generated_let_declarationResult_e(1315.0), generated_let_declarationResult_e(1317.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(1478.0) {
                                        if generated_let_declarationResult_l(1369.0) {
                                            if Basics_or(generated_let_declarationResult_e(1318.0), Basics_or(generated_let_declarationResult_e(1320.0), Basics_or(generated_let_declarationResult_e(1322.0), Basics_or(generated_let_declarationResult_e(1324.0), Basics_or(generated_let_declarationResult_e(1326.0), generated_let_declarationResult_r(1329.0, 1366.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(1319.0), Basics_or(generated_let_declarationResult_e(1321.0), Basics_or(generated_let_declarationResult_e(1323.0), Basics_or(generated_let_declarationResult_e(1325.0), generated_let_declarationResult_e(1327.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(1424.0) {
                                                if generated_let_declarationResult_e(1369.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(1370.0, 1375.0), generated_let_declarationResult_e(1417.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(1376.0, 1416.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                        } else {
                                                            if generated_let_declarationResult_e(1418.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationDash)
                                                            } else {
                                                                if generated_let_declarationResult_r(1421.0, 1422.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                                } else {
                                                                    if generated_let_declarationResult_e(1423.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolCurrency)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(1425.0, 1469.0), Basics_or(generated_let_declarationResult_e(1471.0), Basics_or(generated_let_declarationResult_r(1473.0, 1474.0), generated_let_declarationResult_r(1476.0, 1477.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if generated_let_declarationResult_e(1470.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationDash)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(1472.0), generated_let_declarationResult_e(1475.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(1563.0) {
                                            if Basics_or(generated_let_declarationResult_e(1478.0), Basics_or(generated_let_declarationResult_r(1523.0, 1524.0), Basics_or(generated_let_declarationResult_r(1545.0, 1546.0), generated_let_declarationResult_r(1548.0, 1549.0)))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(1479.0), generated_let_declarationResult_r(1552.0, 1562.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(1488.0, 1514.0), generated_let_declarationResult_r(1519.0, 1522.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(1536.0, 1541.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherFormat)
                                                        } else {
                                                            if generated_let_declarationResult_r(1542.0, 1544.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                            } else {
                                                                if generated_let_declarationResult_e(1547.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolCurrency)
                                                                } else {
                                                                    if generated_let_declarationResult_r(1550.0, 1551.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(1631.0) {
                                                if Basics_or(generated_let_declarationResult_e(1563.0), generated_let_declarationResult_r(1565.0, 1567.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                } else {
                                                    if generated_let_declarationResult_e(1564.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherFormat)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(1568.0, 1599.0), generated_let_declarationResult_r(1601.0, 1610.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            if generated_let_declarationResult_e(1600.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                            } else {
                                                                if generated_let_declarationResult_r(1611.0, 1630.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(1631.0), Basics_or(generated_let_declarationResult_e(1648.0), generated_let_declarationResult_r(1750.0, 1755.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if generated_let_declarationResult_r(1632.0, 1641.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(1642.0, 1645.0), generated_let_declarationResult_e(1748.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_r(1646.0, 1647.0), Basics_or(generated_let_declarationResult_r(1649.0, 1747.0), generated_let_declarationResult_e(1749.0))) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if generated_let_declarationResult_l(2556.0) {
                                if generated_let_declarationResult_l(2248.0) {
                                    if generated_let_declarationResult_l(2035.0) {
                                        if generated_let_declarationResult_l(1790.0) {
                                            if Basics_or(generated_let_declarationResult_e(1756.0), Basics_or(generated_let_declarationResult_r(1759.0, 1764.0), Basics_or(generated_let_declarationResult_r(1767.0, 1768.0), generated_let_declarationResult_r(1770.0, 1773.0)))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                            } else {
                                                if generated_let_declarationResult_e(1757.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherFormat)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(1758.0), Basics_or(generated_let_declarationResult_e(1769.0), generated_let_declarationResult_e(1789.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(1765.0, 1766.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_r(1774.0, 1775.0), generated_let_declarationResult_r(1786.0, 1788.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                            } else {
                                                                if generated_let_declarationResult_r(1776.0, 1785.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(1839.0) {
                                                if generated_let_declarationResult_e(1790.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(1791.0), Basics_or(generated_let_declarationResult_e(1808.0), generated_let_declarationResult_r(1810.0, 1838.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(1792.0, 1805.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            if generated_let_declarationResult_e(1807.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherFormat)
                                                            } else {
                                                                if generated_let_declarationResult_e(1809.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(1839.0), Basics_or(generated_let_declarationResult_r(1869.0, 1957.0), Basics_or(generated_let_declarationResult_e(1969.0), generated_let_declarationResult_r(1994.0, 2026.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(1840.0, 1866.0), Basics_or(generated_let_declarationResult_r(1958.0, 1968.0), generated_let_declarationResult_r(2027.0, 2034.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_r(1984.0, 1993.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(2087.0) {
                                            if generated_let_declarationResult_l(2045.0) {
                                                if generated_let_declarationResult_e(2035.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(2036.0, 2037.0), generated_let_declarationResult_e(2042.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                    } else {
                                                        if generated_let_declarationResult_e(2038.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(2039.0, 2041.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(2045.0), Basics_or(generated_let_declarationResult_r(2070.0, 2073.0), Basics_or(generated_let_declarationResult_r(2075.0, 2083.0), generated_let_declarationResult_r(2085.0, 2086.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if generated_let_declarationResult_r(2046.0, 2047.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolCurrency)
                                                    } else {
                                                        if generated_let_declarationResult_r(2048.0, 2069.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_e(2074.0), generated_let_declarationResult_e(2084.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(2143.0) {
                                                if Basics_or(generated_let_declarationResult_e(2087.0), Basics_or(generated_let_declarationResult_r(2089.0, 2093.0), generated_let_declarationResult_r(2137.0, 2139.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if generated_let_declarationResult_e(2088.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(2096.0, 2110.0), generated_let_declarationResult_e(2142.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(2112.0, 2136.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(2144.0, 2154.0), Basics_or(generated_let_declarationResult_r(2160.0, 2183.0), Basics_or(generated_let_declarationResult_r(2185.0, 2190.0), generated_let_declarationResult_r(2208.0, 2247.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_e(2184.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolModifier)
                                                    } else {
                                                        if generated_let_declarationResult_r(2192.0, 2193.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherFormat)
                                                        } else {
                                                            if generated_let_declarationResult_r(2200.0, 2207.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(2432.0) {
                                        if generated_let_declarationResult_l(2368.0) {
                                            if Basics_or(generated_let_declarationResult_e(2248.0), Basics_or(generated_let_declarationResult_r(2308.0, 2361.0), generated_let_declarationResult_e(2365.0))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                            } else {
                                                if generated_let_declarationResult_e(2249.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(2250.0, 2273.0), Basics_or(generated_let_declarationResult_r(2275.0, 2306.0), Basics_or(generated_let_declarationResult_e(2362.0), generated_let_declarationResult_e(2364.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_e(2274.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherFormat)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_e(2307.0), Basics_or(generated_let_declarationResult_e(2363.0), generated_let_declarationResult_r(2366.0, 2367.0))) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(2391.0) {
                                                if Basics_or(generated_let_declarationResult_e(2368.0), Basics_or(generated_let_declarationResult_r(2377.0, 2380.0), generated_let_declarationResult_r(2382.0, 2383.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(2369.0, 2376.0), Basics_or(generated_let_declarationResult_e(2381.0), generated_let_declarationResult_r(2385.0, 2390.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_e(2384.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(2391.0), generated_let_declarationResult_r(2402.0, 2403.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(2392.0, 2401.0), generated_let_declarationResult_r(2418.0, 2431.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(2404.0, 2405.0), generated_let_declarationResult_e(2416.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(2406.0, 2415.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                            } else {
                                                                if generated_let_declarationResult_e(2417.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(2502.0) {
                                            if generated_let_declarationResult_l(2473.0) {
                                                if Basics_or(generated_let_declarationResult_e(2432.0), Basics_or(generated_let_declarationResult_r(2437.0, 2444.0), Basics_or(generated_let_declarationResult_r(2447.0, 2448.0), generated_let_declarationResult_r(2451.0, 2472.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_e(2433.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_r(2434.0, 2435.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(2474.0, 2480.0), Basics_or(generated_let_declarationResult_e(2482.0), Basics_or(generated_let_declarationResult_r(2486.0, 2489.0), generated_let_declarationResult_e(2493.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(2492.0), generated_let_declarationResult_r(2497.0, 2500.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_r(2494.0, 2496.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(2529.0) {
                                                if Basics_or(generated_let_declarationResult_r(2503.0, 2504.0), Basics_or(generated_let_declarationResult_r(2507.0, 2508.0), generated_let_declarationResult_e(2519.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                } else {
                                                    if generated_let_declarationResult_e(2509.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(2510.0), Basics_or(generated_let_declarationResult_r(2524.0, 2525.0), generated_let_declarationResult_r(2527.0, 2528.0))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(2529.0), generated_let_declarationResult_r(2544.0, 2545.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_r(2530.0, 2531.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_r(2534.0, 2543.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_r(2546.0, 2547.0), generated_let_declarationResult_e(2555.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolCurrency)
                                                            } else {
                                                                if generated_let_declarationResult_r(2548.0, 2553.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                                } else {
                                                                    if generated_let_declarationResult_e(2554.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if generated_let_declarationResult_l(2820.0) {
                                    if generated_let_declarationResult_l(2688.0) {
                                        if generated_let_declarationResult_l(2619.0) {
                                            if Basics_or(generated_let_declarationResult_e(2556.0), Basics_or(generated_let_declarationResult_r(2565.0, 2570.0), Basics_or(generated_let_declarationResult_r(2575.0, 2576.0), Basics_or(generated_let_declarationResult_r(2579.0, 2600.0), Basics_or(generated_let_declarationResult_r(2602.0, 2608.0), Basics_or(generated_let_declarationResult_r(2610.0, 2611.0), Basics_or(generated_let_declarationResult_r(2613.0, 2614.0), generated_let_declarationResult_r(2616.0, 2617.0)))))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                            } else {
                                                if generated_let_declarationResult_e(2557.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(2558.0), generated_let_declarationResult_r(2561.0, 2562.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_e(2563.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(2648.0) {
                                                if Basics_or(generated_let_declarationResult_e(2620.0), Basics_or(generated_let_declarationResult_r(2625.0, 2626.0), Basics_or(generated_let_declarationResult_r(2631.0, 2632.0), Basics_or(generated_let_declarationResult_r(2635.0, 2637.0), generated_let_declarationResult_e(2641.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if generated_let_declarationResult_r(2622.0, 2624.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(2649.0, 2652.0), Basics_or(generated_let_declarationResult_e(2654.0), generated_let_declarationResult_r(2674.0, 2676.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_r(2662.0, 2671.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(2672.0, 2673.0), generated_let_declarationResult_e(2677.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            if generated_let_declarationResult_e(2678.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(2760.0) {
                                            if generated_let_declarationResult_l(2737.0) {
                                                if generated_let_declarationResult_r(2689.0, 2690.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if generated_let_declarationResult_e(2691.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(2693.0, 2701.0), Basics_or(generated_let_declarationResult_r(2703.0, 2705.0), Basics_or(generated_let_declarationResult_r(2707.0, 2728.0), generated_let_declarationResult_r(2730.0, 2736.0)))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(2738.0, 2739.0), Basics_or(generated_let_declarationResult_r(2741.0, 2745.0), generated_let_declarationResult_e(2749.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(2748.0), Basics_or(generated_let_declarationResult_r(2753.0, 2757.0), generated_let_declarationResult_e(2759.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_r(2750.0, 2752.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(2789.0) {
                                                if Basics_or(generated_let_declarationResult_e(2760.0), Basics_or(generated_let_declarationResult_e(2765.0), generated_let_declarationResult_r(2786.0, 2787.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(2761.0), generated_let_declarationResult_r(2763.0, 2764.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(2768.0), generated_let_declarationResult_r(2784.0, 2785.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if generated_let_declarationResult_r(2790.0, 2799.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                } else {
                                                    if generated_let_declarationResult_e(2800.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if generated_let_declarationResult_e(2801.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolCurrency)
                                                        } else {
                                                            if generated_let_declarationResult_e(2809.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                            } else {
                                                                if Basics_or(generated_let_declarationResult_r(2810.0, 2815.0), generated_let_declarationResult_e(2817.0)) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                                } else {
                                                                    if generated_let_declarationResult_r(2818.0, 2819.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(2948.0) {
                                        if generated_let_declarationResult_l(2890.0) {
                                            if generated_let_declarationResult_l(2875.0) {
                                                if Basics_or(generated_let_declarationResult_r(2821.0, 2828.0), Basics_or(generated_let_declarationResult_r(2831.0, 2832.0), Basics_or(generated_let_declarationResult_r(2835.0, 2856.0), Basics_or(generated_let_declarationResult_r(2858.0, 2864.0), Basics_or(generated_let_declarationResult_r(2866.0, 2867.0), generated_let_declarationResult_r(2869.0, 2873.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(2876.0), Basics_or(generated_let_declarationResult_e(2879.0), generated_let_declarationResult_r(2881.0, 2884.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if generated_let_declarationResult_e(2877.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(2878.0), Basics_or(generated_let_declarationResult_e(2880.0), generated_let_declarationResult_r(2887.0, 2888.0))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(2913.0) {
                                                if Basics_or(generated_let_declarationResult_r(2891.0, 2892.0), generated_let_declarationResult_e(2903.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(2893.0), generated_let_declarationResult_r(2901.0, 2902.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(2908.0, 2909.0), generated_let_declarationResult_r(2911.0, 2912.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(2913.0), Basics_or(generated_let_declarationResult_e(2929.0), generated_let_declarationResult_e(2947.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(2914.0, 2915.0), generated_let_declarationResult_e(2946.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_r(2918.0, 2927.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                        } else {
                                                            if generated_let_declarationResult_e(2928.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                            } else {
                                                                if generated_let_declarationResult_r(2930.0, 2935.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(3017.0) {
                                            if generated_let_declarationResult_l(2978.0) {
                                                if Basics_or(generated_let_declarationResult_r(2949.0, 2954.0), Basics_or(generated_let_declarationResult_r(2958.0, 2960.0), Basics_or(generated_let_declarationResult_r(2962.0, 2965.0), Basics_or(generated_let_declarationResult_r(2969.0, 2970.0), Basics_or(generated_let_declarationResult_e(2972.0), generated_let_declarationResult_r(2974.0, 2975.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(2979.0, 2980.0), Basics_or(generated_let_declarationResult_r(2984.0, 2986.0), generated_let_declarationResult_r(2990.0, 3001.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(3006.0, 3007.0), Basics_or(generated_let_declarationResult_r(3009.0, 3010.0), generated_let_declarationResult_r(3014.0, 3016.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if generated_let_declarationResult_e(3008.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(3058.0) {
                                                if Basics_or(generated_let_declarationResult_r(3018.0, 3020.0), generated_let_declarationResult_e(3031.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                } else {
                                                    if generated_let_declarationResult_e(3021.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_e(3024.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(3046.0, 3055.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                            } else {
                                                                if generated_let_declarationResult_r(3056.0, 3057.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if generated_let_declarationResult_e(3058.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(3059.0, 3064.0), generated_let_declarationResult_e(3066.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                    } else {
                                                        if generated_let_declarationResult_e(3065.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolCurrency)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_e(3072.0), generated_let_declarationResult_e(3076.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                            } else {
                                                                if generated_let_declarationResult_r(3073.0, 3075.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                                } else {
                                                                    if generated_let_declarationResult_r(3077.0, 3084.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if generated_let_declarationResult_l(7695.0) {
                        if generated_let_declarationResult_l(4881.0) {
                            if generated_let_declarationResult_l(3763.0) {
                                if generated_let_declarationResult_l(3389.0) {
                                    if generated_let_declarationResult_l(3217.0) {
                                        if generated_let_declarationResult_l(3167.0) {
                                            if Basics_or(generated_let_declarationResult_r(3086.0, 3088.0), Basics_or(generated_let_declarationResult_r(3090.0, 3112.0), Basics_or(generated_let_declarationResult_r(3114.0, 3129.0), Basics_or(generated_let_declarationResult_e(3133.0), Basics_or(generated_let_declarationResult_r(3160.0, 3162.0), generated_let_declarationResult_e(3165.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(3132.0), Basics_or(generated_let_declarationResult_r(3134.0, 3136.0), Basics_or(generated_let_declarationResult_r(3142.0, 3144.0), Basics_or(generated_let_declarationResult_r(3146.0, 3149.0), generated_let_declarationResult_r(3157.0, 3158.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if generated_let_declarationResult_r(3137.0, 3140.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        } else {
                                            if Basics_or(generated_let_declarationResult_r(3168.0, 3169.0), Basics_or(generated_let_declarationResult_e(3200.0), Basics_or(generated_let_declarationResult_r(3205.0, 3212.0), generated_let_declarationResult_r(3214.0, 3216.0)))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(3170.0, 3171.0), generated_let_declarationResult_e(3201.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if generated_let_declarationResult_r(3174.0, 3183.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(3191.0), generated_let_declarationResult_e(3204.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(3192.0, 3198.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                            } else {
                                                                if generated_let_declarationResult_e(3199.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                                } else {
                                                                    if generated_let_declarationResult_r(3202.0, 3203.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(3284.0) {
                                            if Basics_or(generated_let_declarationResult_r(3218.0, 3240.0), Basics_or(generated_let_declarationResult_r(3242.0, 3251.0), Basics_or(generated_let_declarationResult_r(3253.0, 3257.0), generated_let_declarationResult_e(3261.0)))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(3260.0), Basics_or(generated_let_declarationResult_e(3263.0), Basics_or(generated_let_declarationResult_e(3270.0), generated_let_declarationResult_r(3276.0, 3277.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(3262.0), Basics_or(generated_let_declarationResult_r(3264.0, 3268.0), Basics_or(generated_let_declarationResult_r(3271.0, 3272.0), generated_let_declarationResult_r(3274.0, 3275.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(3314.0) {
                                                if generated_let_declarationResult_r(3285.0, 3286.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(3293.0, 3294.0), Basics_or(generated_let_declarationResult_r(3296.0, 3297.0), generated_let_declarationResult_e(3313.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(3298.0, 3299.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            if generated_let_declarationResult_r(3302.0, 3311.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(3314.0), Basics_or(generated_let_declarationResult_r(3332.0, 3340.0), Basics_or(generated_let_declarationResult_r(3342.0, 3344.0), generated_let_declarationResult_r(3346.0, 3386.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(3315.0), generated_let_declarationResult_r(3330.0, 3331.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(3328.0, 3329.0), generated_let_declarationResult_r(3387.0, 3388.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(3534.0) {
                                        if generated_let_declarationResult_l(3425.0) {
                                            if Basics_or(generated_let_declarationResult_e(3389.0), Basics_or(generated_let_declarationResult_e(3406.0), Basics_or(generated_let_declarationResult_r(3412.0, 3414.0), generated_let_declarationResult_r(3423.0, 3424.0)))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(3390.0, 3392.0), Basics_or(generated_let_declarationResult_r(3398.0, 3400.0), Basics_or(generated_let_declarationResult_r(3402.0, 3404.0), generated_let_declarationResult_e(3415.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(3393.0, 3396.0), generated_let_declarationResult_e(3405.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_e(3407.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(3416.0, 3422.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(3457.0) {
                                                if Basics_or(generated_let_declarationResult_e(3425.0), generated_let_declarationResult_r(3450.0, 3455.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_r(3426.0, 3427.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_r(3430.0, 3439.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                        } else {
                                                            if generated_let_declarationResult_r(3440.0, 3448.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                            } else {
                                                                if generated_let_declarationResult_e(3449.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(3457.0), generated_let_declarationResult_e(3530.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if generated_let_declarationResult_r(3458.0, 3459.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(3461.0, 3478.0), Basics_or(generated_let_declarationResult_r(3482.0, 3505.0), Basics_or(generated_let_declarationResult_r(3507.0, 3515.0), Basics_or(generated_let_declarationResult_e(3517.0), generated_let_declarationResult_r(3520.0, 3526.0))))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(3653.0) {
                                            if generated_let_declarationResult_l(3571.0) {
                                                if Basics_or(generated_let_declarationResult_r(3535.0, 3537.0), Basics_or(generated_let_declarationResult_r(3544.0, 3551.0), generated_let_declarationResult_e(3570.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(3538.0, 3540.0), generated_let_declarationResult_e(3542.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_r(3558.0, 3567.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if generated_let_declarationResult_e(3571.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                } else {
                                                    if generated_let_declarationResult_e(3572.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(3585.0, 3632.0), Basics_or(generated_let_declarationResult_r(3634.0, 3635.0), generated_let_declarationResult_r(3648.0, 3652.0))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_e(3633.0), generated_let_declarationResult_r(3636.0, 3642.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                            } else {
                                                                if generated_let_declarationResult_e(3647.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolCurrency)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(3715.0) {
                                                if Basics_or(generated_let_declarationResult_e(3653.0), generated_let_declarationResult_r(3713.0, 3714.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_e(3654.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                    } else {
                                                        if generated_let_declarationResult_r(3655.0, 3662.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_e(3663.0), generated_let_declarationResult_r(3674.0, 3675.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                            } else {
                                                                if generated_let_declarationResult_r(3664.0, 3673.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(3716.0), Basics_or(generated_let_declarationResult_r(3718.0, 3722.0), Basics_or(generated_let_declarationResult_r(3724.0, 3747.0), Basics_or(generated_let_declarationResult_e(3749.0), Basics_or(generated_let_declarationResult_r(3751.0, 3760.0), generated_let_declarationResult_e(3762.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_e(3761.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if generated_let_declarationResult_l(4151.0) {
                                    if generated_let_declarationResult_l(3898.0) {
                                        if generated_let_declarationResult_l(3859.0) {
                                            if Basics_or(generated_let_declarationResult_e(3763.0), Basics_or(generated_let_declarationResult_e(3773.0), Basics_or(generated_let_declarationResult_r(3776.0, 3780.0), Basics_or(generated_let_declarationResult_r(3804.0, 3807.0), generated_let_declarationResult_e(3840.0))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(3764.0, 3772.0), generated_let_declarationResult_r(3784.0, 3790.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if generated_let_declarationResult_e(3782.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                    } else {
                                                        if generated_let_declarationResult_r(3792.0, 3801.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                        } else {
                                                            if generated_let_declarationResult_r(3841.0, 3843.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                            } else {
                                                                if generated_let_declarationResult_r(3844.0, 3858.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(3881.0) {
                                                if Basics_or(generated_let_declarationResult_e(3859.0), Basics_or(generated_let_declarationResult_r(3861.0, 3863.0), generated_let_declarationResult_r(3866.0, 3871.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if generated_let_declarationResult_e(3860.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(3864.0, 3865.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            if generated_let_declarationResult_r(3872.0, 3880.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if generated_let_declarationResult_e(3881.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                } else {
                                                    if generated_let_declarationResult_r(3882.0, 3891.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(3892.0), Basics_or(generated_let_declarationResult_e(3894.0), generated_let_declarationResult_e(3896.0))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_e(3893.0), Basics_or(generated_let_declarationResult_e(3895.0), generated_let_declarationResult_e(3897.0))) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(3980.0) {
                                            if generated_let_declarationResult_l(3912.0) {
                                                if Basics_or(generated_let_declarationResult_e(3898.0), generated_let_declarationResult_e(3900.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(3899.0), generated_let_declarationResult_e(3901.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                    } else {
                                                        if generated_let_declarationResult_r(3902.0, 3903.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                        } else {
                                                            if generated_let_declarationResult_r(3904.0, 3911.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(3913.0, 3948.0), generated_let_declarationResult_r(3976.0, 3979.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(3953.0, 3966.0), Basics_or(generated_let_declarationResult_r(3968.0, 3972.0), generated_let_declarationResult_r(3974.0, 3975.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_e(3967.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                        } else {
                                                            if generated_let_declarationResult_e(3973.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(4047.0) {
                                                if generated_let_declarationResult_e(3980.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(3981.0, 3991.0), Basics_or(generated_let_declarationResult_r(3993.0, 4028.0), generated_let_declarationResult_e(4038.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(4030.0, 4037.0), Basics_or(generated_let_declarationResult_r(4039.0, 4044.0), generated_let_declarationResult_e(4046.0))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(4047.0), generated_let_declarationResult_r(4053.0, 4056.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(4048.0, 4052.0), generated_let_declarationResult_r(4057.0, 4058.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(4096.0, 4138.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_r(4139.0, 4140.0), generated_let_declarationResult_e(4145.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                            } else {
                                                                if Basics_or(generated_let_declarationResult_r(4141.0, 4144.0), generated_let_declarationResult_r(4146.0, 4150.0)) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(4238.0) {
                                        if generated_let_declarationResult_l(4189.0) {
                                            if Basics_or(generated_let_declarationResult_e(4151.0), Basics_or(generated_let_declarationResult_r(4153.0, 4154.0), Basics_or(generated_let_declarationResult_r(4157.0, 4158.0), generated_let_declarationResult_r(4184.0, 4185.0)))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(4152.0), Basics_or(generated_let_declarationResult_r(4155.0, 4156.0), generated_let_declarationResult_r(4182.0, 4183.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(4159.0), Basics_or(generated_let_declarationResult_r(4176.0, 4181.0), generated_let_declarationResult_r(4186.0, 4188.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(4160.0, 4169.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                        } else {
                                                            if generated_let_declarationResult_r(4170.0, 4175.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(4208.0) {
                                                if Basics_or(generated_let_declarationResult_e(4189.0), Basics_or(generated_let_declarationResult_e(4193.0), Basics_or(generated_let_declarationResult_r(4197.0, 4198.0), generated_let_declarationResult_r(4206.0, 4207.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_r(4190.0, 4192.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(4194.0, 4196.0), generated_let_declarationResult_r(4199.0, 4205.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(4208.0), generated_let_declarationResult_r(4213.0, 4225.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(4209.0, 4212.0), Basics_or(generated_let_declarationResult_e(4226.0), Basics_or(generated_let_declarationResult_r(4229.0, 4230.0), generated_let_declarationResult_e(4237.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(4227.0, 4228.0), generated_let_declarationResult_r(4231.0, 4236.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(4351.0) {
                                            if generated_let_declarationResult_l(4255.0) {
                                                if generated_let_declarationResult_e(4238.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(4239.0), generated_let_declarationResult_r(4250.0, 4252.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if generated_let_declarationResult_r(4240.0, 4249.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                        } else {
                                                            if generated_let_declarationResult_e(4253.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                            } else {
                                                                if generated_let_declarationResult_e(4254.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if generated_let_declarationResult_e(4255.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(4256.0, 4293.0), Basics_or(generated_let_declarationResult_e(4295.0), generated_let_declarationResult_e(4301.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(4304.0, 4346.0), generated_let_declarationResult_r(4349.0, 4350.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                        } else {
                                                            if generated_let_declarationResult_e(4347.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                            } else {
                                                                if generated_let_declarationResult_e(4348.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(4745.0) {
                                                if generated_let_declarationResult_e(4351.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(4352.0, 4680.0), Basics_or(generated_let_declarationResult_r(4682.0, 4685.0), Basics_or(generated_let_declarationResult_r(4688.0, 4694.0), Basics_or(generated_let_declarationResult_e(4696.0), Basics_or(generated_let_declarationResult_r(4698.0, 4701.0), generated_let_declarationResult_r(4704.0, 4744.0)))))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(4746.0, 4749.0), Basics_or(generated_let_declarationResult_r(4752.0, 4784.0), Basics_or(generated_let_declarationResult_r(4786.0, 4789.0), Basics_or(generated_let_declarationResult_r(4792.0, 4798.0), Basics_or(generated_let_declarationResult_e(4800.0), Basics_or(generated_let_declarationResult_r(4802.0, 4805.0), Basics_or(generated_let_declarationResult_r(4808.0, 4822.0), generated_let_declarationResult_r(4824.0, 4880.0)))))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if generated_let_declarationResult_l(6764.0) {
                                if generated_let_declarationResult_l(6143.0) {
                                    if generated_let_declarationResult_l(5918.0) {
                                        if generated_let_declarationResult_l(5741.0) {
                                            if Basics_or(generated_let_declarationResult_r(4882.0, 4885.0), Basics_or(generated_let_declarationResult_r(4888.0, 4954.0), Basics_or(generated_let_declarationResult_r(4992.0, 5007.0), generated_let_declarationResult_r(5121.0, 5740.0)))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                            } else {
                                                if generated_let_declarationResult_r(4957.0, 4959.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if generated_let_declarationResult_r(4960.0, 4968.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(4969.0, 4988.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(5008.0, 5017.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                            } else {
                                                                if generated_let_declarationResult_r(5024.0, 5109.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                                } else {
                                                                    if generated_let_declarationResult_r(5112.0, 5117.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                                    } else {
                                                                        if generated_let_declarationResult_e(5120.0) {
                                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationDash)
                                                                        } else {
                                                                            Maybe_Maybe.Maybe_Nothing
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(5791.0) {
                                                if generated_let_declarationResult_e(5741.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if generated_let_declarationResult_e(5742.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(5743.0, 5759.0), generated_let_declarationResult_r(5761.0, 5786.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            if generated_let_declarationResult_e(5760.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SeparatorSpace)
                                                            } else {
                                                                if generated_let_declarationResult_e(5787.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                                } else {
                                                                    if generated_let_declarationResult_e(5788.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(5792.0, 5866.0), Basics_or(generated_let_declarationResult_r(5873.0, 5880.0), generated_let_declarationResult_r(5888.0, 5905.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_r(5867.0, 5869.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(5870.0, 5872.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberLetter)
                                                        } else {
                                                            if generated_let_declarationResult_r(5906.0, 5908.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                            } else {
                                                                if generated_let_declarationResult_e(5909.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(6070.0) {
                                            if Basics_or(generated_let_declarationResult_r(5919.0, 5937.0), Basics_or(generated_let_declarationResult_r(5952.0, 5969.0), Basics_or(generated_let_declarationResult_r(5984.0, 5996.0), Basics_or(generated_let_declarationResult_r(5998.0, 6000.0), generated_let_declarationResult_r(6016.0, 6067.0))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(5938.0, 5939.0), Basics_or(generated_let_declarationResult_r(5970.0, 5971.0), Basics_or(generated_let_declarationResult_r(6002.0, 6003.0), generated_let_declarationResult_r(6068.0, 6069.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if generated_let_declarationResult_e(5940.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if generated_let_declarationResult_r(5941.0, 5942.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(6102.0) {
                                                if Basics_or(generated_let_declarationResult_e(6070.0), Basics_or(generated_let_declarationResult_r(6078.0, 6085.0), generated_let_declarationResult_r(6087.0, 6088.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(6071.0, 6077.0), Basics_or(generated_let_declarationResult_e(6086.0), generated_let_declarationResult_r(6089.0, 6099.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_r(6100.0, 6101.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(6102.0), generated_let_declarationResult_r(6104.0, 6106.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                } else {
                                                    if generated_let_declarationResult_e(6103.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                    } else {
                                                        if generated_let_declarationResult_e(6107.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolCurrency)
                                                        } else {
                                                            if generated_let_declarationResult_e(6108.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                            } else {
                                                                if generated_let_declarationResult_e(6109.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                                } else {
                                                                    if generated_let_declarationResult_r(6112.0, 6121.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                                    } else {
                                                                        if generated_let_declarationResult_r(6128.0, 6137.0) {
                                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                                        } else {
                                                                            Maybe_Maybe.Maybe_Nothing
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(6463.0) {
                                        if generated_let_declarationResult_l(6278.0) {
                                            if Basics_or(generated_let_declarationResult_r(6144.0, 6149.0), generated_let_declarationResult_r(6151.0, 6154.0)) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                            } else {
                                                if generated_let_declarationResult_e(6150.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationDash)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(6155.0, 6157.0), Basics_or(generated_let_declarationResult_e(6159.0), generated_let_declarationResult_e(6277.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_e(6158.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherFormat)
                                                        } else {
                                                            if generated_let_declarationResult_r(6160.0, 6169.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                            } else {
                                                                if Basics_or(generated_let_declarationResult_r(6176.0, 6210.0), Basics_or(generated_let_declarationResult_r(6212.0, 6264.0), generated_let_declarationResult_r(6272.0, 6276.0))) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                                } else {
                                                                    if generated_let_declarationResult_e(6211.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(6434.0) {
                                                if Basics_or(generated_let_declarationResult_e(6278.0), Basics_or(generated_let_declarationResult_e(6313.0), generated_let_declarationResult_r(6432.0, 6433.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(6279.0, 6312.0), Basics_or(generated_let_declarationResult_e(6314.0), Basics_or(generated_let_declarationResult_r(6320.0, 6389.0), generated_let_declarationResult_r(6400.0, 6430.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(6434.0), Basics_or(generated_let_declarationResult_r(6439.0, 6440.0), Basics_or(generated_let_declarationResult_e(6450.0), generated_let_declarationResult_r(6457.0, 6459.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(6435.0, 6438.0), Basics_or(generated_let_declarationResult_r(6441.0, 6443.0), Basics_or(generated_let_declarationResult_r(6448.0, 6449.0), generated_let_declarationResult_r(6451.0, 6456.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(6680.0) {
                                            if Basics_or(generated_let_declarationResult_e(6464.0), generated_let_declarationResult_r(6622.0, 6655.0)) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                            } else {
                                                if generated_let_declarationResult_r(6468.0, 6469.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(6470.0, 6479.0), generated_let_declarationResult_r(6608.0, 6617.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(6480.0, 6509.0), Basics_or(generated_let_declarationResult_r(6512.0, 6516.0), Basics_or(generated_let_declarationResult_r(6528.0, 6571.0), Basics_or(generated_let_declarationResult_r(6576.0, 6601.0), generated_let_declarationResult_r(6656.0, 6678.0))))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            if generated_let_declarationResult_e(6618.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                            } else {
                                                                if generated_let_declarationResult_e(6679.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(6742.0) {
                                                if Basics_or(generated_let_declarationResult_e(6680.0), generated_let_declarationResult_e(6683.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(6681.0, 6682.0), generated_let_declarationResult_e(6741.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if generated_let_declarationResult_r(6686.0, 6687.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(6688.0, 6740.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(6742.0), Basics_or(generated_let_declarationResult_r(6744.0, 6750.0), Basics_or(generated_let_declarationResult_e(6752.0), Basics_or(generated_let_declarationResult_e(6754.0), generated_let_declarationResult_r(6757.0, 6763.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(6743.0), Basics_or(generated_let_declarationResult_e(6753.0), generated_let_declarationResult_r(6755.0, 6756.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if generated_let_declarationResult_l(7167.0) {
                                    if generated_let_declarationResult_l(7001.0) {
                                        if generated_let_declarationResult_l(6911.0) {
                                            if Basics_or(generated_let_declarationResult_e(6764.0), Basics_or(generated_let_declarationResult_r(6771.0, 6780.0), Basics_or(generated_let_declarationResult_e(6783.0), Basics_or(generated_let_declarationResult_r(6832.0, 6845.0), generated_let_declarationResult_r(6847.0, 6862.0))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                            } else {
                                                if generated_let_declarationResult_r(6765.0, 6770.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(6784.0, 6793.0), generated_let_declarationResult_r(6800.0, 6809.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(6816.0, 6822.0), generated_let_declarationResult_r(6824.0, 6829.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            if generated_let_declarationResult_e(6823.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                            } else {
                                                                if generated_let_declarationResult_e(6846.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkEnclosing)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(6970.0) {
                                                if Basics_or(generated_let_declarationResult_r(6912.0, 6915.0), Basics_or(generated_let_declarationResult_e(6964.0), generated_let_declarationResult_r(6966.0, 6969.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(6916.0), generated_let_declarationResult_e(6965.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if generated_let_declarationResult_r(6917.0, 6963.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(6970.0), Basics_or(generated_let_declarationResult_e(6972.0), generated_let_declarationResult_e(6978.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(6971.0), Basics_or(generated_let_declarationResult_r(6973.0, 6977.0), generated_let_declarationResult_r(6979.0, 6980.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if generated_let_declarationResult_r(6981.0, 6988.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(6992.0, 7000.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(7081.0) {
                                            if generated_let_declarationResult_l(7039.0) {
                                                if generated_let_declarationResult_e(7001.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(7002.0, 7008.0), generated_let_declarationResult_r(7037.0, 7038.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(7009.0, 7018.0), generated_let_declarationResult_r(7028.0, 7036.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(7019.0, 7027.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(7040.0, 7041.0), Basics_or(generated_let_declarationResult_r(7074.0, 7077.0), generated_let_declarationResult_e(7080.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(7042.0), Basics_or(generated_let_declarationResult_e(7073.0), generated_let_declarationResult_r(7078.0, 7079.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if generated_let_declarationResult_r(7043.0, 7072.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(7142.0) {
                                                if Basics_or(generated_let_declarationResult_e(7081.0), generated_let_declarationResult_r(7083.0, 7085.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if generated_let_declarationResult_e(7082.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(7086.0, 7087.0), generated_let_declarationResult_r(7098.0, 7141.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(7088.0, 7097.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(7142.0), Basics_or(generated_let_declarationResult_r(7144.0, 7145.0), Basics_or(generated_let_declarationResult_e(7149.0), generated_let_declarationResult_r(7151.0, 7153.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(7143.0), Basics_or(generated_let_declarationResult_r(7146.0, 7148.0), Basics_or(generated_let_declarationResult_e(7150.0), generated_let_declarationResult_r(7154.0, 7155.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if generated_let_declarationResult_r(7164.0, 7166.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(7412.0) {
                                        if generated_let_declarationResult_l(7293.0) {
                                            if Basics_or(generated_let_declarationResult_e(7167.0), generated_let_declarationResult_r(7227.0, 7231.0)) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(7168.0, 7203.0), Basics_or(generated_let_declarationResult_r(7245.0, 7247.0), generated_let_declarationResult_r(7258.0, 7287.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(7204.0, 7211.0), generated_let_declarationResult_r(7220.0, 7221.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(7212.0, 7219.0), generated_let_declarationResult_r(7222.0, 7223.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_r(7232.0, 7241.0), generated_let_declarationResult_r(7248.0, 7257.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                            } else {
                                                                if generated_let_declarationResult_r(7288.0, 7292.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(7378.0) {
                                                if generated_let_declarationResult_e(7293.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(7294.0, 7295.0), generated_let_declarationResult_r(7360.0, 7367.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(7296.0, 7304.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_r(7312.0, 7354.0), generated_let_declarationResult_r(7357.0, 7359.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                            } else {
                                                                if generated_let_declarationResult_r(7376.0, 7377.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(7378.0), Basics_or(generated_let_declarationResult_r(7380.0, 7392.0), Basics_or(generated_let_declarationResult_r(7394.0, 7400.0), generated_let_declarationResult_e(7405.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if generated_let_declarationResult_e(7379.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if generated_let_declarationResult_e(7393.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_r(7401.0, 7404.0), generated_let_declarationResult_r(7406.0, 7411.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(7680.0) {
                                            if Basics_or(generated_let_declarationResult_e(7412.0), Basics_or(generated_let_declarationResult_r(7416.0, 7417.0), generated_let_declarationResult_r(7616.0, 7679.0))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(7413.0, 7414.0), generated_let_declarationResult_e(7418.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_e(7415.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(7424.0, 7467.0), Basics_or(generated_let_declarationResult_r(7531.0, 7543.0), generated_let_declarationResult_r(7545.0, 7578.0))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_r(7468.0, 7530.0), Basics_or(generated_let_declarationResult_e(7544.0), generated_let_declarationResult_r(7579.0, 7615.0))) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(7686.0) {
                                                if Basics_or(generated_let_declarationResult_e(7680.0), Basics_or(generated_let_declarationResult_e(7682.0), generated_let_declarationResult_e(7684.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(7681.0), Basics_or(generated_let_declarationResult_e(7683.0), generated_let_declarationResult_e(7685.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(7686.0), Basics_or(generated_let_declarationResult_e(7688.0), Basics_or(generated_let_declarationResult_e(7690.0), Basics_or(generated_let_declarationResult_e(7692.0), generated_let_declarationResult_e(7694.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(7687.0), Basics_or(generated_let_declarationResult_e(7689.0), Basics_or(generated_let_declarationResult_e(7691.0), generated_let_declarationResult_e(7693.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if generated_let_declarationResult_l(7904.0) {
                            if generated_let_declarationResult_l(7794.0) {
                                if generated_let_declarationResult_l(7743.0) {
                                    if generated_let_declarationResult_l(7718.0) {
                                        if generated_let_declarationResult_l(7705.0) {
                                            if Basics_or(generated_let_declarationResult_e(7695.0), Basics_or(generated_let_declarationResult_e(7697.0), Basics_or(generated_let_declarationResult_e(7699.0), Basics_or(generated_let_declarationResult_e(7701.0), generated_let_declarationResult_e(7703.0))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(7696.0), Basics_or(generated_let_declarationResult_e(7698.0), Basics_or(generated_let_declarationResult_e(7700.0), Basics_or(generated_let_declarationResult_e(7702.0), generated_let_declarationResult_e(7704.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(7710.0) {
                                                if Basics_or(generated_let_declarationResult_e(7705.0), Basics_or(generated_let_declarationResult_e(7707.0), generated_let_declarationResult_e(7709.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(7706.0), generated_let_declarationResult_e(7708.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(7710.0), Basics_or(generated_let_declarationResult_e(7712.0), Basics_or(generated_let_declarationResult_e(7714.0), generated_let_declarationResult_e(7716.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(7711.0), Basics_or(generated_let_declarationResult_e(7713.0), Basics_or(generated_let_declarationResult_e(7715.0), generated_let_declarationResult_e(7717.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(7729.0) {
                                            if Basics_or(generated_let_declarationResult_e(7718.0), Basics_or(generated_let_declarationResult_e(7720.0), Basics_or(generated_let_declarationResult_e(7722.0), Basics_or(generated_let_declarationResult_e(7724.0), Basics_or(generated_let_declarationResult_e(7726.0), generated_let_declarationResult_e(7728.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(7719.0), Basics_or(generated_let_declarationResult_e(7721.0), Basics_or(generated_let_declarationResult_e(7723.0), Basics_or(generated_let_declarationResult_e(7725.0), generated_let_declarationResult_e(7727.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(7735.0) {
                                                if Basics_or(generated_let_declarationResult_e(7729.0), Basics_or(generated_let_declarationResult_e(7731.0), generated_let_declarationResult_e(7733.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(7730.0), Basics_or(generated_let_declarationResult_e(7732.0), generated_let_declarationResult_e(7734.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(7735.0), Basics_or(generated_let_declarationResult_e(7737.0), Basics_or(generated_let_declarationResult_e(7739.0), generated_let_declarationResult_e(7741.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(7736.0), Basics_or(generated_let_declarationResult_e(7738.0), Basics_or(generated_let_declarationResult_e(7740.0), generated_let_declarationResult_e(7742.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(7767.0) {
                                        if generated_let_declarationResult_l(7754.0) {
                                            if Basics_or(generated_let_declarationResult_e(7743.0), Basics_or(generated_let_declarationResult_e(7745.0), Basics_or(generated_let_declarationResult_e(7747.0), Basics_or(generated_let_declarationResult_e(7749.0), Basics_or(generated_let_declarationResult_e(7751.0), generated_let_declarationResult_e(7753.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(7744.0), Basics_or(generated_let_declarationResult_e(7746.0), Basics_or(generated_let_declarationResult_e(7748.0), Basics_or(generated_let_declarationResult_e(7750.0), generated_let_declarationResult_e(7752.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(7759.0) {
                                                if Basics_or(generated_let_declarationResult_e(7754.0), Basics_or(generated_let_declarationResult_e(7756.0), generated_let_declarationResult_e(7758.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(7755.0), generated_let_declarationResult_e(7757.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(7759.0), Basics_or(generated_let_declarationResult_e(7761.0), Basics_or(generated_let_declarationResult_e(7763.0), generated_let_declarationResult_e(7765.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(7760.0), Basics_or(generated_let_declarationResult_e(7762.0), Basics_or(generated_let_declarationResult_e(7764.0), generated_let_declarationResult_e(7766.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(7779.0) {
                                            if Basics_or(generated_let_declarationResult_e(7767.0), Basics_or(generated_let_declarationResult_e(7769.0), Basics_or(generated_let_declarationResult_e(7771.0), Basics_or(generated_let_declarationResult_e(7773.0), Basics_or(generated_let_declarationResult_e(7775.0), generated_let_declarationResult_e(7777.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(7768.0), Basics_or(generated_let_declarationResult_e(7770.0), Basics_or(generated_let_declarationResult_e(7772.0), Basics_or(generated_let_declarationResult_e(7774.0), Basics_or(generated_let_declarationResult_e(7776.0), generated_let_declarationResult_e(7778.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(7785.0) {
                                                if Basics_or(generated_let_declarationResult_e(7779.0), Basics_or(generated_let_declarationResult_e(7781.0), generated_let_declarationResult_e(7783.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(7780.0), Basics_or(generated_let_declarationResult_e(7782.0), generated_let_declarationResult_e(7784.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(7785.0), Basics_or(generated_let_declarationResult_e(7787.0), Basics_or(generated_let_declarationResult_e(7789.0), Basics_or(generated_let_declarationResult_e(7791.0), generated_let_declarationResult_e(7793.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(7786.0), Basics_or(generated_let_declarationResult_e(7788.0), Basics_or(generated_let_declarationResult_e(7790.0), generated_let_declarationResult_e(7792.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if generated_let_declarationResult_l(7852.0) {
                                    if generated_let_declarationResult_l(7818.0) {
                                        if generated_let_declarationResult_l(7805.0) {
                                            if Basics_or(generated_let_declarationResult_e(7794.0), Basics_or(generated_let_declarationResult_e(7796.0), Basics_or(generated_let_declarationResult_e(7798.0), Basics_or(generated_let_declarationResult_e(7800.0), Basics_or(generated_let_declarationResult_e(7802.0), generated_let_declarationResult_e(7804.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(7795.0), Basics_or(generated_let_declarationResult_e(7797.0), Basics_or(generated_let_declarationResult_e(7799.0), Basics_or(generated_let_declarationResult_e(7801.0), generated_let_declarationResult_e(7803.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(7810.0) {
                                                if Basics_or(generated_let_declarationResult_e(7805.0), Basics_or(generated_let_declarationResult_e(7807.0), generated_let_declarationResult_e(7809.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(7806.0), generated_let_declarationResult_e(7808.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(7810.0), Basics_or(generated_let_declarationResult_e(7812.0), Basics_or(generated_let_declarationResult_e(7814.0), generated_let_declarationResult_e(7816.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(7811.0), Basics_or(generated_let_declarationResult_e(7813.0), Basics_or(generated_let_declarationResult_e(7815.0), generated_let_declarationResult_e(7817.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(7838.0) {
                                            if Basics_or(generated_let_declarationResult_e(7818.0), Basics_or(generated_let_declarationResult_e(7820.0), Basics_or(generated_let_declarationResult_e(7822.0), Basics_or(generated_let_declarationResult_e(7824.0), Basics_or(generated_let_declarationResult_e(7826.0), generated_let_declarationResult_e(7828.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(7819.0), Basics_or(generated_let_declarationResult_e(7821.0), Basics_or(generated_let_declarationResult_e(7823.0), Basics_or(generated_let_declarationResult_e(7825.0), Basics_or(generated_let_declarationResult_e(7827.0), generated_let_declarationResult_r(7829.0, 7837.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(7844.0) {
                                                if Basics_or(generated_let_declarationResult_e(7838.0), Basics_or(generated_let_declarationResult_e(7840.0), generated_let_declarationResult_e(7842.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(7839.0), Basics_or(generated_let_declarationResult_e(7841.0), generated_let_declarationResult_e(7843.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(7844.0), Basics_or(generated_let_declarationResult_e(7846.0), Basics_or(generated_let_declarationResult_e(7848.0), generated_let_declarationResult_e(7850.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(7845.0), Basics_or(generated_let_declarationResult_e(7847.0), Basics_or(generated_let_declarationResult_e(7849.0), generated_let_declarationResult_e(7851.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(7877.0) {
                                        if generated_let_declarationResult_l(7863.0) {
                                            if Basics_or(generated_let_declarationResult_e(7852.0), Basics_or(generated_let_declarationResult_e(7854.0), Basics_or(generated_let_declarationResult_e(7856.0), Basics_or(generated_let_declarationResult_e(7858.0), Basics_or(generated_let_declarationResult_e(7860.0), generated_let_declarationResult_e(7862.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(7853.0), Basics_or(generated_let_declarationResult_e(7855.0), Basics_or(generated_let_declarationResult_e(7857.0), Basics_or(generated_let_declarationResult_e(7859.0), generated_let_declarationResult_e(7861.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(7869.0) {
                                                if Basics_or(generated_let_declarationResult_e(7863.0), Basics_or(generated_let_declarationResult_e(7865.0), generated_let_declarationResult_e(7867.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(7864.0), Basics_or(generated_let_declarationResult_e(7866.0), generated_let_declarationResult_e(7868.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(7869.0), Basics_or(generated_let_declarationResult_e(7871.0), Basics_or(generated_let_declarationResult_e(7873.0), generated_let_declarationResult_e(7875.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(7870.0), Basics_or(generated_let_declarationResult_e(7872.0), Basics_or(generated_let_declarationResult_e(7874.0), generated_let_declarationResult_e(7876.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(7889.0) {
                                            if Basics_or(generated_let_declarationResult_e(7877.0), Basics_or(generated_let_declarationResult_e(7879.0), Basics_or(generated_let_declarationResult_e(7881.0), Basics_or(generated_let_declarationResult_e(7883.0), Basics_or(generated_let_declarationResult_e(7885.0), generated_let_declarationResult_e(7887.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(7878.0), Basics_or(generated_let_declarationResult_e(7880.0), Basics_or(generated_let_declarationResult_e(7882.0), Basics_or(generated_let_declarationResult_e(7884.0), Basics_or(generated_let_declarationResult_e(7886.0), generated_let_declarationResult_e(7888.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(7895.0) {
                                                if Basics_or(generated_let_declarationResult_e(7889.0), Basics_or(generated_let_declarationResult_e(7891.0), generated_let_declarationResult_e(7893.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(7890.0), Basics_or(generated_let_declarationResult_e(7892.0), generated_let_declarationResult_e(7894.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(7895.0), Basics_or(generated_let_declarationResult_e(7897.0), Basics_or(generated_let_declarationResult_e(7899.0), Basics_or(generated_let_declarationResult_e(7901.0), generated_let_declarationResult_e(7903.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(7896.0), Basics_or(generated_let_declarationResult_e(7898.0), Basics_or(generated_let_declarationResult_e(7900.0), generated_let_declarationResult_e(7902.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if generated_let_declarationResult_l(8273.0) {
                                if generated_let_declarationResult_l(8103.0) {
                                    if generated_let_declarationResult_l(7928.0) {
                                        if generated_let_declarationResult_l(7915.0) {
                                            if Basics_or(generated_let_declarationResult_e(7904.0), Basics_or(generated_let_declarationResult_e(7906.0), Basics_or(generated_let_declarationResult_e(7908.0), Basics_or(generated_let_declarationResult_e(7910.0), Basics_or(generated_let_declarationResult_e(7912.0), generated_let_declarationResult_e(7914.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(7905.0), Basics_or(generated_let_declarationResult_e(7907.0), Basics_or(generated_let_declarationResult_e(7909.0), Basics_or(generated_let_declarationResult_e(7911.0), generated_let_declarationResult_e(7913.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(7920.0) {
                                                if Basics_or(generated_let_declarationResult_e(7915.0), Basics_or(generated_let_declarationResult_e(7917.0), generated_let_declarationResult_e(7919.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(7916.0), generated_let_declarationResult_e(7918.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(7920.0), Basics_or(generated_let_declarationResult_e(7922.0), Basics_or(generated_let_declarationResult_e(7924.0), generated_let_declarationResult_e(7926.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(7921.0), Basics_or(generated_let_declarationResult_e(7923.0), Basics_or(generated_let_declarationResult_e(7925.0), generated_let_declarationResult_e(7927.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(7983.0) {
                                            if generated_let_declarationResult_l(7933.0) {
                                                if Basics_or(generated_let_declarationResult_e(7928.0), Basics_or(generated_let_declarationResult_e(7930.0), generated_let_declarationResult_e(7932.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(7929.0), generated_let_declarationResult_e(7931.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(7933.0), Basics_or(generated_let_declarationResult_r(7935.0, 7943.0), Basics_or(generated_let_declarationResult_r(7952.0, 7957.0), generated_let_declarationResult_r(7968.0, 7975.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(7934.0), Basics_or(generated_let_declarationResult_r(7944.0, 7951.0), Basics_or(generated_let_declarationResult_r(7960.0, 7965.0), generated_let_declarationResult_r(7976.0, 7982.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(8039.0) {
                                                if Basics_or(generated_let_declarationResult_e(7983.0), Basics_or(generated_let_declarationResult_r(7992.0, 7999.0), Basics_or(generated_let_declarationResult_r(8008.0, 8013.0), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 1.0), generated_let_declarationResult_r(8025.0, 8031.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(7984.0, 7991.0), Basics_or(generated_let_declarationResult_r(8000.0, 8005.0), Basics_or(generated_let_declarationResult_r(8016.0, 8023.0), generated_let_declarationResult_r(8032.0, 8038.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(8039.0), Basics_or(generated_let_declarationResult_r(8048.0, 8061.0), Basics_or(generated_let_declarationResult_r(8064.0, 8071.0), Basics_or(generated_let_declarationResult_r(8080.0, 8087.0), generated_let_declarationResult_r(8096.0, 8102.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if generated_let_declarationResult_r(8040.0, 8047.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(8072.0, 8079.0), generated_let_declarationResult_r(8088.0, 8095.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterTitlecase)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(8191.0) {
                                        if generated_let_declarationResult_l(8140.0) {
                                            if Basics_or(generated_let_declarationResult_e(8103.0), Basics_or(generated_let_declarationResult_r(8112.0, 8116.0), Basics_or(generated_let_declarationResult_r(8118.0, 8119.0), Basics_or(generated_let_declarationResult_e(8126.0), Basics_or(generated_let_declarationResult_r(8130.0, 8132.0), generated_let_declarationResult_r(8134.0, 8135.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(8104.0, 8111.0), generated_let_declarationResult_e(8124.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterTitlecase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(8120.0, 8123.0), generated_let_declarationResult_r(8136.0, 8139.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(8125.0), generated_let_declarationResult_r(8127.0, 8129.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolModifier)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(8167.0) {
                                                if generated_let_declarationResult_e(8140.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterTitlecase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(8141.0, 8143.0), generated_let_declarationResult_r(8157.0, 8159.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolModifier)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(8144.0, 8147.0), Basics_or(generated_let_declarationResult_r(8150.0, 8151.0), generated_let_declarationResult_r(8160.0, 8166.0))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                        } else {
                                                            if generated_let_declarationResult_r(8152.0, 8155.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(8167.0), Basics_or(generated_let_declarationResult_r(8178.0, 8180.0), generated_let_declarationResult_r(8182.0, 8183.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(8168.0, 8172.0), generated_let_declarationResult_r(8184.0, 8187.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(8173.0, 8175.0), generated_let_declarationResult_r(8189.0, 8190.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolModifier)
                                                        } else {
                                                            if generated_let_declarationResult_e(8188.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterTitlecase)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(8232.0) {
                                            if generated_let_declarationResult_r(8192.0, 8202.0) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SeparatorSpace)
                                            } else {
                                                if generated_let_declarationResult_r(8203.0, 8207.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherFormat)
                                                } else {
                                                    if generated_let_declarationResult_r(8208.0, 8213.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationDash)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(8214.0, 8215.0), generated_let_declarationResult_r(8224.0, 8231.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_e(8216.0), Basics_or(generated_let_declarationResult_r(8219.0, 8220.0), generated_let_declarationResult_e(8223.0))) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationInitialQuote)
                                                            } else {
                                                                if Basics_or(generated_let_declarationResult_e(8217.0), generated_let_declarationResult_e(8221.0)) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationFinalQuote)
                                                                } else {
                                                                    if Basics_or(generated_let_declarationResult_e(8218.0), generated_let_declarationResult_e(8222.0)) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(8250.0) {
                                                if generated_let_declarationResult_e(8232.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SeparatorLine)
                                                } else {
                                                    if generated_let_declarationResult_e(8233.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SeparatorParagraph)
                                                    } else {
                                                        if generated_let_declarationResult_r(8234.0, 8238.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherFormat)
                                                        } else {
                                                            if generated_let_declarationResult_e(8239.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SeparatorSpace)
                                                            } else {
                                                                if generated_let_declarationResult_r(8240.0, 8248.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                                } else {
                                                                    if generated_let_declarationResult_e(8249.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationInitialQuote)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if generated_let_declarationResult_e(8250.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationFinalQuote)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(8251.0, 8254.0), Basics_or(generated_let_declarationResult_r(8257.0, 8259.0), generated_let_declarationResult_r(8263.0, 8272.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(8255.0, 8256.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationConnector)
                                                        } else {
                                                            if generated_let_declarationResult_e(8260.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                            } else {
                                                                if generated_let_declarationResult_e(8261.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                                } else {
                                                                    if generated_let_declarationResult_e(8262.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if generated_let_declarationResult_l(8495.0) {
                                    if generated_let_declarationResult_l(8420.0) {
                                        if generated_let_declarationResult_l(8316.0) {
                                            if Basics_or(generated_let_declarationResult_e(8273.0), Basics_or(generated_let_declarationResult_e(8275.0), generated_let_declarationResult_r(8277.0, 8286.0))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(8274.0), generated_let_declarationResult_r(8314.0, 8315.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                } else {
                                                    if generated_let_declarationResult_e(8276.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationConnector)
                                                    } else {
                                                        if generated_let_declarationResult_e(8287.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SeparatorSpace)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_r(8288.0, 8292.0), generated_let_declarationResult_r(8294.0, 8303.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherFormat)
                                                            } else {
                                                                if Basics_or(generated_let_declarationResult_e(8304.0), generated_let_declarationResult_r(8308.0, 8313.0)) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                                } else {
                                                                    if generated_let_declarationResult_e(8305.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(8333.0) {
                                                if Basics_or(generated_let_declarationResult_e(8316.0), generated_let_declarationResult_r(8330.0, 8332.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                } else {
                                                    if generated_let_declarationResult_e(8317.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                    } else {
                                                        if generated_let_declarationResult_e(8318.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                        } else {
                                                            if generated_let_declarationResult_e(8319.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                            } else {
                                                                if generated_let_declarationResult_r(8320.0, 8329.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if generated_let_declarationResult_e(8333.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                } else {
                                                    if generated_let_declarationResult_e(8334.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                    } else {
                                                        if generated_let_declarationResult_r(8336.0, 8348.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                        } else {
                                                            if generated_let_declarationResult_r(8352.0, 8384.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolCurrency)
                                                            } else {
                                                                if Basics_or(generated_let_declarationResult_r(8400.0, 8412.0), generated_let_declarationResult_e(8417.0)) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                                } else {
                                                                    if Basics_or(generated_let_declarationResult_r(8413.0, 8416.0), generated_let_declarationResult_r(8418.0, 8419.0)) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkEnclosing)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(8468.0) {
                                            if generated_let_declarationResult_e(8420.0) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkEnclosing)
                                            } else {
                                                if generated_let_declarationResult_r(8421.0, 8432.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(8448.0, 8449.0), Basics_or(generated_let_declarationResult_r(8451.0, 8454.0), generated_let_declarationResult_r(8456.0, 8457.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(8450.0), Basics_or(generated_let_declarationResult_e(8455.0), Basics_or(generated_let_declarationResult_r(8459.0, 8461.0), generated_let_declarationResult_r(8464.0, 8466.0)))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_e(8458.0), Basics_or(generated_let_declarationResult_r(8462.0, 8463.0), generated_let_declarationResult_e(8467.0))) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(8484.0) {
                                                if Basics_or(generated_let_declarationResult_e(8468.0), Basics_or(generated_let_declarationResult_r(8470.0, 8471.0), generated_let_declarationResult_r(8478.0, 8483.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(8469.0), generated_let_declarationResult_r(8473.0, 8477.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        if generated_let_declarationResult_e(8472.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(8484.0), Basics_or(generated_let_declarationResult_e(8486.0), Basics_or(generated_let_declarationResult_e(8488.0), generated_let_declarationResult_r(8490.0, 8493.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(8485.0), Basics_or(generated_let_declarationResult_e(8487.0), Basics_or(generated_let_declarationResult_e(8489.0), generated_let_declarationResult_e(8494.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(8603.0) {
                                        if generated_let_declarationResult_l(8523.0) {
                                            if Basics_or(generated_let_declarationResult_e(8495.0), Basics_or(generated_let_declarationResult_e(8500.0), Basics_or(generated_let_declarationResult_e(8505.0), Basics_or(generated_let_declarationResult_r(8508.0, 8509.0), generated_let_declarationResult_r(8518.0, 8521.0))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(8496.0, 8499.0), Basics_or(generated_let_declarationResult_r(8510.0, 8511.0), generated_let_declarationResult_e(8517.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if generated_let_declarationResult_r(8501.0, 8504.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(8506.0, 8507.0), generated_let_declarationResult_e(8522.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(8512.0, 8516.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(8579.0) {
                                                if generated_let_declarationResult_e(8523.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(8524.0, 8525.0), generated_let_declarationResult_e(8527.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                    } else {
                                                        if generated_let_declarationResult_e(8526.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                        } else {
                                                            if generated_let_declarationResult_r(8528.0, 8543.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                            } else {
                                                                if generated_let_declarationResult_r(8544.0, 8578.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberLetter)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if generated_let_declarationResult_e(8579.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if generated_let_declarationResult_e(8580.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        if generated_let_declarationResult_r(8581.0, 8584.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberLetter)
                                                        } else {
                                                            if generated_let_declarationResult_e(8585.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                            } else {
                                                                if Basics_or(generated_let_declarationResult_r(8586.0, 8587.0), generated_let_declarationResult_r(8597.0, 8601.0)) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                                } else {
                                                                    if Basics_or(generated_let_declarationResult_r(8592.0, 8596.0), generated_let_declarationResult_e(8602.0)) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(8659.0) {
                                            if generated_let_declarationResult_l(8613.0) {
                                                if Basics_or(generated_let_declarationResult_e(8603.0), Basics_or(generated_let_declarationResult_e(8608.0), generated_let_declarationResult_e(8611.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(8604.0, 8607.0), Basics_or(generated_let_declarationResult_r(8609.0, 8610.0), generated_let_declarationResult_e(8612.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(8613.0), Basics_or(generated_let_declarationResult_r(8615.0, 8621.0), Basics_or(generated_let_declarationResult_r(8623.0, 8653.0), generated_let_declarationResult_r(8656.0, 8657.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(8614.0), Basics_or(generated_let_declarationResult_e(8622.0), Basics_or(generated_let_declarationResult_r(8654.0, 8655.0), generated_let_declarationResult_e(8658.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(8969.0) {
                                                if Basics_or(generated_let_declarationResult_e(8659.0), Basics_or(generated_let_declarationResult_r(8661.0, 8691.0), generated_let_declarationResult_r(8960.0, 8967.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(8660.0), generated_let_declarationResult_r(8692.0, 8959.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                    } else {
                                                        if generated_let_declarationResult_e(8968.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(8969.0), Basics_or(generated_let_declarationResult_e(8971.0), generated_let_declarationResult_e(9002.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(8970.0), generated_let_declarationResult_e(9001.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(8972.0, 8991.0), Basics_or(generated_let_declarationResult_r(8994.0, 9000.0), generated_let_declarationResult_r(9003.0, 9083.0))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(8992.0, 8993.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            } else {
                if generated_let_declarationResult_l(65103.0) {
                    if generated_let_declarationResult_l(42587.0) {
                        if generated_let_declarationResult_l(11483.0) {
                            if generated_let_declarationResult_l(11370.0) {
                                if generated_let_declarationResult_l(10223.0) {
                                    if generated_let_declarationResult_l(10092.0) {
                                        if generated_let_declarationResult_l(9654.0) {
                                            if Basics_or(generated_let_declarationResult_e(9084.0), Basics_or(generated_let_declarationResult_r(9115.0, 9139.0), generated_let_declarationResult_r(9180.0, 9185.0))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(9085.0, 9114.0), Basics_or(generated_let_declarationResult_r(9140.0, 9179.0), Basics_or(generated_let_declarationResult_r(9186.0, 9254.0), Basics_or(generated_let_declarationResult_r(9280.0, 9290.0), Basics_or(generated_let_declarationResult_r(9372.0, 9449.0), generated_let_declarationResult_r(9472.0, 9653.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(9312.0, 9371.0), generated_let_declarationResult_r(9450.0, 9471.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(9727.0) {
                                                if Basics_or(generated_let_declarationResult_e(9654.0), Basics_or(generated_let_declarationResult_r(9656.0, 9664.0), generated_let_declarationResult_r(9666.0, 9719.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(9655.0), Basics_or(generated_let_declarationResult_e(9665.0), generated_let_declarationResult_r(9720.0, 9726.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(9727.0), generated_let_declarationResult_e(9839.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(9728.0, 9838.0), generated_let_declarationResult_r(9840.0, 10087.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(10088.0), generated_let_declarationResult_e(10090.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_e(10089.0), generated_let_declarationResult_e(10091.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(10175.0) {
                                            if Basics_or(generated_let_declarationResult_e(10092.0), Basics_or(generated_let_declarationResult_e(10094.0), Basics_or(generated_let_declarationResult_e(10096.0), Basics_or(generated_let_declarationResult_e(10098.0), generated_let_declarationResult_e(10100.0))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(10093.0), Basics_or(generated_let_declarationResult_e(10095.0), Basics_or(generated_let_declarationResult_e(10097.0), Basics_or(generated_let_declarationResult_e(10099.0), generated_let_declarationResult_e(10101.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                } else {
                                                    if generated_let_declarationResult_r(10102.0, 10131.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(10132.0, 10174.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(10215.0) {
                                                if generated_let_declarationResult_e(10175.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(10176.0, 10180.0), generated_let_declarationResult_r(10183.0, 10213.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(10181.0), generated_let_declarationResult_e(10214.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                        } else {
                                                            if generated_let_declarationResult_e(10182.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(10215.0), Basics_or(generated_let_declarationResult_e(10217.0), Basics_or(generated_let_declarationResult_e(10219.0), generated_let_declarationResult_e(10221.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(10216.0), Basics_or(generated_let_declarationResult_e(10218.0), Basics_or(generated_let_declarationResult_e(10220.0), generated_let_declarationResult_e(10222.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(10647.0) {
                                        if generated_let_declarationResult_l(10634.0) {
                                            if Basics_or(generated_let_declarationResult_e(10223.0), Basics_or(generated_let_declarationResult_e(10628.0), Basics_or(generated_let_declarationResult_e(10630.0), generated_let_declarationResult_e(10632.0)))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(10224.0, 10239.0), generated_let_declarationResult_r(10496.0, 10626.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                } else {
                                                    if generated_let_declarationResult_r(10240.0, 10495.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(10627.0), Basics_or(generated_let_declarationResult_e(10629.0), Basics_or(generated_let_declarationResult_e(10631.0), generated_let_declarationResult_e(10633.0)))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(10639.0) {
                                                if Basics_or(generated_let_declarationResult_e(10634.0), Basics_or(generated_let_declarationResult_e(10636.0), generated_let_declarationResult_e(10638.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(10635.0), generated_let_declarationResult_e(10637.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(10639.0), Basics_or(generated_let_declarationResult_e(10641.0), Basics_or(generated_let_declarationResult_e(10643.0), generated_let_declarationResult_e(10645.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(10640.0), Basics_or(generated_let_declarationResult_e(10642.0), Basics_or(generated_let_declarationResult_e(10644.0), generated_let_declarationResult_e(10646.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(11076.0) {
                                            if generated_let_declarationResult_l(10714.0) {
                                                if Basics_or(generated_let_declarationResult_e(10647.0), generated_let_declarationResult_e(10712.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(10648.0), generated_let_declarationResult_e(10713.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                    } else {
                                                        if generated_let_declarationResult_r(10649.0, 10711.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(10714.0), generated_let_declarationResult_e(10748.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(10715.0), generated_let_declarationResult_e(10749.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(10716.0, 10747.0), Basics_or(generated_let_declarationResult_r(10750.0, 11007.0), generated_let_declarationResult_r(11056.0, 11075.0))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                        } else {
                                                            if generated_let_declarationResult_r(11008.0, 11055.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(11311.0) {
                                                if Basics_or(generated_let_declarationResult_e(11076.0), generated_let_declarationResult_r(11079.0, 11084.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(11077.0, 11078.0), Basics_or(generated_let_declarationResult_r(11085.0, 11123.0), Basics_or(generated_let_declarationResult_r(11126.0, 11157.0), generated_let_declarationResult_r(11159.0, 11263.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(11264.0, 11310.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(11311.0), Basics_or(generated_let_declarationResult_e(11360.0), Basics_or(generated_let_declarationResult_r(11362.0, 11364.0), Basics_or(generated_let_declarationResult_e(11367.0), generated_let_declarationResult_e(11369.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(11312.0, 11359.0), Basics_or(generated_let_declarationResult_e(11361.0), Basics_or(generated_let_declarationResult_r(11365.0, 11366.0), generated_let_declarationResult_e(11368.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if generated_let_declarationResult_l(11431.0) {
                                    if generated_let_declarationResult_l(11405.0) {
                                        if generated_let_declarationResult_l(11392.0) {
                                            if Basics_or(generated_let_declarationResult_e(11370.0), Basics_or(generated_let_declarationResult_e(11372.0), Basics_or(generated_let_declarationResult_e(11377.0), Basics_or(generated_let_declarationResult_r(11379.0, 11380.0), generated_let_declarationResult_r(11382.0, 11387.0))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(11371.0), Basics_or(generated_let_declarationResult_r(11373.0, 11376.0), Basics_or(generated_let_declarationResult_e(11378.0), Basics_or(generated_let_declarationResult_e(11381.0), generated_let_declarationResult_r(11390.0, 11391.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if generated_let_declarationResult_r(11388.0, 11389.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(11397.0) {
                                                if Basics_or(generated_let_declarationResult_e(11392.0), Basics_or(generated_let_declarationResult_e(11394.0), generated_let_declarationResult_e(11396.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(11393.0), generated_let_declarationResult_e(11395.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(11397.0), Basics_or(generated_let_declarationResult_e(11399.0), Basics_or(generated_let_declarationResult_e(11401.0), generated_let_declarationResult_e(11403.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(11398.0), Basics_or(generated_let_declarationResult_e(11400.0), Basics_or(generated_let_declarationResult_e(11402.0), generated_let_declarationResult_e(11404.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(11417.0) {
                                            if Basics_or(generated_let_declarationResult_e(11405.0), Basics_or(generated_let_declarationResult_e(11407.0), Basics_or(generated_let_declarationResult_e(11409.0), Basics_or(generated_let_declarationResult_e(11411.0), Basics_or(generated_let_declarationResult_e(11413.0), generated_let_declarationResult_e(11415.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(11406.0), Basics_or(generated_let_declarationResult_e(11408.0), Basics_or(generated_let_declarationResult_e(11410.0), Basics_or(generated_let_declarationResult_e(11412.0), Basics_or(generated_let_declarationResult_e(11414.0), generated_let_declarationResult_e(11416.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(11423.0) {
                                                if Basics_or(generated_let_declarationResult_e(11417.0), Basics_or(generated_let_declarationResult_e(11419.0), generated_let_declarationResult_e(11421.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(11418.0), Basics_or(generated_let_declarationResult_e(11420.0), generated_let_declarationResult_e(11422.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(11423.0), Basics_or(generated_let_declarationResult_e(11425.0), Basics_or(generated_let_declarationResult_e(11427.0), generated_let_declarationResult_e(11429.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(11424.0), Basics_or(generated_let_declarationResult_e(11426.0), Basics_or(generated_let_declarationResult_e(11428.0), generated_let_declarationResult_e(11430.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(11456.0) {
                                        if generated_let_declarationResult_l(11442.0) {
                                            if Basics_or(generated_let_declarationResult_e(11431.0), Basics_or(generated_let_declarationResult_e(11433.0), Basics_or(generated_let_declarationResult_e(11435.0), Basics_or(generated_let_declarationResult_e(11437.0), Basics_or(generated_let_declarationResult_e(11439.0), generated_let_declarationResult_e(11441.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(11432.0), Basics_or(generated_let_declarationResult_e(11434.0), Basics_or(generated_let_declarationResult_e(11436.0), Basics_or(generated_let_declarationResult_e(11438.0), generated_let_declarationResult_e(11440.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(11448.0) {
                                                if Basics_or(generated_let_declarationResult_e(11442.0), Basics_or(generated_let_declarationResult_e(11444.0), generated_let_declarationResult_e(11446.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(11443.0), Basics_or(generated_let_declarationResult_e(11445.0), generated_let_declarationResult_e(11447.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(11448.0), Basics_or(generated_let_declarationResult_e(11450.0), Basics_or(generated_let_declarationResult_e(11452.0), generated_let_declarationResult_e(11454.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(11449.0), Basics_or(generated_let_declarationResult_e(11451.0), Basics_or(generated_let_declarationResult_e(11453.0), generated_let_declarationResult_e(11455.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(11468.0) {
                                            if Basics_or(generated_let_declarationResult_e(11456.0), Basics_or(generated_let_declarationResult_e(11458.0), Basics_or(generated_let_declarationResult_e(11460.0), Basics_or(generated_let_declarationResult_e(11462.0), Basics_or(generated_let_declarationResult_e(11464.0), generated_let_declarationResult_e(11466.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(11457.0), Basics_or(generated_let_declarationResult_e(11459.0), Basics_or(generated_let_declarationResult_e(11461.0), Basics_or(generated_let_declarationResult_e(11463.0), Basics_or(generated_let_declarationResult_e(11465.0), generated_let_declarationResult_e(11467.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(11474.0) {
                                                if Basics_or(generated_let_declarationResult_e(11468.0), Basics_or(generated_let_declarationResult_e(11470.0), generated_let_declarationResult_e(11472.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(11469.0), Basics_or(generated_let_declarationResult_e(11471.0), generated_let_declarationResult_e(11473.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(11474.0), Basics_or(generated_let_declarationResult_e(11476.0), Basics_or(generated_let_declarationResult_e(11478.0), Basics_or(generated_let_declarationResult_e(11480.0), generated_let_declarationResult_e(11482.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(11475.0), Basics_or(generated_let_declarationResult_e(11477.0), Basics_or(generated_let_declarationResult_e(11479.0), generated_let_declarationResult_e(11481.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if generated_let_declarationResult_l(12300.0) {
                                if generated_let_declarationResult_l(11799.0) {
                                    if generated_let_declarationResult_l(11630.0) {
                                        if generated_let_declarationResult_l(11500.0) {
                                            if Basics_or(generated_let_declarationResult_e(11483.0), Basics_or(generated_let_declarationResult_e(11485.0), Basics_or(generated_let_declarationResult_e(11487.0), Basics_or(generated_let_declarationResult_e(11489.0), generated_let_declarationResult_r(11491.0, 11492.0))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(11484.0), Basics_or(generated_let_declarationResult_e(11486.0), Basics_or(generated_let_declarationResult_e(11488.0), Basics_or(generated_let_declarationResult_e(11490.0), generated_let_declarationResult_e(11499.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if generated_let_declarationResult_r(11493.0, 11498.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(11512.0) {
                                                if Basics_or(generated_let_declarationResult_e(11500.0), Basics_or(generated_let_declarationResult_e(11502.0), generated_let_declarationResult_e(11507.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(11501.0), generated_let_declarationResult_e(11506.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        if generated_let_declarationResult_r(11503.0, 11505.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(11513.0, 11516.0), generated_let_declarationResult_r(11518.0, 11519.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                } else {
                                                    if generated_let_declarationResult_e(11517.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(11520.0, 11557.0), Basics_or(generated_let_declarationResult_e(11559.0), generated_let_declarationResult_e(11565.0))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                        } else {
                                                            if generated_let_declarationResult_r(11568.0, 11623.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(11743.0) {
                                            if generated_let_declarationResult_e(11631.0) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                            } else {
                                                if generated_let_declarationResult_e(11632.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                } else {
                                                    if generated_let_declarationResult_e(11647.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(11648.0, 11670.0), Basics_or(generated_let_declarationResult_r(11680.0, 11686.0), Basics_or(generated_let_declarationResult_r(11688.0, 11694.0), Basics_or(generated_let_declarationResult_r(11696.0, 11702.0), Basics_or(generated_let_declarationResult_r(11704.0, 11710.0), Basics_or(generated_let_declarationResult_r(11712.0, 11718.0), Basics_or(generated_let_declarationResult_r(11720.0, 11726.0), Basics_or(generated_let_declarationResult_r(11728.0, 11734.0), generated_let_declarationResult_r(11736.0, 11742.0))))))))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(11781.0) {
                                                if generated_let_declarationResult_r(11744.0, 11775.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if generated_let_declarationResult_r(11776.0, 11777.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(11778.0), generated_let_declarationResult_e(11780.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationInitialQuote)
                                                        } else {
                                                            if generated_let_declarationResult_e(11779.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationFinalQuote)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(11781.0), Basics_or(generated_let_declarationResult_e(11786.0), generated_let_declarationResult_e(11789.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationFinalQuote)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(11782.0, 11784.0), Basics_or(generated_let_declarationResult_e(11787.0), generated_let_declarationResult_r(11790.0, 11798.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(11785.0), generated_let_declarationResult_e(11788.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationInitialQuote)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(11842.0) {
                                        if generated_let_declarationResult_l(11812.0) {
                                            if Basics_or(generated_let_declarationResult_e(11799.0), generated_let_declarationResult_e(11802.0)) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationDash)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(11800.0, 11801.0), Basics_or(generated_let_declarationResult_e(11803.0), generated_let_declarationResult_r(11806.0, 11807.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(11804.0), generated_let_declarationResult_e(11808.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationInitialQuote)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(11805.0), generated_let_declarationResult_e(11809.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationFinalQuote)
                                                        } else {
                                                            if generated_let_declarationResult_e(11810.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                            } else {
                                                                if generated_let_declarationResult_e(11811.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(11817.0) {
                                                if Basics_or(generated_let_declarationResult_e(11812.0), Basics_or(generated_let_declarationResult_e(11814.0), generated_let_declarationResult_e(11816.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(11813.0), generated_let_declarationResult_e(11815.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if generated_let_declarationResult_e(11817.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(11818.0, 11822.0), Basics_or(generated_let_declarationResult_r(11824.0, 11833.0), Basics_or(generated_let_declarationResult_r(11836.0, 11839.0), generated_let_declarationResult_e(11841.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if generated_let_declarationResult_e(11823.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_r(11834.0, 11835.0), generated_let_declarationResult_e(11840.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationDash)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(11903.0) {
                                            if generated_let_declarationResult_l(11862.0) {
                                                if Basics_or(generated_let_declarationResult_e(11842.0), generated_let_declarationResult_e(11861.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(11843.0, 11855.0), generated_let_declarationResult_r(11858.0, 11860.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(11856.0, 11857.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(11862.0), Basics_or(generated_let_declarationResult_e(11864.0), Basics_or(generated_let_declarationResult_e(11866.0), generated_let_declarationResult_e(11868.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(11863.0), Basics_or(generated_let_declarationResult_e(11865.0), generated_let_declarationResult_e(11867.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                    } else {
                                                        if generated_let_declarationResult_e(11869.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationDash)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(12292.0) {
                                                if Basics_or(generated_let_declarationResult_r(11904.0, 11929.0), Basics_or(generated_let_declarationResult_r(11931.0, 12019.0), Basics_or(generated_let_declarationResult_r(12032.0, 12245.0), generated_let_declarationResult_r(12272.0, 12287.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if generated_let_declarationResult_e(12288.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SeparatorSpace)
                                                    } else {
                                                        if generated_let_declarationResult_r(12289.0, 12291.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if generated_let_declarationResult_e(12292.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if generated_let_declarationResult_e(12293.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                    } else {
                                                        if generated_let_declarationResult_e(12294.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            if generated_let_declarationResult_e(12295.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberLetter)
                                                            } else {
                                                                if Basics_or(generated_let_declarationResult_e(12296.0), generated_let_declarationResult_e(12298.0)) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                                } else {
                                                                    if Basics_or(generated_let_declarationResult_e(12297.0), generated_let_declarationResult_e(12299.0)) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if generated_let_declarationResult_l(12841.0) {
                                    if generated_let_declarationResult_l(12343.0) {
                                        if generated_let_declarationResult_l(12312.0) {
                                            if Basics_or(generated_let_declarationResult_e(12300.0), Basics_or(generated_let_declarationResult_e(12302.0), Basics_or(generated_let_declarationResult_e(12304.0), Basics_or(generated_let_declarationResult_e(12308.0), generated_let_declarationResult_e(12310.0))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(12301.0), Basics_or(generated_let_declarationResult_e(12303.0), Basics_or(generated_let_declarationResult_e(12305.0), Basics_or(generated_let_declarationResult_e(12309.0), generated_let_declarationResult_e(12311.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                } else {
                                                    if generated_let_declarationResult_r(12306.0, 12307.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(12319.0) {
                                                if Basics_or(generated_let_declarationResult_e(12312.0), Basics_or(generated_let_declarationResult_e(12314.0), generated_let_declarationResult_e(12317.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(12313.0), Basics_or(generated_let_declarationResult_e(12315.0), generated_let_declarationResult_e(12318.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                    } else {
                                                        if generated_let_declarationResult_e(12316.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationDash)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if generated_let_declarationResult_e(12319.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(12320.0), generated_let_declarationResult_e(12342.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(12321.0, 12329.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberLetter)
                                                        } else {
                                                            if generated_let_declarationResult_r(12330.0, 12333.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                            } else {
                                                                if generated_let_declarationResult_r(12334.0, 12335.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                                } else {
                                                                    if generated_let_declarationResult_e(12336.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationDash)
                                                                    } else {
                                                                        if generated_let_declarationResult_r(12337.0, 12341.0) {
                                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                                        } else {
                                                                            Maybe_Maybe.Maybe_Nothing
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(12538.0) {
                                            if generated_let_declarationResult_l(12352.0) {
                                                if Basics_or(generated_let_declarationResult_e(12343.0), generated_let_declarationResult_r(12350.0, 12351.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if generated_let_declarationResult_r(12344.0, 12346.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberLetter)
                                                    } else {
                                                        if generated_let_declarationResult_e(12347.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                        } else {
                                                            if generated_let_declarationResult_e(12348.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                            } else {
                                                                if generated_let_declarationResult_e(12349.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(12353.0, 12438.0), Basics_or(generated_let_declarationResult_e(12447.0), generated_let_declarationResult_r(12449.0, 12537.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_r(12441.0, 12442.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_r(12443.0, 12444.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolModifier)
                                                        } else {
                                                            if generated_let_declarationResult_r(12445.0, 12446.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                            } else {
                                                                if generated_let_declarationResult_e(12448.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationDash)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(12689.0) {
                                                if Basics_or(generated_let_declarationResult_e(12538.0), Basics_or(generated_let_declarationResult_e(12543.0), Basics_or(generated_let_declarationResult_r(12549.0, 12591.0), generated_let_declarationResult_r(12593.0, 12686.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_e(12539.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(12540.0, 12542.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                        } else {
                                                            if generated_let_declarationResult_e(12688.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(12689.0), Basics_or(generated_let_declarationResult_r(12694.0, 12703.0), Basics_or(generated_let_declarationResult_r(12736.0, 12771.0), Basics_or(generated_let_declarationResult_e(12783.0), generated_let_declarationResult_r(12800.0, 12830.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(12690.0, 12693.0), generated_let_declarationResult_r(12832.0, 12840.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(12704.0, 12735.0), generated_let_declarationResult_r(12784.0, 12799.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(42560.0) {
                                        if generated_let_declarationResult_l(19967.0) {
                                            if Basics_or(generated_let_declarationResult_e(12841.0), Basics_or(generated_let_declarationResult_r(12872.0, 12879.0), Basics_or(generated_let_declarationResult_r(12881.0, 12895.0), Basics_or(generated_let_declarationResult_r(12928.0, 12937.0), generated_let_declarationResult_r(12977.0, 12991.0))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(12842.0, 12871.0), Basics_or(generated_let_declarationResult_e(12880.0), Basics_or(generated_let_declarationResult_r(12896.0, 12927.0), Basics_or(generated_let_declarationResult_r(12938.0, 12976.0), Basics_or(generated_let_declarationResult_r(12992.0, 13311.0), generated_let_declarationResult_r(19904.0, 19966.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if generated_let_declarationResult_r(13312.0, 19903.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(42237.0) {
                                                if Basics_or(generated_let_declarationResult_e(19967.0), generated_let_declarationResult_r(42128.0, 42182.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(19968.0, 40980.0), Basics_or(generated_let_declarationResult_r(40982.0, 42124.0), generated_let_declarationResult_r(42192.0, 42231.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(40981.0), generated_let_declarationResult_r(42232.0, 42236.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(42237.0), generated_let_declarationResult_e(42508.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(42238.0, 42239.0), generated_let_declarationResult_r(42509.0, 42511.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(42240.0, 42507.0), Basics_or(generated_let_declarationResult_r(42512.0, 42527.0), generated_let_declarationResult_r(42538.0, 42539.0))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(42528.0, 42537.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(42572.0) {
                                            if Basics_or(generated_let_declarationResult_e(42560.0), Basics_or(generated_let_declarationResult_e(42562.0), Basics_or(generated_let_declarationResult_e(42564.0), Basics_or(generated_let_declarationResult_e(42566.0), Basics_or(generated_let_declarationResult_e(42568.0), generated_let_declarationResult_e(42570.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(42561.0), Basics_or(generated_let_declarationResult_e(42563.0), Basics_or(generated_let_declarationResult_e(42565.0), Basics_or(generated_let_declarationResult_e(42567.0), Basics_or(generated_let_declarationResult_e(42569.0), generated_let_declarationResult_e(42571.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(42578.0) {
                                                if Basics_or(generated_let_declarationResult_e(42572.0), Basics_or(generated_let_declarationResult_e(42574.0), generated_let_declarationResult_e(42576.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(42573.0), Basics_or(generated_let_declarationResult_e(42575.0), generated_let_declarationResult_e(42577.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(42578.0), Basics_or(generated_let_declarationResult_e(42580.0), Basics_or(generated_let_declarationResult_e(42582.0), Basics_or(generated_let_declarationResult_e(42584.0), generated_let_declarationResult_e(42586.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(42579.0), Basics_or(generated_let_declarationResult_e(42581.0), Basics_or(generated_let_declarationResult_e(42583.0), generated_let_declarationResult_e(42585.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if generated_let_declarationResult_l(42945.0) {
                            if generated_let_declarationResult_l(42824.0) {
                                if generated_let_declarationResult_l(42646.0) {
                                    if generated_let_declarationResult_l(42621.0) {
                                        if generated_let_declarationResult_l(42598.0) {
                                            if Basics_or(generated_let_declarationResult_e(42587.0), Basics_or(generated_let_declarationResult_e(42589.0), Basics_or(generated_let_declarationResult_e(42591.0), Basics_or(generated_let_declarationResult_e(42593.0), Basics_or(generated_let_declarationResult_e(42595.0), generated_let_declarationResult_e(42597.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(42588.0), Basics_or(generated_let_declarationResult_e(42590.0), Basics_or(generated_let_declarationResult_e(42592.0), Basics_or(generated_let_declarationResult_e(42594.0), generated_let_declarationResult_e(42596.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(42603.0) {
                                                if Basics_or(generated_let_declarationResult_e(42598.0), Basics_or(generated_let_declarationResult_e(42600.0), generated_let_declarationResult_e(42602.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(42599.0), generated_let_declarationResult_e(42601.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(42603.0), generated_let_declarationResult_e(42605.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if generated_let_declarationResult_e(42604.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        if generated_let_declarationResult_e(42606.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_e(42607.0), generated_let_declarationResult_r(42612.0, 42620.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                            } else {
                                                                if generated_let_declarationResult_r(42608.0, 42610.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkEnclosing)
                                                                } else {
                                                                    if generated_let_declarationResult_e(42611.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(42632.0) {
                                            if generated_let_declarationResult_e(42621.0) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                            } else {
                                                if generated_let_declarationResult_e(42622.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                } else {
                                                    if generated_let_declarationResult_e(42623.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(42624.0), Basics_or(generated_let_declarationResult_e(42626.0), Basics_or(generated_let_declarationResult_e(42628.0), generated_let_declarationResult_e(42630.0)))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_e(42625.0), Basics_or(generated_let_declarationResult_e(42627.0), Basics_or(generated_let_declarationResult_e(42629.0), generated_let_declarationResult_e(42631.0)))) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(42638.0) {
                                                if Basics_or(generated_let_declarationResult_e(42632.0), Basics_or(generated_let_declarationResult_e(42634.0), generated_let_declarationResult_e(42636.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(42633.0), Basics_or(generated_let_declarationResult_e(42635.0), generated_let_declarationResult_e(42637.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(42638.0), Basics_or(generated_let_declarationResult_e(42640.0), Basics_or(generated_let_declarationResult_e(42642.0), generated_let_declarationResult_e(42644.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(42639.0), Basics_or(generated_let_declarationResult_e(42641.0), Basics_or(generated_let_declarationResult_e(42643.0), generated_let_declarationResult_e(42645.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(42795.0) {
                                        if generated_let_declarationResult_l(42751.0) {
                                            if Basics_or(generated_let_declarationResult_e(42646.0), Basics_or(generated_let_declarationResult_e(42648.0), generated_let_declarationResult_e(42650.0))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(42647.0), Basics_or(generated_let_declarationResult_e(42649.0), generated_let_declarationResult_e(42651.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if generated_let_declarationResult_r(42652.0, 42653.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(42654.0, 42655.0), generated_let_declarationResult_r(42736.0, 42737.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            if generated_let_declarationResult_r(42656.0, 42725.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                            } else {
                                                                if generated_let_declarationResult_r(42726.0, 42735.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberLetter)
                                                                } else {
                                                                    if generated_let_declarationResult_r(42738.0, 42743.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if Basics_or(generated_let_declarationResult_r(42752.0, 42774.0), generated_let_declarationResult_r(42784.0, 42785.0)) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolModifier)
                                            } else {
                                                if generated_let_declarationResult_r(42775.0, 42783.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(42786.0), Basics_or(generated_let_declarationResult_e(42788.0), Basics_or(generated_let_declarationResult_e(42790.0), Basics_or(generated_let_declarationResult_e(42792.0), generated_let_declarationResult_e(42794.0))))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(42787.0), Basics_or(generated_let_declarationResult_e(42789.0), Basics_or(generated_let_declarationResult_e(42791.0), generated_let_declarationResult_e(42793.0)))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(42809.0) {
                                            if Basics_or(generated_let_declarationResult_e(42795.0), Basics_or(generated_let_declarationResult_e(42797.0), Basics_or(generated_let_declarationResult_r(42799.0, 42801.0), Basics_or(generated_let_declarationResult_e(42803.0), Basics_or(generated_let_declarationResult_e(42805.0), generated_let_declarationResult_e(42807.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(42796.0), Basics_or(generated_let_declarationResult_e(42798.0), Basics_or(generated_let_declarationResult_e(42802.0), Basics_or(generated_let_declarationResult_e(42804.0), Basics_or(generated_let_declarationResult_e(42806.0), generated_let_declarationResult_e(42808.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(42815.0) {
                                                if Basics_or(generated_let_declarationResult_e(42809.0), Basics_or(generated_let_declarationResult_e(42811.0), generated_let_declarationResult_e(42813.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(42810.0), Basics_or(generated_let_declarationResult_e(42812.0), generated_let_declarationResult_e(42814.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(42815.0), Basics_or(generated_let_declarationResult_e(42817.0), Basics_or(generated_let_declarationResult_e(42819.0), Basics_or(generated_let_declarationResult_e(42821.0), generated_let_declarationResult_e(42823.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(42816.0), Basics_or(generated_let_declarationResult_e(42818.0), Basics_or(generated_let_declarationResult_e(42820.0), generated_let_declarationResult_e(42822.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if generated_let_declarationResult_l(42882.0) {
                                    if generated_let_declarationResult_l(42848.0) {
                                        if generated_let_declarationResult_l(42835.0) {
                                            if Basics_or(generated_let_declarationResult_e(42824.0), Basics_or(generated_let_declarationResult_e(42826.0), Basics_or(generated_let_declarationResult_e(42828.0), Basics_or(generated_let_declarationResult_e(42830.0), Basics_or(generated_let_declarationResult_e(42832.0), generated_let_declarationResult_e(42834.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(42825.0), Basics_or(generated_let_declarationResult_e(42827.0), Basics_or(generated_let_declarationResult_e(42829.0), Basics_or(generated_let_declarationResult_e(42831.0), generated_let_declarationResult_e(42833.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(42840.0) {
                                                if Basics_or(generated_let_declarationResult_e(42835.0), Basics_or(generated_let_declarationResult_e(42837.0), generated_let_declarationResult_e(42839.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(42836.0), generated_let_declarationResult_e(42838.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(42840.0), Basics_or(generated_let_declarationResult_e(42842.0), Basics_or(generated_let_declarationResult_e(42844.0), generated_let_declarationResult_e(42846.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(42841.0), Basics_or(generated_let_declarationResult_e(42843.0), Basics_or(generated_let_declarationResult_e(42845.0), generated_let_declarationResult_e(42847.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(42860.0) {
                                            if Basics_or(generated_let_declarationResult_e(42848.0), Basics_or(generated_let_declarationResult_e(42850.0), Basics_or(generated_let_declarationResult_e(42852.0), Basics_or(generated_let_declarationResult_e(42854.0), Basics_or(generated_let_declarationResult_e(42856.0), generated_let_declarationResult_e(42858.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(42849.0), Basics_or(generated_let_declarationResult_e(42851.0), Basics_or(generated_let_declarationResult_e(42853.0), Basics_or(generated_let_declarationResult_e(42855.0), Basics_or(generated_let_declarationResult_e(42857.0), generated_let_declarationResult_e(42859.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(42873.0) {
                                                if Basics_or(generated_let_declarationResult_e(42860.0), generated_let_declarationResult_e(42862.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(42861.0), Basics_or(generated_let_declarationResult_e(42863.0), generated_let_declarationResult_r(42865.0, 42872.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        if generated_let_declarationResult_e(42864.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(42873.0), Basics_or(generated_let_declarationResult_e(42875.0), Basics_or(generated_let_declarationResult_r(42877.0, 42878.0), generated_let_declarationResult_e(42880.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(42874.0), Basics_or(generated_let_declarationResult_e(42876.0), Basics_or(generated_let_declarationResult_e(42879.0), generated_let_declarationResult_e(42881.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(42910.0) {
                                        if generated_let_declarationResult_l(42894.0) {
                                            if Basics_or(generated_let_declarationResult_e(42882.0), Basics_or(generated_let_declarationResult_e(42884.0), Basics_or(generated_let_declarationResult_e(42886.0), Basics_or(generated_let_declarationResult_e(42891.0), generated_let_declarationResult_e(42893.0))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(42883.0), Basics_or(generated_let_declarationResult_e(42885.0), Basics_or(generated_let_declarationResult_e(42887.0), generated_let_declarationResult_e(42892.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if generated_let_declarationResult_e(42888.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                    } else {
                                                        if generated_let_declarationResult_r(42889.0, 42890.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolModifier)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(42902.0) {
                                                if Basics_or(generated_let_declarationResult_e(42894.0), Basics_or(generated_let_declarationResult_e(42897.0), generated_let_declarationResult_r(42899.0, 42901.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if generated_let_declarationResult_e(42895.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(42896.0), generated_let_declarationResult_e(42898.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(42902.0), Basics_or(generated_let_declarationResult_e(42904.0), Basics_or(generated_let_declarationResult_e(42906.0), generated_let_declarationResult_e(42908.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(42903.0), Basics_or(generated_let_declarationResult_e(42905.0), Basics_or(generated_let_declarationResult_e(42907.0), generated_let_declarationResult_e(42909.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(42926.0) {
                                            if generated_let_declarationResult_l(42915.0) {
                                                if Basics_or(generated_let_declarationResult_e(42910.0), Basics_or(generated_let_declarationResult_e(42912.0), generated_let_declarationResult_e(42914.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(42911.0), generated_let_declarationResult_e(42913.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(42915.0), Basics_or(generated_let_declarationResult_e(42917.0), Basics_or(generated_let_declarationResult_e(42919.0), generated_let_declarationResult_e(42921.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(42916.0), Basics_or(generated_let_declarationResult_e(42918.0), Basics_or(generated_let_declarationResult_e(42920.0), generated_let_declarationResult_r(42922.0, 42925.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(42936.0) {
                                                if Basics_or(generated_let_declarationResult_e(42926.0), Basics_or(generated_let_declarationResult_r(42928.0, 42932.0), generated_let_declarationResult_e(42934.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(42927.0), Basics_or(generated_let_declarationResult_e(42933.0), generated_let_declarationResult_e(42935.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(42936.0), Basics_or(generated_let_declarationResult_e(42938.0), Basics_or(generated_let_declarationResult_e(42940.0), Basics_or(generated_let_declarationResult_e(42942.0), generated_let_declarationResult_e(42944.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(42937.0), Basics_or(generated_let_declarationResult_e(42939.0), Basics_or(generated_let_declarationResult_e(42941.0), generated_let_declarationResult_e(42943.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if generated_let_declarationResult_l(43697.0) {
                                if generated_let_declarationResult_l(43273.0) {
                                    if generated_let_declarationResult_l(43042.0) {
                                        if generated_let_declarationResult_l(42993.0) {
                                            if Basics_or(generated_let_declarationResult_e(42945.0), Basics_or(generated_let_declarationResult_e(42947.0), Basics_or(generated_let_declarationResult_e(42952.0), Basics_or(generated_let_declarationResult_e(42954.0), Basics_or(generated_let_declarationResult_e(42967.0), Basics_or(generated_let_declarationResult_e(42969.0), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 1.0), generated_let_declarationResult_r(42961.0, 42965.0)))))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(42946.0), Basics_or(generated_let_declarationResult_r(42948.0, 42951.0), Basics_or(generated_let_declarationResult_e(42953.0), Basics_or(generated_let_declarationResult_e(42960.0), Basics_or(generated_let_declarationResult_e(42966.0), generated_let_declarationResult_e(42968.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(43002.0) {
                                                if Basics_or(generated_let_declarationResult_r(42994.0, 42996.0), generated_let_declarationResult_r(43000.0, 43001.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                } else {
                                                    if generated_let_declarationResult_e(42997.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        if generated_let_declarationResult_e(42998.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                        } else {
                                                            if generated_let_declarationResult_e(42999.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if generated_let_declarationResult_e(43002.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(43003.0, 43009.0), Basics_or(generated_let_declarationResult_r(43011.0, 43013.0), Basics_or(generated_let_declarationResult_r(43015.0, 43018.0), generated_let_declarationResult_r(43020.0, 43041.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(43010.0), Basics_or(generated_let_declarationResult_e(43014.0), generated_let_declarationResult_e(43019.0))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(43137.0) {
                                            if generated_let_declarationResult_l(43055.0) {
                                                if generated_let_declarationResult_e(43042.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(43043.0, 43044.0), generated_let_declarationResult_e(43047.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(43045.0, 43046.0), generated_let_declarationResult_e(43052.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            if generated_let_declarationResult_r(43048.0, 43051.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if generated_let_declarationResult_r(43056.0, 43061.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(43062.0, 43063.0), generated_let_declarationResult_e(43065.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                    } else {
                                                        if generated_let_declarationResult_e(43064.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolCurrency)
                                                        } else {
                                                            if generated_let_declarationResult_r(43072.0, 43123.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                            } else {
                                                                if generated_let_declarationResult_r(43124.0, 43127.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                                } else {
                                                                    if generated_let_declarationResult_e(43136.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(43249.0) {
                                                if Basics_or(generated_let_declarationResult_e(43137.0), generated_let_declarationResult_r(43188.0, 43203.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                } else {
                                                    if generated_let_declarationResult_r(43138.0, 43187.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(43204.0, 43205.0), generated_let_declarationResult_r(43232.0, 43248.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            if generated_let_declarationResult_r(43214.0, 43215.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                            } else {
                                                                if generated_let_declarationResult_r(43216.0, 43225.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(43249.0), generated_let_declarationResult_e(43263.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(43250.0, 43255.0), Basics_or(generated_let_declarationResult_e(43259.0), generated_let_declarationResult_r(43261.0, 43262.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(43256.0, 43258.0), generated_let_declarationResult_e(43260.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(43264.0, 43272.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(43494.0) {
                                        if generated_let_declarationResult_l(43442.0) {
                                            if generated_let_declarationResult_e(43273.0) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(43274.0, 43301.0), Basics_or(generated_let_declarationResult_r(43312.0, 43334.0), Basics_or(generated_let_declarationResult_r(43360.0, 43388.0), generated_let_declarationResult_r(43396.0, 43441.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(43302.0, 43309.0), Basics_or(generated_let_declarationResult_r(43335.0, 43345.0), generated_let_declarationResult_r(43392.0, 43394.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(43310.0, 43311.0), generated_let_declarationResult_e(43359.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_r(43346.0, 43347.0), generated_let_declarationResult_e(43395.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(43453.0) {
                                                if generated_let_declarationResult_e(43442.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(43443.0), Basics_or(generated_let_declarationResult_r(43446.0, 43449.0), generated_let_declarationResult_e(43452.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(43444.0, 43445.0), generated_let_declarationResult_r(43450.0, 43451.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(43453.0), generated_let_declarationResult_e(43493.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if generated_let_declarationResult_r(43454.0, 43456.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(43457.0, 43469.0), generated_let_declarationResult_r(43486.0, 43487.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            if generated_let_declarationResult_e(43471.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                            } else {
                                                                if generated_let_declarationResult_r(43472.0, 43481.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                                } else {
                                                                    if generated_let_declarationResult_r(43488.0, 43492.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(43595.0) {
                                            if generated_let_declarationResult_l(43566.0) {
                                                if generated_let_declarationResult_e(43494.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(43495.0, 43503.0), Basics_or(generated_let_declarationResult_r(43514.0, 43518.0), generated_let_declarationResult_r(43520.0, 43560.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(43504.0, 43513.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                        } else {
                                                            if generated_let_declarationResult_r(43561.0, 43565.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(43566.0), Basics_or(generated_let_declarationResult_r(43569.0, 43570.0), Basics_or(generated_let_declarationResult_r(43573.0, 43574.0), generated_let_declarationResult_e(43587.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(43567.0, 43568.0), generated_let_declarationResult_r(43571.0, 43572.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(43584.0, 43586.0), generated_let_declarationResult_r(43588.0, 43594.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(43632.0) {
                                                if Basics_or(generated_let_declarationResult_e(43595.0), generated_let_declarationResult_r(43616.0, 43631.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_e(43596.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_e(43597.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                        } else {
                                                            if generated_let_declarationResult_r(43600.0, 43609.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                            } else {
                                                                if generated_let_declarationResult_r(43612.0, 43615.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if generated_let_declarationResult_e(43632.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(43633.0, 43638.0), Basics_or(generated_let_declarationResult_e(43642.0), generated_let_declarationResult_r(43646.0, 43695.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(43639.0, 43641.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_e(43643.0), generated_let_declarationResult_e(43645.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                            } else {
                                                                if Basics_or(generated_let_declarationResult_e(43644.0), generated_let_declarationResult_e(43696.0)) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if generated_let_declarationResult_l(64274.0) {
                                    if generated_let_declarationResult_l(43815.0) {
                                        if generated_let_declarationResult_l(43743.0) {
                                            if Basics_or(generated_let_declarationResult_e(43697.0), Basics_or(generated_let_declarationResult_r(43701.0, 43702.0), Basics_or(generated_let_declarationResult_r(43705.0, 43709.0), Basics_or(generated_let_declarationResult_e(43712.0), Basics_or(generated_let_declarationResult_e(43714.0), generated_let_declarationResult_r(43739.0, 43740.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(43698.0, 43700.0), Basics_or(generated_let_declarationResult_r(43703.0, 43704.0), Basics_or(generated_let_declarationResult_r(43710.0, 43711.0), generated_let_declarationResult_e(43713.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if generated_let_declarationResult_e(43741.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                    } else {
                                                        if generated_let_declarationResult_e(43742.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(43762.0) {
                                                if Basics_or(generated_let_declarationResult_e(43743.0), generated_let_declarationResult_r(43760.0, 43761.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                } else {
                                                    if generated_let_declarationResult_r(43744.0, 43754.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(43755.0), generated_let_declarationResult_r(43758.0, 43759.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                        } else {
                                                            if generated_let_declarationResult_r(43756.0, 43757.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(43762.0), Basics_or(generated_let_declarationResult_r(43777.0, 43782.0), Basics_or(generated_let_declarationResult_r(43785.0, 43790.0), Basics_or(generated_let_declarationResult_r(43793.0, 43798.0), generated_let_declarationResult_r(43808.0, 43814.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_r(43763.0, 43764.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                    } else {
                                                        if generated_let_declarationResult_e(43765.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                        } else {
                                                            if generated_let_declarationResult_e(43766.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(44008.0) {
                                            if Basics_or(generated_let_declarationResult_r(43816.0, 43822.0), generated_let_declarationResult_r(43968.0, 44002.0)) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(43824.0, 43866.0), Basics_or(generated_let_declarationResult_r(43872.0, 43880.0), generated_let_declarationResult_r(43888.0, 43967.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(43867.0), generated_let_declarationResult_r(43882.0, 43883.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolModifier)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(43868.0, 43871.0), generated_let_declarationResult_e(43881.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_r(44003.0, 44004.0), generated_let_declarationResult_r(44006.0, 44007.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                            } else {
                                                                if generated_let_declarationResult_e(44005.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(55215.0) {
                                                if Basics_or(generated_let_declarationResult_e(44008.0), generated_let_declarationResult_e(44013.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(44009.0, 44010.0), generated_let_declarationResult_e(44012.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if generated_let_declarationResult_e(44011.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(44016.0, 44025.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                            } else {
                                                                if generated_let_declarationResult_r(44032.0, 55203.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(55216.0, 55238.0), Basics_or(generated_let_declarationResult_r(55243.0, 55291.0), Basics_or(generated_let_declarationResult_r(63744.0, 64109.0), generated_let_declarationResult_r(64112.0, 64217.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_r(55296.0, 57343.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherSurrogate)
                                                    } else {
                                                        if generated_let_declarationResult_r(57344.0, 63743.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherPrivateUse)
                                                        } else {
                                                            if generated_let_declarationResult_r(64256.0, 64262.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(65048.0) {
                                        if generated_let_declarationResult_l(64466.0) {
                                            if generated_let_declarationResult_r(64275.0, 64279.0) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(64285.0), Basics_or(generated_let_declarationResult_r(64287.0, 64296.0), Basics_or(generated_let_declarationResult_r(64298.0, 64310.0), Basics_or(generated_let_declarationResult_r(64312.0, 64316.0), Basics_or(generated_let_declarationResult_e(64318.0), Basics_or(generated_let_declarationResult_r(64320.0, 64321.0), Basics_or(generated_let_declarationResult_r(64323.0, 64324.0), generated_let_declarationResult_r(64326.0, 64433.0)))))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_e(64286.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_e(64297.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                        } else {
                                                            if generated_let_declarationResult_r(64434.0, 64450.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolModifier)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(64974.0) {
                                                if Basics_or(generated_let_declarationResult_r(64467.0, 64829.0), Basics_or(generated_let_declarationResult_r(64848.0, 64911.0), generated_let_declarationResult_r(64914.0, 64967.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_e(64830.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                    } else {
                                                        if generated_let_declarationResult_e(64831.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                        } else {
                                                            if generated_let_declarationResult_r(64832.0, 64847.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(64975.0), generated_let_declarationResult_r(65021.0, 65023.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if generated_let_declarationResult_r(65008.0, 65019.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if generated_let_declarationResult_e(65020.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolCurrency)
                                                        } else {
                                                            if generated_let_declarationResult_r(65024.0, 65039.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                            } else {
                                                                if generated_let_declarationResult_r(65040.0, 65046.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                                } else {
                                                                    if generated_let_declarationResult_e(65047.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(65083.0) {
                                            if Basics_or(generated_let_declarationResult_e(65048.0), Basics_or(generated_let_declarationResult_e(65078.0), Basics_or(generated_let_declarationResult_e(65080.0), generated_let_declarationResult_e(65082.0)))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(65049.0), generated_let_declarationResult_e(65072.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                } else {
                                                    if generated_let_declarationResult_r(65056.0, 65071.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_r(65073.0, 65074.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationDash)
                                                        } else {
                                                            if generated_let_declarationResult_r(65075.0, 65076.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationConnector)
                                                            } else {
                                                                if Basics_or(generated_let_declarationResult_e(65077.0), Basics_or(generated_let_declarationResult_e(65079.0), generated_let_declarationResult_e(65081.0))) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(65089.0) {
                                                if Basics_or(generated_let_declarationResult_e(65083.0), Basics_or(generated_let_declarationResult_e(65085.0), generated_let_declarationResult_e(65087.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(65084.0), Basics_or(generated_let_declarationResult_e(65086.0), generated_let_declarationResult_e(65088.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(65089.0), Basics_or(generated_let_declarationResult_e(65091.0), generated_let_declarationResult_e(65095.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(65090.0), Basics_or(generated_let_declarationResult_e(65092.0), generated_let_declarationResult_e(65096.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(65093.0, 65094.0), generated_let_declarationResult_r(65097.0, 65100.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(65101.0, 65102.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationConnector)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if generated_let_declarationResult_l(71996.0) {
                        if generated_let_declarationResult_l(69404.0) {
                            if generated_let_declarationResult_l(66421.0) {
                                if generated_let_declarationResult_l(65378.0) {
                                    if generated_let_declarationResult_l(65288.0) {
                                        if generated_let_declarationResult_l(65121.0) {
                                            if generated_let_declarationResult_e(65103.0) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationConnector)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(65104.0, 65106.0), Basics_or(generated_let_declarationResult_r(65108.0, 65111.0), generated_let_declarationResult_r(65119.0, 65120.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                } else {
                                                    if generated_let_declarationResult_e(65112.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationDash)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(65113.0), Basics_or(generated_let_declarationResult_e(65115.0), generated_let_declarationResult_e(65117.0))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_e(65114.0), Basics_or(generated_let_declarationResult_e(65116.0), generated_let_declarationResult_e(65118.0))) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(65129.0) {
                                                if Basics_or(generated_let_declarationResult_e(65121.0), generated_let_declarationResult_e(65128.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(65122.0), generated_let_declarationResult_r(65124.0, 65126.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                    } else {
                                                        if generated_let_declarationResult_e(65123.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationDash)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(65129.0), generated_let_declarationResult_e(65284.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolCurrency)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(65130.0, 65131.0), Basics_or(generated_let_declarationResult_r(65281.0, 65283.0), generated_let_declarationResult_r(65285.0, 65287.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(65136.0, 65140.0), generated_let_declarationResult_r(65142.0, 65276.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            if generated_let_declarationResult_e(65279.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherFormat)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(65339.0) {
                                            if generated_let_declarationResult_e(65288.0) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                            } else {
                                                if generated_let_declarationResult_e(65289.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(65290.0), Basics_or(generated_let_declarationResult_e(65292.0), Basics_or(generated_let_declarationResult_r(65294.0, 65295.0), Basics_or(generated_let_declarationResult_r(65306.0, 65307.0), generated_let_declarationResult_r(65311.0, 65312.0))))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(65291.0), generated_let_declarationResult_r(65308.0, 65310.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                        } else {
                                                            if generated_let_declarationResult_e(65293.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationDash)
                                                            } else {
                                                                if generated_let_declarationResult_r(65296.0, 65305.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                                } else {
                                                                    if generated_let_declarationResult_r(65313.0, 65338.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(65370.0) {
                                                if generated_let_declarationResult_e(65339.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                } else {
                                                    if generated_let_declarationResult_e(65340.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if generated_let_declarationResult_e(65341.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_e(65342.0), generated_let_declarationResult_e(65344.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolModifier)
                                                            } else {
                                                                if generated_let_declarationResult_e(65343.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationConnector)
                                                                } else {
                                                                    if generated_let_declarationResult_r(65345.0, 65369.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if generated_let_declarationResult_e(65370.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(65371.0), generated_let_declarationResult_e(65375.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(65372.0), generated_let_declarationResult_e(65374.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_e(65373.0), generated_let_declarationResult_e(65376.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                            } else {
                                                                if generated_let_declarationResult_e(65377.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(65598.0) {
                                        if generated_let_declarationResult_l(65505.0) {
                                            if generated_let_declarationResult_l(65437.0) {
                                                if generated_let_declarationResult_e(65378.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOpen)
                                                } else {
                                                    if generated_let_declarationResult_e(65379.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationClose)
                                                    } else {
                                                        if generated_let_declarationResult_r(65380.0, 65381.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_r(65382.0, 65391.0), generated_let_declarationResult_r(65393.0, 65436.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                            } else {
                                                                if generated_let_declarationResult_e(65392.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(65437.0), Basics_or(generated_let_declarationResult_r(65440.0, 65470.0), Basics_or(generated_let_declarationResult_r(65474.0, 65479.0), Basics_or(generated_let_declarationResult_r(65482.0, 65487.0), Basics_or(generated_let_declarationResult_r(65490.0, 65495.0), generated_let_declarationResult_r(65498.0, 65500.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_r(65438.0, 65439.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                    } else {
                                                        if generated_let_declarationResult_e(65504.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolCurrency)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(65516.0) {
                                                if Basics_or(generated_let_declarationResult_e(65505.0), generated_let_declarationResult_r(65509.0, 65510.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolCurrency)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(65506.0), generated_let_declarationResult_r(65513.0, 65515.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                    } else {
                                                        if generated_let_declarationResult_e(65507.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolModifier)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_e(65508.0), generated_let_declarationResult_e(65512.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if generated_let_declarationResult_e(65516.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(65517.0, 65518.0), generated_let_declarationResult_r(65532.0, 65533.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(65529.0, 65531.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherFormat)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_r(65536.0, 65547.0), Basics_or(generated_let_declarationResult_r(65549.0, 65574.0), Basics_or(generated_let_declarationResult_r(65576.0, 65594.0), generated_let_declarationResult_r(65596.0, 65597.0)))) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(65999.0) {
                                            if generated_let_declarationResult_l(65855.0) {
                                                if Basics_or(generated_let_declarationResult_r(65599.0, 65613.0), Basics_or(generated_let_declarationResult_r(65616.0, 65629.0), generated_let_declarationResult_r(65664.0, 65786.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_r(65792.0, 65794.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(65799.0, 65843.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(65847.0, 65854.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(65855.0), Basics_or(generated_let_declarationResult_r(65913.0, 65929.0), Basics_or(generated_let_declarationResult_r(65932.0, 65934.0), Basics_or(generated_let_declarationResult_r(65936.0, 65948.0), generated_let_declarationResult_e(65952.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if generated_let_declarationResult_r(65856.0, 65908.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberLetter)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(65909.0, 65912.0), generated_let_declarationResult_r(65930.0, 65931.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(66303.0) {
                                                if generated_let_declarationResult_r(66000.0, 66044.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(66045.0), generated_let_declarationResult_e(66272.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(66176.0, 66204.0), generated_let_declarationResult_r(66208.0, 66256.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(66273.0, 66299.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(66304.0, 66335.0), Basics_or(generated_let_declarationResult_r(66349.0, 66368.0), Basics_or(generated_let_declarationResult_r(66370.0, 66377.0), generated_let_declarationResult_r(66384.0, 66420.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_r(66336.0, 66339.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(66369.0), generated_let_declarationResult_e(66378.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberLetter)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if generated_let_declarationResult_l(67902.0) {
                                    if generated_let_declarationResult_l(67071.0) {
                                        if generated_let_declarationResult_l(66735.0) {
                                            if Basics_or(generated_let_declarationResult_e(66421.0), Basics_or(generated_let_declarationResult_r(66432.0, 66461.0), Basics_or(generated_let_declarationResult_r(66464.0, 66499.0), Basics_or(generated_let_declarationResult_r(66504.0, 66511.0), generated_let_declarationResult_r(66640.0, 66717.0))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                            } else {
                                                if generated_let_declarationResult_r(66422.0, 66426.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(66463.0), generated_let_declarationResult_e(66512.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(66513.0, 66517.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberLetter)
                                                        } else {
                                                            if generated_let_declarationResult_r(66560.0, 66599.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                            } else {
                                                                if generated_let_declarationResult_r(66600.0, 66639.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                                } else {
                                                                    if generated_let_declarationResult_r(66720.0, 66729.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(66939.0) {
                                                if Basics_or(generated_let_declarationResult_r(66736.0, 66771.0), generated_let_declarationResult_r(66928.0, 66938.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if generated_let_declarationResult_r(66776.0, 66811.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(66816.0, 66855.0), generated_let_declarationResult_r(66864.0, 66915.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            if generated_let_declarationResult_e(66927.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(66940.0, 66954.0), Basics_or(generated_let_declarationResult_r(66956.0, 66962.0), generated_let_declarationResult_r(66964.0, 66965.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(66967.0, 66977.0), Basics_or(generated_let_declarationResult_r(66979.0, 66993.0), Basics_or(generated_let_declarationResult_r(66995.0, 67001.0), generated_let_declarationResult_r(67003.0, 67004.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(67671.0) {
                                            if Basics_or(generated_let_declarationResult_r(67072.0, 67382.0), Basics_or(generated_let_declarationResult_r(67392.0, 67413.0), Basics_or(generated_let_declarationResult_r(67424.0, 67431.0), Basics_or(generated_let_declarationResult_r(67584.0, 67589.0), Basics_or(generated_let_declarationResult_e(67592.0), Basics_or(generated_let_declarationResult_r(67594.0, 67637.0), Basics_or(generated_let_declarationResult_r(67639.0, 67640.0), Basics_or(generated_let_declarationResult_e(67644.0), generated_let_declarationResult_r(67647.0, 67669.0))))))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(67456.0, 67461.0), Basics_or(generated_let_declarationResult_r(67463.0, 67504.0), generated_let_declarationResult_r(67506.0, 67514.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(67807.0) {
                                                if generated_let_declarationResult_e(67671.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(67672.0, 67679.0), Basics_or(generated_let_declarationResult_r(67705.0, 67711.0), generated_let_declarationResult_r(67751.0, 67759.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(67680.0, 67702.0), generated_let_declarationResult_r(67712.0, 67742.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(67703.0, 67704.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(67808.0, 67826.0), Basics_or(generated_let_declarationResult_r(67828.0, 67829.0), Basics_or(generated_let_declarationResult_r(67840.0, 67861.0), generated_let_declarationResult_r(67872.0, 67897.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(67835.0, 67839.0), generated_let_declarationResult_r(67862.0, 67867.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                    } else {
                                                        if generated_let_declarationResult_e(67871.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(68324.0) {
                                        if generated_let_declarationResult_l(68120.0) {
                                            if generated_let_declarationResult_e(67903.0) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(67968.0, 68023.0), Basics_or(generated_let_declarationResult_r(68030.0, 68031.0), Basics_or(generated_let_declarationResult_e(68096.0), Basics_or(generated_let_declarationResult_r(68112.0, 68115.0), generated_let_declarationResult_r(68117.0, 68119.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(68028.0, 68029.0), Basics_or(generated_let_declarationResult_r(68032.0, 68047.0), generated_let_declarationResult_r(68050.0, 68095.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(68097.0, 68099.0), Basics_or(generated_let_declarationResult_r(68101.0, 68102.0), generated_let_declarationResult_r(68108.0, 68111.0))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(68220.0) {
                                                if Basics_or(generated_let_declarationResult_r(68121.0, 68149.0), generated_let_declarationResult_r(68192.0, 68219.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(68152.0, 68154.0), generated_let_declarationResult_e(68159.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_r(68160.0, 68168.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(68176.0, 68184.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(68220.0), Basics_or(generated_let_declarationResult_r(68224.0, 68252.0), Basics_or(generated_let_declarationResult_r(68288.0, 68295.0), generated_let_declarationResult_r(68297.0, 68323.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(68221.0, 68222.0), generated_let_declarationResult_r(68253.0, 68255.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                    } else {
                                                        if generated_let_declarationResult_e(68223.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            if generated_let_declarationResult_e(68296.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(68607.0) {
                                            if generated_let_declarationResult_l(68415.0) {
                                                if Basics_or(generated_let_declarationResult_e(68324.0), generated_let_declarationResult_r(68352.0, 68405.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_r(68325.0, 68326.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_r(68331.0, 68335.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_r(68336.0, 68342.0), generated_let_declarationResult_r(68409.0, 68414.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(68415.0), generated_let_declarationResult_r(68505.0, 68508.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(68416.0, 68437.0), Basics_or(generated_let_declarationResult_r(68448.0, 68466.0), generated_let_declarationResult_r(68480.0, 68497.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(68440.0, 68447.0), Basics_or(generated_let_declarationResult_r(68472.0, 68479.0), generated_let_declarationResult_r(68521.0, 68527.0))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(69215.0) {
                                                if Basics_or(generated_let_declarationResult_r(68608.0, 68680.0), generated_let_declarationResult_r(68864.0, 68899.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_r(68736.0, 68786.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        if generated_let_declarationResult_r(68800.0, 68850.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                        } else {
                                                            if generated_let_declarationResult_r(68858.0, 68863.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                            } else {
                                                                if generated_let_declarationResult_r(68900.0, 68903.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                                } else {
                                                                    if generated_let_declarationResult_r(68912.0, 68921.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if generated_let_declarationResult_r(69216.0, 69246.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(69248.0, 69289.0), Basics_or(generated_let_declarationResult_r(69296.0, 69297.0), generated_let_declarationResult_r(69376.0, 69403.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(69291.0, 69292.0), generated_let_declarationResult_r(69373.0, 69375.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            if generated_let_declarationResult_e(69293.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationDash)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if generated_let_declarationResult_l(70452.0) {
                                if generated_let_declarationResult_l(70002.0) {
                                    if generated_let_declarationResult_l(69758.0) {
                                        if generated_let_declarationResult_l(69599.0) {
                                            if Basics_or(generated_let_declarationResult_e(69404.0), Basics_or(generated_let_declarationResult_e(69415.0), Basics_or(generated_let_declarationResult_r(69424.0, 69445.0), Basics_or(generated_let_declarationResult_r(69488.0, 69505.0), generated_let_declarationResult_r(69552.0, 69572.0))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(69405.0, 69414.0), Basics_or(generated_let_declarationResult_r(69457.0, 69460.0), generated_let_declarationResult_r(69573.0, 69579.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(69446.0, 69456.0), generated_let_declarationResult_r(69506.0, 69509.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(69461.0, 69465.0), generated_let_declarationResult_r(69510.0, 69513.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(69702.0) {
                                                if Basics_or(generated_let_declarationResult_r(69600.0, 69622.0), generated_let_declarationResult_r(69635.0, 69687.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(69632.0), generated_let_declarationResult_e(69634.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(69633.0), generated_let_declarationResult_r(69688.0, 69701.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(69702.0), Basics_or(generated_let_declarationResult_e(69744.0), generated_let_declarationResult_r(69747.0, 69748.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if generated_let_declarationResult_r(69703.0, 69709.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(69714.0, 69733.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(69734.0, 69743.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                            } else {
                                                                if Basics_or(generated_let_declarationResult_r(69745.0, 69746.0), generated_let_declarationResult_e(69749.0)) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(69839.0) {
                                            if Basics_or(generated_let_declarationResult_r(69759.0, 69761.0), Basics_or(generated_let_declarationResult_r(69811.0, 69814.0), Basics_or(generated_let_declarationResult_r(69817.0, 69818.0), generated_let_declarationResult_e(69826.0)))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(69762.0), Basics_or(generated_let_declarationResult_r(69808.0, 69810.0), generated_let_declarationResult_r(69815.0, 69816.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                } else {
                                                    if generated_let_declarationResult_r(69763.0, 69807.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(69819.0, 69820.0), generated_let_declarationResult_r(69822.0, 69825.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_e(69821.0), generated_let_declarationResult_e(69837.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherFormat)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(69932.0) {
                                                if Basics_or(generated_let_declarationResult_r(69840.0, 69864.0), generated_let_declarationResult_r(69891.0, 69926.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_r(69872.0, 69881.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(69888.0, 69890.0), generated_let_declarationResult_r(69927.0, 69931.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(69932.0), generated_let_declarationResult_r(69957.0, 69958.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                } else {
                                                    if generated_let_declarationResult_r(69933.0, 69940.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_r(69942.0, 69951.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                        } else {
                                                            if generated_let_declarationResult_r(69952.0, 69955.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                            } else {
                                                                if Basics_or(generated_let_declarationResult_e(69956.0), Basics_or(generated_let_declarationResult_e(69959.0), generated_let_declarationResult_r(69968.0, 70001.0))) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(70193.0) {
                                        if generated_let_declarationResult_l(70092.0) {
                                            if generated_let_declarationResult_l(70018.0) {
                                                if Basics_or(generated_let_declarationResult_e(70002.0), generated_let_declarationResult_e(70006.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(70003.0), generated_let_declarationResult_r(70016.0, 70017.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_r(70004.0, 70005.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(70018.0), Basics_or(generated_let_declarationResult_r(70067.0, 70069.0), generated_let_declarationResult_r(70079.0, 70080.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(70019.0, 70066.0), generated_let_declarationResult_r(70081.0, 70084.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(70070.0, 70078.0), generated_let_declarationResult_r(70089.0, 70091.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            if generated_let_declarationResult_r(70085.0, 70088.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(70107.0) {
                                                if Basics_or(generated_let_declarationResult_e(70092.0), generated_let_declarationResult_e(70095.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if generated_let_declarationResult_e(70093.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if generated_let_declarationResult_e(70094.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                        } else {
                                                            if generated_let_declarationResult_r(70096.0, 70105.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                            } else {
                                                                if generated_let_declarationResult_e(70106.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(70107.0), generated_let_declarationResult_r(70109.0, 70111.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(70108.0), Basics_or(generated_let_declarationResult_r(70144.0, 70161.0), generated_let_declarationResult_r(70163.0, 70187.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(70113.0, 70132.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(70188.0, 70190.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                            } else {
                                                                if generated_let_declarationResult_r(70191.0, 70192.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(70302.0) {
                                            if generated_let_declarationResult_l(70205.0) {
                                                if Basics_or(generated_let_declarationResult_e(70193.0), Basics_or(generated_let_declarationResult_e(70196.0), generated_let_declarationResult_r(70198.0, 70199.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(70194.0, 70195.0), generated_let_declarationResult_e(70197.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if generated_let_declarationResult_r(70200.0, 70204.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if generated_let_declarationResult_e(70205.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(70206.0), generated_let_declarationResult_e(70209.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(70207.0, 70208.0), Basics_or(generated_let_declarationResult_r(70272.0, 70278.0), Basics_or(generated_let_declarationResult_e(70280.0), Basics_or(generated_let_declarationResult_r(70282.0, 70285.0), generated_let_declarationResult_r(70287.0, 70301.0))))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(70399.0) {
                                                if Basics_or(generated_let_declarationResult_r(70303.0, 70312.0), generated_let_declarationResult_r(70320.0, 70366.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_e(70313.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(70367.0), generated_let_declarationResult_r(70371.0, 70378.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            if generated_let_declarationResult_r(70368.0, 70370.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                            } else {
                                                                if generated_let_declarationResult_r(70384.0, 70393.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if generated_let_declarationResult_r(70400.0, 70401.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if generated_let_declarationResult_r(70402.0, 70403.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(70405.0, 70412.0), Basics_or(generated_let_declarationResult_r(70415.0, 70416.0), Basics_or(generated_let_declarationResult_r(70419.0, 70440.0), Basics_or(generated_let_declarationResult_r(70442.0, 70448.0), generated_let_declarationResult_r(70450.0, 70451.0))))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if generated_let_declarationResult_l(71167.0) {
                                    if generated_let_declarationResult_l(70748.0) {
                                        if generated_let_declarationResult_l(70501.0) {
                                            if Basics_or(generated_let_declarationResult_r(70453.0, 70457.0), Basics_or(generated_let_declarationResult_e(70461.0), Basics_or(generated_let_declarationResult_e(70480.0), generated_let_declarationResult_r(70493.0, 70497.0)))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(70459.0, 70460.0), generated_let_declarationResult_e(70464.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(70462.0, 70463.0), Basics_or(generated_let_declarationResult_r(70465.0, 70468.0), Basics_or(generated_let_declarationResult_r(70471.0, 70472.0), Basics_or(generated_let_declarationResult_r(70475.0, 70477.0), Basics_or(generated_let_declarationResult_e(70487.0), generated_let_declarationResult_r(70498.0, 70499.0)))))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(70721.0) {
                                                if Basics_or(generated_let_declarationResult_r(70502.0, 70508.0), Basics_or(generated_let_declarationResult_r(70512.0, 70516.0), generated_let_declarationResult_r(70712.0, 70719.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if generated_let_declarationResult_r(70656.0, 70708.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(70709.0, 70711.0), generated_let_declarationResult_e(70720.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(70721.0), generated_let_declarationResult_e(70725.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(70722.0, 70724.0), generated_let_declarationResult_e(70726.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_r(70727.0, 70730.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_r(70731.0, 70735.0), generated_let_declarationResult_r(70746.0, 70747.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                            } else {
                                                                if generated_let_declarationResult_r(70736.0, 70745.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(70853.0) {
                                            if generated_let_declarationResult_l(70840.0) {
                                                if generated_let_declarationResult_e(70749.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(70750.0), generated_let_declarationResult_r(70835.0, 70839.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(70751.0, 70753.0), generated_let_declarationResult_r(70784.0, 70831.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(70832.0, 70834.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(70840.0), Basics_or(generated_let_declarationResult_e(70842.0), Basics_or(generated_let_declarationResult_r(70847.0, 70848.0), generated_let_declarationResult_r(70850.0, 70851.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(70841.0), Basics_or(generated_let_declarationResult_r(70843.0, 70846.0), generated_let_declarationResult_e(70849.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if generated_let_declarationResult_e(70852.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(71095.0) {
                                                if Basics_or(generated_let_declarationResult_e(70853.0), Basics_or(generated_let_declarationResult_e(70855.0), generated_let_declarationResult_r(71040.0, 71086.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_e(70854.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(70864.0, 70873.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                        } else {
                                                            if generated_let_declarationResult_r(71087.0, 71089.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                            } else {
                                                                if generated_let_declarationResult_r(71090.0, 71093.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(71096.0, 71099.0), generated_let_declarationResult_e(71102.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(71100.0, 71101.0), Basics_or(generated_let_declarationResult_r(71103.0, 71104.0), generated_let_declarationResult_r(71132.0, 71133.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_r(71105.0, 71127.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(71128.0, 71131.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(71457.0) {
                                        if generated_let_declarationResult_l(71338.0) {
                                            if Basics_or(generated_let_declarationResult_r(71168.0, 71215.0), Basics_or(generated_let_declarationResult_e(71236.0), generated_let_declarationResult_r(71296.0, 71337.0))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(71216.0, 71218.0), Basics_or(generated_let_declarationResult_r(71227.0, 71228.0), generated_let_declarationResult_e(71230.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(71219.0, 71226.0), Basics_or(generated_let_declarationResult_e(71229.0), generated_let_declarationResult_r(71231.0, 71232.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(71233.0, 71235.0), generated_let_declarationResult_r(71264.0, 71276.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(71248.0, 71257.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(71350.0) {
                                                if generated_let_declarationResult_e(71338.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(71339.0), Basics_or(generated_let_declarationResult_e(71341.0), generated_let_declarationResult_r(71344.0, 71349.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(71340.0), generated_let_declarationResult_r(71342.0, 71343.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(71350.0), generated_let_declarationResult_e(71456.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(71351.0), generated_let_declarationResult_r(71453.0, 71455.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(71352.0), generated_let_declarationResult_r(71424.0, 71450.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            if generated_let_declarationResult_e(71353.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                            } else {
                                                                if generated_let_declarationResult_r(71360.0, 71369.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(71736.0) {
                                            if Basics_or(generated_let_declarationResult_e(71457.0), Basics_or(generated_let_declarationResult_e(71462.0), generated_let_declarationResult_r(71724.0, 71726.0))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(71458.0, 71461.0), Basics_or(generated_let_declarationResult_r(71463.0, 71467.0), generated_let_declarationResult_r(71727.0, 71735.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if generated_let_declarationResult_r(71472.0, 71481.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                    } else {
                                                        if generated_let_declarationResult_r(71482.0, 71483.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(71484.0, 71486.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                            } else {
                                                                if generated_let_declarationResult_e(71487.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                                } else {
                                                                    if Basics_or(generated_let_declarationResult_r(71488.0, 71494.0), generated_let_declarationResult_r(71680.0, 71723.0)) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(71934.0) {
                                                if generated_let_declarationResult_e(71736.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                } else {
                                                    if generated_let_declarationResult_r(71737.0, 71738.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_e(71739.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(71840.0, 71871.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                            } else {
                                                                if generated_let_declarationResult_r(71872.0, 71903.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                                } else {
                                                                    if generated_let_declarationResult_r(71904.0, 71913.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                                    } else {
                                                                        if generated_let_declarationResult_r(71914.0, 71922.0) {
                                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                                        } else {
                                                                            Maybe_Maybe.Maybe_Nothing
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(71935.0, 71942.0), Basics_or(generated_let_declarationResult_e(71945.0), Basics_or(generated_let_declarationResult_r(71948.0, 71955.0), Basics_or(generated_let_declarationResult_r(71957.0, 71958.0), generated_let_declarationResult_r(71960.0, 71983.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(71984.0, 71989.0), generated_let_declarationResult_r(71991.0, 71992.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if generated_let_declarationResult_e(71995.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        if generated_let_declarationResult_l(119893.0) {
                            if generated_let_declarationResult_l(73647.0) {
                                if generated_let_declarationResult_l(72767.0) {
                                    if generated_let_declarationResult_l(72242.0) {
                                        if generated_let_declarationResult_l(72144.0) {
                                            if Basics_or(generated_let_declarationResult_e(71996.0), Basics_or(generated_let_declarationResult_e(71998.0), generated_let_declarationResult_e(72003.0))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(71997.0), Basics_or(generated_let_declarationResult_e(72000.0), generated_let_declarationResult_e(72002.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(71999.0), Basics_or(generated_let_declarationResult_e(72001.0), Basics_or(generated_let_declarationResult_r(72096.0, 72103.0), generated_let_declarationResult_r(72106.0, 72143.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(72004.0, 72006.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(72016.0, 72025.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(72160.0) {
                                                if generated_let_declarationResult_e(72144.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(72145.0, 72147.0), generated_let_declarationResult_r(72156.0, 72159.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(72148.0, 72151.0), generated_let_declarationResult_r(72154.0, 72155.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(72160.0), generated_let_declarationResult_r(72193.0, 72202.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(72161.0), Basics_or(generated_let_declarationResult_e(72163.0), Basics_or(generated_let_declarationResult_e(72192.0), generated_let_declarationResult_r(72203.0, 72241.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if generated_let_declarationResult_e(72162.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            if generated_let_declarationResult_e(72164.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(72342.0) {
                                            if generated_let_declarationResult_l(72262.0) {
                                                if Basics_or(generated_let_declarationResult_e(72242.0), generated_let_declarationResult_e(72250.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(72243.0, 72248.0), generated_let_declarationResult_r(72251.0, 72254.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_e(72249.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                        } else {
                                                            if generated_let_declarationResult_r(72255.0, 72261.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if generated_let_declarationResult_e(72262.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(72263.0), Basics_or(generated_let_declarationResult_r(72273.0, 72278.0), Basics_or(generated_let_declarationResult_r(72281.0, 72283.0), generated_let_declarationResult_r(72330.0, 72341.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(72272.0), generated_let_declarationResult_r(72284.0, 72329.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(72279.0, 72280.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(72447.0) {
                                                if Basics_or(generated_let_declarationResult_e(72342.0), generated_let_declarationResult_r(72344.0, 72345.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if generated_let_declarationResult_e(72343.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(72346.0, 72348.0), generated_let_declarationResult_r(72350.0, 72354.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_e(72349.0), generated_let_declarationResult_r(72368.0, 72440.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if generated_let_declarationResult_r(72448.0, 72457.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(72704.0, 72712.0), generated_let_declarationResult_r(72714.0, 72750.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(72751.0), generated_let_declarationResult_e(72766.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_r(72752.0, 72758.0), generated_let_declarationResult_r(72760.0, 72765.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(73065.0) {
                                        if generated_let_declarationResult_l(72884.0) {
                                            if Basics_or(generated_let_declarationResult_e(72767.0), Basics_or(generated_let_declarationResult_r(72850.0, 72871.0), Basics_or(generated_let_declarationResult_r(72874.0, 72880.0), generated_let_declarationResult_r(72882.0, 72883.0)))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(72768.0), generated_let_declarationResult_r(72818.0, 72847.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(72769.0, 72773.0), generated_let_declarationResult_r(72816.0, 72817.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(72784.0, 72793.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                        } else {
                                                            if generated_let_declarationResult_r(72794.0, 72812.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                            } else {
                                                                if Basics_or(generated_let_declarationResult_e(72873.0), generated_let_declarationResult_e(72881.0)) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(73019.0) {
                                                if generated_let_declarationResult_e(72884.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(72885.0, 72886.0), Basics_or(generated_let_declarationResult_r(73009.0, 73014.0), generated_let_declarationResult_e(73018.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(72960.0, 72966.0), Basics_or(generated_let_declarationResult_r(72968.0, 72969.0), generated_let_declarationResult_r(72971.0, 73008.0))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(73020.0, 73021.0), Basics_or(generated_let_declarationResult_r(73023.0, 73029.0), generated_let_declarationResult_e(73031.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(73030.0), Basics_or(generated_let_declarationResult_r(73056.0, 73061.0), generated_let_declarationResult_r(73063.0, 73064.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(73040.0, 73049.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(73471.0) {
                                            if generated_let_declarationResult_l(73110.0) {
                                                if generated_let_declarationResult_r(73066.0, 73097.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(73098.0, 73102.0), generated_let_declarationResult_r(73107.0, 73108.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(73104.0, 73105.0), generated_let_declarationResult_e(73109.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(73110.0), generated_let_declarationResult_r(73461.0, 73462.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(73111.0), generated_let_declarationResult_r(73459.0, 73460.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(73112.0), generated_let_declarationResult_r(73440.0, 73458.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(73120.0, 73129.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                            } else {
                                                                if generated_let_declarationResult_r(73463.0, 73464.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(73525.0) {
                                                if generated_let_declarationResult_r(73472.0, 73473.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(73474.0), Basics_or(generated_let_declarationResult_r(73476.0, 73488.0), generated_let_declarationResult_r(73490.0, 73523.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(73475.0), generated_let_declarationResult_e(73524.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(73525.0), Basics_or(generated_let_declarationResult_r(73534.0, 73535.0), generated_let_declarationResult_e(73537.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(73526.0, 73530.0), Basics_or(generated_let_declarationResult_e(73536.0), generated_let_declarationResult_e(73538.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_r(73539.0, 73551.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(73552.0, 73561.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if generated_let_declarationResult_l(94178.0) {
                                    if generated_let_declarationResult_l(92879.0) {
                                        if generated_let_declarationResult_l(77823.0) {
                                            if Basics_or(generated_let_declarationResult_e(73648.0), Basics_or(generated_let_declarationResult_r(73728.0, 74649.0), Basics_or(generated_let_declarationResult_r(74880.0, 75075.0), generated_let_declarationResult_r(77712.0, 77808.0)))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                            } else {
                                                if generated_let_declarationResult_r(73664.0, 73684.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(73685.0, 73692.0), generated_let_declarationResult_r(73697.0, 73713.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(73693.0, 73696.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolCurrency)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_e(73727.0), Basics_or(generated_let_declarationResult_r(74864.0, 74868.0), generated_let_declarationResult_r(77809.0, 77810.0))) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                            } else {
                                                                if generated_let_declarationResult_r(74752.0, 74862.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberLetter)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if Basics_or(generated_let_declarationResult_r(77824.0, 78895.0), Basics_or(generated_let_declarationResult_r(78913.0, 78918.0), Basics_or(generated_let_declarationResult_r(82944.0, 83526.0), Basics_or(generated_let_declarationResult_r(92160.0, 92728.0), Basics_or(generated_let_declarationResult_r(92736.0, 92766.0), generated_let_declarationResult_r(92784.0, 92862.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                            } else {
                                                if generated_let_declarationResult_r(78896.0, 78911.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherFormat)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(78912.0), generated_let_declarationResult_r(78919.0, 78933.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(92768.0, 92777.0), generated_let_declarationResult_r(92864.0, 92873.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                        } else {
                                                            if generated_let_declarationResult_r(92782.0, 92783.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(93026.0) {
                                            if Basics_or(generated_let_declarationResult_r(92880.0, 92909.0), generated_let_declarationResult_r(92928.0, 92975.0)) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(92912.0, 92916.0), generated_let_declarationResult_r(92976.0, 92982.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(92917.0), Basics_or(generated_let_declarationResult_r(92983.0, 92987.0), generated_let_declarationResult_e(92996.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(92988.0, 92991.0), generated_let_declarationResult_e(92997.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(92992.0, 92995.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                            } else {
                                                                if generated_let_declarationResult_r(93008.0, 93017.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                                } else {
                                                                    if generated_let_declarationResult_r(93019.0, 93025.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(93951.0) {
                                                if Basics_or(generated_let_declarationResult_r(93027.0, 93047.0), generated_let_declarationResult_r(93053.0, 93071.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_r(93760.0, 93791.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        if generated_let_declarationResult_r(93792.0, 93823.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                        } else {
                                                            if generated_let_declarationResult_r(93824.0, 93846.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                            } else {
                                                                if generated_let_declarationResult_r(93847.0, 93850.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(93952.0, 94026.0), generated_let_declarationResult_e(94032.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(94031.0), generated_let_declarationResult_r(94095.0, 94098.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_r(94033.0, 94087.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_r(94099.0, 94111.0), generated_let_declarationResult_r(94176.0, 94177.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(118607.0) {
                                        if generated_let_declarationResult_l(110932.0) {
                                            if generated_let_declarationResult_l(101631.0) {
                                                if generated_let_declarationResult_e(94178.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                } else {
                                                    if generated_let_declarationResult_e(94179.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                    } else {
                                                        if generated_let_declarationResult_e(94180.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            if generated_let_declarationResult_r(94192.0, 94193.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                            } else {
                                                                if Basics_or(generated_let_declarationResult_r(94208.0, 100343.0), generated_let_declarationResult_r(100352.0, 101589.0)) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(101632.0, 101640.0), Basics_or(generated_let_declarationResult_r(110592.0, 110882.0), Basics_or(generated_let_declarationResult_e(110898.0), generated_let_declarationResult_r(110928.0, 110930.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(110576.0, 110579.0), Basics_or(generated_let_declarationResult_r(110581.0, 110587.0), generated_let_declarationResult_r(110589.0, 110590.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(113807.0) {
                                                if Basics_or(generated_let_declarationResult_e(110933.0), Basics_or(generated_let_declarationResult_r(110948.0, 110951.0), Basics_or(generated_let_declarationResult_r(110960.0, 111355.0), Basics_or(generated_let_declarationResult_r(113664.0, 113770.0), Basics_or(generated_let_declarationResult_r(113776.0, 113788.0), generated_let_declarationResult_r(113792.0, 113800.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            } else {
                                                if generated_let_declarationResult_r(113808.0, 113817.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_e(113820.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(113821.0, 113822.0), Basics_or(generated_let_declarationResult_r(118528.0, 118573.0), generated_let_declarationResult_r(118576.0, 118598.0))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            if generated_let_declarationResult_e(113823.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                            } else {
                                                                if generated_let_declarationResult_r(113824.0, 113827.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherFormat)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(119209.0) {
                                            if generated_let_declarationResult_l(119145.0) {
                                                if Basics_or(generated_let_declarationResult_r(118608.0, 118723.0), Basics_or(generated_let_declarationResult_r(118784.0, 119029.0), Basics_or(generated_let_declarationResult_r(119040.0, 119078.0), generated_let_declarationResult_r(119081.0, 119140.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if generated_let_declarationResult_r(119141.0, 119142.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                    } else {
                                                        if generated_let_declarationResult_r(119143.0, 119144.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(119145.0), Basics_or(generated_let_declarationResult_r(119163.0, 119170.0), generated_let_declarationResult_r(119173.0, 119179.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(119146.0, 119148.0), Basics_or(generated_let_declarationResult_r(119171.0, 119172.0), generated_let_declarationResult_r(119180.0, 119208.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                    } else {
                                                        if generated_let_declarationResult_r(119149.0, 119154.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkSpacingCombining)
                                                        } else {
                                                            if generated_let_declarationResult_r(119155.0, 119162.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherFormat)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(119519.0) {
                                                if Basics_or(generated_let_declarationResult_e(119209.0), Basics_or(generated_let_declarationResult_r(119214.0, 119274.0), Basics_or(generated_let_declarationResult_r(119296.0, 119361.0), generated_let_declarationResult_e(119365.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(119210.0, 119213.0), generated_let_declarationResult_r(119362.0, 119364.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_r(119488.0, 119507.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(119520.0, 119539.0), generated_let_declarationResult_r(119648.0, 119672.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                } else {
                                                    if generated_let_declarationResult_r(119552.0, 119638.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(119808.0, 119833.0), generated_let_declarationResult_r(119860.0, 119885.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                        } else {
                                                            if Basics_or(generated_let_declarationResult_r(119834.0, 119859.0), generated_let_declarationResult_r(119886.0, 119892.0)) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            if generated_let_declarationResult_l(124111.0) {
                                if generated_let_declarationResult_l(120629.0) {
                                    if generated_let_declarationResult_l(120137.0) {
                                        if generated_let_declarationResult_l(120004.0) {
                                            if Basics_or(generated_let_declarationResult_r(119894.0, 119911.0), Basics_or(generated_let_declarationResult_r(119938.0, 119963.0), Basics_or(generated_let_declarationResult_r(119990.0, 119993.0), Basics_or(generated_let_declarationResult_e(119995.0), generated_let_declarationResult_r(119997.0, 120003.0))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(119912.0, 119937.0), Basics_or(generated_let_declarationResult_e(119964.0), Basics_or(generated_let_declarationResult_r(119966.0, 119967.0), Basics_or(generated_let_declarationResult_e(119970.0), Basics_or(generated_let_declarationResult_r(119973.0, 119974.0), Basics_or(generated_let_declarationResult_r(119977.0, 119980.0), generated_let_declarationResult_r(119982.0, 119989.0))))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if Basics_or(generated_let_declarationResult_r(120005.0, 120015.0), Basics_or(generated_let_declarationResult_r(120042.0, 120067.0), generated_let_declarationResult_r(120094.0, 120119.0))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(120016.0, 120041.0), Basics_or(generated_let_declarationResult_r(120068.0, 120069.0), Basics_or(generated_let_declarationResult_r(120071.0, 120074.0), Basics_or(generated_let_declarationResult_r(120077.0, 120084.0), Basics_or(generated_let_declarationResult_r(120086.0, 120092.0), Basics_or(generated_let_declarationResult_r(120120.0, 120121.0), Basics_or(generated_let_declarationResult_r(120123.0, 120126.0), Basics_or(generated_let_declarationResult_r(120128.0, 120132.0), generated_let_declarationResult_e(120134.0))))))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(120431.0) {
                                            if Basics_or(generated_let_declarationResult_r(120138.0, 120144.0), Basics_or(generated_let_declarationResult_r(120172.0, 120197.0), Basics_or(generated_let_declarationResult_r(120224.0, 120249.0), Basics_or(generated_let_declarationResult_r(120276.0, 120301.0), Basics_or(generated_let_declarationResult_r(120328.0, 120353.0), generated_let_declarationResult_r(120380.0, 120405.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(120146.0, 120171.0), Basics_or(generated_let_declarationResult_r(120198.0, 120223.0), Basics_or(generated_let_declarationResult_r(120250.0, 120275.0), Basics_or(generated_let_declarationResult_r(120302.0, 120327.0), Basics_or(generated_let_declarationResult_r(120354.0, 120379.0), generated_let_declarationResult_r(120406.0, 120430.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(120539.0) {
                                                if Basics_or(generated_let_declarationResult_e(120431.0), Basics_or(generated_let_declarationResult_r(120458.0, 120485.0), generated_let_declarationResult_r(120514.0, 120538.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(120432.0, 120457.0), generated_let_declarationResult_r(120488.0, 120512.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        if generated_let_declarationResult_e(120513.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(120539.0), Basics_or(generated_let_declarationResult_e(120571.0), generated_let_declarationResult_e(120597.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(120540.0, 120545.0), Basics_or(generated_let_declarationResult_r(120572.0, 120596.0), generated_let_declarationResult_r(120598.0, 120603.0))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(120546.0, 120570.0), generated_let_declarationResult_r(120604.0, 120628.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(121478.0) {
                                        if generated_let_declarationResult_l(120771.0) {
                                            if Basics_or(generated_let_declarationResult_e(120629.0), Basics_or(generated_let_declarationResult_e(120655.0), Basics_or(generated_let_declarationResult_e(120687.0), Basics_or(generated_let_declarationResult_e(120713.0), generated_let_declarationResult_e(120745.0))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(120630.0, 120654.0), Basics_or(generated_let_declarationResult_r(120656.0, 120661.0), Basics_or(generated_let_declarationResult_r(120688.0, 120712.0), Basics_or(generated_let_declarationResult_r(120714.0, 120719.0), generated_let_declarationResult_r(120746.0, 120770.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(120662.0, 120686.0), generated_let_declarationResult_r(120720.0, 120744.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(121398.0) {
                                                if generated_let_declarationResult_e(120771.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(120772.0, 120777.0), generated_let_declarationResult_e(120779.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        if generated_let_declarationResult_e(120778.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                        } else {
                                                            if generated_let_declarationResult_r(120782.0, 120831.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                            } else {
                                                                if generated_let_declarationResult_r(120832.0, 121343.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                                } else {
                                                                    if generated_let_declarationResult_r(121344.0, 121397.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                                    } else {
                                                                        Maybe_Maybe.Maybe_Nothing
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(121398.0), Basics_or(generated_let_declarationResult_r(121403.0, 121452.0), Basics_or(generated_let_declarationResult_e(121461.0), generated_let_declarationResult_e(121476.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(121399.0, 121402.0), Basics_or(generated_let_declarationResult_r(121453.0, 121460.0), Basics_or(generated_let_declarationResult_r(121462.0, 121475.0), generated_let_declarationResult_e(121477.0)))) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(122927.0) {
                                            if generated_let_declarationResult_l(122634.0) {
                                                if generated_let_declarationResult_e(121478.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if generated_let_declarationResult_r(121479.0, 121483.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(121499.0, 121503.0), generated_let_declarationResult_r(121505.0, 121519.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            if generated_let_declarationResult_r(122624.0, 122633.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if generated_let_declarationResult_e(122634.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(122635.0, 122654.0), generated_let_declarationResult_r(122661.0, 122666.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(122880.0, 122886.0), Basics_or(generated_let_declarationResult_r(122888.0, 122904.0), Basics_or(generated_let_declarationResult_r(122907.0, 122913.0), Basics_or(generated_let_declarationResult_r(122915.0, 122916.0), generated_let_declarationResult_r(122918.0, 122922.0))))) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(123214.0) {
                                                if Basics_or(generated_let_declarationResult_r(122928.0, 122989.0), generated_let_declarationResult_r(123191.0, 123197.0)) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(123023.0), generated_let_declarationResult_r(123184.0, 123190.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_r(123136.0, 123180.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                        } else {
                                                            if generated_let_declarationResult_r(123200.0, 123209.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(123214.0), Basics_or(generated_let_declarationResult_r(123536.0, 123565.0), generated_let_declarationResult_r(123584.0, 123627.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_e(123215.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_e(123566.0), generated_let_declarationResult_r(123628.0, 123631.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            if generated_let_declarationResult_r(123632.0, 123641.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                            } else {
                                                                if generated_let_declarationResult_e(123647.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolCurrency)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if generated_let_declarationResult_l(127135.0) {
                                    if generated_let_declarationResult_l(126463.0) {
                                        if generated_let_declarationResult_l(125217.0) {
                                            if Basics_or(generated_let_declarationResult_r(124112.0, 124138.0), Basics_or(generated_let_declarationResult_r(124896.0, 124902.0), Basics_or(generated_let_declarationResult_r(124904.0, 124907.0), Basics_or(generated_let_declarationResult_r(124909.0, 124910.0), Basics_or(generated_let_declarationResult_r(124912.0, 124926.0), generated_let_declarationResult_r(124928.0, 125124.0)))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                            } else {
                                                if generated_let_declarationResult_e(124139.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_r(124140.0, 124143.0), generated_let_declarationResult_r(125136.0, 125142.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                    } else {
                                                        if generated_let_declarationResult_r(124144.0, 124153.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                        } else {
                                                            if generated_let_declarationResult_r(125127.0, 125135.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                            } else {
                                                                if generated_let_declarationResult_r(125184.0, 125216.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                                } else {
                                                                    Maybe_Maybe.Maybe_Nothing
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(126123.0) {
                                                if generated_let_declarationResult_e(125217.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterUppercase)
                                                } else {
                                                    if generated_let_declarationResult_r(125218.0, 125251.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterLowercase)
                                                    } else {
                                                        if generated_let_declarationResult_r(125252.0, 125258.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            if generated_let_declarationResult_e(125259.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterModifier)
                                                            } else {
                                                                if generated_let_declarationResult_r(125264.0, 125273.0) {
                                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                                } else {
                                                                    if generated_let_declarationResult_r(125278.0, 125279.0) {
                                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_PunctuationOther)
                                                                    } else {
                                                                        if generated_let_declarationResult_r(126065.0, 126122.0) {
                                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                                        } else {
                                                                            Maybe_Maybe.Maybe_Nothing
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_e(126123.0), Basics_or(generated_let_declarationResult_r(126125.0, 126127.0), Basics_or(generated_let_declarationResult_r(126129.0, 126132.0), Basics_or(generated_let_declarationResult_r(126209.0, 126253.0), generated_let_declarationResult_r(126255.0, 126269.0))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(126124.0), generated_let_declarationResult_e(126254.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                    } else {
                                                        if generated_let_declarationResult_e(126128.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolCurrency)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(126566.0) {
                                            if generated_let_declarationResult_l(126515.0) {
                                                if Basics_or(generated_let_declarationResult_r(126464.0, 126467.0), Basics_or(generated_let_declarationResult_r(126469.0, 126495.0), Basics_or(generated_let_declarationResult_r(126497.0, 126498.0), Basics_or(generated_let_declarationResult_e(126500.0), Basics_or(generated_let_declarationResult_e(126503.0), generated_let_declarationResult_r(126505.0, 126514.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(126516.0, 126519.0), Basics_or(generated_let_declarationResult_e(126530.0), Basics_or(generated_let_declarationResult_r(126541.0, 126543.0), Basics_or(generated_let_declarationResult_r(126545.0, 126546.0), Basics_or(generated_let_declarationResult_e(126548.0), Basics_or(generated_let_declarationResult_r(126561.0, 126562.0), Basics_or(generated_let_declarationResult_e(126564.0), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 1.0), Basics_or(generated_let_declarationResult_r(126521.0, 126523.0), Basics_or(generated_let_declarationResult_r(126535.0, 126539.0), generated_let_declarationResult_r(126551.0, 126559.0))))))))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(126602.0) {
                                                if Basics_or(generated_let_declarationResult_r(126567.0, 126570.0), Basics_or(generated_let_declarationResult_r(126572.0, 126578.0), Basics_or(generated_let_declarationResult_r(126580.0, 126583.0), Basics_or(generated_let_declarationResult_r(126585.0, 126588.0), Basics_or(generated_let_declarationResult_e(126590.0), generated_let_declarationResult_r(126592.0, 126601.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(126603.0, 126619.0), Basics_or(generated_let_declarationResult_r(126625.0, 126627.0), Basics_or(generated_let_declarationResult_r(126629.0, 126633.0), generated_let_declarationResult_r(126635.0, 126651.0)))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if generated_let_declarationResult_r(126704.0, 126705.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolMath)
                                                    } else {
                                                        if Basics_or(generated_let_declarationResult_r(126976.0, 127019.0), generated_let_declarationResult_r(127024.0, 127123.0)) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                        } else {
                                                            Maybe_Maybe.Maybe_Nothing
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if generated_let_declarationResult_l(129199.0) {
                                        if generated_let_declarationResult_l(127994.0) {
                                            if Basics_or(generated_let_declarationResult_r(127136.0, 127150.0), Basics_or(generated_let_declarationResult_r(127153.0, 127167.0), Basics_or(generated_let_declarationResult_r(127169.0, 127183.0), Basics_or(generated_let_declarationResult_r(127185.0, 127221.0), Basics_or(generated_let_declarationResult_r(127245.0, 127405.0), Basics_or(generated_let_declarationResult_r(127462.0, 127490.0), Basics_or(generated_let_declarationResult_r(127504.0, 127547.0), Basics_or(generated_let_declarationResult_r(127552.0, 127560.0), Basics_or(generated_let_declarationResult_r(127568.0, 127569.0), Basics_or(generated_let_declarationResult_r(127584.0, 127589.0), generated_let_declarationResult_r(127744.0, 127993.0))))))))))) {
                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                            } else {
                                                if generated_let_declarationResult_r(127232.0, 127244.0) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberOther)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(128991.0) {
                                                if Basics_or(generated_let_declarationResult_e(127994.0), Basics_or(generated_let_declarationResult_r(128000.0, 128727.0), Basics_or(generated_let_declarationResult_r(128732.0, 128748.0), Basics_or(generated_let_declarationResult_r(128752.0, 128764.0), Basics_or(generated_let_declarationResult_r(128768.0, 128886.0), generated_let_declarationResult_r(128891.0, 128985.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if generated_let_declarationResult_r(127995.0, 127999.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolModifier)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(128992.0, 129003.0), Basics_or(generated_let_declarationResult_e(129008.0), Basics_or(generated_let_declarationResult_r(129024.0, 129035.0), Basics_or(generated_let_declarationResult_r(129040.0, 129095.0), Basics_or(generated_let_declarationResult_r(129104.0, 129113.0), Basics_or(generated_let_declarationResult_r(129120.0, 129159.0), generated_let_declarationResult_r(129168.0, 129197.0))))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            }
                                        }
                                    } else {
                                        if generated_let_declarationResult_l(131071.0) {
                                            if generated_let_declarationResult_l(129726.0) {
                                                if Basics_or(generated_let_declarationResult_r(129200.0, 129201.0), Basics_or(generated_let_declarationResult_r(129280.0, 129619.0), Basics_or(generated_let_declarationResult_r(129632.0, 129645.0), Basics_or(generated_let_declarationResult_r(129648.0, 129660.0), Basics_or(generated_let_declarationResult_r(129664.0, 129672.0), generated_let_declarationResult_r(129680.0, 129725.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(129727.0, 129733.0), Basics_or(generated_let_declarationResult_r(129742.0, 129755.0), Basics_or(generated_let_declarationResult_r(129760.0, 129768.0), Basics_or(generated_let_declarationResult_r(129776.0, 129784.0), Basics_or(generated_let_declarationResult_r(129792.0, 129938.0), generated_let_declarationResult_r(129940.0, 129994.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_SymbolOther)
                                                } else {
                                                    if generated_let_declarationResult_r(130032.0, 130041.0) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_NumberDecimalDigit)
                                                    } else {
                                                        Maybe_Maybe.Maybe_Nothing
                                                    }
                                                }
                                            }
                                        } else {
                                            if generated_let_declarationResult_l(194559.0) {
                                                if Basics_or(generated_let_declarationResult_r(131072.0, 173791.0), Basics_or(generated_let_declarationResult_r(173824.0, 177977.0), Basics_or(generated_let_declarationResult_r(177984.0, 178205.0), Basics_or(generated_let_declarationResult_r(178208.0, 183969.0), Basics_or(generated_let_declarationResult_r(183984.0, 191456.0), generated_let_declarationResult_r(191472.0, 192093.0)))))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    Maybe_Maybe.Maybe_Nothing
                                                }
                                            } else {
                                                if Basics_or(generated_let_declarationResult_r(194560.0, 195101.0), Basics_or(generated_let_declarationResult_r(196608.0, 201546.0), generated_let_declarationResult_r(201552.0, 205743.0))) {
                                                    Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_LetterOther)
                                                } else {
                                                    if Basics_or(generated_let_declarationResult_e(917505.0), generated_let_declarationResult_r(917536.0, 917631.0)) {
                                                        Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherFormat)
                                                    } else {
                                                        if generated_let_declarationResult_r(917760.0, 917999.0) {
                                                            Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_MarkNonSpacing)
                                                        } else {
                                                            if generated_let_declarationResult_r(983040.0, 1114109.0) {
                                                                Maybe_Maybe.Maybe_Just(Unicode_Category.Unicode_OtherPrivateUse)
                                                            } else {
                                                                Maybe_Maybe.Maybe_Nothing
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
}

@Sendable public static func Unicode_isAlpha(_ c: UnicodeScalar) ->  Bool {
    let generated_let_declarationResult_code: Double =
        Char_toCode(c)
    @Sendable func generated_let_declarationResult_e(_ hex: Double) ->  Bool {
        Basics_eq(hex, generated_let_declarationResult_code)
    }
    @Sendable func generated_let_declarationResult_l(_ hex: Double) ->  Bool {
        Basics_lt(generated_let_declarationResult_code, hex)
    }
    @Sendable func generated_let_declarationResult_r(_ from: Double, _ to: Double) ->  Bool {
        Basics_and(Basics_le(from, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, to))
    }
    return
        if generated_let_declarationResult_l(256.0) {
            Basics_or(generated_let_declarationResult_r(65.0, 90.0), Basics_or(generated_let_declarationResult_r(97.0, 122.0), Basics_or(generated_let_declarationResult_e(170.0), Basics_or(generated_let_declarationResult_e(181.0), Basics_or(generated_let_declarationResult_e(186.0), Basics_or(generated_let_declarationResult_r(192.0, 214.0), Basics_or(generated_let_declarationResult_r(216.0, 246.0), generated_let_declarationResult_r(248.0, 255.0))))))))
        } else {
            if generated_let_declarationResult_l(43513.0) {
                if generated_let_declarationResult_l(4205.0) {
                    if generated_let_declarationResult_l(2783.0) {
                        if generated_let_declarationResult_l(2143.0) {
                            if generated_let_declarationResult_l(1567.0) {
                                if generated_let_declarationResult_l(907.0) {
                                    Basics_or(generated_let_declarationResult_r(256.0, 705.0), Basics_or(generated_let_declarationResult_r(710.0, 721.0), Basics_or(generated_let_declarationResult_r(736.0, 740.0), Basics_or(generated_let_declarationResult_r(880.0, 884.0), Basics_or(generated_let_declarationResult_r(886.0, 887.0), Basics_or(generated_let_declarationResult_r(890.0, 893.0), Basics_or(generated_let_declarationResult_e(895.0), Basics_or(generated_let_declarationResult_e(902.0), Basics_or(generated_let_declarationResult_r(904.0, 906.0), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 0.0), generated_let_declarationResult_r(748.0, 750.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_e(908.0), Basics_or(generated_let_declarationResult_r(910.0, 929.0), Basics_or(generated_let_declarationResult_r(931.0, 1013.0), Basics_or(generated_let_declarationResult_r(1015.0, 1153.0), Basics_or(generated_let_declarationResult_r(1162.0, 1327.0), Basics_or(generated_let_declarationResult_r(1329.0, 1366.0), Basics_or(generated_let_declarationResult_e(1369.0), Basics_or(generated_let_declarationResult_r(1376.0, 1416.0), Basics_or(generated_let_declarationResult_r(1488.0, 1514.0), generated_let_declarationResult_r(1519.0, 1522.0))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(1868.0) {
                                    Basics_or(generated_let_declarationResult_r(1568.0, 1610.0), Basics_or(generated_let_declarationResult_r(1646.0, 1647.0), Basics_or(generated_let_declarationResult_r(1649.0, 1747.0), Basics_or(generated_let_declarationResult_e(1749.0), Basics_or(generated_let_declarationResult_r(1765.0, 1766.0), Basics_or(generated_let_declarationResult_r(1774.0, 1775.0), Basics_or(generated_let_declarationResult_r(1786.0, 1788.0), Basics_or(generated_let_declarationResult_e(1791.0), Basics_or(generated_let_declarationResult_e(1808.0), generated_let_declarationResult_r(1810.0, 1839.0))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(1869.0, 1957.0), Basics_or(generated_let_declarationResult_e(1969.0), Basics_or(generated_let_declarationResult_r(1994.0, 2026.0), Basics_or(generated_let_declarationResult_r(2036.0, 2037.0), Basics_or(generated_let_declarationResult_e(2042.0), Basics_or(generated_let_declarationResult_r(2048.0, 2069.0), Basics_or(generated_let_declarationResult_e(2074.0), Basics_or(generated_let_declarationResult_e(2084.0), Basics_or(generated_let_declarationResult_e(2088.0), generated_let_declarationResult_r(2112.0, 2136.0))))))))))
                                }
                            }
                        } else {
                            if generated_let_declarationResult_l(2543.0) {
                                if generated_let_declarationResult_l(2436.0) {
                                    Basics_or(generated_let_declarationResult_r(2144.0, 2154.0), Basics_or(generated_let_declarationResult_r(2160.0, 2183.0), Basics_or(generated_let_declarationResult_r(2185.0, 2190.0), Basics_or(generated_let_declarationResult_r(2208.0, 2249.0), Basics_or(generated_let_declarationResult_r(2308.0, 2361.0), Basics_or(generated_let_declarationResult_e(2365.0), Basics_or(generated_let_declarationResult_e(2384.0), Basics_or(generated_let_declarationResult_r(2392.0, 2401.0), generated_let_declarationResult_r(2417.0, 2432.0)))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(2437.0, 2444.0), Basics_or(generated_let_declarationResult_r(2447.0, 2448.0), Basics_or(generated_let_declarationResult_r(2451.0, 2472.0), Basics_or(generated_let_declarationResult_r(2474.0, 2480.0), Basics_or(generated_let_declarationResult_e(2482.0), Basics_or(generated_let_declarationResult_r(2486.0, 2489.0), Basics_or(generated_let_declarationResult_e(2493.0), Basics_or(generated_let_declarationResult_e(2510.0), Basics_or(generated_let_declarationResult_r(2524.0, 2525.0), generated_let_declarationResult_r(2527.0, 2529.0))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(2653.0) {
                                    Basics_or(generated_let_declarationResult_r(2544.0, 2545.0), Basics_or(generated_let_declarationResult_e(2556.0), Basics_or(generated_let_declarationResult_r(2565.0, 2570.0), Basics_or(generated_let_declarationResult_r(2575.0, 2576.0), Basics_or(generated_let_declarationResult_r(2579.0, 2600.0), Basics_or(generated_let_declarationResult_r(2602.0, 2608.0), Basics_or(generated_let_declarationResult_r(2610.0, 2611.0), Basics_or(generated_let_declarationResult_r(2613.0, 2614.0), Basics_or(generated_let_declarationResult_r(2616.0, 2617.0), generated_let_declarationResult_r(2649.0, 2652.0))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_e(2654.0), Basics_or(generated_let_declarationResult_r(2674.0, 2676.0), Basics_or(generated_let_declarationResult_r(2693.0, 2701.0), Basics_or(generated_let_declarationResult_r(2703.0, 2705.0), Basics_or(generated_let_declarationResult_r(2707.0, 2728.0), Basics_or(generated_let_declarationResult_r(2730.0, 2736.0), Basics_or(generated_let_declarationResult_r(2738.0, 2739.0), Basics_or(generated_let_declarationResult_r(2741.0, 2745.0), Basics_or(generated_let_declarationResult_e(2749.0), generated_let_declarationResult_e(2768.0))))))))))
                                }
                            }
                        }
                    } else {
                        if generated_let_declarationResult_l(3295.0) {
                            if generated_let_declarationResult_l(2978.0) {
                                if generated_let_declarationResult_l(2907.0) {
                                    Basics_or(generated_let_declarationResult_r(2784.0, 2785.0), Basics_or(generated_let_declarationResult_e(2809.0), Basics_or(generated_let_declarationResult_r(2821.0, 2828.0), Basics_or(generated_let_declarationResult_r(2831.0, 2832.0), Basics_or(generated_let_declarationResult_r(2835.0, 2856.0), Basics_or(generated_let_declarationResult_r(2858.0, 2864.0), Basics_or(generated_let_declarationResult_r(2866.0, 2867.0), Basics_or(generated_let_declarationResult_r(2869.0, 2873.0), generated_let_declarationResult_e(2877.0)))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(2908.0, 2909.0), Basics_or(generated_let_declarationResult_r(2911.0, 2913.0), Basics_or(generated_let_declarationResult_e(2929.0), Basics_or(generated_let_declarationResult_e(2947.0), Basics_or(generated_let_declarationResult_r(2949.0, 2954.0), Basics_or(generated_let_declarationResult_r(2958.0, 2960.0), Basics_or(generated_let_declarationResult_r(2962.0, 2965.0), Basics_or(generated_let_declarationResult_r(2969.0, 2970.0), Basics_or(generated_let_declarationResult_e(2972.0), generated_let_declarationResult_r(2974.0, 2975.0))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(3164.0) {
                                    Basics_or(generated_let_declarationResult_r(2979.0, 2980.0), Basics_or(generated_let_declarationResult_r(2984.0, 2986.0), Basics_or(generated_let_declarationResult_r(2990.0, 3001.0), Basics_or(generated_let_declarationResult_e(3024.0), Basics_or(generated_let_declarationResult_r(3077.0, 3084.0), Basics_or(generated_let_declarationResult_r(3086.0, 3088.0), Basics_or(generated_let_declarationResult_r(3090.0, 3112.0), Basics_or(generated_let_declarationResult_r(3114.0, 3129.0), Basics_or(generated_let_declarationResult_e(3133.0), generated_let_declarationResult_r(3160.0, 3162.0))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_e(3165.0), Basics_or(generated_let_declarationResult_r(3168.0, 3169.0), Basics_or(generated_let_declarationResult_e(3200.0), Basics_or(generated_let_declarationResult_r(3205.0, 3212.0), Basics_or(generated_let_declarationResult_r(3214.0, 3216.0), Basics_or(generated_let_declarationResult_r(3218.0, 3240.0), Basics_or(generated_let_declarationResult_r(3242.0, 3251.0), Basics_or(generated_let_declarationResult_r(3253.0, 3257.0), Basics_or(generated_let_declarationResult_e(3261.0), generated_let_declarationResult_r(3293.0, 3294.0))))))))))
                                }
                            }
                        } else {
                            if generated_let_declarationResult_l(3715.0) {
                                if generated_let_declarationResult_l(3449.0) {
                                    Basics_or(generated_let_declarationResult_r(3296.0, 3297.0), Basics_or(generated_let_declarationResult_r(3313.0, 3314.0), Basics_or(generated_let_declarationResult_r(3332.0, 3340.0), Basics_or(generated_let_declarationResult_r(3342.0, 3344.0), Basics_or(generated_let_declarationResult_r(3346.0, 3386.0), Basics_or(generated_let_declarationResult_e(3389.0), Basics_or(generated_let_declarationResult_e(3406.0), Basics_or(generated_let_declarationResult_r(3412.0, 3414.0), generated_let_declarationResult_r(3423.0, 3425.0)))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(3450.0, 3455.0), Basics_or(generated_let_declarationResult_r(3461.0, 3478.0), Basics_or(generated_let_declarationResult_r(3482.0, 3505.0), Basics_or(generated_let_declarationResult_r(3507.0, 3515.0), Basics_or(generated_let_declarationResult_e(3517.0), Basics_or(generated_let_declarationResult_r(3520.0, 3526.0), Basics_or(generated_let_declarationResult_r(3585.0, 3632.0), Basics_or(generated_let_declarationResult_r(3634.0, 3635.0), Basics_or(generated_let_declarationResult_r(3648.0, 3654.0), generated_let_declarationResult_r(3713.0, 3714.0))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(3839.0) {
                                    Basics_or(generated_let_declarationResult_e(3716.0), Basics_or(generated_let_declarationResult_r(3718.0, 3722.0), Basics_or(generated_let_declarationResult_r(3724.0, 3747.0), Basics_or(generated_let_declarationResult_e(3749.0), Basics_or(generated_let_declarationResult_r(3751.0, 3760.0), Basics_or(generated_let_declarationResult_r(3762.0, 3763.0), Basics_or(generated_let_declarationResult_e(3773.0), Basics_or(generated_let_declarationResult_r(3776.0, 3780.0), Basics_or(generated_let_declarationResult_e(3782.0), generated_let_declarationResult_r(3804.0, 3807.0))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_e(3840.0), Basics_or(generated_let_declarationResult_r(3904.0, 3911.0), Basics_or(generated_let_declarationResult_r(3913.0, 3948.0), Basics_or(generated_let_declarationResult_r(3976.0, 3980.0), Basics_or(generated_let_declarationResult_r(4096.0, 4138.0), Basics_or(generated_let_declarationResult_e(4159.0), Basics_or(generated_let_declarationResult_r(4176.0, 4181.0), Basics_or(generated_let_declarationResult_r(4186.0, 4189.0), Basics_or(generated_let_declarationResult_e(4193.0), generated_let_declarationResult_r(4197.0, 4198.0))))))))))
                                }
                            }
                        }
                    }
                } else {
                    if generated_let_declarationResult_l(8133.0) {
                        if generated_let_declarationResult_l(6175.0) {
                            if generated_let_declarationResult_l(4807.0) {
                                if generated_let_declarationResult_l(4687.0) {
                                    Basics_or(generated_let_declarationResult_r(4206.0, 4208.0), Basics_or(generated_let_declarationResult_r(4213.0, 4225.0), Basics_or(generated_let_declarationResult_e(4238.0), Basics_or(generated_let_declarationResult_r(4256.0, 4293.0), Basics_or(generated_let_declarationResult_e(4295.0), Basics_or(generated_let_declarationResult_e(4301.0), Basics_or(generated_let_declarationResult_r(4304.0, 4346.0), Basics_or(generated_let_declarationResult_r(4348.0, 4680.0), generated_let_declarationResult_r(4682.0, 4685.0)))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(4688.0, 4694.0), Basics_or(generated_let_declarationResult_e(4696.0), Basics_or(generated_let_declarationResult_r(4698.0, 4701.0), Basics_or(generated_let_declarationResult_r(4704.0, 4744.0), Basics_or(generated_let_declarationResult_r(4746.0, 4749.0), Basics_or(generated_let_declarationResult_r(4752.0, 4784.0), Basics_or(generated_let_declarationResult_r(4786.0, 4789.0), Basics_or(generated_let_declarationResult_r(4792.0, 4798.0), Basics_or(generated_let_declarationResult_e(4800.0), generated_let_declarationResult_r(4802.0, 4805.0))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(5791.0) {
                                    Basics_or(generated_let_declarationResult_r(4808.0, 4822.0), Basics_or(generated_let_declarationResult_r(4824.0, 4880.0), Basics_or(generated_let_declarationResult_r(4882.0, 4885.0), Basics_or(generated_let_declarationResult_r(4888.0, 4954.0), Basics_or(generated_let_declarationResult_r(4992.0, 5007.0), Basics_or(generated_let_declarationResult_r(5024.0, 5109.0), Basics_or(generated_let_declarationResult_r(5112.0, 5117.0), Basics_or(generated_let_declarationResult_r(5121.0, 5740.0), Basics_or(generated_let_declarationResult_r(5743.0, 5759.0), generated_let_declarationResult_r(5761.0, 5786.0))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(5792.0, 5866.0), Basics_or(generated_let_declarationResult_r(5873.0, 5880.0), Basics_or(generated_let_declarationResult_r(5888.0, 5905.0), Basics_or(generated_let_declarationResult_r(5919.0, 5937.0), Basics_or(generated_let_declarationResult_r(5952.0, 5969.0), Basics_or(generated_let_declarationResult_r(5984.0, 5996.0), Basics_or(generated_let_declarationResult_r(5998.0, 6000.0), Basics_or(generated_let_declarationResult_r(6016.0, 6067.0), Basics_or(generated_let_declarationResult_e(6103.0), generated_let_declarationResult_e(6108.0))))))))))
                                }
                            }
                        } else {
                            if generated_let_declarationResult_l(7244.0) {
                                if generated_let_declarationResult_l(6575.0) {
                                    Basics_or(generated_let_declarationResult_r(6176.0, 6264.0), Basics_or(generated_let_declarationResult_r(6272.0, 6276.0), Basics_or(generated_let_declarationResult_r(6279.0, 6312.0), Basics_or(generated_let_declarationResult_e(6314.0), Basics_or(generated_let_declarationResult_r(6320.0, 6389.0), Basics_or(generated_let_declarationResult_r(6400.0, 6430.0), Basics_or(generated_let_declarationResult_r(6480.0, 6509.0), Basics_or(generated_let_declarationResult_r(6512.0, 6516.0), generated_let_declarationResult_r(6528.0, 6571.0)))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(6576.0, 6601.0), Basics_or(generated_let_declarationResult_r(6656.0, 6678.0), Basics_or(generated_let_declarationResult_r(6688.0, 6740.0), Basics_or(generated_let_declarationResult_e(6823.0), Basics_or(generated_let_declarationResult_r(6917.0, 6963.0), Basics_or(generated_let_declarationResult_r(6981.0, 6988.0), Basics_or(generated_let_declarationResult_r(7043.0, 7072.0), Basics_or(generated_let_declarationResult_r(7086.0, 7087.0), Basics_or(generated_let_declarationResult_r(7098.0, 7141.0), generated_let_declarationResult_r(7168.0, 7203.0))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(7679.0) {
                                    Basics_or(generated_let_declarationResult_r(7245.0, 7247.0), Basics_or(generated_let_declarationResult_r(7258.0, 7293.0), Basics_or(generated_let_declarationResult_r(7296.0, 7304.0), Basics_or(generated_let_declarationResult_r(7312.0, 7354.0), Basics_or(generated_let_declarationResult_r(7357.0, 7359.0), Basics_or(generated_let_declarationResult_r(7401.0, 7404.0), Basics_or(generated_let_declarationResult_r(7406.0, 7411.0), Basics_or(generated_let_declarationResult_r(7413.0, 7414.0), Basics_or(generated_let_declarationResult_e(7418.0), generated_let_declarationResult_r(7424.0, 7615.0))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(7680.0, 7957.0), Basics_or(generated_let_declarationResult_r(7960.0, 7965.0), Basics_or(generated_let_declarationResult_r(7968.0, 8005.0), Basics_or(generated_let_declarationResult_r(8008.0, 8013.0), Basics_or(generated_let_declarationResult_r(8016.0, 8023.0), Basics_or(generated_let_declarationResult_r(8032.0, 8061.0), Basics_or(generated_let_declarationResult_r(8064.0, 8116.0), Basics_or(generated_let_declarationResult_r(8118.0, 8124.0), Basics_or(generated_let_declarationResult_e(8126.0), Basics_or(generated_let_declarationResult_r(8130.0, 8132.0), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 1.0), generated_let_declarationResult_r(8025.0, 8031.0))))))))))))
                                }
                            }
                        }
                    } else {
                        if generated_let_declarationResult_l(12336.0) {
                            if generated_let_declarationResult_l(8578.0) {
                                if generated_let_declarationResult_l(8449.0) {
                                    Basics_or(generated_let_declarationResult_r(8134.0, 8140.0), Basics_or(generated_let_declarationResult_r(8144.0, 8147.0), Basics_or(generated_let_declarationResult_r(8150.0, 8155.0), Basics_or(generated_let_declarationResult_r(8160.0, 8172.0), Basics_or(generated_let_declarationResult_r(8178.0, 8180.0), Basics_or(generated_let_declarationResult_r(8182.0, 8188.0), Basics_or(generated_let_declarationResult_e(8305.0), Basics_or(generated_let_declarationResult_e(8319.0), generated_let_declarationResult_r(8336.0, 8348.0)))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_e(8450.0), Basics_or(generated_let_declarationResult_e(8455.0), Basics_or(generated_let_declarationResult_r(8458.0, 8467.0), Basics_or(generated_let_declarationResult_e(8469.0), Basics_or(generated_let_declarationResult_r(8473.0, 8477.0), Basics_or(generated_let_declarationResult_r(8490.0, 8493.0), Basics_or(generated_let_declarationResult_r(8495.0, 8505.0), Basics_or(generated_let_declarationResult_r(8508.0, 8511.0), Basics_or(generated_let_declarationResult_r(8517.0, 8521.0), Basics_or(generated_let_declarationResult_e(8526.0), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 0.0), generated_let_declarationResult_r(8484.0, 8488.0))))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(11679.0) {
                                    Basics_or(generated_let_declarationResult_r(8579.0, 8580.0), Basics_or(generated_let_declarationResult_r(11264.0, 11492.0), Basics_or(generated_let_declarationResult_r(11499.0, 11502.0), Basics_or(generated_let_declarationResult_r(11506.0, 11507.0), Basics_or(generated_let_declarationResult_r(11520.0, 11557.0), Basics_or(generated_let_declarationResult_e(11559.0), Basics_or(generated_let_declarationResult_e(11565.0), Basics_or(generated_let_declarationResult_r(11568.0, 11623.0), Basics_or(generated_let_declarationResult_e(11631.0), generated_let_declarationResult_r(11648.0, 11670.0))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(11680.0, 11686.0), Basics_or(generated_let_declarationResult_r(11688.0, 11694.0), Basics_or(generated_let_declarationResult_r(11696.0, 11702.0), Basics_or(generated_let_declarationResult_r(11704.0, 11710.0), Basics_or(generated_let_declarationResult_r(11712.0, 11718.0), Basics_or(generated_let_declarationResult_r(11720.0, 11726.0), Basics_or(generated_let_declarationResult_r(11728.0, 11734.0), Basics_or(generated_let_declarationResult_r(11736.0, 11742.0), Basics_or(generated_let_declarationResult_e(11823.0), generated_let_declarationResult_r(12293.0, 12294.0))))))))))
                                }
                            }
                        } else {
                            if generated_let_declarationResult_l(42785.0) {
                                if generated_let_declarationResult_l(13311.0) {
                                    Basics_or(generated_let_declarationResult_r(12337.0, 12341.0), Basics_or(generated_let_declarationResult_r(12347.0, 12348.0), Basics_or(generated_let_declarationResult_r(12353.0, 12438.0), Basics_or(generated_let_declarationResult_r(12445.0, 12447.0), Basics_or(generated_let_declarationResult_r(12449.0, 12538.0), Basics_or(generated_let_declarationResult_r(12540.0, 12543.0), Basics_or(generated_let_declarationResult_r(12549.0, 12591.0), Basics_or(generated_let_declarationResult_r(12593.0, 12686.0), Basics_or(generated_let_declarationResult_r(12704.0, 12735.0), generated_let_declarationResult_r(12784.0, 12799.0))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(13312.0, 19903.0), Basics_or(generated_let_declarationResult_r(19968.0, 42124.0), Basics_or(generated_let_declarationResult_r(42192.0, 42237.0), Basics_or(generated_let_declarationResult_r(42240.0, 42508.0), Basics_or(generated_let_declarationResult_r(42512.0, 42527.0), Basics_or(generated_let_declarationResult_r(42538.0, 42539.0), Basics_or(generated_let_declarationResult_r(42560.0, 42606.0), Basics_or(generated_let_declarationResult_r(42623.0, 42653.0), Basics_or(generated_let_declarationResult_r(42656.0, 42725.0), generated_let_declarationResult_r(42775.0, 42783.0))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(43249.0) {
                                    Basics_or(generated_let_declarationResult_r(42786.0, 42888.0), Basics_or(generated_let_declarationResult_r(42891.0, 42954.0), Basics_or(generated_let_declarationResult_r(42960.0, 42961.0), Basics_or(generated_let_declarationResult_r(42966.0, 42969.0), Basics_or(generated_let_declarationResult_r(42994.0, 43009.0), Basics_or(generated_let_declarationResult_r(43011.0, 43013.0), Basics_or(generated_let_declarationResult_r(43015.0, 43018.0), Basics_or(generated_let_declarationResult_r(43020.0, 43042.0), Basics_or(generated_let_declarationResult_r(43072.0, 43123.0), Basics_or(generated_let_declarationResult_r(43138.0, 43187.0), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 1.0), generated_let_declarationResult_r(42963.0, 42965.0))))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(43250.0, 43255.0), Basics_or(generated_let_declarationResult_e(43259.0), Basics_or(generated_let_declarationResult_r(43261.0, 43262.0), Basics_or(generated_let_declarationResult_r(43274.0, 43301.0), Basics_or(generated_let_declarationResult_r(43312.0, 43334.0), Basics_or(generated_let_declarationResult_r(43360.0, 43388.0), Basics_or(generated_let_declarationResult_r(43396.0, 43442.0), Basics_or(generated_let_declarationResult_e(43471.0), Basics_or(generated_let_declarationResult_r(43488.0, 43492.0), generated_let_declarationResult_r(43494.0, 43503.0))))))))))
                                }
                            }
                        }
                    }
                }
            } else {
                if generated_let_declarationResult_l(70851.0) {
                    if generated_let_declarationResult_l(67071.0) {
                        if generated_let_declarationResult_l(65007.0) {
                            if generated_let_declarationResult_l(43867.0) {
                                if generated_let_declarationResult_l(43704.0) {
                                    Basics_or(generated_let_declarationResult_r(43514.0, 43518.0), Basics_or(generated_let_declarationResult_r(43520.0, 43560.0), Basics_or(generated_let_declarationResult_r(43584.0, 43586.0), Basics_or(generated_let_declarationResult_r(43588.0, 43595.0), Basics_or(generated_let_declarationResult_r(43616.0, 43638.0), Basics_or(generated_let_declarationResult_e(43642.0), Basics_or(generated_let_declarationResult_r(43646.0, 43695.0), Basics_or(generated_let_declarationResult_e(43697.0), generated_let_declarationResult_r(43701.0, 43702.0)))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(43705.0, 43709.0), Basics_or(generated_let_declarationResult_r(43739.0, 43741.0), Basics_or(generated_let_declarationResult_r(43744.0, 43754.0), Basics_or(generated_let_declarationResult_r(43762.0, 43764.0), Basics_or(generated_let_declarationResult_r(43777.0, 43782.0), Basics_or(generated_let_declarationResult_r(43785.0, 43790.0), Basics_or(generated_let_declarationResult_r(43793.0, 43798.0), Basics_or(generated_let_declarationResult_r(43808.0, 43814.0), Basics_or(generated_let_declarationResult_r(43816.0, 43822.0), Basics_or(generated_let_declarationResult_r(43824.0, 43866.0), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 0.0), generated_let_declarationResult_r(43712.0, 43714.0))))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(64286.0) {
                                    Basics_or(generated_let_declarationResult_r(43868.0, 43881.0), Basics_or(generated_let_declarationResult_r(43888.0, 44002.0), Basics_or(generated_let_declarationResult_r(44032.0, 55203.0), Basics_or(generated_let_declarationResult_r(55216.0, 55238.0), Basics_or(generated_let_declarationResult_r(55243.0, 55291.0), Basics_or(generated_let_declarationResult_r(63744.0, 64109.0), Basics_or(generated_let_declarationResult_r(64112.0, 64217.0), Basics_or(generated_let_declarationResult_r(64256.0, 64262.0), Basics_or(generated_let_declarationResult_r(64275.0, 64279.0), generated_let_declarationResult_e(64285.0))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(64287.0, 64296.0), Basics_or(generated_let_declarationResult_r(64298.0, 64310.0), Basics_or(generated_let_declarationResult_r(64312.0, 64316.0), Basics_or(generated_let_declarationResult_e(64318.0), Basics_or(generated_let_declarationResult_r(64320.0, 64321.0), Basics_or(generated_let_declarationResult_r(64323.0, 64324.0), Basics_or(generated_let_declarationResult_r(64326.0, 64433.0), Basics_or(generated_let_declarationResult_r(64467.0, 64829.0), Basics_or(generated_let_declarationResult_r(64848.0, 64911.0), generated_let_declarationResult_r(64914.0, 64967.0))))))))))
                                }
                            }
                        } else {
                            if generated_let_declarationResult_l(66303.0) {
                                if generated_let_declarationResult_l(65497.0) {
                                    Basics_or(generated_let_declarationResult_r(65008.0, 65019.0), Basics_or(generated_let_declarationResult_r(65136.0, 65140.0), Basics_or(generated_let_declarationResult_r(65142.0, 65276.0), Basics_or(generated_let_declarationResult_r(65313.0, 65338.0), Basics_or(generated_let_declarationResult_r(65345.0, 65370.0), Basics_or(generated_let_declarationResult_r(65382.0, 65470.0), Basics_or(generated_let_declarationResult_r(65474.0, 65479.0), Basics_or(generated_let_declarationResult_r(65482.0, 65487.0), generated_let_declarationResult_r(65490.0, 65495.0)))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(65498.0, 65500.0), Basics_or(generated_let_declarationResult_r(65536.0, 65547.0), Basics_or(generated_let_declarationResult_r(65549.0, 65574.0), Basics_or(generated_let_declarationResult_r(65576.0, 65594.0), Basics_or(generated_let_declarationResult_r(65596.0, 65597.0), Basics_or(generated_let_declarationResult_r(65599.0, 65613.0), Basics_or(generated_let_declarationResult_r(65616.0, 65629.0), Basics_or(generated_let_declarationResult_r(65664.0, 65786.0), Basics_or(generated_let_declarationResult_r(66176.0, 66204.0), generated_let_declarationResult_r(66208.0, 66256.0))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(66815.0) {
                                    Basics_or(generated_let_declarationResult_r(66304.0, 66335.0), Basics_or(generated_let_declarationResult_r(66349.0, 66368.0), Basics_or(generated_let_declarationResult_r(66370.0, 66377.0), Basics_or(generated_let_declarationResult_r(66384.0, 66421.0), Basics_or(generated_let_declarationResult_r(66432.0, 66461.0), Basics_or(generated_let_declarationResult_r(66464.0, 66499.0), Basics_or(generated_let_declarationResult_r(66504.0, 66511.0), Basics_or(generated_let_declarationResult_r(66560.0, 66717.0), Basics_or(generated_let_declarationResult_r(66736.0, 66771.0), generated_let_declarationResult_r(66776.0, 66811.0))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(66816.0, 66855.0), Basics_or(generated_let_declarationResult_r(66864.0, 66915.0), Basics_or(generated_let_declarationResult_r(66928.0, 66938.0), Basics_or(generated_let_declarationResult_r(66940.0, 66954.0), Basics_or(generated_let_declarationResult_r(66956.0, 66962.0), Basics_or(generated_let_declarationResult_r(66964.0, 66965.0), Basics_or(generated_let_declarationResult_r(66967.0, 66977.0), Basics_or(generated_let_declarationResult_r(66979.0, 66993.0), Basics_or(generated_let_declarationResult_r(66995.0, 67001.0), generated_let_declarationResult_r(67003.0, 67004.0))))))))))
                                }
                            }
                        }
                    } else {
                        if generated_let_declarationResult_l(69414.0) {
                            if generated_let_declarationResult_l(68029.0) {
                                if generated_let_declarationResult_l(67638.0) {
                                    Basics_or(generated_let_declarationResult_r(67072.0, 67382.0), Basics_or(generated_let_declarationResult_r(67392.0, 67413.0), Basics_or(generated_let_declarationResult_r(67424.0, 67431.0), Basics_or(generated_let_declarationResult_r(67456.0, 67461.0), Basics_or(generated_let_declarationResult_r(67463.0, 67504.0), Basics_or(generated_let_declarationResult_r(67506.0, 67514.0), Basics_or(generated_let_declarationResult_r(67584.0, 67589.0), Basics_or(generated_let_declarationResult_e(67592.0), generated_let_declarationResult_r(67594.0, 67637.0)))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(67639.0, 67640.0), Basics_or(generated_let_declarationResult_e(67644.0), Basics_or(generated_let_declarationResult_r(67647.0, 67669.0), Basics_or(generated_let_declarationResult_r(67680.0, 67702.0), Basics_or(generated_let_declarationResult_r(67712.0, 67742.0), Basics_or(generated_let_declarationResult_r(67808.0, 67826.0), Basics_or(generated_let_declarationResult_r(67828.0, 67829.0), Basics_or(generated_let_declarationResult_r(67840.0, 67861.0), Basics_or(generated_let_declarationResult_r(67872.0, 67897.0), generated_let_declarationResult_r(67968.0, 68023.0))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(68415.0) {
                                    Basics_or(generated_let_declarationResult_r(68030.0, 68031.0), Basics_or(generated_let_declarationResult_e(68096.0), Basics_or(generated_let_declarationResult_r(68112.0, 68115.0), Basics_or(generated_let_declarationResult_r(68117.0, 68119.0), Basics_or(generated_let_declarationResult_r(68121.0, 68149.0), Basics_or(generated_let_declarationResult_r(68192.0, 68220.0), Basics_or(generated_let_declarationResult_r(68224.0, 68252.0), Basics_or(generated_let_declarationResult_r(68288.0, 68295.0), Basics_or(generated_let_declarationResult_r(68297.0, 68324.0), generated_let_declarationResult_r(68352.0, 68405.0))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(68416.0, 68437.0), Basics_or(generated_let_declarationResult_r(68448.0, 68466.0), Basics_or(generated_let_declarationResult_r(68480.0, 68497.0), Basics_or(generated_let_declarationResult_r(68608.0, 68680.0), Basics_or(generated_let_declarationResult_r(68736.0, 68786.0), Basics_or(generated_let_declarationResult_r(68800.0, 68850.0), Basics_or(generated_let_declarationResult_r(68864.0, 68899.0), Basics_or(generated_let_declarationResult_r(69248.0, 69289.0), Basics_or(generated_let_declarationResult_r(69296.0, 69297.0), generated_let_declarationResult_r(69376.0, 69404.0))))))))))
                                }
                            }
                        } else {
                            if generated_let_declarationResult_l(70206.0) {
                                if generated_let_declarationResult_l(69839.0) {
                                    Basics_or(generated_let_declarationResult_e(69415.0), Basics_or(generated_let_declarationResult_r(69424.0, 69445.0), Basics_or(generated_let_declarationResult_r(69488.0, 69505.0), Basics_or(generated_let_declarationResult_r(69552.0, 69572.0), Basics_or(generated_let_declarationResult_r(69600.0, 69622.0), Basics_or(generated_let_declarationResult_r(69635.0, 69687.0), Basics_or(generated_let_declarationResult_r(69745.0, 69746.0), Basics_or(generated_let_declarationResult_e(69749.0), generated_let_declarationResult_r(69763.0, 69807.0)))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(69840.0, 69864.0), Basics_or(generated_let_declarationResult_r(69891.0, 69926.0), Basics_or(generated_let_declarationResult_e(69956.0), Basics_or(generated_let_declarationResult_e(69959.0), Basics_or(generated_let_declarationResult_r(69968.0, 70002.0), Basics_or(generated_let_declarationResult_e(70006.0), Basics_or(generated_let_declarationResult_r(70019.0, 70066.0), Basics_or(generated_let_declarationResult_r(70081.0, 70084.0), Basics_or(generated_let_declarationResult_r(70144.0, 70161.0), Basics_or(generated_let_declarationResult_r(70163.0, 70187.0), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 0.0), generated_let_declarationResult_r(70106.0, 70108.0))))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(70441.0) {
                                    Basics_or(generated_let_declarationResult_r(70207.0, 70208.0), Basics_or(generated_let_declarationResult_r(70272.0, 70278.0), Basics_or(generated_let_declarationResult_e(70280.0), Basics_or(generated_let_declarationResult_r(70282.0, 70285.0), Basics_or(generated_let_declarationResult_r(70287.0, 70301.0), Basics_or(generated_let_declarationResult_r(70303.0, 70312.0), Basics_or(generated_let_declarationResult_r(70320.0, 70366.0), Basics_or(generated_let_declarationResult_r(70405.0, 70412.0), Basics_or(generated_let_declarationResult_r(70415.0, 70416.0), generated_let_declarationResult_r(70419.0, 70440.0))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(70442.0, 70448.0), Basics_or(generated_let_declarationResult_r(70450.0, 70451.0), Basics_or(generated_let_declarationResult_r(70453.0, 70457.0), Basics_or(generated_let_declarationResult_e(70461.0), Basics_or(generated_let_declarationResult_e(70480.0), Basics_or(generated_let_declarationResult_r(70493.0, 70497.0), Basics_or(generated_let_declarationResult_r(70656.0, 70708.0), Basics_or(generated_let_declarationResult_r(70727.0, 70730.0), Basics_or(generated_let_declarationResult_r(70751.0, 70753.0), generated_let_declarationResult_r(70784.0, 70831.0))))))))))
                                }
                            }
                        }
                    }
                } else {
                    if generated_let_declarationResult_l(113807.0) {
                        if generated_let_declarationResult_l(73473.0) {
                            if generated_let_declarationResult_l(72191.0) {
                                if generated_let_declarationResult_l(71487.0) {
                                    Basics_or(generated_let_declarationResult_r(70852.0, 70853.0), Basics_or(generated_let_declarationResult_e(70855.0), Basics_or(generated_let_declarationResult_r(71040.0, 71086.0), Basics_or(generated_let_declarationResult_r(71128.0, 71131.0), Basics_or(generated_let_declarationResult_r(71168.0, 71215.0), Basics_or(generated_let_declarationResult_e(71236.0), Basics_or(generated_let_declarationResult_r(71296.0, 71338.0), Basics_or(generated_let_declarationResult_e(71352.0), generated_let_declarationResult_r(71424.0, 71450.0)))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(71488.0, 71494.0), Basics_or(generated_let_declarationResult_r(71680.0, 71723.0), Basics_or(generated_let_declarationResult_r(71840.0, 71903.0), Basics_or(generated_let_declarationResult_r(71935.0, 71942.0), Basics_or(generated_let_declarationResult_e(71945.0), Basics_or(generated_let_declarationResult_r(71948.0, 71955.0), Basics_or(generated_let_declarationResult_r(71957.0, 71958.0), Basics_or(generated_let_declarationResult_r(71960.0, 71983.0), Basics_or(generated_let_declarationResult_r(72096.0, 72103.0), Basics_or(generated_let_declarationResult_r(72106.0, 72144.0), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 1.0), Basics_or(generated_let_declarationResult_r(71999.0, 72001.0), generated_let_declarationResult_r(72161.0, 72163.0)))))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(72817.0) {
                                    Basics_or(generated_let_declarationResult_e(72192.0), Basics_or(generated_let_declarationResult_r(72203.0, 72242.0), Basics_or(generated_let_declarationResult_e(72250.0), Basics_or(generated_let_declarationResult_e(72272.0), Basics_or(generated_let_declarationResult_r(72284.0, 72329.0), Basics_or(generated_let_declarationResult_e(72349.0), Basics_or(generated_let_declarationResult_r(72368.0, 72440.0), Basics_or(generated_let_declarationResult_r(72704.0, 72712.0), Basics_or(generated_let_declarationResult_r(72714.0, 72750.0), generated_let_declarationResult_e(72768.0))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(72818.0, 72847.0), Basics_or(generated_let_declarationResult_r(72960.0, 72966.0), Basics_or(generated_let_declarationResult_r(72968.0, 72969.0), Basics_or(generated_let_declarationResult_r(72971.0, 73008.0), Basics_or(generated_let_declarationResult_e(73030.0), Basics_or(generated_let_declarationResult_r(73056.0, 73061.0), Basics_or(generated_let_declarationResult_r(73063.0, 73064.0), Basics_or(generated_let_declarationResult_r(73066.0, 73097.0), Basics_or(generated_let_declarationResult_e(73112.0), generated_let_declarationResult_r(73440.0, 73458.0))))))))))
                                }
                            }
                        } else {
                            if generated_let_declarationResult_l(93951.0) {
                                if generated_let_declarationResult_l(82943.0) {
                                    Basics_or(generated_let_declarationResult_e(73474.0), Basics_or(generated_let_declarationResult_r(73476.0, 73488.0), Basics_or(generated_let_declarationResult_r(73490.0, 73523.0), Basics_or(generated_let_declarationResult_e(73648.0), Basics_or(generated_let_declarationResult_r(73728.0, 74649.0), Basics_or(generated_let_declarationResult_r(74880.0, 75075.0), Basics_or(generated_let_declarationResult_r(77712.0, 77808.0), Basics_or(generated_let_declarationResult_r(77824.0, 78895.0), generated_let_declarationResult_r(78913.0, 78918.0)))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(82944.0, 83526.0), Basics_or(generated_let_declarationResult_r(92160.0, 92728.0), Basics_or(generated_let_declarationResult_r(92736.0, 92766.0), Basics_or(generated_let_declarationResult_r(92784.0, 92862.0), Basics_or(generated_let_declarationResult_r(92880.0, 92909.0), Basics_or(generated_let_declarationResult_r(92928.0, 92975.0), Basics_or(generated_let_declarationResult_r(92992.0, 92995.0), Basics_or(generated_let_declarationResult_r(93027.0, 93047.0), Basics_or(generated_let_declarationResult_r(93053.0, 93071.0), generated_let_declarationResult_r(93760.0, 93823.0))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(110588.0) {
                                    Basics_or(generated_let_declarationResult_r(93952.0, 94026.0), Basics_or(generated_let_declarationResult_e(94032.0), Basics_or(generated_let_declarationResult_r(94099.0, 94111.0), Basics_or(generated_let_declarationResult_r(94176.0, 94177.0), Basics_or(generated_let_declarationResult_e(94179.0), Basics_or(generated_let_declarationResult_r(94208.0, 100343.0), Basics_or(generated_let_declarationResult_r(100352.0, 101589.0), Basics_or(generated_let_declarationResult_r(101632.0, 101640.0), Basics_or(generated_let_declarationResult_r(110576.0, 110579.0), generated_let_declarationResult_r(110581.0, 110587.0))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(110589.0, 110590.0), Basics_or(generated_let_declarationResult_r(110592.0, 110882.0), Basics_or(generated_let_declarationResult_e(110898.0), Basics_or(generated_let_declarationResult_r(110928.0, 110930.0), Basics_or(generated_let_declarationResult_e(110933.0), Basics_or(generated_let_declarationResult_r(110948.0, 110951.0), Basics_or(generated_let_declarationResult_r(110960.0, 111355.0), Basics_or(generated_let_declarationResult_r(113664.0, 113770.0), Basics_or(generated_let_declarationResult_r(113776.0, 113788.0), generated_let_declarationResult_r(113792.0, 113800.0))))))))))
                                }
                            }
                        }
                    } else {
                        if generated_let_declarationResult_l(124111.0) {
                            if generated_let_declarationResult_l(120145.0) {
                                if generated_let_declarationResult_l(119996.0) {
                                    Basics_or(generated_let_declarationResult_r(113808.0, 113817.0), Basics_or(generated_let_declarationResult_r(119808.0, 119892.0), Basics_or(generated_let_declarationResult_r(119894.0, 119964.0), Basics_or(generated_let_declarationResult_r(119966.0, 119967.0), Basics_or(generated_let_declarationResult_e(119970.0), Basics_or(generated_let_declarationResult_r(119973.0, 119974.0), Basics_or(generated_let_declarationResult_r(119977.0, 119980.0), Basics_or(generated_let_declarationResult_r(119982.0, 119993.0), generated_let_declarationResult_e(119995.0)))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(119997.0, 120003.0), Basics_or(generated_let_declarationResult_r(120005.0, 120069.0), Basics_or(generated_let_declarationResult_r(120071.0, 120074.0), Basics_or(generated_let_declarationResult_r(120077.0, 120084.0), Basics_or(generated_let_declarationResult_r(120086.0, 120092.0), Basics_or(generated_let_declarationResult_r(120094.0, 120121.0), Basics_or(generated_let_declarationResult_r(120123.0, 120126.0), Basics_or(generated_let_declarationResult_r(120128.0, 120132.0), Basics_or(generated_let_declarationResult_e(120134.0), generated_let_declarationResult_r(120138.0, 120144.0))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(120745.0) {
                                    Basics_or(generated_let_declarationResult_r(120146.0, 120485.0), Basics_or(generated_let_declarationResult_r(120488.0, 120512.0), Basics_or(generated_let_declarationResult_r(120514.0, 120538.0), Basics_or(generated_let_declarationResult_r(120540.0, 120570.0), Basics_or(generated_let_declarationResult_r(120572.0, 120596.0), Basics_or(generated_let_declarationResult_r(120598.0, 120628.0), Basics_or(generated_let_declarationResult_r(120630.0, 120654.0), Basics_or(generated_let_declarationResult_r(120656.0, 120686.0), Basics_or(generated_let_declarationResult_r(120688.0, 120712.0), generated_let_declarationResult_r(120714.0, 120744.0))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(120746.0, 120770.0), Basics_or(generated_let_declarationResult_r(120772.0, 120779.0), Basics_or(generated_let_declarationResult_r(122624.0, 122654.0), Basics_or(generated_let_declarationResult_r(122661.0, 122666.0), Basics_or(generated_let_declarationResult_r(122928.0, 122989.0), Basics_or(generated_let_declarationResult_r(123136.0, 123180.0), Basics_or(generated_let_declarationResult_r(123191.0, 123197.0), Basics_or(generated_let_declarationResult_e(123214.0), Basics_or(generated_let_declarationResult_r(123536.0, 123565.0), generated_let_declarationResult_r(123584.0, 123627.0))))))))))
                                }
                            }
                        } else {
                            if generated_let_declarationResult_l(126563.0) {
                                if generated_let_declarationResult_l(126496.0) {
                                    Basics_or(generated_let_declarationResult_r(124112.0, 124139.0), Basics_or(generated_let_declarationResult_r(124896.0, 124902.0), Basics_or(generated_let_declarationResult_r(124904.0, 124907.0), Basics_or(generated_let_declarationResult_r(124909.0, 124910.0), Basics_or(generated_let_declarationResult_r(124912.0, 124926.0), Basics_or(generated_let_declarationResult_r(124928.0, 125124.0), Basics_or(generated_let_declarationResult_r(125184.0, 125251.0), Basics_or(generated_let_declarationResult_e(125259.0), Basics_or(generated_let_declarationResult_r(126464.0, 126467.0), generated_let_declarationResult_r(126469.0, 126495.0))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(126497.0, 126498.0), Basics_or(generated_let_declarationResult_e(126500.0), Basics_or(generated_let_declarationResult_e(126503.0), Basics_or(generated_let_declarationResult_r(126505.0, 126514.0), Basics_or(generated_let_declarationResult_r(126516.0, 126519.0), Basics_or(generated_let_declarationResult_e(126530.0), Basics_or(generated_let_declarationResult_r(126541.0, 126543.0), Basics_or(generated_let_declarationResult_r(126545.0, 126546.0), Basics_or(generated_let_declarationResult_e(126548.0), Basics_or(generated_let_declarationResult_r(126561.0, 126562.0), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 1.0), Basics_or(generated_let_declarationResult_r(126521.0, 126523.0), Basics_or(generated_let_declarationResult_r(126535.0, 126539.0), generated_let_declarationResult_r(126551.0, 126559.0))))))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(126634.0) {
                                    Basics_or(generated_let_declarationResult_e(126564.0), Basics_or(generated_let_declarationResult_r(126567.0, 126570.0), Basics_or(generated_let_declarationResult_r(126572.0, 126578.0), Basics_or(generated_let_declarationResult_r(126580.0, 126583.0), Basics_or(generated_let_declarationResult_r(126585.0, 126588.0), Basics_or(generated_let_declarationResult_e(126590.0), Basics_or(generated_let_declarationResult_r(126592.0, 126601.0), Basics_or(generated_let_declarationResult_r(126603.0, 126619.0), Basics_or(generated_let_declarationResult_r(126625.0, 126627.0), generated_let_declarationResult_r(126629.0, 126633.0))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(126635.0, 126651.0), Basics_or(generated_let_declarationResult_r(131072.0, 173791.0), Basics_or(generated_let_declarationResult_r(173824.0, 177977.0), Basics_or(generated_let_declarationResult_r(177984.0, 178205.0), Basics_or(generated_let_declarationResult_r(178208.0, 183969.0), Basics_or(generated_let_declarationResult_r(183984.0, 191456.0), Basics_or(generated_let_declarationResult_r(191472.0, 192093.0), Basics_or(generated_let_declarationResult_r(194560.0, 195101.0), Basics_or(generated_let_declarationResult_r(196608.0, 201546.0), generated_let_declarationResult_r(201552.0, 205743.0))))))))))
                                }
                            }
                        }
                    }
                }
            }
        }
}

@Sendable public static func Unicode_isAlphaNum(_ c: UnicodeScalar) ->  Bool {
    let generated_let_declarationResult_code: Double =
        Char_toCode(c)
    @Sendable func generated_let_declarationResult_e(_ hex: Double) ->  Bool {
        Basics_eq(hex, generated_let_declarationResult_code)
    }
    @Sendable func generated_let_declarationResult_l(_ hex: Double) ->  Bool {
        Basics_lt(generated_let_declarationResult_code, hex)
    }
    @Sendable func generated_let_declarationResult_r(_ from: Double, _ to: Double) ->  Bool {
        Basics_and(Basics_le(from, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, to))
    }
    return
        if generated_let_declarationResult_l(256.0) {
            Basics_or(generated_let_declarationResult_r(48.0, 57.0), Basics_or(generated_let_declarationResult_r(65.0, 90.0), Basics_or(generated_let_declarationResult_r(97.0, 122.0), Basics_or(generated_let_declarationResult_e(170.0), Basics_or(generated_let_declarationResult_r(178.0, 179.0), Basics_or(generated_let_declarationResult_e(181.0), Basics_or(generated_let_declarationResult_r(185.0, 186.0), Basics_or(generated_let_declarationResult_r(188.0, 190.0), Basics_or(generated_let_declarationResult_r(192.0, 214.0), Basics_or(generated_let_declarationResult_r(216.0, 246.0), generated_let_declarationResult_r(248.0, 255.0)))))))))))
        } else {
            if generated_let_declarationResult_l(43700.0) {
                if generated_let_declarationResult_l(4347.0) {
                    if generated_let_declarationResult_l(2868.0) {
                        if generated_let_declarationResult_l(2364.0) {
                            if generated_let_declarationResult_l(1648.0) {
                                if generated_let_declarationResult_l(930.0) {
                                    Basics_or(generated_let_declarationResult_r(256.0, 705.0), Basics_or(generated_let_declarationResult_r(710.0, 721.0), Basics_or(generated_let_declarationResult_r(736.0, 740.0), Basics_or(generated_let_declarationResult_r(880.0, 884.0), Basics_or(generated_let_declarationResult_r(886.0, 887.0), Basics_or(generated_let_declarationResult_r(890.0, 893.0), Basics_or(generated_let_declarationResult_e(895.0), Basics_or(generated_let_declarationResult_e(902.0), Basics_or(generated_let_declarationResult_r(904.0, 906.0), Basics_or(generated_let_declarationResult_e(908.0), Basics_or(generated_let_declarationResult_r(910.0, 929.0), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 0.0), generated_let_declarationResult_r(748.0, 750.0)))))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(931.0, 1013.0), Basics_or(generated_let_declarationResult_r(1015.0, 1153.0), Basics_or(generated_let_declarationResult_r(1162.0, 1327.0), Basics_or(generated_let_declarationResult_r(1329.0, 1366.0), Basics_or(generated_let_declarationResult_e(1369.0), Basics_or(generated_let_declarationResult_r(1376.0, 1416.0), Basics_or(generated_let_declarationResult_r(1488.0, 1514.0), Basics_or(generated_let_declarationResult_r(1519.0, 1522.0), Basics_or(generated_let_declarationResult_r(1568.0, 1610.0), Basics_or(generated_let_declarationResult_r(1632.0, 1641.0), generated_let_declarationResult_r(1646.0, 1647.0)))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(2041.0) {
                                    Basics_or(generated_let_declarationResult_r(1649.0, 1747.0), Basics_or(generated_let_declarationResult_e(1749.0), Basics_or(generated_let_declarationResult_r(1765.0, 1766.0), Basics_or(generated_let_declarationResult_r(1774.0, 1788.0), Basics_or(generated_let_declarationResult_e(1791.0), Basics_or(generated_let_declarationResult_e(1808.0), Basics_or(generated_let_declarationResult_r(1810.0, 1839.0), Basics_or(generated_let_declarationResult_r(1869.0, 1957.0), Basics_or(generated_let_declarationResult_e(1969.0), Basics_or(generated_let_declarationResult_r(1984.0, 2026.0), generated_let_declarationResult_r(2036.0, 2037.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_e(2042.0), Basics_or(generated_let_declarationResult_r(2048.0, 2069.0), Basics_or(generated_let_declarationResult_e(2074.0), Basics_or(generated_let_declarationResult_e(2084.0), Basics_or(generated_let_declarationResult_e(2088.0), Basics_or(generated_let_declarationResult_r(2112.0, 2136.0), Basics_or(generated_let_declarationResult_r(2144.0, 2154.0), Basics_or(generated_let_declarationResult_r(2160.0, 2183.0), Basics_or(generated_let_declarationResult_r(2185.0, 2190.0), Basics_or(generated_let_declarationResult_r(2208.0, 2249.0), generated_let_declarationResult_r(2308.0, 2361.0)))))))))))
                                }
                            }
                        } else {
                            if generated_let_declarationResult_l(2609.0) {
                                if generated_let_declarationResult_l(2492.0) {
                                    Basics_or(generated_let_declarationResult_e(2365.0), Basics_or(generated_let_declarationResult_e(2384.0), Basics_or(generated_let_declarationResult_r(2392.0, 2401.0), Basics_or(generated_let_declarationResult_r(2406.0, 2415.0), Basics_or(generated_let_declarationResult_r(2417.0, 2432.0), Basics_or(generated_let_declarationResult_r(2437.0, 2444.0), Basics_or(generated_let_declarationResult_r(2447.0, 2448.0), Basics_or(generated_let_declarationResult_r(2451.0, 2472.0), Basics_or(generated_let_declarationResult_r(2474.0, 2480.0), Basics_or(generated_let_declarationResult_e(2482.0), generated_let_declarationResult_r(2486.0, 2489.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_e(2493.0), Basics_or(generated_let_declarationResult_e(2510.0), Basics_or(generated_let_declarationResult_r(2524.0, 2525.0), Basics_or(generated_let_declarationResult_r(2527.0, 2529.0), Basics_or(generated_let_declarationResult_r(2534.0, 2545.0), Basics_or(generated_let_declarationResult_r(2548.0, 2553.0), Basics_or(generated_let_declarationResult_e(2556.0), Basics_or(generated_let_declarationResult_r(2565.0, 2570.0), Basics_or(generated_let_declarationResult_r(2575.0, 2576.0), Basics_or(generated_let_declarationResult_r(2579.0, 2600.0), generated_let_declarationResult_r(2602.0, 2608.0)))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(2737.0) {
                                    Basics_or(generated_let_declarationResult_r(2610.0, 2611.0), Basics_or(generated_let_declarationResult_r(2613.0, 2614.0), Basics_or(generated_let_declarationResult_r(2616.0, 2617.0), Basics_or(generated_let_declarationResult_r(2649.0, 2652.0), Basics_or(generated_let_declarationResult_e(2654.0), Basics_or(generated_let_declarationResult_r(2662.0, 2671.0), Basics_or(generated_let_declarationResult_r(2674.0, 2676.0), Basics_or(generated_let_declarationResult_r(2693.0, 2701.0), Basics_or(generated_let_declarationResult_r(2703.0, 2705.0), Basics_or(generated_let_declarationResult_r(2707.0, 2728.0), generated_let_declarationResult_r(2730.0, 2736.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(2738.0, 2739.0), Basics_or(generated_let_declarationResult_r(2741.0, 2745.0), Basics_or(generated_let_declarationResult_e(2749.0), Basics_or(generated_let_declarationResult_e(2768.0), Basics_or(generated_let_declarationResult_r(2784.0, 2785.0), Basics_or(generated_let_declarationResult_r(2790.0, 2799.0), Basics_or(generated_let_declarationResult_e(2809.0), Basics_or(generated_let_declarationResult_r(2821.0, 2828.0), Basics_or(generated_let_declarationResult_r(2831.0, 2832.0), Basics_or(generated_let_declarationResult_r(2835.0, 2856.0), Basics_or(generated_let_declarationResult_r(2858.0, 2864.0), generated_let_declarationResult_r(2866.0, 2867.0))))))))))))
                                }
                            }
                        }
                    } else {
                        if generated_let_declarationResult_l(3411.0) {
                            if generated_let_declarationResult_l(3132.0) {
                                if generated_let_declarationResult_l(2971.0) {
                                    Basics_or(generated_let_declarationResult_r(2869.0, 2873.0), Basics_or(generated_let_declarationResult_e(2877.0), Basics_or(generated_let_declarationResult_r(2908.0, 2909.0), Basics_or(generated_let_declarationResult_r(2911.0, 2913.0), Basics_or(generated_let_declarationResult_r(2918.0, 2927.0), Basics_or(generated_let_declarationResult_r(2929.0, 2935.0), Basics_or(generated_let_declarationResult_e(2947.0), Basics_or(generated_let_declarationResult_r(2949.0, 2954.0), Basics_or(generated_let_declarationResult_r(2958.0, 2960.0), Basics_or(generated_let_declarationResult_r(2962.0, 2965.0), generated_let_declarationResult_r(2969.0, 2970.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_e(2972.0), Basics_or(generated_let_declarationResult_r(2974.0, 2975.0), Basics_or(generated_let_declarationResult_r(2979.0, 2980.0), Basics_or(generated_let_declarationResult_r(2984.0, 2986.0), Basics_or(generated_let_declarationResult_r(2990.0, 3001.0), Basics_or(generated_let_declarationResult_e(3024.0), Basics_or(generated_let_declarationResult_r(3046.0, 3058.0), Basics_or(generated_let_declarationResult_r(3077.0, 3084.0), Basics_or(generated_let_declarationResult_r(3086.0, 3088.0), Basics_or(generated_let_declarationResult_r(3090.0, 3112.0), generated_let_declarationResult_r(3114.0, 3129.0)))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(3252.0) {
                                    Basics_or(generated_let_declarationResult_e(3133.0), Basics_or(generated_let_declarationResult_r(3160.0, 3162.0), Basics_or(generated_let_declarationResult_e(3165.0), Basics_or(generated_let_declarationResult_r(3168.0, 3169.0), Basics_or(generated_let_declarationResult_r(3174.0, 3183.0), Basics_or(generated_let_declarationResult_r(3192.0, 3198.0), Basics_or(generated_let_declarationResult_e(3200.0), Basics_or(generated_let_declarationResult_r(3205.0, 3212.0), Basics_or(generated_let_declarationResult_r(3214.0, 3216.0), Basics_or(generated_let_declarationResult_r(3218.0, 3240.0), generated_let_declarationResult_r(3242.0, 3251.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(3253.0, 3257.0), Basics_or(generated_let_declarationResult_e(3261.0), Basics_or(generated_let_declarationResult_r(3293.0, 3294.0), Basics_or(generated_let_declarationResult_r(3296.0, 3297.0), Basics_or(generated_let_declarationResult_r(3302.0, 3311.0), Basics_or(generated_let_declarationResult_r(3313.0, 3314.0), Basics_or(generated_let_declarationResult_r(3332.0, 3340.0), Basics_or(generated_let_declarationResult_r(3342.0, 3344.0), Basics_or(generated_let_declarationResult_r(3346.0, 3386.0), Basics_or(generated_let_declarationResult_e(3389.0), generated_let_declarationResult_e(3406.0)))))))))))
                                }
                            }
                        } else {
                            if generated_let_declarationResult_l(3775.0) {
                                if generated_let_declarationResult_l(3633.0) {
                                    Basics_or(generated_let_declarationResult_r(3412.0, 3414.0), Basics_or(generated_let_declarationResult_r(3416.0, 3425.0), Basics_or(generated_let_declarationResult_r(3430.0, 3448.0), Basics_or(generated_let_declarationResult_r(3450.0, 3455.0), Basics_or(generated_let_declarationResult_r(3461.0, 3478.0), Basics_or(generated_let_declarationResult_r(3482.0, 3505.0), Basics_or(generated_let_declarationResult_r(3507.0, 3515.0), Basics_or(generated_let_declarationResult_e(3517.0), Basics_or(generated_let_declarationResult_r(3520.0, 3526.0), Basics_or(generated_let_declarationResult_r(3558.0, 3567.0), generated_let_declarationResult_r(3585.0, 3632.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(3634.0, 3635.0), Basics_or(generated_let_declarationResult_r(3648.0, 3654.0), Basics_or(generated_let_declarationResult_r(3664.0, 3673.0), Basics_or(generated_let_declarationResult_r(3713.0, 3714.0), Basics_or(generated_let_declarationResult_e(3716.0), Basics_or(generated_let_declarationResult_r(3718.0, 3722.0), Basics_or(generated_let_declarationResult_r(3724.0, 3747.0), Basics_or(generated_let_declarationResult_e(3749.0), Basics_or(generated_let_declarationResult_r(3751.0, 3760.0), Basics_or(generated_let_declarationResult_r(3762.0, 3763.0), generated_let_declarationResult_e(3773.0)))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(4175.0) {
                                    Basics_or(generated_let_declarationResult_r(3776.0, 3780.0), Basics_or(generated_let_declarationResult_e(3782.0), Basics_or(generated_let_declarationResult_r(3792.0, 3801.0), Basics_or(generated_let_declarationResult_r(3804.0, 3807.0), Basics_or(generated_let_declarationResult_e(3840.0), Basics_or(generated_let_declarationResult_r(3872.0, 3891.0), Basics_or(generated_let_declarationResult_r(3904.0, 3911.0), Basics_or(generated_let_declarationResult_r(3913.0, 3948.0), Basics_or(generated_let_declarationResult_r(3976.0, 3980.0), Basics_or(generated_let_declarationResult_r(4096.0, 4138.0), generated_let_declarationResult_r(4159.0, 4169.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(4176.0, 4181.0), Basics_or(generated_let_declarationResult_r(4186.0, 4189.0), Basics_or(generated_let_declarationResult_e(4193.0), Basics_or(generated_let_declarationResult_r(4197.0, 4198.0), Basics_or(generated_let_declarationResult_r(4206.0, 4208.0), Basics_or(generated_let_declarationResult_r(4213.0, 4225.0), Basics_or(generated_let_declarationResult_e(4238.0), Basics_or(generated_let_declarationResult_r(4240.0, 4249.0), Basics_or(generated_let_declarationResult_r(4256.0, 4293.0), Basics_or(generated_let_declarationResult_e(4295.0), Basics_or(generated_let_declarationResult_e(4301.0), generated_let_declarationResult_r(4304.0, 4346.0))))))))))))
                                }
                            }
                        }
                    }
                } else {
                    if generated_let_declarationResult_l(8454.0) {
                        if generated_let_declarationResult_l(6527.0) {
                            if generated_let_declarationResult_l(5760.0) {
                                if generated_let_declarationResult_l(4801.0) {
                                    Basics_or(generated_let_declarationResult_r(4348.0, 4680.0), Basics_or(generated_let_declarationResult_r(4682.0, 4685.0), Basics_or(generated_let_declarationResult_r(4688.0, 4694.0), Basics_or(generated_let_declarationResult_e(4696.0), Basics_or(generated_let_declarationResult_r(4698.0, 4701.0), Basics_or(generated_let_declarationResult_r(4704.0, 4744.0), Basics_or(generated_let_declarationResult_r(4746.0, 4749.0), Basics_or(generated_let_declarationResult_r(4752.0, 4784.0), Basics_or(generated_let_declarationResult_r(4786.0, 4789.0), Basics_or(generated_let_declarationResult_r(4792.0, 4798.0), generated_let_declarationResult_e(4800.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(4802.0, 4805.0), Basics_or(generated_let_declarationResult_r(4808.0, 4822.0), Basics_or(generated_let_declarationResult_r(4824.0, 4880.0), Basics_or(generated_let_declarationResult_r(4882.0, 4885.0), Basics_or(generated_let_declarationResult_r(4888.0, 4954.0), Basics_or(generated_let_declarationResult_r(4969.0, 4988.0), Basics_or(generated_let_declarationResult_r(4992.0, 5007.0), Basics_or(generated_let_declarationResult_r(5024.0, 5109.0), Basics_or(generated_let_declarationResult_r(5112.0, 5117.0), Basics_or(generated_let_declarationResult_r(5121.0, 5740.0), generated_let_declarationResult_r(5743.0, 5759.0)))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(6111.0) {
                                    Basics_or(generated_let_declarationResult_r(5761.0, 5786.0), Basics_or(generated_let_declarationResult_r(5792.0, 5866.0), Basics_or(generated_let_declarationResult_r(5870.0, 5880.0), Basics_or(generated_let_declarationResult_r(5888.0, 5905.0), Basics_or(generated_let_declarationResult_r(5919.0, 5937.0), Basics_or(generated_let_declarationResult_r(5952.0, 5969.0), Basics_or(generated_let_declarationResult_r(5984.0, 5996.0), Basics_or(generated_let_declarationResult_r(5998.0, 6000.0), Basics_or(generated_let_declarationResult_r(6016.0, 6067.0), Basics_or(generated_let_declarationResult_e(6103.0), generated_let_declarationResult_e(6108.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(6112.0, 6121.0), Basics_or(generated_let_declarationResult_r(6128.0, 6137.0), Basics_or(generated_let_declarationResult_r(6160.0, 6169.0), Basics_or(generated_let_declarationResult_r(6176.0, 6264.0), Basics_or(generated_let_declarationResult_r(6272.0, 6276.0), Basics_or(generated_let_declarationResult_r(6279.0, 6312.0), Basics_or(generated_let_declarationResult_e(6314.0), Basics_or(generated_let_declarationResult_r(6320.0, 6389.0), Basics_or(generated_let_declarationResult_r(6400.0, 6430.0), Basics_or(generated_let_declarationResult_r(6470.0, 6509.0), generated_let_declarationResult_r(6512.0, 6516.0)))))))))))
                                }
                            }
                        } else {
                            if generated_let_declarationResult_l(7417.0) {
                                if generated_let_declarationResult_l(7042.0) {
                                    Basics_or(generated_let_declarationResult_r(6528.0, 6571.0), Basics_or(generated_let_declarationResult_r(6576.0, 6601.0), Basics_or(generated_let_declarationResult_r(6608.0, 6618.0), Basics_or(generated_let_declarationResult_r(6656.0, 6678.0), Basics_or(generated_let_declarationResult_r(6688.0, 6740.0), Basics_or(generated_let_declarationResult_r(6784.0, 6793.0), Basics_or(generated_let_declarationResult_r(6800.0, 6809.0), Basics_or(generated_let_declarationResult_e(6823.0), Basics_or(generated_let_declarationResult_r(6917.0, 6963.0), Basics_or(generated_let_declarationResult_r(6981.0, 6988.0), generated_let_declarationResult_r(6992.0, 7001.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(7043.0, 7072.0), Basics_or(generated_let_declarationResult_r(7086.0, 7141.0), Basics_or(generated_let_declarationResult_r(7168.0, 7203.0), Basics_or(generated_let_declarationResult_r(7232.0, 7241.0), Basics_or(generated_let_declarationResult_r(7245.0, 7293.0), Basics_or(generated_let_declarationResult_r(7296.0, 7304.0), Basics_or(generated_let_declarationResult_r(7312.0, 7354.0), Basics_or(generated_let_declarationResult_r(7357.0, 7359.0), Basics_or(generated_let_declarationResult_r(7401.0, 7404.0), Basics_or(generated_let_declarationResult_r(7406.0, 7411.0), generated_let_declarationResult_r(7413.0, 7414.0)))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(8129.0) {
                                    Basics_or(generated_let_declarationResult_e(7418.0), Basics_or(generated_let_declarationResult_r(7424.0, 7615.0), Basics_or(generated_let_declarationResult_r(7680.0, 7957.0), Basics_or(generated_let_declarationResult_r(7960.0, 7965.0), Basics_or(generated_let_declarationResult_r(7968.0, 8005.0), Basics_or(generated_let_declarationResult_r(8008.0, 8013.0), Basics_or(generated_let_declarationResult_r(8016.0, 8023.0), Basics_or(generated_let_declarationResult_r(8032.0, 8061.0), Basics_or(generated_let_declarationResult_r(8064.0, 8116.0), Basics_or(generated_let_declarationResult_r(8118.0, 8124.0), Basics_or(generated_let_declarationResult_e(8126.0), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 1.0), generated_let_declarationResult_r(8025.0, 8031.0)))))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(8130.0, 8132.0), Basics_or(generated_let_declarationResult_r(8134.0, 8140.0), Basics_or(generated_let_declarationResult_r(8144.0, 8147.0), Basics_or(generated_let_declarationResult_r(8150.0, 8155.0), Basics_or(generated_let_declarationResult_r(8160.0, 8172.0), Basics_or(generated_let_declarationResult_r(8178.0, 8180.0), Basics_or(generated_let_declarationResult_r(8182.0, 8188.0), Basics_or(generated_let_declarationResult_r(8304.0, 8305.0), Basics_or(generated_let_declarationResult_r(8308.0, 8313.0), Basics_or(generated_let_declarationResult_r(8319.0, 8329.0), Basics_or(generated_let_declarationResult_r(8336.0, 8348.0), generated_let_declarationResult_e(8450.0))))))))))))
                                }
                            }
                        }
                    } else {
                        if generated_let_declarationResult_l(12783.0) {
                            if generated_let_declarationResult_l(11647.0) {
                                if generated_let_declarationResult_l(9449.0) {
                                    Basics_or(generated_let_declarationResult_e(8455.0), Basics_or(generated_let_declarationResult_r(8458.0, 8467.0), Basics_or(generated_let_declarationResult_e(8469.0), Basics_or(generated_let_declarationResult_r(8473.0, 8477.0), Basics_or(generated_let_declarationResult_r(8490.0, 8493.0), Basics_or(generated_let_declarationResult_r(8495.0, 8505.0), Basics_or(generated_let_declarationResult_r(8508.0, 8511.0), Basics_or(generated_let_declarationResult_r(8517.0, 8521.0), Basics_or(generated_let_declarationResult_e(8526.0), Basics_or(generated_let_declarationResult_r(8528.0, 8585.0), Basics_or(generated_let_declarationResult_r(9312.0, 9371.0), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 0.0), generated_let_declarationResult_r(8484.0, 8488.0)))))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(9450.0, 9471.0), Basics_or(generated_let_declarationResult_r(10102.0, 10131.0), Basics_or(generated_let_declarationResult_r(11264.0, 11492.0), Basics_or(generated_let_declarationResult_r(11499.0, 11502.0), Basics_or(generated_let_declarationResult_r(11506.0, 11507.0), Basics_or(generated_let_declarationResult_e(11517.0), Basics_or(generated_let_declarationResult_r(11520.0, 11557.0), Basics_or(generated_let_declarationResult_e(11559.0), Basics_or(generated_let_declarationResult_e(11565.0), Basics_or(generated_let_declarationResult_r(11568.0, 11623.0), generated_let_declarationResult_e(11631.0)))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(12320.0) {
                                    Basics_or(generated_let_declarationResult_r(11648.0, 11670.0), Basics_or(generated_let_declarationResult_r(11680.0, 11686.0), Basics_or(generated_let_declarationResult_r(11688.0, 11694.0), Basics_or(generated_let_declarationResult_r(11696.0, 11702.0), Basics_or(generated_let_declarationResult_r(11704.0, 11710.0), Basics_or(generated_let_declarationResult_r(11712.0, 11718.0), Basics_or(generated_let_declarationResult_r(11720.0, 11726.0), Basics_or(generated_let_declarationResult_r(11728.0, 11734.0), Basics_or(generated_let_declarationResult_r(11736.0, 11742.0), Basics_or(generated_let_declarationResult_e(11823.0), generated_let_declarationResult_r(12293.0, 12295.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(12321.0, 12329.0), Basics_or(generated_let_declarationResult_r(12337.0, 12341.0), Basics_or(generated_let_declarationResult_r(12344.0, 12348.0), Basics_or(generated_let_declarationResult_r(12353.0, 12438.0), Basics_or(generated_let_declarationResult_r(12445.0, 12447.0), Basics_or(generated_let_declarationResult_r(12449.0, 12538.0), Basics_or(generated_let_declarationResult_r(12540.0, 12543.0), Basics_or(generated_let_declarationResult_r(12549.0, 12591.0), Basics_or(generated_let_declarationResult_r(12593.0, 12686.0), Basics_or(generated_let_declarationResult_r(12690.0, 12693.0), generated_let_declarationResult_r(12704.0, 12735.0)))))))))))
                                }
                            }
                        } else {
                            if generated_let_declarationResult_l(43019.0) {
                                if generated_let_declarationResult_l(42559.0) {
                                    Basics_or(generated_let_declarationResult_r(12784.0, 12799.0), Basics_or(generated_let_declarationResult_r(12832.0, 12841.0), Basics_or(generated_let_declarationResult_r(12872.0, 12879.0), Basics_or(generated_let_declarationResult_r(12881.0, 12895.0), Basics_or(generated_let_declarationResult_r(12928.0, 12937.0), Basics_or(generated_let_declarationResult_r(12977.0, 12991.0), Basics_or(generated_let_declarationResult_r(13312.0, 19903.0), Basics_or(generated_let_declarationResult_r(19968.0, 42124.0), Basics_or(generated_let_declarationResult_r(42192.0, 42237.0), Basics_or(generated_let_declarationResult_r(42240.0, 42508.0), generated_let_declarationResult_r(42512.0, 42539.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(42560.0, 42606.0), Basics_or(generated_let_declarationResult_r(42623.0, 42653.0), Basics_or(generated_let_declarationResult_r(42656.0, 42735.0), Basics_or(generated_let_declarationResult_r(42775.0, 42783.0), Basics_or(generated_let_declarationResult_r(42786.0, 42888.0), Basics_or(generated_let_declarationResult_r(42891.0, 42954.0), Basics_or(generated_let_declarationResult_r(42960.0, 42961.0), Basics_or(generated_let_declarationResult_r(42966.0, 42969.0), Basics_or(generated_let_declarationResult_r(42994.0, 43009.0), Basics_or(generated_let_declarationResult_r(43011.0, 43013.0), Basics_or(generated_let_declarationResult_r(43015.0, 43018.0), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 1.0), generated_let_declarationResult_r(42963.0, 42965.0)))))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(43395.0) {
                                    Basics_or(generated_let_declarationResult_r(43020.0, 43042.0), Basics_or(generated_let_declarationResult_r(43056.0, 43061.0), Basics_or(generated_let_declarationResult_r(43072.0, 43123.0), Basics_or(generated_let_declarationResult_r(43138.0, 43187.0), Basics_or(generated_let_declarationResult_r(43216.0, 43225.0), Basics_or(generated_let_declarationResult_r(43250.0, 43255.0), Basics_or(generated_let_declarationResult_e(43259.0), Basics_or(generated_let_declarationResult_r(43261.0, 43262.0), Basics_or(generated_let_declarationResult_r(43264.0, 43301.0), Basics_or(generated_let_declarationResult_r(43312.0, 43334.0), generated_let_declarationResult_r(43360.0, 43388.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(43396.0, 43442.0), Basics_or(generated_let_declarationResult_r(43471.0, 43481.0), Basics_or(generated_let_declarationResult_r(43488.0, 43492.0), Basics_or(generated_let_declarationResult_r(43494.0, 43518.0), Basics_or(generated_let_declarationResult_r(43520.0, 43560.0), Basics_or(generated_let_declarationResult_r(43584.0, 43586.0), Basics_or(generated_let_declarationResult_r(43588.0, 43595.0), Basics_or(generated_let_declarationResult_r(43600.0, 43609.0), Basics_or(generated_let_declarationResult_r(43616.0, 43638.0), Basics_or(generated_let_declarationResult_e(43642.0), Basics_or(generated_let_declarationResult_r(43646.0, 43695.0), generated_let_declarationResult_e(43697.0))))))))))))
                                }
                            }
                        }
                    }
                }
            } else {
                if generated_let_declarationResult_l(71351.0) {
                    if generated_let_declarationResult_l(67671.0) {
                        if generated_let_declarationResult_l(65548.0) {
                            if generated_let_declarationResult_l(64286.0) {
                                if generated_let_declarationResult_l(43867.0) {
                                    Basics_or(generated_let_declarationResult_r(43701.0, 43702.0), Basics_or(generated_let_declarationResult_r(43705.0, 43709.0), Basics_or(generated_let_declarationResult_r(43739.0, 43741.0), Basics_or(generated_let_declarationResult_r(43744.0, 43754.0), Basics_or(generated_let_declarationResult_r(43762.0, 43764.0), Basics_or(generated_let_declarationResult_r(43777.0, 43782.0), Basics_or(generated_let_declarationResult_r(43785.0, 43790.0), Basics_or(generated_let_declarationResult_r(43793.0, 43798.0), Basics_or(generated_let_declarationResult_r(43808.0, 43814.0), Basics_or(generated_let_declarationResult_r(43816.0, 43822.0), Basics_or(generated_let_declarationResult_r(43824.0, 43866.0), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 0.0), generated_let_declarationResult_r(43712.0, 43714.0)))))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(43868.0, 43881.0), Basics_or(generated_let_declarationResult_r(43888.0, 44002.0), Basics_or(generated_let_declarationResult_r(44016.0, 44025.0), Basics_or(generated_let_declarationResult_r(44032.0, 55203.0), Basics_or(generated_let_declarationResult_r(55216.0, 55238.0), Basics_or(generated_let_declarationResult_r(55243.0, 55291.0), Basics_or(generated_let_declarationResult_r(63744.0, 64109.0), Basics_or(generated_let_declarationResult_r(64112.0, 64217.0), Basics_or(generated_let_declarationResult_r(64256.0, 64262.0), Basics_or(generated_let_declarationResult_r(64275.0, 64279.0), generated_let_declarationResult_e(64285.0)))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(65135.0) {
                                    Basics_or(generated_let_declarationResult_r(64287.0, 64296.0), Basics_or(generated_let_declarationResult_r(64298.0, 64310.0), Basics_or(generated_let_declarationResult_r(64312.0, 64316.0), Basics_or(generated_let_declarationResult_e(64318.0), Basics_or(generated_let_declarationResult_r(64320.0, 64321.0), Basics_or(generated_let_declarationResult_r(64323.0, 64324.0), Basics_or(generated_let_declarationResult_r(64326.0, 64433.0), Basics_or(generated_let_declarationResult_r(64467.0, 64829.0), Basics_or(generated_let_declarationResult_r(64848.0, 64911.0), Basics_or(generated_let_declarationResult_r(64914.0, 64967.0), generated_let_declarationResult_r(65008.0, 65019.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(65136.0, 65140.0), Basics_or(generated_let_declarationResult_r(65142.0, 65276.0), Basics_or(generated_let_declarationResult_r(65296.0, 65305.0), Basics_or(generated_let_declarationResult_r(65313.0, 65338.0), Basics_or(generated_let_declarationResult_r(65345.0, 65370.0), Basics_or(generated_let_declarationResult_r(65382.0, 65470.0), Basics_or(generated_let_declarationResult_r(65474.0, 65479.0), Basics_or(generated_let_declarationResult_r(65482.0, 65487.0), Basics_or(generated_let_declarationResult_r(65490.0, 65495.0), Basics_or(generated_let_declarationResult_r(65498.0, 65500.0), generated_let_declarationResult_r(65536.0, 65547.0)))))))))))
                                }
                            }
                        } else {
                            if generated_let_declarationResult_l(66775.0) {
                                if generated_let_declarationResult_l(66272.0) {
                                    Basics_or(generated_let_declarationResult_r(65549.0, 65574.0), Basics_or(generated_let_declarationResult_r(65576.0, 65594.0), Basics_or(generated_let_declarationResult_r(65596.0, 65597.0), Basics_or(generated_let_declarationResult_r(65599.0, 65613.0), Basics_or(generated_let_declarationResult_r(65616.0, 65629.0), Basics_or(generated_let_declarationResult_r(65664.0, 65786.0), Basics_or(generated_let_declarationResult_r(65799.0, 65843.0), Basics_or(generated_let_declarationResult_r(65856.0, 65912.0), Basics_or(generated_let_declarationResult_r(65930.0, 65931.0), Basics_or(generated_let_declarationResult_r(66176.0, 66204.0), generated_let_declarationResult_r(66208.0, 66256.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(66273.0, 66299.0), Basics_or(generated_let_declarationResult_r(66304.0, 66339.0), Basics_or(generated_let_declarationResult_r(66349.0, 66378.0), Basics_or(generated_let_declarationResult_r(66384.0, 66421.0), Basics_or(generated_let_declarationResult_r(66432.0, 66461.0), Basics_or(generated_let_declarationResult_r(66464.0, 66499.0), Basics_or(generated_let_declarationResult_r(66504.0, 66511.0), Basics_or(generated_let_declarationResult_r(66513.0, 66517.0), Basics_or(generated_let_declarationResult_r(66560.0, 66717.0), Basics_or(generated_let_declarationResult_r(66720.0, 66729.0), generated_let_declarationResult_r(66736.0, 66771.0)))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(67071.0) {
                                    Basics_or(generated_let_declarationResult_r(66776.0, 66811.0), Basics_or(generated_let_declarationResult_r(66816.0, 66855.0), Basics_or(generated_let_declarationResult_r(66864.0, 66915.0), Basics_or(generated_let_declarationResult_r(66928.0, 66938.0), Basics_or(generated_let_declarationResult_r(66940.0, 66954.0), Basics_or(generated_let_declarationResult_r(66956.0, 66962.0), Basics_or(generated_let_declarationResult_r(66964.0, 66965.0), Basics_or(generated_let_declarationResult_r(66967.0, 66977.0), Basics_or(generated_let_declarationResult_r(66979.0, 66993.0), Basics_or(generated_let_declarationResult_r(66995.0, 67001.0), generated_let_declarationResult_r(67003.0, 67004.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(67072.0, 67382.0), Basics_or(generated_let_declarationResult_r(67392.0, 67413.0), Basics_or(generated_let_declarationResult_r(67424.0, 67431.0), Basics_or(generated_let_declarationResult_r(67456.0, 67461.0), Basics_or(generated_let_declarationResult_r(67463.0, 67504.0), Basics_or(generated_let_declarationResult_r(67506.0, 67514.0), Basics_or(generated_let_declarationResult_r(67584.0, 67589.0), Basics_or(generated_let_declarationResult_e(67592.0), Basics_or(generated_let_declarationResult_r(67594.0, 67637.0), Basics_or(generated_let_declarationResult_r(67639.0, 67640.0), Basics_or(generated_let_declarationResult_e(67644.0), generated_let_declarationResult_r(67647.0, 67669.0))))))))))))
                                }
                            }
                        }
                    } else {
                        if generated_let_declarationResult_l(69871.0) {
                            if generated_let_declarationResult_l(68471.0) {
                                if generated_let_declarationResult_l(68116.0) {
                                    Basics_or(generated_let_declarationResult_r(67672.0, 67702.0), Basics_or(generated_let_declarationResult_r(67705.0, 67742.0), Basics_or(generated_let_declarationResult_r(67751.0, 67759.0), Basics_or(generated_let_declarationResult_r(67808.0, 67826.0), Basics_or(generated_let_declarationResult_r(67828.0, 67829.0), Basics_or(generated_let_declarationResult_r(67835.0, 67867.0), Basics_or(generated_let_declarationResult_r(67872.0, 67897.0), Basics_or(generated_let_declarationResult_r(67968.0, 68023.0), Basics_or(generated_let_declarationResult_r(68028.0, 68047.0), Basics_or(generated_let_declarationResult_r(68050.0, 68096.0), generated_let_declarationResult_r(68112.0, 68115.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(68117.0, 68119.0), Basics_or(generated_let_declarationResult_r(68121.0, 68149.0), Basics_or(generated_let_declarationResult_r(68160.0, 68168.0), Basics_or(generated_let_declarationResult_r(68192.0, 68222.0), Basics_or(generated_let_declarationResult_r(68224.0, 68255.0), Basics_or(generated_let_declarationResult_r(68288.0, 68295.0), Basics_or(generated_let_declarationResult_r(68297.0, 68324.0), Basics_or(generated_let_declarationResult_r(68331.0, 68335.0), Basics_or(generated_let_declarationResult_r(68352.0, 68405.0), Basics_or(generated_let_declarationResult_r(68416.0, 68437.0), generated_let_declarationResult_r(68440.0, 68466.0)))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(69423.0) {
                                    Basics_or(generated_let_declarationResult_r(68472.0, 68497.0), Basics_or(generated_let_declarationResult_r(68521.0, 68527.0), Basics_or(generated_let_declarationResult_r(68608.0, 68680.0), Basics_or(generated_let_declarationResult_r(68736.0, 68786.0), Basics_or(generated_let_declarationResult_r(68800.0, 68850.0), Basics_or(generated_let_declarationResult_r(68858.0, 68899.0), Basics_or(generated_let_declarationResult_r(68912.0, 68921.0), Basics_or(generated_let_declarationResult_r(69216.0, 69246.0), Basics_or(generated_let_declarationResult_r(69248.0, 69289.0), Basics_or(generated_let_declarationResult_r(69296.0, 69297.0), generated_let_declarationResult_r(69376.0, 69415.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(69424.0, 69445.0), Basics_or(generated_let_declarationResult_r(69457.0, 69460.0), Basics_or(generated_let_declarationResult_r(69488.0, 69505.0), Basics_or(generated_let_declarationResult_r(69552.0, 69579.0), Basics_or(generated_let_declarationResult_r(69600.0, 69622.0), Basics_or(generated_let_declarationResult_r(69635.0, 69687.0), Basics_or(generated_let_declarationResult_r(69714.0, 69743.0), Basics_or(generated_let_declarationResult_r(69745.0, 69746.0), Basics_or(generated_let_declarationResult_e(69749.0), Basics_or(generated_let_declarationResult_r(69763.0, 69807.0), generated_let_declarationResult_r(69840.0, 69864.0)))))))))))
                                }
                            }
                        } else {
                            if generated_let_declarationResult_l(70404.0) {
                                if generated_let_declarationResult_l(70112.0) {
                                    Basics_or(generated_let_declarationResult_r(69872.0, 69881.0), Basics_or(generated_let_declarationResult_r(69891.0, 69926.0), Basics_or(generated_let_declarationResult_r(69942.0, 69951.0), Basics_or(generated_let_declarationResult_e(69956.0), Basics_or(generated_let_declarationResult_e(69959.0), Basics_or(generated_let_declarationResult_r(69968.0, 70002.0), Basics_or(generated_let_declarationResult_e(70006.0), Basics_or(generated_let_declarationResult_r(70019.0, 70066.0), Basics_or(generated_let_declarationResult_r(70081.0, 70084.0), Basics_or(generated_let_declarationResult_r(70096.0, 70106.0), generated_let_declarationResult_e(70108.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(70113.0, 70132.0), Basics_or(generated_let_declarationResult_r(70144.0, 70161.0), Basics_or(generated_let_declarationResult_r(70163.0, 70187.0), Basics_or(generated_let_declarationResult_r(70207.0, 70208.0), Basics_or(generated_let_declarationResult_r(70272.0, 70278.0), Basics_or(generated_let_declarationResult_e(70280.0), Basics_or(generated_let_declarationResult_r(70282.0, 70285.0), Basics_or(generated_let_declarationResult_r(70287.0, 70301.0), Basics_or(generated_let_declarationResult_r(70303.0, 70312.0), Basics_or(generated_let_declarationResult_r(70320.0, 70366.0), generated_let_declarationResult_r(70384.0, 70393.0)))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(70735.0) {
                                    Basics_or(generated_let_declarationResult_r(70405.0, 70412.0), Basics_or(generated_let_declarationResult_r(70415.0, 70416.0), Basics_or(generated_let_declarationResult_r(70419.0, 70440.0), Basics_or(generated_let_declarationResult_r(70442.0, 70448.0), Basics_or(generated_let_declarationResult_r(70450.0, 70451.0), Basics_or(generated_let_declarationResult_r(70453.0, 70457.0), Basics_or(generated_let_declarationResult_e(70461.0), Basics_or(generated_let_declarationResult_e(70480.0), Basics_or(generated_let_declarationResult_r(70493.0, 70497.0), Basics_or(generated_let_declarationResult_r(70656.0, 70708.0), generated_let_declarationResult_r(70727.0, 70730.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(70736.0, 70745.0), Basics_or(generated_let_declarationResult_r(70751.0, 70753.0), Basics_or(generated_let_declarationResult_r(70784.0, 70831.0), Basics_or(generated_let_declarationResult_r(70852.0, 70853.0), Basics_or(generated_let_declarationResult_e(70855.0), Basics_or(generated_let_declarationResult_r(70864.0, 70873.0), Basics_or(generated_let_declarationResult_r(71040.0, 71086.0), Basics_or(generated_let_declarationResult_r(71128.0, 71131.0), Basics_or(generated_let_declarationResult_r(71168.0, 71215.0), Basics_or(generated_let_declarationResult_e(71236.0), Basics_or(generated_let_declarationResult_r(71248.0, 71257.0), generated_let_declarationResult_r(71296.0, 71338.0))))))))))))
                                }
                            }
                        }
                    }
                } else {
                    if generated_let_declarationResult_l(119893.0) {
                        if generated_let_declarationResult_l(73727.0) {
                            if generated_let_declarationResult_l(72703.0) {
                                if generated_let_declarationResult_l(71959.0) {
                                    Basics_or(generated_let_declarationResult_e(71352.0), Basics_or(generated_let_declarationResult_r(71360.0, 71369.0), Basics_or(generated_let_declarationResult_r(71424.0, 71450.0), Basics_or(generated_let_declarationResult_r(71472.0, 71483.0), Basics_or(generated_let_declarationResult_r(71488.0, 71494.0), Basics_or(generated_let_declarationResult_r(71680.0, 71723.0), Basics_or(generated_let_declarationResult_r(71840.0, 71922.0), Basics_or(generated_let_declarationResult_r(71935.0, 71942.0), Basics_or(generated_let_declarationResult_e(71945.0), Basics_or(generated_let_declarationResult_r(71948.0, 71955.0), generated_let_declarationResult_r(71957.0, 71958.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(71960.0, 71983.0), Basics_or(generated_let_declarationResult_r(72016.0, 72025.0), Basics_or(generated_let_declarationResult_r(72096.0, 72103.0), Basics_or(generated_let_declarationResult_r(72106.0, 72144.0), Basics_or(generated_let_declarationResult_e(72192.0), Basics_or(generated_let_declarationResult_r(72203.0, 72242.0), Basics_or(generated_let_declarationResult_e(72250.0), Basics_or(generated_let_declarationResult_e(72272.0), Basics_or(generated_let_declarationResult_r(72284.0, 72329.0), Basics_or(generated_let_declarationResult_e(72349.0), Basics_or(generated_let_declarationResult_r(72368.0, 72440.0), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 1.0), Basics_or(generated_let_declarationResult_r(71999.0, 72001.0), generated_let_declarationResult_r(72161.0, 72163.0))))))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(73062.0) {
                                    Basics_or(generated_let_declarationResult_r(72704.0, 72712.0), Basics_or(generated_let_declarationResult_r(72714.0, 72750.0), Basics_or(generated_let_declarationResult_e(72768.0), Basics_or(generated_let_declarationResult_r(72784.0, 72812.0), Basics_or(generated_let_declarationResult_r(72818.0, 72847.0), Basics_or(generated_let_declarationResult_r(72960.0, 72966.0), Basics_or(generated_let_declarationResult_r(72968.0, 72969.0), Basics_or(generated_let_declarationResult_r(72971.0, 73008.0), Basics_or(generated_let_declarationResult_e(73030.0), Basics_or(generated_let_declarationResult_r(73040.0, 73049.0), generated_let_declarationResult_r(73056.0, 73061.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(73063.0, 73064.0), Basics_or(generated_let_declarationResult_r(73066.0, 73097.0), Basics_or(generated_let_declarationResult_e(73112.0), Basics_or(generated_let_declarationResult_r(73120.0, 73129.0), Basics_or(generated_let_declarationResult_r(73440.0, 73458.0), Basics_or(generated_let_declarationResult_e(73474.0), Basics_or(generated_let_declarationResult_r(73476.0, 73488.0), Basics_or(generated_let_declarationResult_r(73490.0, 73523.0), Basics_or(generated_let_declarationResult_r(73552.0, 73561.0), Basics_or(generated_let_declarationResult_e(73648.0), generated_let_declarationResult_r(73664.0, 73684.0)))))))))))
                                }
                            }
                        } else {
                            if generated_let_declarationResult_l(94098.0) {
                                if generated_let_declarationResult_l(92863.0) {
                                    Basics_or(generated_let_declarationResult_r(73728.0, 74649.0), Basics_or(generated_let_declarationResult_r(74752.0, 74862.0), Basics_or(generated_let_declarationResult_r(74880.0, 75075.0), Basics_or(generated_let_declarationResult_r(77712.0, 77808.0), Basics_or(generated_let_declarationResult_r(77824.0, 78895.0), Basics_or(generated_let_declarationResult_r(78913.0, 78918.0), Basics_or(generated_let_declarationResult_r(82944.0, 83526.0), Basics_or(generated_let_declarationResult_r(92160.0, 92728.0), Basics_or(generated_let_declarationResult_r(92736.0, 92766.0), Basics_or(generated_let_declarationResult_r(92768.0, 92777.0), generated_let_declarationResult_r(92784.0, 92862.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(92864.0, 92873.0), Basics_or(generated_let_declarationResult_r(92880.0, 92909.0), Basics_or(generated_let_declarationResult_r(92928.0, 92975.0), Basics_or(generated_let_declarationResult_r(92992.0, 92995.0), Basics_or(generated_let_declarationResult_r(93008.0, 93017.0), Basics_or(generated_let_declarationResult_r(93019.0, 93025.0), Basics_or(generated_let_declarationResult_r(93027.0, 93047.0), Basics_or(generated_let_declarationResult_r(93053.0, 93071.0), Basics_or(generated_let_declarationResult_r(93760.0, 93846.0), Basics_or(generated_let_declarationResult_r(93952.0, 94026.0), generated_let_declarationResult_e(94032.0)))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(110927.0) {
                                    Basics_or(generated_let_declarationResult_r(94099.0, 94111.0), Basics_or(generated_let_declarationResult_r(94176.0, 94177.0), Basics_or(generated_let_declarationResult_e(94179.0), Basics_or(generated_let_declarationResult_r(94208.0, 100343.0), Basics_or(generated_let_declarationResult_r(100352.0, 101589.0), Basics_or(generated_let_declarationResult_r(101632.0, 101640.0), Basics_or(generated_let_declarationResult_r(110576.0, 110579.0), Basics_or(generated_let_declarationResult_r(110581.0, 110587.0), Basics_or(generated_let_declarationResult_r(110589.0, 110590.0), Basics_or(generated_let_declarationResult_r(110592.0, 110882.0), generated_let_declarationResult_e(110898.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(110928.0, 110930.0), Basics_or(generated_let_declarationResult_e(110933.0), Basics_or(generated_let_declarationResult_r(110948.0, 110951.0), Basics_or(generated_let_declarationResult_r(110960.0, 111355.0), Basics_or(generated_let_declarationResult_r(113664.0, 113770.0), Basics_or(generated_let_declarationResult_r(113776.0, 113788.0), Basics_or(generated_let_declarationResult_r(113792.0, 113800.0), Basics_or(generated_let_declarationResult_r(113808.0, 113817.0), Basics_or(generated_let_declarationResult_r(119488.0, 119507.0), Basics_or(generated_let_declarationResult_r(119520.0, 119539.0), Basics_or(generated_let_declarationResult_r(119648.0, 119672.0), generated_let_declarationResult_r(119808.0, 119892.0))))))))))))
                                }
                            }
                        }
                    } else {
                        if generated_let_declarationResult_l(124911.0) {
                            if generated_let_declarationResult_l(120597.0) {
                                if generated_let_declarationResult_l(120085.0) {
                                    Basics_or(generated_let_declarationResult_r(119894.0, 119964.0), Basics_or(generated_let_declarationResult_r(119966.0, 119967.0), Basics_or(generated_let_declarationResult_e(119970.0), Basics_or(generated_let_declarationResult_r(119973.0, 119974.0), Basics_or(generated_let_declarationResult_r(119977.0, 119980.0), Basics_or(generated_let_declarationResult_r(119982.0, 119993.0), Basics_or(generated_let_declarationResult_e(119995.0), Basics_or(generated_let_declarationResult_r(119997.0, 120003.0), Basics_or(generated_let_declarationResult_r(120005.0, 120069.0), Basics_or(generated_let_declarationResult_r(120071.0, 120074.0), generated_let_declarationResult_r(120077.0, 120084.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(120086.0, 120092.0), Basics_or(generated_let_declarationResult_r(120094.0, 120121.0), Basics_or(generated_let_declarationResult_r(120123.0, 120126.0), Basics_or(generated_let_declarationResult_r(120128.0, 120132.0), Basics_or(generated_let_declarationResult_e(120134.0), Basics_or(generated_let_declarationResult_r(120138.0, 120144.0), Basics_or(generated_let_declarationResult_r(120146.0, 120485.0), Basics_or(generated_let_declarationResult_r(120488.0, 120512.0), Basics_or(generated_let_declarationResult_r(120514.0, 120538.0), Basics_or(generated_let_declarationResult_r(120540.0, 120570.0), generated_let_declarationResult_r(120572.0, 120596.0)))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(123135.0) {
                                    Basics_or(generated_let_declarationResult_r(120598.0, 120628.0), Basics_or(generated_let_declarationResult_r(120630.0, 120654.0), Basics_or(generated_let_declarationResult_r(120656.0, 120686.0), Basics_or(generated_let_declarationResult_r(120688.0, 120712.0), Basics_or(generated_let_declarationResult_r(120714.0, 120744.0), Basics_or(generated_let_declarationResult_r(120746.0, 120770.0), Basics_or(generated_let_declarationResult_r(120772.0, 120779.0), Basics_or(generated_let_declarationResult_r(120782.0, 120831.0), Basics_or(generated_let_declarationResult_r(122624.0, 122654.0), Basics_or(generated_let_declarationResult_r(122661.0, 122666.0), generated_let_declarationResult_r(122928.0, 122989.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(123136.0, 123180.0), Basics_or(generated_let_declarationResult_r(123191.0, 123197.0), Basics_or(generated_let_declarationResult_r(123200.0, 123209.0), Basics_or(generated_let_declarationResult_e(123214.0), Basics_or(generated_let_declarationResult_r(123536.0, 123565.0), Basics_or(generated_let_declarationResult_r(123584.0, 123627.0), Basics_or(generated_let_declarationResult_r(123632.0, 123641.0), Basics_or(generated_let_declarationResult_r(124112.0, 124139.0), Basics_or(generated_let_declarationResult_r(124144.0, 124153.0), Basics_or(generated_let_declarationResult_r(124896.0, 124902.0), Basics_or(generated_let_declarationResult_r(124904.0, 124907.0), generated_let_declarationResult_r(124909.0, 124910.0))))))))))))
                                }
                            }
                        } else {
                            if generated_let_declarationResult_l(126560.0) {
                                if generated_let_declarationResult_l(126463.0) {
                                    Basics_or(generated_let_declarationResult_r(124912.0, 124926.0), Basics_or(generated_let_declarationResult_r(124928.0, 125124.0), Basics_or(generated_let_declarationResult_r(125127.0, 125135.0), Basics_or(generated_let_declarationResult_r(125184.0, 125251.0), Basics_or(generated_let_declarationResult_e(125259.0), Basics_or(generated_let_declarationResult_r(125264.0, 125273.0), Basics_or(generated_let_declarationResult_r(126065.0, 126123.0), Basics_or(generated_let_declarationResult_r(126125.0, 126127.0), Basics_or(generated_let_declarationResult_r(126129.0, 126132.0), Basics_or(generated_let_declarationResult_r(126209.0, 126253.0), generated_let_declarationResult_r(126255.0, 126269.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(126464.0, 126467.0), Basics_or(generated_let_declarationResult_r(126469.0, 126495.0), Basics_or(generated_let_declarationResult_r(126497.0, 126498.0), Basics_or(generated_let_declarationResult_e(126500.0), Basics_or(generated_let_declarationResult_e(126503.0), Basics_or(generated_let_declarationResult_r(126505.0, 126514.0), Basics_or(generated_let_declarationResult_r(126516.0, 126519.0), Basics_or(generated_let_declarationResult_e(126530.0), Basics_or(generated_let_declarationResult_r(126541.0, 126543.0), Basics_or(generated_let_declarationResult_r(126545.0, 126546.0), Basics_or(generated_let_declarationResult_e(126548.0), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 1.0), Basics_or(generated_let_declarationResult_r(126521.0, 126523.0), Basics_or(generated_let_declarationResult_r(126535.0, 126539.0), generated_let_declarationResult_r(126551.0, 126559.0)))))))))))))))
                                }
                            } else {
                                if generated_let_declarationResult_l(126634.0) {
                                    Basics_or(generated_let_declarationResult_r(126561.0, 126562.0), Basics_or(generated_let_declarationResult_e(126564.0), Basics_or(generated_let_declarationResult_r(126567.0, 126570.0), Basics_or(generated_let_declarationResult_r(126572.0, 126578.0), Basics_or(generated_let_declarationResult_r(126580.0, 126583.0), Basics_or(generated_let_declarationResult_r(126585.0, 126588.0), Basics_or(generated_let_declarationResult_e(126590.0), Basics_or(generated_let_declarationResult_r(126592.0, 126601.0), Basics_or(generated_let_declarationResult_r(126603.0, 126619.0), Basics_or(generated_let_declarationResult_r(126625.0, 126627.0), generated_let_declarationResult_r(126629.0, 126633.0)))))))))))
                                } else {
                                    Basics_or(generated_let_declarationResult_r(126635.0, 126651.0), Basics_or(generated_let_declarationResult_r(127232.0, 127244.0), Basics_or(generated_let_declarationResult_r(130032.0, 130041.0), Basics_or(generated_let_declarationResult_r(131072.0, 173791.0), Basics_or(generated_let_declarationResult_r(173824.0, 177977.0), Basics_or(generated_let_declarationResult_r(177984.0, 178205.0), Basics_or(generated_let_declarationResult_r(178208.0, 183969.0), Basics_or(generated_let_declarationResult_r(183984.0, 191456.0), Basics_or(generated_let_declarationResult_r(191472.0, 192093.0), Basics_or(generated_let_declarationResult_r(194560.0, 195101.0), Basics_or(generated_let_declarationResult_r(196608.0, 201546.0), generated_let_declarationResult_r(201552.0, 205743.0))))))))))))
                                }
                            }
                        }
                    }
                }
            }
        }
}

@Sendable public static func Unicode_isDigit(_ c: UnicodeScalar) ->  Bool {
    let generated_let_declarationResult_code: Double =
        Char_toCode(c)
    @Sendable func generated_let_declarationResult_e(_ hex: Double) ->  Bool {
        Basics_eq(hex, generated_let_declarationResult_code)
    }
    @Sendable func generated_let_declarationResult_l(_ hex: Double) ->  Bool {
        Basics_lt(generated_let_declarationResult_code, hex)
    }
    @Sendable func generated_let_declarationResult_r(_ from: Double, _ to: Double) ->  Bool {
        Basics_and(Basics_le(from, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, to))
    }
    return
        if generated_let_declarationResult_l(256.0) {
            Basics_or(generated_let_declarationResult_r(48.0, 57.0), Basics_or(generated_let_declarationResult_r(178.0, 179.0), Basics_or(generated_let_declarationResult_e(185.0), generated_let_declarationResult_r(188.0, 190.0))))
        } else {
            if generated_let_declarationResult_l(66272.0) {
                if generated_let_declarationResult_l(7231.0) {
                    if generated_let_declarationResult_l(3557.0) {
                        if generated_let_declarationResult_l(2917.0) {
                            Basics_or(generated_let_declarationResult_r(1632.0, 1641.0), Basics_or(generated_let_declarationResult_r(1776.0, 1785.0), Basics_or(generated_let_declarationResult_r(1984.0, 1993.0), Basics_or(generated_let_declarationResult_r(2406.0, 2415.0), Basics_or(generated_let_declarationResult_r(2534.0, 2543.0), Basics_or(generated_let_declarationResult_r(2548.0, 2553.0), Basics_or(generated_let_declarationResult_r(2662.0, 2671.0), generated_let_declarationResult_r(2790.0, 2799.0))))))))
                        } else {
                            Basics_or(generated_let_declarationResult_r(2918.0, 2927.0), Basics_or(generated_let_declarationResult_r(2930.0, 2935.0), Basics_or(generated_let_declarationResult_r(3046.0, 3058.0), Basics_or(generated_let_declarationResult_r(3174.0, 3183.0), Basics_or(generated_let_declarationResult_r(3192.0, 3198.0), Basics_or(generated_let_declarationResult_r(3302.0, 3311.0), Basics_or(generated_let_declarationResult_r(3416.0, 3422.0), generated_let_declarationResult_r(3430.0, 3448.0))))))))
                        }
                    } else {
                        if generated_let_declarationResult_l(6111.0) {
                            Basics_or(generated_let_declarationResult_r(3558.0, 3567.0), Basics_or(generated_let_declarationResult_r(3664.0, 3673.0), Basics_or(generated_let_declarationResult_r(3792.0, 3801.0), Basics_or(generated_let_declarationResult_r(3872.0, 3891.0), Basics_or(generated_let_declarationResult_r(4160.0, 4169.0), Basics_or(generated_let_declarationResult_r(4240.0, 4249.0), Basics_or(generated_let_declarationResult_r(4969.0, 4988.0), generated_let_declarationResult_r(5870.0, 5872.0))))))))
                        } else {
                            Basics_or(generated_let_declarationResult_r(6112.0, 6121.0), Basics_or(generated_let_declarationResult_r(6128.0, 6137.0), Basics_or(generated_let_declarationResult_r(6160.0, 6169.0), Basics_or(generated_let_declarationResult_r(6470.0, 6479.0), Basics_or(generated_let_declarationResult_r(6608.0, 6618.0), Basics_or(generated_let_declarationResult_r(6784.0, 6793.0), Basics_or(generated_let_declarationResult_r(6800.0, 6809.0), Basics_or(generated_let_declarationResult_r(6992.0, 7001.0), generated_let_declarationResult_r(7088.0, 7097.0)))))))))
                        }
                    }
                } else {
                    if generated_let_declarationResult_l(12871.0) {
                        if generated_let_declarationResult_l(9449.0) {
                            Basics_or(generated_let_declarationResult_r(7232.0, 7241.0), Basics_or(generated_let_declarationResult_r(7248.0, 7257.0), Basics_or(generated_let_declarationResult_e(8304.0), Basics_or(generated_let_declarationResult_r(8308.0, 8313.0), Basics_or(generated_let_declarationResult_r(8320.0, 8329.0), Basics_or(generated_let_declarationResult_r(8528.0, 8578.0), Basics_or(generated_let_declarationResult_r(8581.0, 8585.0), generated_let_declarationResult_r(9312.0, 9371.0))))))))
                        } else {
                            Basics_or(generated_let_declarationResult_r(9450.0, 9471.0), Basics_or(generated_let_declarationResult_r(10102.0, 10131.0), Basics_or(generated_let_declarationResult_e(11517.0), Basics_or(generated_let_declarationResult_e(12295.0), Basics_or(generated_let_declarationResult_r(12321.0, 12329.0), Basics_or(generated_let_declarationResult_r(12344.0, 12346.0), Basics_or(generated_let_declarationResult_r(12690.0, 12693.0), generated_let_declarationResult_r(12832.0, 12841.0))))))))
                        }
                    } else {
                        if generated_let_declarationResult_l(43263.0) {
                            Basics_or(generated_let_declarationResult_r(12872.0, 12879.0), Basics_or(generated_let_declarationResult_r(12881.0, 12895.0), Basics_or(generated_let_declarationResult_r(12928.0, 12937.0), Basics_or(generated_let_declarationResult_r(12977.0, 12991.0), Basics_or(generated_let_declarationResult_r(42528.0, 42537.0), Basics_or(generated_let_declarationResult_r(42726.0, 42735.0), Basics_or(generated_let_declarationResult_r(43056.0, 43061.0), generated_let_declarationResult_r(43216.0, 43225.0))))))))
                        } else {
                            Basics_or(generated_let_declarationResult_r(43264.0, 43273.0), Basics_or(generated_let_declarationResult_r(43472.0, 43481.0), Basics_or(generated_let_declarationResult_r(43504.0, 43513.0), Basics_or(generated_let_declarationResult_r(43600.0, 43609.0), Basics_or(generated_let_declarationResult_r(44016.0, 44025.0), Basics_or(generated_let_declarationResult_r(65296.0, 65305.0), Basics_or(generated_let_declarationResult_r(65799.0, 65843.0), Basics_or(generated_let_declarationResult_r(65856.0, 65912.0), generated_let_declarationResult_r(65930.0, 65931.0)))))))))
                        }
                    }
                }
            } else {
                if generated_let_declarationResult_l(70735.0) {
                    if generated_let_declarationResult_l(68252.0) {
                        if generated_let_declarationResult_l(67750.0) {
                            Basics_or(generated_let_declarationResult_r(66273.0, 66299.0), Basics_or(generated_let_declarationResult_r(66336.0, 66339.0), Basics_or(generated_let_declarationResult_e(66369.0), Basics_or(generated_let_declarationResult_e(66378.0), Basics_or(generated_let_declarationResult_r(66513.0, 66517.0), Basics_or(generated_let_declarationResult_r(66720.0, 66729.0), Basics_or(generated_let_declarationResult_r(67672.0, 67679.0), generated_let_declarationResult_r(67705.0, 67711.0))))))))
                        } else {
                            Basics_or(generated_let_declarationResult_r(67751.0, 67759.0), Basics_or(generated_let_declarationResult_r(67835.0, 67839.0), Basics_or(generated_let_declarationResult_r(67862.0, 67867.0), Basics_or(generated_let_declarationResult_r(68028.0, 68029.0), Basics_or(generated_let_declarationResult_r(68032.0, 68047.0), Basics_or(generated_let_declarationResult_r(68050.0, 68095.0), Basics_or(generated_let_declarationResult_r(68160.0, 68168.0), generated_let_declarationResult_r(68221.0, 68222.0))))))))
                        }
                    } else {
                        if generated_let_declarationResult_l(69404.0) {
                            Basics_or(generated_let_declarationResult_r(68253.0, 68255.0), Basics_or(generated_let_declarationResult_r(68331.0, 68335.0), Basics_or(generated_let_declarationResult_r(68440.0, 68447.0), Basics_or(generated_let_declarationResult_r(68472.0, 68479.0), Basics_or(generated_let_declarationResult_r(68521.0, 68527.0), Basics_or(generated_let_declarationResult_r(68858.0, 68863.0), Basics_or(generated_let_declarationResult_r(68912.0, 68921.0), generated_let_declarationResult_r(69216.0, 69246.0))))))))
                        } else {
                            Basics_or(generated_let_declarationResult_r(69405.0, 69414.0), Basics_or(generated_let_declarationResult_r(69457.0, 69460.0), Basics_or(generated_let_declarationResult_r(69573.0, 69579.0), Basics_or(generated_let_declarationResult_r(69714.0, 69743.0), Basics_or(generated_let_declarationResult_r(69872.0, 69881.0), Basics_or(generated_let_declarationResult_r(69942.0, 69951.0), Basics_or(generated_let_declarationResult_r(70096.0, 70105.0), Basics_or(generated_let_declarationResult_r(70113.0, 70132.0), generated_let_declarationResult_r(70384.0, 70393.0)))))))))
                        }
                    }
                } else {
                    if generated_let_declarationResult_l(93823.0) {
                        if generated_let_declarationResult_l(73039.0) {
                            Basics_or(generated_let_declarationResult_r(70736.0, 70745.0), Basics_or(generated_let_declarationResult_r(70864.0, 70873.0), Basics_or(generated_let_declarationResult_r(71248.0, 71257.0), Basics_or(generated_let_declarationResult_r(71360.0, 71369.0), Basics_or(generated_let_declarationResult_r(71472.0, 71483.0), Basics_or(generated_let_declarationResult_r(71904.0, 71922.0), Basics_or(generated_let_declarationResult_r(72016.0, 72025.0), generated_let_declarationResult_r(72784.0, 72812.0))))))))
                        } else {
                            Basics_or(generated_let_declarationResult_r(73040.0, 73049.0), Basics_or(generated_let_declarationResult_r(73120.0, 73129.0), Basics_or(generated_let_declarationResult_r(73552.0, 73561.0), Basics_or(generated_let_declarationResult_r(73664.0, 73684.0), Basics_or(generated_let_declarationResult_r(74752.0, 74862.0), Basics_or(generated_let_declarationResult_r(92768.0, 92777.0), Basics_or(generated_let_declarationResult_r(92864.0, 92873.0), Basics_or(generated_let_declarationResult_r(93008.0, 93017.0), generated_let_declarationResult_r(93019.0, 93025.0)))))))))
                        }
                    } else {
                        if generated_let_declarationResult_l(125126.0) {
                            Basics_or(generated_let_declarationResult_r(93824.0, 93846.0), Basics_or(generated_let_declarationResult_r(119488.0, 119507.0), Basics_or(generated_let_declarationResult_r(119520.0, 119539.0), Basics_or(generated_let_declarationResult_r(119648.0, 119672.0), Basics_or(generated_let_declarationResult_r(120782.0, 120831.0), Basics_or(generated_let_declarationResult_r(123200.0, 123209.0), Basics_or(generated_let_declarationResult_r(123632.0, 123641.0), generated_let_declarationResult_r(124144.0, 124153.0))))))))
                        } else {
                            Basics_or(generated_let_declarationResult_r(125127.0, 125135.0), Basics_or(generated_let_declarationResult_r(125264.0, 125273.0), Basics_or(generated_let_declarationResult_r(126065.0, 126123.0), Basics_or(generated_let_declarationResult_r(126125.0, 126127.0), Basics_or(generated_let_declarationResult_r(126129.0, 126132.0), Basics_or(generated_let_declarationResult_r(126209.0, 126253.0), Basics_or(generated_let_declarationResult_r(126255.0, 126269.0), Basics_or(generated_let_declarationResult_r(127232.0, 127244.0), generated_let_declarationResult_r(130032.0, 130041.0)))))))))
                        }
                    }
                }
            }
        }
}

@Sendable public static func Unicode_isLower(_ c: UnicodeScalar) ->  Bool {
    let generated_let_declarationResult_simple: Bool =
        Basics_and(Basics_eq(Char_toLower(c), c), Basics_neq(Char_toUpper(c), c))
    let generated_let_declarationResult_code: Double =
        Char_toCode(c)
    @Sendable func generated_let_declarationResult_e(_ hex: Double) ->  Bool {
        Basics_eq(hex, generated_let_declarationResult_code)
    }
    @Sendable func generated_let_declarationResult_l(_ hex: Double) ->  Bool {
        Basics_lt(generated_let_declarationResult_code, hex)
    }
    @Sendable func generated_let_declarationResult_r(_ from: Double, _ to: Double) ->  Bool {
        Basics_and(Basics_le(from, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, to))
    }
    return
        if generated_let_declarationResult_simple {
            Basics_or(Basics_le(generated_let_declarationResult_code, 836.0), Basics_or(generated_let_declarationResult_r(838.0, 8559.0), Basics_or(generated_let_declarationResult_r(8576.0, 9423.0), generated_let_declarationResult_r(9450.0, 983040.0))))
        } else {
            if generated_let_declarationResult_l(43001.0) {
                if generated_let_declarationResult_l(8457.0) {
                    if generated_let_declarationResult_l(590.0) {
                        Basics_or(generated_let_declarationResult_r(311.0, 312.0), Basics_or(generated_let_declarationResult_r(396.0, 397.0), Basics_or(generated_let_declarationResult_r(409.0, 411.0), Basics_or(generated_let_declarationResult_r(426.0, 427.0), Basics_or(generated_let_declarationResult_r(441.0, 442.0), Basics_or(generated_let_declarationResult_r(445.0, 447.0), Basics_or(generated_let_declarationResult_e(545.0), generated_let_declarationResult_r(563.0, 569.0))))))))
                    } else {
                        Basics_or(generated_let_declarationResult_r(591.0, 659.0), Basics_or(generated_let_declarationResult_r(661.0, 687.0), Basics_or(generated_let_declarationResult_r(1019.0, 1020.0), Basics_or(generated_let_declarationResult_r(1376.0, 1416.0), Basics_or(generated_let_declarationResult_r(7424.0, 7467.0), Basics_or(generated_let_declarationResult_r(7531.0, 7543.0), Basics_or(generated_let_declarationResult_r(7545.0, 7578.0), Basics_or(generated_let_declarationResult_r(7829.0, 7837.0), generated_let_declarationResult_e(7839.0)))))))))
                    }
                } else {
                    if generated_let_declarationResult_l(11376.0) {
                        Basics_or(generated_let_declarationResult_e(8458.0), Basics_or(generated_let_declarationResult_r(8462.0, 8463.0), Basics_or(generated_let_declarationResult_e(8467.0), Basics_or(generated_let_declarationResult_e(8495.0), Basics_or(generated_let_declarationResult_e(8500.0), Basics_or(generated_let_declarationResult_e(8505.0), Basics_or(generated_let_declarationResult_r(8508.0, 8509.0), generated_let_declarationResult_r(8518.0, 8521.0))))))))
                    } else {
                        Basics_or(generated_let_declarationResult_e(11377.0), Basics_or(generated_let_declarationResult_r(11379.0, 11380.0), Basics_or(generated_let_declarationResult_r(11382.0, 11387.0), Basics_or(generated_let_declarationResult_r(11491.0, 11492.0), Basics_or(generated_let_declarationResult_r(42799.0, 42801.0), Basics_or(generated_let_declarationResult_r(42865.0, 42872.0), Basics_or(generated_let_declarationResult_e(42894.0), Basics_or(generated_let_declarationResult_r(42899.0, 42901.0), Basics_or(generated_let_declarationResult_e(42927.0), Basics_and(Basics_eq(Basics_modBy(2.0, generated_let_declarationResult_code), 1.0), generated_let_declarationResult_r(42963.0, 42965.0)))))))))))
                    }
                }
            } else {
                if generated_let_declarationResult_l(120353.0) {
                    if generated_let_declarationResult_l(119994.0) {
                        Basics_or(generated_let_declarationResult_e(43002.0), Basics_or(generated_let_declarationResult_r(43824.0, 43866.0), Basics_or(generated_let_declarationResult_r(43872.0, 43880.0), Basics_or(generated_let_declarationResult_r(119834.0, 119859.0), Basics_or(generated_let_declarationResult_r(119886.0, 119892.0), Basics_or(generated_let_declarationResult_r(119894.0, 119911.0), Basics_or(generated_let_declarationResult_r(119938.0, 119963.0), generated_let_declarationResult_r(119990.0, 119993.0))))))))
                    } else {
                        Basics_or(generated_let_declarationResult_e(119995.0), Basics_or(generated_let_declarationResult_r(119997.0, 120003.0), Basics_or(generated_let_declarationResult_r(120005.0, 120015.0), Basics_or(generated_let_declarationResult_r(120042.0, 120067.0), Basics_or(generated_let_declarationResult_r(120094.0, 120119.0), Basics_or(generated_let_declarationResult_r(120146.0, 120171.0), Basics_or(generated_let_declarationResult_r(120198.0, 120223.0), Basics_or(generated_let_declarationResult_r(120250.0, 120275.0), generated_let_declarationResult_r(120302.0, 120327.0)))))))))
                    }
                } else {
                    if generated_let_declarationResult_l(120655.0) {
                        Basics_or(generated_let_declarationResult_r(120354.0, 120379.0), Basics_or(generated_let_declarationResult_r(120406.0, 120431.0), Basics_or(generated_let_declarationResult_r(120458.0, 120485.0), Basics_or(generated_let_declarationResult_r(120514.0, 120538.0), Basics_or(generated_let_declarationResult_r(120540.0, 120545.0), Basics_or(generated_let_declarationResult_r(120572.0, 120596.0), Basics_or(generated_let_declarationResult_r(120598.0, 120603.0), generated_let_declarationResult_r(120630.0, 120654.0))))))))
                    } else {
                        Basics_or(generated_let_declarationResult_r(120656.0, 120661.0), Basics_or(generated_let_declarationResult_r(120688.0, 120712.0), Basics_or(generated_let_declarationResult_r(120714.0, 120719.0), Basics_or(generated_let_declarationResult_r(120746.0, 120770.0), Basics_or(generated_let_declarationResult_r(120772.0, 120777.0), Basics_or(generated_let_declarationResult_e(120779.0), Basics_or(generated_let_declarationResult_r(122624.0, 122633.0), Basics_or(generated_let_declarationResult_r(122635.0, 122654.0), generated_let_declarationResult_r(122661.0, 122666.0)))))))))
                    }
                }
            }
        }
}

@Sendable public static func Unicode_isSeparator(_ c: UnicodeScalar) ->  Bool {
    let generated_let_declarationResult_code: Double =
        Char_toCode(c)
    @Sendable func generated_let_declarationResult_e(_ hex: Double) ->  Bool {
        Basics_eq(hex, generated_let_declarationResult_code)
    }
    @Sendable func generated_let_declarationResult_l(_ hex: Double) ->  Bool {
        Basics_lt(generated_let_declarationResult_code, hex)
    }
    @Sendable func generated_let_declarationResult_r(_ from: Double, _ to: Double) ->  Bool {
        Basics_and(Basics_le(from, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, to))
    }
    return
        if generated_let_declarationResult_l(256.0) {
            Basics_or(generated_let_declarationResult_e(32.0), generated_let_declarationResult_e(160.0))
        } else {
            Basics_or(generated_let_declarationResult_e(5760.0), Basics_or(generated_let_declarationResult_r(8192.0, 8202.0), Basics_or(generated_let_declarationResult_r(8232.0, 8233.0), Basics_or(generated_let_declarationResult_e(8239.0), Basics_or(generated_let_declarationResult_e(8287.0), generated_let_declarationResult_e(12288.0))))))
        }
}

@Sendable public static func Unicode_isSpace(_ c: UnicodeScalar) ->  Bool {
    let generated_let_declarationResult_code: Double =
        Char_toCode(c)
    @Sendable func generated_let_declarationResult_e(_ hex: Double) ->  Bool {
        Basics_eq(hex, generated_let_declarationResult_code)
    }
    @Sendable func generated_let_declarationResult_l(_ hex: Double) ->  Bool {
        Basics_lt(generated_let_declarationResult_code, hex)
    }
    @Sendable func generated_let_declarationResult_r(_ from: Double, _ to: Double) ->  Bool {
        Basics_and(Basics_le(from, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, to))
    }
    return
        if generated_let_declarationResult_l(256.0) {
            Basics_or(generated_let_declarationResult_e(32.0), generated_let_declarationResult_e(160.0))
        } else {
            Basics_or(generated_let_declarationResult_e(5760.0), Basics_or(generated_let_declarationResult_r(8192.0, 8202.0), Basics_or(generated_let_declarationResult_e(8239.0), Basics_or(generated_let_declarationResult_e(8287.0), generated_let_declarationResult_e(12288.0)))))
        }
}

@Sendable public static func Unicode_isUpper(_ c: UnicodeScalar) ->  Bool {
    let generated_let_declarationResult_simple: Bool =
        Basics_and(Basics_eq(Char_toUpper(c), c), Basics_neq(Char_toLower(c), c))
    let generated_let_declarationResult_code: Double =
        Char_toCode(c)
    @Sendable func generated_let_declarationResult_e(_ hex: Double) ->  Bool {
        Basics_eq(hex, generated_let_declarationResult_code)
    }
    @Sendable func generated_let_declarationResult_l(_ hex: Double) ->  Bool {
        Basics_lt(generated_let_declarationResult_code, hex)
    }
    @Sendable func generated_let_declarationResult_r(_ from: Double, _ to: Double) ->  Bool {
        Basics_and(Basics_le(from, generated_let_declarationResult_code), Basics_le(generated_let_declarationResult_code, to))
    }
    return
        if generated_let_declarationResult_simple {
            Basics_or(Basics_le(generated_let_declarationResult_code, 8543.0), Basics_or(generated_let_declarationResult_r(8560.0, 9397.0), generated_let_declarationResult_r(9424.0, 983040.0)))
        } else {
            if generated_let_declarationResult_l(120015.0) {
                if generated_let_declarationResult_l(8509.0) {
                    Basics_or(generated_let_declarationResult_r(978.0, 980.0), Basics_or(generated_let_declarationResult_e(8450.0), Basics_or(generated_let_declarationResult_e(8455.0), Basics_or(generated_let_declarationResult_r(8459.0, 8461.0), Basics_or(generated_let_declarationResult_r(8464.0, 8466.0), Basics_or(generated_let_declarationResult_e(8469.0), Basics_or(generated_let_declarationResult_r(8473.0, 8477.0), Basics_or(generated_let_declarationResult_e(8484.0), Basics_or(generated_let_declarationResult_e(8488.0), Basics_or(generated_let_declarationResult_r(8490.0, 8493.0), generated_let_declarationResult_r(8496.0, 8499.0)))))))))))
                } else {
                    Basics_or(generated_let_declarationResult_r(8510.0, 8511.0), Basics_or(generated_let_declarationResult_e(8517.0), Basics_or(generated_let_declarationResult_r(119808.0, 119833.0), Basics_or(generated_let_declarationResult_r(119860.0, 119885.0), Basics_or(generated_let_declarationResult_r(119912.0, 119937.0), Basics_or(generated_let_declarationResult_e(119964.0), Basics_or(generated_let_declarationResult_r(119966.0, 119967.0), Basics_or(generated_let_declarationResult_e(119970.0), Basics_or(generated_let_declarationResult_r(119973.0, 119974.0), Basics_or(generated_let_declarationResult_r(119977.0, 119980.0), generated_let_declarationResult_r(119982.0, 119989.0)))))))))))
                }
            } else {
                if generated_let_declarationResult_l(120223.0) {
                    Basics_or(generated_let_declarationResult_r(120016.0, 120041.0), Basics_or(generated_let_declarationResult_r(120068.0, 120069.0), Basics_or(generated_let_declarationResult_r(120071.0, 120074.0), Basics_or(generated_let_declarationResult_r(120077.0, 120084.0), Basics_or(generated_let_declarationResult_r(120086.0, 120092.0), Basics_or(generated_let_declarationResult_r(120120.0, 120121.0), Basics_or(generated_let_declarationResult_r(120123.0, 120126.0), Basics_or(generated_let_declarationResult_r(120128.0, 120132.0), Basics_or(generated_let_declarationResult_e(120134.0), Basics_or(generated_let_declarationResult_r(120138.0, 120144.0), generated_let_declarationResult_r(120172.0, 120197.0)))))))))))
                } else {
                    Basics_or(generated_let_declarationResult_r(120224.0, 120249.0), Basics_or(generated_let_declarationResult_r(120276.0, 120301.0), Basics_or(generated_let_declarationResult_r(120328.0, 120353.0), Basics_or(generated_let_declarationResult_r(120380.0, 120405.0), Basics_or(generated_let_declarationResult_r(120432.0, 120457.0), Basics_or(generated_let_declarationResult_r(120488.0, 120512.0), Basics_or(generated_let_declarationResult_r(120546.0, 120570.0), Basics_or(generated_let_declarationResult_r(120604.0, 120628.0), Basics_or(generated_let_declarationResult_r(120662.0, 120686.0), Basics_or(generated_let_declarationResult_r(120720.0, 120744.0), generated_let_declarationResult_e(120778.0)))))))))))
                }
            }
        }
}


}
