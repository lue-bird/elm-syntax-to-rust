// -- (function(scope){
// -- 'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

console.warn('Compiled in DEV mode. Follow the advice at https://elm-lang.org/0.19.1/optimize for better performance and smaller assets.');


var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log_UNUSED = F2(function(tag, value)
{
	return value;
});

var _Debug_log = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString_UNUSED(value)
{
	return '<internals>';
}

function _Debug_toString(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash_UNUSED(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.start.line === region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'on lines ' + region.start.line + ' through ' + region.end.line;
}



// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**_UNUSED/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/
	/**/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0_UNUSED = 0;
var _Utils_Tuple0 = { $: '#0' };

function _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr_UNUSED(c) { return c; }
function _Utils_chr(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil_UNUSED = { $: 0 };
var _List_Nil = { $: '[]' };

function _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap(value) { return { $: 0, a: value }; }
function _Json_unwrap(value) { return value.a; }

function _Json_wrap_UNUSED(value) { return value; }
function _Json_unwrap_UNUSED(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}


// BYTES

function _Bytes_width(bytes)
{
	return bytes.byteLength;
}

var _Bytes_getHostEndianness = F2(function(le, be)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(new Uint8Array(new Uint32Array([1]))[0] === 1 ? le : be));
	});
});


// ENCODERS

function _Bytes_encode(encoder)
{
	var mutableBytes = new DataView(new ArrayBuffer($elm$bytes$Bytes$Encode$getWidth(encoder)));
	$elm$bytes$Bytes$Encode$write(encoder)(mutableBytes)(0);
	return mutableBytes;
}


// SIGNED INTEGERS

var _Bytes_write_i8  = F3(function(mb, i, n) { mb.setInt8(i, n); return i + 1; });
var _Bytes_write_i16 = F4(function(mb, i, n, isLE) { mb.setInt16(i, n, isLE); return i + 2; });
var _Bytes_write_i32 = F4(function(mb, i, n, isLE) { mb.setInt32(i, n, isLE); return i + 4; });


// UNSIGNED INTEGERS

var _Bytes_write_u8  = F3(function(mb, i, n) { mb.setUint8(i, n); return i + 1 ;});
var _Bytes_write_u16 = F4(function(mb, i, n, isLE) { mb.setUint16(i, n, isLE); return i + 2; });
var _Bytes_write_u32 = F4(function(mb, i, n, isLE) { mb.setUint32(i, n, isLE); return i + 4; });


// FLOATS

var _Bytes_write_f32 = F4(function(mb, i, n, isLE) { mb.setFloat32(i, n, isLE); return i + 4; });
var _Bytes_write_f64 = F4(function(mb, i, n, isLE) { mb.setFloat64(i, n, isLE); return i + 8; });


// BYTES

var _Bytes_write_bytes = F3(function(mb, offset, bytes)
{
	for (var i = 0, len = bytes.byteLength, limit = len - 4; i <= limit; i += 4)
	{
		mb.setUint32(offset + i, bytes.getUint32(i));
	}
	for (; i < len; i++)
	{
		mb.setUint8(offset + i, bytes.getUint8(i));
	}
	return offset + len;
});


// STRINGS

function _Bytes_getStringWidth(string)
{
	for (var width = 0, i = 0; i < string.length; i++)
	{
		var code = string.charCodeAt(i);
		width +=
			(code < 0x80) ? 1 :
			(code < 0x800) ? 2 :
			(code < 0xD800 || 0xDBFF < code) ? 3 : (i++, 4);
	}
	return width;
}

var _Bytes_write_string = F3(function(mb, offset, string)
{
	for (var i = 0; i < string.length; i++)
	{
		var code = string.charCodeAt(i);
		offset +=
			(code < 0x80)
				? (mb.setUint8(offset, code)
				, 1
				)
				:
			(code < 0x800)
				? (mb.setUint16(offset, 0xC080 /* 0b1100000010000000 */
					| (code >>> 6 & 0x1F /* 0b00011111 */) << 8
					| code & 0x3F /* 0b00111111 */)
				, 2
				)
				:
			(code < 0xD800 || 0xDBFF < code)
				? (mb.setUint16(offset, 0xE080 /* 0b1110000010000000 */
					| (code >>> 12 & 0xF /* 0b00001111 */) << 8
					| code >>> 6 & 0x3F /* 0b00111111 */)
				, mb.setUint8(offset + 2, 0x80 /* 0b10000000 */
					| code & 0x3F /* 0b00111111 */)
				, 3
				)
				:
			(code = (code - 0xD800) * 0x400 + string.charCodeAt(++i) - 0xDC00 + 0x10000
			, mb.setUint32(offset, 0xF0808080 /* 0b11110000100000001000000010000000 */
				| (code >>> 18 & 0x7 /* 0b00000111 */) << 24
				| (code >>> 12 & 0x3F /* 0b00111111 */) << 16
				| (code >>> 6 & 0x3F /* 0b00111111 */) << 8
				| code & 0x3F /* 0b00111111 */)
			, 4
			);
	}
	return offset;
});


// DECODER

var _Bytes_decode = F2(function(decoder, bytes)
{
	try {
		return $elm$core$Maybe$Just(A2(decoder, bytes, 0).b);
	} catch(e) {
		return $elm$core$Maybe$Nothing;
	}
});

var _Bytes_read_i8  = F2(function(      bytes, offset) { return _Utils_Tuple2(offset + 1, bytes.getInt8(offset)); });
var _Bytes_read_i16 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 2, bytes.getInt16(offset, isLE)); });
var _Bytes_read_i32 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getInt32(offset, isLE)); });
var _Bytes_read_u8  = F2(function(      bytes, offset) { return _Utils_Tuple2(offset + 1, bytes.getUint8(offset)); });
var _Bytes_read_u16 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 2, bytes.getUint16(offset, isLE)); });
var _Bytes_read_u32 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getUint32(offset, isLE)); });
var _Bytes_read_f32 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getFloat32(offset, isLE)); });
var _Bytes_read_f64 = F3(function(isLE, bytes, offset) { return _Utils_Tuple2(offset + 8, bytes.getFloat64(offset, isLE)); });

var _Bytes_read_bytes = F3(function(len, bytes, offset)
{
	return _Utils_Tuple2(offset + len, new DataView(bytes.buffer, bytes.byteOffset + offset, len));
});

var _Bytes_read_string = F3(function(len, bytes, offset)
{
	var string = '';
	var end = offset + len;
	for (; offset < end;)
	{
		var byte = bytes.getUint8(offset++);
		string +=
			(byte < 128)
				? String.fromCharCode(byte)
				:
			((byte & 0xE0 /* 0b11100000 */) === 0xC0 /* 0b11000000 */)
				? String.fromCharCode((byte & 0x1F /* 0b00011111 */) << 6 | bytes.getUint8(offset++) & 0x3F /* 0b00111111 */)
				:
			((byte & 0xF0 /* 0b11110000 */) === 0xE0 /* 0b11100000 */)
				? String.fromCharCode(
					(byte & 0xF /* 0b00001111 */) << 12
					| (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */) << 6
					| bytes.getUint8(offset++) & 0x3F /* 0b00111111 */
				)
				:
				(byte =
					((byte & 0x7 /* 0b00000111 */) << 18
						| (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */) << 12
						| (bytes.getUint8(offset++) & 0x3F /* 0b00111111 */) << 6
						| bytes.getUint8(offset++) & 0x3F /* 0b00111111 */
					) - 0x10000
				, String.fromCharCode(Math.floor(byte / 0x400) + 0xD800, byte % 0x400 + 0xDC00)
				);
	}
	return _Utils_Tuple2(offset, string);
});

var _Bytes_decodeFailure = F2(function() { throw 0; });



var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);
	var managers = {};
	var initPair = init(result.a);
	var model = initPair.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		var pair = A2(update, msg, model);
		stepper(model = pair.a, viewMetadata);
		_Platform_enqueueEffects(managers, pair.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


/*
function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}

*/

/*
function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}
*/


/*
function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}

*/

/*
function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}
*/
var $elm$core$List$cons = _List_cons;
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Basics$EQ = {$: 'EQ'};
var $elm$core$Basics$GT = {$: 'GT'};
var $elm$core$Basics$LT = {$: 'LT'};
var $elm$core$Result$Err = function (a) {
	return {$: 'Err', a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 'Index', a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 'Ok', a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var $elm$core$Basics$False = {$: 'False'};
var $elm$core$Basics$add = _Basics_add;
var $elm$core$Maybe$Just = function (a) {
	return {$: 'Just', a: a};
};
var $elm$core$Maybe$Nothing = {$: 'Nothing'};
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 'Field':
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 'Nothing') {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'Index':
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'OneOf':
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 'SubTree', a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.nodeListSize) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.tail);
		} else {
			var treeLen = builder.nodeListSize * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.nodeList) : builder.nodeList;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.tail);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{nodeList: nodeList, nodeListSize: (len / $elm$core$Array$branchFactor) | 0, tail: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = {$: 'True'};
var $elm$core$Result$isOk = function (result) {
	if (result.$ === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Decode$value = _Json_decodeValue;
var $author$project$Main$fromJs = _Platform_incomingPort('fromJs', $elm$json$Json$Decode$value);
var $author$project$Main$WaitingForElmHomeDirectory = {$: 'WaitingForElmHomeDirectory'};
var $author$project$Main$initialState = $author$project$Main$WaitingForElmHomeDirectory;
var $author$project$Main$ElmJsonReadFailed = function (a) {
	return {$: 'ElmJsonReadFailed', a: a};
};
var $author$project$Main$Running = function (a) {
	return {$: 'Running', a: a};
};
var $author$project$Main$WaitingForElmJson = function (a) {
	return {$: 'WaitingForElmJson', a: a};
};
var $author$project$Main$WaitingForNodeHomeDirectoryBecauseElmHomeIsNotDefined = {$: 'WaitingForNodeHomeDirectoryBecauseElmHomeIsNotDefined'};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $miniBill$elm_fast_dict$FastSet$Set = function (a) {
	return {$: 'Set', a: a};
};
var $miniBill$elm_fast_dict$Internal$Dict = F2(
	function (a, b) {
		return {$: 'Dict', a: a, b: b};
	});
var $miniBill$elm_fast_dict$Internal$Leaf = {$: 'Leaf'};
var $miniBill$elm_fast_dict$FastDict$empty = A2($miniBill$elm_fast_dict$Internal$Dict, 0, $miniBill$elm_fast_dict$Internal$Leaf);
var $miniBill$elm_fast_dict$FastSet$empty = $miniBill$elm_fast_dict$FastSet$Set($miniBill$elm_fast_dict$FastDict$empty);
var $lue_bird$elm_state_interface_experimental$Node$EnvironmentVariablesRequest = function (a) {
	return {$: 'EnvironmentVariablesRequest', a: a};
};
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $elm$json$Json$Encode$dict = F3(
	function (toKey, toValue, dictionary) {
		return _Json_wrap(
			A3(
				$elm$core$Dict$foldl,
				F3(
					function (key, value, obj) {
						return A3(
							_Json_addField,
							toKey(key),
							toValue(value),
							obj);
					}),
				_Json_emptyObject(_Utils_Tuple0),
				dictionary));
	});
var $elm$json$Json$Encode$string = _Json_wrap;
var $lue_bird$elm_state_interface_experimental$Node$environmentVariablesToJson = function (environmentVariables) {
	return A3($elm$json$Json$Encode$dict, $elm$core$Basics$identity, $elm$json$Json$Encode$string, environmentVariables);
};
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(_Utils_Tuple0),
			pairs));
};
var $elm$json$Json$Encode$int = _Json_wrap;
var $lue_bird$elm_state_interface_experimental$StructuredId$ofInt = $elm$json$Json$Encode$int;
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var $lue_bird$elm_state_interface_experimental$StructuredId$ofList = F2(
	function (elementToStructuredId, structuredIds) {
		return A2($elm$json$Json$Encode$list, elementToStructuredId, structuredIds);
	});
var $lue_bird$elm_state_interface_experimental$StructuredId$ofParts = function (fieldValueStructureIds) {
	return A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, fieldValueStructureIds);
};
var $lue_bird$elm_state_interface_experimental$StructuredId$ofString = $elm$json$Json$Encode$string;
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit = $elm$json$Json$Encode$null;
var $lue_bird$elm_state_interface_experimental$StructuredId$ofVariant = function (variant) {
	return $lue_bird$elm_state_interface_experimental$StructuredId$ofParts(
		_List_fromArray(
			[
				$lue_bird$elm_state_interface_experimental$StructuredId$ofString(variant.tag),
				variant.value
			]));
};
var $elm$time$Time$posixToMillis = function (_v0) {
	var millis = _v0.a;
	return millis;
};
var $lue_bird$elm_state_interface_experimental$Time$LocalExtra$posixToStructureId = function (timePosix) {
	return $lue_bird$elm_state_interface_experimental$StructuredId$ofInt(
		$elm$time$Time$posixToMillis(timePosix));
};
var $lue_bird$elm_state_interface_experimental$Node$interfaceSingleToStructuredId = function (interfaceSingle) {
	return $lue_bird$elm_state_interface_experimental$StructuredId$ofVariant(
		function () {
			switch (interfaceSingle.$) {
				case 'HttpRequestSend':
					var request = interfaceSingle.a;
					return {
						tag: 'HttpRequestSend',
						value: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(request.url)
					};
				case 'HttpRequestListen':
					var listen = interfaceSingle.a;
					return {
						tag: 'HttpRequestListen',
						value: $lue_bird$elm_state_interface_experimental$StructuredId$ofInt(listen.portNumber)
					};
				case 'HttpResponseSend':
					var send = interfaceSingle.a;
					return {
						tag: 'HttpResponseSend',
						value: $elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'port',
									$lue_bird$elm_state_interface_experimental$StructuredId$ofInt(send.portNumber)),
									_Utils_Tuple2(
									'statusCode',
									$lue_bird$elm_state_interface_experimental$StructuredId$ofInt(send.statusCode)),
									_Utils_Tuple2(
									'headers',
									A2(
										$lue_bird$elm_state_interface_experimental$StructuredId$ofList,
										function (header) {
											return $elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'name',
														$lue_bird$elm_state_interface_experimental$StructuredId$ofString(header.name)),
														_Utils_Tuple2(
														'value',
														$lue_bird$elm_state_interface_experimental$StructuredId$ofString(header.value))
													]));
										},
										send.headers)),
									_Utils_Tuple2(
									'dataAsciiString',
									$lue_bird$elm_state_interface_experimental$StructuredId$ofString(send.dataAsciiString))
								]))
					};
				case 'TimePosixRequest':
					return {tag: 'TimePosixRequest', value: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit};
				case 'TimezoneOffsetRequest':
					return {tag: 'TimezoneOffsetRequest', value: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit};
				case 'TimezoneNameRequest':
					return {tag: 'TimezoneNameRequest', value: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit};
				case 'TimeOnce':
					var once = interfaceSingle.a;
					return {
						tag: 'TimeOnce',
						value: $lue_bird$elm_state_interface_experimental$Time$LocalExtra$posixToStructureId(once.pointInTime)
					};
				case 'RandomUnsignedInt32sRequest':
					var request = interfaceSingle.a;
					return {
						tag: 'RandomUnsignedInt32sRequest',
						value: $lue_bird$elm_state_interface_experimental$StructuredId$ofInt(request.count)
					};
				case 'TimePeriodicallyListen':
					var listen = interfaceSingle.a;
					return {
						tag: 'TimePeriodicallyListen',
						value: $lue_bird$elm_state_interface_experimental$StructuredId$ofInt(listen.intervalDurationMilliSeconds)
					};
				case 'Exit':
					return {tag: 'Exit', value: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit};
				case 'DirectoryMake':
					var make = interfaceSingle.a;
					return {
						tag: 'DirectoryMake',
						value: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(make.path)
					};
				case 'FileRemove':
					var path = interfaceSingle.a;
					return {
						tag: 'FileRemove',
						value: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(path)
					};
				case 'FileWrite':
					var write = interfaceSingle.a;
					return {
						tag: 'FileWrite',
						value: $lue_bird$elm_state_interface_experimental$StructuredId$ofParts(
							_List_fromArray(
								[
									$lue_bird$elm_state_interface_experimental$StructuredId$ofString(write.path),
									$lue_bird$elm_state_interface_experimental$StructuredId$ofString(write.contentAsciiString)
								]))
					};
				case 'FileRequest':
					var request = interfaceSingle.a;
					return {
						tag: 'FileRequest',
						value: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(request.path)
					};
				case 'FileChangeListen':
					var listen = interfaceSingle.a;
					return {
						tag: 'FileChangeListen',
						value: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(listen.path)
					};
				case 'FileInfoRequest':
					var request = interfaceSingle.a;
					return {
						tag: 'FileInfoRequest',
						value: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(request.path)
					};
				case 'DirectorySubPathsRequest':
					var request = interfaceSingle.a;
					return {
						tag: 'DirectorySubPathsRequest',
						value: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(request.path)
					};
				case 'WorkingDirectoryPathRequest':
					return {tag: 'WorkingDirectoryPathRequest', value: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit};
				case 'HomeDirectoryPathRequest':
					return {tag: 'HomeDirectoryPathRequest', value: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit};
				case 'NullDevicePathRequest':
					return {tag: 'NullDevicePathRequest', value: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit};
				case 'LaunchArgumentsRequest':
					return {tag: 'LaunchArgumentsRequest', value: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit};
				case 'EnvironmentVariablesRequest':
					return {tag: 'EnvironmentVariablesRequest', value: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit};
				case 'TerminalSizeRequest':
					return {tag: 'TerminalSizeRequest', value: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit};
				case 'TerminalSizeChangeListen':
					return {tag: 'TerminalSizeChangeListen', value: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit};
				case 'ProcessTitleSet':
					var title = interfaceSingle.a;
					return {
						tag: 'ProcessTitleSet',
						value: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(title)
					};
				case 'StandardOutWrite':
					var text = interfaceSingle.a;
					return {
						tag: 'StandardOutWrite',
						value: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(text)
					};
				case 'StandardErrWrite':
					var text = interfaceSingle.a;
					return {
						tag: 'StandardErrWrite',
						value: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(text)
					};
				case 'StandardInListen':
					return {tag: 'StandardInListen', value: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit};
				case 'StandardInRawListen':
					return {tag: 'StandardInRawListen', value: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit};
				case 'SubProcessSpawn':
					var spawn = interfaceSingle.a;
					return {
						tag: 'SubProcessSpawn',
						value: $lue_bird$elm_state_interface_experimental$StructuredId$ofParts(
							_List_fromArray(
								[
									$lue_bird$elm_state_interface_experimental$StructuredId$ofString(spawn.command),
									A2($lue_bird$elm_state_interface_experimental$StructuredId$ofList, $lue_bird$elm_state_interface_experimental$StructuredId$ofString, spawn._arguments),
									$lue_bird$elm_state_interface_experimental$StructuredId$ofString(spawn.workingDirectoryPath),
									$lue_bird$elm_state_interface_experimental$Node$environmentVariablesToJson(spawn.environmentVariables)
								]))
					};
				default:
					var write = interfaceSingle.a;
					return {
						tag: 'SubProcessStandardInWrite',
						value: $lue_bird$elm_state_interface_experimental$StructuredId$ofParts(
							_List_fromArray(
								[
									$lue_bird$elm_state_interface_experimental$StructuredId$ofString(write.command),
									A2($lue_bird$elm_state_interface_experimental$StructuredId$ofList, $lue_bird$elm_state_interface_experimental$StructuredId$ofString, write._arguments),
									$lue_bird$elm_state_interface_experimental$StructuredId$ofString(write.workingDirectoryPath),
									$lue_bird$elm_state_interface_experimental$Node$environmentVariablesToJson(write.environmentVariables)
								]))
					};
			}
		}());
};
var $miniBill$elm_fast_dict$Internal$Black = {$: 'Black'};
var $miniBill$elm_fast_dict$Internal$InnerNode = F5(
	function (a, b, c, d, e) {
		return {$: 'InnerNode', a: a, b: b, c: c, d: d, e: e};
	});
var $miniBill$elm_fast_dict$FastDict$singleton = F2(
	function (key, value) {
		return A2(
			$miniBill$elm_fast_dict$Internal$Dict,
			1,
			A5($miniBill$elm_fast_dict$Internal$InnerNode, $miniBill$elm_fast_dict$Internal$Black, key, value, $miniBill$elm_fast_dict$Internal$Leaf, $miniBill$elm_fast_dict$Internal$Leaf));
	});
var $lue_bird$elm_state_interface_experimental$StructuredId$toJson = function (structuredId) {
	return structuredId;
};
var $lue_bird$elm_state_interface_experimental$StructuredId$toString = function (structuredId) {
	return A2(
		$elm$json$Json$Encode$encode,
		0,
		$lue_bird$elm_state_interface_experimental$StructuredId$toJson(structuredId));
};
var $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle = function (interfaceSingle) {
	return A2(
		$miniBill$elm_fast_dict$FastDict$singleton,
		$lue_bird$elm_state_interface_experimental$StructuredId$toString(
			$lue_bird$elm_state_interface_experimental$Node$interfaceSingleToStructuredId(interfaceSingle)),
		interfaceSingle);
};
var $lue_bird$elm_state_interface_experimental$Node$environmentVariablesRequest = $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle(
	$lue_bird$elm_state_interface_experimental$Node$EnvironmentVariablesRequest($elm$core$Basics$identity));
var $lue_bird$elm_state_interface_experimental$Node$Exit = function (a) {
	return {$: 'Exit', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$exit = function (code) {
	return $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle(
		$lue_bird$elm_state_interface_experimental$Node$Exit(code));
};
var $miniBill$elm_fast_dict$FastDict$foldlInner = F3(
	function (func, acc, dict) {
		foldlInner:
		while (true) {
			if (dict.$ === 'Leaf') {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($miniBill$elm_fast_dict$FastDict$foldlInner, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldlInner;
			}
		}
	});
var $miniBill$elm_fast_dict$FastDict$foldl = F3(
	function (func, acc, _v0) {
		var dict = _v0.b;
		return A3($miniBill$elm_fast_dict$FastDict$foldlInner, func, acc, dict);
	});
var $miniBill$elm_fast_dict$Internal$Red = {$: 'Red'};
var $miniBill$elm_fast_dict$Internal$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'InnerNode') && (right.a.$ === 'Red')) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'InnerNode') && (left.a.$ === 'Red')) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$miniBill$elm_fast_dict$Internal$InnerNode,
					$miniBill$elm_fast_dict$Internal$Red,
					key,
					value,
					A5($miniBill$elm_fast_dict$Internal$InnerNode, $miniBill$elm_fast_dict$Internal$Black, lK, lV, lLeft, lRight),
					A5($miniBill$elm_fast_dict$Internal$InnerNode, $miniBill$elm_fast_dict$Internal$Black, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$miniBill$elm_fast_dict$Internal$InnerNode,
					color,
					rK,
					rV,
					A5($miniBill$elm_fast_dict$Internal$InnerNode, $miniBill$elm_fast_dict$Internal$Red, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'InnerNode') && (left.a.$ === 'Red')) && (left.d.$ === 'InnerNode')) && (left.d.a.$ === 'Red')) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$miniBill$elm_fast_dict$Internal$InnerNode,
					$miniBill$elm_fast_dict$Internal$Red,
					lK,
					lV,
					A5($miniBill$elm_fast_dict$Internal$InnerNode, $miniBill$elm_fast_dict$Internal$Black, llK, llV, llLeft, llRight),
					A5($miniBill$elm_fast_dict$Internal$InnerNode, $miniBill$elm_fast_dict$Internal$Black, key, value, lRight, right));
			} else {
				return A5($miniBill$elm_fast_dict$Internal$InnerNode, color, key, value, left, right);
			}
		}
	});
var $elm$core$Basics$compare = _Utils_compare;
var $miniBill$elm_fast_dict$FastDict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === 'Leaf') {
			return _Utils_Tuple2(
				A5($miniBill$elm_fast_dict$Internal$InnerNode, $miniBill$elm_fast_dict$Internal$Red, key, value, $miniBill$elm_fast_dict$Internal$Leaf, $miniBill$elm_fast_dict$Internal$Leaf),
				true);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1.$) {
				case 'LT':
					var _v2 = A3($miniBill$elm_fast_dict$FastDict$insertHelp, key, value, nLeft);
					var newLeft = _v2.a;
					var isNew = _v2.b;
					return _Utils_Tuple2(
						A5($miniBill$elm_fast_dict$Internal$balance, nColor, nKey, nValue, newLeft, nRight),
						isNew);
				case 'EQ':
					return _Utils_Tuple2(
						A5($miniBill$elm_fast_dict$Internal$InnerNode, nColor, nKey, value, nLeft, nRight),
						false);
				default:
					var _v3 = A3($miniBill$elm_fast_dict$FastDict$insertHelp, key, value, nRight);
					var newRight = _v3.a;
					var isNew = _v3.b;
					return _Utils_Tuple2(
						A5($miniBill$elm_fast_dict$Internal$balance, nColor, nKey, nValue, nLeft, newRight),
						isNew);
			}
		}
	});
var $elm$core$Tuple$mapFirst = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $miniBill$elm_fast_dict$Internal$setRootBlack = function (dict) {
	if ((dict.$ === 'InnerNode') && (dict.a.$ === 'Red')) {
		var _v1 = dict.a;
		var k = dict.b;
		var v = dict.c;
		var l = dict.d;
		var r = dict.e;
		return A5($miniBill$elm_fast_dict$Internal$InnerNode, $miniBill$elm_fast_dict$Internal$Black, k, v, l, r);
	} else {
		var x = dict;
		return x;
	}
};
var $miniBill$elm_fast_dict$FastDict$insertInner = F3(
	function (key, value, dict) {
		return A2(
			$elm$core$Tuple$mapFirst,
			$miniBill$elm_fast_dict$Internal$setRootBlack,
			A3($miniBill$elm_fast_dict$FastDict$insertHelp, key, value, dict));
	});
var $miniBill$elm_fast_dict$FastDict$insert = F3(
	function (key, value, _v0) {
		var sz = _v0.a;
		var dict = _v0.b;
		var _v1 = A3($miniBill$elm_fast_dict$FastDict$insertInner, key, value, dict);
		var result = _v1.a;
		var isNew = _v1.b;
		return isNew ? A2($miniBill$elm_fast_dict$Internal$Dict, sz + 1, result) : A2($miniBill$elm_fast_dict$Internal$Dict, sz, result);
	});
var $miniBill$elm_fast_dict$Internal$insertHelpNoReplace = F3(
	function (key, value, dict) {
		if (dict.$ === 'Leaf') {
			return $elm$core$Maybe$Just(
				A5($miniBill$elm_fast_dict$Internal$InnerNode, $miniBill$elm_fast_dict$Internal$Red, key, value, $miniBill$elm_fast_dict$Internal$Leaf, $miniBill$elm_fast_dict$Internal$Leaf));
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1.$) {
				case 'LT':
					var _v2 = A3($miniBill$elm_fast_dict$Internal$insertHelpNoReplace, key, value, nLeft);
					if (_v2.$ === 'Just') {
						var newLeft = _v2.a;
						return $elm$core$Maybe$Just(
							A5($miniBill$elm_fast_dict$Internal$balance, nColor, nKey, nValue, newLeft, nRight));
					} else {
						return $elm$core$Maybe$Nothing;
					}
				case 'EQ':
					return $elm$core$Maybe$Nothing;
				default:
					var _v3 = A3($miniBill$elm_fast_dict$Internal$insertHelpNoReplace, key, value, nRight);
					if (_v3.$ === 'Just') {
						var newRight = _v3.a;
						return $elm$core$Maybe$Just(
							A5($miniBill$elm_fast_dict$Internal$balance, nColor, nKey, nValue, nLeft, newRight));
					} else {
						return $elm$core$Maybe$Nothing;
					}
			}
		}
	});
var $miniBill$elm_fast_dict$Internal$insertNoReplace = F3(
	function (key, value, orig) {
		var sz = orig.a;
		var dict = orig.b;
		var _v0 = A3($miniBill$elm_fast_dict$Internal$insertHelpNoReplace, key, value, dict);
		if (_v0.$ === 'Just') {
			var result = _v0.a;
			return A2(
				$miniBill$elm_fast_dict$Internal$Dict,
				sz + 1,
				$miniBill$elm_fast_dict$Internal$setRootBlack(result));
		} else {
			return orig;
		}
	});
var $miniBill$elm_fast_dict$FastDict$union = F2(
	function (t1, t2) {
		var s1 = t1.a;
		var s2 = t2.a;
		return (_Utils_cmp(s1, s2) > 0) ? A3($miniBill$elm_fast_dict$FastDict$foldl, $miniBill$elm_fast_dict$Internal$insertNoReplace, t1, t2) : A3($miniBill$elm_fast_dict$FastDict$foldl, $miniBill$elm_fast_dict$FastDict$insert, t2, t1);
	});
var $lue_bird$elm_state_interface_experimental$Node$interfaceBatch2 = $miniBill$elm_fast_dict$FastDict$union;
var $lue_bird$elm_state_interface_experimental$Node$interfaceBatch = function (interfaces) {
	return A3($elm$core$List$foldl, $lue_bird$elm_state_interface_experimental$Node$interfaceBatch2, $miniBill$elm_fast_dict$FastDict$empty, interfaces);
};
var $lue_bird$elm_state_interface_experimental$Node$StandardOutWrite = function (a) {
	return {$: 'StandardOutWrite', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$standardErrWrite = function (text) {
	return $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle(
		$lue_bird$elm_state_interface_experimental$Node$StandardOutWrite(text));
};
var $author$project$Main$errorInterface = function (message) {
	return $lue_bird$elm_state_interface_experimental$Node$interfaceBatch(
		_List_fromArray(
			[
				$lue_bird$elm_state_interface_experimental$Node$standardErrWrite(message + '\n'),
				$lue_bird$elm_state_interface_experimental$Node$exit(1)
			]));
};
var $miniBill$elm_fast_dict$FastSet$insert = F2(
	function (value, _v0) {
		var set = _v0.a;
		return $miniBill$elm_fast_dict$FastSet$Set(
			A3($miniBill$elm_fast_dict$Internal$insertNoReplace, value, false, set));
	});
var $miniBill$elm_fast_dict$FastSet$fromList = function (list) {
	return A3($elm$core$List$foldl, $miniBill$elm_fast_dict$FastSet$insert, $miniBill$elm_fast_dict$FastSet$empty, list);
};
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 'EQ':
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $lue_bird$elm_state_interface_experimental$Node$HomeDirectoryPathRequest = function (a) {
	return {$: 'HomeDirectoryPathRequest', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$homeDirectoryPathRequest = $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle(
	$lue_bird$elm_state_interface_experimental$Node$HomeDirectoryPathRequest($elm$core$Basics$identity));
var $lue_bird$elm_state_interface_experimental$Node$DirectoryMake = function (a) {
	return {$: 'DirectoryMake', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$DirectorySubPathsRequest = function (a) {
	return {$: 'DirectorySubPathsRequest', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$FileChangeListen = function (a) {
	return {$: 'FileChangeListen', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$FileInfoRequest = function (a) {
	return {$: 'FileInfoRequest', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$FileRemove = function (a) {
	return {$: 'FileRemove', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$FileRequest = function (a) {
	return {$: 'FileRequest', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$FileWrite = function (a) {
	return {$: 'FileWrite', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$HttpRequestListen = function (a) {
	return {$: 'HttpRequestListen', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$HttpRequestSend = function (a) {
	return {$: 'HttpRequestSend', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$HttpResponseSend = function (a) {
	return {$: 'HttpResponseSend', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$LaunchArgumentsRequest = function (a) {
	return {$: 'LaunchArgumentsRequest', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$NullDevicePathRequest = function (a) {
	return {$: 'NullDevicePathRequest', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$ProcessTitleSet = function (a) {
	return {$: 'ProcessTitleSet', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$RandomUnsignedInt32sRequest = function (a) {
	return {$: 'RandomUnsignedInt32sRequest', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$StandardErrWrite = function (a) {
	return {$: 'StandardErrWrite', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$StandardInListen = function (a) {
	return {$: 'StandardInListen', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$StandardInRawListen = function (a) {
	return {$: 'StandardInRawListen', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$SubProcessSpawn = function (a) {
	return {$: 'SubProcessSpawn', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$SubProcessStandardInWrite = function (a) {
	return {$: 'SubProcessStandardInWrite', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$TerminalSizeChangeListen = function (a) {
	return {$: 'TerminalSizeChangeListen', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$TerminalSizeRequest = function (a) {
	return {$: 'TerminalSizeRequest', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$TimeOnce = function (a) {
	return {$: 'TimeOnce', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$TimePeriodicallyListen = function (a) {
	return {$: 'TimePeriodicallyListen', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$TimePosixRequest = function (a) {
	return {$: 'TimePosixRequest', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$TimezoneNameRequest = function (a) {
	return {$: 'TimezoneNameRequest', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$TimezoneOffsetRequest = function (a) {
	return {$: 'TimezoneOffsetRequest', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$WorkingDirectoryPathRequest = function (a) {
	return {$: 'WorkingDirectoryPathRequest', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$interfaceSingleFutureMap = F2(
	function (futureChange, interfaceSingle) {
		switch (interfaceSingle.$) {
			case 'HttpRequestSend':
				var send = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$HttpRequestSend(
					{
						bodyAsciiString: send.bodyAsciiString,
						headers: send.headers,
						method: send.method,
						on: function (responseBytes) {
							return futureChange(
								send.on(responseBytes));
						},
						url: send.url
					});
			case 'HttpRequestListen':
				var listen = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$HttpRequestListen(
					{
						on: function (request) {
							return futureChange(
								listen.on(request));
						},
						portNumber: listen.portNumber
					});
			case 'HttpResponseSend':
				var send = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$HttpResponseSend(send);
			case 'TimePosixRequest':
				var requestTimeNow = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$TimePosixRequest(
					function (event) {
						return futureChange(
							requestTimeNow(event));
					});
			case 'TimezoneOffsetRequest':
				var requestTimezone = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$TimezoneOffsetRequest(
					function (event) {
						return futureChange(
							requestTimezone(event));
					});
			case 'TimezoneNameRequest':
				var requestTimezoneName = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$TimezoneNameRequest(
					function (event) {
						return futureChange(
							requestTimezoneName(event));
					});
			case 'TimeOnce':
				var once = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$TimeOnce(
					{
						on: function (event) {
							return futureChange(
								once.on(event));
						},
						pointInTime: once.pointInTime
					});
			case 'RandomUnsignedInt32sRequest':
				var request = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$RandomUnsignedInt32sRequest(
					{
						count: request.count,
						on: function (ints) {
							return futureChange(
								request.on(ints));
						}
					});
			case 'TimePeriodicallyListen':
				var periodicallyListen = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$TimePeriodicallyListen(
					{
						intervalDurationMilliSeconds: periodicallyListen.intervalDurationMilliSeconds,
						on: function (posix) {
							return futureChange(
								periodicallyListen.on(posix));
						}
					});
			case 'Exit':
				var code = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$Exit(code);
			case 'DirectoryMake':
				var make = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$DirectoryMake(
					{
						on: function (result) {
							return futureChange(
								make.on(result));
						},
						path: make.path
					});
			case 'FileRemove':
				var path = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$FileRemove(path);
			case 'FileWrite':
				var write = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$FileWrite(
					{
						contentAsciiString: write.contentAsciiString,
						on: function (result) {
							return futureChange(
								write.on(result));
						},
						path: write.path
					});
			case 'FileRequest':
				var request = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$FileRequest(
					{
						on: function (content) {
							return futureChange(
								request.on(content));
						},
						path: request.path
					});
			case 'FileChangeListen':
				var listen = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$FileChangeListen(
					{
						on: function (fileChange) {
							return futureChange(
								listen.on(fileChange));
						},
						path: listen.path
					});
			case 'FileInfoRequest':
				var request = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$FileInfoRequest(
					{
						on: function (info) {
							return futureChange(
								request.on(info));
						},
						path: request.path
					});
			case 'DirectorySubPathsRequest':
				var request = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$DirectorySubPathsRequest(
					{
						on: function (subNames) {
							return futureChange(
								request.on(subNames));
						},
						path: request.path
					});
			case 'WorkingDirectoryPathRequest':
				var on = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$WorkingDirectoryPathRequest(
					function (path) {
						return futureChange(
							on(path));
					});
			case 'HomeDirectoryPathRequest':
				var on = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$HomeDirectoryPathRequest(
					function (path) {
						return futureChange(
							on(path));
					});
			case 'NullDevicePathRequest':
				var on = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$NullDevicePathRequest(
					function (path) {
						return futureChange(
							on(path));
					});
			case 'LaunchArgumentsRequest':
				var on = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$LaunchArgumentsRequest(
					function (_arguments) {
						return futureChange(
							on(_arguments));
					});
			case 'EnvironmentVariablesRequest':
				var on = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$EnvironmentVariablesRequest(
					function (environmentVariables) {
						return futureChange(
							on(environmentVariables));
					});
			case 'TerminalSizeRequest':
				var on = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$TerminalSizeRequest(
					function (size) {
						return futureChange(
							on(size));
					});
			case 'TerminalSizeChangeListen':
				var on = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$TerminalSizeChangeListen(
					function (size) {
						return futureChange(
							on(size));
					});
			case 'ProcessTitleSet':
				var newTitle = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$ProcessTitleSet(newTitle);
			case 'StandardOutWrite':
				var text = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$StandardOutWrite(text);
			case 'StandardErrWrite':
				var text = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$StandardErrWrite(text);
			case 'StandardInListen':
				var on = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$StandardInListen(
					function (size) {
						return futureChange(
							on(size));
					});
			case 'StandardInRawListen':
				var on = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$StandardInRawListen(
					function (size) {
						return futureChange(
							on(size));
					});
			case 'SubProcessSpawn':
				var spawn = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$SubProcessSpawn(
					{
						_arguments: spawn._arguments,
						command: spawn.command,
						environmentVariables: spawn.environmentVariables,
						on: function (event) {
							return futureChange(
								spawn.on(event));
						},
						workingDirectoryPath: spawn.workingDirectoryPath
					});
			default:
				var write = interfaceSingle.a;
				return $lue_bird$elm_state_interface_experimental$Node$SubProcessStandardInWrite(write);
		}
	});
var $miniBill$elm_fast_dict$FastDict$mapInner = F2(
	function (func, dict) {
		if (dict.$ === 'Leaf') {
			return $miniBill$elm_fast_dict$Internal$Leaf;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			return A5(
				$miniBill$elm_fast_dict$Internal$InnerNode,
				color,
				key,
				A2(func, key, value),
				A2($miniBill$elm_fast_dict$FastDict$mapInner, func, left),
				A2($miniBill$elm_fast_dict$FastDict$mapInner, func, right));
		}
	});
var $miniBill$elm_fast_dict$FastDict$map = F2(
	function (func, _v0) {
		var sz = _v0.a;
		var dict = _v0.b;
		return A2(
			$miniBill$elm_fast_dict$Internal$Dict,
			sz,
			A2($miniBill$elm_fast_dict$FastDict$mapInner, func, dict));
	});
var $lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap = F2(
	function (futureChange, _interface) {
		return A2(
			$miniBill$elm_fast_dict$FastDict$map,
			F2(
				function (_v0, interfaceSingle) {
					return A2($lue_bird$elm_state_interface_experimental$Node$interfaceSingleFutureMap, futureChange, interfaceSingle);
				}),
			_interface);
	});
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$bytes$Bytes$Encode$getWidth = function (builder) {
	switch (builder.$) {
		case 'I8':
			return 1;
		case 'I16':
			return 2;
		case 'I32':
			return 4;
		case 'U8':
			return 1;
		case 'U16':
			return 2;
		case 'U32':
			return 4;
		case 'F32':
			return 4;
		case 'F64':
			return 8;
		case 'Seq':
			var w = builder.a;
			return w;
		case 'Utf8':
			var w = builder.a;
			return w;
		default:
			var bs = builder.a;
			return _Bytes_width(bs);
	}
};
var $elm$bytes$Bytes$LE = {$: 'LE'};
var $elm$bytes$Bytes$Encode$write = F3(
	function (builder, mb, offset) {
		switch (builder.$) {
			case 'I8':
				var n = builder.a;
				return A3(_Bytes_write_i8, mb, offset, n);
			case 'I16':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_i16,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'I32':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_i32,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'U8':
				var n = builder.a;
				return A3(_Bytes_write_u8, mb, offset, n);
			case 'U16':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_u16,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'U32':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_u32,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'F32':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_f32,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'F64':
				var e = builder.a;
				var n = builder.b;
				return A4(
					_Bytes_write_f64,
					mb,
					offset,
					n,
					_Utils_eq(e, $elm$bytes$Bytes$LE));
			case 'Seq':
				var bs = builder.b;
				return A3($elm$bytes$Bytes$Encode$writeSequence, bs, mb, offset);
			case 'Utf8':
				var s = builder.b;
				return A3(_Bytes_write_string, mb, offset, s);
			default:
				var bs = builder.a;
				return A3(_Bytes_write_bytes, mb, offset, bs);
		}
	});
var $elm$bytes$Bytes$Encode$writeSequence = F3(
	function (builders, mb, offset) {
		writeSequence:
		while (true) {
			if (!builders.b) {
				return offset;
			} else {
				var b = builders.a;
				var bs = builders.b;
				var $temp$builders = bs,
					$temp$mb = mb,
					$temp$offset = A3($elm$bytes$Bytes$Encode$write, b, mb, offset);
				builders = $temp$builders;
				mb = $temp$mb;
				offset = $temp$offset;
				continue writeSequence;
			}
		}
	});
var $elm$bytes$Bytes$Decode$decode = F2(
	function (_v0, bs) {
		var decoder = _v0.a;
		return A2(_Bytes_decode, decoder, bs);
	});
var $elm$json$Json$Decode$decodeString = _Json_runOnString;
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$project_metadata_utils$Elm$Project$Application = function (a) {
	return {$: 'Application', a: a};
};
var $elm$project_metadata_utils$Elm$Project$Package = function (a) {
	return {$: 'Package', a: a};
};
var $elm$project_metadata_utils$Elm$Project$ApplicationInfo = F6(
	function (elm, dirs, depsDirect, depsIndirect, testDepsDirect, testDepsIndirect) {
		return {depsDirect: depsDirect, depsIndirect: depsIndirect, dirs: dirs, elm: elm, testDepsDirect: testDepsDirect, testDepsIndirect: testDepsIndirect};
	});
var $elm$json$Json$Decode$field = _Json_decodeField;
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $elm$json$Json$Decode$fail = _Json_fail;
var $elm$project_metadata_utils$Elm$Version$Version = F3(
	function (a, b, c) {
		return {$: 'Version', a: a, b: b, c: c};
	});
var $elm$core$Basics$ge = _Utils_ge;
var $elm$project_metadata_utils$Elm$Version$checkNumbers = F3(
	function (major, minor, patch) {
		return ((major >= 0) && ((minor >= 0) && (patch >= 0))) ? $elm$core$Maybe$Just(
			A3($elm$project_metadata_utils$Elm$Version$Version, major, minor, patch)) : $elm$core$Maybe$Nothing;
	});
var $elm$core$String$toInt = _String_toInt;
var $elm$project_metadata_utils$Elm$Version$fromString = function (string) {
	var _v0 = A2(
		$elm$core$List$map,
		$elm$core$String$toInt,
		A2($elm$core$String$split, '.', string));
	if ((((((_v0.b && (_v0.a.$ === 'Just')) && _v0.b.b) && (_v0.b.a.$ === 'Just')) && _v0.b.b.b) && (_v0.b.b.a.$ === 'Just')) && (!_v0.b.b.b.b)) {
		var major = _v0.a.a;
		var _v1 = _v0.b;
		var minor = _v1.a.a;
		var _v2 = _v1.b;
		var patch = _v2.a.a;
		return A3($elm$project_metadata_utils$Elm$Version$checkNumbers, major, minor, patch);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$project_metadata_utils$Elm$Version$decoderHelp = function (string) {
	var _v0 = $elm$project_metadata_utils$Elm$Version$fromString(string);
	if (_v0.$ === 'Just') {
		var version = _v0.a;
		return $elm$json$Json$Decode$succeed(version);
	} else {
		return $elm$json$Json$Decode$fail('I need a valid version like \"2.0.1\"');
	}
};
var $elm$json$Json$Decode$string = _Json_decodeString;
var $elm$project_metadata_utils$Elm$Version$decoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Version$decoderHelp, $elm$json$Json$Decode$string);
var $elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
var $elm$project_metadata_utils$Elm$Package$Name = F2(
	function (a, b) {
		return {$: 'Name', a: a, b: b};
	});
var $elm$core$String$any = _String_any;
var $elm$core$String$contains = _String_contains;
var $elm$project_metadata_utils$Elm$Package$isBadChar = function (_char) {
	return $elm$core$Char$isUpper(_char) || (_Utils_eq(
		_char,
		_Utils_chr('.')) || _Utils_eq(
		_char,
		_Utils_chr('_')));
};
var $elm$core$Basics$not = _Basics_not;
var $elm$core$String$startsWith = _String_startsWith;
var $elm$project_metadata_utils$Elm$Package$isBadProjectName = function (project) {
	var _v0 = $elm$core$String$uncons(project);
	if (_v0.$ === 'Nothing') {
		return true;
	} else {
		var _v1 = _v0.a;
		var c = _v1.a;
		return A2($elm$core$String$contains, '--', project) || (A2($elm$core$String$any, $elm$project_metadata_utils$Elm$Package$isBadChar, project) || (A2($elm$core$String$startsWith, '-', project) || (!$elm$core$Char$isLower(c))));
	}
};
var $elm$project_metadata_utils$Elm$Package$fromString = function (string) {
	var _v0 = A2($elm$core$String$split, '/', string);
	if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
		var author = _v0.a;
		var _v1 = _v0.b;
		var project = _v1.a;
		return $elm$project_metadata_utils$Elm$Package$isBadProjectName(project) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
			A2($elm$project_metadata_utils$Elm$Package$Name, author, project));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$project_metadata_utils$Elm$Project$verifyDepNames = F2(
	function (revDeps, pairs) {
		verifyDepNames:
		while (true) {
			if (!pairs.b) {
				return $elm$json$Json$Decode$succeed(
					$elm$core$List$reverse(revDeps));
			} else {
				var _v1 = pairs.a;
				var key = _v1.a;
				var con = _v1.b;
				var otherPairs = pairs.b;
				var _v2 = $elm$project_metadata_utils$Elm$Package$fromString(key);
				if (_v2.$ === 'Just') {
					var pkg = _v2.a;
					var $temp$revDeps = A2(
						$elm$core$List$cons,
						_Utils_Tuple2(pkg, con),
						revDeps),
						$temp$pairs = otherPairs;
					revDeps = $temp$revDeps;
					pairs = $temp$pairs;
					continue verifyDepNames;
				} else {
					return $elm$json$Json$Decode$fail('\"' + (key + '\" is not a valid package name.'));
				}
			}
		}
	});
var $elm$project_metadata_utils$Elm$Project$depsDecoder = function (constraintDecoder) {
	return A2(
		$elm$json$Json$Decode$andThen,
		$elm$project_metadata_utils$Elm$Project$verifyDepNames(_List_Nil),
		$elm$json$Json$Decode$keyValuePairs(constraintDecoder));
};
var $elm$json$Json$Decode$list = _Json_decodeList;
var $elm$json$Json$Decode$map6 = _Json_map6;
var $elm$project_metadata_utils$Elm$Project$applicationDecoder = A7(
	$elm$json$Json$Decode$map6,
	$elm$project_metadata_utils$Elm$Project$ApplicationInfo,
	A2($elm$json$Json$Decode$field, 'elm-version', $elm$project_metadata_utils$Elm$Version$decoder),
	A2(
		$elm$json$Json$Decode$field,
		'source-directories',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['dependencies', 'direct']),
		$elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Version$decoder)),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['dependencies', 'indirect']),
		$elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Version$decoder)),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['test-dependencies', 'direct']),
		$elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Version$decoder)),
	A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['test-dependencies', 'indirect']),
		$elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Version$decoder)));
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$project_metadata_utils$Elm$Project$PackageInfo = F8(
	function (name, summary, license, version, exposed, deps, testDeps, elm) {
		return {deps: deps, elm: elm, exposed: exposed, license: license, name: name, summary: summary, testDeps: testDeps, version: version};
	});
var $elm$project_metadata_utils$Elm$Constraint$Constraint = F4(
	function (a, b, c, d) {
		return {$: 'Constraint', a: a, b: b, c: c, d: d};
	});
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (maybeValue.$ === 'Just') {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$project_metadata_utils$Elm$Version$compare = F2(
	function (_v0, _v1) {
		var major1 = _v0.a;
		var minor1 = _v0.b;
		var patch1 = _v0.c;
		var major2 = _v1.a;
		var minor2 = _v1.b;
		var patch2 = _v1.c;
		var _v2 = A2($elm$core$Basics$compare, major1, major2);
		switch (_v2.$) {
			case 'LT':
				return $elm$core$Basics$LT;
			case 'GT':
				return $elm$core$Basics$GT;
			default:
				var _v3 = A2($elm$core$Basics$compare, minor1, minor2);
				switch (_v3.$) {
					case 'LT':
						return $elm$core$Basics$LT;
					case 'EQ':
						return A2($elm$core$Basics$compare, patch1, patch2);
					default:
						return $elm$core$Basics$GT;
				}
		}
	});
var $elm$project_metadata_utils$Elm$Constraint$checkConstraint = function (constraint) {
	var lower = constraint.a;
	var upper = constraint.d;
	var _v0 = A2($elm$project_metadata_utils$Elm$Version$compare, lower, upper);
	switch (_v0.$) {
		case 'LT':
			return $elm$core$Maybe$Just(constraint);
		case 'EQ':
			return $elm$core$Maybe$Just(constraint);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$Maybe$map4 = F5(
	function (func, ma, mb, mc, md) {
		if (ma.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				if (mc.$ === 'Nothing') {
					return $elm$core$Maybe$Nothing;
				} else {
					var c = mc.a;
					if (md.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var d = md.a;
						return $elm$core$Maybe$Just(
							A4(func, a, b, c, d));
					}
				}
			}
		}
	});
var $elm$project_metadata_utils$Elm$Constraint$LessOrEq = {$: 'LessOrEq'};
var $elm$project_metadata_utils$Elm$Constraint$LessThan = {$: 'LessThan'};
var $elm$project_metadata_utils$Elm$Constraint$opFromString = function (op) {
	switch (op) {
		case '<':
			return $elm$core$Maybe$Just($elm$project_metadata_utils$Elm$Constraint$LessThan);
		case '<=':
			return $elm$core$Maybe$Just($elm$project_metadata_utils$Elm$Constraint$LessOrEq);
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $elm$project_metadata_utils$Elm$Constraint$fromString = function (string) {
	var _v0 = A2($elm$core$String$split, ' ', string);
	if ((((((_v0.b && _v0.b.b) && _v0.b.b.b) && (_v0.b.b.a === 'v')) && _v0.b.b.b.b) && _v0.b.b.b.b.b) && (!_v0.b.b.b.b.b.b)) {
		var lower = _v0.a;
		var _v1 = _v0.b;
		var lop = _v1.a;
		var _v2 = _v1.b;
		var _v3 = _v2.b;
		var uop = _v3.a;
		var _v4 = _v3.b;
		var upper = _v4.a;
		return A2(
			$elm$core$Maybe$andThen,
			$elm$project_metadata_utils$Elm$Constraint$checkConstraint,
			A5(
				$elm$core$Maybe$map4,
				$elm$project_metadata_utils$Elm$Constraint$Constraint,
				$elm$project_metadata_utils$Elm$Version$fromString(lower),
				$elm$project_metadata_utils$Elm$Constraint$opFromString(lop),
				$elm$project_metadata_utils$Elm$Constraint$opFromString(uop),
				$elm$project_metadata_utils$Elm$Version$fromString(upper)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$project_metadata_utils$Elm$Constraint$decoderHelp = function (string) {
	var _v0 = $elm$project_metadata_utils$Elm$Constraint$fromString(string);
	if (_v0.$ === 'Just') {
		var constraint = _v0.a;
		return $elm$json$Json$Decode$succeed(constraint);
	} else {
		return $elm$json$Json$Decode$fail('I need a valid constraint like \"1.0.0 <= v < 2.0.0\"');
	}
};
var $elm$project_metadata_utils$Elm$Constraint$decoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Constraint$decoderHelp, $elm$json$Json$Decode$string);
var $elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$core$Dict$Black = {$: 'Black'};
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = {$: 'Red'};
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1.$) {
				case 'LT':
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 'EQ':
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $elm$project_metadata_utils$Elm$License$License = F2(
	function (a, b) {
		return {$: 'License', a: a, b: b};
	});
var $elm$project_metadata_utils$Elm$License$osiApprovedSpdxLicenses = _List_fromArray(
	[
		A2($elm$project_metadata_utils$Elm$License$License, 'AFL-1.1', 'Academic Free License v1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'AFL-1.2', 'Academic Free License v1.2'),
		A2($elm$project_metadata_utils$Elm$License$License, 'AFL-2.0', 'Academic Free License v2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'AFL-2.1', 'Academic Free License v2.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'AFL-3.0', 'Academic Free License v3.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'APL-1.0', 'Adaptive Public License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Apache-1.1', 'Apache License 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Apache-2.0', 'Apache License 2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'APSL-1.0', 'Apple Public Source License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'APSL-1.1', 'Apple Public Source License 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'APSL-1.2', 'Apple Public Source License 1.2'),
		A2($elm$project_metadata_utils$Elm$License$License, 'APSL-2.0', 'Apple Public Source License 2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Artistic-1.0', 'Artistic License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Artistic-1.0-Perl', 'Artistic License 1.0 (Perl)'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Artistic-1.0-cl8', 'Artistic License 1.0 w/clause 8'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Artistic-2.0', 'Artistic License 2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'AAL', 'Attribution Assurance License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'BSL-1.0', 'Boost Software License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'BSD-2-Clause', 'BSD 2-clause \"Simplified\" License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'BSD-3-Clause', 'BSD 3-clause \"New\" or \"Revised\" License'),
		A2($elm$project_metadata_utils$Elm$License$License, '0BSD', 'BSD Zero Clause License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'CECILL-2.1', 'CeCILL Free Software License Agreement v2.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'CNRI-Python', 'CNRI Python License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'CDDL-1.0', 'Common Development and Distribution License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'CPAL-1.0', 'Common Public Attribution License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'CPL-1.0', 'Common Public License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'CATOSL-1.1', 'Computer Associates Trusted Open Source License 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'CUA-OPL-1.0', 'CUA Office Public License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'EPL-1.0', 'Eclipse Public License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'ECL-1.0', 'Educational Community License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'ECL-2.0', 'Educational Community License v2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'EFL-1.0', 'Eiffel Forum License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'EFL-2.0', 'Eiffel Forum License v2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Entessa', 'Entessa Public License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'EUDatagrid', 'EU DataGrid Software License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'EUPL-1.1', 'European Union Public License 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Fair', 'Fair License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Frameworx-1.0', 'Frameworx Open License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'AGPL-3.0', 'GNU Affero General Public License v3.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'GPL-2.0', 'GNU General Public License v2.0 only'),
		A2($elm$project_metadata_utils$Elm$License$License, 'GPL-3.0', 'GNU General Public License v3.0 only'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LGPL-2.1', 'GNU Lesser General Public License v2.1 only'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LGPL-3.0', 'GNU Lesser General Public License v3.0 only'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LGPL-2.0', 'GNU Library General Public License v2 only'),
		A2($elm$project_metadata_utils$Elm$License$License, 'HPND', 'Historic Permission Notice and Disclaimer'),
		A2($elm$project_metadata_utils$Elm$License$License, 'IPL-1.0', 'IBM Public License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Intel', 'Intel Open Source License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'IPA', 'IPA Font License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'ISC', 'ISC License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LPPL-1.3c', 'LaTeX Project Public License v1.3c'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LiLiQ-P-1.1', 'Licence Libre du Québec – Permissive version 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LiLiQ-Rplus-1.1', 'Licence Libre du Québec – Réciprocité forte version 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LiLiQ-R-1.1', 'Licence Libre du Québec – Réciprocité version 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LPL-1.02', 'Lucent Public License v1.02'),
		A2($elm$project_metadata_utils$Elm$License$License, 'LPL-1.0', 'Lucent Public License Version 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'MS-PL', 'Microsoft Public License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'MS-RL', 'Microsoft Reciprocal License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'MirOS', 'MirOS Licence'),
		A2($elm$project_metadata_utils$Elm$License$License, 'MIT', 'MIT License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Motosoto', 'Motosoto License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'MPL-1.0', 'Mozilla Public License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'MPL-1.1', 'Mozilla Public License 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'MPL-2.0', 'Mozilla Public License 2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'MPL-2.0-no-copyleft-exception', 'Mozilla Public License 2.0 (no copyleft exception)'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Multics', 'Multics License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'NASA-1.3', 'NASA Open Source Agreement 1.3'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Naumen', 'Naumen Public License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'NGPL', 'Nethack General Public License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Nokia', 'Nokia Open Source License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'NPOSL-3.0', 'Non-Profit Open Software License 3.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'NTP', 'NTP License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'OCLC-2.0', 'OCLC Research Public License 2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'OGTSL', 'Open Group Test Suite License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'OSL-1.0', 'Open Software License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'OSL-2.0', 'Open Software License 2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'OSL-2.1', 'Open Software License 2.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'OSL-3.0', 'Open Software License 3.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'OSET-PL-2.1', 'OSET Public License version 2.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'PHP-3.0', 'PHP License v3.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'PostgreSQL', 'PostgreSQL License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Python-2.0', 'Python License 2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'QPL-1.0', 'Q Public License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'RPSL-1.0', 'RealNetworks Public Source License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'RPL-1.1', 'Reciprocal Public License 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'RPL-1.5', 'Reciprocal Public License 1.5'),
		A2($elm$project_metadata_utils$Elm$License$License, 'RSCPL', 'Ricoh Source Code Public License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'OFL-1.1', 'SIL Open Font License 1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'SimPL-2.0', 'Simple Public License 2.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Sleepycat', 'Sleepycat License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'SISSL', 'Sun Industry Standards Source License v1.1'),
		A2($elm$project_metadata_utils$Elm$License$License, 'SPL-1.0', 'Sun Public License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Watcom-1.0', 'Sybase Open Watcom Public License 1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'UPL-1.0', 'Universal Permissive License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'NCSA', 'University of Illinois/NCSA Open Source License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'VSL-1.0', 'Vovida Software License v1.0'),
		A2($elm$project_metadata_utils$Elm$License$License, 'W3C', 'W3C Software Notice and License (2002-12-31)'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Xnet', 'X.Net License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'Zlib', 'zlib License'),
		A2($elm$project_metadata_utils$Elm$License$License, 'ZPL-2.0', 'Zope Public License 2.0')
	]);
var $elm$project_metadata_utils$Elm$License$spdxDict = $elm$core$Dict$fromList(
	A2(
		$elm$core$List$map,
		function (license) {
			var abbr = license.a;
			return _Utils_Tuple2(abbr, license);
		},
		$elm$project_metadata_utils$Elm$License$osiApprovedSpdxLicenses));
var $elm$project_metadata_utils$Elm$License$fromString = function (string) {
	return A2($elm$core$Dict$get, string, $elm$project_metadata_utils$Elm$License$spdxDict);
};
var $elm$project_metadata_utils$Elm$License$decoderHelp = function (string) {
	var _v0 = $elm$project_metadata_utils$Elm$License$fromString(string);
	if (_v0.$ === 'Just') {
		var license = _v0.a;
		return $elm$json$Json$Decode$succeed(license);
	} else {
		return $elm$json$Json$Decode$fail('I need an OSI approved license in SPDX format <https://spdx.org/licenses/>');
	}
};
var $elm$project_metadata_utils$Elm$License$decoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$License$decoderHelp, $elm$json$Json$Decode$string);
var $elm$project_metadata_utils$Elm$Package$decoderHelp = function (string) {
	var _v0 = $elm$project_metadata_utils$Elm$Package$fromString(string);
	if (_v0.$ === 'Just') {
		var name = _v0.a;
		return $elm$json$Json$Decode$succeed(name);
	} else {
		return $elm$json$Json$Decode$fail('I need a valid package name like \"elm/core\"');
	}
};
var $elm$project_metadata_utils$Elm$Package$decoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Package$decoderHelp, $elm$json$Json$Decode$string);
var $elm$project_metadata_utils$Elm$Project$ExposedDict = function (a) {
	return {$: 'ExposedDict', a: a};
};
var $elm$project_metadata_utils$Elm$Project$ExposedList = function (a) {
	return {$: 'ExposedList', a: a};
};
var $elm$core$String$length = _String_length;
var $elm$project_metadata_utils$Elm$Project$checkHeaders = function (dict) {
	checkHeaders:
	while (true) {
		if (!dict.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v1 = dict.a;
			var header = _v1.a;
			var others = dict.b;
			if ($elm$core$String$length(header) < 20) {
				var $temp$dict = others;
				dict = $temp$dict;
				continue checkHeaders;
			} else {
				return $elm$core$Maybe$Just(header);
			}
		}
	}
};
var $elm$project_metadata_utils$Elm$Project$checkExposedDict = function (dict) {
	var _v0 = $elm$project_metadata_utils$Elm$Project$checkHeaders(dict);
	if (_v0.$ === 'Nothing') {
		return $elm$json$Json$Decode$succeed(dict);
	} else {
		var badHeader = _v0.a;
		return $elm$json$Json$Decode$fail('The \"' + (badHeader + '\" header is too long. Twenty characters max!'));
	}
};
var $elm$project_metadata_utils$Elm$Module$Name = function (a) {
	return {$: 'Name', a: a};
};
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $elm$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			$elm$core$List$any,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, isOkay),
			list);
	});
var $elm$project_metadata_utils$Elm$Module$isInner = function (_char) {
	return $elm$core$Char$isAlphaNum(_char) || _Utils_eq(
		_char,
		_Utils_chr('_'));
};
var $elm$project_metadata_utils$Elm$Module$isGoodChunk = function (chunk) {
	var _v0 = $elm$core$String$uncons(chunk);
	if (_v0.$ === 'Nothing') {
		return false;
	} else {
		var _v1 = _v0.a;
		var _char = _v1.a;
		var rest = _v1.b;
		return $elm$core$Char$isUpper(_char) && A2($elm$core$String$all, $elm$project_metadata_utils$Elm$Module$isInner, rest);
	}
};
var $elm$project_metadata_utils$Elm$Module$fromString = function (string) {
	return A2(
		$elm$core$List$all,
		$elm$project_metadata_utils$Elm$Module$isGoodChunk,
		A2($elm$core$String$split, '.', string)) ? $elm$core$Maybe$Just(
		$elm$project_metadata_utils$Elm$Module$Name(string)) : $elm$core$Maybe$Nothing;
};
var $elm$project_metadata_utils$Elm$Module$decoderHelp = function (string) {
	var _v0 = $elm$project_metadata_utils$Elm$Module$fromString(string);
	if (_v0.$ === 'Just') {
		var name = _v0.a;
		return $elm$json$Json$Decode$succeed(name);
	} else {
		return $elm$json$Json$Decode$fail('I need a valid module name like \"Json.Decode\"');
	}
};
var $elm$project_metadata_utils$Elm$Module$decoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Module$decoderHelp, $elm$json$Json$Decode$string);
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $elm$project_metadata_utils$Elm$Project$exposedDecoder = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$map,
			$elm$project_metadata_utils$Elm$Project$ExposedList,
			$elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Module$decoder)),
			A2(
			$elm$json$Json$Decode$map,
			$elm$project_metadata_utils$Elm$Project$ExposedDict,
			A2(
				$elm$json$Json$Decode$andThen,
				$elm$project_metadata_utils$Elm$Project$checkExposedDict,
				$elm$json$Json$Decode$keyValuePairs(
					$elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Module$decoder))))
		]));
var $elm$json$Json$Decode$map8 = _Json_map8;
var $elm$project_metadata_utils$Elm$Project$summaryCheck = function (summary) {
	return ($elm$core$String$length(summary) < 80) ? $elm$json$Json$Decode$succeed(summary) : $elm$json$Json$Decode$fail('The \"summary\" field must have fewer than 80 characters.');
};
var $elm$project_metadata_utils$Elm$Project$summaryDecoder = A2($elm$json$Json$Decode$andThen, $elm$project_metadata_utils$Elm$Project$summaryCheck, $elm$json$Json$Decode$string);
var $elm$project_metadata_utils$Elm$Project$packageDecoder = A9(
	$elm$json$Json$Decode$map8,
	$elm$project_metadata_utils$Elm$Project$PackageInfo,
	A2($elm$json$Json$Decode$field, 'name', $elm$project_metadata_utils$Elm$Package$decoder),
	A2($elm$json$Json$Decode$field, 'summary', $elm$project_metadata_utils$Elm$Project$summaryDecoder),
	A2($elm$json$Json$Decode$field, 'license', $elm$project_metadata_utils$Elm$License$decoder),
	A2($elm$json$Json$Decode$field, 'version', $elm$project_metadata_utils$Elm$Version$decoder),
	A2($elm$json$Json$Decode$field, 'exposed-modules', $elm$project_metadata_utils$Elm$Project$exposedDecoder),
	A2(
		$elm$json$Json$Decode$field,
		'dependencies',
		$elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Constraint$decoder)),
	A2(
		$elm$json$Json$Decode$field,
		'test-dependencies',
		$elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Constraint$decoder)),
	A2($elm$json$Json$Decode$field, 'elm-version', $elm$project_metadata_utils$Elm$Constraint$decoder));
var $elm$project_metadata_utils$Elm$Project$decoderHelp = function (tipe) {
	switch (tipe) {
		case 'application':
			return A2($elm$json$Json$Decode$map, $elm$project_metadata_utils$Elm$Project$Application, $elm$project_metadata_utils$Elm$Project$applicationDecoder);
		case 'package':
			return A2($elm$json$Json$Decode$map, $elm$project_metadata_utils$Elm$Project$Package, $elm$project_metadata_utils$Elm$Project$packageDecoder);
		default:
			var other = tipe;
			return $elm$json$Json$Decode$fail('The "type" field must be either "application" or "package", so ' + ('\"' + (other + '\" is not acceptable.')));
	}
};
var $elm$project_metadata_utils$Elm$Project$decoder = A2(
	$elm$json$Json$Decode$andThen,
	$elm$project_metadata_utils$Elm$Project$decoderHelp,
	A2($elm$json$Json$Decode$field, 'type', $elm$json$Json$Decode$string));
var $lue_bird$elm_state_interface_experimental$Node$fileRequest = function (path) {
	return $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle(
		$lue_bird$elm_state_interface_experimental$Node$FileRequest(
			{on: $elm$core$Basics$identity, path: path}));
};
var $elm$bytes$Bytes$Decode$Decoder = function (a) {
	return {$: 'Decoder', a: a};
};
var $elm$bytes$Bytes$Decode$string = function (n) {
	return $elm$bytes$Bytes$Decode$Decoder(
		_Bytes_read_string(n));
};
var $elm$bytes$Bytes$width = _Bytes_width;
var $author$project$Main$nodeElmJsonRequest = A2(
	$lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap,
	function (elmJsonBytesOrError) {
		if (elmJsonBytesOrError.$ === 'Err') {
			var fileReadError = elmJsonBytesOrError.a;
			return $elm$core$Result$Err('elm.json couldn\'t be read because ' + fileReadError.message);
		} else {
			var elmJsonBytes = elmJsonBytesOrError.a;
			var _v1 = A2(
				$elm$bytes$Bytes$Decode$decode,
				$elm$bytes$Bytes$Decode$string(
					$elm$bytes$Bytes$width(elmJsonBytes)),
				elmJsonBytes);
			if (_v1.$ === 'Nothing') {
				return $elm$core$Result$Err('elm.json bytes could not be decoded into UTF-8 String');
			} else {
				var elmJsonString = _v1.a;
				var _v2 = A2($elm$json$Json$Decode$decodeString, $elm$project_metadata_utils$Elm$Project$decoder, elmJsonString);
				if (_v2.$ === 'Err') {
					var jsonDecodeError = _v2.a;
					return $elm$core$Result$Err(
						'elm.json failed to parse due to ' + $elm$json$Json$Decode$errorToString(jsonDecodeError));
				} else {
					var elmJson = _v2.a;
					return $elm$core$Result$Ok(elmJson);
				}
			}
		}
	},
	$lue_bird$elm_state_interface_experimental$Node$fileRequest('elm.json'));
var $author$project$Main$packageSourceDirectoryPath = function (info) {
	return info.elmHomeDirectory + ('/0.19.1/packages/' + (info.packageName + ('/' + (info.packageVersion + '/src'))));
};
var $author$project$Main$Finished = function (a) {
	return {$: 'Finished', a: a};
};
var $stil4m$elm_syntax$Rope$empty = $elm$core$Maybe$Nothing;
var $stil4m$elm_syntax$Elm$Syntax$Declaration$AliasDeclaration = function (a) {
	return {$: 'AliasDeclaration', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Declaration$CustomTypeDeclaration = function (a) {
	return {$: 'CustomTypeDeclaration', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration = function (a) {
	return {$: 'FunctionDeclaration', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Node$Node = F2(
	function (a, b) {
		return {$: 'Node', a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Declaration$PortDeclaration = function (a) {
	return {$: 'PortDeclaration', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Signature$Signature = F2(
	function (name, typeAnnotation) {
		return {name: name, typeAnnotation: typeAnnotation};
	});
var $stil4m$elm_syntax$Elm$Syntax$Node$combine = F3(
	function (f, a, b) {
		var start = a.a.start;
		var end = b.a.end;
		return A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			{end: end, start: start},
			A2(f, a, b));
	});
var $stil4m$elm_syntax$ParserFast$Done = function (a) {
	return {$: 'Done', a: a};
};
var $stil4m$elm_syntax$ParserFast$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $stil4m$elm_syntax$ParserFast$Bad = F2(
	function (a, b) {
		return {$: 'Bad', a: a, b: b};
	});
var $stil4m$elm_syntax$ParserFast$ExpectingAnyChar = F2(
	function (a, b) {
		return {$: 'ExpectingAnyChar', a: a, b: b};
	});
var $stil4m$elm_syntax$ParserFast$Good = F2(
	function (a, b) {
		return {$: 'Good', a: a, b: b};
	});
var $stil4m$elm_syntax$ParserFast$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$core$Basics$isNaN = _Basics_isNaN;
var $stil4m$elm_syntax$Char$Extra$isUtf16Surrogate = function (c) {
	return $elm$core$Basics$isNaN(
		$elm$core$Char$toCode(c));
};
var $stil4m$elm_syntax$ParserFast$charStringIsUtf16HighSurrogate = function (charString) {
	return A2($elm$core$String$any, $stil4m$elm_syntax$Char$Extra$isUtf16Surrogate, charString);
};
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm$core$String$slice = _String_slice;
var $stil4m$elm_syntax$ParserFast$charOrEnd = F2(
	function (offset, string) {
		var actualChar = A3($elm$core$String$slice, offset, offset + 1, string);
		switch (actualChar) {
			case '\n':
				return -2;
			case '':
				return -1;
			default:
				return $stil4m$elm_syntax$ParserFast$charStringIsUtf16HighSurrogate(actualChar) ? (offset + 2) : (offset + 1);
		}
	});
var $stil4m$elm_syntax$ParserFast$skipWhileHelp = F6(
	function (isGood, offset, row, col, src, indent) {
		skipWhileHelp:
		while (true) {
			var actualChar = A3($elm$core$String$slice, offset, offset + 1, src);
			if (A2($elm$core$String$any, isGood, actualChar)) {
				if (actualChar === '\n') {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$src = src,
						$temp$indent = indent;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					continue skipWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$src = src,
						$temp$indent = indent;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					continue skipWhileHelp;
				}
			} else {
				if ($stil4m$elm_syntax$ParserFast$charStringIsUtf16HighSurrogate(actualChar) && A2(
					$elm$core$String$any,
					isGood,
					A3($elm$core$String$slice, offset, offset + 2, src))) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 2,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$src = src,
						$temp$indent = indent;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					continue skipWhileHelp;
				} else {
					return {col: col, indent: indent, offset: offset, row: row, src: src};
				}
			}
		}
	});
var $stil4m$elm_syntax$ParserFast$anyCharFollowedByWhileMap = F2(
	function (consumedStringToRes, afterFirstIsOkay) {
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s) {
				var firstOffset = A2($stil4m$elm_syntax$ParserFast$charOrEnd, s.offset, s.src);
				if (_Utils_eq(firstOffset, -1)) {
					return A2(
						$stil4m$elm_syntax$ParserFast$Bad,
						false,
						A2($stil4m$elm_syntax$ParserFast$ExpectingAnyChar, s.row, s.col));
				} else {
					var s1 = _Utils_eq(firstOffset, -2) ? A6($stil4m$elm_syntax$ParserFast$skipWhileHelp, afterFirstIsOkay, s.offset + 1, s.row + 1, 1, s.src, s.indent) : A6($stil4m$elm_syntax$ParserFast$skipWhileHelp, afterFirstIsOkay, firstOffset, s.row, s.col + 1, s.src, s.indent);
					return A2(
						$stil4m$elm_syntax$ParserFast$Good,
						consumedStringToRes(
							A3($elm$core$String$slice, s.offset, s1.offset, s.src)),
						s1);
				}
			});
	});
var $elm$core$String$cons = _String_cons;
var $stil4m$elm_syntax$ParserFast$loopHelp = F5(
	function (committedSoFar, state, element, reduce, s0) {
		loopHelp:
		while (true) {
			var parseElement = element.a;
			var _v0 = parseElement(s0);
			if (_v0.$ === 'Good') {
				var step = _v0.a;
				var s1 = _v0.b;
				var _v1 = A2(reduce, step, state);
				if (_v1.$ === 'Loop') {
					var newState = _v1.a;
					var $temp$committedSoFar = true,
						$temp$state = newState,
						$temp$element = element,
						$temp$reduce = reduce,
						$temp$s0 = s1;
					committedSoFar = $temp$committedSoFar;
					state = $temp$state;
					element = $temp$element;
					reduce = $temp$reduce;
					s0 = $temp$s0;
					continue loopHelp;
				} else {
					var result = _v1.a;
					return A2($stil4m$elm_syntax$ParserFast$Good, result, s1);
				}
			} else {
				var elementCommitted = _v0.a;
				var x = _v0.b;
				return A2($stil4m$elm_syntax$ParserFast$Bad, committedSoFar || elementCommitted, x);
			}
		}
	});
var $stil4m$elm_syntax$ParserFast$loop = F3(
	function (state, element, reduce) {
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s) {
				return A5($stil4m$elm_syntax$ParserFast$loopHelp, false, state, element, reduce, s);
			});
	});
var $stil4m$elm_syntax$ParserFast$map2WithRange = F3(
	function (func, _v0, _v1) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v2 = parseA(s0);
				if (_v2.$ === 'Bad') {
					var committed = _v2.a;
					var x = _v2.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
				} else {
					var a = _v2.a;
					var s1 = _v2.b;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var x = _v3.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var b = _v3.a;
						var s2 = _v3.b;
						return A2(
							$stil4m$elm_syntax$ParserFast$Good,
							A3(
								func,
								{
									end: {column: s2.col, row: s2.row},
									start: {column: s0.col, row: s0.row}
								},
								a,
								b),
							s2);
					}
				}
			});
	});
var $elm$core$Basics$neq = _Utils_notEqual;
var $stil4m$elm_syntax$ParserFast$ExpectingOneOf = F3(
	function (a, b, c) {
		return {$: 'ExpectingOneOf', a: a, b: b, c: c};
	});
var $stil4m$elm_syntax$ParserFast$oneOf2 = F2(
	function (_v0, _v1) {
		var attemptFirst = _v0.a;
		var attemptSecond = _v1.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s) {
				var _v2 = attemptFirst(s);
				if (_v2.$ === 'Good') {
					var firstGood = _v2;
					return firstGood;
				} else {
					var firstBad = _v2;
					var firstCommitted = firstBad.a;
					var firstX = firstBad.b;
					if (firstCommitted) {
						return firstBad;
					} else {
						var _v3 = attemptSecond(s);
						if (_v3.$ === 'Good') {
							var secondGood = _v3;
							return secondGood;
						} else {
							var secondBad = _v3;
							var secondCommitted = secondBad.a;
							var secondX = secondBad.b;
							return secondCommitted ? secondBad : A2(
								$stil4m$elm_syntax$ParserFast$Bad,
								false,
								A3($stil4m$elm_syntax$ParserFast$ExpectingOneOf, firstX, secondX, _List_Nil));
						}
					}
				}
			});
	});
var $stil4m$elm_syntax$ParserFast$oneOf3 = F3(
	function (_v0, _v1, _v2) {
		var attemptFirst = _v0.a;
		var attemptSecond = _v1.a;
		var attemptThird = _v2.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s) {
				var _v3 = attemptFirst(s);
				if (_v3.$ === 'Good') {
					var firstGood = _v3;
					return firstGood;
				} else {
					var firstBad = _v3;
					var firstCommitted = firstBad.a;
					var firstX = firstBad.b;
					if (firstCommitted) {
						return firstBad;
					} else {
						var _v4 = attemptSecond(s);
						if (_v4.$ === 'Good') {
							var secondGood = _v4;
							return secondGood;
						} else {
							var secondBad = _v4;
							var secondCommitted = secondBad.a;
							var secondX = secondBad.b;
							if (secondCommitted) {
								return secondBad;
							} else {
								var _v5 = attemptThird(s);
								if (_v5.$ === 'Good') {
									var thirdGood = _v5;
									return thirdGood;
								} else {
									var thirdBad = _v5;
									var thirdCommitted = thirdBad.a;
									var thirdX = thirdBad.b;
									return thirdCommitted ? thirdBad : A2(
										$stil4m$elm_syntax$ParserFast$Bad,
										false,
										A3(
											$stil4m$elm_syntax$ParserFast$ExpectingOneOf,
											firstX,
											secondX,
											_List_fromArray(
												[thirdX])));
								}
							}
						}
					}
				}
			});
	});
var $stil4m$elm_syntax$ParserFast$ExpectingSymbol = F3(
	function (a, b, c) {
		return {$: 'ExpectingSymbol', a: a, b: b, c: c};
	});
var $stil4m$elm_syntax$ParserFast$symbol = F2(
	function (str, res) {
		var strLength = $elm$core$String$length(str);
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s) {
				var newOffset = s.offset + strLength;
				return _Utils_eq(
					A3($elm$core$String$slice, s.offset, newOffset, s.src),
					str + '') ? A2(
					$stil4m$elm_syntax$ParserFast$Good,
					res,
					{col: s.col + strLength, indent: s.indent, offset: newOffset, row: s.row, src: s.src}) : A2(
					$stil4m$elm_syntax$ParserFast$Bad,
					false,
					A3($stil4m$elm_syntax$ParserFast$ExpectingSymbol, s.row, s.col, str));
			});
	});
var $stil4m$elm_syntax$ParserFast$pStepCommit = function (pStep) {
	if (pStep.$ === 'Good') {
		var good = pStep;
		return good;
	} else {
		var x = pStep.b;
		return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
	}
};
var $stil4m$elm_syntax$ParserFast$symbolFollowedBy = F2(
	function (str, _v0) {
		var parseNext = _v0.a;
		var strLength = $elm$core$String$length(str);
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s) {
				var newOffset = s.offset + strLength;
				return _Utils_eq(
					A3($elm$core$String$slice, s.offset, newOffset, s.src),
					str + '') ? $stil4m$elm_syntax$ParserFast$pStepCommit(
					parseNext(
						{col: s.col + strLength, indent: s.indent, offset: newOffset, row: s.row, src: s.src})) : A2(
					$stil4m$elm_syntax$ParserFast$Bad,
					false,
					A3($stil4m$elm_syntax$ParserFast$ExpectingSymbol, s.row, s.col, str));
			});
	});
var $stil4m$elm_syntax$ParserFast$while = function (isGood) {
	return $stil4m$elm_syntax$ParserFast$Parser(
		function (s0) {
			var s1 = A6($stil4m$elm_syntax$ParserFast$skipWhileHelp, isGood, s0.offset, s0.row, s0.col, s0.src, s0.indent);
			return A2(
				$stil4m$elm_syntax$ParserFast$Good,
				A3($elm$core$String$slice, s0.offset, s1.offset, s0.src),
				s1);
		});
};
var $stil4m$elm_syntax$ParserFast$nestableMultiCommentMapWithRange = F3(
	function (rangeContentToRes, _v0, _v1) {
		var openChar = _v0.a;
		var openTail = _v0.b;
		var closeChar = _v1.a;
		var closeTail = _v1.b;
		var open = A2($elm$core$String$cons, openChar, openTail);
		var isNotRelevant = function (_char) {
			return (!_Utils_eq(_char, openChar)) && ((!_Utils_eq(_char, closeChar)) && (!$stil4m$elm_syntax$Char$Extra$isUtf16Surrogate(_char)));
		};
		var close = A2($elm$core$String$cons, closeChar, closeTail);
		return A3(
			$stil4m$elm_syntax$ParserFast$map2WithRange,
			F3(
				function (range, afterOpen, contentAfterAfterOpen) {
					return A2(
						rangeContentToRes,
						range,
						_Utils_ap(
							open,
							_Utils_ap(
								afterOpen,
								_Utils_ap(contentAfterAfterOpen, close))));
				}),
			A2(
				$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
				open,
				$stil4m$elm_syntax$ParserFast$while(isNotRelevant)),
			A2(
				$stil4m$elm_syntax$ParserFast$oneOf2,
				A2($stil4m$elm_syntax$ParserFast$symbol, close, ''),
				A3(
					$stil4m$elm_syntax$ParserFast$loop,
					_Utils_Tuple2('', 1),
					A3(
						$stil4m$elm_syntax$ParserFast$oneOf3,
						A2(
							$stil4m$elm_syntax$ParserFast$symbol,
							close,
							_Utils_Tuple2(close, -1)),
						A2(
							$stil4m$elm_syntax$ParserFast$symbol,
							open,
							_Utils_Tuple2(open, 1)),
						A2(
							$stil4m$elm_syntax$ParserFast$anyCharFollowedByWhileMap,
							function (consumed) {
								return _Utils_Tuple2(consumed, 0);
							},
							isNotRelevant)),
					F2(
						function (_v2, _v3) {
							var toAppend = _v2.a;
							var nestingChange = _v2.b;
							var soFarContent = _v3.a;
							var soFarNesting = _v3.b;
							var newNesting = soFarNesting + nestingChange;
							return (!newNesting) ? $stil4m$elm_syntax$ParserFast$Done(soFarContent) : $stil4m$elm_syntax$ParserFast$Loop(
								_Utils_Tuple2(soFarContent + (toAppend + ''), newNesting));
						}))));
	});
var $stil4m$elm_syntax$Elm$Parser$Comments$multiLineCommentNoCheck = A3(
	$stil4m$elm_syntax$ParserFast$nestableMultiCommentMapWithRange,
	$stil4m$elm_syntax$Elm$Syntax$Node$Node,
	_Utils_Tuple2(
		_Utils_chr('{'),
		'-'),
	_Utils_Tuple2(
		_Utils_chr('-'),
		'}'));
var $stil4m$elm_syntax$Elm$Parser$Comments$declarationDocumentation = $stil4m$elm_syntax$Elm$Parser$Comments$multiLineCommentNoCheck;
var $stil4m$elm_syntax$Rope$Branch2 = F2(
	function (a, b) {
		return {$: 'Branch2', a: a, b: b};
	});
var $stil4m$elm_syntax$Rope$filledPrependTo = F2(
	function (right, leftLikelyFilled) {
		if (right.$ === 'Nothing') {
			return $elm$core$Maybe$Just(leftLikelyFilled);
		} else {
			var rightLikelyFilled = right.a;
			return $elm$core$Maybe$Just(
				A2($stil4m$elm_syntax$Rope$Branch2, leftLikelyFilled, rightLikelyFilled));
		}
	});
var $stil4m$elm_syntax$Elm$Parser$Declarations$FunctionDeclarationAfterDocumentation = function (a) {
	return {$: 'FunctionDeclarationAfterDocumentation', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Application = function (a) {
	return {$: 'Application', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$CaseExpression = function (a) {
	return {$: 'CaseExpression', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Expression$ExtendRightByOperation = function (a) {
	return {$: 'ExtendRightByOperation', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Expression$FieldsFirstValue = function (a) {
	return {$: 'FieldsFirstValue', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$IfBlock = F3(
	function (a, b, c) {
		return {$: 'IfBlock', a: a, b: b, c: c};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression = function (a) {
	return {$: 'LambdaExpression', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Infix$Left = {$: 'Left'};
var $stil4m$elm_syntax$Elm$Syntax$Expression$LetDestructuring = F2(
	function (a, b) {
		return {$: 'LetDestructuring', a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$LetExpression = function (a) {
	return {$: 'LetExpression', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$LetFunction = function (a) {
	return {$: 'LetFunction', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr = function (a) {
	return {$: 'ListExpr', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Negation = function (a) {
	return {$: 'Negation', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Infix$Non = {$: 'Non'};
var $stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression = function (a) {
	return {$: 'ParenthesizedExpression', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess = F2(
	function (a, b) {
		return {$: 'RecordAccess', a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr = function (a) {
	return {$: 'RecordExpr', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordUpdateExpression = F2(
	function (a, b) {
		return {$: 'RecordUpdateExpression', a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$RecordUpdateFirstSetter = function (a) {
	return {$: 'RecordUpdateFirstSetter', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Infix$Right = {$: 'Right'};
var $stil4m$elm_syntax$Elm$Syntax$Expression$TupledExpression = function (a) {
	return {$: 'TupledExpression', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Expression$TupledParenthesizedFollowedByRecordAccesses = function (a) {
	return {$: 'TupledParenthesizedFollowedByRecordAccesses', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Expression$TupledTwoOrThree = function (a) {
	return {$: 'TupledTwoOrThree', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$UnitExpr = {$: 'UnitExpr'};
var $stil4m$elm_syntax$Elm$Syntax$Expression$PrefixOperator = function (a) {
	return {$: 'PrefixOperator', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$isAllowedOperatorToken = function (operatorCandidateToValidate) {
	switch (operatorCandidateToValidate) {
		case '==':
			return true;
		case '/=':
			return true;
		case '::':
			return true;
		case '++':
			return true;
		case '+':
			return true;
		case '*':
			return true;
		case '<|':
			return true;
		case '|>':
			return true;
		case '||':
			return true;
		case '<=':
			return true;
		case '>=':
			return true;
		case '|=':
			return true;
		case '|.':
			return true;
		case '//':
			return true;
		case '</>':
			return true;
		case '<?>':
			return true;
		case '^':
			return true;
		case '<<':
			return true;
		case '>>':
			return true;
		case '<':
			return true;
		case '>':
			return true;
		case '/':
			return true;
		case '&&':
			return true;
		case '-':
			return true;
		default:
			return false;
	}
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$isOperatorSymbolChar = function (c) {
	switch (c.valueOf()) {
		case '+':
			return true;
		case '-':
			return true;
		case '/':
			return true;
		case '*':
			return true;
		case '=':
			return true;
		case '.':
			return true;
		case '<':
			return true;
		case '>':
			return true;
		case ':':
			return true;
		case '&':
			return true;
		case '|':
			return true;
		case '^':
			return true;
		case '?':
			return true;
		default:
			return false;
	}
};
var $stil4m$elm_syntax$ParserFast$ExpectingStringSatisfyingPredicate = F2(
	function (a, b) {
		return {$: 'ExpectingStringSatisfyingPredicate', a: a, b: b};
	});
var $stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakAnd2PartUtf16Help = F3(
	function (isGood, offset, src) {
		skipWhileWithoutLinebreakAnd2PartUtf16Help:
		while (true) {
			if (A2(
				$elm$core$String$any,
				isGood,
				A3($elm$core$String$slice, offset, offset + 1, src))) {
				var $temp$isGood = isGood,
					$temp$offset = offset + 1,
					$temp$src = src;
				isGood = $temp$isGood;
				offset = $temp$offset;
				src = $temp$src;
				continue skipWhileWithoutLinebreakAnd2PartUtf16Help;
			} else {
				return offset;
			}
		}
	});
var $stil4m$elm_syntax$ParserFast$whileWithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol = F4(
	function (whileRangeAndContentToRes, whileCharIsOkay, whileResultIsOkay, mandatoryFinalSymbol) {
		var mandatoryFinalSymbolLength = $elm$core$String$length(mandatoryFinalSymbol);
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var s1Offset = A3($stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakAnd2PartUtf16Help, whileCharIsOkay, s0.offset, s0.src);
				var whileContent = A3($elm$core$String$slice, s0.offset, s1Offset, s0.src);
				if (_Utils_eq(
					A3($elm$core$String$slice, s1Offset, s1Offset + mandatoryFinalSymbolLength, s0.src),
					mandatoryFinalSymbol + '') && whileResultIsOkay(whileContent)) {
					var s1Column = s0.col + (s1Offset - s0.offset);
					return A2(
						$stil4m$elm_syntax$ParserFast$Good,
						A2(
							whileRangeAndContentToRes,
							{
								end: {column: s1Column, row: s0.row},
								start: {column: s0.col, row: s0.row}
							},
							whileContent),
						{col: s1Column + mandatoryFinalSymbolLength, indent: s0.indent, offset: s1Offset + mandatoryFinalSymbolLength, row: s0.row, src: s0.src});
				} else {
					return A2(
						$stil4m$elm_syntax$ParserFast$Bad,
						false,
						A2($stil4m$elm_syntax$ParserFast$ExpectingStringSatisfyingPredicate, s0.row, s0.col + 1));
				}
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$allowedPrefixOperatorFollowedByClosingParensOneOf = A4(
	$stil4m$elm_syntax$ParserFast$whileWithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol,
	F2(
		function (operatorRange, operator) {
			return {
				comments: $stil4m$elm_syntax$Rope$empty,
				syntax: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					{
						end: {column: operatorRange.end.column + 1, row: operatorRange.end.row},
						start: {column: operatorRange.start.column - 1, row: operatorRange.start.row}
					},
					$stil4m$elm_syntax$Elm$Syntax$Expression$PrefixOperator(operator))
			};
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$isOperatorSymbolChar,
	$stil4m$elm_syntax$Elm$Parser$Tokens$isAllowedOperatorToken,
	')');
var $stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication = F4(
	function (a, b, c, d) {
		return {$: 'OperatorApplication', a: a, b: b, c: c, d: d};
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$applyExtensionRight = F2(
	function (_v0, leftNode) {
		var operation = _v0.a;
		var leftRange = leftNode.a;
		var rightExpressionNode = operation.expression;
		var rightExpressionRange = rightExpressionNode.a;
		return A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			{end: rightExpressionRange.end, start: leftRange.start},
			A4($stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication, operation.symbol, operation.direction, leftNode, rightExpressionNode));
	});
var $stil4m$elm_syntax$Elm$Syntax$Expression$CharLiteral = function (a) {
	return {$: 'CharLiteral', a: a};
};
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
	return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
};
var $stil4m$elm_syntax$ParserFast$anyChar = $stil4m$elm_syntax$ParserFast$Parser(
	function (s) {
		var newOffset = A2($stil4m$elm_syntax$ParserFast$charOrEnd, s.offset, s.src);
		if (_Utils_eq(newOffset, -1)) {
			return A2(
				$stil4m$elm_syntax$ParserFast$Bad,
				false,
				A2($stil4m$elm_syntax$ParserFast$ExpectingAnyChar, s.row, s.col));
		} else {
			if (_Utils_eq(newOffset, -2)) {
				return A2(
					$stil4m$elm_syntax$ParserFast$Good,
					_Utils_chr('\n'),
					{col: 1, indent: s.indent, offset: s.offset + 1, row: s.row + 1, src: s.src});
			} else {
				var _v0 = $elm$core$String$toList(
					A3($elm$core$String$slice, s.offset, newOffset, s.src));
				if (!_v0.b) {
					return A2(
						$stil4m$elm_syntax$ParserFast$Bad,
						false,
						A2($stil4m$elm_syntax$ParserFast$ExpectingAnyChar, s.row, s.col));
				} else {
					var c = _v0.a;
					return A2(
						$stil4m$elm_syntax$ParserFast$Good,
						c,
						{col: s.col + 1, indent: s.indent, offset: newOffset, row: s.row, src: s.src});
				}
			}
		}
	});
var $stil4m$elm_syntax$ParserFast$followedBySymbol = F2(
	function (str, _v0) {
		var parsePrevious = _v0.a;
		var strLength = $elm$core$String$length(str);
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v1 = parsePrevious(s0);
				if (_v1.$ === 'Good') {
					var res = _v1.a;
					var s1 = _v1.b;
					var newOffset = s1.offset + strLength;
					return _Utils_eq(
						A3($elm$core$String$slice, s1.offset, newOffset, s1.src),
						str + '') ? A2(
						$stil4m$elm_syntax$ParserFast$Good,
						res,
						{col: s1.col + strLength, indent: s1.indent, offset: newOffset, row: s1.row, src: s1.src}) : A2(
						$stil4m$elm_syntax$ParserFast$Bad,
						true,
						A3($stil4m$elm_syntax$ParserFast$ExpectingSymbol, s1.row, s1.col, str));
				} else {
					var bad = _v1;
					return bad;
				}
			});
	});
var $elm$core$Char$fromCode = _Char_fromCode;
var $stil4m$elm_syntax$Elm$Parser$Tokens$charToHex = function (c) {
	switch (c.valueOf()) {
		case '0':
			return 0;
		case '1':
			return 1;
		case '2':
			return 2;
		case '3':
			return 3;
		case '4':
			return 4;
		case '5':
			return 5;
		case '6':
			return 6;
		case '7':
			return 7;
		case '8':
			return 8;
		case '9':
			return 9;
		case 'a':
			return 10;
		case 'b':
			return 11;
		case 'c':
			return 12;
		case 'd':
			return 13;
		case 'e':
			return 14;
		case 'f':
			return 15;
		case 'A':
			return 10;
		case 'B':
			return 11;
		case 'C':
			return 12;
		case 'D':
			return 13;
		case 'E':
			return 14;
		default:
			return 15;
	}
};
var $elm$core$Basics$pow = _Basics_pow;
var $stil4m$elm_syntax$Elm$Parser$Tokens$hexStringToInt = function (string) {
	return A3(
		$elm$core$String$foldr,
		F2(
			function (c, soFar) {
				return {
					exponent: soFar.exponent + 1,
					result: soFar.result + (A2($elm$core$Basics$pow, 16, soFar.exponent) * $stil4m$elm_syntax$Elm$Parser$Tokens$charToHex(c))
				};
			}),
		{exponent: 0, result: 0},
		string).result;
};
var $stil4m$elm_syntax$ParserFast$ExpectingCharSatisfyingPredicate = F2(
	function (a, b) {
		return {$: 'ExpectingCharSatisfyingPredicate', a: a, b: b};
	});
var $stil4m$elm_syntax$ParserFast$isSubCharWithoutLinebreak = F3(
	function (predicate, offset, string) {
		var actualChar = A3($elm$core$String$slice, offset, offset + 1, string);
		return A2($elm$core$String$any, predicate, actualChar) ? (offset + 1) : (($stil4m$elm_syntax$ParserFast$charStringIsUtf16HighSurrogate(actualChar) && A2(
			$elm$core$String$any,
			predicate,
			A3($elm$core$String$slice, offset, offset + 2, string))) ? (offset + 2) : (-1));
	});
var $stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp = F6(
	function (isGood, offset, row, col, src, indent) {
		skipWhileWithoutLinebreakHelp:
		while (true) {
			var actualChar = A3($elm$core$String$slice, offset, offset + 1, src);
			if (A2($elm$core$String$any, isGood, actualChar)) {
				var $temp$isGood = isGood,
					$temp$offset = offset + 1,
					$temp$row = row,
					$temp$col = col + 1,
					$temp$src = src,
					$temp$indent = indent;
				isGood = $temp$isGood;
				offset = $temp$offset;
				row = $temp$row;
				col = $temp$col;
				src = $temp$src;
				indent = $temp$indent;
				continue skipWhileWithoutLinebreakHelp;
			} else {
				if ($stil4m$elm_syntax$ParserFast$charStringIsUtf16HighSurrogate(actualChar) && A2(
					$elm$core$String$any,
					isGood,
					A3($elm$core$String$slice, offset, offset + 2, src))) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 2,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$src = src,
						$temp$indent = indent;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					continue skipWhileWithoutLinebreakHelp;
				} else {
					return {col: col, indent: indent, offset: offset, row: row, src: src};
				}
			}
		}
	});
var $stil4m$elm_syntax$ParserFast$ifFollowedByWhileMapWithoutLinebreak = F3(
	function (consumedStringToRes, firstIsOkay, afterFirstIsOkay) {
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var firstOffset = A3($stil4m$elm_syntax$ParserFast$isSubCharWithoutLinebreak, firstIsOkay, s0.offset, s0.src);
				if (_Utils_eq(firstOffset, -1)) {
					return A2(
						$stil4m$elm_syntax$ParserFast$Bad,
						false,
						A2($stil4m$elm_syntax$ParserFast$ExpectingCharSatisfyingPredicate, s0.row, s0.col));
				} else {
					var s1 = A6($stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp, afterFirstIsOkay, firstOffset, s0.row, s0.col + 1, s0.src, s0.indent);
					return A2(
						$stil4m$elm_syntax$ParserFast$Good,
						consumedStringToRes(
							A3($elm$core$String$slice, s0.offset, s1.offset, s0.src)),
						s1);
				}
			});
	});
var $elm$core$Char$isHexDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return ((48 <= code) && (code <= 57)) || (((65 <= code) && (code <= 70)) || ((97 <= code) && (code <= 102)));
};
var $stil4m$elm_syntax$ParserFast$oneOf7 = F7(
	function (_v0, _v1, _v2, _v3, _v4, _v5, _v6) {
		var attempt0 = _v0.a;
		var attempt1 = _v1.a;
		var attempt2 = _v2.a;
		var attempt3 = _v3.a;
		var attempt4 = _v4.a;
		var attempt5 = _v5.a;
		var attempt6 = _v6.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s) {
				var _v7 = attempt0(s);
				if (_v7.$ === 'Good') {
					var good = _v7;
					return good;
				} else {
					var bad0 = _v7;
					var committed0 = bad0.a;
					var x0 = bad0.b;
					if (committed0) {
						return bad0;
					} else {
						var _v8 = attempt1(s);
						if (_v8.$ === 'Good') {
							var good = _v8;
							return good;
						} else {
							var bad1 = _v8;
							var committed1 = bad1.a;
							var x1 = bad1.b;
							if (committed1) {
								return bad1;
							} else {
								var _v9 = attempt2(s);
								if (_v9.$ === 'Good') {
									var good = _v9;
									return good;
								} else {
									var bad2 = _v9;
									var committed2 = bad2.a;
									var x2 = bad2.b;
									if (committed2) {
										return bad2;
									} else {
										var _v10 = attempt3(s);
										if (_v10.$ === 'Good') {
											var good = _v10;
											return good;
										} else {
											var bad3 = _v10;
											var committed3 = bad3.a;
											var x3 = bad3.b;
											if (committed3) {
												return bad3;
											} else {
												var _v11 = attempt4(s);
												if (_v11.$ === 'Good') {
													var good = _v11;
													return good;
												} else {
													var bad4 = _v11;
													var committed4 = bad4.a;
													var x4 = bad4.b;
													if (committed4) {
														return bad4;
													} else {
														var _v12 = attempt5(s);
														if (_v12.$ === 'Good') {
															var good = _v12;
															return good;
														} else {
															var bad5 = _v12;
															var committed5 = bad5.a;
															var x5 = bad5.b;
															if (committed5) {
																return bad5;
															} else {
																var _v13 = attempt6(s);
																if (_v13.$ === 'Good') {
																	var good = _v13;
																	return good;
																} else {
																	var bad6 = _v13;
																	var committed6 = bad6.a;
																	var x6 = bad6.b;
																	return committed6 ? bad6 : A2(
																		$stil4m$elm_syntax$ParserFast$Bad,
																		false,
																		A3(
																			$stil4m$elm_syntax$ParserFast$ExpectingOneOf,
																			x0,
																			x1,
																			_List_fromArray(
																				[x2, x3, x4, x5, x6])));
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Tokens$escapedCharValueMap = function (charToRes) {
	return A7(
		$stil4m$elm_syntax$ParserFast$oneOf7,
		A2(
			$stil4m$elm_syntax$ParserFast$symbol,
			'\'',
			charToRes(
				_Utils_chr('\''))),
		A2(
			$stil4m$elm_syntax$ParserFast$symbol,
			'\"',
			charToRes(
				_Utils_chr('\"'))),
		A2(
			$stil4m$elm_syntax$ParserFast$symbol,
			'n',
			charToRes(
				_Utils_chr('\n'))),
		A2(
			$stil4m$elm_syntax$ParserFast$symbol,
			't',
			charToRes(
				_Utils_chr('\t'))),
		A2(
			$stil4m$elm_syntax$ParserFast$symbol,
			'r',
			charToRes(
				_Utils_chr('\u000D'))),
		A2(
			$stil4m$elm_syntax$ParserFast$symbol,
			'\\',
			charToRes(
				_Utils_chr('\\'))),
		A2(
			$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
			'u{',
			A2(
				$stil4m$elm_syntax$ParserFast$followedBySymbol,
				'}',
				A3(
					$stil4m$elm_syntax$ParserFast$ifFollowedByWhileMapWithoutLinebreak,
					function (hex) {
						return charToRes(
							$elm$core$Char$fromCode(
								$stil4m$elm_syntax$Elm$Parser$Tokens$hexStringToInt(hex)));
					},
					$elm$core$Char$isHexDigit,
					$elm$core$Char$isHexDigit))));
};
var $stil4m$elm_syntax$ParserFast$oneOf2MapWithStartRowColumnAndEndRowColumn = F4(
	function (firstToChoice, _v0, secondToChoice, _v1) {
		var attemptFirst = _v0.a;
		var attemptSecond = _v1.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s) {
				var _v2 = attemptFirst(s);
				if (_v2.$ === 'Good') {
					var first = _v2.a;
					var s1 = _v2.b;
					return A2(
						$stil4m$elm_syntax$ParserFast$Good,
						A5(firstToChoice, s.row, s.col, first, s1.row, s1.col),
						s1);
				} else {
					var firstCommitted = _v2.a;
					var firstX = _v2.b;
					if (firstCommitted) {
						return A2($stil4m$elm_syntax$ParserFast$Bad, firstCommitted, firstX);
					} else {
						var _v3 = attemptSecond(s);
						if (_v3.$ === 'Good') {
							var second = _v3.a;
							var s1 = _v3.b;
							return A2(
								$stil4m$elm_syntax$ParserFast$Good,
								A5(secondToChoice, s.row, s.col, second, s1.row, s1.col),
								s1);
						} else {
							var secondCommitted = _v3.a;
							var secondX = _v3.b;
							return secondCommitted ? A2($stil4m$elm_syntax$ParserFast$Bad, secondCommitted, secondX) : A2(
								$stil4m$elm_syntax$ParserFast$Bad,
								false,
								A3($stil4m$elm_syntax$ParserFast$ExpectingOneOf, firstX, secondX, _List_Nil));
						}
					}
				}
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Tokens$characterLiteralMapWithRange = function (rangeAndCharToRes) {
	return A2(
		$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
		'\'',
		A2(
			$stil4m$elm_syntax$ParserFast$followedBySymbol,
			'\'',
			A4(
				$stil4m$elm_syntax$ParserFast$oneOf2MapWithStartRowColumnAndEndRowColumn,
				F5(
					function (startRow, startColumn, _char, endRow, endColumn) {
						return A2(
							rangeAndCharToRes,
							{
								end: {column: endColumn + 1, row: endRow},
								start: {column: startColumn - 1, row: startRow}
							},
							_char);
					}),
				A2(
					$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
					'\\',
					$stil4m$elm_syntax$Elm$Parser$Tokens$escapedCharValueMap($elm$core$Basics$identity)),
				F5(
					function (startRow, startColumn, _char, endRow, endColumn) {
						return A2(
							rangeAndCharToRes,
							{
								end: {column: endColumn + 1, row: endRow},
								start: {column: startColumn - 1, row: startRow}
							},
							_char);
					}),
				$stil4m$elm_syntax$ParserFast$anyChar)));
};
var $stil4m$elm_syntax$Elm$Parser$Expression$charLiteralExpression = $stil4m$elm_syntax$Elm$Parser$Tokens$characterLiteralMapWithRange(
	F2(
		function (range, _char) {
			return {
				comments: $stil4m$elm_syntax$Rope$empty,
				syntax: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Expression$CharLiteral(_char))
			};
		}));
var $stil4m$elm_syntax$Elm$Parser$Expression$errUnknownInfixOperator = $elm$core$Result$Err('unknown infix operator');
var $stil4m$elm_syntax$ParserFast$ifFollowedByWhileValidateMapWithRangeWithoutLinebreak = F4(
	function (toResult, firstIsOkay, afterFirstIsOkay, resultIsOkay) {
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var firstOffset = A3($stil4m$elm_syntax$ParserFast$isSubCharWithoutLinebreak, firstIsOkay, s0.offset, s0.src);
				if (_Utils_eq(firstOffset, -1)) {
					return A2(
						$stil4m$elm_syntax$ParserFast$Bad,
						false,
						A2($stil4m$elm_syntax$ParserFast$ExpectingCharSatisfyingPredicate, s0.row, s0.col));
				} else {
					var s1 = A6($stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp, afterFirstIsOkay, firstOffset, s0.row, s0.col + 1, s0.src, s0.indent);
					var name = A3($elm$core$String$slice, s0.offset, s1.offset, s0.src);
					return resultIsOkay(name) ? A2(
						$stil4m$elm_syntax$ParserFast$Good,
						A2(
							toResult,
							{
								end: {column: s1.col, row: s1.row},
								start: {column: s0.col, row: s0.row}
							},
							name),
						s1) : A2(
						$stil4m$elm_syntax$ParserFast$Bad,
						false,
						A2($stil4m$elm_syntax$ParserFast$ExpectingStringSatisfyingPredicate, s0.row, s0.col + 1));
				}
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Tokens$isNotReserved = function (name) {
	switch (name) {
		case 'module':
			return false;
		case 'exposing':
			return false;
		case 'import':
			return false;
		case 'as':
			return false;
		case 'if':
			return false;
		case 'then':
			return false;
		case 'else':
			return false;
		case 'let':
			return false;
		case 'in':
			return false;
		case 'case':
			return false;
		case 'of':
			return false;
		case 'port':
			return false;
		case 'type':
			return false;
		case 'where':
			return false;
		default:
			return true;
	}
};
var $stil4m$elm_syntax$Char$Extra$charCodeIsDigit = function (code) {
	return (code <= 57) && (48 <= code);
};
var $stil4m$elm_syntax$Char$Extra$charCodeIsLower = function (code) {
	return (97 <= code) && (code <= 122);
};
var $stil4m$elm_syntax$Char$Extra$charCodeIsUpper = function (code) {
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$modBy = _Basics_modBy;
var $stil4m$elm_syntax$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast = function (c) {
	var code = $elm$core$Char$toCode(c);
	return $stil4m$elm_syntax$Char$Extra$charCodeIsLower(code) || ($stil4m$elm_syntax$Char$Extra$charCodeIsUpper(code) || ($stil4m$elm_syntax$Char$Extra$charCodeIsDigit(code) || ((code === 95) || (((code !== 32) && (code !== 10)) && ((code < 256) ? (((48 <= code) && (code <= 57)) || (((65 <= code) && (code <= 90)) || (((97 <= code) && (code <= 122)) || ((code === 170) || (((178 <= code) && (code <= 179)) || ((code === 181) || (((185 <= code) && (code <= 186)) || (((188 <= code) && (code <= 190)) || (((192 <= code) && (code <= 214)) || (((216 <= code) && (code <= 246)) || ((248 <= code) && (code <= 255)))))))))))) : ((code < 43700) ? ((code < 4347) ? ((code < 2868) ? ((code < 2364) ? ((code < 1648) ? ((code < 930) ? (((256 <= code) && (code <= 705)) || (((710 <= code) && (code <= 721)) || (((736 <= code) && (code <= 740)) || (((880 <= code) && (code <= 884)) || (((886 <= code) && (code <= 887)) || (((890 <= code) && (code <= 893)) || ((code === 895) || ((code === 902) || (((904 <= code) && (code <= 906)) || ((code === 908) || (((910 <= code) && (code <= 929)) || ((!A2($elm$core$Basics$modBy, 2, code)) && ((748 <= code) && (code <= 750)))))))))))))) : (((931 <= code) && (code <= 1013)) || (((1015 <= code) && (code <= 1153)) || (((1162 <= code) && (code <= 1327)) || (((1329 <= code) && (code <= 1366)) || ((code === 1369) || (((1376 <= code) && (code <= 1416)) || (((1488 <= code) && (code <= 1514)) || (((1519 <= code) && (code <= 1522)) || (((1568 <= code) && (code <= 1610)) || (((1632 <= code) && (code <= 1641)) || ((1646 <= code) && (code <= 1647))))))))))))) : ((code < 2041) ? (((1649 <= code) && (code <= 1747)) || ((code === 1749) || (((1765 <= code) && (code <= 1766)) || (((1774 <= code) && (code <= 1788)) || ((code === 1791) || ((code === 1808) || (((1810 <= code) && (code <= 1839)) || (((1869 <= code) && (code <= 1957)) || ((code === 1969) || (((1984 <= code) && (code <= 2026)) || ((2036 <= code) && (code <= 2037)))))))))))) : ((code === 2042) || (((2048 <= code) && (code <= 2069)) || ((code === 2074) || ((code === 2084) || ((code === 2088) || (((2112 <= code) && (code <= 2136)) || (((2144 <= code) && (code <= 2154)) || (((2160 <= code) && (code <= 2183)) || (((2185 <= code) && (code <= 2190)) || (((2208 <= code) && (code <= 2249)) || ((2308 <= code) && (code <= 2361)))))))))))))) : ((code < 2609) ? ((code < 2492) ? ((code === 2365) || ((code === 2384) || (((2392 <= code) && (code <= 2401)) || (((2406 <= code) && (code <= 2415)) || (((2417 <= code) && (code <= 2432)) || (((2437 <= code) && (code <= 2444)) || (((2447 <= code) && (code <= 2448)) || (((2451 <= code) && (code <= 2472)) || (((2474 <= code) && (code <= 2480)) || ((code === 2482) || ((2486 <= code) && (code <= 2489)))))))))))) : ((code === 2493) || ((code === 2510) || (((2524 <= code) && (code <= 2525)) || (((2527 <= code) && (code <= 2529)) || (((2534 <= code) && (code <= 2545)) || (((2548 <= code) && (code <= 2553)) || ((code === 2556) || (((2565 <= code) && (code <= 2570)) || (((2575 <= code) && (code <= 2576)) || (((2579 <= code) && (code <= 2600)) || ((2602 <= code) && (code <= 2608))))))))))))) : ((code < 2737) ? (((2610 <= code) && (code <= 2611)) || (((2613 <= code) && (code <= 2614)) || (((2616 <= code) && (code <= 2617)) || (((2649 <= code) && (code <= 2652)) || ((code === 2654) || (((2662 <= code) && (code <= 2671)) || (((2674 <= code) && (code <= 2676)) || (((2693 <= code) && (code <= 2701)) || (((2703 <= code) && (code <= 2705)) || (((2707 <= code) && (code <= 2728)) || ((2730 <= code) && (code <= 2736)))))))))))) : (((2738 <= code) && (code <= 2739)) || (((2741 <= code) && (code <= 2745)) || ((code === 2749) || ((code === 2768) || (((2784 <= code) && (code <= 2785)) || (((2790 <= code) && (code <= 2799)) || ((code === 2809) || (((2821 <= code) && (code <= 2828)) || (((2831 <= code) && (code <= 2832)) || (((2835 <= code) && (code <= 2856)) || (((2858 <= code) && (code <= 2864)) || ((2866 <= code) && (code <= 2867)))))))))))))))) : ((code < 3411) ? ((code < 3132) ? ((code < 2971) ? (((2869 <= code) && (code <= 2873)) || ((code === 2877) || (((2908 <= code) && (code <= 2909)) || (((2911 <= code) && (code <= 2913)) || (((2918 <= code) && (code <= 2927)) || (((2929 <= code) && (code <= 2935)) || ((code === 2947) || (((2949 <= code) && (code <= 2954)) || (((2958 <= code) && (code <= 2960)) || (((2962 <= code) && (code <= 2965)) || ((2969 <= code) && (code <= 2970)))))))))))) : ((code === 2972) || (((2974 <= code) && (code <= 2975)) || (((2979 <= code) && (code <= 2980)) || (((2984 <= code) && (code <= 2986)) || (((2990 <= code) && (code <= 3001)) || ((code === 3024) || (((3046 <= code) && (code <= 3058)) || (((3077 <= code) && (code <= 3084)) || (((3086 <= code) && (code <= 3088)) || (((3090 <= code) && (code <= 3112)) || ((3114 <= code) && (code <= 3129))))))))))))) : ((code < 3252) ? ((code === 3133) || (((3160 <= code) && (code <= 3162)) || ((code === 3165) || (((3168 <= code) && (code <= 3169)) || (((3174 <= code) && (code <= 3183)) || (((3192 <= code) && (code <= 3198)) || ((code === 3200) || (((3205 <= code) && (code <= 3212)) || (((3214 <= code) && (code <= 3216)) || (((3218 <= code) && (code <= 3240)) || ((3242 <= code) && (code <= 3251)))))))))))) : (((3253 <= code) && (code <= 3257)) || ((code === 3261) || (((3293 <= code) && (code <= 3294)) || (((3296 <= code) && (code <= 3297)) || (((3302 <= code) && (code <= 3311)) || (((3313 <= code) && (code <= 3314)) || (((3332 <= code) && (code <= 3340)) || (((3342 <= code) && (code <= 3344)) || (((3346 <= code) && (code <= 3386)) || ((code === 3389) || (code === 3406))))))))))))) : ((code < 3775) ? ((code < 3633) ? (((3412 <= code) && (code <= 3414)) || (((3416 <= code) && (code <= 3425)) || (((3430 <= code) && (code <= 3448)) || (((3450 <= code) && (code <= 3455)) || (((3461 <= code) && (code <= 3478)) || (((3482 <= code) && (code <= 3505)) || (((3507 <= code) && (code <= 3515)) || ((code === 3517) || (((3520 <= code) && (code <= 3526)) || (((3558 <= code) && (code <= 3567)) || ((3585 <= code) && (code <= 3632)))))))))))) : (((3634 <= code) && (code <= 3635)) || (((3648 <= code) && (code <= 3654)) || (((3664 <= code) && (code <= 3673)) || (((3713 <= code) && (code <= 3714)) || ((code === 3716) || (((3718 <= code) && (code <= 3722)) || (((3724 <= code) && (code <= 3747)) || ((code === 3749) || (((3751 <= code) && (code <= 3760)) || (((3762 <= code) && (code <= 3763)) || (code === 3773)))))))))))) : ((code < 4175) ? (((3776 <= code) && (code <= 3780)) || ((code === 3782) || (((3792 <= code) && (code <= 3801)) || (((3804 <= code) && (code <= 3807)) || ((code === 3840) || (((3872 <= code) && (code <= 3891)) || (((3904 <= code) && (code <= 3911)) || (((3913 <= code) && (code <= 3948)) || (((3976 <= code) && (code <= 3980)) || (((4096 <= code) && (code <= 4138)) || ((4159 <= code) && (code <= 4169)))))))))))) : (((4176 <= code) && (code <= 4181)) || (((4186 <= code) && (code <= 4189)) || ((code === 4193) || (((4197 <= code) && (code <= 4198)) || (((4206 <= code) && (code <= 4208)) || (((4213 <= code) && (code <= 4225)) || ((code === 4238) || (((4240 <= code) && (code <= 4249)) || (((4256 <= code) && (code <= 4293)) || ((code === 4295) || ((code === 4301) || ((4304 <= code) && (code <= 4346))))))))))))))))) : ((code < 8454) ? ((code < 6527) ? ((code < 5760) ? ((code < 4801) ? (((4348 <= code) && (code <= 4680)) || (((4682 <= code) && (code <= 4685)) || (((4688 <= code) && (code <= 4694)) || ((code === 4696) || (((4698 <= code) && (code <= 4701)) || (((4704 <= code) && (code <= 4744)) || (((4746 <= code) && (code <= 4749)) || (((4752 <= code) && (code <= 4784)) || (((4786 <= code) && (code <= 4789)) || (((4792 <= code) && (code <= 4798)) || (code === 4800))))))))))) : (((4802 <= code) && (code <= 4805)) || (((4808 <= code) && (code <= 4822)) || (((4824 <= code) && (code <= 4880)) || (((4882 <= code) && (code <= 4885)) || (((4888 <= code) && (code <= 4954)) || (((4969 <= code) && (code <= 4988)) || (((4992 <= code) && (code <= 5007)) || (((5024 <= code) && (code <= 5109)) || (((5112 <= code) && (code <= 5117)) || (((5121 <= code) && (code <= 5740)) || ((5743 <= code) && (code <= 5759))))))))))))) : ((code < 6111) ? (((5761 <= code) && (code <= 5786)) || (((5792 <= code) && (code <= 5866)) || (((5870 <= code) && (code <= 5880)) || (((5888 <= code) && (code <= 5905)) || (((5919 <= code) && (code <= 5937)) || (((5952 <= code) && (code <= 5969)) || (((5984 <= code) && (code <= 5996)) || (((5998 <= code) && (code <= 6000)) || (((6016 <= code) && (code <= 6067)) || ((code === 6103) || (code === 6108))))))))))) : (((6112 <= code) && (code <= 6121)) || (((6128 <= code) && (code <= 6137)) || (((6160 <= code) && (code <= 6169)) || (((6176 <= code) && (code <= 6264)) || (((6272 <= code) && (code <= 6276)) || (((6279 <= code) && (code <= 6312)) || ((code === 6314) || (((6320 <= code) && (code <= 6389)) || (((6400 <= code) && (code <= 6430)) || (((6470 <= code) && (code <= 6509)) || ((6512 <= code) && (code <= 6516)))))))))))))) : ((code < 7417) ? ((code < 7042) ? (((6528 <= code) && (code <= 6571)) || (((6576 <= code) && (code <= 6601)) || (((6608 <= code) && (code <= 6618)) || (((6656 <= code) && (code <= 6678)) || (((6688 <= code) && (code <= 6740)) || (((6784 <= code) && (code <= 6793)) || (((6800 <= code) && (code <= 6809)) || ((code === 6823) || (((6917 <= code) && (code <= 6963)) || (((6981 <= code) && (code <= 6988)) || ((6992 <= code) && (code <= 7001)))))))))))) : (((7043 <= code) && (code <= 7072)) || (((7086 <= code) && (code <= 7141)) || (((7168 <= code) && (code <= 7203)) || (((7232 <= code) && (code <= 7241)) || (((7245 <= code) && (code <= 7293)) || (((7296 <= code) && (code <= 7304)) || (((7312 <= code) && (code <= 7354)) || (((7357 <= code) && (code <= 7359)) || (((7401 <= code) && (code <= 7404)) || (((7406 <= code) && (code <= 7411)) || ((7413 <= code) && (code <= 7414))))))))))))) : ((code < 8129) ? ((code === 7418) || (((7424 <= code) && (code <= 7615)) || (((7680 <= code) && (code <= 7957)) || (((7960 <= code) && (code <= 7965)) || (((7968 <= code) && (code <= 8005)) || (((8008 <= code) && (code <= 8013)) || (((8016 <= code) && (code <= 8023)) || (((8032 <= code) && (code <= 8061)) || (((8064 <= code) && (code <= 8116)) || (((8118 <= code) && (code <= 8124)) || ((code === 8126) || ((A2($elm$core$Basics$modBy, 2, code) === 1) && ((8025 <= code) && (code <= 8031)))))))))))))) : (((8130 <= code) && (code <= 8132)) || (((8134 <= code) && (code <= 8140)) || (((8144 <= code) && (code <= 8147)) || (((8150 <= code) && (code <= 8155)) || (((8160 <= code) && (code <= 8172)) || (((8178 <= code) && (code <= 8180)) || (((8182 <= code) && (code <= 8188)) || (((8304 <= code) && (code <= 8305)) || (((8308 <= code) && (code <= 8313)) || (((8319 <= code) && (code <= 8329)) || (((8336 <= code) && (code <= 8348)) || (code === 8450))))))))))))))) : ((code < 12783) ? ((code < 11647) ? ((code < 9449) ? ((code === 8455) || (((8458 <= code) && (code <= 8467)) || ((code === 8469) || (((8473 <= code) && (code <= 8477)) || (((8490 <= code) && (code <= 8493)) || (((8495 <= code) && (code <= 8505)) || (((8508 <= code) && (code <= 8511)) || (((8517 <= code) && (code <= 8521)) || ((code === 8526) || (((8528 <= code) && (code <= 8585)) || (((9312 <= code) && (code <= 9371)) || ((!A2($elm$core$Basics$modBy, 2, code)) && ((8484 <= code) && (code <= 8488)))))))))))))) : (((9450 <= code) && (code <= 9471)) || (((10102 <= code) && (code <= 10131)) || (((11264 <= code) && (code <= 11492)) || (((11499 <= code) && (code <= 11502)) || (((11506 <= code) && (code <= 11507)) || ((code === 11517) || (((11520 <= code) && (code <= 11557)) || ((code === 11559) || ((code === 11565) || (((11568 <= code) && (code <= 11623)) || (code === 11631)))))))))))) : ((code < 12320) ? (((11648 <= code) && (code <= 11670)) || (((11680 <= code) && (code <= 11686)) || (((11688 <= code) && (code <= 11694)) || (((11696 <= code) && (code <= 11702)) || (((11704 <= code) && (code <= 11710)) || (((11712 <= code) && (code <= 11718)) || (((11720 <= code) && (code <= 11726)) || (((11728 <= code) && (code <= 11734)) || (((11736 <= code) && (code <= 11742)) || ((code === 11823) || ((12293 <= code) && (code <= 12295)))))))))))) : (((12321 <= code) && (code <= 12329)) || (((12337 <= code) && (code <= 12341)) || (((12344 <= code) && (code <= 12348)) || (((12353 <= code) && (code <= 12438)) || (((12445 <= code) && (code <= 12447)) || (((12449 <= code) && (code <= 12538)) || (((12540 <= code) && (code <= 12543)) || (((12549 <= code) && (code <= 12591)) || (((12593 <= code) && (code <= 12686)) || (((12690 <= code) && (code <= 12693)) || ((12704 <= code) && (code <= 12735)))))))))))))) : ((code < 43019) ? ((code < 42559) ? (((12784 <= code) && (code <= 12799)) || (((12832 <= code) && (code <= 12841)) || (((12872 <= code) && (code <= 12879)) || (((12881 <= code) && (code <= 12895)) || (((12928 <= code) && (code <= 12937)) || (((12977 <= code) && (code <= 12991)) || (((13312 <= code) && (code <= 19903)) || (((19968 <= code) && (code <= 42124)) || (((42192 <= code) && (code <= 42237)) || (((42240 <= code) && (code <= 42508)) || ((42512 <= code) && (code <= 42539)))))))))))) : (((42560 <= code) && (code <= 42606)) || (((42623 <= code) && (code <= 42653)) || (((42656 <= code) && (code <= 42735)) || (((42775 <= code) && (code <= 42783)) || (((42786 <= code) && (code <= 42888)) || (((42891 <= code) && (code <= 42954)) || (((42960 <= code) && (code <= 42961)) || (((42966 <= code) && (code <= 42969)) || (((42994 <= code) && (code <= 43009)) || (((43011 <= code) && (code <= 43013)) || (((43015 <= code) && (code <= 43018)) || ((A2($elm$core$Basics$modBy, 2, code) === 1) && ((42963 <= code) && (code <= 42965))))))))))))))) : ((code < 43395) ? (((43020 <= code) && (code <= 43042)) || (((43056 <= code) && (code <= 43061)) || (((43072 <= code) && (code <= 43123)) || (((43138 <= code) && (code <= 43187)) || (((43216 <= code) && (code <= 43225)) || (((43250 <= code) && (code <= 43255)) || ((code === 43259) || (((43261 <= code) && (code <= 43262)) || (((43264 <= code) && (code <= 43301)) || (((43312 <= code) && (code <= 43334)) || ((43360 <= code) && (code <= 43388)))))))))))) : (((43396 <= code) && (code <= 43442)) || (((43471 <= code) && (code <= 43481)) || (((43488 <= code) && (code <= 43492)) || (((43494 <= code) && (code <= 43518)) || (((43520 <= code) && (code <= 43560)) || (((43584 <= code) && (code <= 43586)) || (((43588 <= code) && (code <= 43595)) || (((43600 <= code) && (code <= 43609)) || (((43616 <= code) && (code <= 43638)) || ((code === 43642) || (((43646 <= code) && (code <= 43695)) || (code === 43697))))))))))))))))) : ((code < 71351) ? ((code < 67671) ? ((code < 65548) ? ((code < 64286) ? ((code < 43867) ? (((43701 <= code) && (code <= 43702)) || (((43705 <= code) && (code <= 43709)) || (((43739 <= code) && (code <= 43741)) || (((43744 <= code) && (code <= 43754)) || (((43762 <= code) && (code <= 43764)) || (((43777 <= code) && (code <= 43782)) || (((43785 <= code) && (code <= 43790)) || (((43793 <= code) && (code <= 43798)) || (((43808 <= code) && (code <= 43814)) || (((43816 <= code) && (code <= 43822)) || (((43824 <= code) && (code <= 43866)) || ((!A2($elm$core$Basics$modBy, 2, code)) && ((43712 <= code) && (code <= 43714)))))))))))))) : (((43868 <= code) && (code <= 43881)) || (((43888 <= code) && (code <= 44002)) || (((44016 <= code) && (code <= 44025)) || (((44032 <= code) && (code <= 55203)) || (((55216 <= code) && (code <= 55238)) || (((55243 <= code) && (code <= 55291)) || (((63744 <= code) && (code <= 64109)) || (((64112 <= code) && (code <= 64217)) || (((64256 <= code) && (code <= 64262)) || (((64275 <= code) && (code <= 64279)) || (code === 64285)))))))))))) : ((code < 65135) ? (((64287 <= code) && (code <= 64296)) || (((64298 <= code) && (code <= 64310)) || (((64312 <= code) && (code <= 64316)) || ((code === 64318) || (((64320 <= code) && (code <= 64321)) || (((64323 <= code) && (code <= 64324)) || (((64326 <= code) && (code <= 64433)) || (((64467 <= code) && (code <= 64829)) || (((64848 <= code) && (code <= 64911)) || (((64914 <= code) && (code <= 64967)) || ((65008 <= code) && (code <= 65019)))))))))))) : (((65136 <= code) && (code <= 65140)) || (((65142 <= code) && (code <= 65276)) || (((65296 <= code) && (code <= 65305)) || (((65313 <= code) && (code <= 65338)) || (((65345 <= code) && (code <= 65370)) || (((65382 <= code) && (code <= 65470)) || (((65474 <= code) && (code <= 65479)) || (((65482 <= code) && (code <= 65487)) || (((65490 <= code) && (code <= 65495)) || (((65498 <= code) && (code <= 65500)) || ((65536 <= code) && (code <= 65547)))))))))))))) : ((code < 66775) ? ((code < 66272) ? (((65549 <= code) && (code <= 65574)) || (((65576 <= code) && (code <= 65594)) || (((65596 <= code) && (code <= 65597)) || (((65599 <= code) && (code <= 65613)) || (((65616 <= code) && (code <= 65629)) || (((65664 <= code) && (code <= 65786)) || (((65799 <= code) && (code <= 65843)) || (((65856 <= code) && (code <= 65912)) || (((65930 <= code) && (code <= 65931)) || (((66176 <= code) && (code <= 66204)) || ((66208 <= code) && (code <= 66256)))))))))))) : (((66273 <= code) && (code <= 66299)) || (((66304 <= code) && (code <= 66339)) || (((66349 <= code) && (code <= 66378)) || (((66384 <= code) && (code <= 66421)) || (((66432 <= code) && (code <= 66461)) || (((66464 <= code) && (code <= 66499)) || (((66504 <= code) && (code <= 66511)) || (((66513 <= code) && (code <= 66517)) || (((66560 <= code) && (code <= 66717)) || (((66720 <= code) && (code <= 66729)) || ((66736 <= code) && (code <= 66771))))))))))))) : ((code < 67071) ? (((66776 <= code) && (code <= 66811)) || (((66816 <= code) && (code <= 66855)) || (((66864 <= code) && (code <= 66915)) || (((66928 <= code) && (code <= 66938)) || (((66940 <= code) && (code <= 66954)) || (((66956 <= code) && (code <= 66962)) || (((66964 <= code) && (code <= 66965)) || (((66967 <= code) && (code <= 66977)) || (((66979 <= code) && (code <= 66993)) || (((66995 <= code) && (code <= 67001)) || ((67003 <= code) && (code <= 67004)))))))))))) : (((67072 <= code) && (code <= 67382)) || (((67392 <= code) && (code <= 67413)) || (((67424 <= code) && (code <= 67431)) || (((67456 <= code) && (code <= 67461)) || (((67463 <= code) && (code <= 67504)) || (((67506 <= code) && (code <= 67514)) || (((67584 <= code) && (code <= 67589)) || ((code === 67592) || (((67594 <= code) && (code <= 67637)) || (((67639 <= code) && (code <= 67640)) || ((code === 67644) || ((67647 <= code) && (code <= 67669)))))))))))))))) : ((code < 69871) ? ((code < 68471) ? ((code < 68116) ? (((67672 <= code) && (code <= 67702)) || (((67705 <= code) && (code <= 67742)) || (((67751 <= code) && (code <= 67759)) || (((67808 <= code) && (code <= 67826)) || (((67828 <= code) && (code <= 67829)) || (((67835 <= code) && (code <= 67867)) || (((67872 <= code) && (code <= 67897)) || (((67968 <= code) && (code <= 68023)) || (((68028 <= code) && (code <= 68047)) || (((68050 <= code) && (code <= 68096)) || ((68112 <= code) && (code <= 68115)))))))))))) : (((68117 <= code) && (code <= 68119)) || (((68121 <= code) && (code <= 68149)) || (((68160 <= code) && (code <= 68168)) || (((68192 <= code) && (code <= 68222)) || (((68224 <= code) && (code <= 68255)) || (((68288 <= code) && (code <= 68295)) || (((68297 <= code) && (code <= 68324)) || (((68331 <= code) && (code <= 68335)) || (((68352 <= code) && (code <= 68405)) || (((68416 <= code) && (code <= 68437)) || ((68440 <= code) && (code <= 68466))))))))))))) : ((code < 69423) ? (((68472 <= code) && (code <= 68497)) || (((68521 <= code) && (code <= 68527)) || (((68608 <= code) && (code <= 68680)) || (((68736 <= code) && (code <= 68786)) || (((68800 <= code) && (code <= 68850)) || (((68858 <= code) && (code <= 68899)) || (((68912 <= code) && (code <= 68921)) || (((69216 <= code) && (code <= 69246)) || (((69248 <= code) && (code <= 69289)) || (((69296 <= code) && (code <= 69297)) || ((69376 <= code) && (code <= 69415)))))))))))) : (((69424 <= code) && (code <= 69445)) || (((69457 <= code) && (code <= 69460)) || (((69488 <= code) && (code <= 69505)) || (((69552 <= code) && (code <= 69579)) || (((69600 <= code) && (code <= 69622)) || (((69635 <= code) && (code <= 69687)) || (((69714 <= code) && (code <= 69743)) || (((69745 <= code) && (code <= 69746)) || ((code === 69749) || (((69763 <= code) && (code <= 69807)) || ((69840 <= code) && (code <= 69864)))))))))))))) : ((code < 70404) ? ((code < 70112) ? (((69872 <= code) && (code <= 69881)) || (((69891 <= code) && (code <= 69926)) || (((69942 <= code) && (code <= 69951)) || ((code === 69956) || ((code === 69959) || (((69968 <= code) && (code <= 70002)) || ((code === 70006) || (((70019 <= code) && (code <= 70066)) || (((70081 <= code) && (code <= 70084)) || (((70096 <= code) && (code <= 70106)) || (code === 70108))))))))))) : (((70113 <= code) && (code <= 70132)) || (((70144 <= code) && (code <= 70161)) || (((70163 <= code) && (code <= 70187)) || (((70207 <= code) && (code <= 70208)) || (((70272 <= code) && (code <= 70278)) || ((code === 70280) || (((70282 <= code) && (code <= 70285)) || (((70287 <= code) && (code <= 70301)) || (((70303 <= code) && (code <= 70312)) || (((70320 <= code) && (code <= 70366)) || ((70384 <= code) && (code <= 70393))))))))))))) : ((code < 70735) ? (((70405 <= code) && (code <= 70412)) || (((70415 <= code) && (code <= 70416)) || (((70419 <= code) && (code <= 70440)) || (((70442 <= code) && (code <= 70448)) || (((70450 <= code) && (code <= 70451)) || (((70453 <= code) && (code <= 70457)) || ((code === 70461) || ((code === 70480) || (((70493 <= code) && (code <= 70497)) || (((70656 <= code) && (code <= 70708)) || ((70727 <= code) && (code <= 70730)))))))))))) : (((70736 <= code) && (code <= 70745)) || (((70751 <= code) && (code <= 70753)) || (((70784 <= code) && (code <= 70831)) || (((70852 <= code) && (code <= 70853)) || ((code === 70855) || (((70864 <= code) && (code <= 70873)) || (((71040 <= code) && (code <= 71086)) || (((71128 <= code) && (code <= 71131)) || (((71168 <= code) && (code <= 71215)) || ((code === 71236) || (((71248 <= code) && (code <= 71257)) || ((71296 <= code) && (code <= 71338))))))))))))))))) : ((code < 119893) ? ((code < 73727) ? ((code < 72703) ? ((code < 71959) ? ((code === 71352) || (((71360 <= code) && (code <= 71369)) || (((71424 <= code) && (code <= 71450)) || (((71472 <= code) && (code <= 71483)) || (((71488 <= code) && (code <= 71494)) || (((71680 <= code) && (code <= 71723)) || (((71840 <= code) && (code <= 71922)) || (((71935 <= code) && (code <= 71942)) || ((code === 71945) || (((71948 <= code) && (code <= 71955)) || ((71957 <= code) && (code <= 71958)))))))))))) : (((71960 <= code) && (code <= 71983)) || (((72016 <= code) && (code <= 72025)) || (((72096 <= code) && (code <= 72103)) || (((72106 <= code) && (code <= 72144)) || ((code === 72192) || (((72203 <= code) && (code <= 72242)) || ((code === 72250) || ((code === 72272) || (((72284 <= code) && (code <= 72329)) || ((code === 72349) || (((72368 <= code) && (code <= 72440)) || ((A2($elm$core$Basics$modBy, 2, code) === 1) && (((71999 <= code) && (code <= 72001)) || ((72161 <= code) && (code <= 72163)))))))))))))))) : ((code < 73062) ? (((72704 <= code) && (code <= 72712)) || (((72714 <= code) && (code <= 72750)) || ((code === 72768) || (((72784 <= code) && (code <= 72812)) || (((72818 <= code) && (code <= 72847)) || (((72960 <= code) && (code <= 72966)) || (((72968 <= code) && (code <= 72969)) || (((72971 <= code) && (code <= 73008)) || ((code === 73030) || (((73040 <= code) && (code <= 73049)) || ((73056 <= code) && (code <= 73061)))))))))))) : (((73063 <= code) && (code <= 73064)) || (((73066 <= code) && (code <= 73097)) || ((code === 73112) || (((73120 <= code) && (code <= 73129)) || (((73440 <= code) && (code <= 73458)) || ((code === 73474) || (((73476 <= code) && (code <= 73488)) || (((73490 <= code) && (code <= 73523)) || (((73552 <= code) && (code <= 73561)) || ((code === 73648) || ((73664 <= code) && (code <= 73684)))))))))))))) : ((code < 94098) ? ((code < 92863) ? (((73728 <= code) && (code <= 74649)) || (((74752 <= code) && (code <= 74862)) || (((74880 <= code) && (code <= 75075)) || (((77712 <= code) && (code <= 77808)) || (((77824 <= code) && (code <= 78895)) || (((78913 <= code) && (code <= 78918)) || (((82944 <= code) && (code <= 83526)) || (((92160 <= code) && (code <= 92728)) || (((92736 <= code) && (code <= 92766)) || (((92768 <= code) && (code <= 92777)) || ((92784 <= code) && (code <= 92862)))))))))))) : (((92864 <= code) && (code <= 92873)) || (((92880 <= code) && (code <= 92909)) || (((92928 <= code) && (code <= 92975)) || (((92992 <= code) && (code <= 92995)) || (((93008 <= code) && (code <= 93017)) || (((93019 <= code) && (code <= 93025)) || (((93027 <= code) && (code <= 93047)) || (((93053 <= code) && (code <= 93071)) || (((93760 <= code) && (code <= 93846)) || (((93952 <= code) && (code <= 94026)) || (code === 94032)))))))))))) : ((code < 110927) ? (((94099 <= code) && (code <= 94111)) || (((94176 <= code) && (code <= 94177)) || ((code === 94179) || (((94208 <= code) && (code <= 100343)) || (((100352 <= code) && (code <= 101589)) || (((101632 <= code) && (code <= 101640)) || (((110576 <= code) && (code <= 110579)) || (((110581 <= code) && (code <= 110587)) || (((110589 <= code) && (code <= 110590)) || (((110592 <= code) && (code <= 110882)) || (code === 110898))))))))))) : (((110928 <= code) && (code <= 110930)) || ((code === 110933) || (((110948 <= code) && (code <= 110951)) || (((110960 <= code) && (code <= 111355)) || (((113664 <= code) && (code <= 113770)) || (((113776 <= code) && (code <= 113788)) || (((113792 <= code) && (code <= 113800)) || (((113808 <= code) && (code <= 113817)) || (((119488 <= code) && (code <= 119507)) || (((119520 <= code) && (code <= 119539)) || (((119648 <= code) && (code <= 119672)) || ((119808 <= code) && (code <= 119892)))))))))))))))) : ((code < 124911) ? ((code < 120597) ? ((code < 120085) ? (((119894 <= code) && (code <= 119964)) || (((119966 <= code) && (code <= 119967)) || ((code === 119970) || (((119973 <= code) && (code <= 119974)) || (((119977 <= code) && (code <= 119980)) || (((119982 <= code) && (code <= 119993)) || ((code === 119995) || (((119997 <= code) && (code <= 120003)) || (((120005 <= code) && (code <= 120069)) || (((120071 <= code) && (code <= 120074)) || ((120077 <= code) && (code <= 120084)))))))))))) : (((120086 <= code) && (code <= 120092)) || (((120094 <= code) && (code <= 120121)) || (((120123 <= code) && (code <= 120126)) || (((120128 <= code) && (code <= 120132)) || ((code === 120134) || (((120138 <= code) && (code <= 120144)) || (((120146 <= code) && (code <= 120485)) || (((120488 <= code) && (code <= 120512)) || (((120514 <= code) && (code <= 120538)) || (((120540 <= code) && (code <= 120570)) || ((120572 <= code) && (code <= 120596))))))))))))) : ((code < 123135) ? (((120598 <= code) && (code <= 120628)) || (((120630 <= code) && (code <= 120654)) || (((120656 <= code) && (code <= 120686)) || (((120688 <= code) && (code <= 120712)) || (((120714 <= code) && (code <= 120744)) || (((120746 <= code) && (code <= 120770)) || (((120772 <= code) && (code <= 120779)) || (((120782 <= code) && (code <= 120831)) || (((122624 <= code) && (code <= 122654)) || (((122661 <= code) && (code <= 122666)) || ((122928 <= code) && (code <= 122989)))))))))))) : (((123136 <= code) && (code <= 123180)) || (((123191 <= code) && (code <= 123197)) || (((123200 <= code) && (code <= 123209)) || ((code === 123214) || (((123536 <= code) && (code <= 123565)) || (((123584 <= code) && (code <= 123627)) || (((123632 <= code) && (code <= 123641)) || (((124112 <= code) && (code <= 124139)) || (((124144 <= code) && (code <= 124153)) || (((124896 <= code) && (code <= 124902)) || (((124904 <= code) && (code <= 124907)) || ((124909 <= code) && (code <= 124910))))))))))))))) : ((code < 126560) ? ((code < 126463) ? (((124912 <= code) && (code <= 124926)) || (((124928 <= code) && (code <= 125124)) || (((125127 <= code) && (code <= 125135)) || (((125184 <= code) && (code <= 125251)) || ((code === 125259) || (((125264 <= code) && (code <= 125273)) || (((126065 <= code) && (code <= 126123)) || (((126125 <= code) && (code <= 126127)) || (((126129 <= code) && (code <= 126132)) || (((126209 <= code) && (code <= 126253)) || ((126255 <= code) && (code <= 126269)))))))))))) : (((126464 <= code) && (code <= 126467)) || (((126469 <= code) && (code <= 126495)) || (((126497 <= code) && (code <= 126498)) || ((code === 126500) || ((code === 126503) || (((126505 <= code) && (code <= 126514)) || (((126516 <= code) && (code <= 126519)) || ((code === 126530) || (((126541 <= code) && (code <= 126543)) || (((126545 <= code) && (code <= 126546)) || ((code === 126548) || ((A2($elm$core$Basics$modBy, 2, code) === 1) && (((126521 <= code) && (code <= 126523)) || (((126535 <= code) && (code <= 126539)) || ((126551 <= code) && (code <= 126559))))))))))))))))) : ((code < 126634) ? (((126561 <= code) && (code <= 126562)) || ((code === 126564) || (((126567 <= code) && (code <= 126570)) || (((126572 <= code) && (code <= 126578)) || (((126580 <= code) && (code <= 126583)) || (((126585 <= code) && (code <= 126588)) || ((code === 126590) || (((126592 <= code) && (code <= 126601)) || (((126603 <= code) && (code <= 126619)) || (((126625 <= code) && (code <= 126627)) || ((126629 <= code) && (code <= 126633)))))))))))) : (((126635 <= code) && (code <= 126651)) || (((127232 <= code) && (code <= 127244)) || (((130032 <= code) && (code <= 130041)) || (((131072 <= code) && (code <= 173791)) || (((173824 <= code) && (code <= 177977)) || (((177984 <= code) && (code <= 178205)) || (((178208 <= code) && (code <= 183969)) || (((183984 <= code) && (code <= 191456)) || (((191472 <= code) && (code <= 192093)) || (((194560 <= code) && (code <= 195101)) || (((196608 <= code) && (code <= 201546)) || ((201552 <= code) && (code <= 205743))))))))))))))))))))))));
};
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $elm$core$String$toLower = _String_toLower;
var $elm$core$String$toUpper = _String_toUpper;
var $stil4m$elm_syntax$Char$Extra$unicodeIsLowerFast = function (c) {
	var code = $elm$core$Char$toCode(c);
	var cString = $elm$core$String$fromChar(c);
	return $stil4m$elm_syntax$Char$Extra$charCodeIsLower(code) || ((_Utils_eq(
		$elm$core$String$toLower(cString),
		cString + '') && (!_Utils_eq(
		$elm$core$String$toUpper(cString),
		cString + ''))) ? ((code <= 836) || (((838 <= code) && (code <= 8559)) || (((8576 <= code) && (code <= 9423)) || ((9450 <= code) && (code <= 983040))))) : ((code < 43001) ? ((code < 8457) ? ((code < 590) ? (((311 <= code) && (code <= 312)) || (((396 <= code) && (code <= 397)) || (((409 <= code) && (code <= 411)) || (((426 <= code) && (code <= 427)) || (((441 <= code) && (code <= 442)) || (((445 <= code) && (code <= 447)) || ((code === 545) || ((563 <= code) && (code <= 569))))))))) : (((591 <= code) && (code <= 659)) || (((661 <= code) && (code <= 687)) || (((1019 <= code) && (code <= 1020)) || (((1376 <= code) && (code <= 1416)) || (((7424 <= code) && (code <= 7467)) || (((7531 <= code) && (code <= 7543)) || (((7545 <= code) && (code <= 7578)) || (((7829 <= code) && (code <= 7837)) || (code === 7839)))))))))) : ((code < 11376) ? ((code === 8458) || (((8462 <= code) && (code <= 8463)) || ((code === 8467) || ((code === 8495) || ((code === 8500) || ((code === 8505) || (((8508 <= code) && (code <= 8509)) || ((8518 <= code) && (code <= 8521))))))))) : ((code === 11377) || (((11379 <= code) && (code <= 11380)) || (((11382 <= code) && (code <= 11387)) || (((11491 <= code) && (code <= 11492)) || (((42799 <= code) && (code <= 42801)) || (((42865 <= code) && (code <= 42872)) || ((code === 42894) || (((42899 <= code) && (code <= 42901)) || ((code === 42927) || ((A2($elm$core$Basics$modBy, 2, code) === 1) && ((42963 <= code) && (code <= 42965)))))))))))))) : ((code < 120353) ? ((code < 119994) ? ((code === 43002) || (((43824 <= code) && (code <= 43866)) || (((43872 <= code) && (code <= 43880)) || (((119834 <= code) && (code <= 119859)) || (((119886 <= code) && (code <= 119892)) || (((119894 <= code) && (code <= 119911)) || (((119938 <= code) && (code <= 119963)) || ((119990 <= code) && (code <= 119993))))))))) : ((code === 119995) || (((119997 <= code) && (code <= 120003)) || (((120005 <= code) && (code <= 120015)) || (((120042 <= code) && (code <= 120067)) || (((120094 <= code) && (code <= 120119)) || (((120146 <= code) && (code <= 120171)) || (((120198 <= code) && (code <= 120223)) || (((120250 <= code) && (code <= 120275)) || ((120302 <= code) && (code <= 120327))))))))))) : ((code < 120655) ? (((120354 <= code) && (code <= 120379)) || (((120406 <= code) && (code <= 120431)) || (((120458 <= code) && (code <= 120485)) || (((120514 <= code) && (code <= 120538)) || (((120540 <= code) && (code <= 120545)) || (((120572 <= code) && (code <= 120596)) || (((120598 <= code) && (code <= 120603)) || ((120630 <= code) && (code <= 120654))))))))) : (((120656 <= code) && (code <= 120661)) || (((120688 <= code) && (code <= 120712)) || (((120714 <= code) && (code <= 120719)) || (((120746 <= code) && (code <= 120770)) || (((120772 <= code) && (code <= 120777)) || ((code === 120779) || (((122624 <= code) && (code <= 122633)) || (((122635 <= code) && (code <= 122654)) || ((122661 <= code) && (code <= 122666))))))))))))));
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode = A4($stil4m$elm_syntax$ParserFast$ifFollowedByWhileValidateMapWithRangeWithoutLinebreak, $stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Char$Extra$unicodeIsLowerFast, $stil4m$elm_syntax$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast, $stil4m$elm_syntax$Elm$Parser$Tokens$isNotReserved);
var $stil4m$elm_syntax$Elm$Syntax$Expression$GLSLExpression = function (a) {
	return {$: 'GLSLExpression', a: a};
};
var $stil4m$elm_syntax$ParserFast$atLeastOneWhile = function (isGood) {
	return $stil4m$elm_syntax$ParserFast$Parser(
		function (s0) {
			var s1 = A6($stil4m$elm_syntax$ParserFast$skipWhileHelp, isGood, s0.offset, s0.row, s0.col, s0.src, s0.indent);
			return (!(s0.offset - s1.offset)) ? A2(
				$stil4m$elm_syntax$ParserFast$Bad,
				false,
				A2($stil4m$elm_syntax$ParserFast$ExpectingAnyChar, s0.row, s0.col)) : A2(
				$stil4m$elm_syntax$ParserFast$Good,
				A3($elm$core$String$slice, s0.offset, s1.offset, s0.src),
				s1);
		});
};
var $stil4m$elm_syntax$ParserFast$loopUntilHelp = F7(
	function (committedSoFar, endParser, element, soFar, reduce, foldedToRes, s0) {
		loopUntilHelp:
		while (true) {
			var parseEnd = endParser.a;
			var parseElement = element.a;
			var _v0 = parseEnd(s0);
			if (_v0.$ === 'Good') {
				var s1 = _v0.b;
				return A2(
					$stil4m$elm_syntax$ParserFast$Good,
					foldedToRes(soFar),
					s1);
			} else {
				var endCommitted = _v0.a;
				var endX = _v0.b;
				if (endCommitted) {
					return A2($stil4m$elm_syntax$ParserFast$Bad, true, endX);
				} else {
					var _v1 = parseElement(s0);
					if (_v1.$ === 'Good') {
						var elementResult = _v1.a;
						var s1 = _v1.b;
						var $temp$committedSoFar = true,
							$temp$endParser = endParser,
							$temp$element = element,
							$temp$soFar = A2(reduce, elementResult, soFar),
							$temp$reduce = reduce,
							$temp$foldedToRes = foldedToRes,
							$temp$s0 = s1;
						committedSoFar = $temp$committedSoFar;
						endParser = $temp$endParser;
						element = $temp$element;
						soFar = $temp$soFar;
						reduce = $temp$reduce;
						foldedToRes = $temp$foldedToRes;
						s0 = $temp$s0;
						continue loopUntilHelp;
					} else {
						var elementCommitted = _v1.a;
						var x = _v1.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, committedSoFar || elementCommitted, x);
					}
				}
			}
		}
	});
var $stil4m$elm_syntax$ParserFast$loopUntil = F5(
	function (endParser, element, initialFolded, reduce, foldedToRes) {
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s) {
				return A7($stil4m$elm_syntax$ParserFast$loopUntilHelp, false, endParser, element, initialFolded, reduce, foldedToRes, s);
			});
	});
var $stil4m$elm_syntax$ParserFast$mapWithRange = F2(
	function (combineStartAndResult, _v0) {
		var parse = _v0.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var a = _v1.a;
					var s1 = _v1.b;
					return A2(
						$stil4m$elm_syntax$ParserFast$Good,
						A2(
							combineStartAndResult,
							{
								end: {column: s1.col, row: s1.row},
								start: {column: s0.col, row: s0.row}
							},
							a),
						s1);
				} else {
					var committed = _v1.a;
					var x = _v1.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
				}
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$glslExpressionAfterOpeningSquareBracket = A2(
	$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
	'glsl|',
	A2(
		$stil4m$elm_syntax$ParserFast$mapWithRange,
		F2(
			function (range, s) {
				return {
					comments: $stil4m$elm_syntax$Rope$empty,
					syntax: A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						{
							end: {column: range.end.column + 2, row: range.end.row},
							start: {column: range.start.column - 6, row: range.start.row}
						},
						$stil4m$elm_syntax$Elm$Syntax$Expression$GLSLExpression(s))
				};
			}),
		A5(
			$stil4m$elm_syntax$ParserFast$loopUntil,
			A2($stil4m$elm_syntax$ParserFast$symbol, '|]', _Utils_Tuple0),
			A2(
				$stil4m$elm_syntax$ParserFast$oneOf2,
				A2($stil4m$elm_syntax$ParserFast$symbol, '|', '|'),
				$stil4m$elm_syntax$ParserFast$atLeastOneWhile(
					function (c) {
						return !_Utils_eq(
							c,
							_Utils_chr('|'));
					})),
			'',
			F2(
				function (extension, soFar) {
					return soFar + (extension + '');
				}),
			$elm$core$Basics$identity)));
var $stil4m$elm_syntax$ParserFast$ExpectingKeyword = F3(
	function (a, b, c) {
		return {$: 'ExpectingKeyword', a: a, b: b, c: c};
	});
var $stil4m$elm_syntax$Char$Extra$isLatinAlphaNumOrUnderscoreFast = function (c) {
	var code = $elm$core$Char$toCode(c);
	return $stil4m$elm_syntax$Char$Extra$charCodeIsLower(code) || ($stil4m$elm_syntax$Char$Extra$charCodeIsUpper(code) || ($stil4m$elm_syntax$Char$Extra$charCodeIsDigit(code) || (code === 95)));
};
var $stil4m$elm_syntax$ParserFast$isSubCharAlphaNumOrUnderscore = F2(
	function (offset, string) {
		return A2(
			$elm$core$String$any,
			$stil4m$elm_syntax$Char$Extra$isLatinAlphaNumOrUnderscoreFast,
			A3($elm$core$String$slice, offset, offset + 1, string));
	});
var $stil4m$elm_syntax$ParserFast$keyword = F2(
	function (kwd, res) {
		var kwdLength = $elm$core$String$length(kwd);
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s) {
				var newOffset = s.offset + kwdLength;
				return (_Utils_eq(
					A3($elm$core$String$slice, s.offset, newOffset, s.src),
					kwd + '') && (!A2($stil4m$elm_syntax$ParserFast$isSubCharAlphaNumOrUnderscore, newOffset, s.src))) ? A2(
					$stil4m$elm_syntax$ParserFast$Good,
					res,
					{col: s.col + kwdLength, indent: s.indent, offset: newOffset, row: s.row, src: s.src}) : A2(
					$stil4m$elm_syntax$ParserFast$Bad,
					false,
					A3($stil4m$elm_syntax$ParserFast$ExpectingKeyword, s.row, s.col, kwd));
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Tokens$inToken = A2($stil4m$elm_syntax$ParserFast$keyword, 'in', _Utils_Tuple0);
var $stil4m$elm_syntax$ParserFast$keywordFollowedBy = F2(
	function (kwd, _v0) {
		var parseNext = _v0.a;
		var kwdLength = $elm$core$String$length(kwd);
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s) {
				var newOffset = s.offset + kwdLength;
				return (_Utils_eq(
					A3($elm$core$String$slice, s.offset, newOffset, s.src),
					kwd + '') && (!A2($stil4m$elm_syntax$ParserFast$isSubCharAlphaNumOrUnderscore, newOffset, s.src))) ? $stil4m$elm_syntax$ParserFast$pStepCommit(
					parseNext(
						{col: s.col + kwdLength, indent: s.indent, offset: newOffset, row: s.row, src: s.src})) : A2(
					$stil4m$elm_syntax$ParserFast$Bad,
					false,
					A3($stil4m$elm_syntax$ParserFast$ExpectingKeyword, s.row, s.col, kwd));
			});
	});
var $stil4m$elm_syntax$ParserFast$map2 = F3(
	function (func, _v0, _v1) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v2 = parseA(s0);
				if (_v2.$ === 'Bad') {
					var committed = _v2.a;
					var x = _v2.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
				} else {
					var a = _v2.a;
					var s1 = _v2.b;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var x = _v3.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var b = _v3.a;
						var s2 = _v3.b;
						return A2(
							$stil4m$elm_syntax$ParserFast$Good,
							A2(func, a, b),
							s2);
					}
				}
			});
	});
var $stil4m$elm_syntax$ParserFast$columnIndentAndThen = function (callback) {
	return $stil4m$elm_syntax$ParserFast$Parser(
		function (s) {
			var _v0 = A2(callback, s.col, s.indent);
			var parse = _v0.a;
			return parse(s);
		});
};
var $stil4m$elm_syntax$ParserFast$ExpectingCustom = F3(
	function (a, b, c) {
		return {$: 'ExpectingCustom', a: a, b: b, c: c};
	});
var $stil4m$elm_syntax$ParserFast$problem = function (msg) {
	return $stil4m$elm_syntax$ParserFast$Parser(
		function (s) {
			return A2(
				$stil4m$elm_syntax$ParserFast$Bad,
				false,
				A3($stil4m$elm_syntax$ParserFast$ExpectingCustom, s.row, s.col, msg));
		});
};
var $stil4m$elm_syntax$Elm$Parser$Layout$problemTopIndentation = $stil4m$elm_syntax$ParserFast$problem('must be on top indentation');
var $stil4m$elm_syntax$Elm$Parser$Layout$onTopIndentationFollowedBy = function (nextParser) {
	return $stil4m$elm_syntax$ParserFast$columnIndentAndThen(
		F2(
			function (column, indent) {
				return (!(column - indent)) ? nextParser : $stil4m$elm_syntax$Elm$Parser$Layout$problemTopIndentation;
			}));
};
var $stil4m$elm_syntax$ParserFast$skipWhileWhitespaceHelp = F5(
	function (offset, row, col, src, indent) {
		skipWhileWhitespaceHelp:
		while (true) {
			var _v0 = A3($elm$core$String$slice, offset, offset + 1, src);
			switch (_v0) {
				case ' ':
					var $temp$offset = offset + 1,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$src = src,
						$temp$indent = indent;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					continue skipWhileWhitespaceHelp;
				case '\n':
					var $temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$src = src,
						$temp$indent = indent;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					continue skipWhileWhitespaceHelp;
				case '\u000D':
					var $temp$offset = offset + 1,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$src = src,
						$temp$indent = indent;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					continue skipWhileWhitespaceHelp;
				default:
					return {col: col, indent: indent, offset: offset, row: row, src: src};
			}
		}
	});
var $stil4m$elm_syntax$ParserFast$followedBySkipWhileWhitespace = function (_v0) {
	var parseBefore = _v0.a;
	return $stil4m$elm_syntax$ParserFast$Parser(
		function (s0) {
			var _v1 = parseBefore(s0);
			if (_v1.$ === 'Good') {
				var res = _v1.a;
				var s1 = _v1.b;
				var s2 = A5($stil4m$elm_syntax$ParserFast$skipWhileWhitespaceHelp, s1.offset, s1.row, s1.col, s1.src, s1.indent);
				return A2($stil4m$elm_syntax$ParserFast$Good, res, s2);
			} else {
				var bad = _v1;
				return bad;
			}
		});
};
var $stil4m$elm_syntax$ParserFast$map2OrSucceed = F4(
	function (func, _v0, _v1, fallback) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v2 = parseA(s0);
				if (_v2.$ === 'Bad') {
					var c1 = _v2.a;
					var x = _v2.b;
					return c1 ? A2($stil4m$elm_syntax$ParserFast$Bad, true, x) : A2($stil4m$elm_syntax$ParserFast$Good, fallback, s0);
				} else {
					var a = _v2.a;
					var s1 = _v2.b;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var x = _v3.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var b = _v3.a;
						var s2 = _v3.b;
						return A2(
							$stil4m$elm_syntax$ParserFast$Good,
							A2(func, a, b),
							s2);
					}
				}
			});
	});
var $stil4m$elm_syntax$ParserFast$offsetSourceAndThen = function (callback) {
	return $stil4m$elm_syntax$ParserFast$Parser(
		function (s) {
			var _v0 = A2(callback, s.offset, s.src);
			var parse = _v0.a;
			return parse(s);
		});
};
var $stil4m$elm_syntax$Elm$Parser$Comments$problemUnexpectedDocumentation = $stil4m$elm_syntax$ParserFast$problem('unexpected documentation comment');
var $stil4m$elm_syntax$Elm$Parser$Comments$multilineComment = $stil4m$elm_syntax$ParserFast$offsetSourceAndThen(
	F2(
		function (offset, source) {
			var _v0 = A3($elm$core$String$slice, offset + 2, offset + 3, source);
			if (_v0 === '|') {
				return $stil4m$elm_syntax$Elm$Parser$Comments$problemUnexpectedDocumentation;
			} else {
				return $stil4m$elm_syntax$Elm$Parser$Comments$multiLineCommentNoCheck;
			}
		}));
var $stil4m$elm_syntax$Rope$Leaf = F2(
	function (a, b) {
		return {$: 'Leaf', a: a, b: b};
	});
var $stil4m$elm_syntax$Rope$one = function (onlyElement) {
	return A2($stil4m$elm_syntax$Rope$Leaf, onlyElement, _Utils_Tuple0);
};
var $stil4m$elm_syntax$ParserFast$loopWhileSucceedsHelp = F5(
	function (element, soFar, reduce, foldedToRes, s0) {
		loopWhileSucceedsHelp:
		while (true) {
			var parseElement = element.a;
			var _v0 = parseElement(s0);
			if (_v0.$ === 'Good') {
				var elementResult = _v0.a;
				var s1 = _v0.b;
				var $temp$element = element,
					$temp$soFar = A2(reduce, elementResult, soFar),
					$temp$reduce = reduce,
					$temp$foldedToRes = foldedToRes,
					$temp$s0 = s1;
				element = $temp$element;
				soFar = $temp$soFar;
				reduce = $temp$reduce;
				foldedToRes = $temp$foldedToRes;
				s0 = $temp$s0;
				continue loopWhileSucceedsHelp;
			} else {
				var elementCommitted = _v0.a;
				var x = _v0.b;
				return elementCommitted ? A2($stil4m$elm_syntax$ParserFast$Bad, true, x) : A2(
					$stil4m$elm_syntax$ParserFast$Good,
					foldedToRes(soFar),
					s0);
			}
		}
	});
var $stil4m$elm_syntax$ParserFast$loopWhileSucceeds = F4(
	function (element, initialFolded, reduce, foldedToRes) {
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s) {
				return A5($stil4m$elm_syntax$ParserFast$loopWhileSucceedsHelp, element, initialFolded, reduce, foldedToRes, s);
			});
	});
var $stil4m$elm_syntax$Rope$prependToFilled = F2(
	function (rightLikelyFilled, left) {
		if (left.$ === 'Nothing') {
			return $elm$core$Maybe$Just(rightLikelyFilled);
		} else {
			var leftLikelyFilled = left.a;
			return $elm$core$Maybe$Just(
				A2($stil4m$elm_syntax$Rope$Branch2, leftLikelyFilled, rightLikelyFilled));
		}
	});
var $stil4m$elm_syntax$ParserFast$whileMapWithRange = F2(
	function (isGood, rangeAndConsumedStringToRes) {
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var s1 = A6($stil4m$elm_syntax$ParserFast$skipWhileHelp, isGood, s0.offset, s0.row, s0.col, s0.src, s0.indent);
				return A2(
					$stil4m$elm_syntax$ParserFast$Good,
					A2(
						rangeAndConsumedStringToRes,
						{
							end: {column: s1.col, row: s1.row},
							start: {column: s0.col, row: s0.row}
						},
						A3($elm$core$String$slice, s0.offset, s1.offset, s0.src)),
					s1);
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Comments$singleLineComment = A2(
	$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
	'--',
	A2(
		$stil4m$elm_syntax$ParserFast$whileMapWithRange,
		function (c) {
			switch (c.valueOf()) {
				case '\u000D':
					return false;
				case '\n':
					return false;
				default:
					return !$stil4m$elm_syntax$Char$Extra$isUtf16Surrogate(c);
			}
		},
		F2(
			function (range, content) {
				return A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					{
						end: {column: range.end.column, row: range.start.row},
						start: {column: range.start.column - 2, row: range.start.row}
					},
					'--' + content);
			})));
var $stil4m$elm_syntax$Elm$Parser$Layout$whitespaceAndCommentsOrEmptyLoop = A4(
	$stil4m$elm_syntax$ParserFast$loopWhileSucceeds,
	$stil4m$elm_syntax$ParserFast$followedBySkipWhileWhitespace(
		A2($stil4m$elm_syntax$ParserFast$oneOf2, $stil4m$elm_syntax$Elm$Parser$Comments$singleLineComment, $stil4m$elm_syntax$Elm$Parser$Comments$multilineComment)),
	$stil4m$elm_syntax$Rope$empty,
	F2(
		function (right, soFar) {
			return A2(
				$stil4m$elm_syntax$Rope$prependToFilled,
				$stil4m$elm_syntax$Rope$one(right),
				soFar);
		}),
	$elm$core$Basics$identity);
var $stil4m$elm_syntax$Elm$Parser$Layout$fromMultilineCommentNodeOrEmptyOnProblem = A4(
	$stil4m$elm_syntax$ParserFast$map2OrSucceed,
	F2(
		function (comment, commentsAfter) {
			return A2(
				$stil4m$elm_syntax$Rope$filledPrependTo,
				commentsAfter,
				$stil4m$elm_syntax$Rope$one(comment));
		}),
	$stil4m$elm_syntax$ParserFast$followedBySkipWhileWhitespace($stil4m$elm_syntax$Elm$Parser$Comments$multilineComment),
	$stil4m$elm_syntax$Elm$Parser$Layout$whitespaceAndCommentsOrEmptyLoop,
	$stil4m$elm_syntax$Rope$empty);
var $stil4m$elm_syntax$Elm$Parser$Layout$fromSingleLineCommentNode = A3(
	$stil4m$elm_syntax$ParserFast$map2,
	F2(
		function (content, commentsAfter) {
			return A2(
				$stil4m$elm_syntax$Rope$filledPrependTo,
				commentsAfter,
				$stil4m$elm_syntax$Rope$one(content));
		}),
	$stil4m$elm_syntax$ParserFast$followedBySkipWhileWhitespace($stil4m$elm_syntax$Elm$Parser$Comments$singleLineComment),
	$stil4m$elm_syntax$Elm$Parser$Layout$whitespaceAndCommentsOrEmptyLoop);
var $stil4m$elm_syntax$ParserFast$offsetSourceAndThenOrSucceed = F2(
	function (callback, fallback) {
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s) {
				var _v0 = A2(callback, s.offset, s.src);
				if (_v0.$ === 'Nothing') {
					return A2($stil4m$elm_syntax$ParserFast$Good, fallback, s);
				} else {
					var parse = _v0.a.a;
					return parse(s);
				}
			});
	});
var $stil4m$elm_syntax$ParserFast$skipWhileWhitespaceFollowedBy = function (_v0) {
	var parseNext = _v0.a;
	return $stil4m$elm_syntax$ParserFast$Parser(
		function (s0) {
			var s1 = A5($stil4m$elm_syntax$ParserFast$skipWhileWhitespaceHelp, s0.offset, s0.row, s0.col, s0.src, s0.indent);
			return $stil4m$elm_syntax$ParserFast$pStepCommit(
				parseNext(s1));
		});
};
var $stil4m$elm_syntax$Elm$Parser$Layout$whitespaceAndCommentsOrEmpty = $stil4m$elm_syntax$ParserFast$skipWhileWhitespaceFollowedBy(
	A2(
		$stil4m$elm_syntax$ParserFast$offsetSourceAndThenOrSucceed,
		F2(
			function (offset, source) {
				var _v0 = A3($elm$core$String$slice, offset, offset + 2, source);
				switch (_v0) {
					case '--':
						return $elm$core$Maybe$Just($stil4m$elm_syntax$Elm$Parser$Layout$fromSingleLineCommentNode);
					case '{-':
						return $elm$core$Maybe$Just($stil4m$elm_syntax$Elm$Parser$Layout$fromMultilineCommentNodeOrEmptyOnProblem);
					default:
						return $elm$core$Maybe$Nothing;
				}
			}),
		$stil4m$elm_syntax$Rope$empty));
var $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout = $stil4m$elm_syntax$Elm$Parser$Layout$whitespaceAndCommentsOrEmpty;
var $stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedBy = function (nextParser) {
	return A3(
		$stil4m$elm_syntax$ParserFast$map2,
		F2(
			function (commentsBefore, after) {
				return {comments: commentsBefore, syntax: after};
			}),
		$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
		$stil4m$elm_syntax$Elm$Parser$Layout$onTopIndentationFollowedBy(nextParser));
};
var $stil4m$elm_syntax$ParserFast$lazy = function (thunk) {
	return $stil4m$elm_syntax$ParserFast$Parser(
		function (s) {
			var _v0 = thunk(_Utils_Tuple0);
			var parse = _v0.a;
			return parse(s);
		});
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Literal = function (a) {
	return {$: 'Literal', a: a};
};
var $stil4m$elm_syntax$ParserFast$atLeastOneWhileWithoutLinebreak = function (isGood) {
	return $stil4m$elm_syntax$ParserFast$Parser(
		function (s0) {
			var s1 = A6($stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp, isGood, s0.offset, s0.row, s0.col, s0.src, s0.indent);
			return (!(s0.offset - s1.offset)) ? A2(
				$stil4m$elm_syntax$ParserFast$Bad,
				false,
				A2($stil4m$elm_syntax$ParserFast$ExpectingAnyChar, s0.row, s0.col)) : A2(
				$stil4m$elm_syntax$ParserFast$Good,
				A3($elm$core$String$slice, s0.offset, s1.offset, s0.src),
				s1);
		});
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$singleQuotedStringLiteralAfterDoubleQuote = A5(
	$stil4m$elm_syntax$ParserFast$loopUntil,
	A2($stil4m$elm_syntax$ParserFast$symbol, '\"', _Utils_Tuple0),
	A2(
		$stil4m$elm_syntax$ParserFast$oneOf2,
		A2(
			$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
			'\\',
			$stil4m$elm_syntax$Elm$Parser$Tokens$escapedCharValueMap($elm$core$String$fromChar)),
		$stil4m$elm_syntax$ParserFast$atLeastOneWhileWithoutLinebreak(
			function (c) {
				switch (c.valueOf()) {
					case '\"':
						return false;
					case '\\':
						return false;
					default:
						return !$stil4m$elm_syntax$Char$Extra$isUtf16Surrogate(c);
				}
			})),
	'',
	F2(
		function (extension, soFar) {
			return soFar + (extension + '');
		}),
	$elm$core$Basics$identity);
var $stil4m$elm_syntax$Elm$Parser$Tokens$tripleQuotedStringLiteralOfterTripleDoubleQuote = A5(
	$stil4m$elm_syntax$ParserFast$loopUntil,
	A2($stil4m$elm_syntax$ParserFast$symbol, '\"\"\"', _Utils_Tuple0),
	A3(
		$stil4m$elm_syntax$ParserFast$oneOf3,
		A2($stil4m$elm_syntax$ParserFast$symbol, '\"', '\"'),
		A2(
			$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
			'\\',
			$stil4m$elm_syntax$Elm$Parser$Tokens$escapedCharValueMap($elm$core$String$fromChar)),
		$stil4m$elm_syntax$ParserFast$atLeastOneWhile(
			function (c) {
				switch (c.valueOf()) {
					case '\"':
						return false;
					case '\\':
						return false;
					default:
						return !$stil4m$elm_syntax$Char$Extra$isUtf16Surrogate(c);
				}
			})),
	'',
	F2(
		function (extension, soFar) {
			return soFar + (extension + '');
		}),
	$elm$core$Basics$identity);
var $stil4m$elm_syntax$Elm$Parser$Tokens$singleOrTripleQuotedStringLiteralMapWithRange = function (rangeAndStringToRes) {
	return A2(
		$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
		'\"',
		A4(
			$stil4m$elm_syntax$ParserFast$oneOf2MapWithStartRowColumnAndEndRowColumn,
			F5(
				function (startRow, startColumn, string, endRow, endColumn) {
					return A2(
						rangeAndStringToRes,
						{
							end: {column: endColumn, row: endRow},
							start: {column: startColumn - 1, row: startRow}
						},
						string);
				}),
			A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '\"\"', $stil4m$elm_syntax$Elm$Parser$Tokens$tripleQuotedStringLiteralOfterTripleDoubleQuote),
			F5(
				function (startRow, startColumn, string, endRow, endColumn) {
					return A2(
						rangeAndStringToRes,
						{
							end: {column: endColumn, row: endRow},
							start: {column: startColumn - 1, row: startRow}
						},
						string);
				}),
			$stil4m$elm_syntax$Elm$Parser$Tokens$singleQuotedStringLiteralAfterDoubleQuote));
};
var $stil4m$elm_syntax$Elm$Parser$Expression$literalExpression = $stil4m$elm_syntax$Elm$Parser$Tokens$singleOrTripleQuotedStringLiteralMapWithRange(
	F2(
		function (range, string) {
			return {
				comments: $stil4m$elm_syntax$Rope$empty,
				syntax: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Expression$Literal(string))
			};
		}));
var $stil4m$elm_syntax$ParserFast$loopWhileSucceedsOntoResultFromParser = F4(
	function (element, _v0, reduce, foldedToRes) {
		var parseInitialFolded = _v0.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v1 = parseInitialFolded(s0);
				if (_v1.$ === 'Good') {
					var initialFolded = _v1.a;
					var s1 = _v1.b;
					return A5($stil4m$elm_syntax$ParserFast$loopWhileSucceedsHelp, element, initialFolded, reduce, foldedToRes, s1);
				} else {
					var committed = _v1.a;
					var x = _v1.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
				}
			});
	});
var $stil4m$elm_syntax$Rope$prependTo = F2(
	function (right, left) {
		if (left.$ === 'Nothing') {
			return right;
		} else {
			var leftLikelyFilled = left.a;
			if (right.$ === 'Nothing') {
				return left;
			} else {
				var rightLikelyFilled = right.a;
				return $elm$core$Maybe$Just(
					A2($stil4m$elm_syntax$Rope$Branch2, leftLikelyFilled, rightLikelyFilled));
			}
		}
	});
var $stil4m$elm_syntax$ParserWithComments$many = function (p) {
	return A4(
		$stil4m$elm_syntax$ParserFast$loopWhileSucceeds,
		p,
		_Utils_Tuple2($stil4m$elm_syntax$Rope$empty, _List_Nil),
		F2(
			function (pResult, _v0) {
				var commentsSoFar = _v0.a;
				var itemsSoFar = _v0.b;
				return _Utils_Tuple2(
					A2($stil4m$elm_syntax$Rope$prependTo, pResult.comments, commentsSoFar),
					A2($elm$core$List$cons, pResult.syntax, itemsSoFar));
			}),
		function (_v1) {
			var commentsSoFar = _v1.a;
			var itemsSoFar = _v1.b;
			return {
				comments: commentsSoFar,
				syntax: $elm$core$List$reverse(itemsSoFar)
			};
		});
};
var $stil4m$elm_syntax$ParserWithComments$manyWithoutReverse = function (p) {
	return A4(
		$stil4m$elm_syntax$ParserFast$loopWhileSucceeds,
		p,
		_Utils_Tuple2($stil4m$elm_syntax$Rope$empty, _List_Nil),
		F2(
			function (pResult, _v0) {
				var commentsSoFar = _v0.a;
				var itemsSoFar = _v0.b;
				return _Utils_Tuple2(
					A2($stil4m$elm_syntax$Rope$prependTo, pResult.comments, commentsSoFar),
					A2($elm$core$List$cons, pResult.syntax, itemsSoFar));
			}),
		function (_v1) {
			var commentsSoFar = _v1.a;
			var itemsSoFar = _v1.b;
			return {comments: commentsSoFar, syntax: itemsSoFar};
		});
};
var $stil4m$elm_syntax$ParserFast$map = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var a = _v1.a;
					var s1 = _v1.b;
					return A2(
						$stil4m$elm_syntax$ParserFast$Good,
						func(a),
						s1);
				} else {
					var committed = _v1.a;
					var x = _v1.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
				}
			});
	});
var $stil4m$elm_syntax$ParserFast$map3 = F4(
	function (func, _v0, _v1, _v2) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		var parseC = _v2.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v3 = parseA(s0);
				if (_v3.$ === 'Bad') {
					var committed = _v3.a;
					var x = _v3.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
				} else {
					var a = _v3.a;
					var s1 = _v3.b;
					var _v4 = parseB(s1);
					if (_v4.$ === 'Bad') {
						var x = _v4.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var b = _v4.a;
						var s2 = _v4.b;
						var _v5 = parseC(s2);
						if (_v5.$ === 'Bad') {
							var x = _v5.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var c = _v5.a;
							var s3 = _v5.b;
							return A2(
								$stil4m$elm_syntax$ParserFast$Good,
								A3(func, a, b, c),
								s3);
						}
					}
				}
			});
	});
var $stil4m$elm_syntax$ParserFast$map3WithStartLocation = F4(
	function (func, _v0, _v1, _v2) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		var parseC = _v2.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v3 = parseA(s0);
				if (_v3.$ === 'Bad') {
					var committed = _v3.a;
					var x = _v3.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
				} else {
					var a = _v3.a;
					var s1 = _v3.b;
					var _v4 = parseB(s1);
					if (_v4.$ === 'Bad') {
						var x = _v4.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var b = _v4.a;
						var s2 = _v4.b;
						var _v5 = parseC(s2);
						if (_v5.$ === 'Bad') {
							var x = _v5.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var c = _v5.a;
							var s3 = _v5.b;
							return A2(
								$stil4m$elm_syntax$ParserFast$Good,
								A4(
									func,
									{column: s0.col, row: s0.row},
									a,
									b,
									c),
								s3);
						}
					}
				}
			});
	});
var $stil4m$elm_syntax$ParserFast$map4 = F5(
	function (func, _v0, _v1, _v2, _v3) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		var parseC = _v2.a;
		var parseD = _v3.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v4 = parseA(s0);
				if (_v4.$ === 'Bad') {
					var committed = _v4.a;
					var x = _v4.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
				} else {
					var a = _v4.a;
					var s1 = _v4.b;
					var _v5 = parseB(s1);
					if (_v5.$ === 'Bad') {
						var x = _v5.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var b = _v5.a;
						var s2 = _v5.b;
						var _v6 = parseC(s2);
						if (_v6.$ === 'Bad') {
							var x = _v6.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var c = _v6.a;
							var s3 = _v6.b;
							var _v7 = parseD(s3);
							if (_v7.$ === 'Bad') {
								var x = _v7.b;
								return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
							} else {
								var d = _v7.a;
								var s4 = _v7.b;
								return A2(
									$stil4m$elm_syntax$ParserFast$Good,
									A4(func, a, b, c, d),
									s4);
							}
						}
					}
				}
			});
	});
var $stil4m$elm_syntax$ParserFast$map4OrSucceed = F6(
	function (func, _v0, _v1, _v2, _v3, fallback) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		var parseC = _v2.a;
		var parseD = _v3.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v4 = parseA(s0);
				if (_v4.$ === 'Bad') {
					var c1 = _v4.a;
					var x = _v4.b;
					return c1 ? A2($stil4m$elm_syntax$ParserFast$Bad, true, x) : A2($stil4m$elm_syntax$ParserFast$Good, fallback, s0);
				} else {
					var a = _v4.a;
					var s1 = _v4.b;
					var _v5 = parseB(s1);
					if (_v5.$ === 'Bad') {
						var x = _v5.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var b = _v5.a;
						var s2 = _v5.b;
						var _v6 = parseC(s2);
						if (_v6.$ === 'Bad') {
							var x = _v6.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var c = _v6.a;
							var s3 = _v6.b;
							var _v7 = parseD(s3);
							if (_v7.$ === 'Bad') {
								var x = _v7.b;
								return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
							} else {
								var d = _v7.a;
								var s4 = _v7.b;
								return A2(
									$stil4m$elm_syntax$ParserFast$Good,
									A4(func, a, b, c, d),
									s4);
							}
						}
					}
				}
			});
	});
var $stil4m$elm_syntax$ParserFast$map4WithRange = F5(
	function (func, _v0, _v1, _v2, _v3) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		var parseC = _v2.a;
		var parseD = _v3.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v4 = parseA(s0);
				if (_v4.$ === 'Bad') {
					var committed = _v4.a;
					var x = _v4.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
				} else {
					var a = _v4.a;
					var s1 = _v4.b;
					var _v5 = parseB(s1);
					if (_v5.$ === 'Bad') {
						var x = _v5.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var b = _v5.a;
						var s2 = _v5.b;
						var _v6 = parseC(s2);
						if (_v6.$ === 'Bad') {
							var x = _v6.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var c = _v6.a;
							var s3 = _v6.b;
							var _v7 = parseD(s3);
							if (_v7.$ === 'Bad') {
								var x = _v7.b;
								return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
							} else {
								var d = _v7.a;
								var s4 = _v7.b;
								return A2(
									$stil4m$elm_syntax$ParserFast$Good,
									A5(
										func,
										{
											end: {column: s4.col, row: s4.row},
											start: {column: s0.col, row: s0.row}
										},
										a,
										b,
										c,
										d),
									s4);
							}
						}
					}
				}
			});
	});
var $stil4m$elm_syntax$ParserFast$map5 = F6(
	function (func, _v0, _v1, _v2, _v3, _v4) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		var parseC = _v2.a;
		var parseD = _v3.a;
		var parseE = _v4.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v5 = parseA(s0);
				if (_v5.$ === 'Bad') {
					var committed = _v5.a;
					var x = _v5.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
				} else {
					var a = _v5.a;
					var s1 = _v5.b;
					var _v6 = parseB(s1);
					if (_v6.$ === 'Bad') {
						var x = _v6.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var b = _v6.a;
						var s2 = _v6.b;
						var _v7 = parseC(s2);
						if (_v7.$ === 'Bad') {
							var x = _v7.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var c = _v7.a;
							var s3 = _v7.b;
							var _v8 = parseD(s3);
							if (_v8.$ === 'Bad') {
								var x = _v8.b;
								return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
							} else {
								var d = _v8.a;
								var s4 = _v8.b;
								var _v9 = parseE(s4);
								if (_v9.$ === 'Bad') {
									var x = _v9.b;
									return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
								} else {
									var e = _v9.a;
									var s5 = _v9.b;
									return A2(
										$stil4m$elm_syntax$ParserFast$Good,
										A5(func, a, b, c, d, e),
										s5);
								}
							}
						}
					}
				}
			});
	});
var $stil4m$elm_syntax$ParserFast$map5WithRange = F6(
	function (func, _v0, _v1, _v2, _v3, _v4) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		var parseC = _v2.a;
		var parseD = _v3.a;
		var parseE = _v4.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v5 = parseA(s0);
				if (_v5.$ === 'Bad') {
					var committed = _v5.a;
					var x = _v5.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
				} else {
					var a = _v5.a;
					var s1 = _v5.b;
					var _v6 = parseB(s1);
					if (_v6.$ === 'Bad') {
						var x = _v6.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var b = _v6.a;
						var s2 = _v6.b;
						var _v7 = parseC(s2);
						if (_v7.$ === 'Bad') {
							var x = _v7.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var c = _v7.a;
							var s3 = _v7.b;
							var _v8 = parseD(s3);
							if (_v8.$ === 'Bad') {
								var x = _v8.b;
								return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
							} else {
								var d = _v8.a;
								var s4 = _v8.b;
								var _v9 = parseE(s4);
								if (_v9.$ === 'Bad') {
									var x = _v9.b;
									return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
								} else {
									var e = _v9.a;
									var s5 = _v9.b;
									return A2(
										$stil4m$elm_syntax$ParserFast$Good,
										A6(
											func,
											{
												end: {column: s5.col, row: s5.row},
												start: {column: s0.col, row: s0.row}
											},
											a,
											b,
											c,
											d,
											e),
										s5);
								}
							}
						}
					}
				}
			});
	});
var $stil4m$elm_syntax$ParserFast$map5WithStartLocation = F6(
	function (func, _v0, _v1, _v2, _v3, _v4) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		var parseC = _v2.a;
		var parseD = _v3.a;
		var parseE = _v4.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v5 = parseA(s0);
				if (_v5.$ === 'Bad') {
					var committed = _v5.a;
					var x = _v5.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
				} else {
					var a = _v5.a;
					var s1 = _v5.b;
					var _v6 = parseB(s1);
					if (_v6.$ === 'Bad') {
						var x = _v6.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var b = _v6.a;
						var s2 = _v6.b;
						var _v7 = parseC(s2);
						if (_v7.$ === 'Bad') {
							var x = _v7.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var c = _v7.a;
							var s3 = _v7.b;
							var _v8 = parseD(s3);
							if (_v8.$ === 'Bad') {
								var x = _v8.b;
								return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
							} else {
								var d = _v8.a;
								var s4 = _v8.b;
								var _v9 = parseE(s4);
								if (_v9.$ === 'Bad') {
									var x = _v9.b;
									return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
								} else {
									var e = _v9.a;
									var s5 = _v9.b;
									return A2(
										$stil4m$elm_syntax$ParserFast$Good,
										A6(
											func,
											{column: s0.col, row: s0.row},
											a,
											b,
											c,
											d,
											e),
										s5);
								}
							}
						}
					}
				}
			});
	});
var $stil4m$elm_syntax$ParserFast$map6WithStartLocation = F7(
	function (func, _v0, _v1, _v2, _v3, _v4, _v5) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		var parseC = _v2.a;
		var parseD = _v3.a;
		var parseE = _v4.a;
		var parseF = _v5.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v6 = parseA(s0);
				if (_v6.$ === 'Bad') {
					var committed = _v6.a;
					var x = _v6.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
				} else {
					var a = _v6.a;
					var s1 = _v6.b;
					var _v7 = parseB(s1);
					if (_v7.$ === 'Bad') {
						var x = _v7.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var b = _v7.a;
						var s2 = _v7.b;
						var _v8 = parseC(s2);
						if (_v8.$ === 'Bad') {
							var x = _v8.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var c = _v8.a;
							var s3 = _v8.b;
							var _v9 = parseD(s3);
							if (_v9.$ === 'Bad') {
								var x = _v9.b;
								return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
							} else {
								var d = _v9.a;
								var s4 = _v9.b;
								var _v10 = parseE(s4);
								if (_v10.$ === 'Bad') {
									var x = _v10.b;
									return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
								} else {
									var e = _v10.a;
									var s5 = _v10.b;
									var _v11 = parseF(s5);
									if (_v11.$ === 'Bad') {
										var x = _v11.b;
										return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
									} else {
										var f = _v11.a;
										var s6 = _v11.b;
										return A2(
											$stil4m$elm_syntax$ParserFast$Good,
											A7(
												func,
												{column: s0.col, row: s0.row},
												a,
												b,
												c,
												d,
												e,
												f),
											s6);
									}
								}
							}
						}
					}
				}
			});
	});
var $stil4m$elm_syntax$ParserFast$map8WithStartLocation = F9(
	function (func, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		var parseC = _v2.a;
		var parseD = _v3.a;
		var parseE = _v4.a;
		var parseF = _v5.a;
		var parseG = _v6.a;
		var parseH = _v7.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v8 = parseA(s0);
				if (_v8.$ === 'Bad') {
					var committed = _v8.a;
					var x = _v8.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
				} else {
					var a = _v8.a;
					var s1 = _v8.b;
					var _v9 = parseB(s1);
					if (_v9.$ === 'Bad') {
						var x = _v9.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var b = _v9.a;
						var s2 = _v9.b;
						var _v10 = parseC(s2);
						if (_v10.$ === 'Bad') {
							var x = _v10.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var c = _v10.a;
							var s3 = _v10.b;
							var _v11 = parseD(s3);
							if (_v11.$ === 'Bad') {
								var x = _v11.b;
								return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
							} else {
								var d = _v11.a;
								var s4 = _v11.b;
								var _v12 = parseE(s4);
								if (_v12.$ === 'Bad') {
									var x = _v12.b;
									return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
								} else {
									var e = _v12.a;
									var s5 = _v12.b;
									var _v13 = parseF(s5);
									if (_v13.$ === 'Bad') {
										var x = _v13.b;
										return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
									} else {
										var f = _v13.a;
										var s6 = _v13.b;
										var _v14 = parseG(s6);
										if (_v14.$ === 'Bad') {
											var x = _v14.b;
											return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
										} else {
											var g = _v14.a;
											var s7 = _v14.b;
											var _v15 = parseH(s7);
											if (_v15.$ === 'Bad') {
												var x = _v15.b;
												return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
											} else {
												var h = _v15.a;
												var s8 = _v15.b;
												return A2(
													$stil4m$elm_syntax$ParserFast$Good,
													A9(
														func,
														{column: s0.col, row: s0.row},
														a,
														b,
														c,
														d,
														e,
														f,
														g,
														h),
													s8);
											}
										}
									}
								}
							}
						}
					}
				}
			});
	});
var $stil4m$elm_syntax$ParserFast$validateEndColumnIndentation = F3(
	function (isOkay, problemOnIsNotOkay, _v0) {
		var parse = _v0.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var good = _v1;
					var s1 = good.b;
					return A2(isOkay, s1.col, s1.indent) ? good : A2(
						$stil4m$elm_syntax$ParserFast$Bad,
						true,
						A3($stil4m$elm_syntax$ParserFast$ExpectingCustom, s1.row, s1.col, problemOnIsNotOkay));
				} else {
					var bad = _v1;
					return bad;
				}
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Layout$endsPositivelyIndented = function (parser) {
	return A3(
		$stil4m$elm_syntax$ParserFast$validateEndColumnIndentation,
		F2(
			function (column, indent) {
				return _Utils_cmp(column, indent) > 0;
			}),
		'must be positively indented',
		parser);
};
var $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout = $stil4m$elm_syntax$Elm$Parser$Layout$endsPositivelyIndented($stil4m$elm_syntax$Elm$Parser$Layout$whitespaceAndCommentsOrEmpty);
var $stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides = function (x) {
	return A4(
		$stil4m$elm_syntax$ParserFast$map3,
		F3(
			function (before, v, after) {
				return {
					comments: A2(
						$stil4m$elm_syntax$Rope$prependTo,
						after,
						A2($stil4m$elm_syntax$Rope$prependTo, v.comments, before)),
					syntax: v.syntax
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		x,
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout);
};
var $stil4m$elm_syntax$Elm$Parser$Expression$multiRecordAccess = A4(
	$stil4m$elm_syntax$ParserFast$loopWhileSucceeds,
	A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '.', $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode),
	_List_Nil,
	$elm$core$List$cons,
	$elm$core$List$reverse);
var $stil4m$elm_syntax$Elm$Parser$Expression$multiRecordAccessMap = function (fieldsToRes) {
	return A4(
		$stil4m$elm_syntax$ParserFast$loopWhileSucceeds,
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '.', $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode),
		_List_Nil,
		$elm$core$List$cons,
		function (reversed) {
			return fieldsToRes(
				$elm$core$List$reverse(reversed));
		});
};
var $stil4m$elm_syntax$Elm$Parser$Expression$negationWhitespaceProblem = $stil4m$elm_syntax$ParserFast$problem('if a negation sign is not preceded by whitespace, it\'s considered subtraction');
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $stil4m$elm_syntax$Elm$Parser$Tokens$equal = A2($stil4m$elm_syntax$ParserFast$symbol, '=', _Utils_Tuple0);
var $stil4m$elm_syntax$Elm$Syntax$Pattern$AsPattern = F2(
	function (a, b) {
		return {$: 'AsPattern', a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Pattern$ListPattern = function (a) {
	return {$: 'ListPattern', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern = F2(
	function (a, b) {
		return {$: 'NamedPattern', a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Pattern$ParenthesizedPattern = function (a) {
	return {$: 'ParenthesizedPattern', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$PatternComposedWithAs = function (a) {
	return {$: 'PatternComposedWithAs', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$PatternComposedWithCons = function (a) {
	return {$: 'PatternComposedWithCons', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$PatternComposedWithNothing = function (a) {
	return {$: 'PatternComposedWithNothing', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$TuplePattern = function (a) {
	return {$: 'TuplePattern', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$UnConsPattern = F2(
	function (a, b) {
		return {$: 'UnConsPattern', a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$Pattern$UnitPattern = {$: 'UnitPattern'};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$AllPattern = {$: 'AllPattern'};
var $stil4m$elm_syntax$ParserFast$symbolWithRange = F2(
	function (str, startAndEndLocationToRes) {
		var strLength = $elm$core$String$length(str);
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s) {
				var newOffset = s.offset + strLength;
				if (_Utils_eq(
					A3($elm$core$String$slice, s.offset, newOffset, s.src),
					str + '')) {
					var newCol = s.col + strLength;
					return A2(
						$stil4m$elm_syntax$ParserFast$Good,
						startAndEndLocationToRes(
							{
								end: {column: newCol, row: s.row},
								start: {column: s.col, row: s.row}
							}),
						{col: newCol, indent: s.indent, offset: newOffset, row: s.row, src: s.src});
				} else {
					return A2(
						$stil4m$elm_syntax$ParserFast$Bad,
						false,
						A3($stil4m$elm_syntax$ParserFast$ExpectingSymbol, s.row, s.col, str));
				}
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Patterns$allPattern = A2(
	$stil4m$elm_syntax$ParserFast$symbolWithRange,
	'_',
	function (range) {
		return {
			comments: $stil4m$elm_syntax$Rope$empty,
			syntax: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, $stil4m$elm_syntax$Elm$Syntax$Pattern$AllPattern)
		};
	});
var $stil4m$elm_syntax$Elm$Syntax$Pattern$CharPattern = function (a) {
	return {$: 'CharPattern', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$charPattern = $stil4m$elm_syntax$Elm$Parser$Tokens$characterLiteralMapWithRange(
	F2(
		function (range, _char) {
			return {
				comments: $stil4m$elm_syntax$Rope$empty,
				syntax: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Pattern$CharPattern(_char))
			};
		}));
var $stil4m$elm_syntax$Elm$Syntax$Pattern$HexPattern = function (a) {
	return {$: 'HexPattern', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$IntPattern = function (a) {
	return {$: 'IntPattern', a: a};
};
var $stil4m$elm_syntax$ParserFast$ExpectingNumber = F2(
	function (a, b) {
		return {$: 'ExpectingNumber', a: a, b: b};
	});
var $stil4m$elm_syntax$ParserFast$Decimal = {$: 'Decimal'};
var $stil4m$elm_syntax$ParserFast$Hexadecimal = {$: 'Hexadecimal'};
var $stil4m$elm_syntax$ParserFast$convert0OrMore0To9s = F3(
	function (soFar, offset, src) {
		convert0OrMore0To9s:
		while (true) {
			var _v0 = A3($elm$core$String$slice, offset, offset + 1, src);
			switch (_v0) {
				case '0':
					var $temp$soFar = soFar * 10,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMore0To9s;
				case '1':
					var $temp$soFar = (soFar * 10) + 1,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMore0To9s;
				case '2':
					var $temp$soFar = (soFar * 10) + 2,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMore0To9s;
				case '3':
					var $temp$soFar = (soFar * 10) + 3,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMore0To9s;
				case '4':
					var $temp$soFar = (soFar * 10) + 4,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMore0To9s;
				case '5':
					var $temp$soFar = (soFar * 10) + 5,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMore0To9s;
				case '6':
					var $temp$soFar = (soFar * 10) + 6,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMore0To9s;
				case '7':
					var $temp$soFar = (soFar * 10) + 7,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMore0To9s;
				case '8':
					var $temp$soFar = (soFar * 10) + 8,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMore0To9s;
				case '9':
					var $temp$soFar = (soFar * 10) + 9,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMore0To9s;
				default:
					return {_int: soFar, offset: offset};
			}
		}
	});
var $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal = F3(
	function (soFar, offset, src) {
		convert0OrMoreHexadecimal:
		while (true) {
			var _v0 = A3($elm$core$String$slice, offset, offset + 1, src);
			switch (_v0) {
				case '0':
					var $temp$soFar = soFar * 16,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case '1':
					var $temp$soFar = (soFar * 16) + 1,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case '2':
					var $temp$soFar = (soFar * 16) + 2,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case '3':
					var $temp$soFar = (soFar * 16) + 3,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case '4':
					var $temp$soFar = (soFar * 16) + 4,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case '5':
					var $temp$soFar = (soFar * 16) + 5,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case '6':
					var $temp$soFar = (soFar * 16) + 6,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case '7':
					var $temp$soFar = (soFar * 16) + 7,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case '8':
					var $temp$soFar = (soFar * 16) + 8,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case '9':
					var $temp$soFar = (soFar * 16) + 9,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case 'a':
					var $temp$soFar = (soFar * 16) + 10,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case 'A':
					var $temp$soFar = (soFar * 16) + 10,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case 'b':
					var $temp$soFar = (soFar * 16) + 11,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case 'B':
					var $temp$soFar = (soFar * 16) + 11,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case 'c':
					var $temp$soFar = (soFar * 16) + 12,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case 'C':
					var $temp$soFar = (soFar * 16) + 12,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case 'd':
					var $temp$soFar = (soFar * 16) + 13,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case 'D':
					var $temp$soFar = (soFar * 16) + 13,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case 'e':
					var $temp$soFar = (soFar * 16) + 14,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case 'E':
					var $temp$soFar = (soFar * 16) + 14,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case 'f':
					var $temp$soFar = (soFar * 16) + 15,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				case 'F':
					var $temp$soFar = (soFar * 16) + 15,
						$temp$offset = offset + 1,
						$temp$src = src;
					soFar = $temp$soFar;
					offset = $temp$offset;
					src = $temp$src;
					continue convert0OrMoreHexadecimal;
				default:
					return {_int: soFar, offset: offset};
			}
		}
	});
var $stil4m$elm_syntax$ParserFast$convert1OrMoreHexadecimal = F2(
	function (offset, src) {
		var _v0 = A3($elm$core$String$slice, offset, offset + 1, src);
		switch (_v0) {
			case '0':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 0, offset + 1, src);
			case '1':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 1, offset + 1, src);
			case '2':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 2, offset + 1, src);
			case '3':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 3, offset + 1, src);
			case '4':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 4, offset + 1, src);
			case '5':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 5, offset + 1, src);
			case '6':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 6, offset + 1, src);
			case '7':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 7, offset + 1, src);
			case '8':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 8, offset + 1, src);
			case '9':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 9, offset + 1, src);
			case 'a':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 10, offset + 1, src);
			case 'A':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 10, offset + 1, src);
			case 'b':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 11, offset + 1, src);
			case 'B':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 11, offset + 1, src);
			case 'c':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 12, offset + 1, src);
			case 'C':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 12, offset + 1, src);
			case 'd':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 13, offset + 1, src);
			case 'D':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 13, offset + 1, src);
			case 'e':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 14, offset + 1, src);
			case 'E':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 14, offset + 1, src);
			case 'f':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 15, offset + 1, src);
			case 'F':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal, 15, offset + 1, src);
			default:
				return {_int: 0, offset: -1};
		}
	});
var $stil4m$elm_syntax$ParserFast$errorAsBaseOffsetAndInt = {
	base: $stil4m$elm_syntax$ParserFast$Decimal,
	offsetAndInt: {_int: 0, offset: -1}
};
var $stil4m$elm_syntax$ParserFast$convertIntegerDecimalOrHexadecimal = F2(
	function (offset, src) {
		var _v0 = A3($elm$core$String$slice, offset, offset + 1, src);
		switch (_v0) {
			case '0':
				var _v1 = A3($elm$core$String$slice, offset + 1, offset + 2, src);
				if (_v1 === 'x') {
					var hex = A2($stil4m$elm_syntax$ParserFast$convert1OrMoreHexadecimal, offset + 2, src);
					return {
						base: $stil4m$elm_syntax$ParserFast$Hexadecimal,
						offsetAndInt: {_int: hex._int, offset: hex.offset}
					};
				} else {
					return {
						base: $stil4m$elm_syntax$ParserFast$Decimal,
						offsetAndInt: {_int: 0, offset: offset + 1}
					};
				}
			case '1':
				return {
					base: $stil4m$elm_syntax$ParserFast$Decimal,
					offsetAndInt: A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 1, offset + 1, src)
				};
			case '2':
				return {
					base: $stil4m$elm_syntax$ParserFast$Decimal,
					offsetAndInt: A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 2, offset + 1, src)
				};
			case '3':
				return {
					base: $stil4m$elm_syntax$ParserFast$Decimal,
					offsetAndInt: A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 3, offset + 1, src)
				};
			case '4':
				return {
					base: $stil4m$elm_syntax$ParserFast$Decimal,
					offsetAndInt: A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 4, offset + 1, src)
				};
			case '5':
				return {
					base: $stil4m$elm_syntax$ParserFast$Decimal,
					offsetAndInt: A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 5, offset + 1, src)
				};
			case '6':
				return {
					base: $stil4m$elm_syntax$ParserFast$Decimal,
					offsetAndInt: A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 6, offset + 1, src)
				};
			case '7':
				return {
					base: $stil4m$elm_syntax$ParserFast$Decimal,
					offsetAndInt: A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 7, offset + 1, src)
				};
			case '8':
				return {
					base: $stil4m$elm_syntax$ParserFast$Decimal,
					offsetAndInt: A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 8, offset + 1, src)
				};
			case '9':
				return {
					base: $stil4m$elm_syntax$ParserFast$Decimal,
					offsetAndInt: A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 9, offset + 1, src)
				};
			default:
				return $stil4m$elm_syntax$ParserFast$errorAsBaseOffsetAndInt;
		}
	});
var $stil4m$elm_syntax$ParserFast$integerDecimalOrHexadecimalMapWithRange = F2(
	function (rangeAndIntDecimalToRes, rangeAndIntHexadecimalToRes) {
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var s1 = A2($stil4m$elm_syntax$ParserFast$convertIntegerDecimalOrHexadecimal, s0.offset, s0.src);
				if (_Utils_eq(s1.offsetAndInt.offset, -1)) {
					return A2(
						$stil4m$elm_syntax$ParserFast$Bad,
						false,
						A2($stil4m$elm_syntax$ParserFast$ExpectingNumber, s0.row, s0.col));
				} else {
					var newColumn = s0.col + (s1.offsetAndInt.offset - s0.offset);
					var range = {
						end: {column: newColumn, row: s0.row},
						start: {column: s0.col, row: s0.row}
					};
					return A2(
						$stil4m$elm_syntax$ParserFast$Good,
						function () {
							var _v0 = s1.base;
							if (_v0.$ === 'Decimal') {
								return A2(rangeAndIntDecimalToRes, range, s1.offsetAndInt._int);
							} else {
								return A2(rangeAndIntHexadecimalToRes, range, s1.offsetAndInt._int);
							}
						}(),
						{col: newColumn, indent: s0.indent, offset: s1.offsetAndInt.offset, row: s0.row, src: s0.src});
				}
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Patterns$numberPart = A2(
	$stil4m$elm_syntax$ParserFast$integerDecimalOrHexadecimalMapWithRange,
	F2(
		function (range, n) {
			return {
				comments: $stil4m$elm_syntax$Rope$empty,
				syntax: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Pattern$IntPattern(n))
			};
		}),
	F2(
		function (range, n) {
			return {
				comments: $stil4m$elm_syntax$Rope$empty,
				syntax: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Pattern$HexPattern(n))
			};
		}));
var $stil4m$elm_syntax$ParserFast$oneOf2OrSucceed = F3(
	function (_v0, _v1, thirdRes) {
		var attemptFirst = _v0.a;
		var attemptSecond = _v1.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s) {
				var _v2 = attemptFirst(s);
				if (_v2.$ === 'Good') {
					var firstGood = _v2;
					return firstGood;
				} else {
					var firstBad = _v2;
					var firstCommitted = firstBad.a;
					if (firstCommitted) {
						return firstBad;
					} else {
						var _v3 = attemptSecond(s);
						if (_v3.$ === 'Good') {
							var secondGood = _v3;
							return secondGood;
						} else {
							var secondBad = _v3;
							var secondCommitted = secondBad.a;
							return secondCommitted ? secondBad : A2($stil4m$elm_syntax$ParserFast$Good, thirdRes, s);
						}
					}
				}
			});
	});
var $stil4m$elm_syntax$ParserFast$oneOf9 = F9(
	function (_v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7, _v8) {
		var attempt0 = _v0.a;
		var attempt1 = _v1.a;
		var attempt2 = _v2.a;
		var attempt3 = _v3.a;
		var attempt4 = _v4.a;
		var attempt5 = _v5.a;
		var attempt6 = _v6.a;
		var attempt7 = _v7.a;
		var attempt8 = _v8.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s) {
				var _v9 = attempt0(s);
				if (_v9.$ === 'Good') {
					var good = _v9;
					return good;
				} else {
					var bad0 = _v9;
					var committed0 = bad0.a;
					var x0 = bad0.b;
					if (committed0) {
						return bad0;
					} else {
						var _v10 = attempt1(s);
						if (_v10.$ === 'Good') {
							var good = _v10;
							return good;
						} else {
							var bad1 = _v10;
							var committed1 = bad1.a;
							var x1 = bad1.b;
							if (committed1) {
								return bad1;
							} else {
								var _v11 = attempt2(s);
								if (_v11.$ === 'Good') {
									var good = _v11;
									return good;
								} else {
									var bad2 = _v11;
									var committed2 = bad2.a;
									var x2 = bad2.b;
									if (committed2) {
										return bad2;
									} else {
										var _v12 = attempt3(s);
										if (_v12.$ === 'Good') {
											var good = _v12;
											return good;
										} else {
											var bad3 = _v12;
											var committed3 = bad3.a;
											var x3 = bad3.b;
											if (committed3) {
												return bad3;
											} else {
												var _v13 = attempt4(s);
												if (_v13.$ === 'Good') {
													var good = _v13;
													return good;
												} else {
													var bad4 = _v13;
													var committed4 = bad4.a;
													var x4 = bad4.b;
													if (committed4) {
														return bad4;
													} else {
														var _v14 = attempt5(s);
														if (_v14.$ === 'Good') {
															var good = _v14;
															return good;
														} else {
															var bad5 = _v14;
															var committed5 = bad5.a;
															var x5 = bad5.b;
															if (committed5) {
																return bad5;
															} else {
																var _v15 = attempt6(s);
																if (_v15.$ === 'Good') {
																	var good = _v15;
																	return good;
																} else {
																	var bad6 = _v15;
																	var committed6 = bad6.a;
																	var x6 = bad6.b;
																	if (committed6) {
																		return bad6;
																	} else {
																		var _v16 = attempt7(s);
																		if (_v16.$ === 'Good') {
																			var good = _v16;
																			return good;
																		} else {
																			var bad7 = _v16;
																			var committed7 = bad7.a;
																			var x7 = bad7.b;
																			if (committed7) {
																				return bad7;
																			} else {
																				var _v17 = attempt8(s);
																				if (_v17.$ === 'Good') {
																					var good = _v17;
																					return good;
																				} else {
																					var bad8 = _v17;
																					var committed8 = bad8.a;
																					var x8 = bad8.b;
																					return committed8 ? bad8 : A2(
																						$stil4m$elm_syntax$ParserFast$Bad,
																						false,
																						A3(
																							$stil4m$elm_syntax$ParserFast$ExpectingOneOf,
																							x0,
																							x1,
																							_List_fromArray(
																								[x2, x3, x4, x5, x6, x7, x8])));
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Patterns$patternListEmpty = $stil4m$elm_syntax$Elm$Syntax$Pattern$ListPattern(_List_Nil);
var $stil4m$elm_syntax$Elm$Parser$Layout$problemPositivelyIndented = $stil4m$elm_syntax$ParserFast$problem('must be positively indented');
var $stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedFollowedBy = function (nextParser) {
	return $stil4m$elm_syntax$ParserFast$columnIndentAndThen(
		F2(
			function (column, indent) {
				return (_Utils_cmp(column, indent) > 0) ? nextParser : $stil4m$elm_syntax$Elm$Parser$Layout$problemPositivelyIndented;
			}));
};
var $stil4m$elm_syntax$ParserFast$ifFollowedByWhileWithoutLinebreak = F2(
	function (firstIsOkay, afterFirstIsOkay) {
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s) {
				var firstOffset = A3($stil4m$elm_syntax$ParserFast$isSubCharWithoutLinebreak, firstIsOkay, s.offset, s.src);
				if (_Utils_eq(firstOffset, -1)) {
					return A2(
						$stil4m$elm_syntax$ParserFast$Bad,
						false,
						A2($stil4m$elm_syntax$ParserFast$ExpectingCharSatisfyingPredicate, s.row, s.col));
				} else {
					var s1 = A6($stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp, afterFirstIsOkay, firstOffset, s.row, s.col + 1, s.src, s.indent);
					return A2(
						$stil4m$elm_syntax$ParserFast$Good,
						A3($elm$core$String$slice, s.offset, s1.offset, s.src),
						s1);
				}
			});
	});
var $stil4m$elm_syntax$Char$Extra$unicodeIsUpperFast = function (c) {
	var code = $elm$core$Char$toCode(c);
	return $stil4m$elm_syntax$Char$Extra$charCodeIsUpper(code) || function () {
		var cString = $elm$core$String$fromChar(c);
		return (_Utils_eq(
			$elm$core$String$toUpper(cString),
			cString + '') && (!_Utils_eq(
			$elm$core$String$toLower(cString),
			cString + ''))) ? ((code <= 8543) || (((8560 <= code) && (code <= 9397)) || ((9424 <= code) && (code <= 983040)))) : ((code < 120015) ? ((code < 8509) ? (((978 <= code) && (code <= 980)) || ((code === 8450) || ((code === 8455) || (((8459 <= code) && (code <= 8461)) || (((8464 <= code) && (code <= 8466)) || ((code === 8469) || (((8473 <= code) && (code <= 8477)) || ((code === 8484) || ((code === 8488) || (((8490 <= code) && (code <= 8493)) || ((8496 <= code) && (code <= 8499)))))))))))) : (((8510 <= code) && (code <= 8511)) || ((code === 8517) || (((119808 <= code) && (code <= 119833)) || (((119860 <= code) && (code <= 119885)) || (((119912 <= code) && (code <= 119937)) || ((code === 119964) || (((119966 <= code) && (code <= 119967)) || ((code === 119970) || (((119973 <= code) && (code <= 119974)) || (((119977 <= code) && (code <= 119980)) || ((119982 <= code) && (code <= 119989))))))))))))) : ((code < 120223) ? (((120016 <= code) && (code <= 120041)) || (((120068 <= code) && (code <= 120069)) || (((120071 <= code) && (code <= 120074)) || (((120077 <= code) && (code <= 120084)) || (((120086 <= code) && (code <= 120092)) || (((120120 <= code) && (code <= 120121)) || (((120123 <= code) && (code <= 120126)) || (((120128 <= code) && (code <= 120132)) || ((code === 120134) || (((120138 <= code) && (code <= 120144)) || ((120172 <= code) && (code <= 120197)))))))))))) : (((120224 <= code) && (code <= 120249)) || (((120276 <= code) && (code <= 120301)) || (((120328 <= code) && (code <= 120353)) || (((120380 <= code) && (code <= 120405)) || (((120432 <= code) && (code <= 120457)) || (((120488 <= code) && (code <= 120512)) || (((120546 <= code) && (code <= 120570)) || (((120604 <= code) && (code <= 120628)) || (((120662 <= code) && (code <= 120686)) || (((120720 <= code) && (code <= 120744)) || (code === 120778)))))))))))));
	}();
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$typeName = A2($stil4m$elm_syntax$ParserFast$ifFollowedByWhileWithoutLinebreak, $stil4m$elm_syntax$Char$Extra$unicodeIsUpperFast, $stil4m$elm_syntax$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast);
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$maybeDotTypeNamesTuple() {
	return A4(
		$stil4m$elm_syntax$ParserFast$map2OrSucceed,
		F2(
			function (startName, afterStartName) {
				if (afterStartName.$ === 'Nothing') {
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(_List_Nil, startName));
				} else {
					var _v1 = afterStartName.a;
					var qualificationAfter = _v1.a;
					var unqualified = _v1.b;
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(
							A2($elm$core$List$cons, startName, qualificationAfter),
							unqualified));
				}
			}),
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '.', $stil4m$elm_syntax$Elm$Parser$Tokens$typeName),
		$stil4m$elm_syntax$ParserFast$lazy(
			function (_v2) {
				return $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$maybeDotTypeNamesTuple();
			}),
		$elm$core$Maybe$Nothing);
}
try {
	var $stil4m$elm_syntax$Elm$Parser$Patterns$maybeDotTypeNamesTuple = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$maybeDotTypeNamesTuple();
	$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$maybeDotTypeNamesTuple = function () {
		return $stil4m$elm_syntax$Elm$Parser$Patterns$maybeDotTypeNamesTuple;
	};
} catch ($) {
	throw 'Some top-level definitions from `Elm.Parser.Patterns` are causing infinite recursion:\n\n  ┌─────┐\n  │    maybeDotTypeNamesTuple\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedNameRefNode = A3(
	$stil4m$elm_syntax$ParserFast$map2WithRange,
	F3(
		function (range, firstName, after) {
			return A2(
				$stil4m$elm_syntax$Elm$Syntax$Node$Node,
				range,
				function () {
					if (after.$ === 'Nothing') {
						return {moduleName: _List_Nil, name: firstName};
					} else {
						var _v1 = after.a;
						var qualificationAfter = _v1.a;
						var unqualified = _v1.b;
						return {
							moduleName: A2($elm$core$List$cons, firstName, qualificationAfter),
							name: unqualified
						};
					}
				}());
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeName,
	$stil4m$elm_syntax$Elm$Parser$Patterns$maybeDotTypeNamesTuple);
var $stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedPatternWithoutConsumeArgs = A3(
	$stil4m$elm_syntax$ParserFast$map2WithRange,
	F3(
		function (range, firstName, after) {
			return {
				comments: $stil4m$elm_syntax$Rope$empty,
				syntax: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					A2(
						$stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern,
						function () {
							if (after.$ === 'Nothing') {
								return {moduleName: _List_Nil, name: firstName};
							} else {
								var _v1 = after.a;
								var qualificationAfter = _v1.a;
								var unqualified = _v1.b;
								return {
									moduleName: A2($elm$core$List$cons, firstName, qualificationAfter),
									name: unqualified
								};
							}
						}(),
						_List_Nil))
			};
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeName,
	$stil4m$elm_syntax$Elm$Parser$Patterns$maybeDotTypeNamesTuple);
var $stil4m$elm_syntax$Elm$Syntax$Pattern$RecordPattern = function (a) {
	return {$: 'RecordPattern', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$recordPattern = A3(
	$stil4m$elm_syntax$ParserFast$map2WithRange,
	F3(
		function (range, commentsBeforeElements, elements) {
			return {
				comments: A2($stil4m$elm_syntax$Rope$prependTo, elements.comments, commentsBeforeElements),
				syntax: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Pattern$RecordPattern(elements.syntax))
			};
		}),
	A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '{', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	A2(
		$stil4m$elm_syntax$ParserFast$oneOf2,
		A2(
			$stil4m$elm_syntax$ParserFast$followedBySymbol,
			'}',
			A4(
				$stil4m$elm_syntax$ParserFast$map3,
				F3(
					function (head, commentsAfterHead, tail) {
						return {
							comments: A2($stil4m$elm_syntax$Rope$prependTo, tail.comments, commentsAfterHead),
							syntax: A2($elm$core$List$cons, head, tail.syntax)
						};
					}),
				$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode,
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
				$stil4m$elm_syntax$ParserWithComments$many(
					A2(
						$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
						',',
						A4(
							$stil4m$elm_syntax$ParserFast$map3,
							F3(
								function (beforeName, name, afterName) {
									return {
										comments: A2($stil4m$elm_syntax$Rope$prependTo, afterName, beforeName),
										syntax: name
									};
								}),
							$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
							$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode,
							$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout))))),
		A2(
			$stil4m$elm_syntax$ParserFast$symbol,
			'}',
			{comments: $stil4m$elm_syntax$Rope$empty, syntax: _List_Nil})));
var $stil4m$elm_syntax$Elm$Syntax$Pattern$StringPattern = function (a) {
	return {$: 'StringPattern', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$stringPattern = $stil4m$elm_syntax$Elm$Parser$Tokens$singleOrTripleQuotedStringLiteralMapWithRange(
	F2(
		function (range, string) {
			return {
				comments: $stil4m$elm_syntax$Rope$empty,
				syntax: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Pattern$StringPattern(string))
			};
		}));
var $stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern = function (a) {
	return {$: 'VarPattern', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameMapWithRange = function (rangeAndNameToResult) {
	return A4($stil4m$elm_syntax$ParserFast$ifFollowedByWhileValidateMapWithRangeWithoutLinebreak, rangeAndNameToResult, $stil4m$elm_syntax$Char$Extra$unicodeIsLowerFast, $stil4m$elm_syntax$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast, $stil4m$elm_syntax$Elm$Parser$Tokens$isNotReserved);
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$varPattern = $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameMapWithRange(
	F2(
		function (range, _var) {
			return {
				comments: $stil4m$elm_syntax$Rope$empty,
				syntax: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern(_var))
			};
		}));
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePatternTryToCompose() {
	return A4(
		$stil4m$elm_syntax$ParserFast$map3,
		F3(
			function (x, commentsAfterLeft, maybeComposedWithResult) {
				return {
					comments: A2(
						$stil4m$elm_syntax$Rope$prependTo,
						maybeComposedWithResult.comments,
						A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterLeft, x.comments)),
					syntax: function () {
						var _v7 = maybeComposedWithResult.syntax;
						switch (_v7.$) {
							case 'PatternComposedWithNothing':
								return x.syntax;
							case 'PatternComposedWithAs':
								var anotherName = _v7.a;
								return A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $stil4m$elm_syntax$Elm$Syntax$Pattern$AsPattern, x.syntax, anotherName);
							default:
								var y = _v7.a;
								return A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $stil4m$elm_syntax$Elm$Syntax$Pattern$UnConsPattern, x.syntax, y);
						}
					}()
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePattern(),
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$maybeComposedWith());
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePattern() {
	return A9(
		$stil4m$elm_syntax$ParserFast$oneOf9,
		$stil4m$elm_syntax$Elm$Parser$Patterns$varPattern,
		$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$qualifiedPatternWithConsumeArgs(),
		$stil4m$elm_syntax$Elm$Parser$Patterns$allPattern,
		$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern(),
		$stil4m$elm_syntax$Elm$Parser$Patterns$recordPattern,
		$stil4m$elm_syntax$Elm$Parser$Patterns$stringPattern,
		$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern(),
		$stil4m$elm_syntax$Elm$Parser$Patterns$numberPart,
		$stil4m$elm_syntax$Elm$Parser$Patterns$charPattern);
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$qualifiedPatternWithConsumeArgs() {
	return A4(
		$stil4m$elm_syntax$ParserFast$map3,
		F3(
			function (_v4, afterStartName, argsReverse) {
				var nameRange = _v4.a;
				var name = _v4.b;
				var range = function () {
					var _v5 = argsReverse.syntax;
					if (!_v5.b) {
						return nameRange;
					} else {
						var _v6 = _v5.a;
						var lastArgRange = _v6.a;
						return {end: lastArgRange.end, start: nameRange.start};
					}
				}();
				return {
					comments: A2($stil4m$elm_syntax$Rope$prependTo, argsReverse.comments, afterStartName),
					syntax: A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						range,
						A2(
							$stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern,
							name,
							$elm$core$List$reverse(argsReverse.syntax)))
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedNameRefNode,
		$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
		$stil4m$elm_syntax$ParserWithComments$manyWithoutReverse(
			$stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedFollowedBy(
				A3(
					$stil4m$elm_syntax$ParserFast$map2,
					F2(
						function (arg, commentsAfterArg) {
							return {
								comments: A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterArg, arg.comments),
								syntax: arg.syntax
							};
						}),
					$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$patternNotDirectlyComposing(),
					$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout))));
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$patternNotDirectlyComposing() {
	return A9(
		$stil4m$elm_syntax$ParserFast$oneOf9,
		$stil4m$elm_syntax$Elm$Parser$Patterns$varPattern,
		$stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedPatternWithoutConsumeArgs,
		$stil4m$elm_syntax$Elm$Parser$Patterns$allPattern,
		$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern(),
		$stil4m$elm_syntax$Elm$Parser$Patterns$recordPattern,
		$stil4m$elm_syntax$Elm$Parser$Patterns$stringPattern,
		$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern(),
		$stil4m$elm_syntax$Elm$Parser$Patterns$numberPart,
		$stil4m$elm_syntax$Elm$Parser$Patterns$charPattern);
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern() {
	return A3(
		$stil4m$elm_syntax$ParserFast$map2WithRange,
		F3(
			function (range, commentsBeforeElements, maybeElements) {
				if (maybeElements.$ === 'Nothing') {
					return {
						comments: commentsBeforeElements,
						syntax: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, $stil4m$elm_syntax$Elm$Parser$Patterns$patternListEmpty)
					};
				} else {
					var elements = maybeElements.a;
					return {
						comments: A2($stil4m$elm_syntax$Rope$prependTo, elements.comments, commentsBeforeElements),
						syntax: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							range,
							$stil4m$elm_syntax$Elm$Syntax$Pattern$ListPattern(elements.syntax))
					};
				}
			}),
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '[', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
		A2(
			$stil4m$elm_syntax$ParserFast$oneOf2,
			A2($stil4m$elm_syntax$ParserFast$symbol, ']', $elm$core$Maybe$Nothing),
			A2(
				$stil4m$elm_syntax$ParserFast$followedBySymbol,
				']',
				A4(
					$stil4m$elm_syntax$ParserFast$map3,
					F3(
						function (head, commentsAfterHead, tail) {
							return $elm$core$Maybe$Just(
								{
									comments: A2(
										$stil4m$elm_syntax$Rope$prependTo,
										commentsAfterHead,
										A2($stil4m$elm_syntax$Rope$prependTo, tail.comments, head.comments)),
									syntax: A2($elm$core$List$cons, head.syntax, tail.syntax)
								});
						}),
					$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern(),
					$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
					$stil4m$elm_syntax$ParserWithComments$many(
						A2(
							$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
							',',
							$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides(
								$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern())))))));
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$maybeComposedWith() {
	return A3(
		$stil4m$elm_syntax$ParserFast$oneOf2OrSucceed,
		A2(
			$stil4m$elm_syntax$ParserFast$keywordFollowedBy,
			'as',
			A3(
				$stil4m$elm_syntax$ParserFast$map2,
				F2(
					function (commentsAfterAs, name) {
						return {
							comments: commentsAfterAs,
							syntax: $stil4m$elm_syntax$Elm$Parser$Patterns$PatternComposedWithAs(name)
						};
					}),
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
				$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode)),
		A2(
			$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
			'::',
			A3(
				$stil4m$elm_syntax$ParserFast$map2,
				F2(
					function (commentsAfterCons, patternResult) {
						return {
							comments: A2($stil4m$elm_syntax$Rope$prependTo, patternResult.comments, commentsAfterCons),
							syntax: $stil4m$elm_syntax$Elm$Parser$Patterns$PatternComposedWithCons(patternResult.syntax)
						};
					}),
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
				$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern())),
		{
			comments: $stil4m$elm_syntax$Rope$empty,
			syntax: $stil4m$elm_syntax$Elm$Parser$Patterns$PatternComposedWithNothing(_Utils_Tuple0)
		});
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern() {
	return A2(
		$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
		'(',
		A3(
			$stil4m$elm_syntax$ParserFast$map2WithRange,
			F3(
				function (range, commentsBeforeHead, contentResult) {
					return {
						comments: A2($stil4m$elm_syntax$Rope$prependTo, contentResult.comments, commentsBeforeHead),
						syntax: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{
								end: range.end,
								start: {column: range.start.column - 1, row: range.start.row}
							},
							contentResult.syntax)
					};
				}),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			A2(
				$stil4m$elm_syntax$ParserFast$oneOf2,
				A2(
					$stil4m$elm_syntax$ParserFast$symbol,
					')',
					{comments: $stil4m$elm_syntax$Rope$empty, syntax: $stil4m$elm_syntax$Elm$Syntax$Pattern$UnitPattern}),
				A4(
					$stil4m$elm_syntax$ParserFast$map3,
					F3(
						function (headResult, commentsAfterHead, tailResult) {
							return {
								comments: A2(
									$stil4m$elm_syntax$Rope$prependTo,
									tailResult.comments,
									A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterHead, headResult.comments)),
								syntax: function () {
									var _v1 = tailResult.syntax;
									if (_v1.$ === 'Nothing') {
										return $stil4m$elm_syntax$Elm$Syntax$Pattern$ParenthesizedPattern(headResult.syntax);
									} else {
										var secondAndMaybeThirdPart = _v1.a;
										var _v2 = secondAndMaybeThirdPart.maybeThirdPart;
										if (_v2.$ === 'Nothing') {
											return $stil4m$elm_syntax$Elm$Syntax$Pattern$TuplePattern(
												_List_fromArray(
													[headResult.syntax, secondAndMaybeThirdPart.secondPart]));
										} else {
											var thirdPart = _v2.a;
											return $stil4m$elm_syntax$Elm$Syntax$Pattern$TuplePattern(
												_List_fromArray(
													[headResult.syntax, secondAndMaybeThirdPart.secondPart, thirdPart]));
										}
									}
								}()
							};
						}),
					$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern(),
					$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
					A2(
						$stil4m$elm_syntax$ParserFast$oneOf2,
						A2(
							$stil4m$elm_syntax$ParserFast$symbol,
							')',
							{comments: $stil4m$elm_syntax$Rope$empty, syntax: $elm$core$Maybe$Nothing}),
						A2(
							$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
							',',
							A5(
								$stil4m$elm_syntax$ParserFast$map4,
								F4(
									function (commentsBefore, secondPart, commentsAfter, maybeThirdPart) {
										return {
											comments: A2(
												$stil4m$elm_syntax$Rope$prependTo,
												maybeThirdPart.comments,
												A2(
													$stil4m$elm_syntax$Rope$prependTo,
													commentsAfter,
													A2($stil4m$elm_syntax$Rope$prependTo, secondPart.comments, commentsBefore))),
											syntax: $elm$core$Maybe$Just(
												{maybeThirdPart: maybeThirdPart.syntax, secondPart: secondPart.syntax})
										};
									}),
								$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
								$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern(),
								$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
								A2(
									$stil4m$elm_syntax$ParserFast$oneOf2,
									A2(
										$stil4m$elm_syntax$ParserFast$symbol,
										')',
										{comments: $stil4m$elm_syntax$Rope$empty, syntax: $elm$core$Maybe$Nothing}),
									A2(
										$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
										',',
										A2(
											$stil4m$elm_syntax$ParserFast$followedBySymbol,
											')',
											A4(
												$stil4m$elm_syntax$ParserFast$map3,
												F3(
													function (commentsBefore, thirdPart, commentsAfter) {
														return {
															comments: A2(
																$stil4m$elm_syntax$Rope$prependTo,
																commentsAfter,
																A2($stil4m$elm_syntax$Rope$prependTo, thirdPart.comments, commentsBefore)),
															syntax: $elm$core$Maybe$Just(thirdPart.syntax)
														};
													}),
												$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
												$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern(),
												$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)))))))))));
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern() {
	return $stil4m$elm_syntax$ParserFast$lazy(
		function (_v0) {
			return $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePatternTryToCompose();
		});
}
try {
	var $stil4m$elm_syntax$Elm$Parser$Patterns$composablePatternTryToCompose = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePatternTryToCompose();
	$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePatternTryToCompose = function () {
		return $stil4m$elm_syntax$Elm$Parser$Patterns$composablePatternTryToCompose;
	};
	var $stil4m$elm_syntax$Elm$Parser$Patterns$composablePattern = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePattern();
	$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePattern = function () {
		return $stil4m$elm_syntax$Elm$Parser$Patterns$composablePattern;
	};
	var $stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedPatternWithConsumeArgs = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$qualifiedPatternWithConsumeArgs();
	$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$qualifiedPatternWithConsumeArgs = function () {
		return $stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedPatternWithConsumeArgs;
	};
	var $stil4m$elm_syntax$Elm$Parser$Patterns$patternNotDirectlyComposing = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$patternNotDirectlyComposing();
	$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$patternNotDirectlyComposing = function () {
		return $stil4m$elm_syntax$Elm$Parser$Patterns$patternNotDirectlyComposing;
	};
	var $stil4m$elm_syntax$Elm$Parser$Patterns$listPattern = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern();
	$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern = function () {
		return $stil4m$elm_syntax$Elm$Parser$Patterns$listPattern;
	};
	var $stil4m$elm_syntax$Elm$Parser$Patterns$maybeComposedWith = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$maybeComposedWith();
	$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$maybeComposedWith = function () {
		return $stil4m$elm_syntax$Elm$Parser$Patterns$maybeComposedWith;
	};
	var $stil4m$elm_syntax$Elm$Parser$Patterns$parensPattern = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern();
	$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern = function () {
		return $stil4m$elm_syntax$Elm$Parser$Patterns$parensPattern;
	};
	var $stil4m$elm_syntax$Elm$Parser$Patterns$pattern = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern();
	$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern = function () {
		return $stil4m$elm_syntax$Elm$Parser$Patterns$pattern;
	};
} catch ($) {
	throw 'Some top-level definitions from `Elm.Parser.Patterns` are causing infinite recursion:\n\n  ┌─────┐\n  │    composablePatternTryToCompose\n  │     ↓\n  │    composablePattern\n  │     ↓\n  │    qualifiedPatternWithConsumeArgs\n  │     ↓\n  │    patternNotDirectlyComposing\n  │     ↓\n  │    listPattern\n  │     ↓\n  │    maybeComposedWith\n  │     ↓\n  │    parensPattern\n  │     ↓\n  │    pattern\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $stil4m$elm_syntax$ParserWithComments$until = F2(
	function (end, element) {
		return A5(
			$stil4m$elm_syntax$ParserFast$loopUntil,
			end,
			element,
			_Utils_Tuple2($stil4m$elm_syntax$Rope$empty, _List_Nil),
			F2(
				function (pResult, _v0) {
					var commentsSoFar = _v0.a;
					var itemsSoFar = _v0.b;
					return _Utils_Tuple2(
						A2($stil4m$elm_syntax$Rope$prependTo, pResult.comments, commentsSoFar),
						A2($elm$core$List$cons, pResult.syntax, itemsSoFar));
				}),
			function (_v1) {
				var commentsSoFar = _v1.a;
				var itemsSoFar = _v1.b;
				return {
					comments: commentsSoFar,
					syntax: $elm$core$List$reverse(itemsSoFar)
				};
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$parameterPatternsEqual = A2(
	$stil4m$elm_syntax$ParserWithComments$until,
	$stil4m$elm_syntax$Elm$Parser$Tokens$equal,
	A3(
		$stil4m$elm_syntax$ParserFast$map2,
		F2(
			function (patternResult, commentsAfterPattern) {
				return {
					comments: A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterPattern, patternResult.comments),
					syntax: patternResult.syntax
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Patterns$patternNotDirectlyComposing,
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout));
var $stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedPlusFollowedBy = F2(
	function (extraIndent, nextParser) {
		return $stil4m$elm_syntax$ParserFast$columnIndentAndThen(
			F2(
				function (column, indent) {
					return (_Utils_cmp(column, indent + extraIndent) > 0) ? nextParser : $stil4m$elm_syntax$Elm$Parser$Layout$problemPositivelyIndented;
				}));
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$problemCannotMixNonAssociativeInfixOperators = $stil4m$elm_syntax$ParserFast$problem('cannot mix non-associative infix operators without parenthesis');
var $stil4m$elm_syntax$Elm$Parser$Expression$rangeMoveStartLeftByOneColumn = function (range) {
	return {
		end: range.end,
		start: {column: range.start.column - 1, row: range.start.row}
	};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccessFunction = function (a) {
	return {$: 'RecordAccessFunction', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Expression$recordAccessFunctionExpression = A2(
	$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
	'.',
	$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameMapWithRange(
		F2(
			function (range, field) {
				return {
					comments: $stil4m$elm_syntax$Rope$empty,
					syntax: A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						$stil4m$elm_syntax$Elm$Parser$Expression$rangeMoveStartLeftByOneColumn(range),
						$stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccessFunction('.' + field))
				};
			})));
var $stil4m$elm_syntax$Elm$Syntax$Expression$Floatable = function (a) {
	return {$: 'Floatable', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Hex = function (a) {
	return {$: 'Hex', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Integer = function (a) {
	return {$: 'Integer', a: a};
};
var $stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9 = F2(
	function (offset, src) {
		skip0OrMoreDigits0To9:
		while (true) {
			var _v0 = A3($elm$core$String$slice, offset, offset + 1, src);
			switch (_v0) {
				case '0':
					var $temp$offset = offset + 1,
						$temp$src = src;
					offset = $temp$offset;
					src = $temp$src;
					continue skip0OrMoreDigits0To9;
				case '1':
					var $temp$offset = offset + 1,
						$temp$src = src;
					offset = $temp$offset;
					src = $temp$src;
					continue skip0OrMoreDigits0To9;
				case '2':
					var $temp$offset = offset + 1,
						$temp$src = src;
					offset = $temp$offset;
					src = $temp$src;
					continue skip0OrMoreDigits0To9;
				case '3':
					var $temp$offset = offset + 1,
						$temp$src = src;
					offset = $temp$offset;
					src = $temp$src;
					continue skip0OrMoreDigits0To9;
				case '4':
					var $temp$offset = offset + 1,
						$temp$src = src;
					offset = $temp$offset;
					src = $temp$src;
					continue skip0OrMoreDigits0To9;
				case '5':
					var $temp$offset = offset + 1,
						$temp$src = src;
					offset = $temp$offset;
					src = $temp$src;
					continue skip0OrMoreDigits0To9;
				case '6':
					var $temp$offset = offset + 1,
						$temp$src = src;
					offset = $temp$offset;
					src = $temp$src;
					continue skip0OrMoreDigits0To9;
				case '7':
					var $temp$offset = offset + 1,
						$temp$src = src;
					offset = $temp$offset;
					src = $temp$src;
					continue skip0OrMoreDigits0To9;
				case '8':
					var $temp$offset = offset + 1,
						$temp$src = src;
					offset = $temp$offset;
					src = $temp$src;
					continue skip0OrMoreDigits0To9;
				case '9':
					var $temp$offset = offset + 1,
						$temp$src = src;
					offset = $temp$offset;
					src = $temp$src;
					continue skip0OrMoreDigits0To9;
				default:
					return offset;
			}
		}
	});
var $stil4m$elm_syntax$ParserFast$skip1OrMoreDigits0To9 = F2(
	function (offset, src) {
		var _v0 = A3($elm$core$String$slice, offset, offset + 1, src);
		switch (_v0) {
			case '0':
				return A2($stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9, offset + 1, src);
			case '1':
				return A2($stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9, offset + 1, src);
			case '2':
				return A2($stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9, offset + 1, src);
			case '3':
				return A2($stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9, offset + 1, src);
			case '4':
				return A2($stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9, offset + 1, src);
			case '5':
				return A2($stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9, offset + 1, src);
			case '6':
				return A2($stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9, offset + 1, src);
			case '7':
				return A2($stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9, offset + 1, src);
			case '8':
				return A2($stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9, offset + 1, src);
			case '9':
				return A2($stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9, offset + 1, src);
			default:
				return -1;
		}
	});
var $stil4m$elm_syntax$ParserFast$skipAfterFloatExponentMark = F2(
	function (offset, src) {
		var _v0 = A3($elm$core$String$slice, offset, offset + 1, src);
		switch (_v0) {
			case '+':
				return A2($stil4m$elm_syntax$ParserFast$skip1OrMoreDigits0To9, offset + 1, src);
			case '-':
				return A2($stil4m$elm_syntax$ParserFast$skip1OrMoreDigits0To9, offset + 1, src);
			default:
				return A2($stil4m$elm_syntax$ParserFast$skip1OrMoreDigits0To9, offset, src);
		}
	});
var $stil4m$elm_syntax$ParserFast$skipFloatAfterIntegerDecimal = F2(
	function (offset, src) {
		var _v0 = A3($elm$core$String$slice, offset, offset + 1, src);
		switch (_v0) {
			case '.':
				var offsetAfterDigits = A2($stil4m$elm_syntax$ParserFast$skip1OrMoreDigits0To9, offset + 1, src);
				if (_Utils_eq(offsetAfterDigits, -1)) {
					return -1;
				} else {
					var _v1 = A3($elm$core$String$slice, offsetAfterDigits, offsetAfterDigits + 1, src);
					switch (_v1) {
						case 'e':
							return A2($stil4m$elm_syntax$ParserFast$skipAfterFloatExponentMark, offsetAfterDigits + 1, src);
						case 'E':
							return A2($stil4m$elm_syntax$ParserFast$skipAfterFloatExponentMark, offsetAfterDigits + 1, src);
						default:
							return offsetAfterDigits;
					}
				}
			case 'e':
				return A2($stil4m$elm_syntax$ParserFast$skipAfterFloatExponentMark, offset + 1, src);
			case 'E':
				return A2($stil4m$elm_syntax$ParserFast$skipAfterFloatExponentMark, offset + 1, src);
			default:
				return -1;
		}
	});
var $elm$core$String$toFloat = _String_toFloat;
var $stil4m$elm_syntax$ParserFast$floatOrIntegerDecimalOrHexadecimalMapWithRange = F3(
	function (rangeAndFloatToRes, rangeAndIntDecimalToRes, rangeAndIntHexadecimalToRes) {
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var s1 = A2($stil4m$elm_syntax$ParserFast$convertIntegerDecimalOrHexadecimal, s0.offset, s0.src);
				if (_Utils_eq(s1.offsetAndInt.offset, -1)) {
					return A2(
						$stil4m$elm_syntax$ParserFast$Bad,
						false,
						A2($stil4m$elm_syntax$ParserFast$ExpectingNumber, s0.row, s0.col));
				} else {
					var offsetAfterFloat = A2($stil4m$elm_syntax$ParserFast$skipFloatAfterIntegerDecimal, s1.offsetAndInt.offset, s0.src);
					if (_Utils_eq(offsetAfterFloat, -1)) {
						var newColumn = s0.col + (s1.offsetAndInt.offset - s0.offset);
						var range = {
							end: {column: newColumn, row: s0.row},
							start: {column: s0.col, row: s0.row}
						};
						return A2(
							$stil4m$elm_syntax$ParserFast$Good,
							function () {
								var _v0 = s1.base;
								if (_v0.$ === 'Decimal') {
									return A2(rangeAndIntDecimalToRes, range, s1.offsetAndInt._int);
								} else {
									return A2(rangeAndIntHexadecimalToRes, range, s1.offsetAndInt._int);
								}
							}(),
							{col: newColumn, indent: s0.indent, offset: s1.offsetAndInt.offset, row: s0.row, src: s0.src});
					} else {
						var _v1 = $elm$core$String$toFloat(
							A3($elm$core$String$slice, s0.offset, offsetAfterFloat, s0.src));
						if (_v1.$ === 'Just') {
							var _float = _v1.a;
							var newColumn = s0.col + (offsetAfterFloat - s0.offset);
							return A2(
								$stil4m$elm_syntax$ParserFast$Good,
								A2(
									rangeAndFloatToRes,
									{
										end: {column: newColumn, row: s0.row},
										start: {column: s0.col, row: s0.row}
									},
									_float),
								{col: newColumn, indent: s0.indent, offset: offsetAfterFloat, row: s0.row, src: s0.src});
						} else {
							return A2(
								$stil4m$elm_syntax$ParserFast$Bad,
								false,
								A2($stil4m$elm_syntax$ParserFast$ExpectingNumber, s0.row, s0.col));
						}
					}
				}
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$numberExpression = A3(
	$stil4m$elm_syntax$ParserFast$floatOrIntegerDecimalOrHexadecimalMapWithRange,
	F2(
		function (range, n) {
			return {
				comments: $stil4m$elm_syntax$Rope$empty,
				syntax: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Expression$Floatable(n))
			};
		}),
	F2(
		function (range, n) {
			return {
				comments: $stil4m$elm_syntax$Rope$empty,
				syntax: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Expression$Integer(n))
			};
		}),
	F2(
		function (range, n) {
			return {
				comments: $stil4m$elm_syntax$Rope$empty,
				syntax: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Expression$Hex(n))
			};
		}));
var $stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue = F2(
	function (a, b) {
		return {$: 'FunctionOrValue', a: a, b: b};
	});
var $stil4m$elm_syntax$ParserFast$ifFollowedByWhileValidateWithoutLinebreak = F3(
	function (firstIsOkay, afterFirstIsOkay, resultIsOkay) {
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s) {
				var firstOffset = A3($stil4m$elm_syntax$ParserFast$isSubCharWithoutLinebreak, firstIsOkay, s.offset, s.src);
				if (_Utils_eq(firstOffset, -1)) {
					return A2(
						$stil4m$elm_syntax$ParserFast$Bad,
						false,
						A2($stil4m$elm_syntax$ParserFast$ExpectingCharSatisfyingPredicate, s.row, s.col));
				} else {
					var s1 = A6($stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp, afterFirstIsOkay, firstOffset, s.row, s.col + 1, s.src, s.indent);
					var name = A3($elm$core$String$slice, s.offset, s1.offset, s.src);
					return resultIsOkay(name) ? A2($stil4m$elm_syntax$ParserFast$Good, name, s1) : A2(
						$stil4m$elm_syntax$ParserFast$Bad,
						false,
						A2($stil4m$elm_syntax$ParserFast$ExpectingStringSatisfyingPredicate, s.row, s.col + 1));
				}
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Tokens$functionName = A3($stil4m$elm_syntax$ParserFast$ifFollowedByWhileValidateWithoutLinebreak, $stil4m$elm_syntax$Char$Extra$unicodeIsLowerFast, $stil4m$elm_syntax$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast, $stil4m$elm_syntax$Elm$Parser$Tokens$isNotReserved);
var $stil4m$elm_syntax$ParserFast$oneOf2Map = F4(
	function (firstToChoice, _v0, secondToChoice, _v1) {
		var attemptFirst = _v0.a;
		var attemptSecond = _v1.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s) {
				var _v2 = attemptFirst(s);
				if (_v2.$ === 'Good') {
					var first = _v2.a;
					var s1 = _v2.b;
					return A2(
						$stil4m$elm_syntax$ParserFast$Good,
						firstToChoice(first),
						s1);
				} else {
					var firstCommitted = _v2.a;
					var firstX = _v2.b;
					if (firstCommitted) {
						return A2($stil4m$elm_syntax$ParserFast$Bad, firstCommitted, firstX);
					} else {
						var _v3 = attemptSecond(s);
						if (_v3.$ === 'Good') {
							var second = _v3.a;
							var s1 = _v3.b;
							return A2(
								$stil4m$elm_syntax$ParserFast$Good,
								secondToChoice(second),
								s1);
						} else {
							var secondCommitted = _v3.a;
							var secondX = _v3.b;
							return secondCommitted ? A2($stil4m$elm_syntax$ParserFast$Bad, secondCommitted, secondX) : A2(
								$stil4m$elm_syntax$ParserFast$Bad,
								false,
								A3($stil4m$elm_syntax$ParserFast$ExpectingOneOf, firstX, secondX, _List_Nil));
						}
					}
				}
			});
	});
var $stil4m$elm_syntax$ParserFast$orSucceed = F2(
	function (_v0, secondRes) {
		var attemptFirst = _v0.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s) {
				var _v1 = attemptFirst(s);
				if (_v1.$ === 'Good') {
					var firstGood = _v1;
					return firstGood;
				} else {
					var firstBad = _v1;
					var firstCommitted = firstBad.a;
					return firstCommitted ? firstBad : A2($stil4m$elm_syntax$ParserFast$Good, secondRes, s);
				}
			});
	});
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$maybeDotReferenceExpressionTuple() {
	return A2(
		$stil4m$elm_syntax$ParserFast$orSucceed,
		A2(
			$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
			'.',
			A4(
				$stil4m$elm_syntax$ParserFast$oneOf2Map,
				$elm$core$Maybe$Just,
				A3(
					$stil4m$elm_syntax$ParserFast$map2,
					F2(
						function (firstName, after) {
							if (after.$ === 'Nothing') {
								return _Utils_Tuple3(_List_Nil, firstName, _List_Nil);
							} else {
								var _v1 = after.a;
								var qualificationAfter = _v1.a;
								var unqualified = _v1.b;
								var recordAccess = _v1.c;
								return _Utils_Tuple3(
									A2($elm$core$List$cons, firstName, qualificationAfter),
									unqualified,
									recordAccess);
							}
						}),
					$stil4m$elm_syntax$Elm$Parser$Tokens$typeName,
					$stil4m$elm_syntax$ParserFast$lazy(
						function (_v2) {
							return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$maybeDotReferenceExpressionTuple();
						})),
				$elm$core$Basics$identity,
				A3(
					$stil4m$elm_syntax$ParserFast$map2,
					F2(
						function (name, recordAccesses) {
							return $elm$core$Maybe$Just(
								_Utils_Tuple3(_List_Nil, name, recordAccesses));
						}),
					$stil4m$elm_syntax$Elm$Parser$Tokens$functionName,
					$stil4m$elm_syntax$Elm$Parser$Expression$multiRecordAccess))),
		$elm$core$Maybe$Nothing);
}
try {
	var $stil4m$elm_syntax$Elm$Parser$Expression$maybeDotReferenceExpressionTuple = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$maybeDotReferenceExpressionTuple();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$maybeDotReferenceExpressionTuple = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$maybeDotReferenceExpressionTuple;
	};
} catch ($) {
	throw 'Some top-level definitions from `Elm.Parser.Expression` are causing infinite recursion:\n\n  ┌─────┐\n  │    maybeDotReferenceExpressionTuple\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $stil4m$elm_syntax$Elm$Parser$Expression$qualifiedOrVariantOrRecordConstructorReferenceExpressionFollowedByRecordAccess = A3(
	$stil4m$elm_syntax$ParserFast$map2WithRange,
	F3(
		function (range, firstName, after) {
			return {
				comments: $stil4m$elm_syntax$Rope$empty,
				syntax: function () {
					if (after.$ === 'Nothing') {
						return A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							range,
							A2($stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue, _List_Nil, firstName));
					} else {
						var _v1 = after.a;
						var qualificationAfter = _v1.a;
						var unqualified = _v1.b;
						var recordAccesses = _v1.c;
						if (!recordAccesses.b) {
							return A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								range,
								A2(
									$stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue,
									A2($elm$core$List$cons, firstName, qualificationAfter),
									unqualified));
						} else {
							var _v3 = recordAccesses.a;
							var firstRecordAccessRange = _v3.a;
							var referenceNode = A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								{
									end: {column: firstRecordAccessRange.start.column - 1, row: firstRecordAccessRange.start.row},
									start: range.start
								},
								A2(
									$stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue,
									A2($elm$core$List$cons, firstName, qualificationAfter),
									unqualified));
							return A3(
								$elm$core$List$foldl,
								F2(
									function (fieldNode, leftNode) {
										var fieldRange = fieldNode.a;
										var leftRange = leftNode.a;
										return A2(
											$stil4m$elm_syntax$Elm$Syntax$Node$Node,
											{end: fieldRange.end, start: leftRange.start},
											A2($stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess, leftNode, fieldNode));
									}),
								referenceNode,
								recordAccesses);
						}
					}
				}()
			};
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeName,
	$stil4m$elm_syntax$Elm$Parser$Expression$maybeDotReferenceExpressionTuple);
var $stil4m$elm_syntax$Elm$Parser$Expression$unqualifiedFunctionReferenceExpressionFollowedByRecordAccess = A3(
	$stil4m$elm_syntax$ParserFast$map2,
	F2(
		function (leftestResult, recordAccesses) {
			if (!recordAccesses.b) {
				return leftestResult;
			} else {
				return {
					comments: leftestResult.comments,
					syntax: A3(
						$elm$core$List$foldl,
						F2(
							function (fieldNode, leftNode) {
								var fieldRange = fieldNode.a;
								var leftRange = leftNode.a;
								return A2(
									$stil4m$elm_syntax$Elm$Syntax$Node$Node,
									{end: fieldRange.end, start: leftRange.start},
									A2($stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess, leftNode, fieldNode));
							}),
						leftestResult.syntax,
						recordAccesses)
				};
			}
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameMapWithRange(
		F2(
			function (range, unqualified) {
				return {
					comments: $stil4m$elm_syntax$Rope$empty,
					syntax: A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						range,
						A2($stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue, _List_Nil, unqualified))
				};
			})),
	$stil4m$elm_syntax$Elm$Parser$Expression$multiRecordAccess);
var $stil4m$elm_syntax$Elm$Parser$Expression$referenceOrNumberExpression = A3($stil4m$elm_syntax$ParserFast$oneOf3, $stil4m$elm_syntax$Elm$Parser$Expression$qualifiedOrVariantOrRecordConstructorReferenceExpressionFollowedByRecordAccess, $stil4m$elm_syntax$Elm$Parser$Expression$unqualifiedFunctionReferenceExpressionFollowedByRecordAccess, $stil4m$elm_syntax$Elm$Parser$Expression$numberExpression);
var $stil4m$elm_syntax$ParserFast$symbolBacktrackableFollowedBy = F2(
	function (str, _v0) {
		var parseNext = _v0.a;
		var strLength = $elm$core$String$length(str);
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s) {
				var newOffset = s.offset + strLength;
				return _Utils_eq(
					A3($elm$core$String$slice, s.offset, newOffset, s.src),
					str + '') ? parseNext(
					{col: s.col + strLength, indent: s.indent, offset: newOffset, row: s.row, src: s.src}) : A2(
					$stil4m$elm_syntax$ParserFast$Bad,
					false,
					A3($stil4m$elm_syntax$ParserFast$ExpectingSymbol, s.row, s.col, str));
			});
	});
var $stil4m$elm_syntax$ParserFast$symbolWithEndLocation = F2(
	function (str, endLocationToRes) {
		var strLength = $elm$core$String$length(str);
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s) {
				var newOffset = s.offset + strLength;
				if (_Utils_eq(
					A3($elm$core$String$slice, s.offset, newOffset, s.src),
					str + '')) {
					var newCol = s.col + strLength;
					return A2(
						$stil4m$elm_syntax$ParserFast$Good,
						endLocationToRes(
							{column: newCol, row: s.row}),
						{col: newCol, indent: s.indent, offset: newOffset, row: s.row, src: s.src});
				} else {
					return A2(
						$stil4m$elm_syntax$ParserFast$Bad,
						false,
						A3($stil4m$elm_syntax$ParserFast$ExpectingSymbol, s.row, s.col, str));
				}
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$temporaryErrPrecedenceTooHigh = $elm$core$Result$Err('infix operator precedence too high');
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$FieldsAfterName = function (a) {
	return {$: 'FieldsAfterName', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation = F2(
	function (a, b) {
		return {$: 'FunctionTypeAnnotation', a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord = F2(
	function (a, b) {
		return {$: 'GenericRecord', a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record = function (a) {
	return {$: 'Record', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$RecordExtensionExpressionAfterName = function (a) {
	return {$: 'RecordExtensionExpressionAfterName', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled = function (a) {
	return {$: 'Tupled', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed = F2(
	function (a, b) {
		return {$: 'Typed', a: a, b: b};
	});
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit = {$: 'Unit'};
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType = function (a) {
	return {$: 'GenericType', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$genericTypeAnnotation = $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameMapWithRange(
	F2(
		function (range, _var) {
			return {
				comments: $stil4m$elm_syntax$Rope$empty,
				syntax: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(_var))
			};
		}));
var $stil4m$elm_syntax$ParserFast$map3WithRange = F4(
	function (func, _v0, _v1, _v2) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		var parseC = _v2.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v3 = parseA(s0);
				if (_v3.$ === 'Bad') {
					var committed = _v3.a;
					var x = _v3.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
				} else {
					var a = _v3.a;
					var s1 = _v3.b;
					var _v4 = parseB(s1);
					if (_v4.$ === 'Bad') {
						var x = _v4.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var b = _v4.a;
						var s2 = _v4.b;
						var _v5 = parseC(s2);
						if (_v5.$ === 'Bad') {
							var x = _v5.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var c = _v5.a;
							var s3 = _v5.b;
							return A2(
								$stil4m$elm_syntax$ParserFast$Good,
								A4(
									func,
									{
										end: {column: s3.col, row: s3.row},
										start: {column: s0.col, row: s0.row}
									},
									a,
									b,
									c),
								s3);
						}
					}
				}
			});
	});
var $stil4m$elm_syntax$ParserFast$map6WithRange = F7(
	function (func, _v0, _v1, _v2, _v3, _v4, _v5) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		var parseC = _v2.a;
		var parseD = _v3.a;
		var parseE = _v4.a;
		var parseF = _v5.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v6 = parseA(s0);
				if (_v6.$ === 'Bad') {
					var committed = _v6.a;
					var x = _v6.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
				} else {
					var a = _v6.a;
					var s1 = _v6.b;
					var _v7 = parseB(s1);
					if (_v7.$ === 'Bad') {
						var x = _v7.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var b = _v7.a;
						var s2 = _v7.b;
						var _v8 = parseC(s2);
						if (_v8.$ === 'Bad') {
							var x = _v8.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var c = _v8.a;
							var s3 = _v8.b;
							var _v9 = parseD(s3);
							if (_v9.$ === 'Bad') {
								var x = _v9.b;
								return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
							} else {
								var d = _v9.a;
								var s4 = _v9.b;
								var _v10 = parseE(s4);
								if (_v10.$ === 'Bad') {
									var x = _v10.b;
									return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
								} else {
									var e = _v10.a;
									var s5 = _v10.b;
									var _v11 = parseF(s5);
									if (_v11.$ === 'Bad') {
										var x = _v11.b;
										return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
									} else {
										var f = _v11.a;
										var s6 = _v11.b;
										return A2(
											$stil4m$elm_syntax$ParserFast$Good,
											A7(
												func,
												{
													end: {column: s6.col, row: s6.row},
													start: {column: s0.col, row: s0.row}
												},
												a,
												b,
												c,
												d,
												e,
												f),
											s6);
									}
								}
							}
						}
					}
				}
			});
	});
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$maybeDotTypeNamesTuple() {
	return A4(
		$stil4m$elm_syntax$ParserFast$map2OrSucceed,
		F2(
			function (firstName, afterFirstName) {
				if (afterFirstName.$ === 'Nothing') {
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(_List_Nil, firstName));
				} else {
					var _v1 = afterFirstName.a;
					var qualificationAfter = _v1.a;
					var unqualified = _v1.b;
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(
							A2($elm$core$List$cons, firstName, qualificationAfter),
							unqualified));
				}
			}),
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '.', $stil4m$elm_syntax$Elm$Parser$Tokens$typeName),
		$stil4m$elm_syntax$ParserFast$lazy(
			function (_v2) {
				return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$maybeDotTypeNamesTuple();
			}),
		$elm$core$Maybe$Nothing);
}
try {
	var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$maybeDotTypeNamesTuple = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$maybeDotTypeNamesTuple();
	$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$maybeDotTypeNamesTuple = function () {
		return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$maybeDotTypeNamesTuple;
	};
} catch ($) {
	throw 'Some top-level definitions from `Elm.Parser.TypeAnnotation` are causing infinite recursion:\n\n  ┌─────┐\n  │    maybeDotTypeNamesTuple\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $stil4m$elm_syntax$ParserFast$oneOf4 = F4(
	function (_v0, _v1, _v2, _v3) {
		var attemptFirst = _v0.a;
		var attemptSecond = _v1.a;
		var attemptThird = _v2.a;
		var attemptFourth = _v3.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s) {
				var _v4 = attemptFirst(s);
				if (_v4.$ === 'Good') {
					var firstGood = _v4;
					return firstGood;
				} else {
					var firstBad = _v4;
					var firstCommitted = firstBad.a;
					var firstX = firstBad.b;
					if (firstCommitted) {
						return firstBad;
					} else {
						var _v5 = attemptSecond(s);
						if (_v5.$ === 'Good') {
							var secondGood = _v5;
							return secondGood;
						} else {
							var secondBad = _v5;
							var secondCommitted = secondBad.a;
							var secondX = secondBad.b;
							if (secondCommitted) {
								return secondBad;
							} else {
								var _v6 = attemptThird(s);
								if (_v6.$ === 'Good') {
									var thirdGood = _v6;
									return thirdGood;
								} else {
									var thirdBad = _v6;
									var thirdCommitted = thirdBad.a;
									var thirdX = thirdBad.b;
									if (thirdCommitted) {
										return thirdBad;
									} else {
										var _v7 = attemptFourth(s);
										if (_v7.$ === 'Good') {
											var fourthGood = _v7;
											return fourthGood;
										} else {
											var fourthBad = _v7;
											var fourthCommitted = fourthBad.a;
											var fourthX = fourthBad.b;
											return fourthCommitted ? fourthBad : A2(
												$stil4m$elm_syntax$ParserFast$Bad,
												false,
												A3(
													$stil4m$elm_syntax$ParserFast$ExpectingOneOf,
													firstX,
													secondX,
													_List_fromArray(
														[thirdX, fourthX])));
										}
									}
								}
							}
						}
					}
				}
			});
	});
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationRecordEmpty = $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(_List_Nil);
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typedTypeAnnotationWithoutArguments = A3(
	$stil4m$elm_syntax$ParserFast$map2WithRange,
	F3(
		function (range, startName, afterStartName) {
			var name = function () {
				if (afterStartName.$ === 'Nothing') {
					return _Utils_Tuple2(_List_Nil, startName);
				} else {
					var _v1 = afterStartName.a;
					var qualificationAfterStartName = _v1.a;
					var unqualified = _v1.b;
					return _Utils_Tuple2(
						A2($elm$core$List$cons, startName, qualificationAfterStartName),
						unqualified);
				}
			}();
			return {
				comments: $stil4m$elm_syntax$Rope$empty,
				syntax: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					A2(
						$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed,
						A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, name),
						_List_Nil))
			};
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeName,
	$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$maybeDotTypeNamesTuple);
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotationNoFnIncludingTypedWithArguments() {
	return A4(
		$stil4m$elm_syntax$ParserFast$oneOf4,
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$parensTypeAnnotation(),
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typedTypeAnnotationWithArgumentsOptimisticLayout(),
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$genericTypeAnnotation,
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordTypeAnnotation());
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typedTypeAnnotationWithArgumentsOptimisticLayout() {
	return A4(
		$stil4m$elm_syntax$ParserFast$map3,
		F3(
			function (nameNode, commentsAfterName, argsReverse) {
				var nameRange = nameNode.a;
				var range = function () {
					var _v8 = argsReverse.syntax;
					if (!_v8.b) {
						return nameRange;
					} else {
						var _v9 = _v8.a;
						var lastArgRange = _v9.a;
						return {end: lastArgRange.end, start: nameRange.start};
					}
				}();
				return {
					comments: A2($stil4m$elm_syntax$Rope$prependTo, argsReverse.comments, commentsAfterName),
					syntax: A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						range,
						A2(
							$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed,
							nameNode,
							$elm$core$List$reverse(argsReverse.syntax)))
				};
			}),
		A3(
			$stil4m$elm_syntax$ParserFast$map2WithRange,
			F3(
				function (range, startName, afterStartName) {
					var name = function () {
						if (afterStartName.$ === 'Nothing') {
							return _Utils_Tuple2(_List_Nil, startName);
						} else {
							var _v11 = afterStartName.a;
							var qualificationAfterStartName = _v11.a;
							var unqualified = _v11.b;
							return _Utils_Tuple2(
								A2($elm$core$List$cons, startName, qualificationAfterStartName),
								unqualified);
						}
					}();
					return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, name);
				}),
			$stil4m$elm_syntax$Elm$Parser$Tokens$typeName,
			$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$maybeDotTypeNamesTuple),
		$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
		$stil4m$elm_syntax$ParserWithComments$manyWithoutReverse(
			$stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedFollowedBy(
				A3(
					$stil4m$elm_syntax$ParserFast$map2,
					F2(
						function (typeAnnotationResult, commentsAfter) {
							return {
								comments: A2($stil4m$elm_syntax$Rope$prependTo, commentsAfter, typeAnnotationResult.comments),
								syntax: typeAnnotationResult.syntax
							};
						}),
					$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotationNoFnExcludingTypedWithArguments(),
					$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout))));
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotationNoFnExcludingTypedWithArguments() {
	return A4(
		$stil4m$elm_syntax$ParserFast$oneOf4,
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$parensTypeAnnotation(),
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typedTypeAnnotationWithoutArguments,
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$genericTypeAnnotation,
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordTypeAnnotation());
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$parensTypeAnnotation() {
	return A2(
		$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
		'(',
		A2(
			$stil4m$elm_syntax$ParserFast$oneOf2,
			A2(
				$stil4m$elm_syntax$ParserFast$symbolWithEndLocation,
				')',
				function (end) {
					return {
						comments: $stil4m$elm_syntax$Rope$empty,
						syntax: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{
								end: end,
								start: {column: end.column - 2, row: end.row}
							},
							$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit)
					};
				}),
			A5(
				$stil4m$elm_syntax$ParserFast$map4WithRange,
				F5(
					function (rangeAfterOpeningParens, commentsBeforeFirstPart, firstPart, commentsAfterFirstPart, lastToSecondPart) {
						return {
							comments: A2(
								$stil4m$elm_syntax$Rope$prependTo,
								lastToSecondPart.comments,
								A2(
									$stil4m$elm_syntax$Rope$prependTo,
									commentsAfterFirstPart,
									A2($stil4m$elm_syntax$Rope$prependTo, firstPart.comments, commentsBeforeFirstPart))),
							syntax: A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								{
									end: rangeAfterOpeningParens.end,
									start: {column: rangeAfterOpeningParens.start.column - 1, row: rangeAfterOpeningParens.start.row}
								},
								function () {
									var _v5 = lastToSecondPart.syntax;
									if (_v5.$ === 'Nothing') {
										var _v6 = firstPart.syntax;
										var firstPartType = _v6.b;
										return firstPartType;
									} else {
										var firstAndMaybeThirdPart = _v5.a;
										var _v7 = firstAndMaybeThirdPart.maybeThirdPart;
										if (_v7.$ === 'Nothing') {
											return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled(
												_List_fromArray(
													[firstPart.syntax, firstAndMaybeThirdPart.secondPart]));
										} else {
											var thirdPart = _v7.a;
											return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled(
												_List_fromArray(
													[firstPart.syntax, firstAndMaybeThirdPart.secondPart, thirdPart]));
										}
									}
								}())
						};
					}),
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
				$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(),
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
				A2(
					$stil4m$elm_syntax$ParserFast$oneOf2,
					A2(
						$stil4m$elm_syntax$ParserFast$symbol,
						')',
						{comments: $stil4m$elm_syntax$Rope$empty, syntax: $elm$core$Maybe$Nothing}),
					A2(
						$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
						',',
						A5(
							$stil4m$elm_syntax$ParserFast$map4,
							F4(
								function (commentsBefore, secondPartResult, commentsAfter, maybeThirdPartResult) {
									return {
										comments: A2(
											$stil4m$elm_syntax$Rope$prependTo,
											commentsAfter,
											A2($stil4m$elm_syntax$Rope$prependTo, secondPartResult.comments, commentsBefore)),
										syntax: $elm$core$Maybe$Just(
											{maybeThirdPart: maybeThirdPartResult.syntax, secondPart: secondPartResult.syntax})
									};
								}),
							$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
							$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(),
							$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
							A2(
								$stil4m$elm_syntax$ParserFast$oneOf2,
								A2(
									$stil4m$elm_syntax$ParserFast$symbol,
									')',
									{comments: $stil4m$elm_syntax$Rope$empty, syntax: $elm$core$Maybe$Nothing}),
								A2(
									$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
									',',
									A2(
										$stil4m$elm_syntax$ParserFast$followedBySymbol,
										')',
										A4(
											$stil4m$elm_syntax$ParserFast$map3,
											F3(
												function (commentsBefore, thirdPartResult, commentsAfter) {
													return {
														comments: A2(
															$stil4m$elm_syntax$Rope$prependTo,
															commentsAfter,
															A2($stil4m$elm_syntax$Rope$prependTo, thirdPartResult.comments, commentsBefore)),
														syntax: $elm$core$Maybe$Just(thirdPartResult.syntax)
													};
												}),
											$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
											$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(),
											$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout))))))))));
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordTypeAnnotation() {
	return A3(
		$stil4m$elm_syntax$ParserFast$map2WithRange,
		F3(
			function (range, commentsBefore, afterCurly) {
				return {
					comments: A2($stil4m$elm_syntax$Rope$prependTo, afterCurly.comments, commentsBefore),
					syntax: function () {
						var _v3 = afterCurly.syntax;
						if (_v3.$ === 'Nothing') {
							return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationRecordEmpty);
						} else {
							var afterCurlyResult = _v3.a;
							return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, afterCurlyResult);
						}
					}()
				};
			}),
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '{', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
		A2(
			$stil4m$elm_syntax$ParserFast$oneOf2,
			A2(
				$stil4m$elm_syntax$ParserFast$followedBySymbol,
				'}',
				A4(
					$stil4m$elm_syntax$ParserFast$map3,
					F3(
						function (firstNameNode, commentsAfterFirstName, afterFirstName) {
							return {
								comments: A2($stil4m$elm_syntax$Rope$prependTo, afterFirstName.comments, commentsAfterFirstName),
								syntax: $elm$core$Maybe$Just(
									function () {
										var _v4 = afterFirstName.syntax;
										if (_v4.$ === 'RecordExtensionExpressionAfterName') {
											var fields = _v4.a;
											return A2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord, firstNameNode, fields);
										} else {
											var fieldsAfterName = _v4.a;
											return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(
												A2(
													$elm$core$List$cons,
													A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $elm$core$Tuple$pair, firstNameNode, fieldsAfterName.firstFieldValue),
													fieldsAfterName.tailFields));
										}
									}())
							};
						}),
					$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode,
					$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
					A2(
						$stil4m$elm_syntax$ParserFast$oneOf2,
						A2(
							$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
							'|',
							A4(
								$stil4m$elm_syntax$ParserFast$map3WithRange,
								F4(
									function (range, commentsBefore, head, tail) {
										return {
											comments: A2(
												$stil4m$elm_syntax$Rope$prependTo,
												tail.comments,
												A2($stil4m$elm_syntax$Rope$prependTo, head.comments, commentsBefore)),
											syntax: $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$RecordExtensionExpressionAfterName(
												A2(
													$stil4m$elm_syntax$Elm$Syntax$Node$Node,
													range,
													A2($elm$core$List$cons, head.syntax, tail.syntax)))
										};
									}),
								$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
								$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition(),
								$stil4m$elm_syntax$ParserWithComments$many(
									A2(
										$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
										',',
										A3(
											$stil4m$elm_syntax$ParserFast$map2,
											F2(
												function (commentsBefore, field) {
													return {
														comments: A2($stil4m$elm_syntax$Rope$prependTo, field.comments, commentsBefore),
														syntax: field.syntax
													};
												}),
											$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
											$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition()))))),
						A2(
							$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
							':',
							A5(
								$stil4m$elm_syntax$ParserFast$map4,
								F4(
									function (commentsBeforeFirstFieldValue, firstFieldValue, commentsAfterFirstFieldValue, tailFields) {
										return {
											comments: A2(
												$stil4m$elm_syntax$Rope$prependTo,
												tailFields.comments,
												A2(
													$stil4m$elm_syntax$Rope$prependTo,
													commentsAfterFirstFieldValue,
													A2($stil4m$elm_syntax$Rope$prependTo, firstFieldValue.comments, commentsBeforeFirstFieldValue))),
											syntax: $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$FieldsAfterName(
												{firstFieldValue: firstFieldValue.syntax, tailFields: tailFields.syntax})
										};
									}),
								$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
								$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(),
								$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
								A2(
									$stil4m$elm_syntax$ParserFast$orSucceed,
									A2(
										$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
										',',
										$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldsTypeAnnotation()),
									{comments: $stil4m$elm_syntax$Rope$empty, syntax: _List_Nil})))))),
			A2(
				$stil4m$elm_syntax$ParserFast$symbol,
				'}',
				{comments: $stil4m$elm_syntax$Rope$empty, syntax: $elm$core$Maybe$Nothing})));
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldsTypeAnnotation() {
	return A4(
		$stil4m$elm_syntax$ParserFast$map3,
		F3(
			function (commentsBefore, head, tail) {
				return {
					comments: A2(
						$stil4m$elm_syntax$Rope$prependTo,
						tail.comments,
						A2($stil4m$elm_syntax$Rope$prependTo, head.comments, commentsBefore)),
					syntax: A2($elm$core$List$cons, head.syntax, tail.syntax)
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition(),
		$stil4m$elm_syntax$ParserWithComments$many(
			A2(
				$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
				',',
				A3(
					$stil4m$elm_syntax$ParserFast$map2,
					F2(
						function (commentsBefore, field) {
							return {
								comments: A2($stil4m$elm_syntax$Rope$prependTo, field.comments, commentsBefore),
								syntax: field.syntax
							};
						}),
					$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
					$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition()))));
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition() {
	return A7(
		$stil4m$elm_syntax$ParserFast$map6WithRange,
		F7(
			function (range, commentsBeforeFunctionName, name, commentsAfterFunctionName, commentsAfterColon, value, commentsAfterValue) {
				return {
					comments: A2(
						$stil4m$elm_syntax$Rope$prependTo,
						commentsAfterValue,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							value.comments,
							A2(
								$stil4m$elm_syntax$Rope$prependTo,
								commentsAfterColon,
								A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterFunctionName, commentsBeforeFunctionName)))),
					syntax: A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						range,
						_Utils_Tuple2(name, value.syntax))
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode,
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, ':', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(),
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout);
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation() {
	return A4(
		$stil4m$elm_syntax$ParserFast$map3,
		F3(
			function (inType, commentsAfterIn, maybeOut) {
				return {
					comments: A2(
						$stil4m$elm_syntax$Rope$prependTo,
						maybeOut.comments,
						A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterIn, inType.comments)),
					syntax: function () {
						var _v0 = maybeOut.syntax;
						if (_v0.$ === 'Nothing') {
							return inType.syntax;
						} else {
							var out = _v0.a;
							return A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation, inType.syntax, out);
						}
					}()
				};
			}),
		$stil4m$elm_syntax$ParserFast$lazy(
			function (_v1) {
				return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotationNoFnIncludingTypedWithArguments();
			}),
		$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
		A4(
			$stil4m$elm_syntax$ParserFast$map2OrSucceed,
			F2(
				function (commentsAfterArrow, typeAnnotationResult) {
					return {
						comments: A2($stil4m$elm_syntax$Rope$prependTo, typeAnnotationResult.comments, commentsAfterArrow),
						syntax: $elm$core$Maybe$Just(typeAnnotationResult.syntax)
					};
				}),
			A2(
				$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
				'->',
				A2($stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedPlusFollowedBy, 2, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)),
			$stil4m$elm_syntax$ParserFast$lazy(
				function (_v2) {
					return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation();
				}),
			{comments: $stil4m$elm_syntax$Rope$empty, syntax: $elm$core$Maybe$Nothing}));
}
try {
	var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNoFnIncludingTypedWithArguments = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotationNoFnIncludingTypedWithArguments();
	$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotationNoFnIncludingTypedWithArguments = function () {
		return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNoFnIncludingTypedWithArguments;
	};
	var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typedTypeAnnotationWithArgumentsOptimisticLayout = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typedTypeAnnotationWithArgumentsOptimisticLayout();
	$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typedTypeAnnotationWithArgumentsOptimisticLayout = function () {
		return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typedTypeAnnotationWithArgumentsOptimisticLayout;
	};
	var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNoFnExcludingTypedWithArguments = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotationNoFnExcludingTypedWithArguments();
	$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotationNoFnExcludingTypedWithArguments = function () {
		return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNoFnExcludingTypedWithArguments;
	};
	var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$parensTypeAnnotation = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$parensTypeAnnotation();
	$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$parensTypeAnnotation = function () {
		return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$parensTypeAnnotation;
	};
	var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordTypeAnnotation = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordTypeAnnotation();
	$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordTypeAnnotation = function () {
		return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordTypeAnnotation;
	};
	var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordFieldsTypeAnnotation = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldsTypeAnnotation();
	$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldsTypeAnnotation = function () {
		return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordFieldsTypeAnnotation;
	};
	var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordFieldDefinition = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition();
	$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition = function () {
		return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordFieldDefinition;
	};
	var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation();
	$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation = function () {
		return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation;
	};
} catch ($) {
	throw 'Some top-level definitions from `Elm.Parser.TypeAnnotation` are causing infinite recursion:\n\n  ┌─────┐\n  │    typeAnnotationNoFnIncludingTypedWithArguments\n  │     ↓\n  │    typedTypeAnnotationWithArgumentsOptimisticLayout\n  │     ↓\n  │    typeAnnotationNoFnExcludingTypedWithArguments\n  │     ↓\n  │    parensTypeAnnotation\n  │     ↓\n  │    recordTypeAnnotation\n  │     ↓\n  │    recordFieldsTypeAnnotation\n  │     ↓\n  │    recordFieldDefinition\n  │     ↓\n  │    typeAnnotation\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $stil4m$elm_syntax$ParserFast$validate = F3(
	function (isOkay, problemOnNotOkay, _v0) {
		var parseA = _v0.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v1 = parseA(s0);
				if (_v1.$ === 'Bad') {
					var committed = _v1.a;
					var x = _v1.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
				} else {
					var good = _v1;
					var a = good.a;
					var s1 = good.b;
					return isOkay(a) ? good : A2(
						$stil4m$elm_syntax$ParserFast$Bad,
						true,
						A3($stil4m$elm_syntax$ParserFast$ExpectingCustom, s1.row, s1.col, problemOnNotOkay));
				}
			});
	});
var $stil4m$elm_syntax$ParserFast$whileWithoutLinebreakAnd2PartUtf16ToResultAndThen = F3(
	function (whileCharIsOkay, consumedStringToIntermediateOrErr, intermediateToFollowupParser) {
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var s1Offset = A3($stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakAnd2PartUtf16Help, whileCharIsOkay, s0.offset, s0.src);
				var whileContent = A3($elm$core$String$slice, s0.offset, s1Offset, s0.src);
				var _v0 = consumedStringToIntermediateOrErr(whileContent);
				if (_v0.$ === 'Err') {
					var problemMessage = _v0.a;
					return A2(
						$stil4m$elm_syntax$ParserFast$Bad,
						false,
						A3($stil4m$elm_syntax$ParserFast$ExpectingCustom, s0.row, s0.col, problemMessage));
				} else {
					var intermediate = _v0.a;
					var s1Column = s0.col + (s1Offset - s0.offset);
					var _v1 = intermediateToFollowupParser(intermediate);
					var parseFollowup = _v1.a;
					return $stil4m$elm_syntax$ParserFast$pStepCommit(
						parseFollowup(
							{col: s1Column, indent: s0.indent, offset: s1Offset, row: s0.row, src: s0.src}));
				}
			});
	});
var $stil4m$elm_syntax$ParserFast$changeIndent = F2(
	function (newIndent, s) {
		return {col: s.col, indent: newIndent, offset: s.offset, row: s.row, src: s.src};
	});
var $stil4m$elm_syntax$ParserFast$withIndentSetToColumn = function (_v0) {
	var parse = _v0.a;
	return $stil4m$elm_syntax$ParserFast$Parser(
		function (s0) {
			var _v1 = parse(
				A2($stil4m$elm_syntax$ParserFast$changeIndent, s0.col, s0));
			if (_v1.$ === 'Good') {
				var a = _v1.a;
				var s1 = _v1.b;
				return A2(
					$stil4m$elm_syntax$ParserFast$Good,
					a,
					A2($stil4m$elm_syntax$ParserFast$changeIndent, s0.indent, s1));
			} else {
				var bad = _v1;
				return bad;
			}
		});
};
var $stil4m$elm_syntax$ParserFast$withIndentSetToColumnMinus = F2(
	function (columnToMoveIndentationBaseBackBy, _v0) {
		var parse = _v0.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v1 = parse(
					A2($stil4m$elm_syntax$ParserFast$changeIndent, s0.col - columnToMoveIndentationBaseBackBy, s0));
				if (_v1.$ === 'Good') {
					var a = _v1.a;
					var s1 = _v1.b;
					return A2(
						$stil4m$elm_syntax$ParserFast$Good,
						a,
						A2($stil4m$elm_syntax$ParserFast$changeIndent, s0.indent, s1));
				} else {
					var bad = _v1;
					return bad;
				}
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$extendedSubExpressionOptimisticLayout = F2(
	function (toResult, afterCommitting) {
		return A4(
			$stil4m$elm_syntax$ParserFast$loopWhileSucceedsOntoResultFromParser,
			$stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedFollowedBy(
				A2($stil4m$elm_syntax$Elm$Parser$Expression$infixOperatorAndThen, toResult, afterCommitting)),
			$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpressionMaybeAppliedOptimisticLayout(),
			F2(
				function (extensionRightResult, leftNodeWithComments) {
					return {
						comments: A2($stil4m$elm_syntax$Rope$prependTo, extensionRightResult.comments, leftNodeWithComments.comments),
						syntax: A2($stil4m$elm_syntax$Elm$Parser$Expression$applyExtensionRight, extensionRightResult.syntax, leftNodeWithComments.syntax)
					};
				}),
			$elm$core$Basics$identity);
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$infixLeft = F2(
	function (leftPrecedence, symbol) {
		return {
			extensionRight: A3(
				$stil4m$elm_syntax$ParserFast$map2,
				F2(
					function (commentsBeforeFirst, first) {
						return {
							comments: A2($stil4m$elm_syntax$Rope$prependTo, first.comments, commentsBeforeFirst),
							syntax: $stil4m$elm_syntax$Elm$Parser$Expression$ExtendRightByOperation(
								{direction: $stil4m$elm_syntax$Elm$Syntax$Infix$Left, expression: first.syntax, symbol: symbol})
						};
					}),
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
				A2(
					$stil4m$elm_syntax$Elm$Parser$Expression$extendedSubExpressionOptimisticLayout,
					function (info) {
						return (_Utils_cmp(info.leftPrecedence, leftPrecedence) > 0) ? $elm$core$Result$Ok(info) : $stil4m$elm_syntax$Elm$Parser$Expression$temporaryErrPrecedenceTooHigh;
					},
					function ($) {
						return $.extensionRight;
					})),
			leftPrecedence: leftPrecedence,
			symbol: symbol
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$infixNonAssociative = F2(
	function (leftPrecedence, symbol) {
		return {
			extensionRight: A3(
				$stil4m$elm_syntax$ParserFast$map2,
				F2(
					function (commentsBefore, right) {
						return {
							comments: A2($stil4m$elm_syntax$Rope$prependTo, right.comments, commentsBefore),
							syntax: $stil4m$elm_syntax$Elm$Parser$Expression$ExtendRightByOperation(
								{direction: $stil4m$elm_syntax$Elm$Syntax$Infix$Non, expression: right.syntax, symbol: symbol})
						};
					}),
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
				A2(
					$stil4m$elm_syntax$Elm$Parser$Expression$extendedSubExpressionOptimisticLayout,
					function (info) {
						return (_Utils_cmp(info.leftPrecedence, leftPrecedence) > -1) ? $elm$core$Result$Ok(info) : $stil4m$elm_syntax$Elm$Parser$Expression$temporaryErrPrecedenceTooHigh;
					},
					function (info) {
						return _Utils_eq(info.leftPrecedence, leftPrecedence) ? $stil4m$elm_syntax$Elm$Parser$Expression$problemCannotMixNonAssociativeInfixOperators : info.extensionRight;
					})),
			leftPrecedence: leftPrecedence,
			symbol: symbol
		};
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$infixOperatorAndThen = F2(
	function (toResult, afterCommitting) {
		return A3(
			$stil4m$elm_syntax$ParserFast$whileWithoutLinebreakAnd2PartUtf16ToResultAndThen,
			$stil4m$elm_syntax$Elm$Parser$Tokens$isOperatorSymbolChar,
			function (operator) {
				switch (operator) {
					case '|>':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence1ApR());
					case '++':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5append());
					case '<|':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence1ApL());
					case '>>':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence9ComposeR());
					case '==':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Eq());
					case '*':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Mul());
					case '::':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5Cons());
					case '+':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Add());
					case '-':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Sub());
					case '|.':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Ignore());
					case '&&':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence3And());
					case '|=':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5Keep());
					case '<<':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence9ComposeL());
					case '/=':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Neq());
					case '//':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Idiv());
					case '/':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Fdiv());
					case '</>':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Slash());
					case '||':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence2Or());
					case '<=':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Le());
					case '>=':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Ge());
					case '>':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Gt());
					case '<?>':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence8QuestionMark());
					case '<':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Lt());
					case '^':
						return toResult(
							$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence8Pow());
					default:
						return $stil4m$elm_syntax$Elm$Parser$Expression$errUnknownInfixOperator;
				}
			},
			afterCommitting);
	});
var $stil4m$elm_syntax$Elm$Parser$Expression$infixRight = F2(
	function (leftPrecedence, symbol) {
		return {
			extensionRight: A3(
				$stil4m$elm_syntax$ParserFast$map2,
				F2(
					function (commentsBeforeFirst, first) {
						return {
							comments: A2($stil4m$elm_syntax$Rope$prependTo, first.comments, commentsBeforeFirst),
							syntax: $stil4m$elm_syntax$Elm$Parser$Expression$ExtendRightByOperation(
								{direction: $stil4m$elm_syntax$Elm$Syntax$Infix$Right, expression: first.syntax, symbol: symbol})
						};
					}),
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
				A2(
					$stil4m$elm_syntax$Elm$Parser$Expression$extendedSubExpressionOptimisticLayout,
					function (info) {
						return (_Utils_cmp(info.leftPrecedence, leftPrecedence) > -1) ? $elm$core$Result$Ok(info) : $stil4m$elm_syntax$Elm$Parser$Expression$temporaryErrPrecedenceTooHigh;
					},
					function ($) {
						return $.extensionRight;
					})),
			leftPrecedence: leftPrecedence,
			symbol: symbol
		};
	});
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letOrUnqualifiedReferenceExpression() {
	return A2(
		$stil4m$elm_syntax$ParserFast$oneOf2,
		$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letExpression(),
		$stil4m$elm_syntax$Elm$Parser$Expression$unqualifiedFunctionReferenceExpressionFollowedByRecordAccess);
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letExpression() {
	return A2(
		$stil4m$elm_syntax$ParserFast$keywordFollowedBy,
		'let',
		A4(
			$stil4m$elm_syntax$ParserFast$map3WithStartLocation,
			F4(
				function (start, declarations, commentsAfterIn, expressionResult) {
					var _v38 = expressionResult.syntax;
					var expressionRange = _v38.a;
					return {
						comments: A2(
							$stil4m$elm_syntax$Rope$prependTo,
							expressionResult.comments,
							A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterIn, declarations.comments)),
						syntax: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{
								end: expressionRange.end,
								start: {column: start.column - 3, row: start.row}
							},
							$stil4m$elm_syntax$Elm$Syntax$Expression$LetExpression(
								{declarations: declarations.declarations, expression: expressionResult.syntax}))
					};
				}),
			A2(
				$stil4m$elm_syntax$ParserFast$withIndentSetToColumnMinus,
				3,
				A3(
					$stil4m$elm_syntax$ParserFast$map2,
					F2(
						function (commentsAfterLet, declarations) {
							return {
								comments: A2($stil4m$elm_syntax$Rope$prependTo, declarations.comments, commentsAfterLet),
								declarations: declarations.syntax
							};
						}),
					$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
					$stil4m$elm_syntax$ParserFast$withIndentSetToColumn(
						$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDeclarationsIn()))),
			A2($stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedPlusFollowedBy, 2, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
			$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression()));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDeclarationsIn() {
	return $stil4m$elm_syntax$Elm$Parser$Layout$onTopIndentationFollowedBy(
		A4(
			$stil4m$elm_syntax$ParserFast$map3,
			F3(
				function (headLetResult, commentsAfter, tailLetResult) {
					return {
						comments: A2(
							$stil4m$elm_syntax$Rope$prependTo,
							tailLetResult.comments,
							A2($stil4m$elm_syntax$Rope$prependTo, commentsAfter, headLetResult.comments)),
						syntax: A2($elm$core$List$cons, headLetResult.syntax, tailLetResult.syntax)
					};
				}),
			A2(
				$stil4m$elm_syntax$ParserFast$oneOf2,
				$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letFunction(),
				$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDestructuringDeclaration()),
			$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
			A2(
				$stil4m$elm_syntax$ParserWithComments$until,
				$stil4m$elm_syntax$Elm$Parser$Tokens$inToken,
				$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$blockElement())));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$blockElement() {
	return $stil4m$elm_syntax$Elm$Parser$Layout$onTopIndentationFollowedBy(
		A3(
			$stil4m$elm_syntax$ParserFast$map2,
			F2(
				function (letDeclarationResult, commentsAfter) {
					return {
						comments: A2($stil4m$elm_syntax$Rope$prependTo, commentsAfter, letDeclarationResult.comments),
						syntax: letDeclarationResult.syntax
					};
				}),
			A2(
				$stil4m$elm_syntax$ParserFast$oneOf2,
				$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letFunction(),
				$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDestructuringDeclaration()),
			$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseOrUnqualifiedReferenceExpression() {
	return A2(
		$stil4m$elm_syntax$ParserFast$oneOf2,
		$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseExpression(),
		$stil4m$elm_syntax$Elm$Parser$Expression$unqualifiedFunctionReferenceExpressionFollowedByRecordAccess);
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseExpression() {
	return A2(
		$stil4m$elm_syntax$ParserFast$keywordFollowedBy,
		'case',
		A6(
			$stil4m$elm_syntax$ParserFast$map5WithStartLocation,
			F6(
				function (start, commentsAfterCase, casedExpressionResult, commentsBeforeOf, commentsAfterOf, casesResult) {
					var _v32 = casesResult.syntax;
					var firstCase = _v32.a;
					var lastToSecondCase = _v32.b;
					return {
						comments: A2(
							$stil4m$elm_syntax$Rope$prependTo,
							casesResult.comments,
							A2(
								$stil4m$elm_syntax$Rope$prependTo,
								commentsAfterOf,
								A2(
									$stil4m$elm_syntax$Rope$prependTo,
									commentsBeforeOf,
									A2($stil4m$elm_syntax$Rope$prependTo, casedExpressionResult.comments, commentsAfterCase)))),
						syntax: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{
								end: function () {
									if (lastToSecondCase.b) {
										var _v34 = lastToSecondCase.a;
										var _v35 = _v34.b;
										var lastCaseExpressionRange = _v35.a;
										return lastCaseExpressionRange.end;
									} else {
										var _v36 = firstCase;
										var _v37 = _v36.b;
										var firstCaseExpressionRange = _v37.a;
										return firstCaseExpressionRange.end;
									}
								}(),
								start: {column: start.column - 4, row: start.row}
							},
							$stil4m$elm_syntax$Elm$Syntax$Expression$CaseExpression(
								{
									cases: A2(
										$elm$core$List$cons,
										firstCase,
										$elm$core$List$reverse(lastToSecondCase)),
									expression: casedExpressionResult.syntax
								}))
					};
				}),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'of', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
			$stil4m$elm_syntax$ParserFast$withIndentSetToColumn(
				$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseStatements())));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseStatements() {
	return A6(
		$stil4m$elm_syntax$ParserFast$map5,
		F5(
			function (firstCasePatternResult, commentsAfterFirstCasePattern, commentsAfterFirstCaseArrowRight, firstCaseExpressionResult, lastToSecondCase) {
				return {
					comments: A2(
						$stil4m$elm_syntax$Rope$prependTo,
						lastToSecondCase.comments,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							firstCaseExpressionResult.comments,
							A2(
								$stil4m$elm_syntax$Rope$prependTo,
								commentsAfterFirstCaseArrowRight,
								A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterFirstCasePattern, firstCasePatternResult.comments)))),
					syntax: _Utils_Tuple2(
						_Utils_Tuple2(firstCasePatternResult.syntax, firstCaseExpressionResult.syntax),
						lastToSecondCase.syntax)
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Patterns$pattern,
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '->', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
		$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(),
		$stil4m$elm_syntax$ParserWithComments$manyWithoutReverse(
			$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseStatement()));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseStatement() {
	return $stil4m$elm_syntax$Elm$Parser$Layout$onTopIndentationFollowedBy(
		A5(
			$stil4m$elm_syntax$ParserFast$map4,
			F4(
				function (pattern, commentsBeforeArrowRight, commentsAfterArrowRight, expr) {
					return {
						comments: A2(
							$stil4m$elm_syntax$Rope$prependTo,
							expr.comments,
							A2(
								$stil4m$elm_syntax$Rope$prependTo,
								commentsAfterArrowRight,
								A2($stil4m$elm_syntax$Rope$prependTo, commentsBeforeArrowRight, pattern.comments))),
						syntax: _Utils_Tuple2(pattern.syntax, expr.syntax)
					};
				}),
			$stil4m$elm_syntax$Elm$Parser$Patterns$pattern,
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '->', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
			$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression()));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$tupledExpressionIfNecessaryFollowedByRecordAccess() {
	return A2(
		$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
		'(',
		A3(
			$stil4m$elm_syntax$ParserFast$oneOf3,
			A2(
				$stil4m$elm_syntax$ParserFast$symbolWithEndLocation,
				')',
				function (end) {
					return {
						comments: $stil4m$elm_syntax$Rope$empty,
						syntax: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{
								end: end,
								start: {column: end.column - 2, row: end.row}
							},
							$stil4m$elm_syntax$Elm$Syntax$Expression$UnitExpr)
					};
				}),
			$stil4m$elm_syntax$Elm$Parser$Expression$allowedPrefixOperatorFollowedByClosingParensOneOf,
			$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$tupledExpressionInnerAfterOpeningParens()));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$tupledExpressionInnerAfterOpeningParens() {
	return A5(
		$stil4m$elm_syntax$ParserFast$map4WithRange,
		F5(
			function (rangeAfterOpeningParens, commentsBeforeFirstPart, firstPart, commentsAfterFirstPart, tailParts) {
				return {
					comments: A2(
						$stil4m$elm_syntax$Rope$prependTo,
						tailParts.comments,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							commentsAfterFirstPart,
							A2($stil4m$elm_syntax$Rope$prependTo, firstPart.comments, commentsBeforeFirstPart))),
					syntax: function () {
						var _v27 = tailParts.syntax;
						if (_v27.$ === 'TupledParenthesizedFollowedByRecordAccesses') {
							var recordAccesses = _v27.a;
							if (!recordAccesses.b) {
								return A2(
									$stil4m$elm_syntax$Elm$Syntax$Node$Node,
									{
										end: rangeAfterOpeningParens.end,
										start: {column: rangeAfterOpeningParens.start.column - 1, row: rangeAfterOpeningParens.start.row}
									},
									$stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression(firstPart.syntax));
							} else {
								var _v29 = recordAccesses.a;
								var firstRecordAccessRange = _v29.a;
								var range = {
									end: {column: firstRecordAccessRange.start.column - 1, row: firstRecordAccessRange.start.row},
									start: {column: rangeAfterOpeningParens.start.column - 1, row: rangeAfterOpeningParens.start.row}
								};
								var parenthesizedNode = A2(
									$stil4m$elm_syntax$Elm$Syntax$Node$Node,
									range,
									$stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression(firstPart.syntax));
								return A3(
									$elm$core$List$foldl,
									F2(
										function (fieldNode, leftNode) {
											var fieldRange = fieldNode.a;
											var leftRange = leftNode.a;
											return A2(
												$stil4m$elm_syntax$Elm$Syntax$Node$Node,
												{end: fieldRange.end, start: leftRange.start},
												A2($stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess, leftNode, fieldNode));
										}),
									parenthesizedNode,
									recordAccesses);
							}
						} else {
							var _v30 = _v27.a;
							var secondPart = _v30.a;
							var maybeThirdPart = _v30.b;
							return A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								{
									end: rangeAfterOpeningParens.end,
									start: {column: rangeAfterOpeningParens.start.column - 1, row: rangeAfterOpeningParens.start.row}
								},
								function () {
									if (maybeThirdPart.$ === 'Nothing') {
										return $stil4m$elm_syntax$Elm$Syntax$Expression$TupledExpression(
											_List_fromArray(
												[firstPart.syntax, secondPart]));
									} else {
										var thirdPart = maybeThirdPart.a;
										return $stil4m$elm_syntax$Elm$Syntax$Expression$TupledExpression(
											_List_fromArray(
												[firstPart.syntax, secondPart, thirdPart]));
									}
								}());
						}
					}()
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(),
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		A2(
			$stil4m$elm_syntax$ParserFast$oneOf2,
			A2(
				$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
				')',
				$stil4m$elm_syntax$Elm$Parser$Expression$multiRecordAccessMap(
					function (recordAccesses) {
						return {
							comments: $stil4m$elm_syntax$Rope$empty,
							syntax: $stil4m$elm_syntax$Elm$Parser$Expression$TupledParenthesizedFollowedByRecordAccesses(recordAccesses)
						};
					})),
			A2(
				$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
				',',
				A5(
					$stil4m$elm_syntax$ParserFast$map4,
					F4(
						function (commentsBefore, partResult, commentsAfter, maybeThirdPart) {
							return {
								comments: A2(
									$stil4m$elm_syntax$Rope$prependTo,
									maybeThirdPart.comments,
									A2(
										$stil4m$elm_syntax$Rope$prependTo,
										commentsAfter,
										A2($stil4m$elm_syntax$Rope$prependTo, partResult.comments, commentsBefore))),
								syntax: $stil4m$elm_syntax$Elm$Parser$Expression$TupledTwoOrThree(
									_Utils_Tuple2(partResult.syntax, maybeThirdPart.syntax))
							};
						}),
					$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
					$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(),
					$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
					A2(
						$stil4m$elm_syntax$ParserFast$oneOf2,
						A2(
							$stil4m$elm_syntax$ParserFast$symbol,
							')',
							{comments: $stil4m$elm_syntax$Rope$empty, syntax: $elm$core$Maybe$Nothing}),
						A2(
							$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
							',',
							A2(
								$stil4m$elm_syntax$ParserFast$followedBySymbol,
								')',
								A4(
									$stil4m$elm_syntax$ParserFast$map3,
									F3(
										function (commentsBefore, partResult, commentsAfter) {
											return {
												comments: A2(
													$stil4m$elm_syntax$Rope$prependTo,
													commentsAfter,
													A2($stil4m$elm_syntax$Rope$prependTo, partResult.comments, commentsBefore)),
												syntax: $elm$core$Maybe$Just(partResult.syntax)
											};
										}),
									$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
									$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(),
									$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout))))))));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordExpressionFollowedByRecordAccess() {
	return A2(
		$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
		'{',
		A3(
			$stil4m$elm_syntax$ParserFast$map2,
			F2(
				function (leftestResult, recordAccesses) {
					if (!recordAccesses.b) {
						return leftestResult;
					} else {
						return {
							comments: leftestResult.comments,
							syntax: A3(
								$elm$core$List$foldl,
								F2(
									function (fieldNode, leftNode) {
										var fieldRange = fieldNode.a;
										var leftRange = leftNode.a;
										return A2(
											$stil4m$elm_syntax$Elm$Syntax$Node$Node,
											{end: fieldRange.end, start: leftRange.start},
											A2($stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess, leftNode, fieldNode));
									}),
								leftestResult.syntax,
								recordAccesses)
						};
					}
				}),
			A3(
				$stil4m$elm_syntax$ParserFast$map2WithRange,
				F3(
					function (range, commentsBefore, afterCurly) {
						return {
							comments: A2($stil4m$elm_syntax$Rope$prependTo, afterCurly.comments, commentsBefore),
							syntax: A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								$stil4m$elm_syntax$Elm$Parser$Expression$rangeMoveStartLeftByOneColumn(range),
								afterCurly.syntax)
						};
					}),
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
				$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordContentsCurlyEnd()),
			$stil4m$elm_syntax$Elm$Parser$Expression$multiRecordAccess));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordContentsCurlyEnd() {
	return A2(
		$stil4m$elm_syntax$ParserFast$oneOf2,
		A6(
			$stil4m$elm_syntax$ParserFast$map5,
			F5(
				function (nameNode, commentsAfterFunctionName, afterNameBeforeFields, tailFields, commentsBeforeClosingCurly) {
					return {
						comments: A2(
							$stil4m$elm_syntax$Rope$prependTo,
							commentsBeforeClosingCurly,
							A2(
								$stil4m$elm_syntax$Rope$prependTo,
								tailFields.comments,
								A2($stil4m$elm_syntax$Rope$prependTo, afterNameBeforeFields.comments, commentsAfterFunctionName))),
						syntax: function () {
							var _v25 = afterNameBeforeFields.syntax;
							if (_v25.$ === 'RecordUpdateFirstSetter') {
								var firstField = _v25.a;
								return A2(
									$stil4m$elm_syntax$Elm$Syntax$Expression$RecordUpdateExpression,
									nameNode,
									A2($elm$core$List$cons, firstField, tailFields.syntax));
							} else {
								var firstFieldValue = _v25.a;
								return $stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr(
									A2(
										$elm$core$List$cons,
										A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $elm$core$Tuple$pair, nameNode, firstFieldValue),
										tailFields.syntax));
							}
						}()
					};
				}),
			$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode,
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			A2(
				$stil4m$elm_syntax$ParserFast$oneOf2,
				A2(
					$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
					'|',
					A3(
						$stil4m$elm_syntax$ParserFast$map2,
						F2(
							function (commentsBefore, setterResult) {
								return {
									comments: A2($stil4m$elm_syntax$Rope$prependTo, setterResult.comments, commentsBefore),
									syntax: $stil4m$elm_syntax$Elm$Parser$Expression$RecordUpdateFirstSetter(setterResult.syntax)
								};
							}),
						$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
						$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordSetterNodeWithLayout())),
				A2(
					$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
					'=',
					A4(
						$stil4m$elm_syntax$ParserFast$map3,
						F3(
							function (commentsBefore, expressionResult, commentsAfter) {
								return {
									comments: A2(
										$stil4m$elm_syntax$Rope$prependTo,
										commentsAfter,
										A2($stil4m$elm_syntax$Rope$prependTo, expressionResult.comments, commentsBefore)),
									syntax: $stil4m$elm_syntax$Elm$Parser$Expression$FieldsFirstValue(expressionResult.syntax)
								};
							}),
						$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
						$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(),
						$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout))),
			$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordFields(),
			A2($stil4m$elm_syntax$ParserFast$followedBySymbol, '}', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)),
		A2(
			$stil4m$elm_syntax$ParserFast$symbol,
			'}',
			{
				comments: $stil4m$elm_syntax$Rope$empty,
				syntax: $stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr(_List_Nil)
			}));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordFields() {
	return $stil4m$elm_syntax$ParserWithComments$many(
		A2(
			$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
			',',
			A3(
				$stil4m$elm_syntax$ParserFast$map2,
				F2(
					function (commentsBefore, setterResult) {
						return {
							comments: A2($stil4m$elm_syntax$Rope$prependTo, setterResult.comments, commentsBefore),
							syntax: setterResult.syntax
						};
					}),
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
				$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordSetterNodeWithLayout())));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordSetterNodeWithLayout() {
	return A6(
		$stil4m$elm_syntax$ParserFast$map5WithRange,
		F6(
			function (range, name, commentsAfterFunctionName, commentsAfterEquals, expressionResult, commentsAfterExpression) {
				return {
					comments: A2(
						$stil4m$elm_syntax$Rope$prependTo,
						commentsAfterExpression,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							expressionResult.comments,
							A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterEquals, commentsAfterFunctionName))),
					syntax: A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						range,
						_Utils_Tuple2(name, expressionResult.syntax))
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode,
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '=', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
		$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(),
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout);
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letFunction() {
	return A3(
		$stil4m$elm_syntax$ParserFast$validate,
		function (result) {
			var _v18 = result.syntax;
			var letDeclaration = _v18.b;
			if (letDeclaration.$ === 'LetDestructuring') {
				return true;
			} else {
				var letFunctionDeclaration = letDeclaration.a;
				var _v20 = letFunctionDeclaration.signature;
				if (_v20.$ === 'Nothing') {
					return true;
				} else {
					var _v21 = _v20.a;
					var signature = _v21.b;
					var _v22 = signature.name;
					var signatureName = _v22.b;
					var _v23 = letFunctionDeclaration.declaration;
					var implementation = _v23.b;
					var _v24 = implementation.name;
					var implementationName = _v24.b;
					return _Utils_eq(implementationName, signatureName + '');
				}
			}
		},
		'Expected to find the same name for declaration and signature',
		A7(
			$stil4m$elm_syntax$ParserFast$map6WithStartLocation,
			F7(
				function (startNameStart, startNameNode, commentsAfterStartName, maybeSignature, _arguments, commentsAfterEqual, expressionResult) {
					var allComments = A2(
						$stil4m$elm_syntax$Rope$prependTo,
						expressionResult.comments,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							commentsAfterEqual,
							A2(
								$stil4m$elm_syntax$Rope$prependTo,
								_arguments.comments,
								function () {
									if (maybeSignature.$ === 'Nothing') {
										return commentsAfterStartName;
									} else {
										var signature = maybeSignature.a;
										return A2($stil4m$elm_syntax$Rope$prependTo, signature.comments, commentsAfterStartName);
									}
								}())));
					if (maybeSignature.$ === 'Nothing') {
						var _v14 = expressionResult.syntax;
						var expressionRange = _v14.a;
						return {
							comments: allComments,
							syntax: A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								{end: expressionRange.end, start: startNameStart},
								$stil4m$elm_syntax$Elm$Syntax$Expression$LetFunction(
									{
										declaration: A2(
											$stil4m$elm_syntax$Elm$Syntax$Node$Node,
											{end: expressionRange.end, start: startNameStart},
											{_arguments: _arguments.syntax, expression: expressionResult.syntax, name: startNameNode}),
										documentation: $elm$core$Maybe$Nothing,
										signature: $elm$core$Maybe$Nothing
									}))
						};
					} else {
						var signature = maybeSignature.a;
						var _v15 = signature.implementationName;
						var implementationNameRange = _v15.a;
						var _v16 = expressionResult.syntax;
						var expressionRange = _v16.a;
						return {
							comments: allComments,
							syntax: A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								{end: expressionRange.end, start: startNameStart},
								$stil4m$elm_syntax$Elm$Syntax$Expression$LetFunction(
									{
										declaration: A2(
											$stil4m$elm_syntax$Elm$Syntax$Node$Node,
											{end: expressionRange.end, start: implementationNameRange.start},
											{_arguments: _arguments.syntax, expression: expressionResult.syntax, name: signature.implementationName}),
										documentation: $elm$core$Maybe$Nothing,
										signature: $elm$core$Maybe$Just(
											A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $stil4m$elm_syntax$Elm$Syntax$Signature$Signature, startNameNode, signature.typeAnnotation))
									}))
						};
					}
				}),
			$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode,
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			A6(
				$stil4m$elm_syntax$ParserFast$map4OrSucceed,
				F4(
					function (commentsBeforeTypeAnnotation, typeAnnotationResult, implementationName, afterImplementationName) {
						return $elm$core$Maybe$Just(
							{
								comments: A2(
									$stil4m$elm_syntax$Rope$prependTo,
									afterImplementationName,
									A2(
										$stil4m$elm_syntax$Rope$prependTo,
										implementationName.comments,
										A2($stil4m$elm_syntax$Rope$prependTo, typeAnnotationResult.comments, commentsBeforeTypeAnnotation))),
								implementationName: implementationName.syntax,
								typeAnnotation: typeAnnotationResult.syntax
							});
					}),
				A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, ':', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
				$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation,
				$stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedBy($stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode),
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
				$elm$core$Maybe$Nothing),
			$stil4m$elm_syntax$Elm$Parser$Expression$parameterPatternsEqual,
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression()));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDestructuringDeclaration() {
	return A5(
		$stil4m$elm_syntax$ParserFast$map4,
		F4(
			function (pattern, commentsAfterPattern, commentsAfterEquals, expressionResult) {
				var _v11 = pattern.syntax;
				var start = _v11.a.start;
				var _v12 = expressionResult.syntax;
				var end = _v12.a.end;
				return {
					comments: A2(
						$stil4m$elm_syntax$Rope$prependTo,
						expressionResult.comments,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							commentsAfterEquals,
							A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterPattern, pattern.comments))),
					syntax: A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						{end: end, start: start},
						A2($stil4m$elm_syntax$Elm$Syntax$Expression$LetDestructuring, pattern.syntax, expressionResult.syntax))
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Patterns$patternNotDirectlyComposing,
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '=', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
		$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression());
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$lambdaExpression() {
	return A2(
		$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
		'\\',
		A7(
			$stil4m$elm_syntax$ParserFast$map6WithStartLocation,
			F7(
				function (start, commentsAfterBackslash, firstArg, commentsAfterFirstArg, secondUpArgs, commentsAfterArrow, expressionResult) {
					var _v10 = expressionResult.syntax;
					var expressionRange = _v10.a;
					return {
						comments: A2(
							$stil4m$elm_syntax$Rope$prependTo,
							expressionResult.comments,
							A2(
								$stil4m$elm_syntax$Rope$prependTo,
								commentsAfterArrow,
								A2(
									$stil4m$elm_syntax$Rope$prependTo,
									secondUpArgs.comments,
									A2(
										$stil4m$elm_syntax$Rope$prependTo,
										commentsAfterFirstArg,
										A2($stil4m$elm_syntax$Rope$prependTo, firstArg.comments, commentsAfterBackslash))))),
						syntax: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{
								end: expressionRange.end,
								start: {column: start.column - 1, row: start.row}
							},
							$stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression(
								{
									args: A2($elm$core$List$cons, firstArg.syntax, secondUpArgs.syntax),
									expression: expressionResult.syntax
								}))
					};
				}),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			$stil4m$elm_syntax$Elm$Parser$Patterns$patternNotDirectlyComposing,
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			A2(
				$stil4m$elm_syntax$ParserWithComments$until,
				A2($stil4m$elm_syntax$ParserFast$symbol, '->', _Utils_Tuple0),
				A3(
					$stil4m$elm_syntax$ParserFast$map2,
					F2(
						function (patternResult, commentsAfter) {
							return {
								comments: A2($stil4m$elm_syntax$Rope$prependTo, commentsAfter, patternResult.comments),
								syntax: patternResult.syntax
							};
						}),
					$stil4m$elm_syntax$Elm$Parser$Patterns$patternNotDirectlyComposing,
					$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression()));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$ifOrUnqualifiedReferenceExpression() {
	return A2(
		$stil4m$elm_syntax$ParserFast$oneOf2,
		$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$ifBlockExpression(),
		$stil4m$elm_syntax$Elm$Parser$Expression$unqualifiedFunctionReferenceExpressionFollowedByRecordAccess);
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$ifBlockExpression() {
	return A2(
		$stil4m$elm_syntax$ParserFast$keywordFollowedBy,
		'if',
		A9(
			$stil4m$elm_syntax$ParserFast$map8WithStartLocation,
			F9(
				function (start, commentsAfterIf, condition, commentsBeforeThen, commentsAfterThen, ifTrue, commentsBeforeElse, commentsAfterElse, ifFalse) {
					var _v9 = ifFalse.syntax;
					var ifFalseRange = _v9.a;
					return {
						comments: A2(
							$stil4m$elm_syntax$Rope$prependTo,
							ifFalse.comments,
							A2(
								$stil4m$elm_syntax$Rope$prependTo,
								commentsAfterElse,
								A2(
									$stil4m$elm_syntax$Rope$prependTo,
									commentsBeforeElse,
									A2(
										$stil4m$elm_syntax$Rope$prependTo,
										ifTrue.comments,
										A2(
											$stil4m$elm_syntax$Rope$prependTo,
											commentsAfterThen,
											A2(
												$stil4m$elm_syntax$Rope$prependTo,
												commentsBeforeThen,
												A2($stil4m$elm_syntax$Rope$prependTo, condition.comments, commentsAfterIf))))))),
						syntax: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{
								end: ifFalseRange.end,
								start: {column: start.column - 2, row: start.row}
							},
							A3($stil4m$elm_syntax$Elm$Syntax$Expression$IfBlock, condition.syntax, ifTrue.syntax, ifFalse.syntax))
					};
				}),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'then', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
			$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'else', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
			$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression()));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$listOrGlslExpression() {
	return A2(
		$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
		'[',
		$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expressionAfterOpeningSquareBracket());
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expressionAfterOpeningSquareBracket() {
	return A2(
		$stil4m$elm_syntax$ParserFast$oneOf2,
		$stil4m$elm_syntax$Elm$Parser$Expression$glslExpressionAfterOpeningSquareBracket,
		A3(
			$stil4m$elm_syntax$ParserFast$map2WithRange,
			F3(
				function (range, commentsBefore, elements) {
					return {
						comments: A2($stil4m$elm_syntax$Rope$prependTo, elements.comments, commentsBefore),
						syntax: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{
								end: range.end,
								start: {column: range.start.column - 1, row: range.start.row}
							},
							elements.syntax)
					};
				}),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			A2(
				$stil4m$elm_syntax$ParserFast$oneOf2,
				A2(
					$stil4m$elm_syntax$ParserFast$symbol,
					']',
					{
						comments: $stil4m$elm_syntax$Rope$empty,
						syntax: $stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr(_List_Nil)
					}),
				A2(
					$stil4m$elm_syntax$ParserFast$followedBySymbol,
					']',
					A4(
						$stil4m$elm_syntax$ParserFast$map3,
						F3(
							function (head, commentsAfterHead, tail) {
								return {
									comments: A2(
										$stil4m$elm_syntax$Rope$prependTo,
										tail.comments,
										A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterHead, head.comments)),
									syntax: $stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr(
										A2($elm$core$List$cons, head.syntax, tail.syntax))
								};
							}),
						$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(),
						$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
						$stil4m$elm_syntax$ParserWithComments$many(
							A2(
								$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
								',',
								$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides(
									$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression()))))))));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression() {
	return A2(
		$stil4m$elm_syntax$Elm$Parser$Expression$extendedSubExpressionOptimisticLayout,
		$elm$core$Result$Ok,
		function ($) {
			return $.extensionRight;
		});
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence9ComposeL() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixLeft, 9, '<<');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence8QuestionMark() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixLeft, 8, '<?>');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Mul() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixLeft, 7, '*');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Idiv() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixLeft, 7, '//');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Fdiv() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixLeft, 7, '/');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Sub() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixLeft, 6, '-');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Ignore() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixLeft, 6, '|.');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Add() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixLeft, 6, '+');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5Keep() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixLeft, 5, '|=');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence1ApR() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixLeft, 1, '|>');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Neq() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixNonAssociative, 4, '/=');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Lt() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixNonAssociative, 4, '<');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Le() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixNonAssociative, 4, '<=');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Gt() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixNonAssociative, 4, '>');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Ge() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixNonAssociative, 4, '>=');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Eq() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixNonAssociative, 4, '==');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence9ComposeR() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixRight, 9, '>>');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence8Pow() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixRight, 8, '^');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Slash() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixRight, 7, '</>');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5append() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixRight, 5, '++');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5Cons() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixRight, 5, '::');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence3And() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixRight, 3, '&&');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence2Or() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixRight, 2, '||');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence1ApL() {
	return A2($stil4m$elm_syntax$Elm$Parser$Expression$infixRight, 1, '<|');
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus() {
	return A2(
		$stil4m$elm_syntax$ParserFast$map,
		function (subExpressionResult) {
			var _v6 = subExpressionResult.syntax;
			var subExpressionRange = _v6.a;
			return {
				comments: subExpressionResult.comments,
				syntax: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					{
						end: subExpressionRange.end,
						start: {column: subExpressionRange.start.column - 1, row: subExpressionRange.start.row}
					},
					$stil4m$elm_syntax$Elm$Syntax$Expression$Negation(subExpressionResult.syntax))
			};
		},
		$stil4m$elm_syntax$ParserFast$lazy(
			function (_v7) {
				return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpression();
			}));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationOperation() {
	return A2(
		$stil4m$elm_syntax$ParserFast$symbolBacktrackableFollowedBy,
		'-',
		$stil4m$elm_syntax$ParserFast$offsetSourceAndThen(
			F2(
				function (offset, source) {
					var _v5 = A3($elm$core$String$slice, offset - 2, offset - 1, source);
					switch (_v5) {
						case ' ':
							return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus();
						case '(':
							return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus();
						case ')':
							return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus();
						case '}':
							return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus();
						case ',':
							return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus();
						case '':
							return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus();
						default:
							return $stil4m$elm_syntax$Elm$Parser$Expression$negationWhitespaceProblem;
					}
				})));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpression() {
	return $stil4m$elm_syntax$ParserFast$offsetSourceAndThen(
		F2(
			function (offset, source) {
				var _v4 = A3($elm$core$String$slice, offset, offset + 1, source);
				switch (_v4) {
					case '\"':
						return $stil4m$elm_syntax$Elm$Parser$Expression$literalExpression;
					case '(':
						return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$tupledExpressionIfNecessaryFollowedByRecordAccess();
					case '[':
						return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$listOrGlslExpression();
					case '{':
						return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordExpressionFollowedByRecordAccess();
					case 'c':
						return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseOrUnqualifiedReferenceExpression();
					case '\\':
						return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$lambdaExpression();
					case 'l':
						return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letOrUnqualifiedReferenceExpression();
					case 'i':
						return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$ifOrUnqualifiedReferenceExpression();
					case '.':
						return $stil4m$elm_syntax$Elm$Parser$Expression$recordAccessFunctionExpression;
					case '-':
						return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationOperation();
					case '\'':
						return $stil4m$elm_syntax$Elm$Parser$Expression$charLiteralExpression;
					default:
						return $stil4m$elm_syntax$Elm$Parser$Expression$referenceOrNumberExpression;
				}
			}));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpressionMaybeAppliedOptimisticLayout() {
	return A4(
		$stil4m$elm_syntax$ParserFast$map3,
		F3(
			function (leftExpressionResult, commentsBeforeExtension, maybeArgsReverse) {
				return {
					comments: A2(
						$stil4m$elm_syntax$Rope$prependTo,
						maybeArgsReverse.comments,
						A2($stil4m$elm_syntax$Rope$prependTo, commentsBeforeExtension, leftExpressionResult.comments)),
					syntax: function () {
						var _v0 = maybeArgsReverse.syntax;
						if (!_v0.b) {
							return leftExpressionResult.syntax;
						} else {
							var argsReverse = _v0;
							var _v1 = argsReverse.a;
							var lastArgRange = _v1.a;
							var leftNode = leftExpressionResult.syntax;
							var leftRange = leftNode.a;
							return A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								{end: lastArgRange.end, start: leftRange.start},
								$stil4m$elm_syntax$Elm$Syntax$Expression$Application(
									A2(
										$elm$core$List$cons,
										leftNode,
										$elm$core$List$reverse(argsReverse))));
						}
					}()
				};
			}),
		$stil4m$elm_syntax$ParserFast$lazy(
			function (_v2) {
				return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpression();
			}),
		$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
		$stil4m$elm_syntax$ParserWithComments$manyWithoutReverse(
			A3(
				$stil4m$elm_syntax$ParserFast$map2,
				F2(
					function (arg, commentsAfter) {
						return {
							comments: A2($stil4m$elm_syntax$Rope$prependTo, commentsAfter, arg.comments),
							syntax: arg.syntax
						};
					}),
				$stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedFollowedBy(
					$stil4m$elm_syntax$ParserFast$lazy(
						function (_v3) {
							return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpression();
						})),
				$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout)));
}
try {
	var $stil4m$elm_syntax$Elm$Parser$Expression$letOrUnqualifiedReferenceExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letOrUnqualifiedReferenceExpression();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letOrUnqualifiedReferenceExpression = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$letOrUnqualifiedReferenceExpression;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$letExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letExpression();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letExpression = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$letExpression;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$letDeclarationsIn = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDeclarationsIn();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDeclarationsIn = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$letDeclarationsIn;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$blockElement = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$blockElement();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$blockElement = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$blockElement;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$caseOrUnqualifiedReferenceExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseOrUnqualifiedReferenceExpression();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseOrUnqualifiedReferenceExpression = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$caseOrUnqualifiedReferenceExpression;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$caseExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseExpression();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseExpression = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$caseExpression;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$caseStatements = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseStatements();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseStatements = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$caseStatements;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$caseStatement = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseStatement();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseStatement = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$caseStatement;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$tupledExpressionIfNecessaryFollowedByRecordAccess = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$tupledExpressionIfNecessaryFollowedByRecordAccess();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$tupledExpressionIfNecessaryFollowedByRecordAccess = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$tupledExpressionIfNecessaryFollowedByRecordAccess;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$tupledExpressionInnerAfterOpeningParens = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$tupledExpressionInnerAfterOpeningParens();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$tupledExpressionInnerAfterOpeningParens = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$tupledExpressionInnerAfterOpeningParens;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$recordExpressionFollowedByRecordAccess = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordExpressionFollowedByRecordAccess();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordExpressionFollowedByRecordAccess = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$recordExpressionFollowedByRecordAccess;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$recordContentsCurlyEnd = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordContentsCurlyEnd();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordContentsCurlyEnd = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$recordContentsCurlyEnd;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$recordFields = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordFields();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordFields = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$recordFields;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$recordSetterNodeWithLayout = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordSetterNodeWithLayout();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordSetterNodeWithLayout = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$recordSetterNodeWithLayout;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$letFunction = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letFunction();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letFunction = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$letFunction;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$letDestructuringDeclaration = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDestructuringDeclaration();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDestructuringDeclaration = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$letDestructuringDeclaration;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$lambdaExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$lambdaExpression();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$lambdaExpression = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$lambdaExpression;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$ifOrUnqualifiedReferenceExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$ifOrUnqualifiedReferenceExpression();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$ifOrUnqualifiedReferenceExpression = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$ifOrUnqualifiedReferenceExpression;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$ifBlockExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$ifBlockExpression();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$ifBlockExpression = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$ifBlockExpression;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$listOrGlslExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$listOrGlslExpression();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$listOrGlslExpression = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$listOrGlslExpression;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$expressionAfterOpeningSquareBracket = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expressionAfterOpeningSquareBracket();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expressionAfterOpeningSquareBracket = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$expressionAfterOpeningSquareBracket;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$expression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$expression;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$precedence9ComposeL = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence9ComposeL();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence9ComposeL = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$precedence9ComposeL;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$precedence8QuestionMark = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence8QuestionMark();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence8QuestionMark = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$precedence8QuestionMark;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$precedence7Mul = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Mul();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Mul = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$precedence7Mul;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$precedence7Idiv = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Idiv();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Idiv = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$precedence7Idiv;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$precedence7Fdiv = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Fdiv();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Fdiv = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$precedence7Fdiv;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$precedence6Sub = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Sub();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Sub = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$precedence6Sub;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$precedence6Ignore = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Ignore();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Ignore = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$precedence6Ignore;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$precedence6Add = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Add();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Add = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$precedence6Add;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$precedence5Keep = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5Keep();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5Keep = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$precedence5Keep;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$precedence1ApR = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence1ApR();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence1ApR = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$precedence1ApR;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Neq = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Neq();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Neq = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Neq;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Lt = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Lt();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Lt = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Lt;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Le = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Le();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Le = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Le;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Gt = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Gt();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Gt = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Gt;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Ge = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Ge();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Ge = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Ge;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Eq = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Eq();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Eq = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Eq;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$precedence9ComposeR = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence9ComposeR();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence9ComposeR = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$precedence9ComposeR;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$precedence8Pow = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence8Pow();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence8Pow = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$precedence8Pow;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$precedence7Slash = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Slash();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Slash = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$precedence7Slash;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$precedence5append = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5append();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5append = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$precedence5append;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$precedence5Cons = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5Cons();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5Cons = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$precedence5Cons;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$precedence3And = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence3And();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence3And = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$precedence3And;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$precedence2Or = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence2Or();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence2Or = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$precedence2Or;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$precedence1ApL = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence1ApL();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence1ApL = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$precedence1ApL;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$negationAfterMinus = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$negationAfterMinus;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$negationOperation = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationOperation();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationOperation = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$negationOperation;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$subExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpression();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpression = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$subExpression;
	};
	var $stil4m$elm_syntax$Elm$Parser$Expression$subExpressionMaybeAppliedOptimisticLayout = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpressionMaybeAppliedOptimisticLayout();
	$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpressionMaybeAppliedOptimisticLayout = function () {
		return $stil4m$elm_syntax$Elm$Parser$Expression$subExpressionMaybeAppliedOptimisticLayout;
	};
} catch ($) {
	throw 'Some top-level definitions from `Elm.Parser.Expression` are causing infinite recursion:\n\n  ┌─────┐\n  │    letOrUnqualifiedReferenceExpression\n  │     ↓\n  │    letExpression\n  │     ↓\n  │    letDeclarationsIn\n  │     ↓\n  │    blockElement\n  │     ↓\n  │    caseOrUnqualifiedReferenceExpression\n  │     ↓\n  │    caseExpression\n  │     ↓\n  │    caseStatements\n  │     ↓\n  │    caseStatement\n  │     ↓\n  │    tupledExpressionIfNecessaryFollowedByRecordAccess\n  │     ↓\n  │    tupledExpressionInnerAfterOpeningParens\n  │     ↓\n  │    recordExpressionFollowedByRecordAccess\n  │     ↓\n  │    recordContentsCurlyEnd\n  │     ↓\n  │    recordFields\n  │     ↓\n  │    recordSetterNodeWithLayout\n  │     ↓\n  │    letFunction\n  │     ↓\n  │    letDestructuringDeclaration\n  │     ↓\n  │    lambdaExpression\n  │     ↓\n  │    ifOrUnqualifiedReferenceExpression\n  │     ↓\n  │    ifBlockExpression\n  │     ↓\n  │    listOrGlslExpression\n  │     ↓\n  │    expressionAfterOpeningSquareBracket\n  │     ↓\n  │    expression\n  │     ↓\n  │    extendedSubExpressionOptimisticLayout\n  │     ↓\n  │    precedence9ComposeL\n  │     ↓\n  │    precedence8QuestionMark\n  │     ↓\n  │    precedence7Mul\n  │     ↓\n  │    precedence7Idiv\n  │     ↓\n  │    precedence7Fdiv\n  │     ↓\n  │    precedence6Sub\n  │     ↓\n  │    precedence6Ignore\n  │     ↓\n  │    precedence6Add\n  │     ↓\n  │    precedence5Keep\n  │     ↓\n  │    precedence1ApR\n  │     ↓\n  │    infixLeft\n  │     ↓\n  │    precedence4Neq\n  │     ↓\n  │    precedence4Lt\n  │     ↓\n  │    precedence4Le\n  │     ↓\n  │    precedence4Gt\n  │     ↓\n  │    precedence4Ge\n  │     ↓\n  │    precedence4Eq\n  │     ↓\n  │    infixNonAssociative\n  │     ↓\n  │    infixOperatorAndThen\n  │     ↓\n  │    precedence9ComposeR\n  │     ↓\n  │    precedence8Pow\n  │     ↓\n  │    precedence7Slash\n  │     ↓\n  │    precedence5append\n  │     ↓\n  │    precedence5Cons\n  │     ↓\n  │    precedence3And\n  │     ↓\n  │    precedence2Or\n  │     ↓\n  │    precedence1ApL\n  │     ↓\n  │    infixRight\n  │     ↓\n  │    negationAfterMinus\n  │     ↓\n  │    negationOperation\n  │     ↓\n  │    subExpression\n  │     ↓\n  │    subExpressionMaybeAppliedOptimisticLayout\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $stil4m$elm_syntax$ParserFast$map6 = F7(
	function (func, _v0, _v1, _v2, _v3, _v4, _v5) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		var parseC = _v2.a;
		var parseD = _v3.a;
		var parseE = _v4.a;
		var parseF = _v5.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v6 = parseA(s0);
				if (_v6.$ === 'Bad') {
					var committed = _v6.a;
					var x = _v6.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
				} else {
					var a = _v6.a;
					var s1 = _v6.b;
					var _v7 = parseB(s1);
					if (_v7.$ === 'Bad') {
						var x = _v7.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var b = _v7.a;
						var s2 = _v7.b;
						var _v8 = parseC(s2);
						if (_v8.$ === 'Bad') {
							var x = _v8.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var c = _v8.a;
							var s3 = _v8.b;
							var _v9 = parseD(s3);
							if (_v9.$ === 'Bad') {
								var x = _v9.b;
								return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
							} else {
								var d = _v9.a;
								var s4 = _v9.b;
								var _v10 = parseE(s4);
								if (_v10.$ === 'Bad') {
									var x = _v10.b;
									return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
								} else {
									var e = _v10.a;
									var s5 = _v10.b;
									var _v11 = parseF(s5);
									if (_v11.$ === 'Bad') {
										var x = _v11.b;
										return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
									} else {
										var f = _v11.a;
										var s6 = _v11.b;
										return A2(
											$stil4m$elm_syntax$ParserFast$Good,
											A6(func, a, b, c, d, e, f),
											s6);
									}
								}
							}
						}
					}
				}
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Declarations$parameterPatternsEqual = A2(
	$stil4m$elm_syntax$ParserWithComments$until,
	$stil4m$elm_syntax$Elm$Parser$Tokens$equal,
	A3(
		$stil4m$elm_syntax$ParserFast$map2,
		F2(
			function (patternResult, commentsAfterPattern) {
				return {
					comments: A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterPattern, patternResult.comments),
					syntax: patternResult.syntax
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Patterns$patternNotDirectlyComposing,
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout));
var $stil4m$elm_syntax$Elm$Parser$Declarations$functionAfterDocumentation = A7(
	$stil4m$elm_syntax$ParserFast$map6,
	F6(
		function (startName, commentsAfterStartName, maybeSignature, _arguments, commentsAfterEqual, result) {
			return {
				comments: A2(
					$stil4m$elm_syntax$Rope$prependTo,
					result.comments,
					A2(
						$stil4m$elm_syntax$Rope$prependTo,
						commentsAfterEqual,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							_arguments.comments,
							function () {
								if (maybeSignature.$ === 'Nothing') {
									return commentsAfterStartName;
								} else {
									var signature = maybeSignature.a;
									return A2($stil4m$elm_syntax$Rope$prependTo, signature.comments, commentsAfterStartName);
								}
							}()))),
				syntax: $stil4m$elm_syntax$Elm$Parser$Declarations$FunctionDeclarationAfterDocumentation(
					{
						_arguments: _arguments.syntax,
						expression: result.syntax,
						signature: A2(
							$elm$core$Maybe$map,
							function ($) {
								return $.syntax;
							},
							maybeSignature),
						startName: startName
					})
			};
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	A6(
		$stil4m$elm_syntax$ParserFast$map4OrSucceed,
		F4(
			function (commentsBeforeTypeAnnotation, typeAnnotationResult, implementationName, afterImplementationName) {
				return $elm$core$Maybe$Just(
					{
						comments: A2(
							$stil4m$elm_syntax$Rope$prependTo,
							afterImplementationName,
							A2(
								$stil4m$elm_syntax$Rope$prependTo,
								implementationName.comments,
								A2($stil4m$elm_syntax$Rope$prependTo, typeAnnotationResult.comments, commentsBeforeTypeAnnotation))),
						syntax: {implementationName: implementationName.syntax, typeAnnotation: typeAnnotationResult.syntax}
					});
			}),
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, ':', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
		$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation,
		$stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedBy($stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode),
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		$elm$core$Maybe$Nothing),
	$stil4m$elm_syntax$Elm$Parser$Declarations$parameterPatternsEqual,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$Expression$expression);
var $stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedByWithComments = function (nextParser) {
	return A3(
		$stil4m$elm_syntax$ParserFast$map2,
		F2(
			function (commentsBefore, after) {
				return {
					comments: A2($stil4m$elm_syntax$Rope$prependTo, after.comments, commentsBefore),
					syntax: after.syntax
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
		$stil4m$elm_syntax$Elm$Parser$Layout$onTopIndentationFollowedBy(nextParser));
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$PortDeclarationAfterDocumentation = function (a) {
	return {$: 'PortDeclarationAfterDocumentation', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$portDeclarationAfterDocumentation = A6(
	$stil4m$elm_syntax$ParserFast$map5,
	F5(
		function (commentsAfterPort, name, commentsAfterName, commentsAfterColon, typeAnnotationResult) {
			var nameRange = name.a;
			return {
				comments: A2(
					$stil4m$elm_syntax$Rope$prependTo,
					commentsAfterColon,
					A2(
						$stil4m$elm_syntax$Rope$prependTo,
						typeAnnotationResult.comments,
						A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterName, commentsAfterPort))),
				syntax: $stil4m$elm_syntax$Elm$Parser$Declarations$PortDeclarationAfterDocumentation(
					{
						name: name,
						startLocation: {column: 1, row: nameRange.start.row},
						typeAnnotation: typeAnnotationResult.syntax
					})
			};
		}),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'port', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, ':', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation);
var $stil4m$elm_syntax$Elm$Syntax$Node$range = function (_v0) {
	var r = _v0.a;
	return r;
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$TypeDeclarationAfterDocumentation = function (a) {
	return {$: 'TypeDeclarationAfterDocumentation', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$typeGenericListEquals = A2(
	$stil4m$elm_syntax$ParserWithComments$until,
	$stil4m$elm_syntax$Elm$Parser$Tokens$equal,
	A3(
		$stil4m$elm_syntax$ParserFast$map2,
		F2(
			function (name, commentsAfterName) {
				return {comments: commentsAfterName, syntax: name};
			}),
		$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode,
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout));
var $stil4m$elm_syntax$ParserFast$ifFollowedByWhileMapWithRangeWithoutLinebreak = F3(
	function (rangeAndConsumedStringToRes, firstIsOkay, afterFirstIsOkay) {
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var firstOffset = A3($stil4m$elm_syntax$ParserFast$isSubCharWithoutLinebreak, firstIsOkay, s0.offset, s0.src);
				if (_Utils_eq(firstOffset, -1)) {
					return A2(
						$stil4m$elm_syntax$ParserFast$Bad,
						false,
						A2($stil4m$elm_syntax$ParserFast$ExpectingCharSatisfyingPredicate, s0.row, s0.col));
				} else {
					var s1 = A6($stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp, afterFirstIsOkay, firstOffset, s0.row, s0.col + 1, s0.src, s0.indent);
					return A2(
						$stil4m$elm_syntax$ParserFast$Good,
						A2(
							rangeAndConsumedStringToRes,
							{
								end: {column: s1.col, row: s1.row},
								start: {column: s0.col, row: s0.row}
							},
							A3($elm$core$String$slice, s0.offset, s1.offset, s0.src)),
						s1);
				}
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Tokens$typeNameNode = A3($stil4m$elm_syntax$ParserFast$ifFollowedByWhileMapWithRangeWithoutLinebreak, $stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Char$Extra$unicodeIsUpperFast, $stil4m$elm_syntax$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast);
var $stil4m$elm_syntax$Elm$Parser$Declarations$valueConstructorOptimisticLayout = A4(
	$stil4m$elm_syntax$ParserFast$map3,
	F3(
		function (name, commentsAfterName, argumentsReverse) {
			var nameRange = name.a;
			var fullRange = function () {
				var _v0 = argumentsReverse.syntax;
				if (_v0.b) {
					var _v1 = _v0.a;
					var lastArgRange = _v1.a;
					return {end: lastArgRange.end, start: nameRange.start};
				} else {
					return nameRange;
				}
			}();
			return {
				comments: A2($stil4m$elm_syntax$Rope$prependTo, argumentsReverse.comments, commentsAfterName),
				syntax: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					fullRange,
					{
						_arguments: $elm$core$List$reverse(argumentsReverse.syntax),
						name: name
					})
			};
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeNameNode,
	$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
	$stil4m$elm_syntax$ParserWithComments$manyWithoutReverse(
		$stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedFollowedBy(
			A3(
				$stil4m$elm_syntax$ParserFast$map2,
				F2(
					function (typeAnnotationResult, commentsAfter) {
						return {
							comments: A2($stil4m$elm_syntax$Rope$prependTo, commentsAfter, typeAnnotationResult.comments),
							syntax: typeAnnotationResult.syntax
						};
					}),
				$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNoFnExcludingTypedWithArguments,
				$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout))));
var $stil4m$elm_syntax$Elm$Parser$Declarations$customTypeDefinitionAfterDocumentationAfterTypePrefix = A7(
	$stil4m$elm_syntax$ParserFast$map6,
	F6(
		function (name, commentsAfterName, parameters, commentsAfterEqual, headVariant, tailVariantsReverse) {
			return {
				comments: A2(
					$stil4m$elm_syntax$Rope$prependTo,
					tailVariantsReverse.comments,
					A2(
						$stil4m$elm_syntax$Rope$prependTo,
						headVariant.comments,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							commentsAfterEqual,
							A2($stil4m$elm_syntax$Rope$prependTo, parameters.comments, commentsAfterName)))),
				syntax: $stil4m$elm_syntax$Elm$Parser$Declarations$TypeDeclarationAfterDocumentation(
					{headVariant: headVariant.syntax, name: name, parameters: parameters.syntax, tailVariantsReverse: tailVariantsReverse.syntax})
			};
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeNameNode,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$Declarations$typeGenericListEquals,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$Declarations$valueConstructorOptimisticLayout,
	$stil4m$elm_syntax$ParserWithComments$manyWithoutReverse(
		A2(
			$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
			'|',
			A2(
				$stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedPlusFollowedBy,
				1,
				A3(
					$stil4m$elm_syntax$ParserFast$map2,
					F2(
						function (commentsBeforePipe, variantResult) {
							return {
								comments: A2($stil4m$elm_syntax$Rope$prependTo, variantResult.comments, commentsBeforePipe),
								syntax: variantResult.syntax
							};
						}),
					$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
					$stil4m$elm_syntax$Elm$Parser$Declarations$valueConstructorOptimisticLayout)))));
var $stil4m$elm_syntax$Elm$Parser$Declarations$TypeAliasDeclarationAfterDocumentation = function (a) {
	return {$: 'TypeAliasDeclarationAfterDocumentation', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$typeAliasDefinitionAfterDocumentationAfterTypePrefix = A7(
	$stil4m$elm_syntax$ParserFast$map6,
	F6(
		function (commentsAfterAlias, name, commentsAfterName, parameters, commentsAfterEquals, typeAnnotationResult) {
			return {
				comments: A2(
					$stil4m$elm_syntax$Rope$prependTo,
					typeAnnotationResult.comments,
					A2(
						$stil4m$elm_syntax$Rope$prependTo,
						commentsAfterEquals,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							parameters.comments,
							A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterName, commentsAfterAlias)))),
				syntax: $stil4m$elm_syntax$Elm$Parser$Declarations$TypeAliasDeclarationAfterDocumentation(
					{name: name, parameters: parameters.syntax, typeAnnotation: typeAnnotationResult.syntax})
			};
		}),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'alias', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeNameNode,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$Declarations$typeGenericListEquals,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation);
var $stil4m$elm_syntax$Elm$Parser$Declarations$typeOrTypeAliasDefinitionAfterDocumentation = A3(
	$stil4m$elm_syntax$ParserFast$map2,
	F2(
		function (commentsAfterType, declarationAfterDocumentation) {
			return {
				comments: A2($stil4m$elm_syntax$Rope$prependTo, declarationAfterDocumentation.comments, commentsAfterType),
				syntax: declarationAfterDocumentation.syntax
			};
		}),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'type', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	A2($stil4m$elm_syntax$ParserFast$oneOf2, $stil4m$elm_syntax$Elm$Parser$Declarations$typeAliasDefinitionAfterDocumentationAfterTypePrefix, $stil4m$elm_syntax$Elm$Parser$Declarations$customTypeDefinitionAfterDocumentationAfterTypePrefix));
var $stil4m$elm_syntax$Elm$Parser$Declarations$declarationWithDocumentation = A3(
	$stil4m$elm_syntax$ParserFast$validate,
	function (result) {
		var _v11 = result.syntax;
		var decl = _v11.b;
		if (decl.$ === 'FunctionDeclaration') {
			var letFunctionDeclaration = decl.a;
			var _v13 = letFunctionDeclaration.signature;
			if (_v13.$ === 'Nothing') {
				return true;
			} else {
				var _v14 = _v13.a;
				var signature = _v14.b;
				var _v15 = signature.name;
				var signatureName = _v15.b;
				var _v16 = letFunctionDeclaration.declaration;
				var implementation = _v16.b;
				var _v17 = implementation.name;
				var implementationName = _v17.b;
				return _Utils_eq(implementationName, signatureName + '');
			}
		} else {
			return true;
		}
	},
	'Expected to find the same name for declaration and signature',
	A3(
		$stil4m$elm_syntax$ParserFast$map2,
		F2(
			function (documentation, afterDocumentation) {
				var start = $stil4m$elm_syntax$Elm$Syntax$Node$range(documentation).start;
				var _v0 = afterDocumentation.syntax;
				switch (_v0.$) {
					case 'FunctionDeclarationAfterDocumentation':
						var functionDeclarationAfterDocumentation = _v0.a;
						var _v1 = functionDeclarationAfterDocumentation.signature;
						if (_v1.$ === 'Just') {
							var signature = _v1.a;
							var _v2 = signature.implementationName;
							var implementationNameRange = _v2.a;
							var _v3 = functionDeclarationAfterDocumentation.expression;
							var expressionRange = _v3.a;
							return {
								comments: afterDocumentation.comments,
								syntax: A2(
									$stil4m$elm_syntax$Elm$Syntax$Node$Node,
									{end: expressionRange.end, start: start},
									$stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration(
										{
											declaration: A2(
												$stil4m$elm_syntax$Elm$Syntax$Node$Node,
												{end: expressionRange.end, start: implementationNameRange.start},
												{_arguments: functionDeclarationAfterDocumentation._arguments, expression: functionDeclarationAfterDocumentation.expression, name: signature.implementationName}),
											documentation: $elm$core$Maybe$Just(documentation),
											signature: $elm$core$Maybe$Just(
												A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $stil4m$elm_syntax$Elm$Syntax$Signature$Signature, functionDeclarationAfterDocumentation.startName, signature.typeAnnotation))
										}))
							};
						} else {
							var _v4 = functionDeclarationAfterDocumentation.startName;
							var startNameRange = _v4.a;
							var _v5 = functionDeclarationAfterDocumentation.expression;
							var expressionRange = _v5.a;
							return {
								comments: afterDocumentation.comments,
								syntax: A2(
									$stil4m$elm_syntax$Elm$Syntax$Node$Node,
									{end: expressionRange.end, start: start},
									$stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration(
										{
											declaration: A2(
												$stil4m$elm_syntax$Elm$Syntax$Node$Node,
												{end: expressionRange.end, start: startNameRange.start},
												{_arguments: functionDeclarationAfterDocumentation._arguments, expression: functionDeclarationAfterDocumentation.expression, name: functionDeclarationAfterDocumentation.startName}),
											documentation: $elm$core$Maybe$Just(documentation),
											signature: $elm$core$Maybe$Nothing
										}))
							};
						}
					case 'TypeDeclarationAfterDocumentation':
						var typeDeclarationAfterDocumentation = _v0.a;
						var end = function () {
							var _v6 = typeDeclarationAfterDocumentation.tailVariantsReverse;
							if (_v6.b) {
								var _v7 = _v6.a;
								var range = _v7.a;
								return range.end;
							} else {
								var _v8 = typeDeclarationAfterDocumentation.headVariant;
								var headVariantRange = _v8.a;
								return headVariantRange.end;
							}
						}();
						return {
							comments: afterDocumentation.comments,
							syntax: A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								{end: end, start: start},
								$stil4m$elm_syntax$Elm$Syntax$Declaration$CustomTypeDeclaration(
									{
										constructors: A2(
											$elm$core$List$cons,
											typeDeclarationAfterDocumentation.headVariant,
											$elm$core$List$reverse(typeDeclarationAfterDocumentation.tailVariantsReverse)),
										documentation: $elm$core$Maybe$Just(documentation),
										generics: typeDeclarationAfterDocumentation.parameters,
										name: typeDeclarationAfterDocumentation.name
									}))
						};
					case 'TypeAliasDeclarationAfterDocumentation':
						var typeAliasDeclarationAfterDocumentation = _v0.a;
						var _v9 = typeAliasDeclarationAfterDocumentation.typeAnnotation;
						var typeAnnotationRange = _v9.a;
						return {
							comments: afterDocumentation.comments,
							syntax: A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								{end: typeAnnotationRange.end, start: start},
								$stil4m$elm_syntax$Elm$Syntax$Declaration$AliasDeclaration(
									{
										documentation: $elm$core$Maybe$Just(documentation),
										generics: typeAliasDeclarationAfterDocumentation.parameters,
										name: typeAliasDeclarationAfterDocumentation.name,
										typeAnnotation: typeAliasDeclarationAfterDocumentation.typeAnnotation
									}))
						};
					default:
						var portDeclarationAfterName = _v0.a;
						var _v10 = portDeclarationAfterName.typeAnnotation;
						var typeAnnotationRange = _v10.a;
						return {
							comments: A2(
								$stil4m$elm_syntax$Rope$filledPrependTo,
								afterDocumentation.comments,
								$stil4m$elm_syntax$Rope$one(documentation)),
							syntax: A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								{end: typeAnnotationRange.end, start: portDeclarationAfterName.startLocation},
								$stil4m$elm_syntax$Elm$Syntax$Declaration$PortDeclaration(
									{name: portDeclarationAfterName.name, typeAnnotation: portDeclarationAfterName.typeAnnotation}))
						};
				}
			}),
		$stil4m$elm_syntax$Elm$Parser$Comments$declarationDocumentation,
		$stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedByWithComments(
			A3($stil4m$elm_syntax$ParserFast$oneOf3, $stil4m$elm_syntax$Elm$Parser$Declarations$functionAfterDocumentation, $stil4m$elm_syntax$Elm$Parser$Declarations$typeOrTypeAliasDefinitionAfterDocumentation, $stil4m$elm_syntax$Elm$Parser$Declarations$portDeclarationAfterDocumentation))));
var $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNotInfixNode = A4(
	$stil4m$elm_syntax$ParserFast$ifFollowedByWhileValidateMapWithRangeWithoutLinebreak,
	$stil4m$elm_syntax$Elm$Syntax$Node$Node,
	$stil4m$elm_syntax$Char$Extra$unicodeIsLowerFast,
	$stil4m$elm_syntax$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast,
	function (name) {
		return (name !== 'infix') && $stil4m$elm_syntax$Elm$Parser$Tokens$isNotReserved(name);
	});
var $stil4m$elm_syntax$Elm$Parser$Declarations$functionDeclarationWithoutDocumentation = A3(
	$stil4m$elm_syntax$ParserFast$validate,
	function (result) {
		var _v5 = result.syntax;
		var decl = _v5.b;
		if (decl.$ === 'FunctionDeclaration') {
			var letFunctionDeclaration = decl.a;
			var _v7 = letFunctionDeclaration.signature;
			if (_v7.$ === 'Nothing') {
				return true;
			} else {
				var _v8 = _v7.a;
				var signature = _v8.b;
				var _v9 = signature.name;
				var signatureName = _v9.b;
				var _v10 = letFunctionDeclaration.declaration;
				var implementation = _v10.b;
				var _v11 = implementation.name;
				var implementationName = _v11.b;
				return _Utils_eq(implementationName, signatureName + '');
			}
		} else {
			return true;
		}
	},
	'Expected to find the same name for declaration and signature',
	A7(
		$stil4m$elm_syntax$ParserFast$map6WithStartLocation,
		F7(
			function (startNameStart, startNameNode, commentsAfterStartName, maybeSignature, _arguments, commentsAfterEqual, result) {
				var allComments = A2(
					$stil4m$elm_syntax$Rope$prependTo,
					result.comments,
					A2(
						$stil4m$elm_syntax$Rope$prependTo,
						commentsAfterEqual,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							_arguments.comments,
							function () {
								if (maybeSignature.$ === 'Nothing') {
									return commentsAfterStartName;
								} else {
									var signature = maybeSignature.a;
									return A2($stil4m$elm_syntax$Rope$prependTo, signature.comments, commentsAfterStartName);
								}
							}())));
				if (maybeSignature.$ === 'Nothing') {
					var _v1 = result.syntax;
					var expressionRange = _v1.a;
					return {
						comments: allComments,
						syntax: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{end: expressionRange.end, start: startNameStart},
							$stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration(
								{
									declaration: A2(
										$stil4m$elm_syntax$Elm$Syntax$Node$Node,
										{end: expressionRange.end, start: startNameStart},
										{_arguments: _arguments.syntax, expression: result.syntax, name: startNameNode}),
									documentation: $elm$core$Maybe$Nothing,
									signature: $elm$core$Maybe$Nothing
								}))
					};
				} else {
					var signature = maybeSignature.a;
					var _v2 = signature.implementationName;
					var implementationNameRange = _v2.a;
					var _v3 = result.syntax;
					var expressionRange = _v3.a;
					return {
						comments: allComments,
						syntax: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{end: expressionRange.end, start: startNameStart},
							$stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration(
								{
									declaration: A2(
										$stil4m$elm_syntax$Elm$Syntax$Node$Node,
										{end: expressionRange.end, start: implementationNameRange.start},
										{_arguments: _arguments.syntax, expression: result.syntax, name: signature.implementationName}),
									documentation: $elm$core$Maybe$Nothing,
									signature: $elm$core$Maybe$Just(
										A3($stil4m$elm_syntax$Elm$Syntax$Node$combine, $stil4m$elm_syntax$Elm$Syntax$Signature$Signature, startNameNode, signature.typeAnnotation))
								}))
					};
				}
			}),
		$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNotInfixNode,
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		A6(
			$stil4m$elm_syntax$ParserFast$map4OrSucceed,
			F4(
				function (commentsBeforeTypeAnnotation, typeAnnotationResult, implementationName, afterImplementationName) {
					return $elm$core$Maybe$Just(
						{
							comments: A2(
								$stil4m$elm_syntax$Rope$prependTo,
								afterImplementationName,
								A2(
									$stil4m$elm_syntax$Rope$prependTo,
									implementationName.comments,
									A2($stil4m$elm_syntax$Rope$prependTo, typeAnnotationResult.comments, commentsBeforeTypeAnnotation))),
							implementationName: implementationName.syntax,
							typeAnnotation: typeAnnotationResult.syntax
						});
				}),
			A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, ':', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
			$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation,
			$stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedBy($stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			$elm$core$Maybe$Nothing),
		$stil4m$elm_syntax$Elm$Parser$Declarations$parameterPatternsEqual,
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		$stil4m$elm_syntax$Elm$Parser$Expression$expression));
var $stil4m$elm_syntax$Elm$Syntax$Declaration$InfixDeclaration = function (a) {
	return {$: 'InfixDeclaration', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$infixDirection = A3(
	$stil4m$elm_syntax$ParserFast$oneOf3,
	A2(
		$stil4m$elm_syntax$ParserFast$mapWithRange,
		$stil4m$elm_syntax$Elm$Syntax$Node$Node,
		A2($stil4m$elm_syntax$ParserFast$keyword, 'right', $stil4m$elm_syntax$Elm$Syntax$Infix$Right)),
	A2(
		$stil4m$elm_syntax$ParserFast$mapWithRange,
		$stil4m$elm_syntax$Elm$Syntax$Node$Node,
		A2($stil4m$elm_syntax$ParserFast$keyword, 'left', $stil4m$elm_syntax$Elm$Syntax$Infix$Left)),
	A2(
		$stil4m$elm_syntax$ParserFast$mapWithRange,
		$stil4m$elm_syntax$Elm$Syntax$Node$Node,
		A2($stil4m$elm_syntax$ParserFast$keyword, 'non', $stil4m$elm_syntax$Elm$Syntax$Infix$Non)));
var $stil4m$elm_syntax$ParserFast$errorAsOffsetAndInt = {_int: 0, offset: -1};
var $stil4m$elm_syntax$ParserFast$convertIntegerDecimal = F2(
	function (offset, src) {
		var _v0 = A3($elm$core$String$slice, offset, offset + 1, src);
		switch (_v0) {
			case '0':
				return {_int: 0, offset: offset + 1};
			case '1':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 1, offset + 1, src);
			case '2':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 2, offset + 1, src);
			case '3':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 3, offset + 1, src);
			case '4':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 4, offset + 1, src);
			case '5':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 5, offset + 1, src);
			case '6':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 6, offset + 1, src);
			case '7':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 7, offset + 1, src);
			case '8':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 8, offset + 1, src);
			case '9':
				return A3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s, 9, offset + 1, src);
			default:
				return $stil4m$elm_syntax$ParserFast$errorAsOffsetAndInt;
		}
	});
var $stil4m$elm_syntax$ParserFast$integerDecimalMapWithRange = function (rangeAndIntToRes) {
	return $stil4m$elm_syntax$ParserFast$Parser(
		function (s0) {
			var s1 = A2($stil4m$elm_syntax$ParserFast$convertIntegerDecimal, s0.offset, s0.src);
			if (_Utils_eq(s1.offset, -1)) {
				return A2(
					$stil4m$elm_syntax$ParserFast$Bad,
					false,
					A2($stil4m$elm_syntax$ParserFast$ExpectingNumber, s0.row, s0.col));
			} else {
				var newColumn = s0.col + (s1.offset - s0.offset);
				return A2(
					$stil4m$elm_syntax$ParserFast$Good,
					A2(
						rangeAndIntToRes,
						{
							end: {column: newColumn, row: s0.row},
							start: {column: s0.col, row: s0.row}
						},
						s1._int),
					{col: newColumn, indent: s0.indent, offset: s1.offset, row: s0.row, src: s0.src});
			}
		});
};
var $stil4m$elm_syntax$ParserFast$map9WithRange = function (func) {
	return function (_v0) {
		return function (_v1) {
			return function (_v2) {
				return function (_v3) {
					return function (_v4) {
						return function (_v5) {
							return function (_v6) {
								return function (_v7) {
									return function (_v8) {
										var parseA = _v0.a;
										var parseB = _v1.a;
										var parseC = _v2.a;
										var parseD = _v3.a;
										var parseE = _v4.a;
										var parseF = _v5.a;
										var parseG = _v6.a;
										var parseH = _v7.a;
										var parseI = _v8.a;
										return $stil4m$elm_syntax$ParserFast$Parser(
											function (s0) {
												var _v9 = parseA(s0);
												if (_v9.$ === 'Bad') {
													var committed = _v9.a;
													var x = _v9.b;
													return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
												} else {
													var a = _v9.a;
													var s1 = _v9.b;
													var _v10 = parseB(s1);
													if (_v10.$ === 'Bad') {
														var x = _v10.b;
														return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
													} else {
														var b = _v10.a;
														var s2 = _v10.b;
														var _v11 = parseC(s2);
														if (_v11.$ === 'Bad') {
															var x = _v11.b;
															return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
														} else {
															var c = _v11.a;
															var s3 = _v11.b;
															var _v12 = parseD(s3);
															if (_v12.$ === 'Bad') {
																var x = _v12.b;
																return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
															} else {
																var d = _v12.a;
																var s4 = _v12.b;
																var _v13 = parseE(s4);
																if (_v13.$ === 'Bad') {
																	var x = _v13.b;
																	return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
																} else {
																	var e = _v13.a;
																	var s5 = _v13.b;
																	var _v14 = parseF(s5);
																	if (_v14.$ === 'Bad') {
																		var x = _v14.b;
																		return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
																	} else {
																		var f = _v14.a;
																		var s6 = _v14.b;
																		var _v15 = parseG(s6);
																		if (_v15.$ === 'Bad') {
																			var x = _v15.b;
																			return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
																		} else {
																			var g = _v15.a;
																			var s7 = _v15.b;
																			var _v16 = parseH(s7);
																			if (_v16.$ === 'Bad') {
																				var x = _v16.b;
																				return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
																			} else {
																				var h = _v16.a;
																				var s8 = _v16.b;
																				var _v17 = parseI(s8);
																				if (_v17.$ === 'Bad') {
																					var x = _v17.b;
																					return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
																				} else {
																					var i = _v17.a;
																					var s9 = _v17.b;
																					return A2(
																						$stil4m$elm_syntax$ParserFast$Good,
																						func(
																							{
																								end: {column: s9.col, row: s9.row},
																								start: {column: s0.col, row: s0.row}
																							})(a)(b)(c)(d)(e)(f)(g)(h)(i),
																						s9);
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											});
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$infixDeclaration = $stil4m$elm_syntax$ParserFast$map9WithRange(
	function (range) {
		return function (commentsAfterInfix) {
			return function (direction) {
				return function (commentsAfterDirection) {
					return function (precedence) {
						return function (commentsAfterPrecedence) {
							return function (operator) {
								return function (commentsAfterOperator) {
									return function (commentsAfterEqual) {
										return function (fn) {
											return {
												comments: A2(
													$stil4m$elm_syntax$Rope$prependTo,
													commentsAfterEqual,
													A2(
														$stil4m$elm_syntax$Rope$prependTo,
														commentsAfterOperator,
														A2(
															$stil4m$elm_syntax$Rope$prependTo,
															commentsAfterPrecedence,
															A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterDirection, commentsAfterInfix)))),
												syntax: A2(
													$stil4m$elm_syntax$Elm$Syntax$Node$Node,
													range,
													$stil4m$elm_syntax$Elm$Syntax$Declaration$InfixDeclaration(
														{direction: direction, _function: fn, operator: operator, precedence: precedence}))
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	})(
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'infix', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout))($stil4m$elm_syntax$Elm$Parser$Declarations$infixDirection)($stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)(
	$stil4m$elm_syntax$ParserFast$integerDecimalMapWithRange($stil4m$elm_syntax$Elm$Syntax$Node$Node))($stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)(
	A2(
		$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
		'(',
		A4(
			$stil4m$elm_syntax$ParserFast$whileWithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol,
			F2(
				function (operatorRange, operator) {
					return A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						{
							end: {column: operatorRange.end.column + 1, row: operatorRange.end.row},
							start: {column: operatorRange.start.column - 1, row: operatorRange.start.row}
						},
						operator);
				}),
			$stil4m$elm_syntax$Elm$Parser$Tokens$isOperatorSymbolChar,
			$stil4m$elm_syntax$Elm$Parser$Tokens$isAllowedOperatorToken,
			')')))($stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)(
	A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '=', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout))($stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode);
var $stil4m$elm_syntax$ParserFast$oneOf5 = F5(
	function (_v0, _v1, _v2, _v3, _v4) {
		var attemptFirst = _v0.a;
		var attemptSecond = _v1.a;
		var attemptThird = _v2.a;
		var attemptFourth = _v3.a;
		var attemptFifth = _v4.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s) {
				var _v5 = attemptFirst(s);
				if (_v5.$ === 'Good') {
					var firstGood = _v5;
					return firstGood;
				} else {
					var firstBad = _v5;
					var firstCommitted = firstBad.a;
					var firstX = firstBad.b;
					if (firstCommitted) {
						return firstBad;
					} else {
						var _v6 = attemptSecond(s);
						if (_v6.$ === 'Good') {
							var secondGood = _v6;
							return secondGood;
						} else {
							var secondBad = _v6;
							var secondCommitted = secondBad.a;
							var secondX = secondBad.b;
							if (secondCommitted) {
								return secondBad;
							} else {
								var _v7 = attemptThird(s);
								if (_v7.$ === 'Good') {
									var thirdGood = _v7;
									return thirdGood;
								} else {
									var thirdBad = _v7;
									var thirdCommitted = thirdBad.a;
									var thirdX = thirdBad.b;
									if (thirdCommitted) {
										return thirdBad;
									} else {
										var _v8 = attemptFourth(s);
										if (_v8.$ === 'Good') {
											var fourthGood = _v8;
											return fourthGood;
										} else {
											var fourthBad = _v8;
											var fourthCommitted = fourthBad.a;
											var fourthX = fourthBad.b;
											if (fourthCommitted) {
												return fourthBad;
											} else {
												var _v9 = attemptFifth(s);
												if (_v9.$ === 'Good') {
													var fifthGood = _v9;
													return fifthGood;
												} else {
													var fifthBad = _v9;
													var fifthCommitted = fifthBad.a;
													var fifthX = fifthBad.b;
													return fifthCommitted ? fifthBad : A2(
														$stil4m$elm_syntax$ParserFast$Bad,
														false,
														A3(
															$stil4m$elm_syntax$ParserFast$ExpectingOneOf,
															firstX,
															secondX,
															_List_fromArray(
																[thirdX, fourthX, fifthX])));
												}
											}
										}
									}
								}
							}
						}
					}
				}
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Declarations$portDeclarationWithoutDocumentation = A6(
	$stil4m$elm_syntax$ParserFast$map5,
	F5(
		function (commentsAfterPort, name, commentsAfterName, commentsAfterColon, typeAnnotationResult) {
			var nameRange = name.a;
			var _v0 = typeAnnotationResult.syntax;
			var end = _v0.a.end;
			return {
				comments: A2(
					$stil4m$elm_syntax$Rope$prependTo,
					typeAnnotationResult.comments,
					A2(
						$stil4m$elm_syntax$Rope$prependTo,
						commentsAfterColon,
						A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterName, commentsAfterPort))),
				syntax: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					{
						end: end,
						start: {column: 1, row: nameRange.start.row}
					},
					$stil4m$elm_syntax$Elm$Syntax$Declaration$PortDeclaration(
						{name: name, typeAnnotation: typeAnnotationResult.syntax}))
			};
		}),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'port', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	$stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, ':', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation);
var $stil4m$elm_syntax$Elm$Parser$Declarations$TypeDeclarationWithoutDocumentation = function (a) {
	return {$: 'TypeDeclarationWithoutDocumentation', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$customTypeDefinitionWithoutDocumentationAfterTypePrefix = A7(
	$stil4m$elm_syntax$ParserFast$map6,
	F6(
		function (name, commentsAfterName, parameters, commentsAfterEqual, headVariant, tailVariantsReverse) {
			return {
				comments: A2(
					$stil4m$elm_syntax$Rope$prependTo,
					tailVariantsReverse.comments,
					A2(
						$stil4m$elm_syntax$Rope$prependTo,
						headVariant.comments,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							commentsAfterEqual,
							A2($stil4m$elm_syntax$Rope$prependTo, parameters.comments, commentsAfterName)))),
				syntax: $stil4m$elm_syntax$Elm$Parser$Declarations$TypeDeclarationWithoutDocumentation(
					{headVariant: headVariant.syntax, name: name, parameters: parameters.syntax, tailVariantsReverse: tailVariantsReverse.syntax})
			};
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeNameNode,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$Declarations$typeGenericListEquals,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$Declarations$valueConstructorOptimisticLayout,
	$stil4m$elm_syntax$ParserWithComments$manyWithoutReverse(
		A2(
			$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
			'|',
			A2(
				$stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedPlusFollowedBy,
				1,
				A3(
					$stil4m$elm_syntax$ParserFast$map2,
					F2(
						function (commentsBeforePipe, variantResult) {
							return {
								comments: A2($stil4m$elm_syntax$Rope$prependTo, variantResult.comments, commentsBeforePipe),
								syntax: variantResult.syntax
							};
						}),
					$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
					$stil4m$elm_syntax$Elm$Parser$Declarations$valueConstructorOptimisticLayout)))));
var $stil4m$elm_syntax$ParserFast$map2WithStartLocation = F3(
	function (func, _v0, _v1) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v2 = parseA(s0);
				if (_v2.$ === 'Bad') {
					var committed = _v2.a;
					var x = _v2.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
				} else {
					var a = _v2.a;
					var s1 = _v2.b;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var x = _v3.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var b = _v3.a;
						var s2 = _v3.b;
						return A2(
							$stil4m$elm_syntax$ParserFast$Good,
							A3(
								func,
								{column: s0.col, row: s0.row},
								a,
								b),
							s2);
					}
				}
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Declarations$TypeAliasDeclarationWithoutDocumentation = function (a) {
	return {$: 'TypeAliasDeclarationWithoutDocumentation', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$typeAliasDefinitionWithoutDocumentationAfterTypePrefix = A7(
	$stil4m$elm_syntax$ParserFast$map6,
	F6(
		function (commentsAfterAlias, name, commentsAfterName, parameters, commentsAfterEqual, typeAnnotationResult) {
			return {
				comments: A2(
					$stil4m$elm_syntax$Rope$prependTo,
					typeAnnotationResult.comments,
					A2(
						$stil4m$elm_syntax$Rope$prependTo,
						commentsAfterEqual,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							parameters.comments,
							A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterName, commentsAfterAlias)))),
				syntax: $stil4m$elm_syntax$Elm$Parser$Declarations$TypeAliasDeclarationWithoutDocumentation(
					{name: name, parameters: parameters.syntax, typeAnnotation: typeAnnotationResult.syntax})
			};
		}),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'alias', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeNameNode,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$Declarations$typeGenericListEquals,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation);
var $stil4m$elm_syntax$Elm$Parser$Declarations$typeOrTypeAliasDefinitionWithoutDocumentation = A3(
	$stil4m$elm_syntax$ParserFast$map2WithStartLocation,
	F3(
		function (start, commentsAfterType, afterStart) {
			var allComments = A2($stil4m$elm_syntax$Rope$prependTo, afterStart.comments, commentsAfterType);
			var _v0 = afterStart.syntax;
			if (_v0.$ === 'TypeDeclarationWithoutDocumentation') {
				var typeDeclarationAfterDocumentation = _v0.a;
				var end = function () {
					var _v1 = typeDeclarationAfterDocumentation.tailVariantsReverse;
					if (_v1.b) {
						var _v2 = _v1.a;
						var range = _v2.a;
						return range.end;
					} else {
						var _v3 = typeDeclarationAfterDocumentation.headVariant;
						var headVariantRange = _v3.a;
						return headVariantRange.end;
					}
				}();
				return {
					comments: allComments,
					syntax: A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						{end: end, start: start},
						$stil4m$elm_syntax$Elm$Syntax$Declaration$CustomTypeDeclaration(
							{
								constructors: A2(
									$elm$core$List$cons,
									typeDeclarationAfterDocumentation.headVariant,
									$elm$core$List$reverse(typeDeclarationAfterDocumentation.tailVariantsReverse)),
								documentation: $elm$core$Maybe$Nothing,
								generics: typeDeclarationAfterDocumentation.parameters,
								name: typeDeclarationAfterDocumentation.name
							}))
				};
			} else {
				var typeAliasDeclarationAfterDocumentation = _v0.a;
				var _v4 = typeAliasDeclarationAfterDocumentation.typeAnnotation;
				var typeAnnotationRange = _v4.a;
				return {
					comments: allComments,
					syntax: A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						{end: typeAnnotationRange.end, start: start},
						$stil4m$elm_syntax$Elm$Syntax$Declaration$AliasDeclaration(
							{documentation: $elm$core$Maybe$Nothing, generics: typeAliasDeclarationAfterDocumentation.parameters, name: typeAliasDeclarationAfterDocumentation.name, typeAnnotation: typeAliasDeclarationAfterDocumentation.typeAnnotation}))
				};
			}
		}),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'type', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	A2($stil4m$elm_syntax$ParserFast$oneOf2, $stil4m$elm_syntax$Elm$Parser$Declarations$typeAliasDefinitionWithoutDocumentationAfterTypePrefix, $stil4m$elm_syntax$Elm$Parser$Declarations$customTypeDefinitionWithoutDocumentationAfterTypePrefix));
var $stil4m$elm_syntax$Elm$Parser$Declarations$declaration = A5($stil4m$elm_syntax$ParserFast$oneOf5, $stil4m$elm_syntax$Elm$Parser$Declarations$functionDeclarationWithoutDocumentation, $stil4m$elm_syntax$Elm$Parser$Declarations$declarationWithDocumentation, $stil4m$elm_syntax$Elm$Parser$Declarations$typeOrTypeAliasDefinitionWithoutDocumentation, $stil4m$elm_syntax$Elm$Parser$Declarations$portDeclarationWithoutDocumentation, $stil4m$elm_syntax$Elm$Parser$Declarations$infixDeclaration);
var $stil4m$elm_syntax$ParserFast$columnAndThen = function (callback) {
	return $stil4m$elm_syntax$ParserFast$Parser(
		function (s) {
			var _v0 = callback(s.col);
			var parse = _v0.a;
			return parse(s);
		});
};
var $stil4m$elm_syntax$Elm$Parser$Layout$problemModuleLevelIndentation = $stil4m$elm_syntax$ParserFast$problem('must be on module-level indentation');
var $stil4m$elm_syntax$Elm$Parser$Layout$moduleLevelIndentationFollowedBy = function (nextParser) {
	return $stil4m$elm_syntax$ParserFast$columnAndThen(
		function (column) {
			return (column === 1) ? nextParser : $stil4m$elm_syntax$Elm$Parser$Layout$problemModuleLevelIndentation;
		});
};
var $stil4m$elm_syntax$Elm$Parser$File$fileDeclarations = $stil4m$elm_syntax$ParserWithComments$many(
	$stil4m$elm_syntax$Elm$Parser$Layout$moduleLevelIndentationFollowedBy(
		A3(
			$stil4m$elm_syntax$ParserFast$map2,
			F2(
				function (declarationParsed, commentsAfter) {
					return {
						comments: A2($stil4m$elm_syntax$Rope$prependTo, commentsAfter, declarationParsed.comments),
						syntax: declarationParsed.syntax
					};
				}),
			$stil4m$elm_syntax$Elm$Parser$Declarations$declaration,
			$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout)));
var $stil4m$elm_syntax$Elm$Syntax$Exposing$All = function (a) {
	return {$: 'All', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit = function (a) {
	return {$: 'Explicit', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Exposing$FunctionExpose = function (a) {
	return {$: 'FunctionExpose', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Expose$functionExpose = $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameMapWithRange(
	F2(
		function (range, name) {
			return {
				comments: $stil4m$elm_syntax$Rope$empty,
				syntax: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Exposing$FunctionExpose(name))
			};
		}));
var $stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose = function (a) {
	return {$: 'InfixExpose', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$parensEnd = A2($stil4m$elm_syntax$ParserFast$symbol, ')', _Utils_Tuple0);
var $stil4m$elm_syntax$Elm$Parser$Expose$infixExpose = A3(
	$stil4m$elm_syntax$ParserFast$map2WithRange,
	F3(
		function (range, infixName, _v0) {
			return {
				comments: $stil4m$elm_syntax$Rope$empty,
				syntax: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose(infixName))
			};
		}),
	A2(
		$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
		'(',
		A2(
			$stil4m$elm_syntax$ParserFast$ifFollowedByWhileWithoutLinebreak,
			function (c) {
				switch (c.valueOf()) {
					case ')':
						return false;
					case '\n':
						return false;
					case ' ':
						return false;
					default:
						return true;
				}
			},
			function (c) {
				switch (c.valueOf()) {
					case ')':
						return false;
					case '\n':
						return false;
					case ' ':
						return false;
					default:
						return true;
				}
			})),
	$stil4m$elm_syntax$Elm$Parser$Tokens$parensEnd);
var $stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose = function (a) {
	return {$: 'TypeExpose', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose = function (a) {
	return {$: 'TypeOrAliasExpose', a: a};
};
var $stil4m$elm_syntax$ParserFast$map2WithRangeOrSucceed = F4(
	function (func, _v0, _v1, fallback) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v2 = parseA(s0);
				if (_v2.$ === 'Bad') {
					var c1 = _v2.a;
					var x = _v2.b;
					return c1 ? A2($stil4m$elm_syntax$ParserFast$Bad, true, x) : A2($stil4m$elm_syntax$ParserFast$Good, fallback, s0);
				} else {
					var a = _v2.a;
					var s1 = _v2.b;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var x = _v3.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var b = _v3.a;
						var s2 = _v3.b;
						return A2(
							$stil4m$elm_syntax$ParserFast$Good,
							A3(
								func,
								{
									end: {column: s2.col, row: s2.row},
									start: {column: s0.col, row: s0.row}
								},
								a,
								b),
							s2);
					}
				}
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Expose$typeExpose = A4(
	$stil4m$elm_syntax$ParserFast$map3,
	F3(
		function (_v0, commentsBeforeMaybeOpen, maybeOpen) {
			var typeNameRange = _v0.a;
			var typeName = _v0.b;
			return {
				comments: A2($stil4m$elm_syntax$Rope$prependTo, maybeOpen.comments, commentsBeforeMaybeOpen),
				syntax: function () {
					var _v1 = maybeOpen.syntax;
					if (_v1.$ === 'Nothing') {
						return A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							typeNameRange,
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose(typeName));
					} else {
						var openRange = _v1.a;
						return A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{end: openRange.end, start: typeNameRange.start},
							$stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose(
								{name: typeName, open: maybeOpen.syntax}));
					}
				}()
			};
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeNameNode,
	$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
	A4(
		$stil4m$elm_syntax$ParserFast$map2WithRangeOrSucceed,
		F3(
			function (range, left, right) {
				return {
					comments: A2($stil4m$elm_syntax$Rope$prependTo, right, left),
					syntax: $elm$core$Maybe$Just(range)
				};
			}),
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '(', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
		A2(
			$stil4m$elm_syntax$ParserFast$followedBySymbol,
			')',
			A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '..', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)),
		{comments: $stil4m$elm_syntax$Rope$empty, syntax: $elm$core$Maybe$Nothing}));
var $stil4m$elm_syntax$Elm$Parser$Expose$exposable = A3($stil4m$elm_syntax$ParserFast$oneOf3, $stil4m$elm_syntax$Elm$Parser$Expose$functionExpose, $stil4m$elm_syntax$Elm$Parser$Expose$typeExpose, $stil4m$elm_syntax$Elm$Parser$Expose$infixExpose);
var $stil4m$elm_syntax$Elm$Parser$Expose$exposingListInner = A2(
	$stil4m$elm_syntax$ParserFast$oneOf2,
	A4(
		$stil4m$elm_syntax$ParserFast$map3,
		F3(
			function (headElement, commentsAfterHeadElement, tailElements) {
				return {
					comments: A2(
						$stil4m$elm_syntax$Rope$prependTo,
						tailElements.comments,
						A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterHeadElement, headElement.comments)),
					syntax: $stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(
						A2($elm$core$List$cons, headElement.syntax, tailElements.syntax))
				};
			}),
		$stil4m$elm_syntax$Elm$Parser$Expose$exposable,
		$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
		$stil4m$elm_syntax$ParserWithComments$many(
			A2(
				$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
				',',
				$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides($stil4m$elm_syntax$Elm$Parser$Expose$exposable)))),
	A2(
		$stil4m$elm_syntax$ParserFast$mapWithRange,
		F2(
			function (range, commentsAfterDotDot) {
				return {
					comments: commentsAfterDotDot,
					syntax: $stil4m$elm_syntax$Elm$Syntax$Exposing$All(range)
				};
			}),
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '..', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)));
var $stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition = A4(
	$stil4m$elm_syntax$ParserFast$map3WithRange,
	F4(
		function (range, commentsAfterExposing, commentsBefore, exposingListInnerResult) {
			return {
				comments: A2(
					$stil4m$elm_syntax$Rope$prependTo,
					exposingListInnerResult.comments,
					A2($stil4m$elm_syntax$Rope$prependTo, commentsBefore, commentsAfterExposing)),
				syntax: A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, range, exposingListInnerResult.syntax)
			};
		}),
	A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, 'exposing', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '(', $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout),
	A2($stil4m$elm_syntax$ParserFast$followedBySymbol, ')', $stil4m$elm_syntax$Elm$Parser$Expose$exposingListInner));
var $stil4m$elm_syntax$ParserFast$map3OrSucceed = F5(
	function (func, _v0, _v1, _v2, fallback) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		var parseC = _v2.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v3 = parseA(s0);
				if (_v3.$ === 'Bad') {
					var c1 = _v3.a;
					var x = _v3.b;
					return c1 ? A2($stil4m$elm_syntax$ParserFast$Bad, true, x) : A2($stil4m$elm_syntax$ParserFast$Good, fallback, s0);
				} else {
					var a = _v3.a;
					var s1 = _v3.b;
					var _v4 = parseB(s1);
					if (_v4.$ === 'Bad') {
						var x = _v4.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var b = _v4.a;
						var s2 = _v4.b;
						var _v5 = parseC(s2);
						if (_v5.$ === 'Bad') {
							var x = _v5.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var c = _v5.a;
							var s3 = _v5.b;
							return A2(
								$stil4m$elm_syntax$ParserFast$Good,
								A3(func, a, b, c),
								s3);
						}
					}
				}
			});
	});
function $stil4m$elm_syntax$Elm$Parser$Base$cyclic$moduleNameOrEmpty() {
	return A4(
		$stil4m$elm_syntax$ParserFast$map2OrSucceed,
		F2(
			function (head, tail) {
				return A2($elm$core$List$cons, head, tail);
			}),
		A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '.', $stil4m$elm_syntax$Elm$Parser$Tokens$typeName),
		$stil4m$elm_syntax$ParserFast$lazy(
			function (_v0) {
				return $stil4m$elm_syntax$Elm$Parser$Base$cyclic$moduleNameOrEmpty();
			}),
		_List_Nil);
}
try {
	var $stil4m$elm_syntax$Elm$Parser$Base$moduleNameOrEmpty = $stil4m$elm_syntax$Elm$Parser$Base$cyclic$moduleNameOrEmpty();
	$stil4m$elm_syntax$Elm$Parser$Base$cyclic$moduleNameOrEmpty = function () {
		return $stil4m$elm_syntax$Elm$Parser$Base$moduleNameOrEmpty;
	};
} catch ($) {
	throw 'Some top-level definitions from `Elm.Parser.Base` are causing infinite recursion:\n\n  ┌─────┐\n  │    moduleNameOrEmpty\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $stil4m$elm_syntax$Elm$Parser$Base$moduleName = A3(
	$stil4m$elm_syntax$ParserFast$map2WithRange,
	F3(
		function (range, head, tail) {
			return A2(
				$stil4m$elm_syntax$Elm$Syntax$Node$Node,
				range,
				A2($elm$core$List$cons, head, tail));
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeName,
	$stil4m$elm_syntax$Elm$Parser$Base$moduleNameOrEmpty);
var $stil4m$elm_syntax$Elm$Parser$Tokens$typeNameMapWithRange = function (rangeAndNameToRes) {
	return A3($stil4m$elm_syntax$ParserFast$ifFollowedByWhileMapWithRangeWithoutLinebreak, rangeAndNameToRes, $stil4m$elm_syntax$Char$Extra$unicodeIsUpperFast, $stil4m$elm_syntax$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast);
};
var $stil4m$elm_syntax$Elm$Parser$Imports$importDefinition = A6(
	$stil4m$elm_syntax$ParserFast$map5WithStartLocation,
	F6(
		function (start, commentsAfterImport, mod, commentsAfterModuleName, maybeModuleAlias, maybeExposingList) {
			var commentsBeforeAlias = A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterModuleName, commentsAfterImport);
			if (maybeModuleAlias.$ === 'Nothing') {
				if (maybeExposingList.$ === 'Nothing') {
					var _v2 = mod;
					var modRange = _v2.a;
					return {
						comments: commentsBeforeAlias,
						syntax: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{end: modRange.end, start: start},
							{exposingList: $elm$core$Maybe$Nothing, moduleAlias: $elm$core$Maybe$Nothing, moduleName: mod})
					};
				} else {
					var exposingListValue = maybeExposingList.a;
					var _v3 = exposingListValue.syntax;
					var exposingRange = _v3.a;
					return {
						comments: A2($stil4m$elm_syntax$Rope$prependTo, exposingListValue.comments, commentsBeforeAlias),
						syntax: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{end: exposingRange.end, start: start},
							{
								exposingList: $elm$core$Maybe$Just(exposingListValue.syntax),
								moduleAlias: $elm$core$Maybe$Nothing,
								moduleName: mod
							})
					};
				}
			} else {
				var moduleAliasResult = maybeModuleAlias.a;
				if (maybeExposingList.$ === 'Nothing') {
					var _v5 = moduleAliasResult.syntax;
					var aliasRange = _v5.a;
					return {
						comments: A2($stil4m$elm_syntax$Rope$prependTo, moduleAliasResult.comments, commentsBeforeAlias),
						syntax: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{end: aliasRange.end, start: start},
							{
								exposingList: $elm$core$Maybe$Nothing,
								moduleAlias: $elm$core$Maybe$Just(moduleAliasResult.syntax),
								moduleName: mod
							})
					};
				} else {
					var exposingListValue = maybeExposingList.a;
					var _v6 = exposingListValue.syntax;
					var exposingRange = _v6.a;
					return {
						comments: A2(
							$stil4m$elm_syntax$Rope$prependTo,
							exposingListValue.comments,
							A2($stil4m$elm_syntax$Rope$prependTo, moduleAliasResult.comments, commentsBeforeAlias)),
						syntax: A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$Node,
							{end: exposingRange.end, start: start},
							{
								exposingList: $elm$core$Maybe$Just(exposingListValue.syntax),
								moduleAlias: $elm$core$Maybe$Just(moduleAliasResult.syntax),
								moduleName: mod
							})
					};
				}
			}
		}),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'import', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	$stil4m$elm_syntax$Elm$Parser$Base$moduleName,
	$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
	A5(
		$stil4m$elm_syntax$ParserFast$map3OrSucceed,
		F3(
			function (commentsBefore, moduleAliasNode, commentsAfter) {
				return $elm$core$Maybe$Just(
					{
						comments: A2($stil4m$elm_syntax$Rope$prependTo, commentsAfter, commentsBefore),
						syntax: moduleAliasNode
					});
			}),
		A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'as', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
		$stil4m$elm_syntax$Elm$Parser$Tokens$typeNameMapWithRange(
			F2(
				function (range, moduleAlias) {
					return A2(
						$stil4m$elm_syntax$Elm$Syntax$Node$Node,
						range,
						_List_fromArray(
							[moduleAlias]));
				})),
		$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
		$elm$core$Maybe$Nothing),
	A4(
		$stil4m$elm_syntax$ParserFast$map2OrSucceed,
		F2(
			function (exposingResult, commentsAfter) {
				return $elm$core$Maybe$Just(
					{
						comments: A2($stil4m$elm_syntax$Rope$prependTo, commentsAfter, exposingResult.comments),
						syntax: exposingResult.syntax
					});
			}),
		$stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition,
		$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
		$elm$core$Maybe$Nothing));
var $stil4m$elm_syntax$Elm$Parser$Layout$endsTopIndented = function (parser) {
	return A3(
		$stil4m$elm_syntax$ParserFast$validateEndColumnIndentation,
		F2(
			function (column, indent) {
				return !(column - indent);
			}),
		'must be on top indentation',
		parser);
};
var $stil4m$elm_syntax$Elm$Parser$Layout$layoutStrict = $stil4m$elm_syntax$Elm$Parser$Layout$endsTopIndented($stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout);
var $stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedByComments = function (nextParser) {
	return A3(
		$stil4m$elm_syntax$ParserFast$map2,
		F2(
			function (commentsBefore, afterComments) {
				return A2($stil4m$elm_syntax$Rope$prependTo, afterComments, commentsBefore);
			}),
		$stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout,
		$stil4m$elm_syntax$Elm$Parser$Layout$onTopIndentationFollowedBy(nextParser));
};
var $stil4m$elm_syntax$Elm$Syntax$Module$EffectModule = function (a) {
	return {$: 'EffectModule', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Modules$effectWhereClause = A5(
	$stil4m$elm_syntax$ParserFast$map4,
	F4(
		function (fnName, commentsAfterFnName, commentsAfterEqual, typeName_) {
			return {
				comments: A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterEqual, commentsAfterFnName),
				syntax: _Utils_Tuple2(fnName, typeName_)
			};
		}),
	$stil4m$elm_syntax$Elm$Parser$Tokens$functionName,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	A2($stil4m$elm_syntax$ParserFast$symbolFollowedBy, '=', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	$stil4m$elm_syntax$Elm$Parser$Tokens$typeNameNode);
var $stil4m$elm_syntax$List$Extra$find = F2(
	function (predicate, list) {
		find:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var x = list.a;
				var xs = list.b;
				if (predicate(x)) {
					return $elm$core$Maybe$Just(x);
				} else {
					var $temp$predicate = predicate,
						$temp$list = xs;
					predicate = $temp$predicate;
					list = $temp$list;
					continue find;
				}
			}
		}
	});
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $stil4m$elm_syntax$Elm$Parser$Modules$whereBlock = A2(
	$stil4m$elm_syntax$ParserFast$followedBySymbol,
	'}',
	A2(
		$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
		'{',
		A5(
			$stil4m$elm_syntax$ParserFast$map4,
			F4(
				function (commentsBeforeHead, head, commentsAfterHead, tail) {
					var pairs = A2($elm$core$List$cons, head.syntax, tail.syntax);
					return {
						comments: A2(
							$stil4m$elm_syntax$Rope$prependTo,
							tail.comments,
							A2(
								$stil4m$elm_syntax$Rope$prependTo,
								commentsAfterHead,
								A2($stil4m$elm_syntax$Rope$prependTo, head.comments, commentsBeforeHead))),
						syntax: {
							command: A2(
								$elm$core$Maybe$map,
								$elm$core$Tuple$second,
								A2(
									$stil4m$elm_syntax$List$Extra$find,
									function (_v0) {
										var fnName = _v0.a;
										return fnName === 'command';
									},
									pairs)),
							subscription: A2(
								$elm$core$Maybe$map,
								$elm$core$Tuple$second,
								A2(
									$stil4m$elm_syntax$List$Extra$find,
									function (_v1) {
										var fnName = _v1.a;
										return fnName === 'subscription';
									},
									pairs))
						}
					};
				}),
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			$stil4m$elm_syntax$Elm$Parser$Modules$effectWhereClause,
			$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
			$stil4m$elm_syntax$ParserWithComments$many(
				A2(
					$stil4m$elm_syntax$ParserFast$symbolFollowedBy,
					',',
					$stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides($stil4m$elm_syntax$Elm$Parser$Modules$effectWhereClause))))));
var $stil4m$elm_syntax$Elm$Parser$Modules$effectWhereClauses = A3(
	$stil4m$elm_syntax$ParserFast$map2,
	F2(
		function (commentsBefore, whereResult) {
			return {
				comments: A2($stil4m$elm_syntax$Rope$prependTo, whereResult.comments, commentsBefore),
				syntax: whereResult.syntax
			};
		}),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'where', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	$stil4m$elm_syntax$Elm$Parser$Modules$whereBlock);
var $stil4m$elm_syntax$ParserFast$map7WithRange = F8(
	function (func, _v0, _v1, _v2, _v3, _v4, _v5, _v6) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		var parseC = _v2.a;
		var parseD = _v3.a;
		var parseE = _v4.a;
		var parseF = _v5.a;
		var parseG = _v6.a;
		return $stil4m$elm_syntax$ParserFast$Parser(
			function (s0) {
				var _v7 = parseA(s0);
				if (_v7.$ === 'Bad') {
					var committed = _v7.a;
					var x = _v7.b;
					return A2($stil4m$elm_syntax$ParserFast$Bad, committed, x);
				} else {
					var a = _v7.a;
					var s1 = _v7.b;
					var _v8 = parseB(s1);
					if (_v8.$ === 'Bad') {
						var x = _v8.b;
						return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
					} else {
						var b = _v8.a;
						var s2 = _v8.b;
						var _v9 = parseC(s2);
						if (_v9.$ === 'Bad') {
							var x = _v9.b;
							return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
						} else {
							var c = _v9.a;
							var s3 = _v9.b;
							var _v10 = parseD(s3);
							if (_v10.$ === 'Bad') {
								var x = _v10.b;
								return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
							} else {
								var d = _v10.a;
								var s4 = _v10.b;
								var _v11 = parseE(s4);
								if (_v11.$ === 'Bad') {
									var x = _v11.b;
									return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
								} else {
									var e = _v11.a;
									var s5 = _v11.b;
									var _v12 = parseF(s5);
									if (_v12.$ === 'Bad') {
										var x = _v12.b;
										return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
									} else {
										var f = _v12.a;
										var s6 = _v12.b;
										var _v13 = parseG(s6);
										if (_v13.$ === 'Bad') {
											var x = _v13.b;
											return A2($stil4m$elm_syntax$ParserFast$Bad, true, x);
										} else {
											var g = _v13.a;
											var s7 = _v13.b;
											return A2(
												$stil4m$elm_syntax$ParserFast$Good,
												A8(
													func,
													{
														end: {column: s7.col, row: s7.row},
														start: {column: s0.col, row: s0.row}
													},
													a,
													b,
													c,
													d,
													e,
													f,
													g),
												s7);
										}
									}
								}
							}
						}
					}
				}
			});
	});
var $stil4m$elm_syntax$Elm$Parser$Modules$effectModuleDefinition = A8(
	$stil4m$elm_syntax$ParserFast$map7WithRange,
	F8(
		function (range, commentsAfterEffect, commentsAfterModule, name, commentsAfterName, whereClauses, commentsAfterWhereClauses, exp) {
			return {
				comments: A2(
					$stil4m$elm_syntax$Rope$prependTo,
					exp.comments,
					A2(
						$stil4m$elm_syntax$Rope$prependTo,
						commentsAfterWhereClauses,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							whereClauses.comments,
							A2(
								$stil4m$elm_syntax$Rope$prependTo,
								commentsAfterName,
								A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterModule, commentsAfterEffect))))),
				syntax: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Module$EffectModule(
						{command: whereClauses.syntax.command, exposingList: exp.syntax, moduleName: name, subscription: whereClauses.syntax.subscription}))
			};
		}),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'effect', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'module', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	$stil4m$elm_syntax$Elm$Parser$Base$moduleName,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$Modules$effectWhereClauses,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition);
var $stil4m$elm_syntax$Elm$Syntax$Module$NormalModule = function (a) {
	return {$: 'NormalModule', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Modules$normalModuleDefinition = A5(
	$stil4m$elm_syntax$ParserFast$map4WithRange,
	F5(
		function (range, commentsAfterModule, moduleName, commentsAfterModuleName, exposingList) {
			return {
				comments: A2(
					$stil4m$elm_syntax$Rope$prependTo,
					exposingList.comments,
					A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterModuleName, commentsAfterModule)),
				syntax: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Module$NormalModule(
						{exposingList: exposingList.syntax, moduleName: moduleName}))
			};
		}),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'module', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	$stil4m$elm_syntax$Elm$Parser$Base$moduleName,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition);
var $stil4m$elm_syntax$Elm$Syntax$Module$PortModule = function (a) {
	return {$: 'PortModule', a: a};
};
var $stil4m$elm_syntax$Elm$Parser$Modules$portModuleDefinition = A6(
	$stil4m$elm_syntax$ParserFast$map5WithRange,
	F6(
		function (range, commentsAfterPort, commentsAfterModule, moduleName, commentsAfterModuleName, exposingList) {
			return {
				comments: A2(
					$stil4m$elm_syntax$Rope$prependTo,
					exposingList.comments,
					A2(
						$stil4m$elm_syntax$Rope$prependTo,
						commentsAfterModuleName,
						A2($stil4m$elm_syntax$Rope$prependTo, commentsAfterModule, commentsAfterPort))),
				syntax: A2(
					$stil4m$elm_syntax$Elm$Syntax$Node$Node,
					range,
					$stil4m$elm_syntax$Elm$Syntax$Module$PortModule(
						{exposingList: exposingList.syntax, moduleName: moduleName}))
			};
		}),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'port', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	A2($stil4m$elm_syntax$ParserFast$keywordFollowedBy, 'module', $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout),
	$stil4m$elm_syntax$Elm$Parser$Base$moduleName,
	$stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout,
	$stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition);
var $stil4m$elm_syntax$Elm$Parser$Modules$moduleDefinition = A3($stil4m$elm_syntax$ParserFast$oneOf3, $stil4m$elm_syntax$Elm$Parser$Modules$normalModuleDefinition, $stil4m$elm_syntax$Elm$Parser$Modules$portModuleDefinition, $stil4m$elm_syntax$Elm$Parser$Modules$effectModuleDefinition);
var $stil4m$elm_syntax$Elm$Parser$Comments$moduleDocumentation = $stil4m$elm_syntax$Elm$Parser$Comments$declarationDocumentation;
var $stil4m$elm_syntax$Rope$ropeLikelyFilledToListInto = F2(
	function (initialAcc, ropeLikelyFilled) {
		ropeLikelyFilledToListInto:
		while (true) {
			if (ropeLikelyFilled.$ === 'Leaf') {
				var onlyElement = ropeLikelyFilled.a;
				return A2($elm$core$List$cons, onlyElement, initialAcc);
			} else {
				var left = ropeLikelyFilled.a;
				var right = ropeLikelyFilled.b;
				var $temp$initialAcc = A2($stil4m$elm_syntax$Rope$ropeLikelyFilledToListInto, initialAcc, right),
					$temp$ropeLikelyFilled = left;
				initialAcc = $temp$initialAcc;
				ropeLikelyFilled = $temp$ropeLikelyFilled;
				continue ropeLikelyFilledToListInto;
			}
		}
	});
var $stil4m$elm_syntax$Rope$toList = function (rope) {
	if (rope.$ === 'Nothing') {
		return _List_Nil;
	} else {
		var ropeLikelyFilled = rope.a;
		return A2($stil4m$elm_syntax$Rope$ropeLikelyFilledToListInto, _List_Nil, ropeLikelyFilled);
	}
};
var $stil4m$elm_syntax$Elm$Parser$File$file = A5(
	$stil4m$elm_syntax$ParserFast$map4,
	F4(
		function (moduleDefinition, moduleComments, imports, declarations) {
			return {
				comments: $stil4m$elm_syntax$Rope$toList(
					A2(
						$stil4m$elm_syntax$Rope$prependTo,
						declarations.comments,
						A2(
							$stil4m$elm_syntax$Rope$prependTo,
							imports.comments,
							A2($stil4m$elm_syntax$Rope$prependTo, moduleComments, moduleDefinition.comments)))),
				declarations: declarations.syntax,
				imports: imports.syntax,
				moduleDefinition: moduleDefinition.syntax
			};
		}),
	$stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedByWithComments($stil4m$elm_syntax$Elm$Parser$Modules$moduleDefinition),
	$stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedByComments(
		A4(
			$stil4m$elm_syntax$ParserFast$map2OrSucceed,
			F2(
				function (moduleDocumentation, commentsAfter) {
					return A2(
						$stil4m$elm_syntax$Rope$filledPrependTo,
						commentsAfter,
						$stil4m$elm_syntax$Rope$one(moduleDocumentation));
				}),
			$stil4m$elm_syntax$Elm$Parser$Comments$moduleDocumentation,
			$stil4m$elm_syntax$Elm$Parser$Layout$layoutStrict,
			$stil4m$elm_syntax$Rope$empty)),
	$stil4m$elm_syntax$ParserWithComments$many($stil4m$elm_syntax$Elm$Parser$Imports$importDefinition),
	$stil4m$elm_syntax$Elm$Parser$File$fileDeclarations);
var $elm$parser$Parser$ExpectingEnd = {$: 'ExpectingEnd'};
var $elm$parser$Parser$ExpectingKeyword = function (a) {
	return {$: 'ExpectingKeyword', a: a};
};
var $elm$parser$Parser$ExpectingNumber = {$: 'ExpectingNumber'};
var $elm$parser$Parser$ExpectingSymbol = function (a) {
	return {$: 'ExpectingSymbol', a: a};
};
var $elm$parser$Parser$Problem = function (a) {
	return {$: 'Problem', a: a};
};
var $elm$parser$Parser$UnexpectedChar = {$: 'UnexpectedChar'};
var $stil4m$elm_syntax$ParserFast$ropeFilledToList = F2(
	function (problemToConvert, soFar) {
		switch (problemToConvert.$) {
			case 'ExpectingOneOf':
				var firstTry = problemToConvert.a;
				var secondTry = problemToConvert.b;
				var thirdTryUp = problemToConvert.c;
				return A2(
					$stil4m$elm_syntax$ParserFast$ropeFilledToList,
					firstTry,
					A2(
						$stil4m$elm_syntax$ParserFast$ropeFilledToList,
						secondTry,
						A3($elm$core$List$foldr, $stil4m$elm_syntax$ParserFast$ropeFilledToList, soFar, thirdTryUp)));
			case 'ExpectingNumber':
				var row = problemToConvert.a;
				var col = problemToConvert.b;
				return A2(
					$elm$core$List$cons,
					{col: col, problem: $elm$parser$Parser$ExpectingNumber, row: row},
					soFar);
			case 'ExpectingSymbol':
				var row = problemToConvert.a;
				var col = problemToConvert.b;
				var symbolString = problemToConvert.c;
				return A2(
					$elm$core$List$cons,
					{
						col: col,
						problem: $elm$parser$Parser$ExpectingSymbol(symbolString),
						row: row
					},
					soFar);
			case 'ExpectingAnyChar':
				var row = problemToConvert.a;
				var col = problemToConvert.b;
				return A2(
					$elm$core$List$cons,
					{
						col: col,
						problem: $elm$parser$Parser$Problem('expecting any char'),
						row: row
					},
					soFar);
			case 'ExpectingKeyword':
				var row = problemToConvert.a;
				var col = problemToConvert.b;
				var keywordString = problemToConvert.c;
				return A2(
					$elm$core$List$cons,
					{
						col: col,
						problem: $elm$parser$Parser$ExpectingKeyword(keywordString),
						row: row
					},
					soFar);
			case 'ExpectingCharSatisfyingPredicate':
				var row = problemToConvert.a;
				var col = problemToConvert.b;
				return A2(
					$elm$core$List$cons,
					{col: col, problem: $elm$parser$Parser$UnexpectedChar, row: row},
					soFar);
			case 'ExpectingStringSatisfyingPredicate':
				var row = problemToConvert.a;
				var col = problemToConvert.b;
				return A2(
					$elm$core$List$cons,
					{
						col: col,
						problem: $elm$parser$Parser$Problem('expected string to pass validation'),
						row: row
					},
					soFar);
			default:
				var row = problemToConvert.a;
				var col = problemToConvert.b;
				var customMessage = problemToConvert.c;
				return A2(
					$elm$core$List$cons,
					{
						col: col,
						problem: $elm$parser$Parser$Problem(customMessage),
						row: row
					},
					soFar);
		}
	});
var $stil4m$elm_syntax$ParserFast$run = F2(
	function (_v0, src) {
		var parse = _v0.a;
		var _v1 = parse(
			{col: 1, indent: 1, offset: 0, row: 1, src: src});
		if (_v1.$ === 'Good') {
			var value = _v1.a;
			var finalState = _v1.b;
			return (!(finalState.offset - $elm$core$String$length(finalState.src))) ? $elm$core$Result$Ok(value) : $elm$core$Result$Err(
				_List_fromArray(
					[
						{col: finalState.col, problem: $elm$parser$Parser$ExpectingEnd, row: finalState.row}
					]));
		} else {
			var deadEnds = _v1.b;
			return $elm$core$Result$Err(
				A2($stil4m$elm_syntax$ParserFast$ropeFilledToList, deadEnds, _List_Nil));
		}
	});
var $stil4m$elm_syntax$Elm$Parser$parseToFile = function (input) {
	return A2($stil4m$elm_syntax$ParserFast$run, $stil4m$elm_syntax$Elm$Parser$File$file, input);
};
var $author$project$Main$bytesToElmSyntaxModule = function (sourceBytes) {
	var _v0 = A2(
		$elm$bytes$Bytes$Decode$decode,
		$elm$bytes$Bytes$Decode$string(
			$elm$bytes$Bytes$width(sourceBytes)),
		sourceBytes);
	if (_v0.$ === 'Nothing') {
		return $elm$core$Result$Err('source bytes couldn\'t be decoded into UTF-8');
	} else {
		var source = _v0.a;
		var _v1 = $stil4m$elm_syntax$Elm$Parser$parseToFile(source);
		if (_v1.$ === 'Err') {
			return $elm$core$Result$Err('source couldn\'t be parsed. Check for compiler errors.');
		} else {
			var syntax = _v1.a;
			return $elm$core$Result$Ok(syntax);
		}
	}
};
var $lue_bird$elm_state_interface_experimental$Node$directorySubPathsRequest = function (path) {
	return $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle(
		$lue_bird$elm_state_interface_experimental$Node$DirectorySubPathsRequest(
			{on: $elm$core$Basics$identity, path: path}));
};
var $elm$bytes$Bytes$Encode$encode = _Bytes_encode;
var $elm$core$String$endsWith = _String_endsWith;
var $miniBill$elm_fast_dict$FastDict$foldrInner = F3(
	function (func, acc, t) {
		foldrInner:
		while (true) {
			if (t.$ === 'Leaf') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($miniBill$elm_fast_dict$FastDict$foldrInner, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldrInner;
			}
		}
	});
var $miniBill$elm_fast_dict$FastDict$foldr = F3(
	function (func, acc, _v0) {
		var dict = _v0.b;
		return A3($miniBill$elm_fast_dict$FastDict$foldrInner, func, acc, dict);
	});
var $miniBill$elm_fast_dict$FastSet$foldr = F3(
	function (func, acc, _v0) {
		var set = _v0.a;
		return A3(
			$miniBill$elm_fast_dict$FastDict$foldr,
			F3(
				function (v, _v1, iacc) {
					return A2(func, v, iacc);
				}),
			acc,
			set);
	});
var $author$project$Main$fastSetToListAndMap = F2(
	function (keyToElement, fastDict) {
		return A3(
			$miniBill$elm_fast_dict$FastSet$foldr,
			F2(
				function (key, soFar) {
					return A2(
						$elm$core$List$cons,
						keyToElement(key),
						soFar);
				}),
			_List_Nil,
			fastDict);
	});
var $elm$bytes$Bytes$Decode$loopHelp = F4(
	function (state, callback, bites, offset) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var decoder = _v0.a;
			var _v1 = A2(decoder, bites, offset);
			var newOffset = _v1.a;
			var step = _v1.b;
			if (step.$ === 'Loop') {
				var newState = step.a;
				var $temp$state = newState,
					$temp$callback = callback,
					$temp$bites = bites,
					$temp$offset = newOffset;
				state = $temp$state;
				callback = $temp$callback;
				bites = $temp$bites;
				offset = $temp$offset;
				continue loopHelp;
			} else {
				var result = step.a;
				return _Utils_Tuple2(newOffset, result);
			}
		}
	});
var $elm$bytes$Bytes$Decode$loop = F2(
	function (state, callback) {
		return $elm$bytes$Bytes$Decode$Decoder(
			A2($elm$bytes$Bytes$Decode$loopHelp, state, callback));
	});
var $elm$bytes$Bytes$Decode$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$bytes$Bytes$Decode$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $elm$bytes$Bytes$BE = {$: 'BE'};
var $elm$bytes$Bytes$Decode$unsignedInt32 = function (endianness) {
	return $elm$bytes$Bytes$Decode$Decoder(
		_Bytes_read_u32(
			_Utils_eq(endianness, $elm$bytes$Bytes$LE)));
};
var $lue_bird$elm_state_interface_experimental$AsciiString$decodeUnsignedInt32BE = $elm$bytes$Bytes$Decode$unsignedInt32($elm$bytes$Bytes$BE);
var $elm$bytes$Bytes$Decode$map = F2(
	function (func, _v0) {
		var decodeA = _v0.a;
		return $elm$bytes$Bytes$Decode$Decoder(
			F2(
				function (bites, offset) {
					var _v1 = A2(decodeA, bites, offset);
					var aOffset = _v1.a;
					var a = _v1.b;
					return _Utils_Tuple2(
						aOffset,
						func(a));
				}));
	});
var $elm$bytes$Bytes$Decode$succeed = function (a) {
	return $elm$bytes$Bytes$Decode$Decoder(
		F2(
			function (_v0, offset) {
				return _Utils_Tuple2(offset, a);
			}));
};
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $lue_bird$elm_state_interface_experimental$AsciiString$unsignedInt8ToAsciiString = function (bits) {
	return $elm$core$String$fromChar(
		$elm$core$Char$fromCode(bits));
};
var $lue_bird$elm_state_interface_experimental$AsciiString$unsignedInt32ToAsciiString = function (bits) {
	return _Utils_ap(
		$lue_bird$elm_state_interface_experimental$AsciiString$unsignedInt8ToAsciiString((bits >>> 24) & 255),
		_Utils_ap(
			$lue_bird$elm_state_interface_experimental$AsciiString$unsignedInt8ToAsciiString((bits >>> 16) & 255),
			_Utils_ap(
				$lue_bird$elm_state_interface_experimental$AsciiString$unsignedInt8ToAsciiString((bits >>> 8) & 255),
				$lue_bird$elm_state_interface_experimental$AsciiString$unsignedInt8ToAsciiString(bits & 255))));
};
var $elm$bytes$Bytes$Decode$unsignedInt8 = $elm$bytes$Bytes$Decode$Decoder(_Bytes_read_u8);
var $lue_bird$elm_state_interface_experimental$AsciiString$loopHelp = function (soFar) {
	return (soFar.remaining >= 4) ? A2(
		$elm$bytes$Bytes$Decode$map,
		function (chunk) {
			return $elm$bytes$Bytes$Decode$Loop(
				{
					remaining: soFar.remaining - 4,
					string: _Utils_ap(
						soFar.string,
						$lue_bird$elm_state_interface_experimental$AsciiString$unsignedInt32ToAsciiString(chunk))
				});
		},
		$lue_bird$elm_state_interface_experimental$AsciiString$decodeUnsignedInt32BE) : ((!soFar.remaining) ? $elm$bytes$Bytes$Decode$succeed(
		$elm$bytes$Bytes$Decode$Done(soFar.string)) : A2(
		$elm$bytes$Bytes$Decode$map,
		function (a) {
			return $elm$bytes$Bytes$Decode$Loop(
				{
					remaining: soFar.remaining - 1,
					string: _Utils_ap(
						soFar.string,
						$lue_bird$elm_state_interface_experimental$AsciiString$unsignedInt8ToAsciiString(a))
				});
		},
		$elm$bytes$Bytes$Decode$unsignedInt8));
};
var $lue_bird$elm_state_interface_experimental$AsciiString$decoder = function (width) {
	return A2(
		$elm$bytes$Bytes$Decode$loop,
		{remaining: width, string: ''},
		$lue_bird$elm_state_interface_experimental$AsciiString$loopHelp);
};
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $lue_bird$elm_state_interface_experimental$AsciiString$fromBytes = function (bytes) {
	return A2(
		$elm$core$Maybe$withDefault,
		'',
		A2(
			$elm$bytes$Bytes$Decode$decode,
			$lue_bird$elm_state_interface_experimental$AsciiString$decoder(
				$elm$bytes$Bytes$width(bytes)),
			bytes));
};
var $lue_bird$elm_state_interface_experimental$Node$fileWrite = function (write) {
	return $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle(
		$lue_bird$elm_state_interface_experimental$Node$FileWrite(
			{
				contentAsciiString: $lue_bird$elm_state_interface_experimental$AsciiString$fromBytes(write.content),
				on: $elm$core$Basics$identity,
				path: write.path
			}));
};
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (_v0.$ === 'Just') {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $lue_bird$elm_state_interface_experimental$Node$interfaceNone = $miniBill$elm_fast_dict$FastDict$empty;
var $miniBill$elm_fast_dict$FastDict$isEmpty = function (_v0) {
	var dict = _v0.b;
	if (dict.$ === 'Leaf') {
		return true;
	} else {
		return false;
	}
};
var $miniBill$elm_fast_dict$FastSet$isEmpty = function (_v0) {
	var set = _v0.a;
	return $miniBill$elm_fast_dict$FastDict$isEmpty(set);
};
var $author$project$ElmSyntaxToRust$RustExpressionCall = function (a) {
	return {$: 'RustExpressionCall', a: a};
};
var $author$project$ElmSyntaxToRust$RustExpressionLambda = function (a) {
	return {$: 'RustExpressionLambda', a: a};
};
var $elm$core$Result$andThen = F2(
	function (callback, result) {
		if (result.$ === 'Ok') {
			var value = result.a;
			return callback(value);
		} else {
			var msg = result.a;
			return $elm$core$Result$Err(msg);
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct = function (a) {
	return {$: 'TypeConstruct', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction = function (a) {
	return {$: 'TypeFunction', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable = function (a) {
	return {$: 'TypeNotVariable', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable = function (a) {
	return {$: 'TypeVariable', a: a};
};
var $stil4m$elm_syntax$Elm$Syntax$Range$empty = {
	end: {column: 0, row: 0},
	start: {column: 0, row: 0}
};
var $miniBill$elm_fast_dict$FastDict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($miniBill$elm_fast_dict$FastDict$insert, key, value, dict);
			}),
		$miniBill$elm_fast_dict$FastDict$empty,
		assocs);
};
var $author$project$ElmSyntaxToRust$elmBytesTypes = $miniBill$elm_fast_dict$FastDict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'Bytes',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Bytes',
							{
								parameters: _List_Nil,
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							}),
							_Utils_Tuple2(
							'Endianness',
							{
								parameters: _List_Nil,
								variants: $miniBill$elm_fast_dict$FastDict$fromList(
									_List_fromArray(
										[
											_Utils_Tuple2('LE', _List_Nil),
											_Utils_Tuple2('BE', _List_Nil)
										]))
							})
						])),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'getHostEndianness',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{
										_arguments: _List_fromArray(
											[
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
												{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
													{_arguments: _List_Nil, moduleOrigin: 'Bytes', name: 'Endianness'}))
											]),
										moduleOrigin: 'Task',
										name: 'Task'
									}))),
							_Utils_Tuple2(
							'width',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Bytes', name: 'Bytes'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			}),
			_Utils_Tuple2(
			'Bytes.Decode',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Decoder',
							{
								parameters: _List_fromArray(
									['a']),
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							}),
							_Utils_Tuple2(
							'Step',
							{
								parameters: _List_fromArray(
									['state', 'a']),
								variants: $miniBill$elm_fast_dict$FastDict$fromList(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'Loop',
											_List_fromArray(
												[
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
													{name: 'state', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												])),
											_Utils_Tuple2(
											'Done',
											_List_fromArray(
												[
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
													{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												]))
										]))
							})
						])),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'andThen',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Bytes.Decode',
																name: 'Decoder'
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Bytes.Decode',
																name: 'Decoder'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Bytes.Decode',
																name: 'Decoder'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'bytes',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{_arguments: _List_Nil, moduleOrigin: 'Bytes', name: 'Bytes'}))
														]),
													moduleOrigin: 'Bytes.Decode',
													name: 'Decoder'
												}))
									}))),
							_Utils_Tuple2(
							'decode',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Bytes.Decode',
													name: 'Decoder'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Bytes', name: 'Bytes'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Maybe',
																name: 'Maybe'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'fail',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{
										_arguments: _List_fromArray(
											[
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
												{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
											]),
										moduleOrigin: 'Bytes.Decode',
										name: 'Decoder'
									}))),
							_Utils_Tuple2(
							'float32',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Bytes', name: 'Endianness'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
														]),
													moduleOrigin: 'Bytes.Decode',
													name: 'Decoder'
												}))
									}))),
							_Utils_Tuple2(
							'float64',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Bytes', name: 'Endianness'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
														]),
													moduleOrigin: 'Bytes.Decode',
													name: 'Decoder'
												}))
									}))),
							_Utils_Tuple2(
							'loop',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'state', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'state', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																						{
																							_arguments: _List_fromArray(
																								[
																									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																									{name: 'state', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																									{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																								]),
																							moduleOrigin: 'Bytes.Decode',
																							name: 'Step'
																						}))
																				]),
																			moduleOrigin: 'Bytes.Decode',
																			name: 'Decoder'
																		}))
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Bytes.Decode',
																name: 'Decoder'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Bytes.Decode',
																name: 'Decoder'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Bytes.Decode',
																name: 'Decoder'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map2',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Bytes.Decode',
																name: 'Decoder'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Bytes.Decode',
																			name: 'Decoder'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Bytes.Decode',
																			name: 'Decoder'
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map3',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Bytes.Decode',
																name: 'Decoder'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Bytes.Decode',
																			name: 'Decoder'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Bytes.Decode',
																						name: 'Decoder'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Bytes.Decode',
																						name: 'Decoder'
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map4',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																					}))
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Bytes.Decode',
																name: 'Decoder'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Bytes.Decode',
																			name: 'Decoder'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Bytes.Decode',
																						name: 'Decoder'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'Bytes.Decode',
																									name: 'Decoder'
																								})),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'Bytes.Decode',
																									name: 'Decoder'
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map5',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																								}))
																					}))
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Bytes.Decode',
																name: 'Decoder'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Bytes.Decode',
																			name: 'Decoder'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Bytes.Decode',
																						name: 'Decoder'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'Bytes.Decode',
																									name: 'Decoder'
																								})),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																											{
																												_arguments: _List_fromArray(
																													[
																														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																														{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																													]),
																												moduleOrigin: 'Bytes.Decode',
																												name: 'Decoder'
																											})),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																											{
																												_arguments: _List_fromArray(
																													[
																														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																														{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																													]),
																												moduleOrigin: 'Bytes.Decode',
																												name: 'Decoder'
																											}))
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'signedInt16',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Bytes', name: 'Endianness'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
														]),
													moduleOrigin: 'Bytes.Decode',
													name: 'Decoder'
												}))
									}))),
							_Utils_Tuple2(
							'signedInt32',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Bytes', name: 'Endianness'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
														]),
													moduleOrigin: 'Bytes.Decode',
													name: 'Decoder'
												}))
									}))),
							_Utils_Tuple2(
							'signedInt8',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{
										_arguments: _List_fromArray(
											[
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
													{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
											]),
										moduleOrigin: 'Bytes.Decode',
										name: 'Decoder'
									}))),
							_Utils_Tuple2(
							'string',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
														]),
													moduleOrigin: 'Bytes.Decode',
													name: 'Decoder'
												}))
									}))),
							_Utils_Tuple2(
							'succeed',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Bytes.Decode',
													name: 'Decoder'
												}))
									}))),
							_Utils_Tuple2(
							'unsignedInt16',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Bytes', name: 'Endianness'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
														]),
													moduleOrigin: 'Bytes.Decode',
													name: 'Decoder'
												}))
									}))),
							_Utils_Tuple2(
							'unsignedInt32',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Bytes', name: 'Endianness'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
														]),
													moduleOrigin: 'Bytes.Decode',
													name: 'Decoder'
												}))
									}))),
							_Utils_Tuple2(
							'unsignedInt8',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{
										_arguments: _List_fromArray(
											[
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
													{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
											]),
										moduleOrigin: 'Bytes.Decode',
										name: 'Decoder'
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			}),
			_Utils_Tuple2(
			'Bytes.Encode',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Encoder',
							{
								parameters: _List_Nil,
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							})
						])),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'bytes',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Bytes', name: 'Bytes'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Bytes.Encode', name: 'Encoder'}))
									}))),
							_Utils_Tuple2(
							'encode',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Bytes.Encode', name: 'Encoder'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Bytes', name: 'Bytes'}))
									}))),
							_Utils_Tuple2(
							'float32',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Bytes', name: 'Endianness'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Bytes.Encode', name: 'Encoder'}))
												}))
									}))),
							_Utils_Tuple2(
							'float64',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Bytes', name: 'Endianness'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Bytes.Encode', name: 'Encoder'}))
												}))
									}))),
							_Utils_Tuple2(
							'getStringWidth',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
									}))),
							_Utils_Tuple2(
							'sequence',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{_arguments: _List_Nil, moduleOrigin: 'Bytes.Encode', name: 'Encoder'}))
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Bytes.Encode', name: 'Encoder'}))
									}))),
							_Utils_Tuple2(
							'signedInt16',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Bytes', name: 'Endianness'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Bytes.Encode', name: 'Encoder'}))
												}))
									}))),
							_Utils_Tuple2(
							'signedInt32',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Bytes', name: 'Endianness'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Bytes.Encode', name: 'Encoder'}))
												}))
									}))),
							_Utils_Tuple2(
							'signedInt8',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Bytes.Encode', name: 'Encoder'}))
									}))),
							_Utils_Tuple2(
							'string',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Bytes.Encode', name: 'Encoder'}))
									}))),
							_Utils_Tuple2(
							'unsignedInt16',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Bytes', name: 'Endianness'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Bytes.Encode', name: 'Encoder'}))
												}))
									}))),
							_Utils_Tuple2(
							'unsignedInt32',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Bytes', name: 'Endianness'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Bytes.Encode', name: 'Encoder'}))
												}))
									}))),
							_Utils_Tuple2(
							'unsignedInt8',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Bytes.Encode', name: 'Encoder'}))
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			})
		]));
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord = function (a) {
	return {$: 'TypeRecord', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple = function (a) {
	return {$: 'TypeTuple', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit = {$: 'TypeUnit'};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$elmCoreTypesGeneratedFromDocsJson = $miniBill$elm_fast_dict$FastDict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'Array',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Array',
							{
								parameters: _List_fromArray(
									['a']),
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							})
						])),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'append',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Array',
													name: 'Array'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Array',
																name: 'Array'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Array',
																name: 'Array'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'empty',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{
										_arguments: _List_fromArray(
											[
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
												{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
											]),
										moduleOrigin: 'Array',
										name: 'Array'
									}))),
							_Utils_Tuple2(
							'filter',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Array',
																name: 'Array'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Array',
																name: 'Array'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'foldl',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Array',
																			name: 'Array'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												}))
									}))),
							_Utils_Tuple2(
							'foldr',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Array',
																			name: 'Array'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												}))
									}))),
							_Utils_Tuple2(
							'fromList',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Array',
													name: 'Array'
												}))
									}))),
							_Utils_Tuple2(
							'get',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Array',
																name: 'Array'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Maybe',
																name: 'Maybe'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'indexedMap',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Array',
																name: 'Array'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Array',
																name: 'Array'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'initialize',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Array',
																name: 'Array'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'isEmpty',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Array',
													name: 'Array'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
									}))),
							_Utils_Tuple2(
							'length',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Array',
													name: 'Array'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
									}))),
							_Utils_Tuple2(
							'map',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Array',
																name: 'Array'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Array',
																name: 'Array'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'push',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Array',
																name: 'Array'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Array',
																name: 'Array'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'repeat',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Array',
																name: 'Array'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'set',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Array',
																			name: 'Array'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Array',
																			name: 'Array'
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'slice',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Array',
																			name: 'Array'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Array',
																			name: 'Array'
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'toIndexedList',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Array',
													name: 'Array'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
																{
																	part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																			{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
																	part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																}))
														]),
													moduleOrigin: 'List',
													name: 'List'
												}))
									}))),
							_Utils_Tuple2(
							'toList',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Array',
													name: 'Array'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'List',
													name: 'List'
												}))
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			}),
			_Utils_Tuple2(
			'Basics',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Bool',
							{
								parameters: _List_Nil,
								variants: $miniBill$elm_fast_dict$FastDict$fromList(
									_List_fromArray(
										[
											_Utils_Tuple2('True', _List_Nil),
											_Utils_Tuple2('False', _List_Nil)
										]))
							}),
							_Utils_Tuple2(
							'Float',
							{
								parameters: _List_Nil,
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							}),
							_Utils_Tuple2(
							'Int',
							{
								parameters: _List_Nil,
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							}),
							_Utils_Tuple2(
							'Never',
							{
								parameters: _List_Nil,
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							}),
							_Utils_Tuple2(
							'Order',
							{
								parameters: _List_Nil,
								variants: $miniBill$elm_fast_dict$FastDict$fromList(
									_List_fromArray(
										[
											_Utils_Tuple2('LT', _List_Nil),
											_Utils_Tuple2('EQ', _List_Nil),
											_Utils_Tuple2('GT', _List_Nil)
										]))
							})
						])),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'abs',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'number', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'number', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
									}))),
							_Utils_Tuple2(
							'acos',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'always',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												}))
									}))),
							_Utils_Tuple2(
							'asin',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'atan',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'atan2',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
												}))
									}))),
							_Utils_Tuple2(
							'ceiling',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
									}))),
							_Utils_Tuple2(
							'clamp',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'number', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'number', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'number', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'number', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												}))
									}))),
							_Utils_Tuple2(
							'compare',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Order'}))
												}))
									}))),
							_Utils_Tuple2(
							'cos',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'degrees',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'e',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
							_Utils_Tuple2(
							'floor',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
									}))),
							_Utils_Tuple2(
							'fromPolar',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
												{
													part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
													part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
												{
													part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
													part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
												}))
									}))),
							_Utils_Tuple2(
							'identity',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
									}))),
							_Utils_Tuple2(
							'isInfinite',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
									}))),
							_Utils_Tuple2(
							'isNaN',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
									}))),
							_Utils_Tuple2(
							'logBase',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
												}))
									}))),
							_Utils_Tuple2(
							'max',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												}))
									}))),
							_Utils_Tuple2(
							'min',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												}))
									}))),
							_Utils_Tuple2(
							'modBy',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
												}))
									}))),
							_Utils_Tuple2(
							'negate',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'number', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'number', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
									}))),
							_Utils_Tuple2(
							'never',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Never'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
									}))),
							_Utils_Tuple2(
							'not',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
									}))),
							_Utils_Tuple2(
							'pi',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
							_Utils_Tuple2(
							'radians',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'remainderBy',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
												}))
									}))),
							_Utils_Tuple2(
							'round',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
									}))),
							_Utils_Tuple2(
							'sin',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'sqrt',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'tan',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'toFloat',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'toPolar',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
												{
													part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
													part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
												{
													part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
													part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
												}))
									}))),
							_Utils_Tuple2(
							'truncate',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
									}))),
							_Utils_Tuple2(
							'turns',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'xor',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
												}))
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			}),
			_Utils_Tuple2(
			'Bitwise',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'and',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
												}))
									}))),
							_Utils_Tuple2(
							'complement',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
									}))),
							_Utils_Tuple2(
							'or',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
												}))
									}))),
							_Utils_Tuple2(
							'shiftLeftBy',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
												}))
									}))),
							_Utils_Tuple2(
							'shiftRightBy',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
												}))
									}))),
							_Utils_Tuple2(
							'shiftRightZfBy',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
												}))
									}))),
							_Utils_Tuple2(
							'xor',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
												}))
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			}),
			_Utils_Tuple2(
			'Char',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Char',
							{
								parameters: _List_Nil,
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							})
						])),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'fromCode',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'}))
									}))),
							_Utils_Tuple2(
							'isAlpha',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
									}))),
							_Utils_Tuple2(
							'isAlphaNum',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
									}))),
							_Utils_Tuple2(
							'isDigit',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
									}))),
							_Utils_Tuple2(
							'isHexDigit',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
									}))),
							_Utils_Tuple2(
							'isLower',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
									}))),
							_Utils_Tuple2(
							'isOctDigit',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
									}))),
							_Utils_Tuple2(
							'isUpper',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
									}))),
							_Utils_Tuple2(
							'toCode',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
									}))),
							_Utils_Tuple2(
							'toLocaleLower',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'}))
									}))),
							_Utils_Tuple2(
							'toLocaleUpper',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'}))
									}))),
							_Utils_Tuple2(
							'toLower',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'}))
									}))),
							_Utils_Tuple2(
							'toUpper',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'}))
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			}),
			_Utils_Tuple2(
			'Debug',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'log',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												}))
									}))),
							_Utils_Tuple2(
							'toString',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
									}))),
							_Utils_Tuple2(
							'todo',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			}),
			_Utils_Tuple2(
			'Dict',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Dict',
							{
								parameters: _List_fromArray(
									['k', 'v']),
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							})
						])),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'diff',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Dict',
													name: 'Dict'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Dict',
																name: 'Dict'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Dict',
																name: 'Dict'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'empty',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{
										_arguments: _List_fromArray(
											[
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
												{name: 'k', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
												{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
											]),
										moduleOrigin: 'Dict',
										name: 'Dict'
									}))),
							_Utils_Tuple2(
							'filter',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Dict',
																name: 'Dict'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Dict',
																name: 'Dict'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'foldl',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'k', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'k', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Dict',
																			name: 'Dict'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												}))
									}))),
							_Utils_Tuple2(
							'foldr',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'k', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'k', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Dict',
																			name: 'Dict'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												}))
									}))),
							_Utils_Tuple2(
							'fromList',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
																{
																	part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																	part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																}))
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Dict',
													name: 'Dict'
												}))
									}))),
							_Utils_Tuple2(
							'get',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Dict',
																name: 'Dict'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Maybe',
																name: 'Maybe'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'insert',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Dict',
																			name: 'Dict'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Dict',
																			name: 'Dict'
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'intersect',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Dict',
													name: 'Dict'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Dict',
																name: 'Dict'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Dict',
																name: 'Dict'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'isEmpty',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'k', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Dict',
													name: 'Dict'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
									}))),
							_Utils_Tuple2(
							'keys',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'k', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Dict',
													name: 'Dict'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'k', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'List',
													name: 'List'
												}))
									}))),
							_Utils_Tuple2(
							'map',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'k', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'k', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Dict',
																name: 'Dict'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'k', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Dict',
																name: 'Dict'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'member',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Dict',
																name: 'Dict'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
												}))
									}))),
							_Utils_Tuple2(
							'merge',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																								}))
																					}))
																		}))
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																								}))
																					}))
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Dict',
																						name: 'Dict'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'Dict',
																									name: 'Dict'
																								})),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'partition',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Dict',
																name: 'Dict'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
															{
																part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Dict',
																			name: 'Dict'
																		})),
																part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Dict',
																			name: 'Dict'
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'remove',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Dict',
																name: 'Dict'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Dict',
																name: 'Dict'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'singleton',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Dict',
																name: 'Dict'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'size',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'k', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Dict',
													name: 'Dict'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
									}))),
							_Utils_Tuple2(
							'toList',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'k', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Dict',
													name: 'Dict'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
																{
																	part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'k', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																	part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																}))
														]),
													moduleOrigin: 'List',
													name: 'List'
												}))
									}))),
							_Utils_Tuple2(
							'union',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Dict',
													name: 'Dict'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Dict',
																name: 'Dict'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Dict',
																name: 'Dict'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'update',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Maybe',
																			name: 'Maybe'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Maybe',
																			name: 'Maybe'
																		}))
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Dict',
																			name: 'Dict'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Dict',
																			name: 'Dict'
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'values',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'k', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Dict',
													name: 'Dict'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'List',
													name: 'List'
												}))
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			}),
			_Utils_Tuple2(
			'List',
			{
				choiceTypes: A2(
					$miniBill$elm_fast_dict$FastDict$singleton,
					'List',
					{
						parameters: _List_fromArray(
							['a']),
						variants: $miniBill$elm_fast_dict$FastDict$empty
					}),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'all',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
												}))
									}))),
							_Utils_Tuple2(
							'any',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
												}))
									}))),
							_Utils_Tuple2(
							'append',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'concat',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{
																	_arguments: _List_fromArray(
																		[
																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																			{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		]),
																	moduleOrigin: 'List',
																	name: 'List'
																}))
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'List',
													name: 'List'
												}))
									}))),
							_Utils_Tuple2(
							'concatMap',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'drop',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'filter',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'filterMap',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Maybe',
																name: 'Maybe'
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'foldl',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'List',
																			name: 'List'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												}))
									}))),
							_Utils_Tuple2(
							'foldr',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'List',
																			name: 'List'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												}))
									}))),
							_Utils_Tuple2(
							'head',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Maybe',
													name: 'Maybe'
												}))
									}))),
							_Utils_Tuple2(
							'indexedMap',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'intersperse',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'isEmpty',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
									}))),
							_Utils_Tuple2(
							'length',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
									}))),
							_Utils_Tuple2(
							'map',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map2',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'List',
																			name: 'List'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'List',
																			name: 'List'
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map3',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'List',
																			name: 'List'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'List',
																						name: 'List'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'List',
																						name: 'List'
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map4',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																					}))
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'List',
																			name: 'List'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'List',
																						name: 'List'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'List',
																									name: 'List'
																								})),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'List',
																									name: 'List'
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map5',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																								}))
																					}))
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'List',
																			name: 'List'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'List',
																						name: 'List'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'List',
																									name: 'List'
																								})),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																											{
																												_arguments: _List_fromArray(
																													[
																														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																														{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																													]),
																												moduleOrigin: 'List',
																												name: 'List'
																											})),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																											{
																												_arguments: _List_fromArray(
																													[
																														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																														{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																													]),
																												moduleOrigin: 'List',
																												name: 'List'
																											}))
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'maximum',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Maybe',
													name: 'Maybe'
												}))
									}))),
							_Utils_Tuple2(
							'member',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
												}))
									}))),
							_Utils_Tuple2(
							'minimum',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Maybe',
													name: 'Maybe'
												}))
									}))),
							_Utils_Tuple2(
							'partition',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
															{
																part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'List',
																			name: 'List'
																		})),
																part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'List',
																			name: 'List'
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'product',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'number', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'number', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
									}))),
							_Utils_Tuple2(
							'range',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																			{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
																	]),
																moduleOrigin: 'List',
																name: 'List'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'repeat',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'reverse',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'List',
													name: 'List'
												}))
									}))),
							_Utils_Tuple2(
							'singleton',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'List',
													name: 'List'
												}))
									}))),
							_Utils_Tuple2(
							'sort',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'List',
													name: 'List'
												}))
									}))),
							_Utils_Tuple2(
							'sortBy',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'sortWith',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Order'}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'sum',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'number', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'number', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
									}))),
							_Utils_Tuple2(
							'tail',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{
																	_arguments: _List_fromArray(
																		[
																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																			{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		]),
																	moduleOrigin: 'List',
																	name: 'List'
																}))
														]),
													moduleOrigin: 'Maybe',
													name: 'Maybe'
												}))
									}))),
							_Utils_Tuple2(
							'take',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'unzip',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
																{
																	part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																	part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																}))
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
												{
													part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															}))
												}))
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			}),
			_Utils_Tuple2(
			'Maybe',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Maybe',
							{
								parameters: _List_fromArray(
									['a']),
								variants: $miniBill$elm_fast_dict$FastDict$fromList(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'Just',
											_List_fromArray(
												[
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
													{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												])),
											_Utils_Tuple2('Nothing', _List_Nil)
										]))
							})
						])),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'andThen',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Maybe',
																name: 'Maybe'
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Maybe',
																name: 'Maybe'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Maybe',
																name: 'Maybe'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Maybe',
																name: 'Maybe'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Maybe',
																name: 'Maybe'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map2',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Maybe',
																name: 'Maybe'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Maybe',
																			name: 'Maybe'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Maybe',
																			name: 'Maybe'
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map3',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Maybe',
																name: 'Maybe'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Maybe',
																			name: 'Maybe'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Maybe',
																						name: 'Maybe'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Maybe',
																						name: 'Maybe'
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map4',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																					}))
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Maybe',
																name: 'Maybe'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Maybe',
																			name: 'Maybe'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Maybe',
																						name: 'Maybe'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'Maybe',
																									name: 'Maybe'
																								})),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'Maybe',
																									name: 'Maybe'
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map5',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																								}))
																					}))
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Maybe',
																name: 'Maybe'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Maybe',
																			name: 'Maybe'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Maybe',
																						name: 'Maybe'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'Maybe',
																									name: 'Maybe'
																								})),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																											{
																												_arguments: _List_fromArray(
																													[
																														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																														{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																													]),
																												moduleOrigin: 'Maybe',
																												name: 'Maybe'
																											})),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																											{
																												_arguments: _List_fromArray(
																													[
																														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																														{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																													]),
																												moduleOrigin: 'Maybe',
																												name: 'Maybe'
																											}))
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'withDefault',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Maybe',
																name: 'Maybe'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												}))
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			}),
			_Utils_Tuple2(
			'Platform',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'ProcessId',
							{
								parameters: _List_Nil,
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							}),
							_Utils_Tuple2(
							'Program',
							{
								parameters: _List_fromArray(
									['flags', 'model', 'msg']),
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							}),
							_Utils_Tuple2(
							'Router',
							{
								parameters: _List_fromArray(
									['appMsg', 'selfMsg']),
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							}),
							_Utils_Tuple2(
							'Task',
							{
								parameters: _List_fromArray(
									['err', 'ok']),
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							})
						])),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'sendToApp',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Platform',
													name: 'Router'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit)
																	]),
																moduleOrigin: 'Platform',
																name: 'Task'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'sendToSelf',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Platform',
													name: 'Router'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit)
																	]),
																moduleOrigin: 'Platform',
																name: 'Task'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'worker',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(
												$miniBill$elm_fast_dict$FastDict$fromList(
													_List_fromArray(
														[
															_Utils_Tuple2(
															'init',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																	{
																		input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																			{name: 'flags', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
																				{
																					part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																						{name: 'model', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																					part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																							{
																								_arguments: _List_fromArray(
																									[
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																									]),
																								moduleOrigin: 'Platform.Cmd',
																								name: 'Cmd'
																							}))
																				}))
																	}))),
															_Utils_Tuple2(
															'subscriptions',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																	{
																		input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																			{name: 'model', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																				{
																					_arguments: _List_fromArray(
																						[
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																						]),
																					moduleOrigin: 'Platform.Sub',
																					name: 'Sub'
																				}))
																	}))),
															_Utils_Tuple2(
															'update',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																	{
																		input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																			{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																				{
																					input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																						{name: 'model', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																					output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
																							{
																								part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																									{name: 'model', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																								part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																										{
																											_arguments: _List_fromArray(
																												[
																													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																													{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																												]),
																											moduleOrigin: 'Platform.Cmd',
																											name: 'Cmd'
																										}))
																							}))
																				}))
																	})))
														])))),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'flags', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'model', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Platform',
													name: 'Program'
												}))
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			}),
			_Utils_Tuple2(
			'Platform.Cmd',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Cmd',
							{
								parameters: _List_fromArray(
									['msg']),
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							})
						])),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'batch',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{
																	_arguments: _List_fromArray(
																		[
																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																			{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		]),
																	moduleOrigin: 'Platform.Cmd',
																	name: 'Cmd'
																}))
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Platform.Cmd',
													name: 'Cmd'
												}))
									}))),
							_Utils_Tuple2(
							'map',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Platform.Cmd',
																name: 'Cmd'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Platform.Cmd',
																name: 'Cmd'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'none',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{
										_arguments: _List_fromArray(
											[
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
												{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
											]),
										moduleOrigin: 'Platform.Cmd',
										name: 'Cmd'
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			}),
			_Utils_Tuple2(
			'Platform.Sub',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Sub',
							{
								parameters: _List_fromArray(
									['msg']),
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							})
						])),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'batch',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{
																	_arguments: _List_fromArray(
																		[
																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																			{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		]),
																	moduleOrigin: 'Platform.Sub',
																	name: 'Sub'
																}))
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Platform.Sub',
													name: 'Sub'
												}))
									}))),
							_Utils_Tuple2(
							'map',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Platform.Sub',
																name: 'Sub'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Platform.Sub',
																name: 'Sub'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'none',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{
										_arguments: _List_fromArray(
											[
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
												{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
											]),
										moduleOrigin: 'Platform.Sub',
										name: 'Sub'
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			}),
			_Utils_Tuple2(
			'Process',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'kill',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Process', name: 'Id'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit)
														]),
													moduleOrigin: 'Task',
													name: 'Task'
												}))
									}))),
							_Utils_Tuple2(
							'sleep',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit)
														]),
													moduleOrigin: 'Task',
													name: 'Task'
												}))
									}))),
							_Utils_Tuple2(
							'spawn',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Task',
													name: 'Task'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'y', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{_arguments: _List_Nil, moduleOrigin: 'Process', name: 'Id'}))
														]),
													moduleOrigin: 'Task',
													name: 'Task'
												}))
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Id',
							{
								parameters: _List_Nil,
								recordFieldOrder: $elm$core$Maybe$Nothing,
								type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
										{_arguments: _List_Nil, moduleOrigin: 'Platform', name: 'ProcessId'}))
							})
						]))
			}),
			_Utils_Tuple2(
			'Result',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Result',
							{
								parameters: _List_fromArray(
									['error', 'value']),
								variants: $miniBill$elm_fast_dict$FastDict$fromList(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'Ok',
											_List_fromArray(
												[
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
													{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												])),
											_Utils_Tuple2(
											'Err',
											_List_fromArray(
												[
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
													{name: 'error', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												]))
										]))
							})
						])),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'andThen',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Result',
																name: 'Result'
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Result',
																name: 'Result'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Result',
																name: 'Result'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'fromMaybe',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Maybe',
																name: 'Maybe'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Result',
																name: 'Result'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Result',
																name: 'Result'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Result',
																name: 'Result'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map2',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Result',
																name: 'Result'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Result',
																			name: 'Result'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Result',
																			name: 'Result'
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map3',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Result',
																name: 'Result'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Result',
																			name: 'Result'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Result',
																						name: 'Result'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Result',
																						name: 'Result'
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map4',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																					}))
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Result',
																name: 'Result'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Result',
																			name: 'Result'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Result',
																						name: 'Result'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'Result',
																									name: 'Result'
																								})),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'Result',
																									name: 'Result'
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map5',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																								}))
																					}))
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Result',
																name: 'Result'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Result',
																			name: 'Result'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Result',
																						name: 'Result'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'Result',
																									name: 'Result'
																								})),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																											{
																												_arguments: _List_fromArray(
																													[
																														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																														{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																														{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																													]),
																												moduleOrigin: 'Result',
																												name: 'Result'
																											})),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																											{
																												_arguments: _List_fromArray(
																													[
																														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																														{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																														{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																													]),
																												moduleOrigin: 'Result',
																												name: 'Result'
																											}))
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'mapError',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'y', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Result',
																name: 'Result'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'y', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Result',
																name: 'Result'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'toMaybe',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Result',
													name: 'Result'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Maybe',
													name: 'Maybe'
												}))
									}))),
							_Utils_Tuple2(
							'withDefault',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Result',
																name: 'Result'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												}))
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			}),
			_Utils_Tuple2(
			'Set',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Set',
							{
								parameters: _List_fromArray(
									['t']),
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							})
						])),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'diff',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Set',
													name: 'Set'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Set',
																name: 'Set'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Set',
																name: 'Set'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'empty',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{
										_arguments: _List_fromArray(
											[
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
												{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
											]),
										moduleOrigin: 'Set',
										name: 'Set'
									}))),
							_Utils_Tuple2(
							'filter',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Set',
																name: 'Set'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Set',
																name: 'Set'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'foldl',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Set',
																			name: 'Set'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												}))
									}))),
							_Utils_Tuple2(
							'foldr',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Set',
																			name: 'Set'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												}))
									}))),
							_Utils_Tuple2(
							'fromList',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Set',
													name: 'Set'
												}))
									}))),
							_Utils_Tuple2(
							'insert',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Set',
																name: 'Set'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Set',
																name: 'Set'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'intersect',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Set',
													name: 'Set'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Set',
																name: 'Set'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Set',
																name: 'Set'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'isEmpty',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Set',
													name: 'Set'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
									}))),
							_Utils_Tuple2(
							'map',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'comparable2', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Set',
																name: 'Set'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable2', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Set',
																name: 'Set'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'member',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Set',
																name: 'Set'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
												}))
									}))),
							_Utils_Tuple2(
							'partition',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Set',
																name: 'Set'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
															{
																part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Set',
																			name: 'Set'
																		})),
																part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Set',
																			name: 'Set'
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'remove',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Set',
																name: 'Set'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Set',
																name: 'Set'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'singleton',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Set',
													name: 'Set'
												}))
									}))),
							_Utils_Tuple2(
							'size',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Set',
													name: 'Set'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
									}))),
							_Utils_Tuple2(
							'toList',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Set',
													name: 'Set'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'List',
													name: 'List'
												}))
									}))),
							_Utils_Tuple2(
							'union',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Set',
													name: 'Set'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Set',
																name: 'Set'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'comparable', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Set',
																name: 'Set'
															}))
												}))
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			}),
			_Utils_Tuple2(
			'String',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'String',
							{
								parameters: _List_Nil,
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							})
						])),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'all',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
												}))
									}))),
							_Utils_Tuple2(
							'any',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
												}))
									}))),
							_Utils_Tuple2(
							'append',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
												}))
									}))),
							_Utils_Tuple2(
							'concat',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
									}))),
							_Utils_Tuple2(
							'cons',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
												}))
									}))),
							_Utils_Tuple2(
							'contains',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
												}))
									}))),
							_Utils_Tuple2(
							'dropLeft',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
												}))
									}))),
							_Utils_Tuple2(
							'dropRight',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
												}))
									}))),
							_Utils_Tuple2(
							'endsWith',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
												}))
									}))),
							_Utils_Tuple2(
							'filter',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
												}))
									}))),
							_Utils_Tuple2(
							'foldl',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												}))
									}))),
							_Utils_Tuple2(
							'foldr',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												}))
									}))),
							_Utils_Tuple2(
							'fromChar',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
									}))),
							_Utils_Tuple2(
							'fromFloat',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
									}))),
							_Utils_Tuple2(
							'fromInt',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
									}))),
							_Utils_Tuple2(
							'fromList',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'}))
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
									}))),
							_Utils_Tuple2(
							'indexes',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																			{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
																	]),
																moduleOrigin: 'List',
																name: 'List'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'indices',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																			{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
																	]),
																moduleOrigin: 'List',
																name: 'List'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'isEmpty',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
									}))),
							_Utils_Tuple2(
							'join',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																			{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
												}))
									}))),
							_Utils_Tuple2(
							'left',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
												}))
									}))),
							_Utils_Tuple2(
							'length',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
									}))),
							_Utils_Tuple2(
							'lines',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
														]),
													moduleOrigin: 'List',
													name: 'List'
												}))
									}))),
							_Utils_Tuple2(
							'map',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
												}))
									}))),
							_Utils_Tuple2(
							'pad',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'padLeft',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'padRight',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'repeat',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
												}))
									}))),
							_Utils_Tuple2(
							'replace',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'reverse',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
									}))),
							_Utils_Tuple2(
							'right',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
												}))
									}))),
							_Utils_Tuple2(
							'slice',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'split',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																			{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
																	]),
																moduleOrigin: 'List',
																name: 'List'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'startsWith',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
												}))
									}))),
							_Utils_Tuple2(
							'toFloat',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
														]),
													moduleOrigin: 'Maybe',
													name: 'Maybe'
												}))
									}))),
							_Utils_Tuple2(
							'toInt',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
														]),
													moduleOrigin: 'Maybe',
													name: 'Maybe'
												}))
									}))),
							_Utils_Tuple2(
							'toList',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'}))
														]),
													moduleOrigin: 'List',
													name: 'List'
												}))
									}))),
							_Utils_Tuple2(
							'toLower',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
									}))),
							_Utils_Tuple2(
							'toUpper',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
									}))),
							_Utils_Tuple2(
							'trim',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
									}))),
							_Utils_Tuple2(
							'trimLeft',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
									}))),
							_Utils_Tuple2(
							'trimRight',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
									}))),
							_Utils_Tuple2(
							'uncons',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
																{
																	part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																			{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'})),
																	part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																			{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
																}))
														]),
													moduleOrigin: 'Maybe',
													name: 'Maybe'
												}))
									}))),
							_Utils_Tuple2(
							'words',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
														]),
													moduleOrigin: 'List',
													name: 'List'
												}))
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			}),
			_Utils_Tuple2(
			'Task',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'andThen',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Task',
																name: 'Task'
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Task',
																name: 'Task'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Task',
																name: 'Task'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'attempt',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Result',
																name: 'Result'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Task',
																name: 'Task'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Platform.Cmd',
																name: 'Cmd'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'fail',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Task',
													name: 'Task'
												}))
									}))),
							_Utils_Tuple2(
							'map',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Task',
																name: 'Task'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Task',
																name: 'Task'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map2',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Task',
																name: 'Task'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Task',
																			name: 'Task'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Task',
																			name: 'Task'
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map3',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Task',
																name: 'Task'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Task',
																			name: 'Task'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Task',
																						name: 'Task'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Task',
																						name: 'Task'
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map4',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																					}))
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Task',
																name: 'Task'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Task',
																			name: 'Task'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Task',
																						name: 'Task'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'Task',
																									name: 'Task'
																								})),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'Task',
																									name: 'Task'
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map5',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																								}))
																					}))
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Task',
																name: 'Task'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Task',
																			name: 'Task'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Task',
																						name: 'Task'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'Task',
																									name: 'Task'
																								})),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																											{
																												_arguments: _List_fromArray(
																													[
																														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																														{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																														{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																													]),
																												moduleOrigin: 'Task',
																												name: 'Task'
																											})),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																											{
																												_arguments: _List_fromArray(
																													[
																														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																														{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																														{name: 'result', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																													]),
																												moduleOrigin: 'Task',
																												name: 'Task'
																											}))
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'mapError',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'y', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Task',
																name: 'Task'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'y', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Task',
																name: 'Task'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'onError',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'y', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Task',
																name: 'Task'
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Task',
																name: 'Task'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'y', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Task',
																name: 'Task'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'perform',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																			{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Never'})),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Task',
																name: 'Task'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Platform.Cmd',
																name: 'Cmd'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'sequence',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{
																	_arguments: _List_fromArray(
																		[
																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																			{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																			{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		]),
																	moduleOrigin: 'Task',
																	name: 'Task'
																}))
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{
																	_arguments: _List_fromArray(
																		[
																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																			{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		]),
																	moduleOrigin: 'List',
																	name: 'List'
																}))
														]),
													moduleOrigin: 'Task',
													name: 'Task'
												}))
									}))),
							_Utils_Tuple2(
							'succeed',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Task',
													name: 'Task'
												}))
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Task',
							{
								parameters: _List_fromArray(
									['x', 'a']),
								recordFieldOrder: $elm$core$Maybe$Nothing,
								type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
										{
											_arguments: _List_fromArray(
												[
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
													{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
													{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												]),
											moduleOrigin: 'Platform',
											name: 'Task'
										}))
							})
						]))
			}),
			_Utils_Tuple2(
			'Tuple',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'first',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
												{
													part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
									}))),
							_Utils_Tuple2(
							'mapBoth',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'y', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
																		{
																			part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
																		{
																			part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'y', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'mapFirst',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
															{
																part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
															{
																part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												}))
									}))),
							_Utils_Tuple2(
							'mapSecond',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'y', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
															{
																part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
															{
																part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'y', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												}))
									}))),
							_Utils_Tuple2(
							'pair',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
															{
																part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												}))
									}))),
							_Utils_Tuple2(
							'second',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
												{
													part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			})
		]));
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$elmCoreTypes = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$elmCoreTypesGeneratedFromDocsJson;
var $author$project$ElmSyntaxToRust$elmExplorationsLinearAlgebraTypes = $miniBill$elm_fast_dict$FastDict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'Math.Matrix4',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Mat4',
							{
								parameters: _List_Nil,
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							})
						])),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'fromRecord',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(
												$miniBill$elm_fast_dict$FastDict$fromList(
													_List_fromArray(
														[
															_Utils_Tuple2(
															'm11',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm12',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm13',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm14',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm21',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm22',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm23',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm24',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm31',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm32',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm33',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm34',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm41',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm42',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm43',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm44',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})))
														])))),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'}))
									}))),
							_Utils_Tuple2(
							'identity',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'}))),
							_Utils_Tuple2(
							'inverse',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'}))
														]),
													moduleOrigin: 'Maybe',
													name: 'Maybe'
												}))
									}))),
							_Utils_Tuple2(
							'inverseOrthonormal',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'}))
									}))),
							_Utils_Tuple2(
							'makeBasis',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'makeFrustum',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																											{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																											{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'}))
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'makeLookAt',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'makeOrtho',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																											{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																											{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'}))
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'makeOrtho2D',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'makePerspective',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'makeRotate',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'}))
												}))
									}))),
							_Utils_Tuple2(
							'makeScale',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'}))
									}))),
							_Utils_Tuple2(
							'makeScale3',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'makeTranslate',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'}))
									}))),
							_Utils_Tuple2(
							'makeTranslate3',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'mul',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'}))
												}))
									}))),
							_Utils_Tuple2(
							'mulAffine',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'}))
												}))
									}))),
							_Utils_Tuple2(
							'rotate',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'scale',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'}))
												}))
									}))),
							_Utils_Tuple2(
							'scale3',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'toRecord',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(
												$miniBill$elm_fast_dict$FastDict$fromList(
													_List_fromArray(
														[
															_Utils_Tuple2(
															'm11',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm12',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm13',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm14',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm21',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm22',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm23',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm24',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm31',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm32',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm33',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm34',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm41',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm42',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm43',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'm44',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})))
														]))))
									}))),
							_Utils_Tuple2(
							'transform',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'}))
												}))
									}))),
							_Utils_Tuple2(
							'translate',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'}))
												}))
									}))),
							_Utils_Tuple2(
							'translate3',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'transpose',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Matrix4', name: 'Mat4'}))
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			}),
			_Utils_Tuple2(
			'Math.Vector2',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Vec2',
							{
								parameters: _List_Nil,
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							})
						])),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'add',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'}))
												}))
									}))),
							_Utils_Tuple2(
							'direction',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'}))
												}))
									}))),
							_Utils_Tuple2(
							'distance',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
												}))
									}))),
							_Utils_Tuple2(
							'distanceSquared',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
												}))
									}))),
							_Utils_Tuple2(
							'dot',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
												}))
									}))),
							_Utils_Tuple2(
							'fromRecord',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(
												$miniBill$elm_fast_dict$FastDict$fromList(
													_List_fromArray(
														[
															_Utils_Tuple2(
															'x',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'y',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})))
														])))),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'}))
									}))),
							_Utils_Tuple2(
							'getX',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'getY',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'length',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'lengthSquared',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'negate',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'}))
									}))),
							_Utils_Tuple2(
							'normalize',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'}))
									}))),
							_Utils_Tuple2(
							'scale',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'}))
												}))
									}))),
							_Utils_Tuple2(
							'setX',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'}))
												}))
									}))),
							_Utils_Tuple2(
							'setY',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'}))
												}))
									}))),
							_Utils_Tuple2(
							'sub',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'}))
												}))
									}))),
							_Utils_Tuple2(
							'toRecord',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(
												$miniBill$elm_fast_dict$FastDict$fromList(
													_List_fromArray(
														[
															_Utils_Tuple2(
															'x',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'y',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})))
														]))))
									}))),
							_Utils_Tuple2(
							'vec2',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector2', name: 'Vec2'}))
												}))
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			}),
			_Utils_Tuple2(
			'Math.Vector3',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Vec3',
							{
								parameters: _List_Nil,
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							})
						])),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'add',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'}))
												}))
									}))),
							_Utils_Tuple2(
							'cross',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'}))
												}))
									}))),
							_Utils_Tuple2(
							'direction',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'}))
												}))
									}))),
							_Utils_Tuple2(
							'distance',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
												}))
									}))),
							_Utils_Tuple2(
							'distanceSquared',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
												}))
									}))),
							_Utils_Tuple2(
							'dot',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
												}))
									}))),
							_Utils_Tuple2(
							'fromRecord',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(
												$miniBill$elm_fast_dict$FastDict$fromList(
													_List_fromArray(
														[
															_Utils_Tuple2(
															'x',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'y',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'z',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})))
														])))),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'}))
									}))),
							_Utils_Tuple2(
							'getX',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'getY',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'getZ',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'i',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'}))),
							_Utils_Tuple2(
							'j',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'}))),
							_Utils_Tuple2(
							'k',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'}))),
							_Utils_Tuple2(
							'length',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'lengthSquared',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'negate',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'}))
									}))),
							_Utils_Tuple2(
							'normalize',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'}))
									}))),
							_Utils_Tuple2(
							'scale',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'}))
												}))
									}))),
							_Utils_Tuple2(
							'setX',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'}))
												}))
									}))),
							_Utils_Tuple2(
							'setY',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'}))
												}))
									}))),
							_Utils_Tuple2(
							'setZ',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'}))
												}))
									}))),
							_Utils_Tuple2(
							'sub',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'}))
												}))
									}))),
							_Utils_Tuple2(
							'toRecord',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(
												$miniBill$elm_fast_dict$FastDict$fromList(
													_List_fromArray(
														[
															_Utils_Tuple2(
															'x',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'y',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'z',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})))
														]))))
									}))),
							_Utils_Tuple2(
							'vec3',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Math.Vector3', name: 'Vec3'}))
															}))
												}))
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			}),
			_Utils_Tuple2(
			'Math.Vector4',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Vec4',
							{
								parameters: _List_Nil,
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							})
						])),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'add',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'}))
												}))
									}))),
							_Utils_Tuple2(
							'direction',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'}))
												}))
									}))),
							_Utils_Tuple2(
							'distance',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
												}))
									}))),
							_Utils_Tuple2(
							'distanceSquared',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
												}))
									}))),
							_Utils_Tuple2(
							'dot',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
												}))
									}))),
							_Utils_Tuple2(
							'fromRecord',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(
												$miniBill$elm_fast_dict$FastDict$fromList(
													_List_fromArray(
														[
															_Utils_Tuple2(
															'w',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'x',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'y',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'z',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})))
														])))),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'}))
									}))),
							_Utils_Tuple2(
							'getW',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'getX',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'getY',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'getZ',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'length',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'lengthSquared',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
									}))),
							_Utils_Tuple2(
							'negate',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'}))
									}))),
							_Utils_Tuple2(
							'normalize',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'}))
									}))),
							_Utils_Tuple2(
							'scale',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'}))
												}))
									}))),
							_Utils_Tuple2(
							'setW',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'}))
												}))
									}))),
							_Utils_Tuple2(
							'setX',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'}))
												}))
									}))),
							_Utils_Tuple2(
							'setY',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'}))
												}))
									}))),
							_Utils_Tuple2(
							'setZ',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'}))
												}))
									}))),
							_Utils_Tuple2(
							'sub',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'}))
												}))
									}))),
							_Utils_Tuple2(
							'toRecord',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(
												$miniBill$elm_fast_dict$FastDict$fromList(
													_List_fromArray(
														[
															_Utils_Tuple2(
															'w',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'x',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'y',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))),
															_Utils_Tuple2(
															'z',
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})))
														]))))
									}))),
							_Utils_Tuple2(
							'vec4',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{_arguments: _List_Nil, moduleOrigin: 'Math.Vector4', name: 'Vec4'}))
																		}))
															}))
												}))
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			})
		]));
var $author$project$ElmSyntaxToRust$elmJsonTypes = $miniBill$elm_fast_dict$FastDict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'Json.Decode',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Decoder',
							{
								parameters: _List_fromArray(
									['a']),
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							}),
							_Utils_Tuple2(
							'Error',
							{
								parameters: _List_Nil,
								variants: $miniBill$elm_fast_dict$FastDict$fromList(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'Field',
											_List_fromArray(
												[
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
														{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
														{_arguments: _List_Nil, moduleOrigin: 'Json.Decode', name: 'Error'}))
												])),
											_Utils_Tuple2(
											'Index',
											_List_fromArray(
												[
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
														{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
														{_arguments: _List_Nil, moduleOrigin: 'Json.Decode', name: 'Error'}))
												])),
											_Utils_Tuple2(
											'OneOf',
											_List_fromArray(
												[
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
														{
															_arguments: _List_fromArray(
																[
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Json.Decode', name: 'Error'}))
																]),
															moduleOrigin: 'List',
															name: 'List'
														}))
												])),
											_Utils_Tuple2(
											'Failure',
											_List_fromArray(
												[
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
														{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
														{_arguments: _List_Nil, moduleOrigin: 'Json.Decode', name: 'Value'}))
												]))
										]))
							})
						])),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'andThen',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Json.Decode',
																name: 'Decoder'
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Json.Decode',
																name: 'Decoder'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Json.Decode',
																name: 'Decoder'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'array',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Json.Decode',
													name: 'Decoder'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{
																	_arguments: _List_fromArray(
																		[
																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																			{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		]),
																	moduleOrigin: 'Array',
																	name: 'Array'
																}))
														]),
													moduleOrigin: 'Json.Decode',
													name: 'Decoder'
												}))
									}))),
							_Utils_Tuple2(
							'at',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Json.Decode',
																name: 'Decoder'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Json.Decode',
																name: 'Decoder'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'bool',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{
										_arguments: _List_fromArray(
											[
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
													{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
											]),
										moduleOrigin: 'Json.Decode',
										name: 'Decoder'
									}))),
							_Utils_Tuple2(
							'decodeString',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Json.Decode',
													name: 'Decoder'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																			{_arguments: _List_Nil, moduleOrigin: 'Json.Decode', name: 'Error'})),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Result',
																name: 'Result'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'decodeValue',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Json.Decode',
													name: 'Decoder'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Json.Decode', name: 'Value'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																			{_arguments: _List_Nil, moduleOrigin: 'Json.Decode', name: 'Error'})),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Result',
																name: 'Result'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'dict',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Json.Decode',
													name: 'Decoder'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{
																	_arguments: _List_fromArray(
																		[
																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																				{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																			{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		]),
																	moduleOrigin: 'Dict',
																	name: 'Dict'
																}))
														]),
													moduleOrigin: 'Json.Decode',
													name: 'Decoder'
												}))
									}))),
							_Utils_Tuple2(
							'errorToString',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Json.Decode', name: 'Error'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
									}))),
							_Utils_Tuple2(
							'fail',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Json.Decode',
													name: 'Decoder'
												}))
									}))),
							_Utils_Tuple2(
							'field',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Json.Decode',
																name: 'Decoder'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Json.Decode',
																name: 'Decoder'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'float',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{
										_arguments: _List_fromArray(
											[
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
													{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
											]),
										moduleOrigin: 'Json.Decode',
										name: 'Decoder'
									}))),
							_Utils_Tuple2(
							'index',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Json.Decode',
																name: 'Decoder'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Json.Decode',
																name: 'Decoder'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'int',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{
										_arguments: _List_fromArray(
											[
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
													{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
											]),
										moduleOrigin: 'Json.Decode',
										name: 'Decoder'
									}))),
							_Utils_Tuple2(
							'keyValuePairs',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Json.Decode',
													name: 'Decoder'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{
																	_arguments: _List_fromArray(
																		[
																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
																				{
																					part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																							{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
																					part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																						{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				}))
																		]),
																	moduleOrigin: 'List',
																	name: 'List'
																}))
														]),
													moduleOrigin: 'Json.Decode',
													name: 'Decoder'
												}))
									}))),
							_Utils_Tuple2(
							'lazy',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Json.Decode',
																name: 'Decoder'
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Json.Decode',
													name: 'Decoder'
												}))
									}))),
							_Utils_Tuple2(
							'list',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Json.Decode',
													name: 'Decoder'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{
																	_arguments: _List_fromArray(
																		[
																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																			{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		]),
																	moduleOrigin: 'List',
																	name: 'List'
																}))
														]),
													moduleOrigin: 'Json.Decode',
													name: 'Decoder'
												}))
									}))),
							_Utils_Tuple2(
							'map',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Json.Decode',
																name: 'Decoder'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Json.Decode',
																name: 'Decoder'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map2',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Json.Decode',
																name: 'Decoder'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Json.Decode',
																			name: 'Decoder'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Json.Decode',
																			name: 'Decoder'
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map3',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Json.Decode',
																name: 'Decoder'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Json.Decode',
																			name: 'Decoder'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Json.Decode',
																						name: 'Decoder'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Json.Decode',
																						name: 'Decoder'
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map4',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																					}))
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Json.Decode',
																name: 'Decoder'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Json.Decode',
																			name: 'Decoder'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Json.Decode',
																						name: 'Decoder'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'Json.Decode',
																									name: 'Decoder'
																								})),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'Json.Decode',
																									name: 'Decoder'
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map5',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																								}))
																					}))
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Json.Decode',
																name: 'Decoder'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Json.Decode',
																			name: 'Decoder'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Json.Decode',
																						name: 'Decoder'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'Json.Decode',
																									name: 'Decoder'
																								})),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																											{
																												_arguments: _List_fromArray(
																													[
																														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																														{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																													]),
																												moduleOrigin: 'Json.Decode',
																												name: 'Decoder'
																											})),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																											{
																												_arguments: _List_fromArray(
																													[
																														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																														{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																													]),
																												moduleOrigin: 'Json.Decode',
																												name: 'Decoder'
																											}))
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map6',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																											{
																												input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																													{name: 'f', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																												output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																													{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																											}))
																								}))
																					}))
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Json.Decode',
																name: 'Decoder'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Json.Decode',
																			name: 'Decoder'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Json.Decode',
																						name: 'Decoder'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'Json.Decode',
																									name: 'Decoder'
																								})),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																											{
																												_arguments: _List_fromArray(
																													[
																														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																														{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																													]),
																												moduleOrigin: 'Json.Decode',
																												name: 'Decoder'
																											})),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																											{
																												input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																														{
																															_arguments: _List_fromArray(
																																[
																																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																	{name: 'f', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																																]),
																															moduleOrigin: 'Json.Decode',
																															name: 'Decoder'
																														})),
																												output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																														{
																															_arguments: _List_fromArray(
																																[
																																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																	{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																																]),
																															moduleOrigin: 'Json.Decode',
																															name: 'Decoder'
																														}))
																											}))
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map7',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																											{
																												input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																													{name: 'f', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																												output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																														{
																															input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																{name: 'g', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																															output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																														}))
																											}))
																								}))
																					}))
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Json.Decode',
																name: 'Decoder'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Json.Decode',
																			name: 'Decoder'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Json.Decode',
																						name: 'Decoder'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'Json.Decode',
																									name: 'Decoder'
																								})),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																											{
																												_arguments: _List_fromArray(
																													[
																														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																														{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																													]),
																												moduleOrigin: 'Json.Decode',
																												name: 'Decoder'
																											})),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																											{
																												input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																														{
																															_arguments: _List_fromArray(
																																[
																																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																	{name: 'f', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																																]),
																															moduleOrigin: 'Json.Decode',
																															name: 'Decoder'
																														})),
																												output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																														{
																															input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																																	{
																																		_arguments: _List_fromArray(
																																			[
																																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																				{name: 'g', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																																			]),
																																		moduleOrigin: 'Json.Decode',
																																		name: 'Decoder'
																																	})),
																															output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																																	{
																																		_arguments: _List_fromArray(
																																			[
																																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																				{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																																			]),
																																		moduleOrigin: 'Json.Decode',
																																		name: 'Decoder'
																																	}))
																														}))
																											}))
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map8',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																											{
																												input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																													{name: 'f', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																												output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																														{
																															input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																{name: 'g', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																															output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																																	{
																																		input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																			{name: 'h', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																																		output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																			{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																																	}))
																														}))
																											}))
																								}))
																					}))
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Json.Decode',
																name: 'Decoder'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Json.Decode',
																			name: 'Decoder'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Json.Decode',
																						name: 'Decoder'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'Json.Decode',
																									name: 'Decoder'
																								})),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																											{
																												_arguments: _List_fromArray(
																													[
																														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																														{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																													]),
																												moduleOrigin: 'Json.Decode',
																												name: 'Decoder'
																											})),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																											{
																												input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																														{
																															_arguments: _List_fromArray(
																																[
																																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																	{name: 'f', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																																]),
																															moduleOrigin: 'Json.Decode',
																															name: 'Decoder'
																														})),
																												output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																														{
																															input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																																	{
																																		_arguments: _List_fromArray(
																																			[
																																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																				{name: 'g', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																																			]),
																																		moduleOrigin: 'Json.Decode',
																																		name: 'Decoder'
																																	})),
																															output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																																	{
																																		input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																																				{
																																					_arguments: _List_fromArray(
																																						[
																																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																							{name: 'h', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																																						]),
																																					moduleOrigin: 'Json.Decode',
																																					name: 'Decoder'
																																				})),
																																		output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																																				{
																																					_arguments: _List_fromArray(
																																						[
																																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																							{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																																						]),
																																					moduleOrigin: 'Json.Decode',
																																					name: 'Decoder'
																																				}))
																																	}))
																														}))
																											}))
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'maybe',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Json.Decode',
													name: 'Decoder'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{
																	_arguments: _List_fromArray(
																		[
																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																			{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		]),
																	moduleOrigin: 'Maybe',
																	name: 'Maybe'
																}))
														]),
													moduleOrigin: 'Json.Decode',
													name: 'Decoder'
												}))
									}))),
							_Utils_Tuple2(
							'null',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Json.Decode',
													name: 'Decoder'
												}))
									}))),
							_Utils_Tuple2(
							'nullable',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Json.Decode',
													name: 'Decoder'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{
																	_arguments: _List_fromArray(
																		[
																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																			{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		]),
																	moduleOrigin: 'Maybe',
																	name: 'Maybe'
																}))
														]),
													moduleOrigin: 'Json.Decode',
													name: 'Decoder'
												}))
									}))),
							_Utils_Tuple2(
							'oneOf',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{
																	_arguments: _List_fromArray(
																		[
																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																			{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		]),
																	moduleOrigin: 'Json.Decode',
																	name: 'Decoder'
																}))
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Json.Decode',
													name: 'Decoder'
												}))
									}))),
							_Utils_Tuple2(
							'oneOrMore',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'List',
																			name: 'List'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Json.Decode',
																name: 'Decoder'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'value', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Json.Decode',
																name: 'Decoder'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'string',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{
										_arguments: _List_fromArray(
											[
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
													{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
											]),
										moduleOrigin: 'Json.Decode',
										name: 'Decoder'
									}))),
							_Utils_Tuple2(
							'succeed',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Json.Decode',
													name: 'Decoder'
												}))
									}))),
							_Utils_Tuple2(
							'value',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{
										_arguments: _List_fromArray(
											[
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
													{_arguments: _List_Nil, moduleOrigin: 'Json.Decode', name: 'Value'}))
											]),
										moduleOrigin: 'Json.Decode',
										name: 'Decoder'
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Value',
							{
								parameters: _List_Nil,
								recordFieldOrder: $elm$core$Maybe$Nothing,
								type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
										{_arguments: _List_Nil, moduleOrigin: 'Json.Encode', name: 'Value'}))
							})
						]))
			}),
			_Utils_Tuple2(
			'Json.Encode',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Value',
							{
								parameters: _List_Nil,
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							})
						])),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'array',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Json.Encode', name: 'Value'}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Array',
																name: 'Array'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Json.Encode', name: 'Value'}))
												}))
									}))),
							_Utils_Tuple2(
							'bool',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Json.Encode', name: 'Value'}))
									}))),
							_Utils_Tuple2(
							'dict',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'k', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Json.Encode', name: 'Value'}))
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'k', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'v', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Dict',
																			name: 'Dict'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Json.Encode', name: 'Value'}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'encode',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Json.Encode', name: 'Value'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
												}))
									}))),
							_Utils_Tuple2(
							'float',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Json.Encode', name: 'Value'}))
									}))),
							_Utils_Tuple2(
							'int',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Json.Encode', name: 'Value'}))
									}))),
							_Utils_Tuple2(
							'list',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Json.Encode', name: 'Value'}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Json.Encode', name: 'Value'}))
												}))
									}))),
							_Utils_Tuple2(
							'null',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{_arguments: _List_Nil, moduleOrigin: 'Json.Encode', name: 'Value'}))),
							_Utils_Tuple2(
							'object',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
																{
																	part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																			{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
																	part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																			{_arguments: _List_Nil, moduleOrigin: 'Json.Encode', name: 'Value'}))
																}))
														]),
													moduleOrigin: 'List',
													name: 'List'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Json.Encode', name: 'Value'}))
									}))),
							_Utils_Tuple2(
							'set',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Json.Encode', name: 'Value'}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Set',
																name: 'Set'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Json.Encode', name: 'Value'}))
												}))
									}))),
							_Utils_Tuple2(
							'string',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Json.Encode', name: 'Value'}))
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			})
		]));
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple = function (a) {
	return {$: 'TypeTriple', a: a};
};
var $author$project$ElmSyntaxToRust$typeNotVariableBasicsInt = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
	{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'});
var $author$project$ElmSyntaxToRust$inferredTypeBasicsInt = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($author$project$ElmSyntaxToRust$typeNotVariableBasicsInt);
var $author$project$ElmSyntaxToRust$inferredTypeFunctionCreate = F2(
	function (inputs, output) {
		if (!inputs.b) {
			return output;
		} else {
			var input = inputs.a;
			var remainingInputs = inputs.b;
			return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
					{
						input: input,
						output: A2($author$project$ElmSyntaxToRust$inferredTypeFunctionCreate, remainingInputs, output)
					}));
		}
	});
var $author$project$ElmSyntaxToRust$inferredTypeString = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
		{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}));
var $author$project$ElmSyntaxToRust$typeBool = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
		{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}));
var $author$project$ElmSyntaxToRust$typeChar = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
		{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'}));
var $author$project$ElmSyntaxToRust$elmKernelParserTypes = A2(
	$miniBill$elm_fast_dict$FastDict$singleton,
	'Elm.Kernel.Parser',
	{
		choiceTypes: $miniBill$elm_fast_dict$FastDict$empty,
		signatures: $miniBill$elm_fast_dict$FastDict$fromList(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'isSubString',
					A2(
						$author$project$ElmSyntaxToRust$inferredTypeFunctionCreate,
						_List_fromArray(
							[$author$project$ElmSyntaxToRust$inferredTypeString, $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$inferredTypeString]),
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple(
								{part0: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, part1: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, part2: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt})))),
					_Utils_Tuple2(
					'isSubChar',
					A2(
						$author$project$ElmSyntaxToRust$inferredTypeFunctionCreate,
						_List_fromArray(
							[
								A2(
								$author$project$ElmSyntaxToRust$inferredTypeFunctionCreate,
								_List_fromArray(
									[$author$project$ElmSyntaxToRust$typeChar]),
								$author$project$ElmSyntaxToRust$typeBool),
								$author$project$ElmSyntaxToRust$inferredTypeBasicsInt,
								$author$project$ElmSyntaxToRust$inferredTypeString
							]),
						$author$project$ElmSyntaxToRust$inferredTypeBasicsInt)),
					_Utils_Tuple2(
					'isAsciiCode',
					A2(
						$author$project$ElmSyntaxToRust$inferredTypeFunctionCreate,
						_List_fromArray(
							[$author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$inferredTypeString]),
						$author$project$ElmSyntaxToRust$typeBool)),
					_Utils_Tuple2(
					'chompBase10',
					A2(
						$author$project$ElmSyntaxToRust$inferredTypeFunctionCreate,
						_List_fromArray(
							[$author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$inferredTypeString]),
						$author$project$ElmSyntaxToRust$inferredTypeBasicsInt)),
					_Utils_Tuple2(
					'consumeBase',
					A2(
						$author$project$ElmSyntaxToRust$inferredTypeFunctionCreate,
						_List_fromArray(
							[$author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$inferredTypeString]),
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
								{part0: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, part1: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt})))),
					_Utils_Tuple2(
					'consumeBase16',
					A2(
						$author$project$ElmSyntaxToRust$inferredTypeFunctionCreate,
						_List_fromArray(
							[$author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$inferredTypeString]),
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
								{part0: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, part1: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt})))),
					_Utils_Tuple2(
					'findSubString',
					A2(
						$author$project$ElmSyntaxToRust$inferredTypeFunctionCreate,
						_List_fromArray(
							[$author$project$ElmSyntaxToRust$inferredTypeString, $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$inferredTypeString]),
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple(
								{part0: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, part1: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, part2: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt}))))
				])),
		typeAliases: $miniBill$elm_fast_dict$FastDict$empty
	});
var $author$project$ElmSyntaxToRust$elmKernelUrlTypes = A2(
	$miniBill$elm_fast_dict$FastDict$singleton,
	'Elm.Kernel.Url',
	{
		choiceTypes: $miniBill$elm_fast_dict$FastDict$empty,
		signatures: $miniBill$elm_fast_dict$FastDict$fromList(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'percentEncode',
					A2(
						$author$project$ElmSyntaxToRust$inferredTypeFunctionCreate,
						_List_fromArray(
							[$author$project$ElmSyntaxToRust$inferredTypeString]),
						$author$project$ElmSyntaxToRust$inferredTypeString)),
					_Utils_Tuple2(
					'percentDecode',
					A2(
						$author$project$ElmSyntaxToRust$inferredTypeFunctionCreate,
						_List_fromArray(
							[$author$project$ElmSyntaxToRust$inferredTypeString]),
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
								{
									_arguments: _List_fromArray(
										[$author$project$ElmSyntaxToRust$inferredTypeString]),
									moduleOrigin: 'Maybe',
									name: 'Maybe'
								})))),
					_Utils_Tuple2(
					'findSubString',
					A2(
						$author$project$ElmSyntaxToRust$inferredTypeFunctionCreate,
						_List_fromArray(
							[$author$project$ElmSyntaxToRust$inferredTypeString, $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$inferredTypeString]),
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple(
								{part0: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, part1: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, part2: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt}))))
				])),
		typeAliases: $miniBill$elm_fast_dict$FastDict$empty
	});
var $author$project$ElmSyntaxToRust$typeList = function (elementType) {
	return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
			{
				_arguments: _List_fromArray(
					[elementType]),
				moduleOrigin: 'List',
				name: 'List'
			}));
};
var $author$project$ElmSyntaxToRust$elmKernelVirtualDomTypes = $miniBill$elm_fast_dict$FastDict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'Elm.Kernel.VirtualDom',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$empty,
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'noJavaScriptOrHtmlUri',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{input: $author$project$ElmSyntaxToRust$inferredTypeString, output: $author$project$ElmSyntaxToRust$inferredTypeString}))),
							_Utils_Tuple2(
							'noJavaScriptUri',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{input: $author$project$ElmSyntaxToRust$inferredTypeString, output: $author$project$ElmSyntaxToRust$inferredTypeString}))),
							_Utils_Tuple2(
							'attribute',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $author$project$ElmSyntaxToRust$inferredTypeString,
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $author$project$ElmSyntaxToRust$inferredTypeString,
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'VirtualDom',
																name: 'Attribute'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'attributeNS',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $author$project$ElmSyntaxToRust$inferredTypeString,
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $author$project$ElmSyntaxToRust$inferredTypeString,
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $author$project$ElmSyntaxToRust$inferredTypeString,
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'VirtualDom',
																			name: 'Attribute'
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'property',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $author$project$ElmSyntaxToRust$inferredTypeString,
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Json.Decode', name: 'Value'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'VirtualDom',
																name: 'Attribute'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'node',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $author$project$ElmSyntaxToRust$inferredTypeString,
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $author$project$ElmSyntaxToRust$typeList(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{
																	_arguments: _List_fromArray(
																		[
																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																			{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		]),
																	moduleOrigin: 'VirtualDom',
																	name: 'Attribute'
																}))),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $author$project$ElmSyntaxToRust$typeList(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																			{
																				_arguments: _List_fromArray(
																					[
																						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																						{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																					]),
																				moduleOrigin: 'VirtualDom',
																				name: 'Node'
																			}))),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'VirtualDom',
																			name: 'Node'
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'nodeNS',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $author$project$ElmSyntaxToRust$inferredTypeString,
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $author$project$ElmSyntaxToRust$inferredTypeString,
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $author$project$ElmSyntaxToRust$typeList(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																			{
																				_arguments: _List_fromArray(
																					[
																						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																						{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																					]),
																				moduleOrigin: 'VirtualDom',
																				name: 'Attribute'
																			}))),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $author$project$ElmSyntaxToRust$typeList(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																						{
																							_arguments: _List_fromArray(
																								[
																									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																									{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																								]),
																							moduleOrigin: 'VirtualDom',
																							name: 'Node'
																						}))),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'VirtualDom',
																						name: 'Node'
																					}))
																		}))
															}))
												}))
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$empty
			})
		]));
var $author$project$ElmSyntaxToRust$elmRandomTypes = $miniBill$elm_fast_dict$FastDict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'Random',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Generator',
							{
								parameters: _List_fromArray(
									['a']),
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							}),
							_Utils_Tuple2(
							'Seed',
							{
								parameters: _List_Nil,
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							})
						])),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'andThen',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Random',
																name: 'Generator'
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Random',
																name: 'Generator'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Random',
																name: 'Generator'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'constant',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Random',
													name: 'Generator'
												}))
									}))),
							_Utils_Tuple2(
							'float',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																			{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}))
																	]),
																moduleOrigin: 'Random',
																name: 'Generator'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'generate',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Random',
																name: 'Generator'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Platform.Cmd',
																name: 'Cmd'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'independentSeed',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{
										_arguments: _List_fromArray(
											[
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
													{_arguments: _List_Nil, moduleOrigin: 'Random', name: 'Seed'}))
											]),
										moduleOrigin: 'Random',
										name: 'Generator'
									}))),
							_Utils_Tuple2(
							'initialSeed',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Random', name: 'Seed'}))
									}))),
							_Utils_Tuple2(
							'int',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																			{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
																	]),
																moduleOrigin: 'Random',
																name: 'Generator'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'lazy',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Random',
																name: 'Generator'
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Random',
													name: 'Generator'
												}))
									}))),
							_Utils_Tuple2(
							'list',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Random',
																name: 'Generator'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																			{
																				_arguments: _List_fromArray(
																					[
																						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																						{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																					]),
																				moduleOrigin: 'List',
																				name: 'List'
																			}))
																	]),
																moduleOrigin: 'Random',
																name: 'Generator'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Random',
																name: 'Generator'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Random',
																name: 'Generator'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map2',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Random',
																name: 'Generator'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Random',
																			name: 'Generator'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Random',
																			name: 'Generator'
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map3',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Random',
																name: 'Generator'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Random',
																			name: 'Generator'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Random',
																						name: 'Generator'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Random',
																						name: 'Generator'
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map4',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																					}))
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Random',
																name: 'Generator'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Random',
																			name: 'Generator'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Random',
																						name: 'Generator'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'Random',
																									name: 'Generator'
																								})),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'Random',
																									name: 'Generator'
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map5',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'f', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																								}))
																					}))
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Random',
																name: 'Generator'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'Random',
																			name: 'Generator'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'Random',
																						name: 'Generator'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'Random',
																									name: 'Generator'
																								})),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																											{
																												_arguments: _List_fromArray(
																													[
																														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																														{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																													]),
																												moduleOrigin: 'Random',
																												name: 'Generator'
																											})),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																											{
																												_arguments: _List_fromArray(
																													[
																														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																														{name: 'f', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																													]),
																												moduleOrigin: 'Random',
																												name: 'Generator'
																											}))
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'maxInt',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))),
							_Utils_Tuple2(
							'minInt',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))),
							_Utils_Tuple2(
							'pair',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Random',
													name: 'Generator'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Random',
																name: 'Generator'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
																			{
																				part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																				part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																			}))
																	]),
																moduleOrigin: 'Random',
																name: 'Generator'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'step',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'Random',
													name: 'Generator'
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Random', name: 'Seed'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
															{
																part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Random', name: 'Seed'}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'uniform',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Random',
																name: 'Generator'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'weighted',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
												{
													part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
													part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
																			{
																				part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																						{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
																				part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																			}))
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Random',
																name: 'Generator'
															}))
												}))
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			})
		]));
var $author$project$ElmSyntaxToRust$elmRegexTypes = $miniBill$elm_fast_dict$FastDict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'Regex',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Regex',
							{
								parameters: _List_Nil,
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							})
						])),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'contains',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Regex', name: 'Regex'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
												}))
									}))),
							_Utils_Tuple2(
							'find',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Regex', name: 'Regex'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																			{_arguments: _List_Nil, moduleOrigin: 'Regex', name: 'Match'}))
																	]),
																moduleOrigin: 'List',
																name: 'List'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'findAtMost',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Regex', name: 'Regex'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																						{_arguments: _List_Nil, moduleOrigin: 'Regex', name: 'Match'}))
																				]),
																			moduleOrigin: 'List',
																			name: 'List'
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'fromString',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																{_arguments: _List_Nil, moduleOrigin: 'Regex', name: 'Regex'}))
														]),
													moduleOrigin: 'Maybe',
													name: 'Maybe'
												}))
									}))),
							_Utils_Tuple2(
							'fromStringWith',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Regex', name: 'Options'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																			{_arguments: _List_Nil, moduleOrigin: 'Regex', name: 'Regex'}))
																	]),
																moduleOrigin: 'Maybe',
																name: 'Maybe'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'never',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{_arguments: _List_Nil, moduleOrigin: 'Regex', name: 'Regex'}))),
							_Utils_Tuple2(
							'replace',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Regex', name: 'Regex'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Regex', name: 'Match'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'replaceAtMost',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Regex', name: 'Regex'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{_arguments: _List_Nil, moduleOrigin: 'Regex', name: 'Match'})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'split',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Regex', name: 'Regex'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																			{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
																	]),
																moduleOrigin: 'List',
																name: 'List'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'splitAtMost',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Regex', name: 'Regex'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																						{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
																				]),
																			moduleOrigin: 'List',
																			name: 'List'
																		}))
															}))
												}))
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Match',
							{
								parameters: _List_Nil,
								recordFieldOrder: $elm$core$Maybe$Just(
									_List_fromArray(
										['match', 'index', 'number', 'submatches'])),
								type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(
										$miniBill$elm_fast_dict$FastDict$fromList(
											_List_fromArray(
												[
													_Utils_Tuple2(
													'index',
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))),
													_Utils_Tuple2(
													'match',
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))),
													_Utils_Tuple2(
													'number',
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))),
													_Utils_Tuple2(
													'submatches',
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																			{
																				_arguments: _List_fromArray(
																					[
																						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																							{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
																					]),
																				moduleOrigin: 'Maybe',
																				name: 'Maybe'
																			}))
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})))
												]))))
							}),
							_Utils_Tuple2(
							'Options',
							{
								parameters: _List_Nil,
								recordFieldOrder: $elm$core$Maybe$Just(
									_List_fromArray(
										['caseInsensitive', 'multiline'])),
								type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(
										$miniBill$elm_fast_dict$FastDict$fromList(
											_List_fromArray(
												[
													_Utils_Tuple2(
													'caseInsensitive',
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))),
													_Utils_Tuple2(
													'multiline',
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'})))
												]))))
							})
						]))
			})
		]));
var $author$project$ElmSyntaxToRust$elmTimeTypes = $miniBill$elm_fast_dict$FastDict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'Time',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Month',
							{
								parameters: _List_Nil,
								variants: $miniBill$elm_fast_dict$FastDict$fromList(
									_List_fromArray(
										[
											_Utils_Tuple2('Jan', _List_Nil),
											_Utils_Tuple2('Feb', _List_Nil),
											_Utils_Tuple2('Mar', _List_Nil),
											_Utils_Tuple2('Apr', _List_Nil),
											_Utils_Tuple2('May', _List_Nil),
											_Utils_Tuple2('Jun', _List_Nil),
											_Utils_Tuple2('Jul', _List_Nil),
											_Utils_Tuple2('Aug', _List_Nil),
											_Utils_Tuple2('Sep', _List_Nil),
											_Utils_Tuple2('Oct', _List_Nil),
											_Utils_Tuple2('Nov', _List_Nil),
											_Utils_Tuple2('Dec', _List_Nil)
										]))
							}),
							_Utils_Tuple2(
							'Posix',
							{
								parameters: _List_Nil,
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							}),
							_Utils_Tuple2(
							'Weekday',
							{
								parameters: _List_Nil,
								variants: $miniBill$elm_fast_dict$FastDict$fromList(
									_List_fromArray(
										[
											_Utils_Tuple2('Mon', _List_Nil),
											_Utils_Tuple2('Tue', _List_Nil),
											_Utils_Tuple2('Wed', _List_Nil),
											_Utils_Tuple2('Thu', _List_Nil),
											_Utils_Tuple2('Fri', _List_Nil),
											_Utils_Tuple2('Sat', _List_Nil),
											_Utils_Tuple2('Sun', _List_Nil)
										]))
							}),
							_Utils_Tuple2(
							'Zone',
							{
								parameters: _List_Nil,
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							}),
							_Utils_Tuple2(
							'ZoneName',
							{
								parameters: _List_Nil,
								variants: $miniBill$elm_fast_dict$FastDict$fromList(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'Name',
											_List_fromArray(
												[
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
														{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}))
												])),
											_Utils_Tuple2(
											'Offset',
											_List_fromArray(
												[
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
														{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
												]))
										]))
							})
						])),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'customZone',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(
																			$miniBill$elm_fast_dict$FastDict$fromList(
																				_List_fromArray(
																					[
																						_Utils_Tuple2(
																						'offset',
																						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))),
																						_Utils_Tuple2(
																						'start',
																						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})))
																					]))))
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Zone'}))
												}))
									}))),
							_Utils_Tuple2(
							'every',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Posix'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'Platform.Sub',
																name: 'Sub'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'getZoneName',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{
										_arguments: _List_fromArray(
											[
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
												{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
													{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'ZoneName'}))
											]),
										moduleOrigin: 'Task',
										name: 'Task'
									}))),
							_Utils_Tuple2(
							'here',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{
										_arguments: _List_fromArray(
											[
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
												{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
													{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Zone'}))
											]),
										moduleOrigin: 'Task',
										name: 'Task'
									}))),
							_Utils_Tuple2(
							'millisToPosix',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Posix'}))
									}))),
							_Utils_Tuple2(
							'now',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{
										_arguments: _List_fromArray(
											[
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
												{name: 'x', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
													{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Posix'}))
											]),
										moduleOrigin: 'Task',
										name: 'Task'
									}))),
							_Utils_Tuple2(
							'posixToMillis',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Posix'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
									}))),
							_Utils_Tuple2(
							'toDay',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Zone'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Posix'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
												}))
									}))),
							_Utils_Tuple2(
							'toHour',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Zone'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Posix'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
												}))
									}))),
							_Utils_Tuple2(
							'toMillis',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Zone'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Posix'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
												}))
									}))),
							_Utils_Tuple2(
							'toMinute',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Zone'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Posix'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
												}))
									}))),
							_Utils_Tuple2(
							'toMonth',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Zone'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Posix'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Month'}))
												}))
									}))),
							_Utils_Tuple2(
							'toSecond',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Zone'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Posix'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
												}))
									}))),
							_Utils_Tuple2(
							'toWeekday',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Zone'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Posix'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Weekday'}))
												}))
									}))),
							_Utils_Tuple2(
							'toYear',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Zone'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Posix'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}))
												}))
									}))),
							_Utils_Tuple2(
							'utc',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{_arguments: _List_Nil, moduleOrigin: 'Time', name: 'Zone'})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			})
		]));
var $author$project$ElmSyntaxToRust$elmVirtualDomTypes = $miniBill$elm_fast_dict$FastDict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'VirtualDom',
			{
				choiceTypes: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'Attribute',
							{
								parameters: _List_fromArray(
									['msg']),
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							}),
							_Utils_Tuple2(
							'Handler',
							{
								parameters: _List_fromArray(
									['msg']),
								variants: $miniBill$elm_fast_dict$FastDict$fromList(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'Normal',
											_List_fromArray(
												[
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
														{
															_arguments: _List_fromArray(
																[
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																]),
															moduleOrigin: 'Json.Decode',
															name: 'Decoder'
														}))
												])),
											_Utils_Tuple2(
											'MayStopPropagation',
											_List_fromArray(
												[
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
														{
															_arguments: _List_fromArray(
																[
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
																		{
																			part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
																		}))
																]),
															moduleOrigin: 'Json.Decode',
															name: 'Decoder'
														}))
												])),
											_Utils_Tuple2(
											'MayPreventDefault',
											_List_fromArray(
												[
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
														{
															_arguments: _List_fromArray(
																[
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
																		{
																			part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))
																		}))
																]),
															moduleOrigin: 'Json.Decode',
															name: 'Decoder'
														}))
												])),
											_Utils_Tuple2(
											'Custom',
											_List_fromArray(
												[
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
														{
															_arguments: _List_fromArray(
																[
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(
																		$miniBill$elm_fast_dict$FastDict$fromList(
																			_List_fromArray(
																				[
																					_Utils_Tuple2(
																					'message',
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																						{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})),
																					_Utils_Tuple2(
																					'preventDefault',
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																							{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'}))),
																					_Utils_Tuple2(
																					'stopPropagation',
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																							{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'})))
																				]))))
																]),
															moduleOrigin: 'Json.Decode',
															name: 'Decoder'
														}))
												]))
										]))
							}),
							_Utils_Tuple2(
							'Node',
							{
								parameters: _List_fromArray(
									['msg']),
								variants: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
							})
						])),
				signatures: $miniBill$elm_fast_dict$FastDict$fromList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'attribute',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'VirtualDom',
																name: 'Attribute'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'attributeNS',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'VirtualDom',
																			name: 'Attribute'
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'keyedNode',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																			{
																				_arguments: _List_fromArray(
																					[
																						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																						{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																					]),
																				moduleOrigin: 'VirtualDom',
																				name: 'Attribute'
																			}))
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
																						{
																							part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																									{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
																							part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																									{
																										_arguments: _List_fromArray(
																											[
																												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																												{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																											]),
																										moduleOrigin: 'VirtualDom',
																										name: 'Node'
																									}))
																						}))
																				]),
																			moduleOrigin: 'List',
																			name: 'List'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'VirtualDom',
																			name: 'Node'
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'keyedNodeNS',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																						{
																							_arguments: _List_fromArray(
																								[
																									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																									{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																								]),
																							moduleOrigin: 'VirtualDom',
																							name: 'Attribute'
																						}))
																				]),
																			moduleOrigin: 'List',
																			name: 'List'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
																									{
																										part0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
																										part1: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																												{
																													_arguments: _List_fromArray(
																														[
																															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																															{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																														]),
																													moduleOrigin: 'VirtualDom',
																													name: 'Node'
																												}))
																									}))
																							]),
																						moduleOrigin: 'List',
																						name: 'List'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'VirtualDom',
																						name: 'Node'
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'lazy',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'VirtualDom',
																name: 'Node'
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'VirtualDom',
																name: 'Node'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'lazy2',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'VirtualDom',
																			name: 'Node'
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'VirtualDom',
																			name: 'Node'
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'lazy3',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'VirtualDom',
																						name: 'Node'
																					}))
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'VirtualDom',
																						name: 'Node'
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'lazy4',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'VirtualDom',
																									name: 'Node'
																								}))
																					}))
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																								{
																									_arguments: _List_fromArray(
																										[
																											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																											{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																										]),
																									moduleOrigin: 'VirtualDom',
																									name: 'Node'
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'lazy5',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																											{
																												_arguments: _List_fromArray(
																													[
																														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																														{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																													]),
																												moduleOrigin: 'VirtualDom',
																												name: 'Node'
																											}))
																								}))
																					}))
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																											{
																												_arguments: _List_fromArray(
																													[
																														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																														{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																													]),
																												moduleOrigin: 'VirtualDom',
																												name: 'Node'
																											}))
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'lazy6',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																											{
																												input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																													{name: 'f', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																												output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																														{
																															_arguments: _List_fromArray(
																																[
																																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																	{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																																]),
																															moduleOrigin: 'VirtualDom',
																															name: 'Node'
																														}))
																											}))
																								}))
																					}))
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																											{
																												input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																													{name: 'f', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																												output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																														{
																															_arguments: _List_fromArray(
																																[
																																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																	{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																																]),
																															moduleOrigin: 'VirtualDom',
																															name: 'Node'
																														}))
																											}))
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'lazy7',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																											{
																												input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																													{name: 'f', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																												output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																														{
																															input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																{name: 'g', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																															output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																																	{
																																		_arguments: _List_fromArray(
																																			[
																																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																				{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																																			]),
																																		moduleOrigin: 'VirtualDom',
																																		name: 'Node'
																																	}))
																														}))
																											}))
																								}))
																					}))
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																											{
																												input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																													{name: 'f', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																												output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																														{
																															input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																{name: 'g', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																															output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																																	{
																																		_arguments: _List_fromArray(
																																			[
																																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																				{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																																			]),
																																		moduleOrigin: 'VirtualDom',
																																		name: 'Node'
																																	}))
																														}))
																											}))
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'lazy8',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																											{
																												input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																													{name: 'f', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																												output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																														{
																															input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																{name: 'g', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																															output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																																	{
																																		input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																			{name: 'h', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																																		output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																																				{
																																					_arguments: _List_fromArray(
																																						[
																																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																							{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																																						]),
																																					moduleOrigin: 'VirtualDom',
																																					name: 'Node'
																																				}))
																																	}))
																														}))
																											}))
																								}))
																					}))
																		}))
															}))
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																	{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																				{name: 'c', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{
																						input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																							{name: 'd', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																						output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																								{
																									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																										{name: 'e', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																									output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																											{
																												input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																													{name: 'f', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																												output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																														{
																															input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																{name: 'g', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																															output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																																	{
																																		input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																			{name: 'h', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
																																		output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																																				{
																																					_arguments: _List_fromArray(
																																						[
																																							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																																							{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																																						]),
																																					moduleOrigin: 'VirtualDom',
																																					name: 'Node'
																																				}))
																																	}))
																														}))
																											}))
																								}))
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'map',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'VirtualDom',
																name: 'Node'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'VirtualDom',
																name: 'Node'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'mapAttribute',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty}),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
														{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
												})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'a', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'VirtualDom',
																name: 'Attribute'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'b', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'VirtualDom',
																name: 'Attribute'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'node',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																			{
																				_arguments: _List_fromArray(
																					[
																						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																						{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																					]),
																				moduleOrigin: 'VirtualDom',
																				name: 'Attribute'
																			}))
																	]),
																moduleOrigin: 'List',
																name: 'List'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																						{
																							_arguments: _List_fromArray(
																								[
																									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																									{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																								]),
																							moduleOrigin: 'VirtualDom',
																							name: 'Node'
																						}))
																				]),
																			moduleOrigin: 'List',
																			name: 'List'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																					{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																				]),
																			moduleOrigin: 'VirtualDom',
																			name: 'Node'
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'nodeNS',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{
																input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																		{
																			_arguments: _List_fromArray(
																				[
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																						{
																							_arguments: _List_fromArray(
																								[
																									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																									{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																								]),
																							moduleOrigin: 'VirtualDom',
																							name: 'Attribute'
																						}))
																				]),
																			moduleOrigin: 'List',
																			name: 'List'
																		})),
																output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																		{
																			input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																									{
																										_arguments: _List_fromArray(
																											[
																												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																												{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																											]),
																										moduleOrigin: 'VirtualDom',
																										name: 'Node'
																									}))
																							]),
																						moduleOrigin: 'List',
																						name: 'List'
																					})),
																			output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
																					{
																						_arguments: _List_fromArray(
																							[
																								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																								{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																							]),
																						moduleOrigin: 'VirtualDom',
																						name: 'Node'
																					}))
																		}))
															}))
												}))
									}))),
							_Utils_Tuple2(
							'on',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'VirtualDom',
																name: 'Handler'
															})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'VirtualDom',
																name: 'Attribute'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'property',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'Json.Decode', name: 'Value'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'VirtualDom',
																name: 'Attribute'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'style',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{
													input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
													output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
															{
																_arguments: _List_fromArray(
																	[
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
																	]),
																moduleOrigin: 'VirtualDom',
																name: 'Attribute'
															}))
												}))
									}))),
							_Utils_Tuple2(
							'text',
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'})),
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: _List_fromArray(
														[
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
															{name: 'msg', useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty})
														]),
													moduleOrigin: 'VirtualDom',
													name: 'Node'
												}))
									})))
						])),
				typeAliases: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
			})
		]));
var $author$project$ElmSyntaxToRust$baseElmDeclarationTypes = A2(
	$miniBill$elm_fast_dict$FastDict$union,
	$author$project$ElmSyntaxToRust$elmKernelUrlTypes,
	A2(
		$miniBill$elm_fast_dict$FastDict$union,
		$author$project$ElmSyntaxToRust$elmKernelParserTypes,
		A2(
			$miniBill$elm_fast_dict$FastDict$union,
			$author$project$ElmSyntaxToRust$elmExplorationsLinearAlgebraTypes,
			A2(
				$miniBill$elm_fast_dict$FastDict$union,
				$author$project$ElmSyntaxToRust$elmTimeTypes,
				A2(
					$miniBill$elm_fast_dict$FastDict$union,
					$author$project$ElmSyntaxToRust$elmRegexTypes,
					A2(
						$miniBill$elm_fast_dict$FastDict$union,
						$author$project$ElmSyntaxToRust$elmRandomTypes,
						A2(
							$miniBill$elm_fast_dict$FastDict$union,
							$author$project$ElmSyntaxToRust$elmKernelVirtualDomTypes,
							A2(
								$miniBill$elm_fast_dict$FastDict$union,
								$author$project$ElmSyntaxToRust$elmVirtualDomTypes,
								A2(
									$miniBill$elm_fast_dict$FastDict$union,
									$author$project$ElmSyntaxToRust$elmBytesTypes,
									A2($miniBill$elm_fast_dict$FastDict$union, $author$project$ElmSyntaxToRust$elmJsonTypes, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$elmCoreTypes))))))))));
var $author$project$ElmSyntaxToRust$RustTypeConstruct = function (a) {
	return {$: 'RustTypeConstruct', a: a};
};
var $author$project$ElmSyntaxToRust$RustTypeFunction = function (a) {
	return {$: 'RustTypeFunction', a: a};
};
var $author$project$ElmSyntaxToRust$RustTypeTuple = function (a) {
	return {$: 'RustTypeTuple', a: a};
};
var $author$project$ElmSyntaxToRust$RustTypeUnit = {$: 'RustTypeUnit'};
var $author$project$ElmSyntaxToRust$RustTypeVariable = function (a) {
	return {$: 'RustTypeVariable', a: a};
};
var $author$project$ElmSyntaxToRust$generatedLifetimeVariableName = 'a';
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $elm$core$Char$toUpper = _Char_toUpper;
var $author$project$ElmSyntaxToRust$stringFirstCharToUpper = function (string) {
	var _v0 = $elm$core$String$uncons(string);
	if (_v0.$ === 'Nothing') {
		return '';
	} else {
		var _v1 = _v0.a;
		var firstChar = _v1.a;
		var tail = _v1.b;
		return A2(
			$elm$core$String$cons,
			$elm$core$Char$toUpper(firstChar),
			tail);
	}
};
var $author$project$ElmSyntaxToRust$generatedRecordTypeName = function (rustFieldNames) {
	return 'Generated' + $elm$core$String$concat(
		A2($elm$core$List$map, $author$project$ElmSyntaxToRust$stringFirstCharToUpper, rustFieldNames));
};
var $miniBill$elm_fast_dict$FastDict$getInner = F2(
	function (targetKey, dict) {
		getInner:
		while (true) {
			if (dict.$ === 'Leaf') {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue getInner;
					case 'EQ':
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue getInner;
				}
			}
		}
	});
var $miniBill$elm_fast_dict$FastDict$get = F2(
	function (targetKey, _v0) {
		var dict = _v0.b;
		return A2($miniBill$elm_fast_dict$FastDict$getInner, targetKey, dict);
	});
var $author$project$ElmSyntaxToRust$inferredTypeConstructToFunction = F2(
	function (typeAliasesInModule, inferredTypeConstruct) {
		var _v2 = A2(
			$elm$core$Maybe$andThen,
			function (byName) {
				return A2($miniBill$elm_fast_dict$FastDict$get, inferredTypeConstruct.name, byName);
			},
			typeAliasesInModule(inferredTypeConstruct.moduleOrigin));
		if (_v2.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var referencedTypeAlias = _v2.a;
			var _v3 = referencedTypeAlias.type_;
			if (_v3.$ === 'TypeVariable') {
				var _v4 = inferredTypeConstruct._arguments;
				if (!_v4.b) {
					return $elm$core$Maybe$Nothing;
				} else {
					var typeAliasArgument = _v4.a;
					return A2($author$project$ElmSyntaxToRust$inferredTypeToFunction, typeAliasesInModule, typeAliasArgument);
				}
			} else {
				var aliasTypeNotVariable = _v3.a;
				return A2($author$project$ElmSyntaxToRust$inferredTypeNotVariableToFunction, typeAliasesInModule, aliasTypeNotVariable);
			}
		}
	});
var $author$project$ElmSyntaxToRust$inferredTypeNotVariableToFunction = F2(
	function (typeAliasesInModule, inferredTypeNotFunction) {
		switch (inferredTypeNotFunction.$) {
			case 'TypeUnit':
				return $elm$core$Maybe$Nothing;
			case 'TypeTuple':
				return $elm$core$Maybe$Nothing;
			case 'TypeTriple':
				return $elm$core$Maybe$Nothing;
			case 'TypeRecord':
				return $elm$core$Maybe$Nothing;
			case 'TypeRecordExtension':
				return $elm$core$Maybe$Nothing;
			case 'TypeFunction':
				var inferredTypeFunction = inferredTypeNotFunction.a;
				return $elm$core$Maybe$Just(inferredTypeFunction);
			default:
				var inferredTypeConstruct = inferredTypeNotFunction.a;
				return A2($author$project$ElmSyntaxToRust$inferredTypeConstructToFunction, typeAliasesInModule, inferredTypeConstruct);
		}
	});
var $author$project$ElmSyntaxToRust$inferredTypeToFunction = F2(
	function (typeAliasesInModule, inferredType) {
		if (inferredType.$ === 'TypeVariable') {
			return $elm$core$Maybe$Nothing;
		} else {
			var aliasTypeNotVariable = inferredType.a;
			return A2($author$project$ElmSyntaxToRust$inferredTypeNotVariableToFunction, typeAliasesInModule, aliasTypeNotVariable);
		}
	});
var $miniBill$elm_fast_dict$FastDict$keys = function (dict) {
	return A3(
		$miniBill$elm_fast_dict$FastDict$foldr,
		F3(
			function (key, _v0, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $miniBill$elm_fast_dict$FastSet$member = F2(
	function (key, _v0) {
		var dict = _v0.a;
		var _v1 = A2($miniBill$elm_fast_dict$FastDict$get, key, dict);
		if (_v1.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var $author$project$ElmSyntaxToRust$rustKeywords = $miniBill$elm_fast_dict$FastSet$fromList(
	_List_fromArray(
		['as', 'break', 'const', 'continue', 'crate', 'else', 'enum', 'extern', 'false', 'fn', 'for', 'if', 'impl', 'in', 'let', 'loop', 'match', 'mod', 'move', 'mut', 'pub', 'ref', 'return', 'self', 'Self', 'static', 'struct', 'super', 'trait', 'true', 'type', 'unsafe', 'use', 'where', 'while', 'async', 'await', 'dyn', 'abstract', 'become', 'box', 'do', 'final', 'macro', 'override', 'priv', 'typeof', 'unsized', 'virtual', 'yield', 'try', 'gen', 'static', 'macro_rules', 'raw', 'safe', 'union']));
var $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords = function (variableName) {
	return (A2($elm$core$String$endsWith, '_', variableName) || A2($miniBill$elm_fast_dict$FastSet$member, variableName, $author$project$ElmSyntaxToRust$rustKeywords)) ? (variableName + '_') : variableName;
};
var $author$project$ElmSyntaxToRust$normalizeToRustPascalCase = function (name) {
	return $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(
		$elm$core$String$concat(
			A2(
				$elm$core$List$map,
				$author$project$ElmSyntaxToRust$stringFirstCharToUpper,
				A2($elm$core$String$split, '_', name))));
};
var $elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			$elm$core$String$join,
			after,
			A2($elm$core$String$split, before, string));
	});
var $elm$core$Char$toLower = _Char_toLower;
var $author$project$ElmSyntaxToRust$stringFirstCharToLower = function (string) {
	var _v0 = $elm$core$String$uncons(string);
	if (_v0.$ === 'Nothing') {
		return '';
	} else {
		var _v1 = _v0.a;
		var firstChar = _v1.a;
		var tail = _v1.b;
		return A2(
			$elm$core$String$cons,
			$elm$core$Char$toLower(firstChar),
			tail);
	}
};
var $author$project$ElmSyntaxToRust$toSnakeCase = function (string) {
	return $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			function (_char) {
				return $elm$core$Char$isUpper(_char) ? ('_' + $elm$core$String$fromChar(
					$elm$core$Char$toLower(_char))) : $elm$core$String$fromChar(_char);
			},
			$elm$core$String$toList(
				$author$project$ElmSyntaxToRust$stringFirstCharToLower(string))));
};
var $author$project$ElmSyntaxToRust$referenceToRustName = function (reference) {
	return $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(
		$author$project$ElmSyntaxToRust$toSnakeCase(
			function () {
				var _v0 = A3($elm$core$String$replace, '.', '', reference.moduleOrigin);
				if (_v0 === '') {
					return reference.name;
				} else {
					var moduleOriginNotEmpty = _v0;
					return moduleOriginNotEmpty + ('_' + reference.name);
				}
			}()));
};
var $author$project$ElmSyntaxToRust$rustTypeF64 = $author$project$ElmSyntaxToRust$RustTypeConstruct(
	{_arguments: _List_Nil, isFunction: false, lifetimeArgument: $elm$core$Maybe$Nothing, name: 'f64', qualification: _List_Nil});
var $author$project$ElmSyntaxToRust$justRustReferenceChar = $elm$core$Maybe$Just(
	{hasLifetimeParameter: false, name: 'char', qualification: _List_Nil});
var $author$project$ElmSyntaxToRust$rustReferenceF64 = {hasLifetimeParameter: false, name: 'f64', qualification: _List_Nil};
var $author$project$ElmSyntaxToRust$justRustReferenceF64 = $elm$core$Maybe$Just($author$project$ElmSyntaxToRust$rustReferenceF64);
var $author$project$ElmSyntaxToRust$justRustReferenceListList = $elm$core$Maybe$Just(
	{hasLifetimeParameter: true, name: 'ListList', qualification: _List_Nil});
var $author$project$ElmSyntaxToRust$justRustReferenceOption = $elm$core$Maybe$Just(
	{hasLifetimeParameter: false, name: 'Option', qualification: _List_Nil});
var $author$project$ElmSyntaxToRust$justRustReferenceResultResult = $elm$core$Maybe$Just(
	{hasLifetimeParameter: false, name: 'ResultResult', qualification: _List_Nil});
var $author$project$ElmSyntaxToRust$justRustReferenceStringString = $elm$core$Maybe$Just(
	{hasLifetimeParameter: true, name: 'StringString', qualification: _List_Nil});
var $author$project$ElmSyntaxToRust$typeConstructReferenceToCoreRust = function (reference) {
	var _v0 = reference.moduleOrigin;
	switch (_v0) {
		case 'Basics':
			var _v1 = reference.name;
			switch (_v1) {
				case 'Order':
					return $elm$core$Maybe$Just(
						{
							hasLifetimeParameter: false,
							name: 'Ordering',
							qualification: _List_fromArray(
								['std', 'cmp'])
						});
				case 'Bool':
					return $elm$core$Maybe$Just(
						{hasLifetimeParameter: false, name: 'bool', qualification: _List_Nil});
				case 'Int':
					return $author$project$ElmSyntaxToRust$justRustReferenceF64;
				case 'Float':
					return $author$project$ElmSyntaxToRust$justRustReferenceF64;
				case 'Never':
					return $elm$core$Maybe$Just(
						{hasLifetimeParameter: false, name: 'BasicsNever', qualification: _List_Nil});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'String':
			return $author$project$ElmSyntaxToRust$justRustReferenceStringString;
		case 'Char':
			return $author$project$ElmSyntaxToRust$justRustReferenceChar;
		case 'List':
			return $author$project$ElmSyntaxToRust$justRustReferenceListList;
		case 'Array':
			return $elm$core$Maybe$Just(
				{hasLifetimeParameter: true, name: 'ArrayArray', qualification: _List_Nil});
		case 'Maybe':
			return $author$project$ElmSyntaxToRust$justRustReferenceOption;
		case 'Result':
			return $author$project$ElmSyntaxToRust$justRustReferenceResultResult;
		case 'Json.Encode':
			return $elm$core$Maybe$Just(
				{hasLifetimeParameter: true, name: 'JsonEncodeValue', qualification: _List_Nil});
		case 'Json.Decode':
			var _v2 = reference.name;
			switch (_v2) {
				case 'Value':
					return $elm$core$Maybe$Just(
						{hasLifetimeParameter: true, name: 'JsonDecodeValue', qualification: _List_Nil});
				case 'Decoder':
					return $elm$core$Maybe$Just(
						{hasLifetimeParameter: true, name: 'JsonDecodeDecoder', qualification: _List_Nil});
				case 'Error':
					return $elm$core$Maybe$Just(
						{hasLifetimeParameter: true, name: 'JsonDecodeError', qualification: _List_Nil});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Regex':
			var _v3 = reference.name;
			switch (_v3) {
				case 'Regex':
					return $elm$core$Maybe$Just(
						{hasLifetimeParameter: true, name: 'RegexRegex', qualification: _List_Nil});
				case 'Options':
					return $elm$core$Maybe$Just(
						{hasLifetimeParameter: false, name: 'RegexOptions', qualification: _List_Nil});
				case 'Match':
					return $elm$core$Maybe$Just(
						{hasLifetimeParameter: false, name: 'RegexMatch', qualification: _List_Nil});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Random':
			var _v4 = reference.name;
			switch (_v4) {
				case 'Seed':
					return $elm$core$Maybe$Just(
						{hasLifetimeParameter: false, name: 'RandomSeed', qualification: _List_Nil});
				case 'Generator':
					return $elm$core$Maybe$Just(
						{hasLifetimeParameter: true, name: 'RandomGenerator', qualification: _List_Nil});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Time':
			var _v5 = reference.name;
			switch (_v5) {
				case 'Posix':
					return $elm$core$Maybe$Just(
						{hasLifetimeParameter: false, name: 'TimePosix', qualification: _List_Nil});
				case 'Zone':
					return $elm$core$Maybe$Just(
						{hasLifetimeParameter: false, name: 'TimeZone', qualification: _List_Nil});
				case 'Month':
					return $elm$core$Maybe$Just(
						{hasLifetimeParameter: false, name: 'TimeMonth', qualification: _List_Nil});
				case 'Weekday':
					return $elm$core$Maybe$Just(
						{hasLifetimeParameter: false, name: 'TimeWeekday', qualification: _List_Nil});
				case 'TimeZoneName':
					return $elm$core$Maybe$Just(
						{hasLifetimeParameter: false, name: 'TimeZoneName', qualification: _List_Nil});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Bytes':
			var _v6 = reference.name;
			switch (_v6) {
				case 'Endianness':
					return $elm$core$Maybe$Just(
						{hasLifetimeParameter: false, name: 'BytesEndianness', qualification: _List_Nil});
				case 'Bytes':
					return $elm$core$Maybe$Just(
						{hasLifetimeParameter: true, name: 'BytesBytes', qualification: _List_Nil});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Bytes.Decode':
			var _v7 = reference.name;
			switch (_v7) {
				case 'Decoder':
					return $elm$core$Maybe$Just(
						{hasLifetimeParameter: true, name: 'BytesDecodeDecoder', qualification: _List_Nil});
				case 'Step':
					return $elm$core$Maybe$Just(
						{hasLifetimeParameter: false, name: 'BytesDecodeStep', qualification: _List_Nil});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Bytes.Encode':
			return $elm$core$Maybe$Just(
				{hasLifetimeParameter: true, name: 'BytesEncodeEncoder', qualification: _List_Nil});
		case 'VirtualDom':
			var _v8 = reference.name;
			switch (_v8) {
				case 'Node':
					return $elm$core$Maybe$Just(
						{hasLifetimeParameter: true, name: 'VirtualDomNode', qualification: _List_Nil});
				case 'Attribute':
					return $elm$core$Maybe$Just(
						{hasLifetimeParameter: true, name: 'VirtualDomAttribute', qualification: _List_Nil});
				case 'Handler':
					return $elm$core$Maybe$Just(
						{hasLifetimeParameter: true, name: 'VirtualDomHandler', qualification: _List_Nil});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Math.Vector2':
			var _v9 = reference.name;
			if (_v9 === 'Vec2') {
				return $elm$core$Maybe$Just(
					{hasLifetimeParameter: false, name: 'MathVector2Vec2', qualification: _List_Nil});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		case 'Math.Vector3':
			var _v10 = reference.name;
			if (_v10 === 'Vec3') {
				return $elm$core$Maybe$Just(
					{hasLifetimeParameter: false, name: 'MathVector3Vec3', qualification: _List_Nil});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		case 'Math.Vector4':
			var _v11 = reference.name;
			if (_v11 === 'Vec4') {
				return $elm$core$Maybe$Just(
					{hasLifetimeParameter: false, name: 'MathVector4Vec4', qualification: _List_Nil});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		case 'Math.Matrix4':
			return $elm$core$Maybe$Nothing;
		case 'Platform':
			var _v12 = reference.name;
			if (_v12 === 'Program') {
				return $elm$core$Maybe$Just(
					{hasLifetimeParameter: true, name: 'PlatformProgram', qualification: _List_Nil});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		case 'Platform.Cmd':
			return $elm$core$Maybe$Just(
				{hasLifetimeParameter: true, name: 'PlatformCmdCmd', qualification: _List_Nil});
		case 'Platform.Sub':
			return $elm$core$Maybe$Just(
				{hasLifetimeParameter: true, name: 'PlatformSubSub', qualification: _List_Nil});
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $miniBill$elm_fast_dict$FastDict$values = function (dict) {
	return A3(
		$miniBill$elm_fast_dict$FastDict$foldr,
		F3(
			function (_v0, value, valueList) {
				return A2($elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var $author$project$ElmSyntaxToRust$typeNotVariable = F2(
	function (typeAliasesInModule, inferredTypeNotVariable) {
		switch (inferredTypeNotVariable.$) {
			case 'TypeUnit':
				return $author$project$ElmSyntaxToRust$RustTypeUnit;
			case 'TypeConstruct':
				var typeConstruct = inferredTypeNotVariable.a;
				var rustArguments = A2(
					$elm$core$List$map,
					function (argument) {
						return A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, argument);
					},
					typeConstruct._arguments);
				var _v2 = $author$project$ElmSyntaxToRust$typeConstructReferenceToCoreRust(
					{moduleOrigin: typeConstruct.moduleOrigin, name: typeConstruct.name});
				if (_v2.$ === 'Just') {
					var coreRust = _v2.a;
					return $author$project$ElmSyntaxToRust$RustTypeConstruct(
						{
							_arguments: rustArguments,
							isFunction: false,
							lifetimeArgument: coreRust.hasLifetimeParameter ? $elm$core$Maybe$Just($author$project$ElmSyntaxToRust$generatedLifetimeVariableName) : $elm$core$Maybe$Nothing,
							name: coreRust.name,
							qualification: coreRust.qualification
						});
				} else {
					return $author$project$ElmSyntaxToRust$RustTypeConstruct(
						{
							_arguments: rustArguments,
							isFunction: function () {
								var _v3 = A2($author$project$ElmSyntaxToRust$inferredTypeConstructToFunction, typeAliasesInModule, typeConstruct);
								if (_v3.$ === 'Nothing') {
									return false;
								} else {
									return true;
								}
							}(),
							lifetimeArgument: $elm$core$Maybe$Just($author$project$ElmSyntaxToRust$generatedLifetimeVariableName),
							name: $author$project$ElmSyntaxToRust$referenceToRustName(
								{moduleOrigin: typeConstruct.moduleOrigin, name: typeConstruct.name}),
							qualification: _List_Nil
						});
				}
			case 'TypeTuple':
				var typeTuple = inferredTypeNotVariable.a;
				return $author$project$ElmSyntaxToRust$RustTypeTuple(
					{
						part0: A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, typeTuple.part0),
						part1: A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, typeTuple.part1),
						part2Up: _List_Nil
					});
			case 'TypeTriple':
				var typeTriple = inferredTypeNotVariable.a;
				return $author$project$ElmSyntaxToRust$RustTypeTuple(
					{
						part0: A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, typeTriple.part0),
						part1: A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, typeTriple.part1),
						part2Up: _List_fromArray(
							[
								A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, typeTriple.part2)
							])
					});
			case 'TypeRecord':
				var recordFields = inferredTypeNotVariable.a;
				var rustFields = A3(
					$miniBill$elm_fast_dict$FastDict$foldr,
					F3(
						function (name, valueType, soFar) {
							return A3(
								$miniBill$elm_fast_dict$FastDict$insert,
								$author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(name),
								A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, valueType),
								soFar);
						}),
					$miniBill$elm_fast_dict$FastDict$empty,
					recordFields);
				return $author$project$ElmSyntaxToRust$RustTypeConstruct(
					{
						_arguments: $miniBill$elm_fast_dict$FastDict$values(rustFields),
						isFunction: false,
						lifetimeArgument: $elm$core$Maybe$Nothing,
						name: $author$project$ElmSyntaxToRust$generatedRecordTypeName(
							$miniBill$elm_fast_dict$FastDict$keys(rustFields)),
						qualification: _List_Nil
					});
			case 'TypeFunction':
				var typeFunction = inferredTypeNotVariable.a;
				return $author$project$ElmSyntaxToRust$RustTypeFunction(
					{
						input: _List_fromArray(
							[
								A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, typeFunction.input)
							]),
						output: A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, typeFunction.output)
					});
			default:
				var typeRecordExtension = inferredTypeNotVariable.a;
				var rustFields = A3(
					$miniBill$elm_fast_dict$FastDict$foldr,
					F3(
						function (name, valueType, soFar) {
							return A3(
								$miniBill$elm_fast_dict$FastDict$insert,
								$author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(name),
								A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, valueType),
								soFar);
						}),
					$miniBill$elm_fast_dict$FastDict$empty,
					typeRecordExtension.fields);
				return $author$project$ElmSyntaxToRust$RustTypeConstruct(
					{
						_arguments: $miniBill$elm_fast_dict$FastDict$values(rustFields),
						isFunction: false,
						lifetimeArgument: $elm$core$Maybe$Nothing,
						name: $author$project$ElmSyntaxToRust$generatedRecordTypeName(
							$miniBill$elm_fast_dict$FastDict$keys(rustFields)),
						qualification: _List_Nil
					});
		}
	});
var $author$project$ElmSyntaxToRust$type_ = F2(
	function (typeAliasesInModule, inferredType) {
		if (inferredType.$ === 'TypeVariable') {
			var variable = inferredType.a;
			return A2($elm$core$String$startsWith, 'number', variable.name) ? $author$project$ElmSyntaxToRust$rustTypeF64 : $author$project$ElmSyntaxToRust$RustTypeVariable(
				$author$project$ElmSyntaxToRust$normalizeToRustPascalCase(variable.name));
		} else {
			var inferredTypeNotVariable = inferredType.a;
			return A2($author$project$ElmSyntaxToRust$typeNotVariable, typeAliasesInModule, inferredTypeNotVariable);
		}
	});
var $author$project$ElmSyntaxToRust$choiceTypeDeclaration = F2(
	function (typeAliasesInModule, syntaxChoiceType) {
		return {
			name: syntaxChoiceType.name,
			parameters: A2($elm$core$List$map, $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords, syntaxChoiceType.parameters),
			variants: A2(
				$miniBill$elm_fast_dict$FastDict$map,
				F2(
					function (_v0, variantValues) {
						return A2(
							$elm$core$List$map,
							function (value) {
								return A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, value);
							},
							variantValues);
					}),
				syntaxChoiceType.variants)
		};
	});
var $author$project$ElmSyntaxToRust$listFoldl2From = F4(
	function (initialState, aList, bList, reduce) {
		listFoldl2From:
		while (true) {
			if (!aList.b) {
				return initialState;
			} else {
				var aHead = aList.a;
				var aTail = aList.b;
				if (!bList.b) {
					return initialState;
				} else {
					var bHead = bList.a;
					var bTail = bList.b;
					var $temp$initialState = A3(reduce, aHead, bHead, initialState),
						$temp$aList = aTail,
						$temp$bList = bTail,
						$temp$reduce = reduce;
					initialState = $temp$initialState;
					aList = $temp$aList;
					bList = $temp$bList;
					reduce = $temp$reduce;
					continue listFoldl2From;
				}
			}
		}
	});
var $miniBill$elm_fast_dict$FastDict$toList = function (dict) {
	return A3(
		$miniBill$elm_fast_dict$FastDict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $miniBill$elm_fast_dict$FastDict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$miniBill$elm_fast_dict$FastDict$foldl,
			stepState,
			_Utils_Tuple2(
				$miniBill$elm_fast_dict$FastDict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $author$project$ElmSyntaxToRust$syntaxTypeToNotParenthesized = function (syntaxType) {
	syntaxTypeToNotParenthesized:
	while (true) {
		switch (syntaxType.$) {
			case 'Unit':
				return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit;
			case 'GenericType':
				return syntaxType;
			case 'GenericRecord':
				return syntaxType;
			case 'Typed':
				return syntaxType;
			case 'Record':
				return syntaxType;
			case 'FunctionTypeAnnotation':
				return syntaxType;
			default:
				var tupleParts = syntaxType.a;
				if (!tupleParts.b) {
					return syntaxType;
				} else {
					if (!tupleParts.b.b) {
						var _v2 = tupleParts.a;
						var inParens = _v2.b;
						var $temp$syntaxType = inParens;
						syntaxType = $temp$syntaxType;
						continue syntaxTypeToNotParenthesized;
					} else {
						var _v3 = tupleParts.b;
						return syntaxType;
					}
				}
		}
	}
};
var $author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeNotVariableVariableToSyntaxTypeVariable = F2(
	function (inferredTypeNotVariable, syntaxType) {
		switch (inferredTypeNotVariable.$) {
			case 'TypeUnit':
				return $miniBill$elm_fast_dict$FastDict$empty;
			case 'TypeFunction':
				var inferredTypeFunction = inferredTypeNotVariable.a;
				switch (syntaxType.$) {
					case 'FunctionTypeAnnotation':
						var syntaxInput = syntaxType.a;
						var syntaxOutput = syntaxType.b;
						return A2(
							$miniBill$elm_fast_dict$FastDict$union,
							A2($author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable, inferredTypeFunction.input, syntaxInput),
							A2($author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable, inferredTypeFunction.output, syntaxOutput));
					case 'Typed':
						return $miniBill$elm_fast_dict$FastDict$empty;
					case 'Tupled':
						return $miniBill$elm_fast_dict$FastDict$empty;
					case 'Record':
						return $miniBill$elm_fast_dict$FastDict$empty;
					case 'Unit':
						return $miniBill$elm_fast_dict$FastDict$empty;
					case 'GenericType':
						return $miniBill$elm_fast_dict$FastDict$empty;
					default:
						return $miniBill$elm_fast_dict$FastDict$empty;
				}
			case 'TypeTuple':
				var inferredParts = inferredTypeNotVariable.a;
				switch (syntaxType.$) {
					case 'Tupled':
						var syntaxParts = syntaxType.a;
						if (!syntaxParts.b) {
							return $miniBill$elm_fast_dict$FastDict$empty;
						} else {
							if (!syntaxParts.b.b) {
								return $miniBill$elm_fast_dict$FastDict$empty;
							} else {
								if (!syntaxParts.b.b.b) {
									var syntaxPart0 = syntaxParts.a;
									var _v8 = syntaxParts.b;
									var syntaxPart1 = _v8.a;
									return A2(
										$miniBill$elm_fast_dict$FastDict$union,
										A2($author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable, inferredParts.part1, syntaxPart1),
										A2($author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable, inferredParts.part0, syntaxPart0));
								} else {
									var _v9 = syntaxParts.b;
									var _v10 = _v9.b;
									return $miniBill$elm_fast_dict$FastDict$empty;
								}
							}
						}
					case 'Typed':
						return $miniBill$elm_fast_dict$FastDict$empty;
					case 'Record':
						return $miniBill$elm_fast_dict$FastDict$empty;
					case 'FunctionTypeAnnotation':
						return $miniBill$elm_fast_dict$FastDict$empty;
					case 'Unit':
						return $miniBill$elm_fast_dict$FastDict$empty;
					case 'GenericType':
						return $miniBill$elm_fast_dict$FastDict$empty;
					default:
						return $miniBill$elm_fast_dict$FastDict$empty;
				}
			case 'TypeTriple':
				var inferredParts = inferredTypeNotVariable.a;
				switch (syntaxType.$) {
					case 'Tupled':
						var syntaxParts = syntaxType.a;
						if (!syntaxParts.b) {
							return $miniBill$elm_fast_dict$FastDict$empty;
						} else {
							if (!syntaxParts.b.b) {
								return $miniBill$elm_fast_dict$FastDict$empty;
							} else {
								if (!syntaxParts.b.b.b) {
									var _v15 = syntaxParts.b;
									return $miniBill$elm_fast_dict$FastDict$empty;
								} else {
									if (!syntaxParts.b.b.b.b) {
										var syntaxPart0 = syntaxParts.a;
										var _v13 = syntaxParts.b;
										var syntaxPart1 = _v13.a;
										var _v14 = _v13.b;
										var syntaxPart2 = _v14.a;
										return A2(
											$miniBill$elm_fast_dict$FastDict$union,
											A2($author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable, inferredParts.part2, syntaxPart2),
											A2(
												$miniBill$elm_fast_dict$FastDict$union,
												A2($author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable, inferredParts.part1, syntaxPart1),
												A2($author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable, inferredParts.part0, syntaxPart0)));
									} else {
										var _v16 = syntaxParts.b;
										var _v17 = _v16.b;
										var _v18 = _v17.b;
										return $miniBill$elm_fast_dict$FastDict$empty;
									}
								}
							}
						}
					case 'Typed':
						return $miniBill$elm_fast_dict$FastDict$empty;
					case 'Record':
						return $miniBill$elm_fast_dict$FastDict$empty;
					case 'FunctionTypeAnnotation':
						return $miniBill$elm_fast_dict$FastDict$empty;
					case 'Unit':
						return $miniBill$elm_fast_dict$FastDict$empty;
					case 'GenericType':
						return $miniBill$elm_fast_dict$FastDict$empty;
					default:
						return $miniBill$elm_fast_dict$FastDict$empty;
				}
			case 'TypeConstruct':
				var inferredTypeConstruct = inferredTypeNotVariable.a;
				switch (syntaxType.$) {
					case 'Typed':
						var syntaxArguments = syntaxType.b;
						return A4(
							$author$project$ElmSyntaxToRust$listFoldl2From,
							$miniBill$elm_fast_dict$FastDict$empty,
							inferredTypeConstruct._arguments,
							syntaxArguments,
							F3(
								function (inferredArgument, syntaxArgument, soFar) {
									return A2(
										$miniBill$elm_fast_dict$FastDict$union,
										soFar,
										A2($author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable, inferredArgument, syntaxArgument));
								}));
					case 'Tupled':
						return $miniBill$elm_fast_dict$FastDict$empty;
					case 'Record':
						return $miniBill$elm_fast_dict$FastDict$empty;
					case 'FunctionTypeAnnotation':
						return $miniBill$elm_fast_dict$FastDict$empty;
					case 'Unit':
						return $miniBill$elm_fast_dict$FastDict$empty;
					case 'GenericType':
						return $miniBill$elm_fast_dict$FastDict$empty;
					default:
						return $miniBill$elm_fast_dict$FastDict$empty;
				}
			case 'TypeRecord':
				var inferredFields = inferredTypeNotVariable.a;
				switch (syntaxType.$) {
					case 'Record':
						var syntaxFields = syntaxType.a;
						return A6(
							$miniBill$elm_fast_dict$FastDict$merge,
							F3(
								function (_v21, _v22, soFar) {
									return soFar;
								}),
							F4(
								function (_v23, inferredFieldValue, syntaxFieldValue, soFar) {
									return A2(
										$miniBill$elm_fast_dict$FastDict$union,
										soFar,
										A2($author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable, inferredFieldValue, syntaxFieldValue));
								}),
							F3(
								function (_v24, _v25, soFar) {
									return soFar;
								}),
							inferredFields,
							A3(
								$elm$core$List$foldl,
								F2(
									function (_v26, soFar) {
										var _v27 = _v26.b;
										var _v28 = _v27.a;
										var fieldName = _v28.b;
										var fieldValue = _v27.b;
										return A3($miniBill$elm_fast_dict$FastDict$insert, fieldName, fieldValue, soFar);
									}),
								$miniBill$elm_fast_dict$FastDict$empty,
								syntaxFields),
							$miniBill$elm_fast_dict$FastDict$empty);
					case 'GenericRecord':
						var _v29 = syntaxType.b;
						var syntaxFields = _v29.b;
						return A6(
							$miniBill$elm_fast_dict$FastDict$merge,
							F3(
								function (_v30, _v31, soFar) {
									return soFar;
								}),
							F4(
								function (_v32, inferredFieldValue, syntaxFieldValue, soFar) {
									return A2(
										$miniBill$elm_fast_dict$FastDict$union,
										soFar,
										A2($author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable, inferredFieldValue, syntaxFieldValue));
								}),
							F3(
								function (_v33, _v34, soFar) {
									return soFar;
								}),
							inferredFields,
							A3(
								$elm$core$List$foldl,
								F2(
									function (_v35, soFar) {
										var _v36 = _v35.b;
										var _v37 = _v36.a;
										var fieldName = _v37.b;
										var fieldValue = _v36.b;
										return A3($miniBill$elm_fast_dict$FastDict$insert, fieldName, fieldValue, soFar);
									}),
								$miniBill$elm_fast_dict$FastDict$empty,
								syntaxFields),
							$miniBill$elm_fast_dict$FastDict$empty);
					case 'Typed':
						return $miniBill$elm_fast_dict$FastDict$empty;
					case 'Tupled':
						return $miniBill$elm_fast_dict$FastDict$empty;
					case 'FunctionTypeAnnotation':
						return $miniBill$elm_fast_dict$FastDict$empty;
					case 'Unit':
						return $miniBill$elm_fast_dict$FastDict$empty;
					default:
						return $miniBill$elm_fast_dict$FastDict$empty;
				}
			default:
				var inferredTypeRecordExtension = inferredTypeNotVariable.a;
				switch (syntaxType.$) {
					case 'GenericRecord':
						var _v39 = syntaxType.a;
						var syntaxRecordVariable = _v39.b;
						var _v40 = syntaxType.b;
						var syntaxFields = _v40.b;
						return A6(
							$miniBill$elm_fast_dict$FastDict$merge,
							F3(
								function (_v41, _v42, soFar) {
									return soFar;
								}),
							F4(
								function (_v43, inferredFieldValue, syntaxFieldValue, soFar) {
									return A2(
										$miniBill$elm_fast_dict$FastDict$union,
										soFar,
										A2($author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable, inferredFieldValue, syntaxFieldValue));
								}),
							F3(
								function (_v44, _v45, soFar) {
									return soFar;
								}),
							inferredTypeRecordExtension.fields,
							A3(
								$elm$core$List$foldl,
								F2(
									function (_v46, soFar) {
										var _v47 = _v46.b;
										var _v48 = _v47.a;
										var fieldName = _v48.b;
										var fieldValue = _v47.b;
										return A3($miniBill$elm_fast_dict$FastDict$insert, fieldName, fieldValue, soFar);
									}),
								$miniBill$elm_fast_dict$FastDict$empty,
								syntaxFields),
							A2($miniBill$elm_fast_dict$FastDict$singleton, inferredTypeRecordExtension.recordVariable.name, syntaxRecordVariable));
					case 'Record':
						return $miniBill$elm_fast_dict$FastDict$empty;
					case 'Typed':
						return $miniBill$elm_fast_dict$FastDict$empty;
					case 'Tupled':
						return $miniBill$elm_fast_dict$FastDict$empty;
					case 'FunctionTypeAnnotation':
						return $miniBill$elm_fast_dict$FastDict$empty;
					case 'Unit':
						return $miniBill$elm_fast_dict$FastDict$empty;
					default:
						return $miniBill$elm_fast_dict$FastDict$empty;
				}
		}
	});
var $author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable = F2(
	function (inferredType, _v0) {
		var syntaxTypePotentiallyParenthesized = _v0.b;
		var syntaxType = $author$project$ElmSyntaxToRust$syntaxTypeToNotParenthesized(syntaxTypePotentiallyParenthesized);
		if (inferredType.$ === 'TypeVariable') {
			var inferredVariable = inferredType.a;
			switch (syntaxType.$) {
				case 'Unit':
					return $miniBill$elm_fast_dict$FastDict$empty;
				case 'GenericType':
					var syntaxVariable = syntaxType.a;
					return A2($miniBill$elm_fast_dict$FastDict$singleton, inferredVariable.name, syntaxVariable);
				case 'GenericRecord':
					var _v3 = syntaxType.a;
					var syntaxRecordVariable = _v3.b;
					return A2($miniBill$elm_fast_dict$FastDict$singleton, inferredVariable.name, syntaxRecordVariable);
				case 'Typed':
					return $miniBill$elm_fast_dict$FastDict$empty;
				case 'Tupled':
					return $miniBill$elm_fast_dict$FastDict$empty;
				case 'Record':
					return $miniBill$elm_fast_dict$FastDict$empty;
				default:
					return $miniBill$elm_fast_dict$FastDict$empty;
			}
		} else {
			var inferredTypeNotVariable = inferredType.a;
			return A2($author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeNotVariableVariableToSyntaxTypeVariable, inferredTypeNotVariable, syntaxType);
		}
	});
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $author$project$ElmSyntaxToRust$listSingletonFastDictEmpty = _List_fromArray(
	[$miniBill$elm_fast_dict$FastDict$empty]);
var $author$project$ElmSyntaxToRust$fastDictPermutations = function (specializations) {
	return A3(
		$miniBill$elm_fast_dict$FastDict$foldl,
		F3(
			function (variable, variableSpecializations, soFar) {
				return A2(
					$elm$core$List$concatMap,
					function (variableSpecialization) {
						return A2(
							$elm$core$List$map,
							function (permutationSoFar) {
								return A3($miniBill$elm_fast_dict$FastDict$insert, variable, variableSpecialization, permutationSoFar);
							},
							soFar);
					},
					variableSpecializations);
			}),
		$author$project$ElmSyntaxToRust$listSingletonFastDictEmpty,
		specializations);
};
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $miniBill$elm_fast_dict$FastSet$foldl = F3(
	function (func, acc, _v0) {
		var set = _v0.a;
		return A3(
			$miniBill$elm_fast_dict$FastDict$foldl,
			F3(
				function (v, _v1, iacc) {
					return A2(func, v, iacc);
				}),
			acc,
			set);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$implicitImports = _List_fromArray(
	[
		{
		alias: $elm$core$Maybe$Nothing,
		moduleName: 'Basics',
		referenceExposes: _List_fromArray(
			['(+)', '(-)', '(*)', '(/)', '(//)', '(^)', 'toFloat', 'round', 'floor', 'ceiling', 'truncate', '(==)', '(/=)', '(<)', '(>)', '(<=)', '(>=)', 'max', 'min', 'compare', 'LT', 'EQ', 'GT', 'True', 'False', 'not', '(&&)', '(||)', 'xor', '(++)', 'modBy', 'remainderBy', 'negate', 'abs', 'clamp', 'sqrt', 'logBase', 'e', 'pi', 'cos', 'sin', 'tan', 'acos', 'asin', 'atan', 'atan2', 'degrees', 'radians', 'turns', 'toPolar', 'fromPolar', 'isNaN', 'isInfinite', 'identity', 'always', '(<|)', '(|>)', '(<<)', '(>>)', 'never']),
		typeExposes: _List_fromArray(
			['Int', 'Float', 'Order', 'Bool', 'Never'])
	},
		{
		alias: $elm$core$Maybe$Nothing,
		moduleName: 'List',
		referenceExposes: _List_fromArray(
			['(::)']),
		typeExposes: _List_fromArray(
			['List'])
	},
		{
		alias: $elm$core$Maybe$Nothing,
		moduleName: 'Maybe',
		referenceExposes: _List_fromArray(
			['Just', 'Nothing']),
		typeExposes: _List_fromArray(
			['Maybe'])
	},
		{
		alias: $elm$core$Maybe$Nothing,
		moduleName: 'Result',
		referenceExposes: _List_fromArray(
			['Ok', 'Err']),
		typeExposes: _List_fromArray(
			['Result'])
	},
		{
		alias: $elm$core$Maybe$Nothing,
		moduleName: 'String',
		referenceExposes: _List_Nil,
		typeExposes: _List_fromArray(
			['String'])
	},
		{
		alias: $elm$core$Maybe$Nothing,
		moduleName: 'Char',
		referenceExposes: _List_Nil,
		typeExposes: _List_fromArray(
			['Char'])
	},
		{alias: $elm$core$Maybe$Nothing, moduleName: 'Tuple', referenceExposes: _List_Nil, typeExposes: _List_Nil},
		{alias: $elm$core$Maybe$Nothing, moduleName: 'Debug', referenceExposes: _List_Nil, typeExposes: _List_Nil},
		{
		alias: $elm$core$Maybe$Nothing,
		moduleName: 'Platform',
		referenceExposes: _List_Nil,
		typeExposes: _List_fromArray(
			['Program'])
	},
		{
		alias: $elm$core$Maybe$Just('Cmd'),
		moduleName: 'Platform.Cmd',
		referenceExposes: _List_Nil,
		typeExposes: _List_fromArray(
			['Cmd'])
	},
		{
		alias: $elm$core$Maybe$Just('Sub'),
		moduleName: 'Platform.Sub',
		referenceExposes: _List_Nil,
		typeExposes: _List_fromArray(
			['Sub'])
	}
	]);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$moduleNameToString = function (moduleName) {
	return A2($elm$core$String$join, '.', moduleName);
};
var $stil4m$elm_syntax$Elm$Syntax$Node$value = function (_v0) {
	var v = _v0.b;
	return v;
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importToNormal = F2(
	function (modulesTypes, syntaxImport) {
		var importModuleName = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$moduleNameToString(
			$stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxImport.moduleName));
		return {
			alias: A2(
				$elm$core$Maybe$map,
				function (_v0) {
					var syntaxAlias = _v0.b;
					return A2($elm$core$String$join, '.', syntaxAlias);
				},
				syntaxImport.moduleAlias),
			moduleName: importModuleName,
			referenceExposes: function () {
				var _v1 = syntaxImport.exposingList;
				if (_v1.$ === 'Nothing') {
					return _List_Nil;
				} else {
					var _v2 = _v1.a;
					var syntaxExposing = _v2.b;
					var _v3 = A2($miniBill$elm_fast_dict$FastDict$get, importModuleName, modulesTypes);
					if (_v3.$ === 'Nothing') {
						return _List_Nil;
					} else {
						var moduleTypes = _v3.a;
						if (syntaxExposing.$ === 'All') {
							return A3(
								$miniBill$elm_fast_dict$FastDict$foldl,
								F3(
									function (typeAliasName, info, soFar) {
										var _v5 = info.recordFieldOrder;
										if (_v5.$ === 'Nothing') {
											return soFar;
										} else {
											return A2($elm$core$List$cons, typeAliasName, soFar);
										}
									}),
								A3(
									$miniBill$elm_fast_dict$FastDict$foldl,
									F3(
										function (_v6, choiceTypeInfo, soFar) {
											return A3(
												$miniBill$elm_fast_dict$FastDict$foldl,
												F3(
													function (variantName, _v7, soFarWithVariants) {
														return A2($elm$core$List$cons, variantName, soFarWithVariants);
													}),
												soFar,
												choiceTypeInfo.variants);
										}),
									$miniBill$elm_fast_dict$FastDict$keys(moduleTypes.signatures),
									moduleTypes.choiceTypes),
								moduleTypes.typeAliases);
						} else {
							var exposes = syntaxExposing.a;
							return A3(
								$elm$core$List$foldl,
								F2(
									function (_v8, namesSoFar) {
										var expose = _v8.b;
										switch (expose.$) {
											case 'TypeOrAliasExpose':
												var opaqueTypeOrTypeAliasName = expose.a;
												var _v10 = A2($miniBill$elm_fast_dict$FastDict$get, opaqueTypeOrTypeAliasName, moduleTypes.typeAliases);
												if (_v10.$ === 'Nothing') {
													return namesSoFar;
												} else {
													var typeAlias = _v10.a;
													var _v11 = typeAlias.recordFieldOrder;
													if (_v11.$ === 'Nothing') {
														return namesSoFar;
													} else {
														return A2($elm$core$List$cons, opaqueTypeOrTypeAliasName, namesSoFar);
													}
												}
											case 'InfixExpose':
												var operator = expose.a;
												return A2($elm$core$List$cons, operator, namesSoFar);
											case 'FunctionExpose':
												var name = expose.a;
												return A2($elm$core$List$cons, name, namesSoFar);
											default:
												var choiceTypeExpose = expose.a;
												var _v12 = choiceTypeExpose.open;
												if (_v12.$ === 'Nothing') {
													return namesSoFar;
												} else {
													var _v13 = A2($miniBill$elm_fast_dict$FastDict$get, choiceTypeExpose.name, moduleTypes.choiceTypes);
													if (_v13.$ === 'Nothing') {
														return namesSoFar;
													} else {
														var choiceTypeDeclared = _v13.a;
														return A3(
															$miniBill$elm_fast_dict$FastDict$foldl,
															F3(
																function (name, _v14, namesSoFarWithVariantNames) {
																	return A2($elm$core$List$cons, name, namesSoFarWithVariantNames);
																}),
															namesSoFar,
															choiceTypeDeclared.variants);
													}
												}
										}
									}),
								_List_Nil,
								exposes);
						}
					}
				}
			}(),
			typeExposes: function () {
				var _v15 = syntaxImport.exposingList;
				if (_v15.$ === 'Nothing') {
					return _List_Nil;
				} else {
					var _v16 = _v15.a;
					var syntaxExposing = _v16.b;
					var _v17 = A2($miniBill$elm_fast_dict$FastDict$get, importModuleName, modulesTypes);
					if (_v17.$ === 'Nothing') {
						return _List_Nil;
					} else {
						var moduleTypes = _v17.a;
						if (syntaxExposing.$ === 'All') {
							return A3(
								$miniBill$elm_fast_dict$FastDict$foldl,
								F3(
									function (choiceTypeName, _v19, soFar) {
										return A2($elm$core$List$cons, choiceTypeName, soFar);
									}),
								$miniBill$elm_fast_dict$FastDict$keys(moduleTypes.typeAliases),
								moduleTypes.choiceTypes);
						} else {
							var exposes = syntaxExposing.a;
							return A2(
								$elm$core$List$filterMap,
								function (_v20) {
									var expose = _v20.b;
									switch (expose.$) {
										case 'InfixExpose':
											return $elm$core$Maybe$Nothing;
										case 'FunctionExpose':
											return $elm$core$Maybe$Nothing;
										case 'TypeOrAliasExpose':
											var name = expose.a;
											return $elm$core$Maybe$Just(name);
										default:
											var choiceTypeExpose = expose.a;
											return $elm$core$Maybe$Just(choiceTypeExpose.name);
									}
								},
								exposes);
						}
					}
				}
			}()
		};
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$exposesCombineFrom = F2(
	function (soFar, syntaxExposes) {
		exposesCombineFrom:
		while (true) {
			if (!syntaxExposes.b) {
				return soFar;
			} else {
				if (!syntaxExposes.b.b) {
					var onlyExpose = syntaxExposes.a;
					return A2($elm$core$List$cons, onlyExpose, soFar);
				} else {
					var expose0 = syntaxExposes.a;
					var _v1 = syntaxExposes.b;
					var expose1 = _v1.a;
					var expose2Up = _v1.b;
					var _v2 = A2($elm$core$Basics$compare, expose0, expose1);
					switch (_v2.$) {
						case 'EQ':
							var $temp$soFar = soFar,
								$temp$syntaxExposes = A2($elm$core$List$cons, expose0, expose2Up);
							soFar = $temp$soFar;
							syntaxExposes = $temp$syntaxExposes;
							continue exposesCombineFrom;
						case 'LT':
							var $temp$soFar = A2($elm$core$List$cons, expose0, soFar),
								$temp$syntaxExposes = A2($elm$core$List$cons, expose1, expose2Up);
							soFar = $temp$soFar;
							syntaxExposes = $temp$syntaxExposes;
							continue exposesCombineFrom;
						default:
							var $temp$soFar = A2($elm$core$List$cons, expose0, soFar),
								$temp$syntaxExposes = A2($elm$core$List$cons, expose1, expose2Up);
							soFar = $temp$soFar;
							syntaxExposes = $temp$syntaxExposes;
							continue exposesCombineFrom;
					}
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$exposesCombine = function (syntaxExposes) {
	return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$exposesCombineFrom, _List_Nil, syntaxExposes);
};
var $elm$core$List$sortBy = _List_sortBy;
var $elm$core$List$sort = function (xs) {
	return A2($elm$core$List$sortBy, $elm$core$Basics$identity, xs);
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$exposeListToNormal = function (syntaxExposeList) {
	return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$exposesCombine(
		$elm$core$List$sort(syntaxExposeList));
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listAppendFastButInReverseOrder = F2(
	function (aList, bList) {
		listAppendFastButInReverseOrder:
		while (true) {
			if (!aList.b) {
				return bList;
			} else {
				var aHead = aList.a;
				var aTail = aList.b;
				var $temp$aList = aTail,
					$temp$bList = A2($elm$core$List$cons, aHead, bList);
				aList = $temp$aList;
				bList = $temp$bList;
				continue listAppendFastButInReverseOrder;
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$exposingCombine = F2(
	function (a, b) {
		return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$exposeListToNormal(
			A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listAppendFastButInReverseOrder, a, b));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importsMerge = F2(
	function (earlier, later) {
		return {
			alias: function () {
				var _v0 = earlier.alias;
				if (_v0.$ === 'Just') {
					var alias = _v0.a;
					return $elm$core$Maybe$Just(alias);
				} else {
					return later.alias;
				}
			}(),
			moduleName: earlier.moduleName,
			referenceExposes: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$exposingCombine, earlier.referenceExposes, later.referenceExposes),
			typeExposes: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$exposingCombine, earlier.typeExposes, later.typeExposes)
		};
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importsCombineFrom = F2(
	function (soFar, syntaxImports) {
		importsCombineFrom:
		while (true) {
			if (!syntaxImports.b) {
				return soFar;
			} else {
				if (!syntaxImports.b.b) {
					var onlyImport = syntaxImports.a;
					return A2($elm$core$List$cons, onlyImport, soFar);
				} else {
					var import0 = syntaxImports.a;
					var _v1 = syntaxImports.b;
					var import1 = _v1.a;
					var import2Up = _v1.b;
					if (_Utils_eq(import0.moduleName, import1.moduleName)) {
						var $temp$soFar = soFar,
							$temp$syntaxImports = A2(
							$elm$core$List$cons,
							A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importsMerge, import0, import1),
							import2Up);
						soFar = $temp$soFar;
						syntaxImports = $temp$syntaxImports;
						continue importsCombineFrom;
					} else {
						var $temp$soFar = A2($elm$core$List$cons, import0, soFar),
							$temp$syntaxImports = A2($elm$core$List$cons, import1, import2Up);
						soFar = $temp$soFar;
						syntaxImports = $temp$syntaxImports;
						continue importsCombineFrom;
					}
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importsCombine = function (syntaxImports) {
	return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importsCombineFrom, _List_Nil, syntaxImports);
};
var $miniBill$elm_fast_dict$FastDict$getMinInner = function (n) {
	getMinInner:
	while (true) {
		if (n.$ === 'Leaf') {
			return $elm$core$Maybe$Nothing;
		} else {
			if (n.d.$ === 'Leaf') {
				var k = n.b;
				var v = n.c;
				var _v1 = n.d;
				return $elm$core$Maybe$Just(
					_Utils_Tuple2(k, v));
			} else {
				var l = n.d;
				var $temp$n = l;
				n = $temp$n;
				continue getMinInner;
			}
		}
	}
};
var $miniBill$elm_fast_dict$FastDict$moveRedLeft = F5(
	function (clr, k, v, left, right) {
		if (left.$ === 'InnerNode') {
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			if (right.$ === 'InnerNode') {
				if ((right.d.$ === 'InnerNode') && (right.d.a.$ === 'Red')) {
					var rK = right.b;
					var rV = right.c;
					var _v2 = right.d;
					var _v3 = _v2.a;
					var rlK = _v2.b;
					var rlV = _v2.c;
					var rlL = _v2.d;
					var rlR = _v2.e;
					var rRight = right.e;
					return {
						color: $miniBill$elm_fast_dict$Internal$Red,
						k: rlK,
						left: A5(
							$miniBill$elm_fast_dict$Internal$InnerNode,
							$miniBill$elm_fast_dict$Internal$Black,
							k,
							v,
							A5($miniBill$elm_fast_dict$Internal$InnerNode, $miniBill$elm_fast_dict$Internal$Red, lK, lV, lLeft, lRight),
							rlL),
						right: A5($miniBill$elm_fast_dict$Internal$InnerNode, $miniBill$elm_fast_dict$Internal$Black, rK, rV, rlR, rRight),
						v: rlV
					};
				} else {
					var rK = right.b;
					var rV = right.c;
					var rLeft = right.d;
					var rRight = right.e;
					return {
						color: $miniBill$elm_fast_dict$Internal$Black,
						k: k,
						left: A5($miniBill$elm_fast_dict$Internal$InnerNode, $miniBill$elm_fast_dict$Internal$Red, lK, lV, lLeft, lRight),
						right: A5($miniBill$elm_fast_dict$Internal$InnerNode, $miniBill$elm_fast_dict$Internal$Red, rK, rV, rLeft, rRight),
						v: v
					};
				}
			} else {
				return {color: clr, k: k, left: left, right: right, v: v};
			}
		} else {
			return {color: clr, k: k, left: left, right: right, v: v};
		}
	});
var $miniBill$elm_fast_dict$FastDict$moveRedRight = function (key) {
	return function (value) {
		return function (lK) {
			return function (lV) {
				return function (lLeft) {
					return function (lRight) {
						return function (rK) {
							return function (rV) {
								return function (rLeft) {
									return function (rRight) {
										if ((lLeft.$ === 'InnerNode') && (lLeft.a.$ === 'Red')) {
											var _v1 = lLeft.a;
											var llK = lLeft.b;
											var llV = lLeft.c;
											var llLeft = lLeft.d;
											var llRight = lLeft.e;
											return A5(
												$miniBill$elm_fast_dict$Internal$InnerNode,
												$miniBill$elm_fast_dict$Internal$Red,
												lK,
												lV,
												A5($miniBill$elm_fast_dict$Internal$InnerNode, $miniBill$elm_fast_dict$Internal$Black, llK, llV, llLeft, llRight),
												A5(
													$miniBill$elm_fast_dict$Internal$InnerNode,
													$miniBill$elm_fast_dict$Internal$Black,
													key,
													value,
													lRight,
													A5($miniBill$elm_fast_dict$Internal$InnerNode, $miniBill$elm_fast_dict$Internal$Red, rK, rV, rLeft, rRight)));
										} else {
											return A5(
												$miniBill$elm_fast_dict$Internal$InnerNode,
												$miniBill$elm_fast_dict$Internal$Black,
												key,
												value,
												A5($miniBill$elm_fast_dict$Internal$InnerNode, $miniBill$elm_fast_dict$Internal$Red, lK, lV, lLeft, lRight),
												A5($miniBill$elm_fast_dict$Internal$InnerNode, $miniBill$elm_fast_dict$Internal$Red, rK, rV, rLeft, rRight));
										}
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $miniBill$elm_fast_dict$FastDict$removeHelpPrepEQGT = F6(
	function (dict, color, key, value, left, right) {
		if (left.$ === 'InnerNode') {
			if (left.a.$ === 'Red') {
				var _v1 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$miniBill$elm_fast_dict$Internal$InnerNode,
					color,
					lK,
					lV,
					lLeft,
					A5($miniBill$elm_fast_dict$Internal$InnerNode, $miniBill$elm_fast_dict$Internal$Red, key, value, lRight, right));
			} else {
				var _v2 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				_v3$2:
				while (true) {
					if ((right.$ === 'InnerNode') && (right.a.$ === 'Black')) {
						if (right.d.$ === 'InnerNode') {
							if (right.d.a.$ === 'Black') {
								var _v4 = right.a;
								var rK = right.b;
								var rV = right.c;
								var rLeft = right.d;
								var _v5 = rLeft.a;
								var rRight = right.e;
								return $miniBill$elm_fast_dict$FastDict$moveRedRight(key)(value)(lK)(lV)(lLeft)(lRight)(rK)(rV)(rLeft)(rRight);
							} else {
								break _v3$2;
							}
						} else {
							var _v6 = right.a;
							var rK = right.b;
							var rV = right.c;
							var _v7 = right.d;
							var rRight = right.e;
							return $miniBill$elm_fast_dict$FastDict$moveRedRight(key)(value)(lK)(lV)(lLeft)(lRight)(rK)(rV)($miniBill$elm_fast_dict$Internal$Leaf)(rRight);
						}
					} else {
						break _v3$2;
					}
				}
				return dict;
			}
		} else {
			return dict;
		}
	});
var $miniBill$elm_fast_dict$FastDict$removeMin = function (dict) {
	if ((dict.$ === 'InnerNode') && (dict.d.$ === 'InnerNode')) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor.$ === 'Black') {
			if ((lLeft.$ === 'InnerNode') && (lLeft.a.$ === 'Red')) {
				var _v3 = lLeft.a;
				return A5(
					$miniBill$elm_fast_dict$Internal$InnerNode,
					color,
					key,
					value,
					$miniBill$elm_fast_dict$FastDict$removeMin(left),
					right);
			} else {
				var res = A5($miniBill$elm_fast_dict$FastDict$moveRedLeft, color, key, value, left, right);
				return A5(
					$miniBill$elm_fast_dict$Internal$balance,
					res.color,
					res.k,
					res.v,
					$miniBill$elm_fast_dict$FastDict$removeMin(res.left),
					res.right);
			}
		} else {
			return A5(
				$miniBill$elm_fast_dict$Internal$InnerNode,
				color,
				key,
				value,
				$miniBill$elm_fast_dict$FastDict$removeMin(left),
				right);
		}
	} else {
		return $miniBill$elm_fast_dict$Internal$Leaf;
	}
};
var $miniBill$elm_fast_dict$FastDict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === 'Leaf') {
			return $elm$core$Maybe$Nothing;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === 'InnerNode') && (left.a.$ === 'Black')) {
					var _v6 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === 'InnerNode') && (lLeft.a.$ === 'Red')) {
						var _v8 = lLeft.a;
						var _v9 = A2($miniBill$elm_fast_dict$FastDict$removeHelp, targetKey, left);
						if (_v9.$ === 'Just') {
							var newLeft = _v9.a;
							return $elm$core$Maybe$Just(
								A5($miniBill$elm_fast_dict$Internal$InnerNode, color, key, value, newLeft, right));
						} else {
							return $elm$core$Maybe$Nothing;
						}
					} else {
						var res = A5($miniBill$elm_fast_dict$FastDict$moveRedLeft, color, key, value, left, right);
						var _v10 = A2($miniBill$elm_fast_dict$FastDict$removeHelp, targetKey, res.left);
						if (_v10.$ === 'Just') {
							var newLeft = _v10.a;
							return $elm$core$Maybe$Just(
								A5($miniBill$elm_fast_dict$Internal$balance, res.color, res.k, res.v, newLeft, res.right));
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}
				} else {
					var _v11 = A2($miniBill$elm_fast_dict$FastDict$removeHelp, targetKey, left);
					if (_v11.$ === 'Just') {
						var newLeft = _v11.a;
						return $elm$core$Maybe$Just(
							A5($miniBill$elm_fast_dict$Internal$InnerNode, color, key, value, newLeft, right));
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}
			} else {
				return A2(
					$miniBill$elm_fast_dict$FastDict$removeHelpEQGT,
					targetKey,
					A6($miniBill$elm_fast_dict$FastDict$removeHelpPrepEQGT, dict, color, key, value, left, right));
			}
		}
	});
var $miniBill$elm_fast_dict$FastDict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === 'InnerNode') {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $miniBill$elm_fast_dict$FastDict$getMinInner(right);
				if (_v1.$ === 'Just') {
					var _v2 = _v1.a;
					var minKey = _v2.a;
					var minValue = _v2.b;
					return $elm$core$Maybe$Just(
						A5(
							$miniBill$elm_fast_dict$Internal$balance,
							color,
							minKey,
							minValue,
							left,
							$miniBill$elm_fast_dict$FastDict$removeMin(right)));
				} else {
					return $elm$core$Maybe$Just($miniBill$elm_fast_dict$Internal$Leaf);
				}
			} else {
				var _v3 = A2($miniBill$elm_fast_dict$FastDict$removeHelp, targetKey, right);
				if (_v3.$ === 'Just') {
					var newRight = _v3.a;
					return $elm$core$Maybe$Just(
						A5($miniBill$elm_fast_dict$Internal$balance, color, key, value, left, newRight));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $miniBill$elm_fast_dict$FastDict$remove = F2(
	function (key, orig) {
		var sz = orig.a;
		var dict = orig.b;
		var _v0 = A2($miniBill$elm_fast_dict$FastDict$removeHelp, key, dict);
		if (_v0.$ === 'Just') {
			var result = _v0.a;
			return A2(
				$miniBill$elm_fast_dict$Internal$Dict,
				sz - 1,
				$miniBill$elm_fast_dict$Internal$setRootBlack(result));
		} else {
			return orig;
		}
	});
var $miniBill$elm_fast_dict$FastDict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($miniBill$elm_fast_dict$FastDict$get, targetKey, dictionary));
		if (_v0.$ === 'Just') {
			var value = _v0.a;
			return A3($miniBill$elm_fast_dict$FastDict$insert, targetKey, value, dictionary);
		} else {
			return A2($miniBill$elm_fast_dict$FastDict$remove, targetKey, dictionary);
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importsToModuleOriginLookup = F2(
	function (modulesTypes, imports) {
		var importsNormal = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importsCombine(
			A3(
				$elm$core$List$foldl,
				F2(
					function (_v9, importNormalsSoFar) {
						var syntaxImport = _v9.b;
						return A2(
							$elm$core$List$cons,
							A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importToNormal, modulesTypes, syntaxImport),
							importNormalsSoFar);
					}),
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$implicitImports,
				imports));
		var operatorIsExposedFromParserAdvanced = function (operator) {
			return A2(
				$elm$core$List$any,
				function (syntaxImport) {
					var _v8 = syntaxImport.moduleName;
					if (_v8 === 'Parser.Advanced') {
						return A2(
							$elm$core$List$any,
							function (syntaxExpose) {
								return _Utils_eq(syntaxExpose, operator) || _Utils_eq(syntaxExpose, '(' + (operator + ')'));
							},
							syntaxImport.referenceExposes);
					} else {
						return false;
					}
				},
				importsNormal);
		};
		return A3(
			$elm$core$List$foldl,
			F2(
				function (syntaxImport, soFar) {
					var _v0 = A2($miniBill$elm_fast_dict$FastDict$get, syntaxImport.moduleName, modulesTypes);
					if (_v0.$ === 'Nothing') {
						return soFar;
					} else {
						var moduleTypes = _v0.a;
						var moduleAliasOrFullName = function () {
							var _v7 = syntaxImport.alias;
							if (_v7.$ === 'Nothing') {
								return syntaxImport.moduleName;
							} else {
								var importAlias = _v7.a;
								return importAlias;
							}
						}();
						return {
							ignoreOperatorIsExposedFromParserAdvanced: soFar.ignoreOperatorIsExposedFromParserAdvanced,
							keepOperatorIsExposedFromParserAdvanced: soFar.keepOperatorIsExposedFromParserAdvanced,
							references: A3(
								$miniBill$elm_fast_dict$FastDict$update,
								moduleAliasOrFullName,
								function (soFarReferencesWithSameModuleNameOrAlias) {
									return $elm$core$Maybe$Just(
										A3(
											$miniBill$elm_fast_dict$FastDict$foldl,
											F3(
												function (_v1, choiceType, variantNamesSoFar) {
													return A3(
														$miniBill$elm_fast_dict$FastDict$foldl,
														F3(
															function (variantName, _v2, soFarAndVariantNamesOfCurrentChoiceType) {
																return A3($miniBill$elm_fast_dict$FastDict$insert, variantName, syntaxImport.moduleName, soFarAndVariantNamesOfCurrentChoiceType);
															}),
														variantNamesSoFar,
														choiceType.variants);
												}),
											A3(
												$miniBill$elm_fast_dict$FastDict$foldl,
												F3(
													function (reference, _v3, referenceNamesSoFar) {
														return A3($miniBill$elm_fast_dict$FastDict$insert, reference, syntaxImport.moduleName, referenceNamesSoFar);
													}),
												A3(
													$miniBill$elm_fast_dict$FastDict$foldl,
													F3(
														function (typeAliasName, typeAliasInfo, recordTypeALiasNamesSoFar) {
															var _v4 = typeAliasInfo.recordFieldOrder;
															if (_v4.$ === 'Nothing') {
																return recordTypeALiasNamesSoFar;
															} else {
																return A3($miniBill$elm_fast_dict$FastDict$insert, typeAliasName, syntaxImport.moduleName, recordTypeALiasNamesSoFar);
															}
														}),
													A2($elm$core$Maybe$withDefault, $miniBill$elm_fast_dict$FastDict$empty, soFarReferencesWithSameModuleNameOrAlias),
													moduleTypes.typeAliases),
												moduleTypes.signatures),
											moduleTypes.choiceTypes));
								},
								A3(
									$miniBill$elm_fast_dict$FastDict$update,
									'',
									function (exposedReferencesSoFar) {
										return $elm$core$Maybe$Just(
											A3(
												$elm$core$List$foldl,
												F2(
													function (expose, referencesSoFarAndImportExposed) {
														return A3($miniBill$elm_fast_dict$FastDict$insert, expose, syntaxImport.moduleName, referencesSoFarAndImportExposed);
													}),
												A2($elm$core$Maybe$withDefault, $miniBill$elm_fast_dict$FastDict$empty, exposedReferencesSoFar),
												syntaxImport.referenceExposes));
									},
									soFar.references)),
							typeConstructs: A3(
								$miniBill$elm_fast_dict$FastDict$update,
								moduleAliasOrFullName,
								function (soFarTypeConstructsWithSameModuleNameOrAlias) {
									return $elm$core$Maybe$Just(
										A3(
											$miniBill$elm_fast_dict$FastDict$foldl,
											F3(
												function (choiceTypeName, _v5, variantNamesSoFar) {
													return A3($miniBill$elm_fast_dict$FastDict$insert, choiceTypeName, syntaxImport.moduleName, variantNamesSoFar);
												}),
											A3(
												$miniBill$elm_fast_dict$FastDict$foldl,
												F3(
													function (typeAliasName, _v6, referenceNamesSoFar) {
														return A3($miniBill$elm_fast_dict$FastDict$insert, typeAliasName, syntaxImport.moduleName, referenceNamesSoFar);
													}),
												A2($elm$core$Maybe$withDefault, $miniBill$elm_fast_dict$FastDict$empty, soFarTypeConstructsWithSameModuleNameOrAlias),
												moduleTypes.typeAliases),
											moduleTypes.choiceTypes));
								},
								A3(
									$miniBill$elm_fast_dict$FastDict$update,
									'',
									function (typeConstructsExposedSoFar) {
										return $elm$core$Maybe$Just(
											A3(
												$elm$core$List$foldl,
												F2(
													function (expose, typeConstructsSoFarAndImportExposed) {
														return A3($miniBill$elm_fast_dict$FastDict$insert, expose, syntaxImport.moduleName, typeConstructsSoFarAndImportExposed);
													}),
												A2($elm$core$Maybe$withDefault, $miniBill$elm_fast_dict$FastDict$empty, typeConstructsExposedSoFar),
												syntaxImport.typeExposes));
									},
									soFar.typeConstructs))
						};
					}
				}),
			{
				ignoreOperatorIsExposedFromParserAdvanced: operatorIsExposedFromParserAdvanced('|='),
				keepOperatorIsExposedFromParserAdvanced: operatorIsExposedFromParserAdvanced('|.'),
				references: $miniBill$elm_fast_dict$FastDict$empty,
				typeConstructs: $miniBill$elm_fast_dict$FastDict$empty
			},
			importsNormal);
	});
var $author$project$ElmSyntaxToRust$fastDictAny = F2(
	function (keyValueToIsUsual, fastDict) {
		return A3(
			$miniBill$elm_fast_dict$FastDict$foldl,
			F3(
				function (key, value, soFar) {
					return soFar || A2(keyValueToIsUsual, key, value);
				}),
			false,
			fastDict);
	});
var $author$project$ElmSyntaxToRust$inferredTypeContainsExtensibleRecord = function (inferredType) {
	if (inferredType.$ === 'TypeVariable') {
		return false;
	} else {
		var inferredTypeNotVariable = inferredType.a;
		return $author$project$ElmSyntaxToRust$inferredTypeNotVariableContainsExtensibleRecord(inferredTypeNotVariable);
	}
};
var $author$project$ElmSyntaxToRust$inferredTypeNotVariableContainsExtensibleRecord = function (inferredTypeNotVariable) {
	switch (inferredTypeNotVariable.$) {
		case 'TypeUnit':
			return false;
		case 'TypeRecordExtension':
			return true;
		case 'TypeFunction':
			var typeFunction = inferredTypeNotVariable.a;
			return $author$project$ElmSyntaxToRust$inferredTypeContainsExtensibleRecord(typeFunction.input) || $author$project$ElmSyntaxToRust$inferredTypeContainsExtensibleRecord(typeFunction.output);
		case 'TypeTuple':
			var parts = inferredTypeNotVariable.a;
			return $author$project$ElmSyntaxToRust$inferredTypeContainsExtensibleRecord(parts.part0) || $author$project$ElmSyntaxToRust$inferredTypeContainsExtensibleRecord(parts.part1);
		case 'TypeTriple':
			var parts = inferredTypeNotVariable.a;
			return $author$project$ElmSyntaxToRust$inferredTypeContainsExtensibleRecord(parts.part0) || ($author$project$ElmSyntaxToRust$inferredTypeContainsExtensibleRecord(parts.part1) || $author$project$ElmSyntaxToRust$inferredTypeContainsExtensibleRecord(parts.part2));
		case 'TypeConstruct':
			var typeConstruct = inferredTypeNotVariable.a;
			return A2($elm$core$List$any, $author$project$ElmSyntaxToRust$inferredTypeContainsExtensibleRecord, typeConstruct._arguments);
		default:
			var fields = inferredTypeNotVariable.a;
			return A2(
				$author$project$ElmSyntaxToRust$fastDictAny,
				F2(
					function (_v1, fieldValue) {
						return $author$project$ElmSyntaxToRust$inferredTypeContainsExtensibleRecord(fieldValue);
					}),
				fields);
	}
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension = function (a) {
	return {$: 'TypeRecordExtension', a: a};
};
var $author$project$ElmSyntaxToRust$inferredTypeExpand = F2(
	function (expansions, inferredType) {
		if (inferredType.$ === 'TypeVariable') {
			var variable = inferredType.a;
			var _v7 = A2($miniBill$elm_fast_dict$FastDict$get, variable.name, expansions);
			if (_v7.$ === 'Nothing') {
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(variable);
			} else {
				var expanded = _v7.a;
				return expanded;
			}
		} else {
			var inferredTypeNotVariable = inferredType.a;
			return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
				A2($author$project$ElmSyntaxToRust$inferredTypeNotVariableExpand, expansions, inferredTypeNotVariable));
		}
	});
var $author$project$ElmSyntaxToRust$inferredTypeNotVariableExpand = F2(
	function (expansions, syntaxType) {
		switch (syntaxType.$) {
			case 'TypeUnit':
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit;
			case 'TypeFunction':
				var typeFunction = syntaxType.a;
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
					{
						input: A2($author$project$ElmSyntaxToRust$inferredTypeExpand, expansions, typeFunction.input),
						output: A2($author$project$ElmSyntaxToRust$inferredTypeExpand, expansions, typeFunction.output)
					});
			case 'TypeTuple':
				var parts = syntaxType.a;
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
					{
						part0: A2($author$project$ElmSyntaxToRust$inferredTypeExpand, expansions, parts.part0),
						part1: A2($author$project$ElmSyntaxToRust$inferredTypeExpand, expansions, parts.part1)
					});
			case 'TypeTriple':
				var parts = syntaxType.a;
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple(
					{
						part0: A2($author$project$ElmSyntaxToRust$inferredTypeExpand, expansions, parts.part0),
						part1: A2($author$project$ElmSyntaxToRust$inferredTypeExpand, expansions, parts.part1),
						part2: A2($author$project$ElmSyntaxToRust$inferredTypeExpand, expansions, parts.part2)
					});
			case 'TypeConstruct':
				var typeConstruct = syntaxType.a;
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
					{
						_arguments: A2(
							$elm$core$List$map,
							function (value) {
								return A2($author$project$ElmSyntaxToRust$inferredTypeExpand, expansions, value);
							},
							typeConstruct._arguments),
						moduleOrigin: typeConstruct.moduleOrigin,
						name: typeConstruct.name
					});
			case 'TypeRecord':
				var fields = syntaxType.a;
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(
					A2(
						$miniBill$elm_fast_dict$FastDict$map,
						F2(
							function (_v1, value) {
								return A2($author$project$ElmSyntaxToRust$inferredTypeExpand, expansions, value);
							}),
						fields));
			default:
				var typeRecordExtension = syntaxType.a;
				var fieldsExpanded = A2(
					$miniBill$elm_fast_dict$FastDict$map,
					F2(
						function (_v5, value) {
							return A2($author$project$ElmSyntaxToRust$inferredTypeExpand, expansions, value);
						}),
					typeRecordExtension.fields);
				var _v2 = A2($miniBill$elm_fast_dict$FastDict$get, typeRecordExtension.recordVariable.name, expansions);
				if (_v2.$ === 'Nothing') {
					return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(
						{fields: fieldsExpanded, recordVariable: typeRecordExtension.recordVariable});
				} else {
					var expanded = _v2.a;
					if (expanded.$ === 'TypeVariable') {
						var expandedRecordVariable = expanded.a;
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(
							{fields: fieldsExpanded, recordVariable: expandedRecordVariable});
					} else {
						var expandedTypeNotVariable = expanded.a;
						switch (expandedTypeNotVariable.$) {
							case 'TypeUnit':
								return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(
									{fields: fieldsExpanded, recordVariable: typeRecordExtension.recordVariable});
							case 'TypeFunction':
								return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(
									{fields: fieldsExpanded, recordVariable: typeRecordExtension.recordVariable});
							case 'TypeTuple':
								return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(
									{fields: fieldsExpanded, recordVariable: typeRecordExtension.recordVariable});
							case 'TypeTriple':
								return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(
									{fields: fieldsExpanded, recordVariable: typeRecordExtension.recordVariable});
							case 'TypeRecord':
								var expandedFields = expandedTypeNotVariable.a;
								return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(
									A2($miniBill$elm_fast_dict$FastDict$union, typeRecordExtension.fields, expandedFields));
							case 'TypeConstruct':
								return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(
									{fields: fieldsExpanded, recordVariable: typeRecordExtension.recordVariable});
							default:
								var expandedRecordExtension = expandedTypeNotVariable.a;
								return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(
									{
										fields: A2($miniBill$elm_fast_dict$FastDict$union, typeRecordExtension.fields, expandedRecordExtension.fields),
										recordVariable: expandedRecordExtension.recordVariable
									});
						}
					}
				}
		}
	});
var $author$project$ElmSyntaxToRust$inferredTypeUnit = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit);
var $author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases = F2(
	function (typeAliasesInModule, syntaxType) {
		if (syntaxType.$ === 'TypeVariable') {
			return syntaxType;
		} else {
			var inferredTypeNotVariable = syntaxType.a;
			return A2($author$project$ElmSyntaxToRust$inferredTypeNotVariableExpandInnerAliases, typeAliasesInModule, inferredTypeNotVariable);
		}
	});
var $author$project$ElmSyntaxToRust$inferredTypeNotVariableExpandInnerAliases = F2(
	function (typeAliasesInModule, syntaxType) {
		switch (syntaxType.$) {
			case 'TypeUnit':
				return $author$project$ElmSyntaxToRust$inferredTypeUnit;
			case 'TypeFunction':
				var typeFunction = syntaxType.a;
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
						{
							input: A2($author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases, typeAliasesInModule, typeFunction.input),
							output: A2($author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases, typeAliasesInModule, typeFunction.output)
						}));
			case 'TypeTuple':
				var parts = syntaxType.a;
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
						{
							part0: A2($author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases, typeAliasesInModule, parts.part0),
							part1: A2($author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases, typeAliasesInModule, parts.part1)
						}));
			case 'TypeTriple':
				var parts = syntaxType.a;
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple(
						{
							part0: A2($author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases, typeAliasesInModule, parts.part0),
							part1: A2($author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases, typeAliasesInModule, parts.part1),
							part2: A2($author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases, typeAliasesInModule, parts.part2)
						}));
			case 'TypeRecord':
				var fields = syntaxType.a;
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(
						A2(
							$miniBill$elm_fast_dict$FastDict$map,
							F2(
								function (_v1, value) {
									return A2($author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases, typeAliasesInModule, value);
								}),
							fields)));
			case 'TypeRecordExtension':
				var typeRecordExtension = syntaxType.a;
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(
						{
							fields: A2(
								$miniBill$elm_fast_dict$FastDict$map,
								F2(
									function (_v2, value) {
										return A2($author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases, typeAliasesInModule, value);
									}),
								typeRecordExtension.fields),
							recordVariable: typeRecordExtension.recordVariable
						}));
			default:
				var typeConstruct = syntaxType.a;
				var argumentsExpanded = A2(
					$elm$core$List$map,
					function (argument) {
						return A2($author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases, typeAliasesInModule, argument);
					},
					typeConstruct._arguments);
				var _v3 = A2(
					$elm$core$Maybe$andThen,
					function (byName) {
						return A2($miniBill$elm_fast_dict$FastDict$get, typeConstruct.name, byName);
					},
					typeAliasesInModule(typeConstruct.moduleOrigin));
				if (_v3.$ === 'Just') {
					var aliasedType = _v3.a;
					return A2(
						$author$project$ElmSyntaxToRust$inferredTypeExpand,
						A4(
							$author$project$ElmSyntaxToRust$listFoldl2From,
							$miniBill$elm_fast_dict$FastDict$empty,
							aliasedType.parameters,
							argumentsExpanded,
							F3(
								function (parameter, argument, soFar) {
									return A3($miniBill$elm_fast_dict$FastDict$insert, parameter, argument, soFar);
								})),
						aliasedType.type_);
				} else {
					return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
							{_arguments: argumentsExpanded, moduleOrigin: typeConstruct.moduleOrigin, name: typeConstruct.name}));
				}
		}
	});
var $author$project$ElmSyntaxToRust$RustTypeVariableSpecializationToRecord = function (a) {
	return {$: 'RustTypeVariableSpecializationToRecord', a: a};
};
var $author$project$ElmSyntaxToRust$fastDictAll = F2(
	function (keyValueToIsUsual, fastDict) {
		return A3(
			$miniBill$elm_fast_dict$FastDict$foldl,
			F3(
				function (key, value, soFar) {
					return soFar && A2(keyValueToIsUsual, key, value);
				}),
			true,
			fastDict);
	});
var $author$project$ElmSyntaxToRust$listMapToFastDictsAndUnify = F2(
	function (elementToFastDict, list) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (element, soFar) {
					return A2(
						$miniBill$elm_fast_dict$FastDict$union,
						soFar,
						elementToFastDict(element));
				}),
			$miniBill$elm_fast_dict$FastDict$empty,
			list);
	});
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $author$project$ElmSyntaxToRust$inferredTypeNotVariableWithExpandedInnerAliasesSplitIntoSpecializedRustTypes = F2(
	function (context, inferredTypeNotVariable) {
		switch (inferredTypeNotVariable.$) {
			case 'TypeUnit':
				return $miniBill$elm_fast_dict$FastDict$empty;
			case 'TypeFunction':
				var typeFunction = inferredTypeNotVariable.a;
				return A2(
					$miniBill$elm_fast_dict$FastDict$union,
					A2($author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes, context, typeFunction.output),
					A2($author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes, context, typeFunction.input));
			case 'TypeTuple':
				var parts = inferredTypeNotVariable.a;
				return A2(
					$miniBill$elm_fast_dict$FastDict$union,
					A2($author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes, context, parts.part1),
					A2($author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes, context, parts.part0));
			case 'TypeTriple':
				var parts = inferredTypeNotVariable.a;
				return A2(
					$miniBill$elm_fast_dict$FastDict$union,
					A2($author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes, context, parts.part2),
					A2(
						$miniBill$elm_fast_dict$FastDict$union,
						A2($author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes, context, parts.part1),
						A2($author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes, context, parts.part0)));
			case 'TypeConstruct':
				var typeConstruct = inferredTypeNotVariable.a;
				return A2(
					$author$project$ElmSyntaxToRust$listMapToFastDictsAndUnify,
					function (argument) {
						return A2($author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes, context, argument);
					},
					typeConstruct._arguments);
			case 'TypeRecord':
				var fields = inferredTypeNotVariable.a;
				return A3(
					$miniBill$elm_fast_dict$FastDict$foldl,
					F3(
						function (_v2, value, soFar) {
							return A2(
								$miniBill$elm_fast_dict$FastDict$union,
								soFar,
								A2($author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes, context, value));
						}),
					$miniBill$elm_fast_dict$FastDict$empty,
					fields);
			default:
				var typeRecordExtension = inferredTypeNotVariable.a;
				return A3(
					$miniBill$elm_fast_dict$FastDict$insert,
					typeRecordExtension.recordVariable.name,
					A3(
						$miniBill$elm_fast_dict$FastSet$foldl,
						F2(
							function (elmRecord, rustRecordsThatContainAllSyntaxFieldsSoFar) {
								return A2(
									$author$project$ElmSyntaxToRust$fastDictAll,
									F2(
										function (fieldName, _v4) {
											return A2($elm$core$List$member, fieldName, elmRecord);
										}),
									typeRecordExtension.fields) ? A2(
									$elm$core$List$cons,
									$author$project$ElmSyntaxToRust$RustTypeVariableSpecializationToRecord(elmRecord),
									rustRecordsThatContainAllSyntaxFieldsSoFar) : rustRecordsThatContainAllSyntaxFieldsSoFar;
							}),
						_List_Nil,
						context.allElmRecords),
					A3(
						$miniBill$elm_fast_dict$FastDict$foldl,
						F3(
							function (_v3, value, soFar) {
								return A2(
									$miniBill$elm_fast_dict$FastDict$union,
									soFar,
									A2($author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes, context, value));
							}),
						$miniBill$elm_fast_dict$FastDict$empty,
						typeRecordExtension.fields));
		}
	});
var $author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes = F2(
	function (context, inferredType) {
		if (inferredType.$ === 'TypeVariable') {
			return $miniBill$elm_fast_dict$FastDict$empty;
		} else {
			var inferredTypeNotVariable = inferredType.a;
			return A2($author$project$ElmSyntaxToRust$inferredTypeNotVariableWithExpandedInnerAliasesSplitIntoSpecializedRustTypes, context, inferredTypeNotVariable);
		}
	});
var $author$project$ElmSyntaxToRust$listFoldlWhileOkFrom = F3(
	function (initialOkFolded, reduceOnOk, list) {
		listFoldlWhileOkFrom:
		while (true) {
			if (!list.b) {
				return $elm$core$Result$Ok(initialOkFolded);
			} else {
				var head = list.a;
				var tail = list.b;
				var _v1 = A2(reduceOnOk, head, initialOkFolded);
				if (_v1.$ === 'Err') {
					var error = _v1.a;
					return $elm$core$Result$Err(error);
				} else {
					var okFoldedWithHead = _v1.a;
					var $temp$initialOkFolded = okFoldedWithHead,
						$temp$reduceOnOk = reduceOnOk,
						$temp$list = tail;
					initialOkFolded = $temp$initialOkFolded;
					reduceOnOk = $temp$reduceOnOk;
					list = $temp$list;
					continue listFoldlWhileOkFrom;
				}
			}
		}
	});
var $author$project$ElmSyntaxToRust$listMapAndFirstJust = F2(
	function (elementToMaybeFound, list) {
		listMapAndFirstJust:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var head = list.a;
				var tail = list.b;
				var _v1 = elementToMaybeFound(head);
				if (_v1.$ === 'Just') {
					var found = _v1.a;
					return $elm$core$Maybe$Just(found);
				} else {
					var $temp$elementToMaybeFound = elementToMaybeFound,
						$temp$list = tail;
					elementToMaybeFound = $temp$elementToMaybeFound;
					list = $temp$list;
					continue listMapAndFirstJust;
				}
			}
		}
	});
var $miniBill$elm_fast_dict$FastSet$union = F2(
	function (_v0, _v1) {
		var l = _v0.a;
		var r = _v1.a;
		return $miniBill$elm_fast_dict$FastSet$Set(
			A2($miniBill$elm_fast_dict$FastDict$union, l, r));
	});
var $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify = F2(
	function (elementToSet, list) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (element, soFar) {
					return A2(
						$miniBill$elm_fast_dict$FastSet$union,
						elementToSet(element),
						soFar);
				}),
			$miniBill$elm_fast_dict$FastSet$empty,
			list);
	});
var $elm$core$Result$map = F2(
	function (func, ra) {
		if (ra.$ === 'Ok') {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $elm$core$Result$mapError = F2(
	function (f, result) {
		if (result.$ === 'Ok') {
			var v = result.a;
			return $elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return $elm$core$Result$Err(
				f(e));
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom = F3(
	function (initialOkFolded, reduceOnOk, list) {
		listFoldlWhileOkFrom:
		while (true) {
			if (!list.b) {
				return $elm$core$Result$Ok(initialOkFolded);
			} else {
				var head = list.a;
				var tail = list.b;
				var _v1 = A2(reduceOnOk, head, initialOkFolded);
				if (_v1.$ === 'Err') {
					var error = _v1.a;
					return $elm$core$Result$Err(error);
				} else {
					var okFoldedWithHead = _v1.a;
					var $temp$initialOkFolded = okFoldedWithHead,
						$temp$reduceOnOk = reduceOnOk,
						$temp$list = tail;
					initialOkFolded = $temp$initialOkFolded;
					reduceOnOk = $temp$reduceOnOk;
					list = $temp$list;
					continue listFoldlWhileOkFrom;
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndCombineOkFrom = F3(
	function (soFar, elementToResult, list) {
		listMapAndCombineOkFrom:
		while (true) {
			if (!list.b) {
				return $elm$core$Result$Ok(
					$elm$core$List$reverse(soFar));
			} else {
				var head = list.a;
				var tail = list.b;
				var _v1 = elementToResult(head);
				if (_v1.$ === 'Err') {
					var headErr = _v1.a;
					return $elm$core$Result$Err(headErr);
				} else {
					var headOk = _v1.a;
					var $temp$soFar = A2($elm$core$List$cons, headOk, soFar),
						$temp$elementToResult = elementToResult,
						$temp$list = tail;
					soFar = $temp$soFar;
					elementToResult = $temp$elementToResult;
					list = $temp$list;
					continue listMapAndCombineOkFrom;
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndCombineOk = F2(
	function (elementToResult, list) {
		return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndCombineOkFrom, _List_Nil, elementToResult, list);
	});
var $elm$core$Result$map2 = F3(
	function (func, ra, rb) {
		if (ra.$ === 'Err') {
			var x = ra.a;
			return $elm$core$Result$Err(x);
		} else {
			var a = ra.a;
			if (rb.$ === 'Err') {
				var x = rb.a;
				return $elm$core$Result$Err(x);
			} else {
				var b = rb.a;
				return $elm$core$Result$Ok(
					A2(func, a, b));
			}
		}
	});
var $elm$core$Result$map3 = F4(
	function (func, ra, rb, rc) {
		if (ra.$ === 'Err') {
			var x = ra.a;
			return $elm$core$Result$Err(x);
		} else {
			var a = ra.a;
			if (rb.$ === 'Err') {
				var x = rb.a;
				return $elm$core$Result$Err(x);
			} else {
				var b = rb.a;
				if (rc.$ === 'Err') {
					var x = rc.a;
					return $elm$core$Result$Err(x);
				} else {
					var c = rc.a;
					return $elm$core$Result$Ok(
						A3(func, a, b, c));
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeUnit = $elm$core$Result$Ok(
	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit));
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString = function (reference) {
	var _v0 = reference.qualification;
	if (_v0 === '') {
		return reference.name;
	} else {
		var qualificationAliasOrModuleName = _v0;
		return qualificationAliasOrModuleName + ('.' + reference.name);
	}
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange = F3(
	function (typeConstructModuleOriginLookup, rootRange, syntaxTypeNode) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxTypeNode);
		switch (_v0.$) {
			case 'Unit':
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeUnit;
			case 'GenericType':
				var variableName = _v0.a;
				return $elm$core$Result$Ok(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
						{name: variableName, useRange: rootRange}));
			case 'Typed':
				var _v1 = _v0.a;
				var _v2 = _v1.b;
				var qualificationAsDotSeparated = _v2.a;
				var unqualifiedName = _v2.b;
				var argumentNodes = _v0.b;
				var qualification = A2($elm$core$String$join, '.', qualificationAsDotSeparated);
				var _v3 = A2(
					$elm$core$Maybe$andThen,
					function (lookupInModule) {
						return A2($miniBill$elm_fast_dict$FastDict$get, unqualifiedName, lookupInModule);
					},
					A2($miniBill$elm_fast_dict$FastDict$get, qualification, typeConstructModuleOriginLookup));
				if (_v3.$ === 'Nothing') {
					return $elm$core$Result$Err(
						function () {
							if (!qualificationAsDotSeparated.b) {
								return 'could not find imported/local declaration for ' + unqualifiedName;
							} else {
								return 'could not find imported declaration for ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString(
									{name: unqualifiedName, qualification: qualification});
							}
						}());
				} else {
					var originModule = _v3.a;
					return A2(
						$elm$core$Result$map,
						function (_arguments) {
							return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{_arguments: _arguments, moduleOrigin: originModule, name: unqualifiedName}));
						},
						A2(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndCombineOk,
							function (argument) {
								return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange, typeConstructModuleOriginLookup, rootRange, argument);
							},
							argumentNodes));
				}
			case 'Tupled':
				var tupleParts = _v0.a;
				if (!tupleParts.b) {
					return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeUnit;
				} else {
					if (!tupleParts.b.b) {
						var inParens = tupleParts.a;
						return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange, typeConstructModuleOriginLookup, rootRange, inParens);
					} else {
						if (!tupleParts.b.b.b) {
							var syntaxPart0 = tupleParts.a;
							var _v6 = tupleParts.b;
							var syntaxPart1 = _v6.a;
							return A3(
								$elm$core$Result$map2,
								F2(
									function (part0, part1) {
										return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
												{part0: part0, part1: part1}));
									}),
								A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange, typeConstructModuleOriginLookup, rootRange, syntaxPart0),
								A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange, typeConstructModuleOriginLookup, rootRange, syntaxPart1));
						} else {
							if (!tupleParts.b.b.b.b) {
								var syntaxPart0 = tupleParts.a;
								var _v7 = tupleParts.b;
								var syntaxPart1 = _v7.a;
								var _v8 = _v7.b;
								var syntaxPart2 = _v8.a;
								return A4(
									$elm$core$Result$map3,
									F3(
										function (part0, part1, part2) {
											return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple(
													{part0: part0, part1: part1, part2: part2}));
										}),
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange, typeConstructModuleOriginLookup, rootRange, syntaxPart0),
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange, typeConstructModuleOriginLookup, rootRange, syntaxPart1),
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange, typeConstructModuleOriginLookup, rootRange, syntaxPart2));
							} else {
								var _v9 = tupleParts.b;
								var _v10 = _v9.b;
								var _v11 = _v10.b;
								return $elm$core$Result$Err('too many tuple parts');
							}
						}
					}
				}
			case 'Record':
				var recordFields = _v0.a;
				return A2(
					$elm$core$Result$map,
					function (fields) {
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(fields));
					},
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom,
						$miniBill$elm_fast_dict$FastDict$empty,
						F2(
							function (_v12, soFar) {
								var _v13 = _v12.b;
								var _v14 = _v13.a;
								var fieldName = _v14.b;
								var fieldValue = _v13.b;
								return A2(
									$elm$core$Result$map,
									function (fieldValueType) {
										return A3($miniBill$elm_fast_dict$FastDict$insert, fieldName, fieldValueType, soFar);
									},
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange, typeConstructModuleOriginLookup, rootRange, fieldValue));
							}),
						recordFields));
			case 'GenericRecord':
				var _v15 = _v0.a;
				var recordVariableName = _v15.b;
				var _v16 = _v0.b;
				var recordExtensionFields = _v16.b;
				if (!recordExtensionFields.b) {
					return $elm$core$Result$Err('record extension by 0 fields is invalid syntax');
				} else {
					var field0 = recordExtensionFields.a;
					var field1Up = recordExtensionFields.b;
					return A2(
						$elm$core$Result$map,
						function (fields) {
							return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(
									{
										fields: fields,
										recordVariable: {name: recordVariableName, useRange: rootRange}
									}));
						},
						A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom,
							$miniBill$elm_fast_dict$FastDict$empty,
							F2(
								function (_v18, soFar) {
									var _v19 = _v18.b;
									var _v20 = _v19.a;
									var fieldName = _v20.b;
									var fieldValue = _v19.b;
									return A2(
										$elm$core$Result$map,
										function (fieldValueType) {
											return A3($miniBill$elm_fast_dict$FastDict$insert, fieldName, fieldValueType, soFar);
										},
										A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange, typeConstructModuleOriginLookup, rootRange, fieldValue));
								}),
							A2($elm$core$List$cons, field0, field1Up)));
				}
			default:
				var syntaxInput = _v0.a;
				var syntaxOutput = _v0.b;
				return A3(
					$elm$core$Result$map2,
					F2(
						function (input, output) {
							return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{input: input, output: output}));
						}),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange, typeConstructModuleOriginLookup, rootRange, syntaxInput),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange, typeConstructModuleOriginLookup, rootRange, syntaxOutput));
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToType = F2(
	function (typeConstructModuleOriginLookup, syntaxTypeNode) {
		return A3(
			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange,
			typeConstructModuleOriginLookup,
			$stil4m$elm_syntax$Elm$Syntax$Node$range(syntaxTypeNode),
			syntaxTypeNode);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$moduleTypesEmpty = {choiceTypes: $miniBill$elm_fast_dict$FastDict$empty, signatures: $miniBill$elm_fast_dict$FastDict$empty, typeAliases: $miniBill$elm_fast_dict$FastDict$empty};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typesEmptyAndErrorsEmpty = {errors: _List_Nil, types: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$moduleTypesEmpty};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$moduleDeclarationsToTypes = F2(
	function (context, declarations) {
		var typeConstructModuleOriginLookup = A3(
			$miniBill$elm_fast_dict$FastDict$update,
			'',
			function (contextExposedTypeConstructsOrNothing) {
				return $elm$core$Maybe$Just(
					A3(
						$elm$core$List$foldl,
						F2(
							function (_v13, soFar) {
								var declaration = _v13.b;
								switch (declaration.$) {
									case 'InfixDeclaration':
										return soFar;
									case 'Destructuring':
										return soFar;
									case 'FunctionDeclaration':
										return soFar;
									case 'PortDeclaration':
										return soFar;
									case 'AliasDeclaration':
										var declarationTypeAlias = declaration.a;
										return A3(
											$miniBill$elm_fast_dict$FastDict$insert,
											$stil4m$elm_syntax$Elm$Syntax$Node$value(declarationTypeAlias.name),
											context.moduleName,
											soFar);
									default:
										var declarationChoiceType = declaration.a;
										return A3(
											$miniBill$elm_fast_dict$FastDict$insert,
											$stil4m$elm_syntax$Elm$Syntax$Node$value(declarationChoiceType.name),
											context.moduleName,
											soFar);
								}
							}),
						A2($elm$core$Maybe$withDefault, $miniBill$elm_fast_dict$FastDict$empty, contextExposedTypeConstructsOrNothing),
						declarations));
			},
			context.moduleOriginLookup.typeConstructs);
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, soFar) {
					var declaration = _v0.b;
					switch (declaration.$) {
						case 'InfixDeclaration':
							return soFar;
						case 'Destructuring':
							return {
								errors: A2($elm$core$List$cons, 'destructuring at the module level is invalid syntax', soFar.errors),
								types: soFar.types
							};
						case 'FunctionDeclaration':
							var declarationValueOrFunction = declaration.a;
							var _v2 = declarationValueOrFunction.signature;
							if (_v2.$ === 'Nothing') {
								return soFar;
							} else {
								var _v3 = _v2.a;
								var declarationValueOrFunctionSignature = _v3.b;
								var _v4 = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToType, typeConstructModuleOriginLookup, declarationValueOrFunctionSignature.typeAnnotation);
								if (_v4.$ === 'Err') {
									var error = _v4.a;
									return {
										errors: A2($elm$core$List$cons, error, soFar.errors),
										types: soFar.types
									};
								} else {
									var type_ = _v4.a;
									return {
										errors: soFar.errors,
										types: {
											choiceTypes: soFar.types.choiceTypes,
											signatures: A3(
												$miniBill$elm_fast_dict$FastDict$insert,
												$stil4m$elm_syntax$Elm$Syntax$Node$value(declarationValueOrFunctionSignature.name),
												type_,
												soFar.types.signatures),
											typeAliases: soFar.types.typeAliases
										}
									};
								}
							}
						case 'AliasDeclaration':
							var declarationTypeAlias = declaration.a;
							var _v5 = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToType, typeConstructModuleOriginLookup, declarationTypeAlias.typeAnnotation);
							if (_v5.$ === 'Err') {
								var error = _v5.a;
								return {
									errors: A2($elm$core$List$cons, error, soFar.errors),
									types: soFar.types
								};
							} else {
								var type_ = _v5.a;
								return {
									errors: soFar.errors,
									types: {
										choiceTypes: soFar.types.choiceTypes,
										signatures: soFar.types.signatures,
										typeAliases: A3(
											$miniBill$elm_fast_dict$FastDict$insert,
											$stil4m$elm_syntax$Elm$Syntax$Node$value(declarationTypeAlias.name),
											{
												parameters: A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, declarationTypeAlias.generics),
												recordFieldOrder: function () {
													var _v6 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declarationTypeAlias.typeAnnotation);
													switch (_v6.$) {
														case 'Record':
															var fields = _v6.a;
															return $elm$core$Maybe$Just(
																A2(
																	$elm$core$List$map,
																	function (_v7) {
																		var _v8 = _v7.b;
																		var _v9 = _v8.a;
																		var name = _v9.b;
																		return name;
																	},
																	fields));
														case 'GenericType':
															return $elm$core$Maybe$Nothing;
														case 'Typed':
															return $elm$core$Maybe$Nothing;
														case 'Unit':
															return $elm$core$Maybe$Nothing;
														case 'Tupled':
															return $elm$core$Maybe$Nothing;
														case 'GenericRecord':
															return $elm$core$Maybe$Nothing;
														default:
															return $elm$core$Maybe$Nothing;
													}
												}(),
												type_: type_
											},
											soFar.types.typeAliases)
									}
								};
							}
						case 'CustomTypeDeclaration':
							var declarationChoiceType = declaration.a;
							var _v10 = A3(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom,
								$miniBill$elm_fast_dict$FastDict$empty,
								F2(
									function (_v11, variantsSoFar) {
										var variant = _v11.b;
										return A2(
											$elm$core$Result$map,
											function (variantValues) {
												return A3(
													$miniBill$elm_fast_dict$FastDict$insert,
													$stil4m$elm_syntax$Elm$Syntax$Node$value(variant.name),
													variantValues,
													variantsSoFar);
											},
											A2(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndCombineOk,
												function (variantValue) {
													return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToType, typeConstructModuleOriginLookup, variantValue);
												},
												variant._arguments));
									}),
								declarationChoiceType.constructors);
							if (_v10.$ === 'Err') {
								var error = _v10.a;
								return {
									errors: A2($elm$core$List$cons, error, soFar.errors),
									types: soFar.types
								};
							} else {
								var variants = _v10.a;
								return {
									errors: soFar.errors,
									types: {
										choiceTypes: A3(
											$miniBill$elm_fast_dict$FastDict$insert,
											$stil4m$elm_syntax$Elm$Syntax$Node$value(declarationChoiceType.name),
											{
												parameters: A2($elm$core$List$map, $stil4m$elm_syntax$Elm$Syntax$Node$value, declarationChoiceType.generics),
												variants: variants
											},
											soFar.types.choiceTypes),
										signatures: soFar.types.signatures,
										typeAliases: soFar.types.typeAliases
									}
								};
							}
						default:
							var declarationPortSignature = declaration.a;
							var _v12 = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToType, typeConstructModuleOriginLookup, declarationPortSignature.typeAnnotation);
							if (_v12.$ === 'Err') {
								var error = _v12.a;
								return {
									errors: A2($elm$core$List$cons, error, soFar.errors),
									types: soFar.types
								};
							} else {
								var type_ = _v12.a;
								return {
									errors: soFar.errors,
									types: {
										choiceTypes: soFar.types.choiceTypes,
										signatures: A3(
											$miniBill$elm_fast_dict$FastDict$insert,
											$stil4m$elm_syntax$Elm$Syntax$Node$value(declarationPortSignature.name),
											type_,
											soFar.types.signatures),
										typeAliases: soFar.types.typeAliases
									}
								};
							}
					}
				}),
			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typesEmptyAndErrorsEmpty,
			declarations);
	});
var $author$project$ElmSyntaxToRust$moduleHeaderName = function (moduleHeader) {
	return A2(
		$elm$core$String$join,
		'.',
		$stil4m$elm_syntax$Elm$Syntax$Node$value(
			function () {
				switch (moduleHeader.$) {
					case 'NormalModule':
						var header = moduleHeader.a;
						return header.moduleName;
					case 'PortModule':
						var header = moduleHeader.a;
						return header.moduleName;
					default:
						var header = moduleHeader.a;
						return header.moduleName;
				}
			}()));
};
var $author$project$ElmSyntaxToRust$implicitlyImportedModules = _List_fromArray(
	['Basics', 'List', 'Maybe', 'Result', 'String', 'Char', 'Tuple', 'Debug', 'Platform', 'Platform.Cmd', 'Platform.Sub']);
var $author$project$ElmSyntaxToRust$portsOutgoingDictEmptyPortsIncomingDictEmpty = {portsIncoming: $miniBill$elm_fast_dict$FastSet$empty, portsOutgoing: $miniBill$elm_fast_dict$FastSet$empty};
var $author$project$ElmSyntaxToRust$modulesPlusImplicitlyImportedToModuleContext = F2(
	function (context, moduleNames) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (moduleName, soFar) {
					var moduleDeclaredPorts = function () {
						var _v3 = A2($miniBill$elm_fast_dict$FastDict$get, moduleName, context.ports);
						if (_v3.$ === 'Nothing') {
							return $author$project$ElmSyntaxToRust$portsOutgoingDictEmptyPortsIncomingDictEmpty;
						} else {
							var moduleExposedNames = _v3.a;
							return {portsIncoming: moduleExposedNames.portsIncoming, portsOutgoing: moduleExposedNames.portsOutgoing};
						}
					}();
					return A3(
						$miniBill$elm_fast_dict$FastDict$insert,
						moduleName,
						{
							portsIncoming: moduleDeclaredPorts.portsIncoming,
							portsOutgoing: moduleDeclaredPorts.portsOutgoing,
							typeAliases: function () {
								var _v0 = A2($miniBill$elm_fast_dict$FastDict$get, moduleName, context.types);
								if (_v0.$ === 'Nothing') {
									return $miniBill$elm_fast_dict$FastDict$empty;
								} else {
									var moduleTypes = _v0.a;
									return moduleTypes.typeAliases;
								}
							}(),
							valueAndFunctionAnnotations: function () {
								var _v1 = A2($miniBill$elm_fast_dict$FastDict$get, moduleName, context.valueAndFunctionAnnotations);
								if (_v1.$ === 'Nothing') {
									var _v2 = A2($miniBill$elm_fast_dict$FastDict$get, moduleName, context.types);
									if (_v2.$ === 'Nothing') {
										return $miniBill$elm_fast_dict$FastDict$empty;
									} else {
										var moduleTypes = _v2.a;
										return moduleTypes.signatures;
									}
								} else {
									var moduleDeclaredValueAndFunctionAnnotations = _v1.a;
									return moduleDeclaredValueAndFunctionAnnotations;
								}
							}()
						},
						soFar);
				}),
			$miniBill$elm_fast_dict$FastDict$empty,
			_Utils_ap($author$project$ElmSyntaxToRust$implicitlyImportedModules, moduleNames));
	});
var $author$project$ElmSyntaxToRust$portTypeSignifiesOutgoing = function (_v0) {
	var syntaxType = _v0.b;
	switch (syntaxType.$) {
		case 'FunctionTypeAnnotation':
			var _v2 = syntaxType.b;
			var output = _v2.b;
			switch (output.$) {
				case 'Typed':
					var _v4 = output.a;
					var _v5 = _v4.b;
					var name = _v5.b;
					return A2(
						$elm$core$String$contains,
						'cmd',
						$elm$core$String$toLower(name));
				case 'GenericType':
					return false;
				case 'Unit':
					return false;
				case 'Tupled':
					return false;
				case 'Record':
					return false;
				case 'GenericRecord':
					return false;
				default:
					return false;
			}
		case 'Typed':
			var _v6 = syntaxType.a;
			var _v7 = _v6.b;
			var name = _v7.b;
			return A2(
				$elm$core$String$contains,
				'cmd',
				$elm$core$String$toLower(name));
		case 'GenericType':
			return false;
		case 'Unit':
			return false;
		case 'Tupled':
			return false;
		case 'Record':
			return false;
		default:
			return false;
	}
};
var $author$project$ElmSyntaxToRust$listFilledMapAndStringJoinWith = F4(
	function (separator, elementChange, head, tail) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (element, leftSoFar) {
					return leftSoFar + (separator + (elementChange(element) + ''));
				}),
			elementChange(head),
			tail);
	});
var $author$project$ElmSyntaxToRust$rustNameWithSpecializedTypes = F2(
	function (specializedTypes, name) {
		return A3(
			$miniBill$elm_fast_dict$FastDict$foldl,
			F3(
				function (variable, specializedType, nameSoFar) {
					return nameSoFar + ('__' + (variable + ('_' + function () {
						var specializedTypeRecordFields = specializedType.a;
						if (!specializedTypeRecordFields.b) {
							return '';
						} else {
							var specializedTypeRecordField0 = specializedTypeRecordFields.a;
							var specializedTypeRecordField1Up = specializedTypeRecordFields.b;
							return A4($author$project$ElmSyntaxToRust$listFilledMapAndStringJoinWith, '_', $elm$core$Basics$identity, specializedTypeRecordField0, specializedTypeRecordField1Up);
						}
					}())));
				}),
			name,
			specializedTypes);
	});
var $author$project$Graph$AcyclicSCC = function (a) {
	return {$: 'AcyclicSCC', a: a};
};
var $author$project$Graph$CyclicSCC = function (a) {
	return {$: 'CyclicSCC', a: a};
};
var $author$project$Graph$arrayFind = F2(
	function (i, arr) {
		return A2($miniBill$elm_fast_dict$FastDict$get, i, arr.byIndex);
	});
var $author$project$Graph$arrayFindBetween = F4(
	function (lo, hi, k, keyMap) {
		arrayFindBetween:
		while (true) {
			if (_Utils_cmp(lo, hi) > 0) {
				return $elm$core$Maybe$Nothing;
			} else {
				var mid = lo + (((hi - lo) / 2) | 0);
				var _v0 = A2($author$project$Graph$arrayFind, mid, keyMap);
				if (_v0.$ === 'Nothing') {
					return $elm$core$Maybe$Nothing;
				} else {
					var v = _v0.a;
					var _v1 = A2($elm$core$Basics$compare, k, v);
					switch (_v1.$) {
						case 'LT':
							var $temp$lo = lo,
								$temp$hi = mid - 1,
								$temp$k = k,
								$temp$keyMap = keyMap;
							lo = $temp$lo;
							hi = $temp$hi;
							k = $temp$k;
							keyMap = $temp$keyMap;
							continue arrayFindBetween;
						case 'EQ':
							return $elm$core$Maybe$Just(mid);
						default:
							var $temp$lo = mid + 1,
								$temp$hi = hi,
								$temp$k = k,
								$temp$keyMap = keyMap;
							lo = $temp$lo;
							hi = $temp$hi;
							k = $temp$k;
							keyMap = $temp$keyMap;
							continue arrayFindBetween;
					}
				}
			}
		}
	});
var $author$project$Graph$keyToVertexInArray = F2(
	function (keyMap, k) {
		return A4($author$project$Graph$arrayFindBetween, 0, keyMap.max, k, keyMap);
	});
var $elm$core$List$sortWith = _List_sortWith;
var $author$project$Graph$graphFromEdges = function (edgesUnsorted) {
	var maxVertexIndex = $elm$core$List$length(edgesUnsorted) - 1;
	var edgesSortedIndexed = A3(
		$elm$core$List$foldr,
		F2(
			function (edge, soFar) {
				return {
					index: soFar.index - 1,
					indexed: A2(
						$elm$core$List$cons,
						_Utils_Tuple2(soFar.index, edge),
						soFar.indexed)
				};
			}),
		{index: maxVertexIndex, indexed: _List_Nil},
		A2(
			$elm$core$List$sortWith,
			F2(
				function (_v4, _v5) {
					var k1 = _v4.b;
					var k2 = _v5.b;
					return A2($elm$core$Basics$compare, k1, k2);
				}),
			edgesUnsorted)).indexed;
	var keyMap = {
		byIndex: A3(
			$elm$core$List$foldl,
			F2(
				function (_v2, soFar) {
					var v = _v2.a;
					var _v3 = _v2.b;
					var k = _v3.b;
					return A3($miniBill$elm_fast_dict$FastDict$insert, v, k, soFar);
				}),
			$miniBill$elm_fast_dict$FastDict$empty,
			edgesSortedIndexed),
		max: maxVertexIndex
	};
	return _Utils_Tuple2(
		{
			byIndex: A3(
				$elm$core$List$foldl,
				F2(
					function (_v0, soFar) {
						var v = _v0.a;
						var _v1 = _v0.b;
						var ks = _v1.c;
						return A3(
							$miniBill$elm_fast_dict$FastDict$insert,
							v,
							A2(
								$elm$core$List$filterMap,
								function (k) {
									return A2($author$project$Graph$keyToVertexInArray, keyMap, k);
								},
								ks),
							soFar);
					}),
				$miniBill$elm_fast_dict$FastDict$empty,
				edgesSortedIndexed),
			max: maxVertexIndex
		},
		{
			byIndex: $miniBill$elm_fast_dict$FastDict$fromList(edgesSortedIndexed),
			max: maxVertexIndex
		});
};
var $author$project$Graph$Tree = F2(
	function (a, b) {
		return {$: 'Tree', a: a, b: b};
	});
var $author$project$Graph$treeAddAsLastSub = F2(
	function (newLastSub, _v0) {
		var innerElement = _v0.a;
		var innerSubs = _v0.b;
		return A2(
			$author$project$Graph$Tree,
			innerElement,
			_Utils_ap(
				innerSubs,
				_List_fromArray(
					[newLastSub])));
	});
var $author$project$Graph$treeOne = function (onlyElement) {
	return A2($author$project$Graph$Tree, onlyElement, _List_Nil);
};
var $author$project$Graph$depthFirstSpanningTreeFromVerticesStep = F5(
	function (graph, fromVertices, visited, stack, soFar) {
		depthFirstSpanningTreeFromVerticesStep:
		while (true) {
			if (!fromVertices.b) {
				if (!stack.b) {
					return $elm$core$List$reverse(soFar);
				} else {
					if (stack.b.b) {
						var _v2 = stack.a;
						var firstTree = _v2.a;
						var firstVs = _v2.b;
						var _v3 = stack.b;
						var _v4 = _v3.a;
						var secondTree = _v4.a;
						var secondVs = _v4.b;
						var rest = _v3.b;
						var $temp$graph = graph,
							$temp$fromVertices = firstVs,
							$temp$visited = visited,
							$temp$stack = A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								A2($author$project$Graph$treeAddAsLastSub, firstTree, secondTree),
								secondVs),
							rest),
							$temp$soFar = soFar;
						graph = $temp$graph;
						fromVertices = $temp$fromVertices;
						visited = $temp$visited;
						stack = $temp$stack;
						soFar = $temp$soFar;
						continue depthFirstSpanningTreeFromVerticesStep;
					} else {
						var _v5 = stack.a;
						var firstTree = _v5.a;
						var firstVs = _v5.b;
						var $temp$graph = graph,
							$temp$fromVertices = firstVs,
							$temp$visited = visited,
							$temp$stack = _List_Nil,
							$temp$soFar = A2($elm$core$List$cons, firstTree, soFar);
						graph = $temp$graph;
						fromVertices = $temp$fromVertices;
						visited = $temp$visited;
						stack = $temp$stack;
						soFar = $temp$soFar;
						continue depthFirstSpanningTreeFromVerticesStep;
					}
				}
			} else {
				var fromVerticesHead = fromVertices.a;
				var fromVerticesTail = fromVertices.b;
				if (A2($miniBill$elm_fast_dict$FastSet$member, fromVerticesHead, visited)) {
					var $temp$graph = graph,
						$temp$fromVertices = fromVerticesTail,
						$temp$visited = visited,
						$temp$stack = stack,
						$temp$soFar = soFar;
					graph = $temp$graph;
					fromVertices = $temp$fromVertices;
					visited = $temp$visited;
					stack = $temp$stack;
					soFar = $temp$soFar;
					continue depthFirstSpanningTreeFromVerticesStep;
				} else {
					var $temp$graph = graph,
						$temp$fromVertices = A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2($author$project$Graph$arrayFind, fromVerticesHead, graph)),
						$temp$visited = A2($miniBill$elm_fast_dict$FastSet$insert, fromVerticesHead, visited),
						$temp$stack = A2(
						$elm$core$List$cons,
						_Utils_Tuple2(
							$author$project$Graph$treeOne(fromVerticesHead),
							fromVerticesTail),
						stack),
						$temp$soFar = soFar;
					graph = $temp$graph;
					fromVertices = $temp$fromVertices;
					visited = $temp$visited;
					stack = $temp$stack;
					soFar = $temp$soFar;
					continue depthFirstSpanningTreeFromVerticesStep;
				}
			}
		}
	});
var $author$project$Graph$depthFirstSpanningTreeFromVertices = F2(
	function (graph, fromVertices) {
		return A5($author$project$Graph$depthFirstSpanningTreeFromVerticesStep, graph, fromVertices, $miniBill$elm_fast_dict$FastSet$empty, _List_Nil, _List_Nil);
	});
var $author$project$Graph$vertices = function (graph) {
	return A2($elm$core$List$range, 0, graph.max);
};
var $author$project$Graph$depthFirstSpanningTree = function (g) {
	return A2(
		$author$project$Graph$depthFirstSpanningTreeFromVertices,
		g,
		$author$project$Graph$vertices(g));
};
var $author$project$Graph$treeElement = function (_v0) {
	var innerElement = _v0.a;
	return innerElement;
};
var $author$project$Graph$treeSubs = function (_v0) {
	var innerSubs = _v0.b;
	return innerSubs;
};
var $author$project$Graph$postorderHelp = F2(
	function (remaining, soFar) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (node, withRemainingSoFar) {
					return A2(
						$author$project$Graph$postorderHelp,
						$author$project$Graph$treeSubs(node),
						A2(
							$elm$core$List$cons,
							$author$project$Graph$treeElement(node),
							withRemainingSoFar));
				}),
			soFar,
			remaining);
	});
var $author$project$Graph$postorder = function (graph) {
	return A2(
		$author$project$Graph$postorderHelp,
		$author$project$Graph$depthFirstSpanningTree(graph),
		_List_Nil);
};
var $author$project$Graph$fastDictRangeToConstantInto = F4(
	function (list, startInclusive, endInclusive, constantValue) {
		fastDictRangeToConstantInto:
		while (true) {
			if (_Utils_cmp(startInclusive, endInclusive) < 1) {
				var $temp$list = A3($miniBill$elm_fast_dict$FastDict$insert, endInclusive, constantValue, list),
					$temp$startInclusive = startInclusive,
					$temp$endInclusive = endInclusive - 1,
					$temp$constantValue = constantValue;
				list = $temp$list;
				startInclusive = $temp$startInclusive;
				endInclusive = $temp$endInclusive;
				constantValue = $temp$constantValue;
				continue fastDictRangeToConstantInto;
			} else {
				return list;
			}
		}
	});
var $author$project$Graph$fastDictRangeToConstant = F3(
	function (startInclusive, endInclusive, constantValue) {
		return A4($author$project$Graph$fastDictRangeToConstantInto, $miniBill$elm_fast_dict$FastDict$empty, startInclusive, endInclusive, constantValue);
	});
var $author$project$Graph$arrayAccum = F4(
	function (reduce, initial, max, ies) {
		return {
			byIndex: A3(
				$elm$core$List$foldl,
				F2(
					function (_v0, soFar) {
						var index = _v0.a;
						var foldedForIndexSoFar = _v0.b;
						return A3(
							$miniBill$elm_fast_dict$FastDict$update,
							index,
							function (atIndexOrNothing) {
								return $elm$core$Maybe$Just(
									A2(
										reduce,
										A2($elm$core$Maybe$withDefault, initial, atIndexOrNothing),
										foldedForIndexSoFar));
							},
							soFar);
					}),
				A3($author$project$Graph$fastDictRangeToConstant, 0, max, initial),
				ies),
			max: max
		};
	});
var $author$project$Graph$buildG = F2(
	function (max, edgesToBuildFrom) {
		return A4(
			$author$project$Graph$arrayAccum,
			F2(
				function (soFar, vertex) {
					return A2($elm$core$List$cons, vertex, soFar);
				}),
			_List_Nil,
			max,
			edgesToBuildFrom);
	});
var $author$project$Graph$reverseEdges = function (g) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (from, soFar) {
				var _v0 = A2($author$project$Graph$arrayFind, from, g);
				if (_v0.$ === 'Nothing') {
					return soFar;
				} else {
					var tos = _v0.a;
					return A3(
						$elm$core$List$foldr,
						F2(
							function (to, soFarWithTos) {
								return A2(
									$elm$core$List$cons,
									_Utils_Tuple2(to, from),
									soFarWithTos);
							}),
						soFar,
						tos);
				}
			}),
		_List_Nil,
		$author$project$Graph$vertices(g));
};
var $author$project$Graph$transposeG = function (g) {
	return A2(
		$author$project$Graph$buildG,
		g.max,
		$author$project$Graph$reverseEdges(g));
};
var $author$project$Graph$scc = function (graph) {
	return A2(
		$author$project$Graph$depthFirstSpanningTreeFromVertices,
		graph,
		$elm$core$List$reverse(
			$author$project$Graph$postorder(
				$author$project$Graph$transposeG(graph))));
};
var $author$project$Graph$stronglyConnComponents = function (edges0) {
	if (!edges0.b) {
		return _List_Nil;
	} else {
		var _v1 = $author$project$Graph$graphFromEdges(edges0);
		var graph = _v1.a;
		var vertexMap = _v1.b;
		var mentionsItself = function (from) {
			var _v9 = A2($author$project$Graph$arrayFind, from, graph);
			if (_v9.$ === 'Nothing') {
				return false;
			} else {
				var tos = _v9.a;
				return A2($elm$core$List$member, from, tos);
			}
		};
		var dec = F2(
			function (node, vs) {
				var treeSubsSCC = A3(
					$elm$core$List$foldr,
					dec,
					vs,
					$author$project$Graph$treeSubs(node));
				var _v2 = A2(
					$author$project$Graph$arrayFind,
					$author$project$Graph$treeElement(node),
					vertexMap);
				if (_v2.$ === 'Nothing') {
					return treeSubsSCC;
				} else {
					var _v3 = _v2.a;
					var elementKeyNode = _v3.a;
					return A2($elm$core$List$cons, elementKeyNode, treeSubsSCC);
				}
			});
		var decode = function (tree) {
			var v = $author$project$Graph$treeElement(tree);
			var _v4 = $author$project$Graph$treeSubs(tree);
			if (!_v4.b) {
				var _v5 = A2($author$project$Graph$arrayFind, v, vertexMap);
				if (_v5.$ === 'Nothing') {
					return $author$project$Graph$CyclicSCC(_List_Nil);
				} else {
					var _v6 = _v5.a;
					var vertexKeyNode = _v6.a;
					return mentionsItself(v) ? $author$project$Graph$CyclicSCC(
						_List_fromArray(
							[vertexKeyNode])) : $author$project$Graph$AcyclicSCC(vertexKeyNode);
				}
			} else {
				var treeSubsNotEmpty = _v4;
				var treeSubsSCC = A3($elm$core$List$foldr, dec, _List_Nil, treeSubsNotEmpty);
				return $author$project$Graph$CyclicSCC(
					function () {
						var _v7 = A2($author$project$Graph$arrayFind, v, vertexMap);
						if (_v7.$ === 'Nothing') {
							return treeSubsSCC;
						} else {
							var _v8 = _v7.a;
							var vKeyNode = _v8.a;
							return A2($elm$core$List$cons, vKeyNode, treeSubsSCC);
						}
					}());
			}
		};
		return A2(
			$elm$core$List$map,
			decode,
			$author$project$Graph$scc(graph));
	}
};
var $author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords = function (syntaxExpressionNode) {
	syntaxExpressionContainedConstructedRecords:
	while (true) {
		var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxExpressionNode);
		switch (_v0.$) {
			case 'RecordExpr':
				var fields = _v0.a;
				return A2(
					$miniBill$elm_fast_dict$FastSet$insert,
					$elm$core$List$sort(
						A2(
							$elm$core$List$map,
							function (_v1) {
								var _v2 = _v1.b;
								var _v3 = _v2.a;
								var name = _v3.b;
								return name;
							},
							fields)),
					A2(
						$author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify,
						function (_v4) {
							var _v5 = _v4.b;
							var fieldValue = _v5.b;
							return $author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords(fieldValue);
						},
						fields));
			case 'UnitExpr':
				return $miniBill$elm_fast_dict$FastSet$empty;
			case 'Floatable':
				return $miniBill$elm_fast_dict$FastSet$empty;
			case 'Integer':
				return $miniBill$elm_fast_dict$FastSet$empty;
			case 'Hex':
				return $miniBill$elm_fast_dict$FastSet$empty;
			case 'CharLiteral':
				return $miniBill$elm_fast_dict$FastSet$empty;
			case 'Literal':
				return $miniBill$elm_fast_dict$FastSet$empty;
			case 'FunctionOrValue':
				return $miniBill$elm_fast_dict$FastSet$empty;
			case 'PrefixOperator':
				return $miniBill$elm_fast_dict$FastSet$empty;
			case 'RecordAccessFunction':
				return $miniBill$elm_fast_dict$FastSet$empty;
			case 'Operator':
				return $miniBill$elm_fast_dict$FastSet$empty;
			case 'GLSLExpression':
				return $miniBill$elm_fast_dict$FastSet$empty;
			case 'ParenthesizedExpression':
				var inParens = _v0.a;
				var $temp$syntaxExpressionNode = inParens;
				syntaxExpressionNode = $temp$syntaxExpressionNode;
				continue syntaxExpressionContainedConstructedRecords;
			case 'RecordAccess':
				var record = _v0.a;
				var $temp$syntaxExpressionNode = record;
				syntaxExpressionNode = $temp$syntaxExpressionNode;
				continue syntaxExpressionContainedConstructedRecords;
			case 'Negation':
				var inNegation = _v0.a;
				var $temp$syntaxExpressionNode = inNegation;
				syntaxExpressionNode = $temp$syntaxExpressionNode;
				continue syntaxExpressionContainedConstructedRecords;
			case 'LambdaExpression':
				var lambda = _v0.a;
				var $temp$syntaxExpressionNode = lambda.expression;
				syntaxExpressionNode = $temp$syntaxExpressionNode;
				continue syntaxExpressionContainedConstructedRecords;
			case 'OperatorApplication':
				var left = _v0.c;
				var right = _v0.d;
				return A2(
					$miniBill$elm_fast_dict$FastSet$union,
					$author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords(left),
					$author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords(right));
			case 'IfBlock':
				var condition = _v0.a;
				var onTrue = _v0.b;
				var onFalse = _v0.c;
				return A2(
					$miniBill$elm_fast_dict$FastSet$union,
					$author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords(onFalse),
					A2(
						$miniBill$elm_fast_dict$FastSet$union,
						$author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords(onTrue),
						$author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords(condition)));
			case 'TupledExpression':
				var parts = _v0.a;
				return A2($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify, $author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords, parts);
			case 'ListExpr':
				var elements = _v0.a;
				return A2($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify, $author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords, elements);
			case 'Application':
				var applicationParts = _v0.a;
				return A2($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify, $author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords, applicationParts);
			case 'RecordUpdateExpression':
				var fields = _v0.b;
				return A2(
					$author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify,
					function (_v6) {
						var _v7 = _v6.b;
						var fieldValue = _v7.b;
						return $author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords(fieldValue);
					},
					fields);
			case 'CaseExpression':
				var caseOf = _v0.a;
				return A2(
					$miniBill$elm_fast_dict$FastSet$union,
					A2(
						$author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify,
						function (_v8) {
							var fieldValue = _v8.b;
							return $author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords(fieldValue);
						},
						caseOf.cases),
					$author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords(caseOf.expression));
			default:
				var letIn = _v0.a;
				return A2(
					$miniBill$elm_fast_dict$FastSet$union,
					A2(
						$author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify,
						function (declaration) {
							var _v9 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
							if (_v9.$ === 'LetFunction') {
								var _function = _v9.a;
								return $author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords(
									$stil4m$elm_syntax$Elm$Syntax$Node$value(_function.declaration).expression);
							} else {
								var destructuredExpression = _v9.b;
								return $author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords(destructuredExpression);
							}
						},
						letIn.declarations),
					$author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords(letIn.expression));
		}
	}
};
var $stil4m$elm_syntax$Elm$Syntax$Node$empty = function (a) {
	return A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Elm$Syntax$Range$empty, a);
};
var $stil4m$elm_syntax$Elm$Syntax$Node$map = F2(
	function (f, _v0) {
		var r = _v0.a;
		var a = _v0.b;
		return A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$Node,
			r,
			f(a));
	});
var $author$project$ElmSyntaxToRust$syntaxTypeApplySpecialization = F2(
	function (specialization, syntaxType) {
		switch (syntaxType.$) {
			case 'Unit':
				return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit;
			case 'GenericType':
				var variable = syntaxType.a;
				var _v1 = A2($miniBill$elm_fast_dict$FastDict$get, variable, specialization);
				if (_v1.$ === 'Nothing') {
					return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(variable);
				} else {
					var specificSpecialization = _v1.a;
					var fields = specificSpecialization.a;
					return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(
						A2(
							$elm$core$List$map,
							function (fieldName) {
								return $stil4m$elm_syntax$Elm$Syntax$Node$empty(
									_Utils_Tuple2(
										$stil4m$elm_syntax$Elm$Syntax$Node$empty(fieldName),
										$stil4m$elm_syntax$Elm$Syntax$Node$empty(
											$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(
												variable + ('_' + $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(fieldName))))));
							},
							fields));
				}
			case 'Typed':
				var reference = syntaxType.a;
				var _arguments = syntaxType.b;
				return A2(
					$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed,
					reference,
					A2(
						$elm$core$List$map,
						function (argument) {
							return A2($author$project$ElmSyntaxToRust$syntaxTypeNodeApplySpecialization, specialization, argument);
						},
						_arguments));
			case 'Tupled':
				var parts = syntaxType.a;
				return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled(
					A2(
						$elm$core$List$map,
						function (part) {
							return A2($author$project$ElmSyntaxToRust$syntaxTypeNodeApplySpecialization, specialization, part);
						},
						parts));
			case 'Record':
				var fields = syntaxType.a;
				return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(
					A2(
						$elm$core$List$map,
						function (fieldNode) {
							return A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$map,
								function (_v3) {
									var nameNode = _v3.a;
									var valueNode = _v3.b;
									return _Utils_Tuple2(
										nameNode,
										A2($author$project$ElmSyntaxToRust$syntaxTypeNodeApplySpecialization, specialization, valueNode));
								},
								fieldNode);
						},
						fields));
			case 'GenericRecord':
				var _v4 = syntaxType.a;
				var recordVariableRange = _v4.a;
				var recordVariableName = _v4.b;
				var _v5 = syntaxType.b;
				var fieldsRange = _v5.a;
				var fields = _v5.b;
				var fieldsSpecialized = A2(
					$elm$core$List$map,
					function (fieldNode) {
						return A2(
							$stil4m$elm_syntax$Elm$Syntax$Node$map,
							function (_v11) {
								var nameNode = _v11.a;
								var valueNode = _v11.b;
								return _Utils_Tuple2(
									nameNode,
									A2($author$project$ElmSyntaxToRust$syntaxTypeNodeApplySpecialization, specialization, valueNode));
							},
							fieldNode);
					},
					fields);
				var _v6 = A2($miniBill$elm_fast_dict$FastDict$get, recordVariableName, specialization);
				if (_v6.$ === 'Nothing') {
					return A2(
						$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord,
						A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, recordVariableRange, recordVariableName),
						A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, fieldsRange, fieldsSpecialized));
				} else {
					var specificSpecialization = _v6.a;
					var allFields = specificSpecialization.a;
					var additionalFields = A2(
						$elm$core$List$filterMap,
						function (specializationFieldName) {
							return A2(
								$elm$core$List$any,
								function (_v8) {
									var _v9 = _v8.b;
									var _v10 = _v9.a;
									var fieldName = _v10.b;
									return _Utils_eq(fieldName, specializationFieldName);
								},
								fields) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
								$stil4m$elm_syntax$Elm$Syntax$Node$empty(
									_Utils_Tuple2(
										$stil4m$elm_syntax$Elm$Syntax$Node$empty(specializationFieldName),
										$stil4m$elm_syntax$Elm$Syntax$Node$empty(
											$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(
												recordVariableName + ('_' + $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(specializationFieldName)))))));
						},
						allFields);
					return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(
						_Utils_ap(fieldsSpecialized, additionalFields));
				}
			default:
				var inType = syntaxType.a;
				var outType = syntaxType.b;
				return A2(
					$stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation,
					A2($author$project$ElmSyntaxToRust$syntaxTypeNodeApplySpecialization, specialization, inType),
					A2($author$project$ElmSyntaxToRust$syntaxTypeNodeApplySpecialization, specialization, outType));
		}
	});
var $author$project$ElmSyntaxToRust$syntaxTypeNodeApplySpecialization = F2(
	function (specialization, syntaxTypeNode) {
		return A2(
			$stil4m$elm_syntax$Elm$Syntax$Node$map,
			function (syntaxType) {
				return A2($author$project$ElmSyntaxToRust$syntaxTypeApplySpecialization, specialization, syntaxType);
			},
			syntaxTypeNode);
	});
var $author$project$ElmSyntaxToRust$typeAliasDeclaration = F2(
	function (typeAliasesInModule, inferredTypeAlias) {
		return {
			name: inferredTypeAlias.name,
			parameters: A2($elm$core$List$map, $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords, inferredTypeAlias.parameters),
			type_: A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, inferredTypeAlias.type_)
		};
	});
var $author$project$ElmSyntaxToRust$typeContainedRecords = function (_v0) {
	var syntaxType = _v0.b;
	switch (syntaxType.$) {
		case 'Unit':
			return $miniBill$elm_fast_dict$FastSet$empty;
		case 'GenericType':
			return $miniBill$elm_fast_dict$FastSet$empty;
		case 'FunctionTypeAnnotation':
			var inType = syntaxType.a;
			var outType = syntaxType.b;
			return A2(
				$miniBill$elm_fast_dict$FastSet$union,
				$author$project$ElmSyntaxToRust$typeContainedRecords(inType),
				$author$project$ElmSyntaxToRust$typeContainedRecords(outType));
		case 'Tupled':
			var typeTupleParts = syntaxType.a;
			return A2($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify, $author$project$ElmSyntaxToRust$typeContainedRecords, typeTupleParts);
		case 'Typed':
			var _arguments = syntaxType.b;
			return A2($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify, $author$project$ElmSyntaxToRust$typeContainedRecords, _arguments);
		case 'Record':
			var fields = syntaxType.a;
			return A2(
				$miniBill$elm_fast_dict$FastSet$insert,
				$elm$core$List$sort(
					A2(
						$elm$core$List$map,
						function (_v2) {
							var _v3 = _v2.b;
							var _v4 = _v3.a;
							var name = _v4.b;
							return name;
						},
						fields)),
				A2(
					$author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify,
					function (_v5) {
						var _v6 = _v5.b;
						var value = _v6.b;
						return $author$project$ElmSyntaxToRust$typeContainedRecords(value);
					},
					fields));
		default:
			var _v7 = syntaxType.b;
			var fields = _v7.b;
			return A2(
				$author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify,
				function (_v8) {
					var _v9 = _v8.b;
					var value = _v9.b;
					return $author$project$ElmSyntaxToRust$typeContainedRecords(value);
				},
				fields);
	}
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionCall = function (a) {
	return {$: 'ExpressionCall', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionCaseOf = function (a) {
	return {$: 'ExpressionCaseOf', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionIfThenElse = function (a) {
	return {$: 'ExpressionIfThenElse', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionInfixOperation = function (a) {
	return {$: 'ExpressionInfixOperation', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionLambda = function (a) {
	return {$: 'ExpressionLambda', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionLetIn = function (a) {
	return {$: 'ExpressionLetIn', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionList = function (a) {
	return {$: 'ExpressionList', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionNegation = function (a) {
	return {$: 'ExpressionNegation', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionParenthesized = function (a) {
	return {$: 'ExpressionParenthesized', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecord = function (a) {
	return {$: 'ExpressionRecord', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecordAccess = function (a) {
	return {$: 'ExpressionRecordAccess', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecordUpdate = function (a) {
	return {$: 'ExpressionRecordUpdate', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionTriple = function (a) {
	return {$: 'ExpressionTriple', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionTuple = function (a) {
	return {$: 'ExpressionTuple', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetDestructuring = function (a) {
	return {$: 'LetDestructuring', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetValueOrFunctionDeclaration = function (a) {
	return {$: 'LetValueOrFunctionDeclaration', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionListEmpty = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionList(_List_Nil);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternAs = function (a) {
	return {$: 'PatternAs', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternIgnored = {$: 'PatternIgnored'};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternListCons = function (a) {
	return {$: 'PatternListCons', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternListExact = function (a) {
	return {$: 'PatternListExact', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternParenthesized = function (a) {
	return {$: 'PatternParenthesized', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternRecord = function (a) {
	return {$: 'PatternRecord', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternTriple = function (a) {
	return {$: 'PatternTriple', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternTuple = function (a) {
	return {$: 'PatternTuple', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternVariant = function (a) {
	return {$: 'PatternVariant', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternListExactEmpty = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternListExact(_List_Nil);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeListList = function (a) {
	return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
			{
				_arguments: _List_fromArray(
					[a]),
				moduleOrigin: 'List',
				name: 'List'
			}));
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes = F2(
	function (typeChange, patternTypedNode) {
		var _v0 = patternTypedNode.value;
		switch (_v0.$) {
			case 'PatternUnit':
				return patternTypedNode;
			case 'PatternChar':
				return patternTypedNode;
			case 'PatternString':
				return patternTypedNode;
			case 'PatternInt':
				return patternTypedNode;
			case 'PatternIgnored':
				return {
					range: patternTypedNode.range,
					type_: typeChange(patternTypedNode.type_),
					value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternIgnored
				};
			case 'PatternVariable':
				return {
					range: patternTypedNode.range,
					type_: typeChange(patternTypedNode.type_),
					value: patternTypedNode.value
				};
			case 'PatternParenthesized':
				var inParens = _v0.a;
				var inParensMapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes, typeChange, inParens);
				return {
					range: patternTypedNode.range,
					type_: inParensMapped.type_,
					value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternParenthesized(inParensMapped)
				};
			case 'PatternAs':
				var patternAs = _v0.a;
				var aliasedPatternMapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes, typeChange, patternAs.pattern);
				return {
					range: patternTypedNode.range,
					type_: aliasedPatternMapped.type_,
					value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternAs(
						{
							pattern: aliasedPatternMapped,
							variable: {range: patternAs.variable.range, type_: aliasedPatternMapped.type_, value: patternAs.variable.value}
						})
				};
			case 'PatternListCons':
				var patternListCons = _v0.a;
				var headMapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes, typeChange, patternListCons.head);
				return {
					range: patternTypedNode.range,
					type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeListList(headMapped.type_),
					value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternListCons(
						{
							head: headMapped,
							tail: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes, typeChange, patternListCons.tail)
						})
				};
			case 'PatternTuple':
				var patternTuple = _v0.a;
				var part1Mapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes, typeChange, patternTuple.part1);
				var part0Mapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes, typeChange, patternTuple.part0);
				return {
					range: patternTypedNode.range,
					type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
							{part0: part0Mapped.type_, part1: part1Mapped.type_})),
					value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternTuple(
						{part0: part0Mapped, part1: part1Mapped})
				};
			case 'PatternTriple':
				var patternTriple = _v0.a;
				var part2Mapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes, typeChange, patternTriple.part2);
				var part1Mapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes, typeChange, patternTriple.part1);
				var part0Mapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes, typeChange, patternTriple.part0);
				return {
					range: patternTypedNode.range,
					type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple(
							{part0: part0Mapped.type_, part1: part1Mapped.type_, part2: part2Mapped.type_})),
					value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternTriple(
						{part0: part0Mapped, part1: part1Mapped, part2: part2Mapped})
				};
			case 'PatternRecord':
				var patternRecordFields = _v0.a;
				return {
					range: patternTypedNode.range,
					type_: typeChange(patternTypedNode.type_),
					value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternRecord(
						A2(
							$elm$core$List$map,
							function (field) {
								return {
									range: field.range,
									type_: typeChange(field.type_),
									value: field.value
								};
							},
							patternRecordFields))
				};
			case 'PatternListExact':
				var patternListElements = _v0.a;
				if (!patternListElements.b) {
					return {
						range: patternTypedNode.range,
						type_: typeChange(patternTypedNode.type_),
						value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternListExactEmpty
					};
				} else {
					var head = patternListElements.a;
					var tail = patternListElements.b;
					var headMapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes, typeChange, head);
					return {
						range: patternTypedNode.range,
						type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeListList(headMapped.type_),
						value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternListExact(
							A2(
								$elm$core$List$cons,
								headMapped,
								A2(
									$elm$core$List$map,
									function (element) {
										return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes, typeChange, element);
									},
									tail)))
					};
				}
			default:
				var patternVariant = _v0.a;
				return {
					range: patternTypedNode.range,
					type_: typeChange(patternTypedNode.type_),
					value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternVariant(
						{
							choiceTypeName: patternVariant.choiceTypeName,
							moduleOrigin: patternVariant.moduleOrigin,
							name: patternVariant.name,
							qualification: patternVariant.qualification,
							values: A2(
								$elm$core$List$map,
								function (argument) {
									return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes, typeChange, argument);
								},
								patternVariant.values)
						})
				};
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes = F2(
	function (typeChange, expressionTypedNode) {
		var _v1 = expressionTypedNode.value;
		switch (_v1.$) {
			case 'ExpressionUnit':
				return expressionTypedNode;
			case 'ExpressionFloat':
				return expressionTypedNode;
			case 'ExpressionChar':
				return expressionTypedNode;
			case 'ExpressionString':
				return expressionTypedNode;
			case 'ExpressionInteger':
				return {
					range: expressionTypedNode.range,
					type_: typeChange(expressionTypedNode.type_),
					value: expressionTypedNode.value
				};
			case 'ExpressionReferenceVariant':
				return {
					range: expressionTypedNode.range,
					type_: typeChange(expressionTypedNode.type_),
					value: expressionTypedNode.value
				};
			case 'ExpressionReferenceRecordTypeAliasConstructorFunction':
				return {
					range: expressionTypedNode.range,
					type_: typeChange(expressionTypedNode.type_),
					value: expressionTypedNode.value
				};
			case 'ExpressionReference':
				return {
					range: expressionTypedNode.range,
					type_: typeChange(expressionTypedNode.type_),
					value: expressionTypedNode.value
				};
			case 'ExpressionOperatorFunction':
				return {
					range: expressionTypedNode.range,
					type_: typeChange(expressionTypedNode.type_),
					value: expressionTypedNode.value
				};
			case 'ExpressionRecordAccessFunction':
				return {
					range: expressionTypedNode.range,
					type_: typeChange(expressionTypedNode.type_),
					value: expressionTypedNode.value
				};
			case 'ExpressionNegation':
				var inNegation = _v1.a;
				var inNegationMapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, inNegation);
				return {
					range: expressionTypedNode.range,
					type_: inNegationMapped.type_,
					value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionNegation(inNegationMapped)
				};
			case 'ExpressionParenthesized':
				var inParens = _v1.a;
				var inParensMapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, inParens);
				return {
					range: expressionTypedNode.range,
					type_: inParensMapped.type_,
					value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionParenthesized(inParensMapped)
				};
			case 'ExpressionRecordAccess':
				var expressionRecordAccess = _v1.a;
				return {
					range: expressionTypedNode.range,
					type_: typeChange(expressionTypedNode.type_),
					value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecordAccess(
						{
							fieldName: expressionRecordAccess.fieldName,
							fieldNameRange: expressionRecordAccess.fieldNameRange,
							record: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, expressionRecordAccess.record)
						})
				};
			case 'ExpressionInfixOperation':
				var expressionInfixOperation = _v1.a;
				var rightMapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, expressionInfixOperation.right);
				var leftMapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, expressionInfixOperation.left);
				var fullTypeMapped = typeChange(expressionTypedNode.type_);
				return {
					range: expressionTypedNode.range,
					type_: fullTypeMapped,
					value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionInfixOperation(
						{
							left: leftMapped,
							operator: {
								moduleOrigin: expressionInfixOperation.operator.moduleOrigin,
								symbol: expressionInfixOperation.operator.symbol,
								type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
										{
											input: leftMapped.type_,
											output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
													{input: rightMapped.type_, output: fullTypeMapped}))
										}))
							},
							right: rightMapped
						})
				};
			case 'ExpressionTuple':
				var expressionTuple = _v1.a;
				var part1Mapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, expressionTuple.part1);
				var part0Mapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, expressionTuple.part0);
				return {
					range: expressionTypedNode.range,
					type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
							{part0: part0Mapped.type_, part1: part1Mapped.type_})),
					value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionTuple(
						{part0: part0Mapped, part1: part1Mapped})
				};
			case 'ExpressionTriple':
				var expressionTriple = _v1.a;
				var part2Mapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, expressionTriple.part2);
				var part1Mapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, expressionTriple.part1);
				var part0Mapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, expressionTriple.part0);
				return {
					range: expressionTypedNode.range,
					type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple(
							{part0: part0Mapped.type_, part1: part1Mapped.type_, part2: part2Mapped.type_})),
					value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionTriple(
						{part0: part0Mapped, part1: part1Mapped, part2: part2Mapped})
				};
			case 'ExpressionIfThenElse':
				var expressionIfThenElse = _v1.a;
				var onTrueMapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, expressionIfThenElse.onTrue);
				return {
					range: expressionTypedNode.range,
					type_: onTrueMapped.type_,
					value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionIfThenElse(
						{
							condition: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, expressionIfThenElse.condition),
							onFalse: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, expressionIfThenElse.onFalse),
							onTrue: onTrueMapped
						})
				};
			case 'ExpressionList':
				var expressionListElements = _v1.a;
				if (!expressionListElements.b) {
					return {
						range: expressionTypedNode.range,
						type_: typeChange(expressionTypedNode.type_),
						value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionListEmpty
					};
				} else {
					var head = expressionListElements.a;
					var tail = expressionListElements.b;
					var headMapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, head);
					return {
						range: expressionTypedNode.range,
						type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeListList(headMapped.type_),
						value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionList(
							A2(
								$elm$core$List$cons,
								headMapped,
								A2(
									$elm$core$List$map,
									function (element) {
										return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, element);
									},
									tail)))
					};
				}
			case 'ExpressionCall':
				var expressionCall = _v1.a;
				return {
					range: expressionTypedNode.range,
					type_: typeChange(expressionTypedNode.type_),
					value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionCall(
						{
							argument0: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, expressionCall.argument0),
							argument1Up: A2(
								$elm$core$List$map,
								function (argument) {
									return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, argument);
								},
								expressionCall.argument1Up),
							called: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, expressionCall.called)
						})
				};
			case 'ExpressionRecord':
				var expressionRecordFields = _v1.a;
				return {
					range: expressionTypedNode.range,
					type_: typeChange(expressionTypedNode.type_),
					value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecord(
						A2(
							$elm$core$List$map,
							function (field) {
								return {
									name: field.name,
									nameRange: field.nameRange,
									range: field.range,
									value: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, field.value)
								};
							},
							expressionRecordFields))
				};
			case 'ExpressionRecordUpdate':
				var expressionRecordUpdate = _v1.a;
				var recordVariableTypeMapped = typeChange(expressionRecordUpdate.recordVariable.type_);
				return {
					range: expressionTypedNode.range,
					type_: recordVariableTypeMapped,
					value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecordUpdate(
						{
							field0: {
								name: expressionRecordUpdate.field0.name,
								nameRange: expressionRecordUpdate.field0.nameRange,
								range: expressionRecordUpdate.field0.range,
								value: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, expressionRecordUpdate.field0.value)
							},
							field1Up: A2(
								$elm$core$List$map,
								function (field) {
									return {
										name: field.name,
										nameRange: field.nameRange,
										range: field.range,
										value: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, field.value)
									};
								},
								expressionRecordUpdate.field1Up),
							recordVariable: {range: expressionRecordUpdate.recordVariable.range, type_: recordVariableTypeMapped, value: expressionRecordUpdate.recordVariable.value}
						})
				};
			case 'ExpressionLambda':
				var expressionLambda = _v1.a;
				var resultMapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, expressionLambda.result);
				var withParameter1UpMapped = A3(
					$elm$core$List$foldr,
					F2(
						function (argument, soFar) {
							var parameterMapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes, typeChange, argument);
							return {
								fullTypeAfterParameter0: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
										{input: parameterMapped.type_, output: soFar.fullTypeAfterParameter0})),
								parameters1UpMapped: A2($elm$core$List$cons, parameterMapped, soFar.parameters1UpMapped)
							};
						}),
					{fullTypeAfterParameter0: resultMapped.type_, parameters1UpMapped: _List_Nil},
					expressionLambda.parameter1Up);
				var parameter0Mapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes, typeChange, expressionLambda.parameter0);
				return {
					range: expressionTypedNode.range,
					type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
							{input: parameter0Mapped.type_, output: withParameter1UpMapped.fullTypeAfterParameter0})),
					value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionLambda(
						{parameter0: parameter0Mapped, parameter1Up: withParameter1UpMapped.parameters1UpMapped, result: resultMapped})
				};
			case 'ExpressionCaseOf':
				var expressionCaseOf = _v1.a;
				var case0ResultMapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, expressionCaseOf.case0.result);
				return {
					range: expressionTypedNode.range,
					type_: case0ResultMapped.type_,
					value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionCaseOf(
						{
							case0: {
								pattern: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes, typeChange, expressionCaseOf.case0.pattern),
								result: case0ResultMapped
							},
							case1Up: A2(
								$elm$core$List$map,
								function (case_) {
									return {
										pattern: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes, typeChange, case_.pattern),
										result: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, case_.result)
									};
								},
								expressionCaseOf.case1Up),
							matched: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, expressionCaseOf.matched)
						})
				};
			default:
				var expressionLetIn = _v1.a;
				var resultMapped = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, expressionLetIn.result);
				return {
					range: expressionTypedNode.range,
					type_: resultMapped.type_,
					value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionLetIn(
						{
							declaration0: {
								declaration: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationMapTypes, typeChange, expressionLetIn.declaration0.declaration),
								range: expressionLetIn.declaration0.range
							},
							declaration1Up: A2(
								$elm$core$List$map,
								function (letDeclarationAndRange) {
									return {
										declaration: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationMapTypes, typeChange, letDeclarationAndRange.declaration),
										range: letDeclarationAndRange.range
									};
								},
								expressionLetIn.declaration1Up),
							result: resultMapped
						})
				};
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationMapTypes = F2(
	function (typeChange, expressionLetDeclaration) {
		if (expressionLetDeclaration.$ === 'LetDestructuring') {
			var letDestructuring = expressionLetDeclaration.a;
			return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetDestructuring(
				{
					expression: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, letDestructuring.expression),
					pattern: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes, typeChange, letDestructuring.pattern)
				});
		} else {
			var letValueOrFunction = expressionLetDeclaration.a;
			return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetValueOrFunctionDeclaration(
				{
					name: letValueOrFunction.name,
					nameRange: letValueOrFunction.nameRange,
					parameters: A2(
						$elm$core$List$map,
						function (argument) {
							return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes, typeChange, argument);
						},
						letValueOrFunction.parameters),
					result: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes, typeChange, letValueOrFunction.result),
					signature: letValueOrFunction.signature,
					type_: typeChange(letValueOrFunction.type_)
				});
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables = F2(
	function (variableMap, type_) {
		if (type_.$ === 'TypeVariable') {
			var variable = type_.a;
			return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
				variableMap(variable));
		} else {
			var typeNotVariable = type_.a;
			return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
				A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableMapVariables, variableMap, typeNotVariable));
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableMapVariables = F2(
	function (variableMap, typeNotVariable) {
		switch (typeNotVariable.$) {
			case 'TypeUnit':
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit;
			case 'TypeFunction':
				var typeFunction = typeNotVariable.a;
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
					{
						input: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables, variableMap, typeFunction.input),
						output: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables, variableMap, typeFunction.output)
					});
			case 'TypeTuple':
				var typeTuple = typeNotVariable.a;
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
					{
						part0: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables, variableMap, typeTuple.part0),
						part1: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables, variableMap, typeTuple.part1)
					});
			case 'TypeTriple':
				var typeTriple = typeNotVariable.a;
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple(
					{
						part0: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables, variableMap, typeTriple.part0),
						part1: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables, variableMap, typeTriple.part1),
						part2: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables, variableMap, typeTriple.part2)
					});
			case 'TypeConstruct':
				var typeConstruct = typeNotVariable.a;
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
					{
						_arguments: A2(
							$elm$core$List$map,
							function (argument) {
								return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables, variableMap, argument);
							},
							typeConstruct._arguments),
						moduleOrigin: typeConstruct.moduleOrigin,
						name: typeConstruct.name
					});
			case 'TypeRecord':
				var typeRecordFields = typeNotVariable.a;
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(
					A2(
						$miniBill$elm_fast_dict$FastDict$map,
						F2(
							function (_v1, fieldValue) {
								return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables, variableMap, fieldValue);
							}),
						typeRecordFields));
			default:
				var typeRecordExtension = typeNotVariable.a;
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(
					{
						fields: A2(
							$miniBill$elm_fast_dict$FastDict$map,
							F2(
								function (_v2, fieldValue) {
									return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables, variableMap, fieldValue);
								}),
							typeRecordExtension.fields),
						recordVariable: variableMap(typeRecordExtension.recordVariable)
					});
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypeVariables = F2(
	function (typeVariableChange, expressionTypedNode) {
		return A2(
			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes,
			function (type_) {
				return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables, typeVariableChange, type_);
			},
			expressionTypedNode);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypeVariables = F2(
	function (typeVariableChange, patternTypedNode) {
		return A2(
			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes,
			function (type_) {
				return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables, typeVariableChange, type_);
			},
			patternTypedNode);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$declarationValueOrFunctionInfoMapTypeVariables = F2(
	function (variableChange, valueOrFunctionDeclaration) {
		return {
			documentation: valueOrFunctionDeclaration.documentation,
			name: valueOrFunctionDeclaration.name,
			nameRange: valueOrFunctionDeclaration.nameRange,
			parameters: A2(
				$elm$core$List$map,
				function (argument) {
					return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypeVariables, variableChange, argument);
				},
				valueOrFunctionDeclaration.parameters),
			result: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypeVariables, variableChange, valueOrFunctionDeclaration.result),
			signature: valueOrFunctionDeclaration.signature,
			type_: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables, variableChange, valueOrFunctionDeclaration.type_)
		};
	});
var $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$compare = F2(
	function (a, b) {
		return ((a.useRange.start.row - b.useRange.start.row) < 0) ? $elm$core$Basics$LT : (((a.useRange.start.row - b.useRange.start.row) > 0) ? $elm$core$Basics$GT : (((a.useRange.start.column - b.useRange.start.column) < 0) ? $elm$core$Basics$LT : (((a.useRange.start.column - b.useRange.start.column) > 0) ? $elm$core$Basics$GT : (((a.useRange.end.row - b.useRange.end.row) < 0) ? $elm$core$Basics$LT : (((a.useRange.end.row - b.useRange.end.row) > 0) ? $elm$core$Basics$GT : (((a.useRange.end.column - b.useRange.end.column) < 0) ? $elm$core$Basics$LT : (((a.useRange.end.column - b.useRange.end.column) > 0) ? $elm$core$Basics$GT : A2($elm$core$Basics$compare, a.name, b.name))))))));
	});
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$getInner = F2(
	function (targetKey, dict) {
		getInner:
		while (true) {
			if (dict.$ === 'Leaf') {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$compare, targetKey, key);
				switch (_v1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue getInner;
					case 'EQ':
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue getInner;
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get = F2(
	function (targetKey, _v0) {
		var dict = _v0.b;
		return A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$getInner, targetKey, dict);
	});
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$anyInner = F2(
	function (isNeedle, dict) {
		anyInner:
		while (true) {
			if (dict.$ === 'Leaf') {
				return false;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				if (A2(isNeedle, key, value) || A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$anyInner, isNeedle, left)) {
					return true;
				} else {
					var $temp$isNeedle = isNeedle,
						$temp$dict = right;
					isNeedle = $temp$isNeedle;
					dict = $temp$dict;
					continue anyInner;
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$any = F2(
	function (isNeedle, _v0) {
		var dict = _v0.b;
		return A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$anyInner, isNeedle, dict);
	});
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$DictByTypeVariableFromContext = F2(
	function (a, b) {
		return {$: 'DictByTypeVariableFromContext', a: a, b: b};
	});
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$Leaf = {$: 'Leaf'};
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty = A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$DictByTypeVariableFromContext, 0, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$Leaf);
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlInner = F3(
	function (func, acc, dict) {
		foldlInner:
		while (true) {
			if (dict.$ === 'Leaf') {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlInner, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldlInner;
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldl = F3(
	function (func, acc, _v0) {
		var dict = _v0.b;
		return A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlInner, func, acc, dict);
	});
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode = F5(
	function (a, b, c, d, e) {
		return {$: 'InnerNode', a: a, b: b, c: c, d: d, e: e};
	});
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'InnerNode') && right.a) {
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'InnerNode') && left.a) {
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode,
					true,
					key,
					value,
					A5($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode, false, lK, lV, lLeft, lRight),
					A5($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode, false, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode,
					color,
					rK,
					rV,
					A5($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode, true, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'InnerNode') && left.a) && (left.d.$ === 'InnerNode')) && left.d.a) {
				var lK = left.b;
				var lV = left.c;
				var _v3 = left.d;
				var llK = _v3.b;
				var llV = _v3.c;
				var llLeft = _v3.d;
				var llRight = _v3.e;
				var lRight = left.e;
				return A5(
					$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode,
					true,
					lK,
					lV,
					A5($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode, false, llK, llV, llLeft, llRight),
					A5($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode, false, key, value, lRight, right));
			} else {
				return A5($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode, color, key, value, left, right);
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertHelpNoReplace = F3(
	function (key, value, dict) {
		if (dict.$ === 'Leaf') {
			return $elm$core$Maybe$Just(
				A5($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode, true, key, value, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$Leaf, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$Leaf));
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$compare, key, nKey);
			switch (_v1.$) {
				case 'LT':
					var _v2 = A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertHelpNoReplace, key, value, nLeft);
					if (_v2.$ === 'Just') {
						var newLeft = _v2.a;
						return $elm$core$Maybe$Just(
							A5($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$balance, nColor, nKey, nValue, newLeft, nRight));
					} else {
						return $elm$core$Maybe$Nothing;
					}
				case 'EQ':
					return $elm$core$Maybe$Nothing;
				default:
					var _v3 = A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertHelpNoReplace, key, value, nRight);
					if (_v3.$ === 'Just') {
						var newRight = _v3.a;
						return $elm$core$Maybe$Just(
							A5($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$balance, nColor, nKey, nValue, nLeft, newRight));
					} else {
						return $elm$core$Maybe$Nothing;
					}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setRootBlack = function (dict) {
	if ((dict.$ === 'InnerNode') && dict.a) {
		var k = dict.b;
		var v = dict.c;
		var l = dict.d;
		var r = dict.e;
		return A5($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode, false, k, v, l, r);
	} else {
		var x = dict;
		return x;
	}
};
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace = F3(
	function (key, value, orig) {
		var sz = orig.a;
		var dict = orig.b;
		var _v0 = A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertHelpNoReplace, key, value, dict);
		if (_v0.$ === 'Just') {
			var result = _v0.a;
			return A2(
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$DictByTypeVariableFromContext,
				sz + 1,
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setRootBlack(result));
		} else {
			return orig;
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$nameDisambiguateWithIndexBy = F3(
	function (index, alreadyExists, currentName) {
		nameDisambiguateWithIndexBy:
		while (true) {
			var indexedCurrentName = function () {
				if (!index) {
					return currentName;
				} else {
					var indexAtLeast1 = index;
					return currentName + ($elm$core$String$fromInt(indexAtLeast1) + '');
				}
			}();
			if (alreadyExists(indexedCurrentName)) {
				var $temp$index = index + 1,
					$temp$alreadyExists = alreadyExists,
					$temp$currentName = currentName;
				index = $temp$index;
				alreadyExists = $temp$alreadyExists;
				currentName = $temp$currentName;
				continue nameDisambiguateWithIndexBy;
			} else {
				return indexedCurrentName;
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$nameDisambiguateBy = F2(
	function (alreadyExists, currentName) {
		return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$nameDisambiguateWithIndexBy, 0, alreadyExists, currentName);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariablesFromContextToDisambiguationLookup = function (variables) {
	return A3(
		$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldl,
		F3(
			function (variable, _v0, soFar) {
				var alreadyExists = function (toDisambiguate) {
					return A2(
						$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$any,
						F2(
							function (_v1, diambiguatedVariableSoFar) {
								return _Utils_eq(diambiguatedVariableSoFar, toDisambiguate);
							}),
						soFar);
				};
				var variableAsDisambiguatedString = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$nameDisambiguateBy, alreadyExists, variable.name);
				return A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace, variable, variableAsDisambiguatedString, soFar);
			}),
		$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty,
		variables);
};
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion = F2(
	function (t1, t2) {
		var s1 = t1.a;
		var s2 = t2.a;
		return ((s1 - s2) > 0) ? A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldl, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace, t1, t2) : A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldl, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace, t2, t1);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToTypeVariableFromContextSetsAndUnify = F2(
	function (elementToSet, elements) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (element, soFar) {
					return A2(
						$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
						soFar,
						elementToSet(element));
				}),
			$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty,
			elements);
	});
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$singleton = F2(
	function (key, value) {
		return A2(
			$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$DictByTypeVariableFromContext,
			1,
			A5($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode, false, key, value, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$Leaf, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$Leaf));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables = function (type_) {
	if (type_.$ === 'TypeVariable') {
		var variable = type_.a;
		return A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$singleton, variable, _Utils_Tuple0);
	} else {
		var typeNotVariable = type_.a;
		return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableContainedVariables(typeNotVariable);
	}
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableContainedVariables = function (typeNotVariable) {
	switch (typeNotVariable.$) {
		case 'TypeUnit':
			return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
		case 'TypeFunction':
			var typeFunction = typeNotVariable.a;
			return A2(
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(typeFunction.input),
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(typeFunction.output));
		case 'TypeTuple':
			var typeTuple = typeNotVariable.a;
			return A2(
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(typeTuple.part0),
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(typeTuple.part1));
		case 'TypeTriple':
			var typeTriple = typeNotVariable.a;
			return A2(
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(typeTriple.part2),
				A2(
					$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(typeTriple.part1),
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(typeTriple.part0)));
		case 'TypeConstruct':
			var typeConstruct = typeNotVariable.a;
			return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToTypeVariableFromContextSetsAndUnify, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables, typeConstruct._arguments);
		case 'TypeRecord':
			var typeRecordFields = typeNotVariable.a;
			return A3(
				$miniBill$elm_fast_dict$FastDict$foldl,
				F3(
					function (_v1, value, soFar) {
						return A2(
							$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
							soFar,
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(value));
					}),
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty,
				typeRecordFields);
		default:
			var typeRecordExtension = typeNotVariable.a;
			return A3(
				$miniBill$elm_fast_dict$FastDict$foldl,
				F3(
					function (_v2, value, soFar) {
						return A2(
							$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
							soFar,
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(value));
					}),
				A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$singleton, typeRecordExtension.recordVariable, _Utils_Tuple0),
				typeRecordExtension.fields);
	}
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternContainedTypeVariables = function (pattern) {
	switch (pattern.$) {
		case 'PatternIgnored':
			return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
		case 'PatternUnit':
			return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
		case 'PatternChar':
			return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
		case 'PatternString':
			return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
		case 'PatternInt':
			return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
		case 'PatternVariable':
			return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
		case 'PatternParenthesized':
			var inParens = pattern.a;
			return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(inParens);
		case 'PatternAs':
			var patternAs = pattern.a;
			return A2(
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(patternAs.variable.type_),
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(patternAs.pattern));
		case 'PatternTuple':
			var parts = pattern.a;
			return A2(
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(parts.part0),
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(parts.part1));
		case 'PatternTriple':
			var parts = pattern.a;
			return A2(
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(parts.part2),
				A2(
					$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(parts.part1),
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(parts.part0)));
		case 'PatternListCons':
			var patternListCons = pattern.a;
			return A2(
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(patternListCons.head),
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(patternListCons.tail));
		case 'PatternListExact':
			var elements = pattern.a;
			return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToTypeVariableFromContextSetsAndUnify, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables, elements);
		case 'PatternVariant':
			var patternVariant = pattern.a;
			return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToTypeVariableFromContextSetsAndUnify, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables, patternVariant.values);
		default:
			var fields = pattern.a;
			return A2(
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToTypeVariableFromContextSetsAndUnify,
				function (fieldTypedNode) {
					return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(fieldTypedNode.type_);
				},
				fields);
	}
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables = function (patternTypedNode) {
	return A2(
		$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(patternTypedNode.type_),
		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternContainedTypeVariables(patternTypedNode.value));
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionCaseOfCaseContainedTypeVariables = function (syntaxCase) {
	return A2(
		$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(syntaxCase.pattern),
		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(syntaxCase.result));
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionContainedTypeVariables = function (expression) {
	switch (expression.$) {
		case 'ExpressionUnit':
			return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
		case 'ExpressionInteger':
			return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
		case 'ExpressionFloat':
			return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
		case 'ExpressionString':
			return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
		case 'ExpressionChar':
			return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
		case 'ExpressionReferenceVariant':
			return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
		case 'ExpressionReference':
			return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
		case 'ExpressionReferenceRecordTypeAliasConstructorFunction':
			return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
		case 'ExpressionOperatorFunction':
			return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
		case 'ExpressionRecordAccessFunction':
			return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
		case 'ExpressionNegation':
			var negated = expression.a;
			return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(negated);
		case 'ExpressionParenthesized':
			var inParens = expression.a;
			return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(inParens);
		case 'ExpressionRecordAccess':
			var expressionRecordAccess = expression.a;
			return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(expressionRecordAccess.record);
		case 'ExpressionInfixOperation':
			var expressionInfixOperation = expression.a;
			return A2(
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(expressionInfixOperation.left),
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(expressionInfixOperation.right));
		case 'ExpressionTuple':
			var parts = expression.a;
			return A2(
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(parts.part0),
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(parts.part1));
		case 'ExpressionTriple':
			var parts = expression.a;
			return A2(
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(parts.part2),
				A2(
					$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(parts.part1),
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(parts.part0)));
		case 'ExpressionIfThenElse':
			var expressionIfThenElse = expression.a;
			return A2(
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(expressionIfThenElse.onFalse),
				A2(
					$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(expressionIfThenElse.onTrue),
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(expressionIfThenElse.condition)));
		case 'ExpressionList':
			var elements = expression.a;
			return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToTypeVariableFromContextSetsAndUnify, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables, elements);
		case 'ExpressionRecord':
			var fields = expression.a;
			return A2(
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToTypeVariableFromContextSetsAndUnify,
				function (field) {
					return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(field.value);
				},
				fields);
		case 'ExpressionCall':
			var expressionCall = expression.a;
			return A2(
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
				A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToTypeVariableFromContextSetsAndUnify, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables, expressionCall.argument1Up),
				A2(
					$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(expressionCall.argument0),
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(expressionCall.called)));
		case 'ExpressionLambda':
			var expressionLambda = expression.a;
			return A2(
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(expressionLambda.result),
				A3(
					$elm$core$List$foldl,
					F2(
						function (parameter, soFar) {
							return A2(
								$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
								soFar,
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(parameter));
						}),
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(expressionLambda.parameter0),
					expressionLambda.parameter1Up));
		case 'ExpressionRecordUpdate':
			var expressionRecordUpdate = expression.a;
			return A2(
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
				A3(
					$elm$core$List$foldl,
					F2(
						function (field, soFar) {
							return A2(
								$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
								soFar,
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(field.value));
						}),
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(expressionRecordUpdate.field0.value),
					expressionRecordUpdate.field1Up),
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(expressionRecordUpdate.recordVariable.type_));
		case 'ExpressionCaseOf':
			var expressionCaseOf = expression.a;
			return A2(
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
				A3(
					$elm$core$List$foldl,
					F2(
						function (case_, soFar) {
							return A2(
								$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
								soFar,
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionCaseOfCaseContainedTypeVariables(case_));
						}),
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionCaseOfCaseContainedTypeVariables(expressionCaseOf.case0),
					expressionCaseOf.case1Up),
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(expressionCaseOf.matched));
		default:
			var expressionLetIn = expression.a;
			return A2(
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(expressionLetIn.result),
				A3(
					$elm$core$List$foldl,
					F2(
						function (letDeclaration, soFar) {
							return A2(
								$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
								soFar,
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationContainedTypeVariables(letDeclaration.declaration));
						}),
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationContainedTypeVariables(expressionLetIn.declaration0.declaration),
					expressionLetIn.declaration1Up));
	}
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables = function (expressionTypedNode) {
	return A2(
		$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(expressionTypedNode.type_),
		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionContainedTypeVariables(expressionTypedNode.value));
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationContainedTypeVariables = function (letDeclaration) {
	if (letDeclaration.$ === 'LetDestructuring') {
		var letDestructuring = letDeclaration.a;
		return A2(
			$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(letDestructuring.pattern),
			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(letDestructuring.expression));
	} else {
		var letValueOrFunctionDeclaration = letDeclaration.a;
		return A2(
			$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(letValueOrFunctionDeclaration.result),
			A2(
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
				A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToTypeVariableFromContextSetsAndUnify, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables, letValueOrFunctionDeclaration.parameters),
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(letValueOrFunctionDeclaration.type_)));
	}
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueOrFunctionDeclarationContainedTypeVariables = function (declarationValueOrFunction) {
	return A2(
		$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(declarationValueOrFunction.result),
		A2(
			$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion,
			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(declarationValueOrFunction.type_),
			A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToTypeVariableFromContextSetsAndUnify, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables, declarationValueOrFunction.parameters)));
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$declarationValueOrFunctionDisambiguateTypeVariables = function (declarationValueOrFunctionInfo) {
	var globalTypeVariableDisambiguationLookup = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariablesFromContextToDisambiguationLookup(
		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueOrFunctionDeclarationContainedTypeVariables(declarationValueOrFunctionInfo));
	return A2(
		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$declarationValueOrFunctionInfoMapTypeVariables,
		function (variable) {
			return {
				name: A2(
					$elm$core$Maybe$withDefault,
					'thisIsABugInDisambiguationPleaseReportToElmSyntaxTypeInfer',
					A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get, variable, globalTypeVariableDisambiguationLookup)),
				useRange: variable.useRange
			};
		},
		declarationValueOrFunctionInfo);
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$everywhereRange = {
	end: {column: 10000000, row: 10000000},
	start: {column: 1, row: 1}
};
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$getMinKeyInner = function (dict) {
	getMinKeyInner:
	while (true) {
		if (dict.$ === 'Leaf') {
			return $elm$core$Maybe$Nothing;
		} else {
			var k = dict.b;
			var left = dict.d;
			if (left.$ === 'Leaf') {
				return $elm$core$Maybe$Just(k);
			} else {
				var $temp$dict = left;
				dict = $temp$dict;
				continue getMinKeyInner;
			}
		}
	}
};
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$getMinKey = function (_v0) {
	var dict = _v0.b;
	return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$getMinKeyInner(dict);
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraintToString = function (constraint) {
	switch (constraint.$) {
		case 'TypeVariableConstraintNumber':
			return 'number';
		case 'TypeVariableConstraintAppendable':
			return 'appendable';
		case 'TypeVariableConstraintComparable':
			return 'comparable';
		default:
			return 'compappend';
	}
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariablesCreateCondensedVariable = function (set) {
	var _v0 = set.constraint;
	if (_v0.$ === 'Just') {
		var unifiedConstraint = _v0.a;
		return $elm$core$Result$Ok(
			{
				name: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraintToString(unifiedConstraint),
				useRange: set.overarchingUseRange
			});
	} else {
		var _v1 = $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$getMinKey(set.variables);
		if (_v1.$ === 'Nothing') {
			return $elm$core$Result$Err('implementation bug: equivalent variable set is empty');
		} else {
			var variable0 = _v1.a;
			return $elm$core$Result$Ok(
				{name: variable0.name, useRange: set.overarchingUseRange});
		}
	}
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$createEquivalentVariablesToCondensedVariableLookup = function (equivalentVariables) {
	return A3(
		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom,
		$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty,
		F2(
			function (equivalentVariableSet, soFar) {
				return A2(
					$elm$core$Result$map,
					function (unifiedVariable) {
						return A3(
							$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldl,
							F3(
								function (variable, _v0, soFarInSet) {
									return A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace, variable, unifiedVariable, soFarInSet);
								}),
							soFar,
							equivalentVariableSet.variables);
					},
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariablesCreateCondensedVariable(equivalentVariableSet));
			}),
		equivalentVariables);
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationToInfoString = function (location) {
	return $elm$core$String$fromInt(location.row) + (':' + $elm$core$String$fromInt(location.column));
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString = function (range) {
	return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationToInfoString(range.start) + ('-' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationToInfoString(range.end));
};
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlWhileOkFromInner = F3(
	function (func, initialFolded, dict) {
		foldlWhileOkFromInner:
		while (true) {
			if (dict.$ === 'Leaf') {
				return $elm$core$Result$Ok(initialFolded);
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlWhileOkFromInner, func, initialFolded, left);
				if (_v1.$ === 'Err') {
					var error = _v1.a;
					return $elm$core$Result$Err(error);
				} else {
					var leftFolded = _v1.a;
					var _v2 = A3(func, key, value, leftFolded);
					if (_v2.$ === 'Err') {
						var error = _v2.a;
						return $elm$core$Result$Err(error);
					} else {
						var leftAndCurrentFolded = _v2.a;
						var $temp$func = func,
							$temp$initialFolded = leftAndCurrentFolded,
							$temp$dict = right;
						func = $temp$func;
						initialFolded = $temp$initialFolded;
						dict = $temp$dict;
						continue foldlWhileOkFromInner;
					}
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlWhileOkFrom = F3(
	function (initialFolded, reduceToResult, _v0) {
		var dict = _v0.b;
		return A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlWhileOkFromInner, reduceToResult, initialFolded, dict);
	});
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$size = function (_v0) {
	var sz = _v0.a;
	return sz;
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$allUnchangedTrueArgumentsListEmpty = {allUnchanged: true, _arguments: _List_Nil};
var $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$locationEquals = F2(
	function (a, b) {
		return (!(a.row - b.row)) && (!(a.column - b.column));
	});
var $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$rangeEquals = F2(
	function (a, b) {
		return A2($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$locationEquals, a.start, b.start) && A2($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$locationEquals, a.end, b.end);
	});
var $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$equals = F2(
	function (a, b) {
		return A2($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$rangeEquals, a.useRange, b.useRange) && _Utils_eq(a.name, b.name);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictFoldlWhileOkFrom = F3(
	function (initialFolded, reduceToResult, fastDict) {
		return A3(
			$miniBill$elm_fast_dict$FastDict$foldl,
			F3(
				function (key, value, soFarOrError) {
					if (soFarOrError.$ === 'Err') {
						var error = soFarOrError.a;
						return $elm$core$Result$Err(error);
					} else {
						var soFar = soFarOrError.a;
						return A3(reduceToResult, key, value, soFar);
					}
				}),
			$elm$core$Result$Ok(initialFolded),
			fastDict);
	});
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$isEmpty = function (_v0) {
	var dictSize = _v0.a;
	return !dictSize;
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldl2From = F4(
	function (initialState, aList, bList, reduce) {
		listFoldl2From:
		while (true) {
			if (!aList.b) {
				return initialState;
			} else {
				var aHead = aList.a;
				var aTail = aList.b;
				if (!bList.b) {
					return initialState;
				} else {
					var bHead = bList.a;
					var bTail = bList.b;
					var $temp$initialState = A3(reduce, aHead, bHead, initialState),
						$temp$aList = aTail,
						$temp$bList = bTail,
						$temp$reduce = reduce;
					initialState = $temp$initialState;
					aList = $temp$aList;
					bList = $temp$bList;
					reduce = $temp$reduce;
					continue listFoldl2From;
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom = F3(
	function (initialOkFolded, reduceOnOk, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (element, soFar) {
					if (soFar.$ === 'Err') {
						var error = soFar.a;
						return $elm$core$Result$Err(error);
					} else {
						var soFarOk = soFar.a;
						return A2(reduceOnOk, element, soFarOk);
					}
				}),
			$elm$core$Result$Ok(initialOkFolded),
			list);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$parameterToVariableDictEmptyParameterToTypeNotVariableDictEmpty = {parameterToTypeNotVariable: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty, parameterToVariable: $miniBill$elm_fast_dict$FastDict$empty};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableFromContextToInfoString = function (typeVariableFromContext) {
	return typeVariableFromContext.name + ('(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(typeVariableFromContext.useRange) + ')'));
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString = function (typeNotVariable) {
	switch (typeNotVariable.$) {
		case 'TypeUnit':
			return '()';
		case 'TypeFunction':
			var typeFunction = typeNotVariable.a;
			return '(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeToInfoString(typeFunction.input) + (' -> ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeToInfoString(typeFunction.output) + ')')));
		case 'TypeConstruct':
			var typeConstruct = typeNotVariable.a;
			var typeReferenceAsString = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString(
				{name: typeConstruct.name, qualification: typeConstruct.moduleOrigin});
			var _v2 = typeConstruct._arguments;
			if (!_v2.b) {
				return typeReferenceAsString;
			} else {
				var argument0 = _v2.a;
				var argument1Up = _v2.b;
				return '(' + (typeReferenceAsString + ($elm$core$String$concat(
					A2(
						$elm$core$List$map,
						function (argument) {
							return ' ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeToInfoString(argument);
						},
						A2($elm$core$List$cons, argument0, argument1Up))) + ')'));
			}
		case 'TypeTuple':
			var parts = typeNotVariable.a;
			return '( ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeToInfoString(parts.part0) + (', ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeToInfoString(parts.part1) + ' )')));
		case 'TypeTriple':
			var parts = typeNotVariable.a;
			return '( ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeToInfoString(parts.part0) + (', ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeToInfoString(parts.part1) + (', ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeToInfoString(parts.part2) + ' )')))));
		case 'TypeRecord':
			var fields = typeNotVariable.a;
			return '{ ' + (A2(
				$elm$core$String$join,
				', ',
				A2(
					$elm$core$List$map,
					function (_v3) {
						var name = _v3.a;
						var value = _v3.b;
						return name + (' : ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeToInfoString(value));
					},
					$miniBill$elm_fast_dict$FastDict$toList(fields))) + ' }');
		default:
			var recordExtension = typeNotVariable.a;
			return '{ ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableFromContextToInfoString(recordExtension.recordVariable) + (' | ' + (A2(
				$elm$core$String$join,
				', ',
				A2(
					$elm$core$List$map,
					function (_v4) {
						var name = _v4.a;
						var value = _v4.b;
						return name + (' : ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeToInfoString(value));
					},
					$miniBill$elm_fast_dict$FastDict$toList(recordExtension.fields))) + ' }')));
	}
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeToInfoString = function (type_) {
	if (type_.$ === 'TypeVariable') {
		var typeVariable = type_.a;
		return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableFromContextToInfoString(typeVariable);
	} else {
		var typeNotVariable = type_.a;
		return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(typeNotVariable);
	}
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariableConstraintAppendable = {$: 'TypeVariableConstraintAppendable'};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$justTypeVariableConstraintAppendable = $elm$core$Maybe$Just($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariableConstraintAppendable);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariableConstraintCompappend = {$: 'TypeVariableConstraintCompappend'};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$justTypeVariableConstraintCompappend = $elm$core$Maybe$Just($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariableConstraintCompappend);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariableConstraintComparable = {$: 'TypeVariableConstraintComparable'};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$justTypeVariableConstraintComparable = $elm$core$Maybe$Just($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariableConstraintComparable);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariableConstraintNumber = {$: 'TypeVariableConstraintNumber'};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$justTypeVariableConstraintNumber = $elm$core$Maybe$Just($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariableConstraintNumber);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint = function (variableName) {
	if (A2($elm$core$String$startsWith, 'number', variableName)) {
		return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$justTypeVariableConstraintNumber;
	} else {
		var _v0 = A3($elm$core$String$slice, 0, 10, variableName);
		switch (_v0) {
			case 'appendable':
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$justTypeVariableConstraintAppendable;
			case 'comparable':
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$justTypeVariableConstraintComparable;
			case 'compappend':
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$justTypeVariableConstraintCompappend;
			default:
				return $elm$core$Maybe$Nothing;
		}
	}
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeConstructFullyExpandIfAlias = F2(
	function (context, typeConstructToExpand) {
		var _v41 = A2($miniBill$elm_fast_dict$FastDict$get, typeConstructToExpand.moduleOrigin, context.declarationTypes);
		if (_v41.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var aOriginModuleTypes = _v41.a;
			var _v42 = A2($miniBill$elm_fast_dict$FastDict$get, typeConstructToExpand.name, aOriginModuleTypes.typeAliases);
			if (_v42.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var originAliasDeclaration = _v42.a;
				var substitutionsToApplyToOriginAliasType = A4(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldl2From,
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$parameterToVariableDictEmptyParameterToTypeNotVariableDictEmpty,
					originAliasDeclaration.parameters,
					typeConstructToExpand._arguments,
					F3(
						function (parameterName, argument, soFar) {
							if (argument.$ === 'TypeVariable') {
								var argumentVariable = argument.a;
								return {
									parameterToTypeNotVariable: soFar.parameterToTypeNotVariable,
									parameterToVariable: A3($miniBill$elm_fast_dict$FastDict$insert, parameterName, argumentVariable, soFar.parameterToVariable)
								};
							} else {
								var argumentTypeNotVariable = argument.a;
								return {
									parameterToTypeNotVariable: A3(
										$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace,
										{name: parameterName, useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty},
										argumentTypeNotVariable,
										soFar.parameterToTypeNotVariable),
									parameterToVariable: soFar.parameterToVariable
								};
							}
						}));
				var aliasTypeWithVariableArgumentsFilledIn = A2(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables,
					function (parameterVariable) {
						var _v44 = A2($miniBill$elm_fast_dict$FastDict$get, parameterVariable.name, substitutionsToApplyToOriginAliasType.parameterToVariable);
						if (_v44.$ === 'Just') {
							var variable = _v44.a;
							return variable;
						} else {
							return {name: parameterVariable.name, useRange: $stil4m$elm_syntax$Elm$Syntax$Range$empty};
						}
					},
					originAliasDeclaration.type_);
				if ($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$isEmpty(substitutionsToApplyToOriginAliasType.parameterToTypeNotVariable)) {
					return $elm$core$Maybe$Just(aliasTypeWithVariableArgumentsFilledIn);
				} else {
					var _v43 = A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType,
						context,
						function (variable) {
							return A2(
								$elm$core$Maybe$map,
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable,
								A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get, variable, substitutionsToApplyToOriginAliasType.parameterToTypeNotVariable));
						},
						aliasTypeWithVariableArgumentsFilledIn);
					if (_v43.$ === 'Ok') {
						var typeAliasWithSomeVariablesSubstitutedByTypes = _v43.a;
						return $elm$core$Maybe$Just(typeAliasWithSomeVariablesSubstitutedByTypes.type_);
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsAppendable = F2(
	function (declarationTypes, type_) {
		if (type_.$ === 'TypeVariable') {
			var typeVariable = type_.a;
			var _v39 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(typeVariable.name);
			if (_v39.$ === 'Nothing') {
				return false;
			} else {
				var constraint = _v39.a;
				switch (constraint.$) {
					case 'TypeVariableConstraintAppendable':
						return true;
					case 'TypeVariableConstraintCompappend':
						return true;
					case 'TypeVariableConstraintComparable':
						return false;
					default:
						return false;
				}
			}
		} else {
			var typeNotVariable = type_.a;
			return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsAppendable, declarationTypes, typeNotVariable);
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsCompappend = F2(
	function (declarationTypes, type_) {
		if (type_.$ === 'TypeVariable') {
			var typeVariable = type_.a;
			var _v36 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(typeVariable.name);
			if (_v36.$ === 'Nothing') {
				return false;
			} else {
				var constraint = _v36.a;
				switch (constraint.$) {
					case 'TypeVariableConstraintAppendable':
						return false;
					case 'TypeVariableConstraintCompappend':
						return true;
					case 'TypeVariableConstraintComparable':
						return false;
					default:
						return false;
				}
			}
		} else {
			var typeNotVariable = type_.a;
			return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsCompappend, declarationTypes, typeNotVariable);
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsComparable = F2(
	function (declarationTypes, type_) {
		if (type_.$ === 'TypeVariable') {
			var typeVariable = type_.a;
			var _v33 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(typeVariable.name);
			if (_v33.$ === 'Nothing') {
				return false;
			} else {
				var constraint = _v33.a;
				switch (constraint.$) {
					case 'TypeVariableConstraintAppendable':
						return false;
					case 'TypeVariableConstraintCompappend':
						return true;
					case 'TypeVariableConstraintComparable':
						return true;
					default:
						return true;
				}
			}
		} else {
			var typeNotVariable = type_.a;
			return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsComparable, declarationTypes, typeNotVariable);
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsNumber = F2(
	function (declarationTypes, type_) {
		if (type_.$ === 'TypeVariable') {
			var typeVariable = type_.a;
			var _v30 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(typeVariable.name);
			if (_v30.$ === 'Nothing') {
				return false;
			} else {
				var constraint = _v30.a;
				switch (constraint.$) {
					case 'TypeVariableConstraintAppendable':
						return true;
					case 'TypeVariableConstraintCompappend':
						return true;
					case 'TypeVariableConstraintComparable':
						return false;
					default:
						return false;
				}
			}
		} else {
			var typeNotVariable = type_.a;
			return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsNumber, declarationTypes, typeNotVariable);
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsAppendable = F2(
	function (declarationTypes, type_) {
		switch (type_.$) {
			case 'TypeConstruct':
				var variableReplacementTypeConstruct = type_.a;
				var _v25 = variableReplacementTypeConstruct.moduleOrigin;
				switch (_v25) {
					case 'String':
						var _v26 = variableReplacementTypeConstruct.name;
						if (_v26 === 'String') {
							return true;
						} else {
							return false;
						}
					case 'List':
						var _v27 = variableReplacementTypeConstruct.name;
						if (_v27 === 'List') {
							return true;
						} else {
							return false;
						}
					default:
						var _v28 = A2(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeConstructFullyExpandIfAlias,
							{declarationTypes: declarationTypes, range: $stil4m$elm_syntax$Elm$Syntax$Range$empty},
							variableReplacementTypeConstruct);
						if (_v28.$ === 'Nothing') {
							return false;
						} else {
							var deAliasedTypeConstruct = _v28.a;
							return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsAppendable, declarationTypes, deAliasedTypeConstruct);
						}
				}
			case 'TypeUnit':
				return false;
			case 'TypeTuple':
				return false;
			case 'TypeTriple':
				return false;
			case 'TypeRecord':
				return false;
			case 'TypeRecordExtension':
				return false;
			default:
				return false;
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsCompappend = F2(
	function (declarationTypes, type_) {
		switch (type_.$) {
			case 'TypeConstruct':
				var variableReplacementTypeConstruct = type_.a;
				var _v21 = variableReplacementTypeConstruct.moduleOrigin;
				switch (_v21) {
					case 'String':
						return true;
					case 'List':
						var _v22 = variableReplacementTypeConstruct.name;
						if (_v22 === 'List') {
							return A2(
								$elm$core$List$all,
								function (argument) {
									return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsComparable, declarationTypes, argument);
								},
								variableReplacementTypeConstruct._arguments);
						} else {
							return false;
						}
					default:
						var _v23 = A2(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeConstructFullyExpandIfAlias,
							{declarationTypes: declarationTypes, range: $stil4m$elm_syntax$Elm$Syntax$Range$empty},
							variableReplacementTypeConstruct);
						if (_v23.$ === 'Nothing') {
							return false;
						} else {
							var deAliasedTypeConstruct = _v23.a;
							return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsCompappend, declarationTypes, deAliasedTypeConstruct);
						}
				}
			case 'TypeUnit':
				return false;
			case 'TypeTuple':
				return false;
			case 'TypeTriple':
				return false;
			case 'TypeRecord':
				return false;
			case 'TypeRecordExtension':
				return false;
			default:
				return false;
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsComparable = F2(
	function (declarationTypes, typeNotVariable) {
		switch (typeNotVariable.$) {
			case 'TypeConstruct':
				var variableReplacementTypeConstruct = typeNotVariable.a;
				var _v16 = variableReplacementTypeConstruct.moduleOrigin;
				switch (_v16) {
					case 'String':
						return true;
					case 'Char':
						return true;
					case 'Basics':
						var _v17 = variableReplacementTypeConstruct.name;
						switch (_v17) {
							case 'Int':
								return true;
							case 'Float':
								return true;
							default:
								return false;
						}
					case 'Time':
						var _v18 = variableReplacementTypeConstruct.name;
						if (_v18 === 'Posix') {
							return true;
						} else {
							return false;
						}
					case 'List':
						return A2(
							$elm$core$List$all,
							function (argument) {
								return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsComparable, declarationTypes, argument);
							},
							variableReplacementTypeConstruct._arguments);
					default:
						var _v19 = A2(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeConstructFullyExpandIfAlias,
							{declarationTypes: declarationTypes, range: $stil4m$elm_syntax$Elm$Syntax$Range$empty},
							variableReplacementTypeConstruct);
						if (_v19.$ === 'Nothing') {
							return false;
						} else {
							var deAliasedTypeConstruct = _v19.a;
							return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsComparable, declarationTypes, deAliasedTypeConstruct);
						}
				}
			case 'TypeTuple':
				var typeTuple = typeNotVariable.a;
				return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsComparable, declarationTypes, typeTuple.part0) && A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsComparable, declarationTypes, typeTuple.part1);
			case 'TypeTriple':
				var typeTriple = typeNotVariable.a;
				return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsComparable, declarationTypes, typeTriple.part0) && (A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsComparable, declarationTypes, typeTriple.part1) && A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsComparable, declarationTypes, typeTriple.part2));
			case 'TypeUnit':
				return false;
			case 'TypeRecord':
				return false;
			case 'TypeRecordExtension':
				return false;
			default:
				return false;
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsNumber = F2(
	function (declarationTypes, type_) {
		switch (type_.$) {
			case 'TypeConstruct':
				var typeConstruct = type_.a;
				var _v12 = typeConstruct.moduleOrigin;
				if (_v12 === 'Basics') {
					var _v13 = typeConstruct.name;
					switch (_v13) {
						case 'Int':
							return true;
						case 'Float':
							return true;
						default:
							return false;
					}
				} else {
					var _v14 = A2(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeConstructFullyExpandIfAlias,
						{declarationTypes: declarationTypes, range: $stil4m$elm_syntax$Elm$Syntax$Range$empty},
						typeConstruct);
					if (_v14.$ === 'Nothing') {
						return false;
					} else {
						var deAliasedTypeConstruct = _v14.a;
						return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsNumber, declarationTypes, deAliasedTypeConstruct);
					}
				}
			case 'TypeUnit':
				return false;
			case 'TypeTuple':
				return false;
			case 'TypeTriple':
				return false;
			case 'TypeRecord':
				return false;
			case 'TypeRecordExtension':
				return false;
			default:
				return false;
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableSubstituteVariableByType = F3(
	function (context, replacement, typeNotVariable) {
		switch (typeNotVariable.$) {
			case 'TypeUnit':
				return $elm$core$Result$Ok(
					{type_: typeNotVariable, unchanged: true});
			case 'TypeConstruct':
				var typeChoiceConstruct = typeNotVariable.a;
				var _v7 = typeChoiceConstruct._arguments;
				if (!_v7.b) {
					return $elm$core$Result$Ok(
						{type_: typeNotVariable, unchanged: true});
				} else {
					var argument0 = _v7.a;
					var argument1Up = _v7.b;
					return A2(
						$elm$core$Result$map,
						function (argumentsSubstituted) {
							return {
								type_: argumentsSubstituted.allUnchanged ? typeNotVariable : $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
									{_arguments: argumentsSubstituted._arguments, moduleOrigin: typeChoiceConstruct.moduleOrigin, name: typeChoiceConstruct.name}),
								unchanged: argumentsSubstituted.allUnchanged
							};
						},
						A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$allUnchangedTrueArgumentsListEmpty,
							F2(
								function (argument, soFar) {
									return A2(
										$elm$core$Result$map,
										function (argumentSubstituted) {
											return {
												allUnchanged: soFar.allUnchanged && argumentSubstituted.unchanged,
												_arguments: A2($elm$core$List$cons, argumentSubstituted.type_, soFar._arguments)
											};
										},
										A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType, context, replacement, argument));
								}),
							A2($elm$core$List$cons, argument0, argument1Up)));
				}
			case 'TypeTuple':
				var typeTuple = typeNotVariable.a;
				return A3(
					$elm$core$Result$map2,
					F2(
						function (part0Substituted, part1Substituted) {
							return (part0Substituted.unchanged && part1Substituted.unchanged) ? {type_: typeNotVariable, unchanged: true} : {
								type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
									{part0: part0Substituted.type_, part1: part1Substituted.type_}),
								unchanged: false
							};
						}),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType, context, replacement, typeTuple.part0),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType, context, replacement, typeTuple.part1));
			case 'TypeTriple':
				var typeTriple = typeNotVariable.a;
				return A4(
					$elm$core$Result$map3,
					F3(
						function (part0Substituted, part1Substituted, part2Substituted) {
							return (part0Substituted.unchanged && (part1Substituted.unchanged && part2Substituted.unchanged)) ? {type_: typeNotVariable, unchanged: true} : {
								type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple(
									{part0: part0Substituted.type_, part1: part1Substituted.type_, part2: part2Substituted.type_}),
								unchanged: false
							};
						}),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType, context, replacement, typeTriple.part0),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType, context, replacement, typeTriple.part1),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType, context, replacement, typeTriple.part2));
			case 'TypeRecord':
				var typeRecordFields = typeNotVariable.a;
				return A2(
					$elm$core$Result$map,
					function (fieldsSubstituted) {
						return fieldsSubstituted.allUnchanged ? {type_: typeNotVariable, unchanged: true} : {
							type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(fieldsSubstituted.types),
							unchanged: false
						};
					},
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictFoldlWhileOkFrom,
						{allUnchanged: true, types: typeRecordFields},
						F3(
							function (fieldName, fieldValue, soFar) {
								return A2(
									$elm$core$Result$map,
									function (valueSubstituted) {
										return valueSubstituted.unchanged ? {allUnchanged: soFar.allUnchanged, types: soFar.types} : {
											allUnchanged: false,
											types: A3($miniBill$elm_fast_dict$FastDict$insert, fieldName, valueSubstituted.type_, soFar.types)
										};
									},
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType, context, replacement, fieldValue));
							}),
						typeRecordFields));
			case 'TypeRecordExtension':
				var typeRecordExtension = typeNotVariable.a;
				return A2(
					$elm$core$Result$andThen,
					function (fieldsSubstituted) {
						var _v8 = replacement(typeRecordExtension.recordVariable);
						if (_v8.$ === 'Nothing') {
							return fieldsSubstituted.allUnchanged ? $elm$core$Result$Ok(
								{type_: typeNotVariable, unchanged: true}) : $elm$core$Result$Ok(
								{
									type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(
										{fields: fieldsSubstituted.types, recordVariable: typeRecordExtension.recordVariable}),
									unchanged: false
								});
						} else {
							var recordVariableReplacement = _v8.a;
							if (recordVariableReplacement.$ === 'TypeVariable') {
								var recordVariableReplacementVariable = recordVariableReplacement.a;
								return $elm$core$Result$Ok(
									{
										type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(
											{fields: fieldsSubstituted.types, recordVariable: recordVariableReplacementVariable}),
										unchanged: false
									});
							} else {
								var recordVariableReplacementTypeNotVariable = recordVariableReplacement.a;
								switch (recordVariableReplacementTypeNotVariable.$) {
									case 'TypeRecord':
										var replacementRecordFields = recordVariableReplacementTypeNotVariable.a;
										return $elm$core$Result$Ok(
											{
												type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(
													A2($miniBill$elm_fast_dict$FastDict$union, replacementRecordFields, fieldsSubstituted.types)),
												unchanged: false
											});
									case 'TypeRecordExtension':
										var replacementRecordExtension = recordVariableReplacementTypeNotVariable.a;
										return $elm$core$Result$Ok(
											{
												type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(
													{
														fields: A2($miniBill$elm_fast_dict$FastDict$union, replacementRecordExtension.fields, fieldsSubstituted.types),
														recordVariable: replacementRecordExtension.recordVariable
													}),
												unchanged: false
											});
									case 'TypeUnit':
										return $elm$core$Result$Err(
											'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'cannot unify record extension type variable with types other than record/record extension')));
									case 'TypeConstruct':
										return $elm$core$Result$Err(
											'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'cannot unify record extension type variable with types other than record/record extension')));
									case 'TypeTuple':
										return $elm$core$Result$Err(
											'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'cannot unify record extension type variable with types other than record/record extension')));
									case 'TypeTriple':
										return $elm$core$Result$Err(
											'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'cannot unify record extension type variable with types other than record/record extension')));
									default:
										return $elm$core$Result$Err(
											'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'cannot unify record extension type variable with types other than record/record extension')));
								}
							}
						}
					},
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictFoldlWhileOkFrom,
						{allUnchanged: true, types: typeRecordExtension.fields},
						F3(
							function (fieldName, fieldValue, soFar) {
								return A2(
									$elm$core$Result$map,
									function (valueSubstituted) {
										return valueSubstituted.unchanged ? {allUnchanged: soFar.allUnchanged, types: soFar.types} : {
											allUnchanged: false,
											types: A3($miniBill$elm_fast_dict$FastDict$insert, fieldName, valueSubstituted.type_, soFar.types)
										};
									},
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType, context, replacement, fieldValue));
							}),
						typeRecordExtension.fields));
			default:
				var typeFunction = typeNotVariable.a;
				return A3(
					$elm$core$Result$map2,
					F2(
						function (inputSubstituted, outputSubstituted) {
							return (inputSubstituted.unchanged && outputSubstituted.unchanged) ? {type_: typeNotVariable, unchanged: true} : {
								type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{input: inputSubstituted.type_, output: outputSubstituted.type_}),
								unchanged: false
							};
						}),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType, context, replacement, typeFunction.input),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType, context, replacement, typeFunction.output));
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType = F3(
	function (context, replacement, type_) {
		if (type_.$ === 'TypeVariable') {
			var typeVariable = type_.a;
			var _v1 = replacement(typeVariable);
			if (_v1.$ === 'Nothing') {
				return $elm$core$Result$Ok(
					{type_: type_, unchanged: true});
			} else {
				var replacementType = _v1.a;
				if (replacementType.$ === 'TypeVariable') {
					var replacementTypeVariable = replacementType.a;
					return $elm$core$Result$Ok(
						{
							type_: replacementType,
							unchanged: A2($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$equals, typeVariable, replacementTypeVariable)
						});
				} else {
					var replacementTypeNotVariable = replacementType.a;
					var _v3 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(typeVariable.name);
					if (_v3.$ === 'Nothing') {
						return $elm$core$Result$Ok(
							{type_: replacementType, unchanged: false});
					} else {
						var constraint = _v3.a;
						switch (constraint.$) {
							case 'TypeVariableConstraintNumber':
								return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsNumber, context.declarationTypes, replacementTypeNotVariable) ? $elm$core$Result$Ok(
									{type_: replacementType, unchanged: false}) : $elm$core$Result$Err(
									'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('cannot unify number type variable with types other than Int/Float, found: ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeToInfoString(replacementType)))));
							case 'TypeVariableConstraintAppendable':
								return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsAppendable, context.declarationTypes, replacementTypeNotVariable) ? $elm$core$Result$Ok(
									{type_: replacementType, unchanged: false}) : $elm$core$Result$Err(
									'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'cannot unify appendable type variable with types other than String/List _')));
							case 'TypeVariableConstraintComparable':
								return $elm$core$Result$Ok(
									{type_: replacementType, unchanged: false});
							default:
								return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsCompappend, context.declarationTypes, replacementTypeNotVariable) ? $elm$core$Result$Ok(
									{type_: replacementType, unchanged: false}) : $elm$core$Result$Err(
									'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'cannot unify compappend type variable with types other than String/List of comparable')));
						}
					}
				}
			}
		} else {
			var typeNotVariable = type_.a;
			var _v5 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableSubstituteVariableByType, context, replacement, typeNotVariable);
			if (_v5.$ === 'Err') {
				var error = _v5.a;
				return $elm$core$Result$Err(error);
			} else {
				var typeNotVariableSubstituted = _v5.a;
				return $elm$core$Result$Ok(
					{
						type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(typeNotVariableSubstituted.type_),
						unchanged: typeNotVariableSubstituted.unchanged
					});
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableFullyApplyVariableToTypeSubstitutions = F3(
	function (context, substitutionsToApply, typeNotVariable) {
		typeNotVariableFullyApplyVariableToTypeSubstitutions:
		while (true) {
			var _v0 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableSubstituteVariableByType, context, substitutionsToApply, typeNotVariable);
			if (_v0.$ === 'Err') {
				var error = _v0.a;
				return $elm$core$Result$Err(error);
			} else {
				var typeNotVariableSubstituted = _v0.a;
				if (typeNotVariableSubstituted.unchanged) {
					return $elm$core$Result$Ok(typeNotVariable);
				} else {
					var $temp$context = context,
						$temp$substitutionsToApply = substitutionsToApply,
						$temp$typeNotVariable = typeNotVariableSubstituted.type_;
					context = $temp$context;
					substitutionsToApply = $temp$substitutionsToApply;
					typeNotVariable = $temp$typeNotVariable;
					continue typeNotVariableFullyApplyVariableToTypeSubstitutions;
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsVariableToTypeApplyOverItself = F2(
	function (context, variableToTypeInitial) {
		return ($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$size(variableToTypeInitial) <= 1) ? $elm$core$Result$Ok(variableToTypeInitial) : A3(
			$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlWhileOkFrom,
			$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty,
			F3(
				function (variable, replacementTypeNotVariable, soFar) {
					return A2(
						$elm$core$Result$map,
						function (replacementTypeSubstituted) {
							return A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace, variable, replacementTypeSubstituted, soFar);
						},
						A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableFullyApplyVariableToTypeSubstitutions,
							context,
							function (replacementTypeVariable) {
								return A2(
									$elm$core$Maybe$map,
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable,
									A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get, replacementTypeVariable, variableToTypeInitial));
							},
							replacementTypeNotVariable));
				}),
			variableToTypeInitial);
	});
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$memberInner = F2(
	function (targetKey, dict) {
		memberInner:
		while (true) {
			if (dict.$ === 'Leaf') {
				return false;
			} else {
				var key = dict.b;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$compare, targetKey, key);
				switch (_v1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue memberInner;
					case 'EQ':
						return true;
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue memberInner;
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$member = F2(
	function (targetKey, _v0) {
		var dict = _v0.b;
		return A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$memberInner, targetKey, dict);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeIncludesRange = F2(
	function (toCheckForInclusion, baseRange) {
		return (((baseRange.start.row - toCheckForInclusion.start.row) < 0) || ((!(baseRange.start.row - toCheckForInclusion.start.row)) && ((baseRange.start.column - toCheckForInclusion.start.column) <= 0))) && (((baseRange.end.row - toCheckForInclusion.end.row) > 0) || ((!(baseRange.end.row - toCheckForInclusion.end.row)) && ((baseRange.end.column - toCheckForInclusion.end.column) >= 0)));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentTypeVariableFromContextSetContains = F2(
	function (variableToCheckInclusionFor, equivalentTypeVariableFromContextSet) {
		return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeIncludesRange, variableToCheckInclusionFor.useRange, equivalentTypeVariableFromContextSet.overarchingUseRange) && A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$member, variableToCheckInclusionFor, equivalentTypeVariableFromContextSet.variables);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintAppendable = $elm$core$Result$Ok($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariableConstraintAppendable);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintCompappend = $elm$core$Result$Ok($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariableConstraintCompappend);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintComparable = $elm$core$Result$Ok($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariableConstraintComparable);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintNumber = $elm$core$Result$Ok($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariableConstraintNumber);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraintMerge = F2(
	function (a, b) {
		switch (a.$) {
			case 'TypeVariableConstraintNumber':
				switch (b.$) {
					case 'TypeVariableConstraintNumber':
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintNumber;
					case 'TypeVariableConstraintAppendable':
						return $elm$core$Result$Err('number and appendable variables cannot be unified');
					case 'TypeVariableConstraintComparable':
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintNumber;
					default:
						return $elm$core$Result$Err('number and compappend variables cannot be unified');
				}
			case 'TypeVariableConstraintAppendable':
				switch (b.$) {
					case 'TypeVariableConstraintNumber':
						return $elm$core$Result$Err('number and appendable variables cannot be unified');
					case 'TypeVariableConstraintAppendable':
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintAppendable;
					case 'TypeVariableConstraintComparable':
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintCompappend;
					default:
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintCompappend;
				}
			case 'TypeVariableConstraintComparable':
				switch (b.$) {
					case 'TypeVariableConstraintNumber':
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintNumber;
					case 'TypeVariableConstraintAppendable':
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintCompappend;
					case 'TypeVariableConstraintComparable':
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintComparable;
					default:
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintCompappend;
				}
			default:
				switch (b.$) {
					case 'TypeVariableConstraintNumber':
						return $elm$core$Result$Err('number and compappend variables cannot be unified');
					case 'TypeVariableConstraintAppendable':
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintCompappend;
					case 'TypeVariableConstraintComparable':
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintCompappend;
					default:
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintCompappend;
				}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$maybeTypeVariableConstraintMerge = F2(
	function (a, b) {
		if (a.$ === 'Nothing') {
			return $elm$core$Result$Ok(b);
		} else {
			var aConstraint = a.a;
			if (b.$ === 'Nothing') {
				return $elm$core$Result$Ok(
					$elm$core$Maybe$Just(aConstraint));
			} else {
				var bConstraint = b.a;
				return A2(
					$elm$core$Result$map,
					$elm$core$Maybe$Just,
					A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraintMerge, aConstraint, bConstraint));
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationMax = F2(
	function (aLocation, bLocation) {
		return ((aLocation.row - bLocation.row) > 0) ? aLocation : (((bLocation.row - aLocation.row) > 0) ? bLocation : (((aLocation.column - bLocation.column) > 0) ? aLocation : bLocation));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationMin = F2(
	function (aLocation, bLocation) {
		return ((aLocation.row - bLocation.row) < 0) ? aLocation : (((bLocation.row - aLocation.row) < 0) ? bLocation : (((aLocation.column - bLocation.column) < 0) ? aLocation : bLocation));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeOverarching = F2(
	function (a, b) {
		return {
			end: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationMax, a.end, b.end),
			start: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationMin, a.start, b.start)
		};
	});
var $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$locationLessThen = F2(
	function (a, b) {
		return ((a.row - b.row) < 0) || ((!(a.row - b.row)) && ((a.column - b.column) < 0));
	});
var $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$lessThan = F2(
	function (a, b) {
		return ((a.useRange.start.row - b.useRange.start.row) < 0) || (((a.useRange.start.row - b.useRange.start.row) > 0) ? false : (((a.useRange.start.column - b.useRange.start.column) < 0) || (((a.useRange.start.column - b.useRange.start.column) > 0) ? false : (A2($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$locationEquals, a.useRange.end, b.useRange.end) ? (_Utils_cmp(a.name, b.name) < 0) : A2($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$locationLessThen, a.useRange.end, b.useRange.end)))));
	});
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$twoDistinct = F4(
	function (aKey, aValue, bKey, bValue) {
		return A2(
			$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$DictByTypeVariableFromContext,
			2,
			A2($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$lessThan, aKey, bKey) ? A5(
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode,
				false,
				bKey,
				bValue,
				A5($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode, true, aKey, aValue, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$Leaf, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$Leaf),
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$Leaf) : A5(
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode,
				false,
				aKey,
				aValue,
				A5($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode, true, bKey, bValue, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$Leaf, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$Leaf),
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$Leaf));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariablesMergeWithSetOf2Into = F4(
	function (soFar, aEquivalentVariable, bEquivalentVariable, equivalentVariables) {
		equivalentVariablesMergeWithSetOf2Into:
		while (true) {
			if (!equivalentVariables.b) {
				return A2(
					$elm$core$Result$map,
					function (abConstraint) {
						return A2(
							$elm$core$List$cons,
							{
								constraint: abConstraint,
								overarchingUseRange: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeOverarching, aEquivalentVariable.useRange, bEquivalentVariable.useRange),
								variables: A4($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$twoDistinct, aEquivalentVariable, _Utils_Tuple0, bEquivalentVariable, _Utils_Tuple0)
							},
							soFar);
					},
					A2(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$maybeTypeVariableConstraintMerge,
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(aEquivalentVariable.name),
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(bEquivalentVariable.name)));
			} else {
				var equivalentVariablesSet0 = equivalentVariables.a;
				var equivalentVariablesSet1Up = equivalentVariables.b;
				if (A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentTypeVariableFromContextSetContains, aEquivalentVariable, equivalentVariablesSet0)) {
					return A2(
						$elm$core$Result$map,
						function (unifiedConstraint) {
							return A2(
								$elm$core$List$cons,
								{
									constraint: unifiedConstraint,
									overarchingUseRange: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeOverarching, equivalentVariablesSet0.overarchingUseRange, bEquivalentVariable.useRange),
									variables: A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace, bEquivalentVariable, _Utils_Tuple0, equivalentVariablesSet0.variables)
								},
								A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listAppendFastButInReverseOrder, soFar, equivalentVariablesSet1Up));
						},
						A2(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$maybeTypeVariableConstraintMerge,
							equivalentVariablesSet0.constraint,
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(bEquivalentVariable.name)));
				} else {
					if (A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentTypeVariableFromContextSetContains, bEquivalentVariable, equivalentVariablesSet0)) {
						return A2(
							$elm$core$Result$map,
							function (unifiedConstraint) {
								return A2(
									$elm$core$List$cons,
									{
										constraint: unifiedConstraint,
										overarchingUseRange: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeOverarching, equivalentVariablesSet0.overarchingUseRange, aEquivalentVariable.useRange),
										variables: A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace, aEquivalentVariable, _Utils_Tuple0, equivalentVariablesSet0.variables)
									},
									A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listAppendFastButInReverseOrder, soFar, equivalentVariablesSet1Up));
							},
							A2(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$maybeTypeVariableConstraintMerge,
								equivalentVariablesSet0.constraint,
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(aEquivalentVariable.name)));
					} else {
						var $temp$soFar = A2($elm$core$List$cons, equivalentVariablesSet0, soFar),
							$temp$aEquivalentVariable = aEquivalentVariable,
							$temp$bEquivalentVariable = bEquivalentVariable,
							$temp$equivalentVariables = equivalentVariablesSet1Up;
						soFar = $temp$soFar;
						aEquivalentVariable = $temp$aEquivalentVariable;
						bEquivalentVariable = $temp$bEquivalentVariable;
						equivalentVariables = $temp$equivalentVariables;
						continue equivalentVariablesMergeWithSetOf2Into;
					}
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariablesMergeWithSetOf2 = F3(
	function (aEquivalentVariable, bEquivalentVariable, equivalentVariables) {
		return A2($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$equals, aEquivalentVariable, bEquivalentVariable) ? $elm$core$Result$Ok(equivalentVariables) : A4($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariablesMergeWithSetOf2Into, _List_Nil, aEquivalentVariable, bEquivalentVariable, equivalentVariables);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone = {equivalentVariables: _List_Nil, variableToType: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$argumentsReverseListEmptySubstitutionsNone = {argumentsReverse: _List_Nil, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationGreaterOrEqualThan = F2(
	function (a, b) {
		return ((a.row - b.row) > 0) || ((!(a.row - b.row)) && ((a.column - b.column) >= 0));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeAreOverlapping = F2(
	function (a, b) {
		return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationGreaterOrEqualThan, a.end, b.start) && A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationGreaterOrEqualThan, b.end, a.start);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentTypeVariableSetShareElements = F2(
	function (a, b) {
		return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeAreOverlapping, a.overarchingUseRange, b.overarchingUseRange) && A2(
			$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$any,
			F2(
				function (aKey, _v0) {
					return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentTypeVariableFromContextSetContains, aKey, b);
				}),
			a.variables);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndFirstJustAndRemainingAndOrderWithBefore = F3(
	function (elementsBeforeReverse, elementToMaybe, list) {
		listMapAndFirstJustAndRemainingAndOrderWithBefore:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var head = list.a;
				var tail = list.b;
				var _v1 = elementToMaybe(head);
				if (_v1.$ === 'Just') {
					var headValue = _v1.a;
					return $elm$core$Maybe$Just(
						{
							remaining: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listAppendFastButInReverseOrder, elementsBeforeReverse, tail),
							value: headValue
						});
				} else {
					var $temp$elementsBeforeReverse = A2($elm$core$List$cons, head, elementsBeforeReverse),
						$temp$elementToMaybe = elementToMaybe,
						$temp$list = tail;
					elementsBeforeReverse = $temp$elementsBeforeReverse;
					elementToMaybe = $temp$elementToMaybe;
					list = $temp$list;
					continue listMapAndFirstJustAndRemainingAndOrderWithBefore;
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndFirstJustAndRemainingAnyOrder = F2(
	function (elementToMaybe, list) {
		return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndFirstJustAndRemainingAndOrderWithBefore, _List_Nil, elementToMaybe, list);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariableSetMergeIntoVariableSubstitutionsWithVariableToType = F3(
	function (variableToType, a, b) {
		if (!a.b) {
			return $elm$core$Result$Ok(
				{equivalentVariables: b, variableToType: variableToType});
		} else {
			if (!b.b) {
				return $elm$core$Result$Ok(
					{equivalentVariables: a, variableToType: variableToType});
			} else {
				return A2(
					$elm$core$Result$map,
					function (mergedIntoA) {
						return {
							equivalentVariables: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listAppendFastButInReverseOrder, mergedIntoA.sets, mergedIntoA.bRemaining),
							variableToType: variableToType
						};
					},
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom,
						{bRemaining: b, sets: _List_Nil},
						F2(
							function (aEquivalentVariableSet, soFar) {
								var _v2 = A2(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndFirstJustAndRemainingAnyOrder,
									function (bEquivalentVariableSet) {
										return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentTypeVariableSetShareElements, aEquivalentVariableSet, bEquivalentVariableSet) ? $elm$core$Maybe$Just(bEquivalentVariableSet) : $elm$core$Maybe$Nothing;
									},
									soFar.bRemaining);
								if (_v2.$ === 'Nothing') {
									return $elm$core$Result$Ok(
										{
											bRemaining: soFar.bRemaining,
											sets: A2($elm$core$List$cons, aEquivalentVariableSet, soFar.sets)
										});
								} else {
									var bEquivalentVariableSetAndRemaining = _v2.a;
									return A2(
										$elm$core$Result$map,
										function (unifiedConstraint) {
											return {
												bRemaining: bEquivalentVariableSetAndRemaining.remaining,
												sets: A2(
													$elm$core$List$cons,
													{
														constraint: unifiedConstraint,
														overarchingUseRange: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeOverarching, aEquivalentVariableSet.overarchingUseRange, bEquivalentVariableSetAndRemaining.value.overarchingUseRange),
														variables: A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion, aEquivalentVariableSet.variables, bEquivalentVariableSetAndRemaining.value.variables)
													},
													soFar.sets)
											};
										},
										A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$maybeTypeVariableConstraintMerge, aEquivalentVariableSet.constraint, bEquivalentVariableSetAndRemaining.value.constraint));
								}
							}),
						a));
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldl2WhileOkFrom = F4(
	function (initialState, aList, bList, reduce) {
		listFoldl2WhileOkFrom:
		while (true) {
			if (!aList.b) {
				return $elm$core$Result$Ok(initialState);
			} else {
				var aHead = aList.a;
				var aTail = aList.b;
				if (!bList.b) {
					return $elm$core$Result$Ok(initialState);
				} else {
					var bHead = bList.a;
					var bTail = bList.b;
					var _v2 = A3(reduce, aHead, bHead, initialState);
					if (_v2.$ === 'Err') {
						var error = _v2.a;
						return $elm$core$Result$Err(error);
					} else {
						var stateAfterReducingHeads = _v2.a;
						var $temp$initialState = stateAfterReducingHeads,
							$temp$aList = aTail,
							$temp$bList = bTail,
							$temp$reduce = reduce;
						initialState = $temp$initialState;
						aList = $temp$aList;
						bList = $temp$bList;
						reduce = $temp$reduce;
						continue listFoldl2WhileOkFrom;
					}
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$mergeStep = F6(
	function (leftStep, bothStep, rightStep, rKey, rValue, _v0) {
		mergeStep:
		while (true) {
			var list = _v0.a;
			var result = _v0.b;
			if (!list.b) {
				return _Utils_Tuple2(
					list,
					A3(rightStep, rKey, rValue, result));
			} else {
				var _v2 = list.a;
				var lKey = _v2.a;
				var lValue = _v2.b;
				var rest = list.b;
				var _v3 = A2($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$compare, lKey, rKey);
				switch (_v3.$) {
					case 'LT':
						var $temp$leftStep = leftStep,
							$temp$bothStep = bothStep,
							$temp$rightStep = rightStep,
							$temp$rKey = rKey,
							$temp$rValue = rValue,
							$temp$_v0 = _Utils_Tuple2(
							rest,
							A3(leftStep, lKey, lValue, result));
						leftStep = $temp$leftStep;
						bothStep = $temp$bothStep;
						rightStep = $temp$rightStep;
						rKey = $temp$rKey;
						rValue = $temp$rValue;
						_v0 = $temp$_v0;
						continue mergeStep;
					case 'GT':
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					default:
						return _Utils_Tuple2(
							rest,
							A4(bothStep, lKey, lValue, rValue, result));
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldrInner = F3(
	function (func, acc, t) {
		foldrInner:
		while (true) {
			if (t.$ === 'Leaf') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldrInner, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldrInner;
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldr = F3(
	function (func, acc, _v0) {
		var dict = _v0.b;
		return A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldrInner, func, acc, dict);
	});
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$toList = function (dict) {
	return A3(
		$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var _v0 = A3(
			$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldl,
			F3(
				function (rKey, rValue, soFar) {
					return A6($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$mergeStep, leftStep, bothStep, rightStep, rKey, rValue, soFar);
				}),
			_Utils_Tuple2(
				$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v0.a;
		var intermediateResult = _v0.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v1, result) {
					var k = _v1.a;
					var v = _v1.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okFieldsUnifiedEmptySubstitutionsNone = $elm$core$Result$Ok(
	{fieldsUnified: $miniBill$elm_fast_dict$FastDict$empty, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okFieldsUnifiedEmptySubstitutionsNoneAOnlyDictEmptyBOnlyDictEmpty = $elm$core$Result$Ok(
	{aOnly: $miniBill$elm_fast_dict$FastDict$empty, bOnly: $miniBill$elm_fast_dict$FastDict$empty, fieldsUnified: $miniBill$elm_fast_dict$FastDict$empty, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnit = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeUnitSubstitutionsNone = $elm$core$Result$Ok(
	{substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnit});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2 = F3(
	function (abToResult, aResult, bResult) {
		if (aResult.$ === 'Err') {
			var error = aResult.a;
			return $elm$core$Result$Err(error);
		} else {
			var a = aResult.a;
			if (bResult.$ === 'Err') {
				var error = bResult.a;
				return $elm$core$Result$Err(error);
			} else {
				var b = bResult.a;
				return A2(abToResult, a, b);
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3 = F4(
	function (abToResult, aResult, bResult, cResult) {
		if (aResult.$ === 'Err') {
			var error = aResult.a;
			return $elm$core$Result$Err(error);
		} else {
			var a = aResult.a;
			if (bResult.$ === 'Err') {
				var error = bResult.a;
				return $elm$core$Result$Err(error);
			} else {
				var b = bResult.a;
				if (cResult.$ === 'Err') {
					var error = cResult.a;
					return $elm$core$Result$Err(error);
				} else {
					var c = cResult.a;
					return A3(abToResult, a, b, c);
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$stringFirstCharToUpper = function (string) {
	var _v0 = $elm$core$String$uncons(string);
	if (_v0.$ === 'Nothing') {
		return '';
	} else {
		var _v1 = _v0.a;
		var headChar = _v1.a;
		var tailString = _v1.b;
		return A2(
			$elm$core$String$cons,
			$elm$core$Char$toUpper(headChar),
			tailString);
	}
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariable = F3(
	function (context, replacement, type_) {
		var _v0 = replacement.type_;
		if (_v0.$ === 'TypeVariable') {
			var argumentVariable = _v0.a;
			return $elm$core$Result$Ok(
				A2(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables,
					function (variable) {
						return A2($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$equals, variable, replacement.variable) ? argumentVariable : variable;
					},
					type_));
		} else {
			var argumentNotVariable = _v0.a;
			return A2(
				$elm$core$Result$map,
				function ($) {
					return $.type_;
				},
				A3(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType,
					context,
					function (variable) {
						return A2($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$equals, variable, replacement.variable) ? $elm$core$Maybe$Just(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(argumentNotVariable)) : $elm$core$Maybe$Nothing;
					},
					type_));
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone = $elm$core$Result$Ok($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFrom2EquivalentVariables = F2(
	function (aVariable, bVariable) {
		return A2($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$equals, aVariable, bVariable) ? $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone : A2(
			$elm$core$Result$map,
			function (abConstraint) {
				return {
					equivalentVariables: _List_fromArray(
						[
							{
							constraint: abConstraint,
							overarchingUseRange: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeOverarching, aVariable.useRange, bVariable.useRange),
							variables: A4($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$twoDistinct, aVariable, _Utils_Tuple0, bVariable, _Utils_Tuple0)
						}
						]),
					variableToType: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty
				};
			},
			A2(
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$maybeTypeVariableConstraintMerge,
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(aVariable.name),
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(bVariable.name)));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFrom2EquivalentVariablesWithType = F3(
	function (type_, aVariable, bVariable) {
		return A2($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$equals, aVariable, bVariable) ? $elm$core$Result$Ok(
			{substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, type_: type_}) : A2(
			$elm$core$Result$map,
			function (abConstraint) {
				return {
					substitutions: {
						equivalentVariables: _List_fromArray(
							[
								{
								constraint: abConstraint,
								overarchingUseRange: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeOverarching, aVariable.useRange, bVariable.useRange),
								variables: A4($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$twoDistinct, aVariable, _Utils_Tuple0, bVariable, _Utils_Tuple0)
							}
							]),
						variableToType: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty
					},
					type_: type_
				};
			},
			A2(
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$maybeTypeVariableConstraintMerge,
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(aVariable.name),
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(bVariable.name)));
	});
var $miniBill$elm_fast_dict$FastDict$restructureInner = F3(
	function (leafFunc, nodeFunc, dict) {
		if (dict.$ === 'Leaf') {
			return leafFunc;
		} else {
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			return nodeFunc(
				{
					key: key,
					left: function (_v1) {
						return A3($miniBill$elm_fast_dict$FastDict$restructureInner, leafFunc, nodeFunc, left);
					},
					right: function (_v2) {
						return A3($miniBill$elm_fast_dict$FastDict$restructureInner, leafFunc, nodeFunc, right);
					},
					value: value
				});
		}
	});
var $miniBill$elm_fast_dict$FastDict$restructure = F3(
	function (leafFunc, nodeFunc, _v0) {
		var dict = _v0.b;
		return A3($miniBill$elm_fast_dict$FastDict$restructureInner, leafFunc, nodeFunc, dict);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictAny = F2(
	function (valueIsFound, dict) {
		return A3(
			$miniBill$elm_fast_dict$FastDict$restructure,
			false,
			function (state) {
				return valueIsFound(state.value) || (state.left(_Utils_Tuple0) || state.right(_Utils_Tuple0));
			},
			dict);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainsVariable = F2(
	function (variableToCheckFor, type_) {
		if (type_.$ === 'TypeVariable') {
			var variable = type_.a;
			return A2($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$equals, variableToCheckFor, variable);
		} else {
			var typeNotVariable = type_.a;
			return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableContainsVariable, variableToCheckFor, typeNotVariable);
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableContainsVariable = F2(
	function (variableToCheckFor, typeNotVariable) {
		switch (typeNotVariable.$) {
			case 'TypeUnit':
				return false;
			case 'TypeFunction':
				var typeFunction = typeNotVariable.a;
				return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainsVariable, variableToCheckFor, typeFunction.input) || A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainsVariable, variableToCheckFor, typeFunction.output);
			case 'TypeTuple':
				var typeTuple = typeNotVariable.a;
				return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainsVariable, variableToCheckFor, typeTuple.part0) || A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainsVariable, variableToCheckFor, typeTuple.part1);
			case 'TypeTriple':
				var typeTriple = typeNotVariable.a;
				return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainsVariable, variableToCheckFor, typeTriple.part0) || (A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainsVariable, variableToCheckFor, typeTriple.part1) || A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainsVariable, variableToCheckFor, typeTriple.part2));
			case 'TypeConstruct':
				var typeConstruct = typeNotVariable.a;
				return A2(
					$elm$core$List$any,
					function (argument) {
						return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainsVariable, variableToCheckFor, argument);
					},
					typeConstruct._arguments);
			case 'TypeRecord':
				var typeRecordFields = typeNotVariable.a;
				return A2(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictAny,
					function (value) {
						return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainsVariable, variableToCheckFor, value);
					},
					typeRecordFields);
			default:
				var typeRecordExtension = typeNotVariable.a;
				return A2($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$equals, typeRecordExtension.recordVariable, variableToCheckFor) || A2(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictAny,
					function (value) {
						return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainsVariable, variableToCheckFor, value);
					},
					typeRecordExtension.fields);
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsEquivalentToTypeVariable = F2(
	function (declarationTypes, type_) {
		if (type_.$ === 'TypeVariable') {
			return true;
		} else {
			var typeNotVariable = type_.a;
			return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsEquivalentToTypeVariable, declarationTypes, typeNotVariable);
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsEquivalentToTypeVariable = F2(
	function (declarationTypes, typeNotVariable) {
		switch (typeNotVariable.$) {
			case 'TypeConstruct':
				var typeConstruct = typeNotVariable.a;
				var _v1 = A2($miniBill$elm_fast_dict$FastDict$get, typeConstruct.moduleOrigin, declarationTypes);
				if (_v1.$ === 'Nothing') {
					return false;
				} else {
					var originModule = _v1.a;
					var _v2 = A2($miniBill$elm_fast_dict$FastDict$get, typeConstruct.name, originModule.typeAliases);
					if (_v2.$ === 'Nothing') {
						return false;
					} else {
						var typeAlias = _v2.a;
						return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsEquivalentToTypeVariable, declarationTypes, typeAlias.type_);
					}
				}
			case 'TypeUnit':
				return false;
			case 'TypeTuple':
				return false;
			case 'TypeTriple':
				return false;
			case 'TypeRecord':
				return false;
			case 'TypeRecordExtension':
				return false;
			default:
				return false;
		}
	});
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okListEmpty = $elm$core$Result$Ok(_List_Nil);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMakeComparable = F2(
	function (declarationTypes, type_) {
		if (type_.$ === 'TypeVariable') {
			var typeVariable = type_.a;
			var _v7 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(typeVariable.name);
			if (_v7.$ === 'Nothing') {
				return $elm$core$Result$Ok(
					_List_fromArray(
						[
							{
							constraint: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$justTypeVariableConstraintComparable,
							overarchingUseRange: typeVariable.useRange,
							variables: A4(
								$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$twoDistinct,
								typeVariable,
								_Utils_Tuple0,
								{
									name: 'comparable' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$stringFirstCharToUpper(typeVariable.name),
									useRange: typeVariable.useRange
								},
								_Utils_Tuple0)
						}
						]));
			} else {
				var constraint = _v7.a;
				switch (constraint.$) {
					case 'TypeVariableConstraintAppendable':
						return $elm$core$Result$Ok(
							_List_fromArray(
								[
									{
									constraint: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$justTypeVariableConstraintCompappend,
									overarchingUseRange: typeVariable.useRange,
									variables: A4(
										$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$twoDistinct,
										typeVariable,
										_Utils_Tuple0,
										{
											name: 'compappend' + A2($elm$core$String$dropLeft, 10, typeVariable.name),
											useRange: typeVariable.useRange
										},
										_Utils_Tuple0)
								}
								]));
					case 'TypeVariableConstraintCompappend':
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okListEmpty;
					case 'TypeVariableConstraintComparable':
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okListEmpty;
					default:
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okListEmpty;
				}
			}
		} else {
			var typeNotVariable = type_.a;
			return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableMakeComparable, declarationTypes, typeNotVariable);
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableMakeComparable = F2(
	function (declarationTypes, typeNotVariable) {
		switch (typeNotVariable.$) {
			case 'TypeConstruct':
				var variableReplacementTypeConstruct = typeNotVariable.a;
				var _v1 = variableReplacementTypeConstruct.moduleOrigin;
				switch (_v1) {
					case 'String':
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okListEmpty;
					case 'Char':
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okListEmpty;
					case 'Basics':
						var _v2 = variableReplacementTypeConstruct.name;
						switch (_v2) {
							case 'Int':
								return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okListEmpty;
							case 'Float':
								return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okListEmpty;
							default:
								var variableReplacementTypeConstructNameNotIntOrFloat = _v2;
								return $elm$core$Result$Err('Basics.' + (variableReplacementTypeConstructNameNotIntOrFloat + ' is not comparable'));
						}
					case 'Time':
						var _v3 = variableReplacementTypeConstruct.name;
						if (_v3 === 'Posix') {
							return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okListEmpty;
						} else {
							var variableReplacementTypeConstructNameNotPosix = _v3;
							return $elm$core$Result$Err('Time.' + (variableReplacementTypeConstructNameNotPosix + ' is not comparable'));
						}
					case 'List':
						return A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom,
							_List_Nil,
							F2(
								function (argument, _v4) {
									return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMakeComparable, declarationTypes, argument);
								}),
							variableReplacementTypeConstruct._arguments);
					default:
						var moduleOriginNotBasicsStringCharTimeList = _v1;
						var _v5 = A2(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeConstructFullyExpandIfAlias,
							{declarationTypes: declarationTypes, range: $stil4m$elm_syntax$Elm$Syntax$Range$empty},
							variableReplacementTypeConstruct);
						if (_v5.$ === 'Nothing') {
							return $elm$core$Result$Err(moduleOriginNotBasicsStringCharTimeList + ('.' + (variableReplacementTypeConstruct.name + ' is not comparable')));
						} else {
							var deAliasedTypeConstruct = _v5.a;
							return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMakeComparable, declarationTypes, deAliasedTypeConstruct);
						}
				}
			case 'TypeTuple':
				var typeTuple = typeNotVariable.a;
				return A3(
					$elm$core$Result$map2,
					F2(
						function (fromPart0, fromPart1) {
							return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listAppendFastButInReverseOrder, fromPart1, fromPart0);
						}),
					A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMakeComparable, declarationTypes, typeTuple.part0),
					A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMakeComparable, declarationTypes, typeTuple.part1));
			case 'TypeTriple':
				var typeTriple = typeNotVariable.a;
				return A4(
					$elm$core$Result$map3,
					F3(
						function (fromPart0, fromPart1, fromPart2) {
							return A2(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listAppendFastButInReverseOrder,
								fromPart2,
								A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listAppendFastButInReverseOrder, fromPart1, fromPart0));
						}),
					A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMakeComparable, declarationTypes, typeTriple.part0),
					A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMakeComparable, declarationTypes, typeTriple.part1),
					A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMakeComparable, declarationTypes, typeTriple.part2));
			case 'TypeUnit':
				return $elm$core$Result$Err('unit (`()`) is not comparable');
			case 'TypeRecord':
				return $elm$core$Result$Err('record is not comparable');
			case 'TypeRecordExtension':
				return $elm$core$Result$Err('record extension is not comparable');
			default:
				return $elm$core$Result$Err('function is not comparable');
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableOrError = F3(
	function (declarationTypes, replacementVariable, replacementTypeNotVariable) {
		return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableContainsVariable, replacementVariable, replacementTypeNotVariable) ? (A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsEquivalentToTypeVariable, declarationTypes, replacementTypeNotVariable) ? $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone : $elm$core$Result$Err(
			'cannot unify the variable ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableFromContextToInfoString(replacementVariable) + (' with the type ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(replacementTypeNotVariable) + ' because that type contains the type variable itself.'))))) : (A2($elm$core$String$startsWith, 'comparable', replacementVariable.name) ? A2(
			$elm$core$Result$map,
			function (makeReplacementTypeNotVariableComparable) {
				return {
					equivalentVariables: makeReplacementTypeNotVariableComparable,
					variableToType: A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$singleton, replacementVariable, replacementTypeNotVariable)
				};
			},
			A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableMakeComparable, declarationTypes, replacementTypeNotVariable)) : $elm$core$Result$Ok(
			{
				equivalentVariables: _List_Nil,
				variableToType: A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$singleton, replacementVariable, replacementTypeNotVariable)
			}));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableWithType = F4(
	function (type_, declarationTypes, replacementVariable, replacementTypeNotVariable) {
		return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableContainsVariable, replacementVariable, replacementTypeNotVariable) ? (A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsEquivalentToTypeVariable, declarationTypes, replacementTypeNotVariable) ? $elm$core$Result$Ok(
			{substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, type_: type_}) : $elm$core$Result$Err(
			'cannot unify the variable ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableFromContextToInfoString(replacementVariable) + (' with the type ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(replacementTypeNotVariable) + ' because that type contains the type variable itself.'))))) : (A2($elm$core$String$startsWith, 'comparable', replacementVariable.name) ? A2(
			$elm$core$Result$map,
			function (makeReplacementTypeNotVariableComparable) {
				return {
					substitutions: {
						equivalentVariables: makeReplacementTypeNotVariableComparable,
						variableToType: A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$singleton, replacementVariable, replacementTypeNotVariable)
					},
					type_: type_
				};
			},
			A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableMakeComparable, declarationTypes, replacementTypeNotVariable)) : $elm$core$Result$Ok(
			{
				substitutions: {
					equivalentVariables: _List_Nil,
					variableToType: A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$singleton, replacementVariable, replacementTypeNotVariable)
				},
				type_: type_
			}));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnify = F3(
	function (context, a, bNotVariable) {
		switch (a.$) {
			case 'TypeUnit':
				switch (bNotVariable.$) {
					case 'TypeUnit':
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeUnitSubstitutionsNone;
					case 'TypeConstruct':
						var bTypeConstruct = bNotVariable.a;
						var _v30 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct, context, bTypeConstruct, a);
						if (_v30.$ === 'Just') {
							var result = _v30.a;
							return result;
						} else {
							return $elm$core$Result$Err(
								'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'unit (`()`) cannot be unified with types other than unit')));
						}
					case 'TypeTuple':
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'unit (`()`) cannot be unified with types other than unit')));
					case 'TypeTriple':
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'unit (`()`) cannot be unified with types other than unit')));
					case 'TypeRecord':
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'unit (`()`) cannot be unified with types other than unit')));
					case 'TypeRecordExtension':
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'unit (`()`) cannot be unified with types other than unit')));
					default:
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'unit (`()`) cannot be unified with types other than unit')));
				}
			case 'TypeConstruct':
				var aTypeConstruct = a.a;
				return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnifyWithTypeConstruct, context, bNotVariable, aTypeConstruct);
			case 'TypeTuple':
				var aTuple = a.a;
				switch (bNotVariable.$) {
					case 'TypeTuple':
						var bTuple = bNotVariable.a;
						return A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
							F2(
								function (part0ABUnified, part1ABUnified) {
									return A2(
										$elm$core$Result$map,
										function (substitutionsABMerged) {
											return {
												substitutions: substitutionsABMerged,
												type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
														{part0: part0ABUnified.type_, part1: part1ABUnified.type_}))
											};
										},
										A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, part0ABUnified.substitutions, part1ABUnified.substitutions));
								}),
							A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, context, aTuple.part0, bTuple.part0),
							A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, context, aTuple.part1, bTuple.part1));
					case 'TypeUnit':
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'tuple (`( ..., ... )`) cannot be unified with types other than tuple')));
					case 'TypeConstruct':
						var bTypeConstruct = bNotVariable.a;
						var _v32 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct, context, bTypeConstruct, a);
						if (_v32.$ === 'Just') {
							var result = _v32.a;
							return result;
						} else {
							return $elm$core$Result$Err(
								'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'tuple (`( ..., ... )`) cannot be unified with types other than tuple')));
						}
					case 'TypeTriple':
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'tuple (`( ..., ... )`) cannot be unified with types other than tuple')));
					case 'TypeRecord':
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'tuple (`( ..., ... )`) cannot be unified with types other than tuple')));
					case 'TypeRecordExtension':
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'tuple (`( ..., ... )`) cannot be unified with types other than tuple')));
					default:
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'tuple (`( ..., ... )`) cannot be unified with types other than tuple')));
				}
			case 'TypeTriple':
				var aTriple = a.a;
				switch (bNotVariable.$) {
					case 'TypeTriple':
						var bTriple = bNotVariable.a;
						return A4(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3,
							F3(
								function (part0ABUnified, part1ABUnified, part2ABUnified) {
									return A2(
										$elm$core$Result$map,
										function (substitutionsABMerged) {
											return {
												substitutions: substitutionsABMerged,
												type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple(
														{part0: part0ABUnified.type_, part1: part1ABUnified.type_, part2: part2ABUnified.type_}))
											};
										},
										A4($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3, context, part0ABUnified.substitutions, part1ABUnified.substitutions, part2ABUnified.substitutions));
								}),
							A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, context, aTriple.part0, bTriple.part0),
							A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, context, aTriple.part1, bTriple.part1),
							A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, context, aTriple.part2, bTriple.part2));
					case 'TypeUnit':
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'triple (`( ..., ..., ... )`) cannot be unified with types other than triple')));
					case 'TypeConstruct':
						var bTypeConstruct = bNotVariable.a;
						var _v34 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct, context, bTypeConstruct, a);
						if (_v34.$ === 'Just') {
							var result = _v34.a;
							return result;
						} else {
							return $elm$core$Result$Err(
								'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'triple (`( ..., ..., ... )`) cannot be unified with types other than triple')));
						}
					case 'TypeTuple':
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'triple (`( ..., ..., ... )`) cannot be unified with types other than triple')));
					case 'TypeRecord':
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'triple (`( ..., ..., ... )`) cannot be unified with types other than triple')));
					case 'TypeRecordExtension':
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'triple (`( ..., ..., ... )`) cannot be unified with types other than triple')));
					default:
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'triple (`( ..., ..., ... )`) cannot be unified with types other than triple')));
				}
			case 'TypeRecord':
				var aRecord = a.a;
				switch (bNotVariable.$) {
					case 'TypeRecord':
						var bRecord = bNotVariable.a;
						return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeRecordUnify, context, aRecord, bRecord);
					case 'TypeRecordExtension':
						var bRecordExtension = bNotVariable.a;
						return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeRecordExtensionUnifyWithRecord, context, bRecordExtension, aRecord);
					case 'TypeUnit':
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('record ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(aRecord)) + (' cannot be unified with types other than record or record extension, found: ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit)))))));
					case 'TypeConstruct':
						var bTypeConstruct = bNotVariable.a;
						var _v36 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct, context, bTypeConstruct, a);
						if (_v36.$ === 'Just') {
							var result = _v36.a;
							return result;
						} else {
							return $elm$core$Result$Err(
								'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('record ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(aRecord)) + (' cannot be unified with types other than record or record extension, found: ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(bTypeConstruct))))))));
						}
					case 'TypeTuple':
						var bParts = bNotVariable.a;
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('record ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(aRecord)) + (' cannot be unified with types other than record or record extension, found: ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(bParts))))))));
					case 'TypeTriple':
						var bParts = bNotVariable.a;
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('record ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(aRecord)) + (' cannot be unified with types other than record or record extension, found: ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple(bParts))))))));
					default:
						var bTypeFunction = bNotVariable.a;
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('record ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(aRecord)) + (' cannot be unified with types other than record or record extension, found: ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(bTypeFunction))))))));
				}
			case 'TypeRecordExtension':
				var aRecordExtension = a.a;
				switch (bNotVariable.$) {
					case 'TypeRecord':
						var bRecord = bNotVariable.a;
						return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeRecordExtensionUnifyWithRecord, context, aRecordExtension, bRecord);
					case 'TypeRecordExtension':
						var bRecordExtension = bNotVariable.a;
						return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeRecordExtensionUnifyWithRecordExtension, context, aRecordExtension, bRecordExtension);
					case 'TypeUnit':
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('record extension ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(aRecordExtension)) + (' cannot be unified with types other than record or record extension, found: ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit)))))));
					case 'TypeConstruct':
						var bTypeConstruct = bNotVariable.a;
						var _v38 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct, context, bTypeConstruct, a);
						if (_v38.$ === 'Just') {
							var result = _v38.a;
							return result;
						} else {
							return $elm$core$Result$Err(
								'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('record extension ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(aRecordExtension)) + (' cannot be unified with types other than record or record extension, found: ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(bTypeConstruct))))))));
						}
					case 'TypeTuple':
						var bParts = bNotVariable.a;
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('record extension ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(aRecordExtension)) + (' cannot be unified with types other than record or record extension, found: ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(bParts))))))));
					case 'TypeTriple':
						var bParts = bNotVariable.a;
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('record extension ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(aRecordExtension)) + (' cannot be unified with types other than record or record extension, found: ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple(bParts))))))));
					default:
						var bTypeFunction = bNotVariable.a;
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('record extension ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(aRecordExtension)) + (' cannot be unified with types other than record or record extension, found: ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(bTypeFunction))))))));
				}
			default:
				var aFunction = a.a;
				switch (bNotVariable.$) {
					case 'TypeFunction':
						var bFunction = bNotVariable.a;
						return A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
							F2(
								function (inputABUnified, outputABUnified) {
									return A2(
										$elm$core$Result$map,
										function (substitutionsABMerged) {
											return {
												substitutions: substitutionsABMerged,
												type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
														{input: inputABUnified.type_, output: outputABUnified.type_}))
											};
										},
										A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, inputABUnified.substitutions, outputABUnified.substitutions));
								}),
							A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, context, aFunction.input, bFunction.input),
							A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, context, aFunction.output, bFunction.output));
					case 'TypeUnit':
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('function ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction)) + (' cannot be unified with types other than function: ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit)))))));
					case 'TypeConstruct':
						var bTypeConstruct = bNotVariable.a;
						var _v40 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct, context, bTypeConstruct, a);
						if (_v40.$ === 'Just') {
							var result = _v40.a;
							return result;
						} else {
							return $elm$core$Result$Err(
								'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('function ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction)) + (' cannot be unified with types other than function: ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(bTypeConstruct))))))));
						}
					case 'TypeTuple':
						var bTypeTuple = bNotVariable.a;
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('function ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction)) + (' cannot be unified with types other than function: ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(bTypeTuple))))))));
					case 'TypeTriple':
						var bTypeTriple = bNotVariable.a;
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('function ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction)) + (' cannot be unified with types other than function: ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple(bTypeTriple))))))));
					case 'TypeRecord':
						var bTypeRecord = bNotVariable.a;
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('function ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction)) + (' cannot be unified with types other than function: ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(bTypeRecord))))))));
					default:
						var bTypeRecordExtension = bNotVariable.a;
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('function ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction)) + (' cannot be unified with types other than function: ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(bTypeRecordExtension))))))));
				}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnifyWithType = F3(
	function (context, aTypeNotVariable, b) {
		if (b.$ === 'TypeVariable') {
			var bVariableName = b.a;
			return A4(
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableWithType,
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(aTypeNotVariable),
				context.declarationTypes,
				bVariableName,
				aTypeNotVariable);
		} else {
			var bTypeNotVariable = b.a;
			return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnify, context, aTypeNotVariable, bTypeNotVariable);
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnifyWithTypeConstruct = F3(
	function (context, aTypeNotVariable, bTypeConstruct) {
		switch (aTypeNotVariable.$) {
			case 'TypeConstruct':
				var aTypeConstruct = aTypeNotVariable.a;
				if (_Utils_eq(bTypeConstruct.name, aTypeConstruct.name) && _Utils_eq(bTypeConstruct.moduleOrigin, aTypeConstruct.moduleOrigin)) {
					var _v18 = aTypeConstruct._arguments;
					if (!_v18.b) {
						return $elm$core$Result$Ok(
							{
								substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
								type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(aTypeNotVariable)
							});
					} else {
						return A2(
							$elm$core$Result$map,
							function (argumentsABUnified) {
								return {
									substitutions: argumentsABUnified.substitutions,
									type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
											{
												_arguments: $elm$core$List$reverse(argumentsABUnified.argumentsReverse),
												moduleOrigin: bTypeConstruct.moduleOrigin,
												name: bTypeConstruct.name
											}))
								};
							},
							A4(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldl2WhileOkFrom,
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$argumentsReverseListEmptySubstitutionsNone,
								bTypeConstruct._arguments,
								aTypeConstruct._arguments,
								F3(
									function (aArgument, bArgument, soFar) {
										return A2(
											$elm$core$Result$andThen,
											function (argumentTypeUnifiedAndSubstitutions) {
												return A2(
													$elm$core$Result$map,
													function (substitutionsWithArgument) {
														return {
															argumentsReverse: A2($elm$core$List$cons, argumentTypeUnifiedAndSubstitutions.type_, soFar.argumentsReverse),
															substitutions: substitutionsWithArgument
														};
													},
													A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, soFar.substitutions, argumentTypeUnifiedAndSubstitutions.substitutions));
											},
											A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, context, aArgument, bArgument));
									})));
					}
				} else {
					var _v19 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct, context, bTypeConstruct, aTypeNotVariable);
					if (_v19.$ === 'Just') {
						var result = _v19.a;
						return result;
					} else {
						var _v20 = A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct,
							context,
							aTypeConstruct,
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(bTypeConstruct));
						if (_v20.$ === 'Just') {
							var result = _v20.a;
							return result;
						} else {
							return $elm$core$Result$Err(
								'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('choice type ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString(
									{name: bTypeConstruct.name, qualification: bTypeConstruct.moduleOrigin}) + (' cannot be unified be with a choice type with a different name: ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(aTypeConstruct))))))));
						}
					}
				}
			case 'TypeUnit':
				var _v21 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct, context, bTypeConstruct, aTypeNotVariable);
				if (_v21.$ === 'Just') {
					var result = _v21.a;
					return result;
				} else {
					return $elm$core$Result$Err(
						'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('choice type ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString(
							{name: bTypeConstruct.name, qualification: bTypeConstruct.moduleOrigin}) + ' cannot be unified with types other than choice type/type alias')))));
				}
			case 'TypeTuple':
				var _v22 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct, context, bTypeConstruct, aTypeNotVariable);
				if (_v22.$ === 'Just') {
					var result = _v22.a;
					return result;
				} else {
					return $elm$core$Result$Err(
						'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('choice type ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString(
							{name: bTypeConstruct.name, qualification: bTypeConstruct.moduleOrigin}) + ' cannot be unified with types other than choice type/type alias')))));
				}
			case 'TypeTriple':
				var _v23 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct, context, bTypeConstruct, aTypeNotVariable);
				if (_v23.$ === 'Just') {
					var result = _v23.a;
					return result;
				} else {
					return $elm$core$Result$Err(
						'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('choice type ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString(
							{name: bTypeConstruct.name, qualification: bTypeConstruct.moduleOrigin}) + ' cannot be unified with types other than choice type/type alias')))));
				}
			case 'TypeRecord':
				var _v24 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct, context, bTypeConstruct, aTypeNotVariable);
				if (_v24.$ === 'Just') {
					var result = _v24.a;
					return result;
				} else {
					return $elm$core$Result$Err(
						'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('choice type ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString(
							{name: bTypeConstruct.name, qualification: bTypeConstruct.moduleOrigin}) + ' cannot be unified with types other than choice type/type alias')))));
				}
			case 'TypeRecordExtension':
				var _v25 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct, context, bTypeConstruct, aTypeNotVariable);
				if (_v25.$ === 'Just') {
					var result = _v25.a;
					return result;
				} else {
					return $elm$core$Result$Err(
						'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('choice type ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString(
							{name: bTypeConstruct.name, qualification: bTypeConstruct.moduleOrigin}) + ' cannot be unified with types other than choice type/type alias')))));
				}
			default:
				var _v26 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct, context, bTypeConstruct, aTypeNotVariable);
				if (_v26.$ === 'Just') {
					var result = _v26.a;
					return result;
				} else {
					return $elm$core$Result$Err(
						'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('choice type ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString(
							{name: bTypeConstruct.name, qualification: bTypeConstruct.moduleOrigin}) + ' cannot be unified with types other than choice type/type alias')))));
				}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeRecordExtensionUnifyWithRecord = F3(
	function (context, recordExtension, recordFields) {
		return A2(
			$elm$core$Result$andThen,
			function (fieldsUnified) {
				var unifiedTypeNotVariable = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(fieldsUnified.fieldsUnified);
				return A2(
					$elm$core$Result$map,
					function (fullSubstitutions) {
						return {
							substitutions: fullSubstitutions,
							type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(unifiedTypeNotVariable)
						};
					},
					A2(
						$elm$core$Result$andThen,
						function (recordVariableToUnifiedSubstitutions) {
							return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, fieldsUnified.substitutions, recordVariableToUnifiedSubstitutions);
						},
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableOrError, context.declarationTypes, recordExtension.recordVariable, unifiedTypeNotVariable)));
			},
			A6(
				$miniBill$elm_fast_dict$FastDict$merge,
				F3(
					function (name, _v15, _v16) {
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('record extension with the field `' + (name + ('` cannot be unified with a record that does not have this field. The record extension is `' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(recordExtension)) + ('` and the record is `' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(recordFields)) + '`')))))))));
					}),
				F4(
					function (name, aValue, bValue, soFarOrError) {
						return A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
							F2(
								function (abValueUnified, soFar) {
									return A2(
										$elm$core$Result$map,
										function (substitutionsWithField) {
											return {
												fieldsUnified: A3($miniBill$elm_fast_dict$FastDict$insert, name, abValueUnified.type_, soFar.fieldsUnified),
												substitutions: substitutionsWithField
											};
										},
										A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, soFar.substitutions, abValueUnified.substitutions));
								}),
							A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, context, aValue, bValue),
							soFarOrError);
					}),
				F3(
					function (name, value, soFarOrError) {
						return A2(
							$elm$core$Result$map,
							function (soFar) {
								return {
									fieldsUnified: A3($miniBill$elm_fast_dict$FastDict$insert, name, value, soFar.fieldsUnified),
									substitutions: soFar.substitutions
								};
							},
							soFarOrError);
					}),
				recordExtension.fields,
				recordFields,
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okFieldsUnifiedEmptySubstitutionsNone));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeRecordExtensionUnifyWithRecordExtension = F3(
	function (context, aRecordExtension, bRecordExtension) {
		return A2(
			$elm$core$Result$andThen,
			function (forFields) {
				var newBaseVariable = {
					name: aRecordExtension.recordVariable.name,
					useRange: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeOverarching, aRecordExtension.recordVariable.useRange, bRecordExtension.recordVariable.useRange)
				};
				var unifiedRecordExtension = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(
					{fields: forFields.fieldsUnified, recordVariable: newBaseVariable});
				return A2(
					$elm$core$Result$map,
					function (fullSubstitutions) {
						return {
							substitutions: fullSubstitutions,
							type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(unifiedRecordExtension)
						};
					},
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
						F2(
							function (aRecordVariableSubstitutions, bRecordVariableSubstitutions) {
								return A4($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3, context, forFields.substitutions, aRecordVariableSubstitutions, bRecordVariableSubstitutions);
							}),
						$miniBill$elm_fast_dict$FastDict$isEmpty(forFields.bOnly) ? A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFrom2EquivalentVariables, aRecordExtension.recordVariable, newBaseVariable) : A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableOrError, context.declarationTypes, aRecordExtension.recordVariable, unifiedRecordExtension),
						$miniBill$elm_fast_dict$FastDict$isEmpty(forFields.aOnly) ? A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFrom2EquivalentVariables, bRecordExtension.recordVariable, newBaseVariable) : A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableOrError, context.declarationTypes, bRecordExtension.recordVariable, unifiedRecordExtension)));
			},
			A6(
				$miniBill$elm_fast_dict$FastDict$merge,
				F3(
					function (name, value, soFarOrError) {
						return A2(
							$elm$core$Result$map,
							function (soFar) {
								return {
									aOnly: A3($miniBill$elm_fast_dict$FastDict$insert, name, value, soFar.aOnly),
									bOnly: soFar.bOnly,
									fieldsUnified: A3($miniBill$elm_fast_dict$FastDict$insert, name, value, soFar.fieldsUnified),
									substitutions: soFar.substitutions
								};
							},
							soFarOrError);
					}),
				F4(
					function (name, aValue, bValue, soFarOrError) {
						return A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
							F2(
								function (abValueUnified, soFar) {
									return A2(
										$elm$core$Result$map,
										function (substitutionsWithField) {
											return {
												aOnly: soFar.aOnly,
												bOnly: soFar.bOnly,
												fieldsUnified: A3($miniBill$elm_fast_dict$FastDict$insert, name, abValueUnified.type_, soFar.fieldsUnified),
												substitutions: substitutionsWithField
											};
										},
										A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, soFar.substitutions, abValueUnified.substitutions));
								}),
							A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, context, aValue, bValue),
							soFarOrError);
					}),
				F3(
					function (name, value, soFarOrError) {
						return A2(
							$elm$core$Result$map,
							function (soFar) {
								return {
									aOnly: soFar.aOnly,
									bOnly: A3($miniBill$elm_fast_dict$FastDict$insert, name, value, soFar.bOnly),
									fieldsUnified: A3($miniBill$elm_fast_dict$FastDict$insert, name, value, soFar.fieldsUnified),
									substitutions: soFar.substitutions
								};
							},
							soFarOrError);
					}),
				aRecordExtension.fields,
				bRecordExtension.fields,
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okFieldsUnifiedEmptySubstitutionsNoneAOnlyDictEmptyBOnlyDictEmpty));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeRecordUnify = F3(
	function (context, aFields, bFields) {
		return A2(
			$elm$core$Result$map,
			function (fieldsUnified) {
				return {
					substitutions: fieldsUnified.substitutions,
					type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(fieldsUnified.fieldsUnified))
				};
			},
			A6(
				$miniBill$elm_fast_dict$FastDict$merge,
				F3(
					function (name, _v11, _v12) {
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('record with the field ' + (name + ' cannot be unified with a record that does not have this field')))));
					}),
				F4(
					function (name, aValue, bValue, soFarOrError) {
						return A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
							F2(
								function (abValueUnified, soFar) {
									return A2(
										$elm$core$Result$map,
										function (substitutionsWithField) {
											return {
												fieldsUnified: A3($miniBill$elm_fast_dict$FastDict$insert, name, abValueUnified.type_, soFar.fieldsUnified),
												substitutions: substitutionsWithField
											};
										},
										A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, soFar.substitutions, abValueUnified.substitutions));
								}),
							A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, context, aValue, bValue),
							soFarOrError);
					}),
				F3(
					function (name, _v13, _v14) {
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('record with the field ' + (name + ' cannot be unified with a record that does not have this field')))));
					}),
				aFields,
				bFields,
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okFieldsUnifiedEmptySubstitutionsNone));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify = F3(
	function (context, a, b) {
		if (a.$ === 'TypeNotVariable') {
			var aTypeNotVariable = a.a;
			if (b.$ === 'TypeVariable') {
				var bVariableName = b.a;
				return A2(
					$elm$core$Result$mapError,
					function (error) {
						return '(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + error));
					},
					A4($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableWithType, a, context.declarationTypes, bVariableName, aTypeNotVariable));
			} else {
				var bTypeNotVariable = b.a;
				return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnify, context, aTypeNotVariable, bTypeNotVariable);
			}
		} else {
			var aVariable = a.a;
			if (b.$ === 'TypeVariable') {
				var bVariable = b.a;
				return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFrom2EquivalentVariablesWithType, a, aVariable, bVariable);
			} else {
				var bTypeNotVariable = b.a;
				return A2(
					$elm$core$Result$mapError,
					function (error) {
						return '(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + error));
					},
					A4($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableWithType, b, context.declarationTypes, aVariable, bTypeNotVariable));
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct = F3(
	function (context, aTypeConstructToExpand, b) {
		var _v6 = A2($miniBill$elm_fast_dict$FastDict$get, aTypeConstructToExpand.moduleOrigin, context.declarationTypes);
		if (_v6.$ === 'Nothing') {
			return $elm$core$Maybe$Just(
				$elm$core$Result$Err(
					'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('could not find declaration types in the origin module of the type construct ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString(
						{name: aTypeConstructToExpand.name, qualification: aTypeConstructToExpand.moduleOrigin}))))));
		} else {
			var aOriginModuleTypes = _v6.a;
			var _v7 = A2($miniBill$elm_fast_dict$FastDict$get, aTypeConstructToExpand.name, aOriginModuleTypes.typeAliases);
			if (_v7.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var aOriginAliasDeclaration = _v7.a;
				var prefix = 'parameter' + (A3($elm$core$String$replace, '.', '', aTypeConstructToExpand.moduleOrigin) + aTypeConstructToExpand.name);
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$andThen,
						function (constructedAliasedType) {
							return A2(
								$elm$core$Result$andThen,
								function (constructedAliasedTypeUnifiedWithB) {
									return A2(
										$elm$core$Result$map,
										function (fullSubstitutions) {
											return {substitutions: fullSubstitutions, type_: constructedAliasedTypeUnifiedWithB.type_};
										},
										A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, constructedAliasedTypeUnifiedWithB.substitutions, constructedAliasedType.substitutions));
								},
								A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnifyWithType, context, b, constructedAliasedType.type_));
						},
						A4(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldl2WhileOkFrom,
							{
								substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
								type_: A2(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables,
									function (aliasVariable) {
										return {
											name: _Utils_ap(
												prefix,
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$stringFirstCharToUpper(aliasVariable.name)),
											useRange: context.range
										};
									},
									aOriginAliasDeclaration.type_)
							},
							aOriginAliasDeclaration.parameters,
							aTypeConstructToExpand._arguments,
							F3(
								function (parameterName, argument, constructedAliasedTypeSoFar) {
									return A2(
										$elm$core$Result$map,
										function (afterSubstitutionType) {
											return {substitutions: constructedAliasedTypeSoFar.substitutions, type_: afterSubstitutionType};
										},
										A3(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariable,
											context,
											{
												type_: argument,
												variable: {
													name: _Utils_ap(
														prefix,
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$stringFirstCharToUpper(parameterName)),
													useRange: context.range
												}
											},
											constructedAliasedTypeSoFar.type_));
								}))));
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge = F3(
	function (context, a, b) {
		if ($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$isEmpty(a.variableToType)) {
			var _v0 = a.equivalentVariables;
			if (!_v0.b) {
				return $elm$core$Result$Ok(b);
			} else {
				return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariableSetMergeIntoVariableSubstitutionsWithVariableToType, b.variableToType, a.equivalentVariables, b.equivalentVariables);
			}
		} else {
			if ($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$isEmpty(b.variableToType)) {
				var _v1 = b.equivalentVariables;
				if (!_v1.b) {
					return $elm$core$Result$Ok(a);
				} else {
					return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariableSetMergeIntoVariableSubstitutionsWithVariableToType, a.variableToType, a.equivalentVariables, b.equivalentVariables);
				}
			} else {
				return A6(
					$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$merge,
					F3(
						function (variable, aType, soFarOrError) {
							return A2(
								$elm$core$Result$andThen,
								function (soFar) {
									var _v2 = A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get, variable, soFar.variableToType);
									if (_v2.$ === 'Nothing') {
										return $elm$core$Result$Ok(
											{
												equivalentVariables: soFar.equivalentVariables,
												variableToType: A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace, variable, aType, soFar.variableToType)
											});
									} else {
										var soFarReplacementTypeForVariable = _v2.a;
										return A2(
											$elm$core$Result$andThen,
											function (aTypeUnifiedWithSoFarReplacementTypeForVariable) {
												return A3(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge,
													context,
													{
														equivalentVariables: soFar.equivalentVariables,
														variableToType: A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace, variable, aType, soFar.variableToType)
													},
													aTypeUnifiedWithSoFarReplacementTypeForVariable.substitutions);
											},
											A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnify, context, aType, soFarReplacementTypeForVariable));
									}
								},
								soFarOrError);
						}),
					F4(
						function (variable, aType, bType, soFarOrError) {
							return A2(
								$elm$core$Result$andThen,
								function (soFar) {
									return A2(
										$elm$core$Result$andThen,
										function (abTypesUnified) {
											return A2(
												$elm$core$Result$andThen,
												function (substitutionsWithAB) {
													var _v3 = abTypesUnified.type_;
													if (_v3.$ === 'TypeVariable') {
														var abUnifiedVariable = _v3.a;
														return A2(
															$elm$core$Result$map,
															function (equivalentVariables) {
																return {equivalentVariables: equivalentVariables, variableToType: substitutionsWithAB.variableToType};
															},
															A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariablesMergeWithSetOf2, variable, abUnifiedVariable, substitutionsWithAB.equivalentVariables));
													} else {
														var abUnifiedNotVariable = _v3.a;
														var _v4 = A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get, variable, substitutionsWithAB.variableToType);
														if (_v4.$ === 'Nothing') {
															return $elm$core$Result$Ok(
																{
																	equivalentVariables: substitutionsWithAB.equivalentVariables,
																	variableToType: A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace, variable, abUnifiedNotVariable, substitutionsWithAB.variableToType)
																});
														} else {
															var substitutionWithABFromVariable = _v4.a;
															return A2(
																$elm$core$Result$andThen,
																function (abUnifiedNotVariableUnifiedWithSubstitutionWithABFromVariable) {
																	return A3(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge,
																		context,
																		{
																			equivalentVariables: substitutionsWithAB.equivalentVariables,
																			variableToType: A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace, variable, abUnifiedNotVariable, substitutionsWithAB.variableToType)
																		},
																		abUnifiedNotVariableUnifiedWithSubstitutionWithABFromVariable.substitutions);
																},
																A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnify, context, abUnifiedNotVariable, substitutionWithABFromVariable));
														}
													}
												},
												A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, soFar, abTypesUnified.substitutions));
										},
										A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnify, context, aType, bType));
								},
								soFarOrError);
						}),
					F3(
						function (variable, bType, soFarOrError) {
							return A2(
								$elm$core$Result$andThen,
								function (soFar) {
									var _v5 = A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get, variable, soFar.variableToType);
									if (_v5.$ === 'Nothing') {
										return $elm$core$Result$Ok(
											{
												equivalentVariables: soFar.equivalentVariables,
												variableToType: A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace, variable, bType, soFar.variableToType)
											});
									} else {
										var soFarReplacementTypeForVariable = _v5.a;
										return A2(
											$elm$core$Result$andThen,
											function (bTypeUnifiedWithSoFarReplacementTypeForVariable) {
												return A3(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge,
													context,
													{
														equivalentVariables: soFar.equivalentVariables,
														variableToType: A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace, variable, bType, soFar.variableToType)
													},
													bTypeUnifiedWithSoFarReplacementTypeForVariable.substitutions);
											},
											A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnify, context, bType, soFarReplacementTypeForVariable));
									}
								},
								soFarOrError);
						}),
					a.variableToType,
					b.variableToType,
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariableSetMergeIntoVariableSubstitutionsWithVariableToType, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty, a.equivalentVariables, b.equivalentVariables));
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3 = F4(
	function (context, a, b, c) {
		return A2(
			$elm$core$Result$andThen,
			function (abSubstitutions) {
				return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, abSubstitutions, c);
			},
			A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, a, b));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableToTypeSubstitutionsCondenseVariables = F3(
	function (context, variableToCondensedLookup, variableToType) {
		return A3(
			$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlWhileOkFrom,
			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
			F3(
				function (uncondensedVariable, replacementType, soFar) {
					var replacementTypeUsingCondensedVariables = A2(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableMapVariables,
						function (variable) {
							return A2(
								$elm$core$Maybe$withDefault,
								variable,
								A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get, variable, variableToCondensedLookup));
						},
						replacementType);
					var _v0 = A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get, uncondensedVariable, variableToCondensedLookup);
					if (_v0.$ === 'Nothing') {
						return $elm$core$Result$Ok(
							{
								equivalentVariables: soFar.equivalentVariables,
								variableToType: A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace, uncondensedVariable, replacementTypeUsingCondensedVariables, soFar.variableToType)
							});
					} else {
						var condensedVariable = _v0.a;
						var _v1 = A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get, condensedVariable, soFar.variableToType);
						if (_v1.$ === 'Nothing') {
							return $elm$core$Result$Ok(
								{
									equivalentVariables: soFar.equivalentVariables,
									variableToType: A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace, condensedVariable, replacementTypeUsingCondensedVariables, soFar.variableToType)
								});
						} else {
							var existingReplacementTypeForCondensedVariable = _v1.a;
							return A2(
								$elm$core$Result$andThen,
								function (replacementTypeForCondensedVariable) {
									var _v2 = replacementTypeForCondensedVariable.type_;
									if (_v2.$ === 'TypeVariable') {
										var replacementTypeVariableForCondensedVariable = _v2.a;
										return A2(
											$elm$core$Result$map,
											function (equivalentVariablesWithCondensed) {
												return {equivalentVariables: equivalentVariablesWithCondensed, variableToType: soFar.variableToType};
											},
											A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariablesMergeWithSetOf2, condensedVariable, replacementTypeVariableForCondensedVariable, soFar.equivalentVariables));
									} else {
										var replacementTypeNotVariableForCondensedVariable = _v2.a;
										return A2(
											$elm$core$Result$map,
											function (substitutionsSoFarAndFromUnifying) {
												return {
													equivalentVariables: substitutionsSoFarAndFromUnifying.equivalentVariables,
													variableToType: A3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace, condensedVariable, replacementTypeNotVariableForCondensedVariable, substitutionsSoFarAndFromUnifying.variableToType)
												};
											},
											A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, soFar, replacementTypeForCondensedVariable.substitutions));
									}
								},
								A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnify, context, existingReplacementTypeForCondensedVariable, replacementTypeUsingCondensedVariables));
						}
					}
				}),
			variableToType);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$createBatchOfSubstitutionsToApply = F2(
	function (context, substitutions) {
		var _v0 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$createEquivalentVariablesToCondensedVariableLookup(substitutions.equivalentVariables);
		if (_v0.$ === 'Err') {
			var error = _v0.a;
			return $elm$core$Result$Err(
				'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + error)));
		} else {
			var variableToCondensedLookup = _v0.a;
			var _v1 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableToTypeSubstitutionsCondenseVariables, context, variableToCondensedLookup, substitutions.variableToType);
			if (_v1.$ === 'Err') {
				var error = _v1.a;
				return $elm$core$Result$Err(error);
			} else {
				var variableToTypeWithCondensedVariables = _v1.a;
				var _v2 = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsVariableToTypeApplyOverItself, context, variableToTypeWithCondensedVariables.variableToType);
				if (_v2.$ === 'Err') {
					var error = _v2.a;
					return $elm$core$Result$Err(error);
				} else {
					var variableToTypeSubstitutedOverItself = _v2.a;
					return $elm$core$Result$Ok(
						{
							newEquivalentVariables: variableToTypeWithCondensedVariables.equivalentVariables,
							substituteVariableByType: function (originalTypeVariable) {
								var _v3 = A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get, originalTypeVariable, variableToCondensedLookup);
								if (_v3.$ === 'Just') {
									var condensedVariable = _v3.a;
									return $elm$core$Maybe$Just(
										function () {
											var _v4 = A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get, condensedVariable, variableToTypeSubstitutedOverItself);
											if (_v4.$ === 'Nothing') {
												return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(condensedVariable);
											} else {
												var replacementTypeNotVariable = _v4.a;
												return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(replacementTypeNotVariable);
											}
										}());
								} else {
									return A2(
										$elm$core$Maybe$map,
										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable,
										A2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get, originalTypeVariable, variableToTypeSubstitutedOverItself));
								}
							}
						});
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$RopeLeaf = F2(
	function (a, b) {
		return {$: 'RopeLeaf', a: a, b: b};
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$RopeBranch = F2(
	function (a, b) {
		return {$: 'RopeBranch', a: a, b: b};
	});
var $miniBill$elm_fast_dict$FastDict$size = function (_v0) {
	var sz = _v0.a;
	return sz;
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictUnionWith = F3(
	function (combineValuesFromBothAndKey, aDict, bDict) {
		return (_Utils_cmp(
			$miniBill$elm_fast_dict$FastDict$size(aDict),
			$miniBill$elm_fast_dict$FastDict$size(bDict)) > 0) ? A3(
			$miniBill$elm_fast_dict$FastDict$foldl,
			F3(
				function (key, b, soFar) {
					var _v0 = A2($miniBill$elm_fast_dict$FastDict$get, key, soFar);
					if (_v0.$ === 'Nothing') {
						return A3($miniBill$elm_fast_dict$FastDict$insert, key, b, soFar);
					} else {
						var a = _v0.a;
						return A3(
							$miniBill$elm_fast_dict$FastDict$insert,
							key,
							A3(combineValuesFromBothAndKey, key, a, b),
							soFar);
					}
				}),
			aDict,
			bDict) : A3(
			$miniBill$elm_fast_dict$FastDict$foldl,
			F3(
				function (key, a, soFar) {
					var _v1 = A2($miniBill$elm_fast_dict$FastDict$get, key, soFar);
					if (_v1.$ === 'Nothing') {
						return A3($miniBill$elm_fast_dict$FastDict$insert, key, a, soFar);
					} else {
						var b = _v1.a;
						return A3(
							$miniBill$elm_fast_dict$FastDict$insert,
							key,
							A3(combineValuesFromBothAndKey, key, a, b),
							soFar);
					}
				}),
			bDict,
			aDict);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge = F2(
	function (a, b) {
		return A3(
			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictUnionWith,
			F3(
				function (_v0, aUses, bUses) {
					return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$RopeBranch, aUses, bUses);
				}),
			a,
			b);
	});
var $miniBill$elm_fast_dict$FastDict$member = F2(
	function (key, dict) {
		var _v0 = A2($miniBill$elm_fast_dict$FastDict$get, key, dict);
		if (_v0.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionLetInUsesOfLocalReferences = F2(
	function (localReferencesToCollect, expressionLetIn) {
		return A2(
			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge,
			A3(
				$elm$core$List$foldl,
				F2(
					function (letDeclaration, soFar) {
						return A2(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge,
							soFar,
							A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationUsesOfLocalReferences, localReferencesToCollect, letDeclaration.declaration));
					}),
				A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationUsesOfLocalReferences, localReferencesToCollect, expressionLetIn.declaration0.declaration),
				expressionLetIn.declaration1Up),
			A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, localReferencesToCollect, expressionLetIn.result));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences = F2(
	function (localReferencesToCollect, expressionTypedNode) {
		expressionTypedNodeUsesOfLocalReferences:
		while (true) {
			var _v1 = expressionTypedNode.value;
			switch (_v1.$) {
				case 'ExpressionUnit':
					return $miniBill$elm_fast_dict$FastDict$empty;
				case 'ExpressionInteger':
					return $miniBill$elm_fast_dict$FastDict$empty;
				case 'ExpressionFloat':
					return $miniBill$elm_fast_dict$FastDict$empty;
				case 'ExpressionString':
					return $miniBill$elm_fast_dict$FastDict$empty;
				case 'ExpressionChar':
					return $miniBill$elm_fast_dict$FastDict$empty;
				case 'ExpressionReferenceVariant':
					return $miniBill$elm_fast_dict$FastDict$empty;
				case 'ExpressionReferenceRecordTypeAliasConstructorFunction':
					return $miniBill$elm_fast_dict$FastDict$empty;
				case 'ExpressionReference':
					var reference = _v1.a;
					var _v2 = reference.qualification;
					if (_v2 === '') {
						return A2($miniBill$elm_fast_dict$FastDict$member, reference.name, localReferencesToCollect) ? A2(
							$miniBill$elm_fast_dict$FastDict$singleton,
							reference.name,
							A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$RopeLeaf, expressionTypedNode.range, expressionTypedNode.type_)) : $miniBill$elm_fast_dict$FastDict$empty;
					} else {
						return $miniBill$elm_fast_dict$FastDict$empty;
					}
				case 'ExpressionOperatorFunction':
					return $miniBill$elm_fast_dict$FastDict$empty;
				case 'ExpressionRecordAccessFunction':
					return $miniBill$elm_fast_dict$FastDict$empty;
				case 'ExpressionNegation':
					var negated = _v1.a;
					var $temp$localReferencesToCollect = localReferencesToCollect,
						$temp$expressionTypedNode = negated;
					localReferencesToCollect = $temp$localReferencesToCollect;
					expressionTypedNode = $temp$expressionTypedNode;
					continue expressionTypedNodeUsesOfLocalReferences;
				case 'ExpressionParenthesized':
					var inParens = _v1.a;
					var $temp$localReferencesToCollect = localReferencesToCollect,
						$temp$expressionTypedNode = inParens;
					localReferencesToCollect = $temp$localReferencesToCollect;
					expressionTypedNode = $temp$expressionTypedNode;
					continue expressionTypedNodeUsesOfLocalReferences;
				case 'ExpressionRecordAccess':
					var expressionRecordAccess = _v1.a;
					var $temp$localReferencesToCollect = localReferencesToCollect,
						$temp$expressionTypedNode = expressionRecordAccess.record;
					localReferencesToCollect = $temp$localReferencesToCollect;
					expressionTypedNode = $temp$expressionTypedNode;
					continue expressionTypedNodeUsesOfLocalReferences;
				case 'ExpressionInfixOperation':
					var expressionInfixOperation = _v1.a;
					return A2(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge,
						A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, localReferencesToCollect, expressionInfixOperation.left),
						A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, localReferencesToCollect, expressionInfixOperation.right));
				case 'ExpressionTuple':
					var parts = _v1.a;
					return A2(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge,
						A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, localReferencesToCollect, parts.part0),
						A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, localReferencesToCollect, parts.part1));
				case 'ExpressionTriple':
					var parts = _v1.a;
					return A2(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge,
						A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, localReferencesToCollect, parts.part0),
						A2(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge,
							A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, localReferencesToCollect, parts.part1),
							A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, localReferencesToCollect, parts.part2)));
				case 'ExpressionIfThenElse':
					var expressionIfThenElse = _v1.a;
					return A2(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge,
						A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, localReferencesToCollect, expressionIfThenElse.condition),
						A2(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge,
							A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, localReferencesToCollect, expressionIfThenElse.onTrue),
							A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, localReferencesToCollect, expressionIfThenElse.onFalse)));
				case 'ExpressionList':
					var elements = _v1.a;
					return A3(
						$elm$core$List$foldl,
						F2(
							function (element, soFar) {
								return A2(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge,
									soFar,
									A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, localReferencesToCollect, element));
							}),
						$miniBill$elm_fast_dict$FastDict$empty,
						elements);
				case 'ExpressionRecord':
					var fields = _v1.a;
					return A3(
						$elm$core$List$foldl,
						F2(
							function (field, soFar) {
								return A2(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge,
									soFar,
									A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, localReferencesToCollect, field.value));
							}),
						$miniBill$elm_fast_dict$FastDict$empty,
						fields);
				case 'ExpressionCall':
					var expressionCall = _v1.a;
					return A2(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge,
						A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, localReferencesToCollect, expressionCall.called),
						A3(
							$elm$core$List$foldl,
							F2(
								function (argument, soFar) {
									return A2(
										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge,
										soFar,
										A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, localReferencesToCollect, argument));
								}),
							A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, localReferencesToCollect, expressionCall.argument0),
							expressionCall.argument1Up));
				case 'ExpressionLambda':
					var expressionLambda = _v1.a;
					var $temp$localReferencesToCollect = localReferencesToCollect,
						$temp$expressionTypedNode = expressionLambda.result;
					localReferencesToCollect = $temp$localReferencesToCollect;
					expressionTypedNode = $temp$expressionTypedNode;
					continue expressionTypedNodeUsesOfLocalReferences;
				case 'ExpressionRecordUpdate':
					var expressionRecordUpdate = _v1.a;
					return A2(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge,
						A2($miniBill$elm_fast_dict$FastDict$member, expressionRecordUpdate.recordVariable.value.name, localReferencesToCollect) ? A2(
							$miniBill$elm_fast_dict$FastDict$singleton,
							expressionRecordUpdate.recordVariable.value.name,
							A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$RopeLeaf, expressionRecordUpdate.recordVariable.range, expressionRecordUpdate.recordVariable.type_)) : $miniBill$elm_fast_dict$FastDict$empty,
						A3(
							$elm$core$List$foldl,
							F2(
								function (field, soFar) {
									return A2(
										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge,
										soFar,
										A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, localReferencesToCollect, field.value));
								}),
							A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, localReferencesToCollect, expressionRecordUpdate.field0.value),
							expressionRecordUpdate.field1Up));
				case 'ExpressionCaseOf':
					var expressionCaseOf = _v1.a;
					return A2(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge,
						A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, localReferencesToCollect, expressionCaseOf.matched),
						A3(
							$elm$core$List$foldl,
							F2(
								function (case_, soFar) {
									return A2(
										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge,
										soFar,
										A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, localReferencesToCollect, case_.result));
								}),
							A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, localReferencesToCollect, expressionCaseOf.case0.result),
							expressionCaseOf.case1Up));
				default:
					var expressionLetIn = _v1.a;
					return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionLetInUsesOfLocalReferences, localReferencesToCollect, expressionLetIn);
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationUsesOfLocalReferences = F2(
	function (localReferencesToCollect, letDeclaration) {
		if (letDeclaration.$ === 'LetDestructuring') {
			var letDestructuring = letDeclaration.a;
			return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, localReferencesToCollect, letDestructuring.expression);
		} else {
			var letValueOrFunctionDeclaration = letDeclaration.a;
			return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, localReferencesToCollect, letValueOrFunctionDeclaration.result);
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternVariable = function (a) {
	return {$: 'PatternVariable', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue = {allUnchanged: true, nodes: _List_Nil, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType = F3(
	function (declarationTypes, replacement, patternTypedNode) {
		var _v0 = patternTypedNode.value;
		switch (_v0.$) {
			case 'PatternUnit':
				return $elm$core$Result$Ok(
					{node: patternTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true});
			case 'PatternChar':
				return $elm$core$Result$Ok(
					{node: patternTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true});
			case 'PatternString':
				return $elm$core$Result$Ok(
					{node: patternTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true});
			case 'PatternInt':
				return $elm$core$Result$Ok(
					{node: patternTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true});
			case 'PatternIgnored':
				return A2(
					$elm$core$Result$map,
					function (typeSubstituted) {
						return {
							node: typeSubstituted.unchanged ? patternTypedNode : {range: patternTypedNode.range, type_: typeSubstituted.type_, value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternIgnored},
							substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
							unchanged: typeSubstituted.unchanged
						};
					},
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType,
						{declarationTypes: declarationTypes, range: patternTypedNode.range},
						replacement,
						patternTypedNode.type_));
			case 'PatternVariable':
				var name = _v0.a;
				return A2(
					$elm$core$Result$map,
					function (substituted) {
						return substituted.unchanged ? {node: patternTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true} : {
							node: {
								range: patternTypedNode.range,
								type_: substituted.type_,
								value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternVariable(name)
							},
							substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
							unchanged: false
						};
					},
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType,
						{declarationTypes: declarationTypes, range: patternTypedNode.range},
						replacement,
						patternTypedNode.type_));
			case 'PatternParenthesized':
				var inParens = _v0.a;
				return A2(
					$elm$core$Result$map,
					function (inParensSubstituted) {
						return inParensSubstituted.unchanged ? {node: patternTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true} : {
							node: {
								range: patternTypedNode.range,
								type_: inParensSubstituted.node.type_,
								value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternParenthesized(inParensSubstituted.node)
							},
							substitutions: inParensSubstituted.substitutions,
							unchanged: false
						};
					},
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType, declarationTypes, replacement, inParens));
			case 'PatternAs':
				var patternAs = _v0.a;
				return A2(
					$elm$core$Result$map,
					function (aliasedPatternSubstituted) {
						return aliasedPatternSubstituted.unchanged ? {node: patternTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true} : {
							node: {
								range: patternTypedNode.range,
								type_: aliasedPatternSubstituted.node.type_,
								value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternAs(
									{
										pattern: aliasedPatternSubstituted.node,
										variable: {range: patternAs.variable.range, type_: aliasedPatternSubstituted.node.type_, value: patternAs.variable.value}
									})
							},
							substitutions: aliasedPatternSubstituted.substitutions,
							unchanged: false
						};
					},
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType, declarationTypes, replacement, patternAs.pattern));
			case 'PatternListCons':
				var patternListCons = _v0.a;
				return A3(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
					F2(
						function (headSubstituted, tailSubstituted) {
							return (headSubstituted.unchanged && tailSubstituted.unchanged) ? $elm$core$Result$Ok(
								{node: patternTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true}) : A2(
								$elm$core$Result$map,
								function (fullSubstitutions) {
									return {
										node: {
											range: patternTypedNode.range,
											type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeListList(headSubstituted.node.type_),
											value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternListCons(
												{head: headSubstituted.node, tail: tailSubstituted.node})
										},
										substitutions: fullSubstitutions,
										unchanged: false
									};
								},
								A3(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge,
									{declarationTypes: declarationTypes, range: patternTypedNode.range},
									headSubstituted.substitutions,
									tailSubstituted.substitutions));
						}),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType, declarationTypes, replacement, patternListCons.head),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType, declarationTypes, replacement, patternListCons.tail));
			case 'PatternTuple':
				var patternTuple = _v0.a;
				return A3(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
					F2(
						function (part0Substituted, part1Substituted) {
							return (part0Substituted.unchanged && part1Substituted.unchanged) ? $elm$core$Result$Ok(
								{node: patternTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true}) : A2(
								$elm$core$Result$map,
								function (fullSubstitutions) {
									return {
										node: {
											range: patternTypedNode.range,
											type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
													{part0: part0Substituted.node.type_, part1: part1Substituted.node.type_})),
											value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternTuple(
												{part0: part0Substituted.node, part1: part1Substituted.node})
										},
										substitutions: fullSubstitutions,
										unchanged: false
									};
								},
								A3(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge,
									{declarationTypes: declarationTypes, range: patternTypedNode.range},
									part0Substituted.substitutions,
									part1Substituted.substitutions));
						}),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType, declarationTypes, replacement, patternTuple.part0),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType, declarationTypes, replacement, patternTuple.part1));
			case 'PatternTriple':
				var patternTriple = _v0.a;
				return A4(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3,
					F3(
						function (part0Substituted, part1Substituted, part2Substituted) {
							return (part0Substituted.unchanged && (part1Substituted.unchanged && part2Substituted.unchanged)) ? $elm$core$Result$Ok(
								{node: patternTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true}) : A2(
								$elm$core$Result$map,
								function (fullSubstitutions) {
									return {
										node: {
											range: patternTypedNode.range,
											type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple(
													{part0: part0Substituted.node.type_, part1: part1Substituted.node.type_, part2: part2Substituted.node.type_})),
											value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternTriple(
												{part0: part0Substituted.node, part1: part1Substituted.node, part2: part2Substituted.node})
										},
										substitutions: fullSubstitutions,
										unchanged: false
									};
								},
								A4(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3,
									{declarationTypes: declarationTypes, range: patternTypedNode.range},
									part0Substituted.substitutions,
									part1Substituted.substitutions,
									part2Substituted.substitutions));
						}),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType, declarationTypes, replacement, patternTriple.part0),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType, declarationTypes, replacement, patternTriple.part1),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType, declarationTypes, replacement, patternTriple.part2));
			case 'PatternRecord':
				var patternRecordFields = _v0.a;
				var typeContext = {declarationTypes: declarationTypes, range: patternTypedNode.range};
				return A3(
					$elm$core$Result$map2,
					F2(
						function (typeSubstituted, fieldsSubstituted) {
							return (typeSubstituted.unchanged && fieldsSubstituted.allUnchanged) ? {node: patternTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true} : {
								node: {
									range: patternTypedNode.range,
									type_: typeSubstituted.type_,
									value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternRecord(fieldsSubstituted.nodes)
								},
								substitutions: fieldsSubstituted.substitutions,
								unchanged: false
							};
						}),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType, typeContext, replacement, patternTypedNode.type_),
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue,
						F2(
							function (fieldNode, soFar) {
								return A2(
									$elm$core$Result$map,
									function (fieldTypeSubstituted) {
										return fieldTypeSubstituted.unchanged ? {
											allUnchanged: soFar.allUnchanged,
											nodes: A2($elm$core$List$cons, fieldNode, soFar.nodes),
											substitutions: soFar.substitutions
										} : {
											allUnchanged: false,
											nodes: A2(
												$elm$core$List$cons,
												{range: fieldNode.range, type_: fieldTypeSubstituted.type_, value: fieldNode.value},
												soFar.nodes),
											substitutions: soFar.substitutions
										};
									},
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType, typeContext, replacement, fieldNode.type_));
							}),
						patternRecordFields));
			case 'PatternListExact':
				var patternListElements = _v0.a;
				var typeContext = {declarationTypes: declarationTypes, range: patternTypedNode.range};
				return A3(
					$elm$core$Result$map2,
					F2(
						function (typeSubstituted, elementsSubstituted) {
							return (typeSubstituted.unchanged && elementsSubstituted.allUnchanged) ? {node: patternTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true} : {
								node: {
									range: patternTypedNode.range,
									type_: typeSubstituted.type_,
									value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternListExact(elementsSubstituted.nodes)
								},
								substitutions: elementsSubstituted.substitutions,
								unchanged: false
							};
						}),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType, typeContext, replacement, patternTypedNode.type_),
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue,
						F2(
							function (elementNode, soFar) {
								return A2(
									$elm$core$Result$andThen,
									function (fieldSubstituted) {
										return fieldSubstituted.unchanged ? $elm$core$Result$Ok(
											{
												allUnchanged: soFar.allUnchanged,
												nodes: A2($elm$core$List$cons, elementNode, soFar.nodes),
												substitutions: soFar.substitutions
											}) : A2(
											$elm$core$Result$map,
											function (substitutionsWithElement) {
												return {
													allUnchanged: false,
													nodes: A2($elm$core$List$cons, fieldSubstituted.node, soFar.nodes),
													substitutions: substitutionsWithElement
												};
											},
											A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, typeContext, soFar.substitutions, fieldSubstituted.substitutions));
									},
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType, declarationTypes, replacement, elementNode));
							}),
						patternListElements));
			default:
				var patternVariant = _v0.a;
				var typeContext = {declarationTypes: declarationTypes, range: patternTypedNode.range};
				return A3(
					$elm$core$Result$map2,
					F2(
						function (typeSubstituted, valuesSubstituted) {
							return (typeSubstituted.unchanged && valuesSubstituted.allUnchanged) ? {node: patternTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true} : {
								node: {
									range: patternTypedNode.range,
									type_: typeSubstituted.type_,
									value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternVariant(
										{choiceTypeName: patternVariant.choiceTypeName, moduleOrigin: patternVariant.moduleOrigin, name: patternVariant.name, qualification: patternVariant.qualification, values: valuesSubstituted.nodes})
								},
								substitutions: valuesSubstituted.substitutions,
								unchanged: false
							};
						}),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType, typeContext, replacement, patternTypedNode.type_),
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue,
						F2(
							function (argumentNode, soFar) {
								return A2(
									$elm$core$Result$andThen,
									function (valueSubstituted) {
										return valueSubstituted.unchanged ? $elm$core$Result$Ok(
											{
												allUnchanged: soFar.allUnchanged,
												nodes: A2($elm$core$List$cons, argumentNode, soFar.nodes),
												substitutions: soFar.substitutions
											}) : A2(
											$elm$core$Result$map,
											function (substitutionsWithElement) {
												return {
													allUnchanged: false,
													nodes: A2($elm$core$List$cons, valueSubstituted.node, soFar.nodes),
													substitutions: substitutionsWithElement
												};
											},
											A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, typeContext, valueSubstituted.substitutions, soFar.substitutions));
									},
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType, declarationTypes, replacement, argumentNode));
							}),
						patternVariant.values));
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen4 = F5(
	function (abToResult, aResult, bResult, cResult, dResult) {
		if (aResult.$ === 'Err') {
			var error = aResult.a;
			return $elm$core$Result$Err(error);
		} else {
			var a = aResult.a;
			if (bResult.$ === 'Err') {
				var error = bResult.a;
				return $elm$core$Result$Err(error);
			} else {
				var b = bResult.a;
				if (cResult.$ === 'Err') {
					var error = cResult.a;
					return $elm$core$Result$Err(error);
				} else {
					var c = cResult.a;
					if (dResult.$ === 'Err') {
						var error = dResult.a;
						return $elm$core$Result$Err(error);
					} else {
						var d = dResult.a;
						return A4(abToResult, a, b, c, d);
					}
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ropeFoldlWhileOkFrom = F3(
	function (initialState, reduceToResult, rope) {
		ropeFoldlWhileOkFrom:
		while (true) {
			if (rope.$ === 'RopeLeaf') {
				var key = rope.a;
				var value = rope.b;
				return A3(reduceToResult, key, value, initialState);
			} else {
				var left = rope.a;
				var right = rope.b;
				var _v1 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ropeFoldlWhileOkFrom, initialState, reduceToResult, left);
				if (_v1.$ === 'Err') {
					var error = _v1.a;
					return $elm$core$Result$Err(error);
				} else {
					var leftState = _v1.a;
					var $temp$initialState = leftState,
						$temp$reduceToResult = reduceToResult,
						$temp$rope = right;
					initialState = $temp$initialState;
					reduceToResult = $temp$reduceToResult;
					rope = $temp$rope;
					continue ropeFoldlWhileOkFrom;
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyUpdatedValueOrFunctionTypesDictEmptyAllUnchangedTrue = {allUnchanged: true, nodes: _List_Nil, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, updatedValueOrFunctionTypes: $miniBill$elm_fast_dict$FastDict$empty};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$maybeTypeVariableConstraintToString = function (maybeConstraint) {
	if (maybeConstraint.$ === 'Nothing') {
		return '';
	} else {
		var constraint = maybeConstraint.a;
		return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraintToString(constraint);
	}
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableFromContextSetToListHighestToLowestAndMap = F2(
	function (setElementToListElement, typeVariableFromContextSet) {
		return A3(
			$lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldl,
			F3(
				function (setElement, _v0, soFar) {
					return A2(
						$elm$core$List$cons,
						setElementToListElement(setElement),
						soFar);
				}),
			_List_Nil,
			typeVariableFromContextSet);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typesAreEquallyStrict = F2(
	function (aType, bType) {
		return (!($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$size(aType) - $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$size(bType))) && _Utils_eq(
			$elm$core$List$sort(
				A2(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableFromContextSetToListHighestToLowestAndMap,
					function (aVariable) {
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$maybeTypeVariableConstraintToString(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(aVariable.name));
					},
					aType)),
			$elm$core$List$sort(
				A2(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableFromContextSetToListHighestToLowestAndMap,
					function (bVariable) {
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$maybeTypeVariableConstraintToString(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(bVariable.name));
					},
					bType)));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge4 = F5(
	function (context, a, b, c, d) {
		return A2(
			$elm$core$Result$andThen,
			function (abcSubstitutions) {
				return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, abcSubstitutions, d);
			},
			A4($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3, context, a, b, c));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType = F3(
	function (declarationTypes, replacement, expressionTypedNode) {
		var _v1 = expressionTypedNode.value;
		switch (_v1.$) {
			case 'ExpressionUnit':
				return $elm$core$Result$Ok(
					{node: expressionTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true});
			case 'ExpressionFloat':
				return $elm$core$Result$Ok(
					{node: expressionTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true});
			case 'ExpressionChar':
				return $elm$core$Result$Ok(
					{node: expressionTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true});
			case 'ExpressionString':
				return $elm$core$Result$Ok(
					{node: expressionTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true});
			case 'ExpressionInteger':
				return A2(
					$elm$core$Result$map,
					function (typeSubstituted) {
						return typeSubstituted.unchanged ? {node: expressionTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true} : {
							node: {range: expressionTypedNode.range, type_: typeSubstituted.type_, value: expressionTypedNode.value},
							substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
							unchanged: false
						};
					},
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType,
						{declarationTypes: declarationTypes, range: expressionTypedNode.range},
						replacement,
						expressionTypedNode.type_));
			case 'ExpressionReferenceRecordTypeAliasConstructorFunction':
				return A2(
					$elm$core$Result$map,
					function (typeSubstituted) {
						return typeSubstituted.unchanged ? {node: expressionTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true} : {
							node: {range: expressionTypedNode.range, type_: typeSubstituted.type_, value: expressionTypedNode.value},
							substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
							unchanged: false
						};
					},
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType,
						{declarationTypes: declarationTypes, range: expressionTypedNode.range},
						replacement,
						expressionTypedNode.type_));
			case 'ExpressionReferenceVariant':
				return A2(
					$elm$core$Result$map,
					function (typeSubstituted) {
						return typeSubstituted.unchanged ? {node: expressionTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true} : {
							node: {range: expressionTypedNode.range, type_: typeSubstituted.type_, value: expressionTypedNode.value},
							substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
							unchanged: false
						};
					},
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType,
						{declarationTypes: declarationTypes, range: expressionTypedNode.range},
						replacement,
						expressionTypedNode.type_));
			case 'ExpressionReference':
				return A2(
					$elm$core$Result$map,
					function (typeSubstituted) {
						return typeSubstituted.unchanged ? {node: expressionTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true} : {
							node: {range: expressionTypedNode.range, type_: typeSubstituted.type_, value: expressionTypedNode.value},
							substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
							unchanged: false
						};
					},
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType,
						{declarationTypes: declarationTypes, range: expressionTypedNode.range},
						replacement,
						expressionTypedNode.type_));
			case 'ExpressionOperatorFunction':
				return A2(
					$elm$core$Result$map,
					function (typeSubstituted) {
						return typeSubstituted.unchanged ? {node: expressionTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true} : {
							node: {range: expressionTypedNode.range, type_: typeSubstituted.type_, value: expressionTypedNode.value},
							substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
							unchanged: false
						};
					},
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType,
						{declarationTypes: declarationTypes, range: expressionTypedNode.range},
						replacement,
						expressionTypedNode.type_));
			case 'ExpressionRecordAccessFunction':
				return A2(
					$elm$core$Result$map,
					function (typeSubstituted) {
						return typeSubstituted.unchanged ? {node: expressionTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true} : {
							node: {range: expressionTypedNode.range, type_: typeSubstituted.type_, value: expressionTypedNode.value},
							substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
							unchanged: false
						};
					},
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType,
						{declarationTypes: declarationTypes, range: expressionTypedNode.range},
						replacement,
						expressionTypedNode.type_));
			case 'ExpressionNegation':
				var negated = _v1.a;
				return A2(
					$elm$core$Result$map,
					function (negatedSubstituted) {
						return negatedSubstituted.unchanged ? {node: expressionTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true} : {
							node: {
								range: expressionTypedNode.range,
								type_: negatedSubstituted.node.type_,
								value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionNegation(negatedSubstituted.node)
							},
							substitutions: negatedSubstituted.substitutions,
							unchanged: false
						};
					},
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, negated));
			case 'ExpressionParenthesized':
				var inParens = _v1.a;
				return A2(
					$elm$core$Result$map,
					function (inParensSubstituted) {
						return inParensSubstituted.unchanged ? {node: expressionTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true} : {
							node: {
								range: expressionTypedNode.range,
								type_: inParensSubstituted.node.type_,
								value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionParenthesized(inParensSubstituted.node)
							},
							substitutions: inParensSubstituted.substitutions,
							unchanged: false
						};
					},
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, inParens));
			case 'ExpressionRecordAccess':
				var recordAccess = _v1.a;
				var typeContext = {declarationTypes: declarationTypes, range: expressionTypedNode.range};
				return A3(
					$elm$core$Result$map2,
					F2(
						function (typeSubstituted, recordSubstituted) {
							return (typeSubstituted.unchanged && recordSubstituted.unchanged) ? {node: expressionTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true} : {
								node: {
									range: expressionTypedNode.range,
									type_: typeSubstituted.type_,
									value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecordAccess(
										{fieldName: recordAccess.fieldName, fieldNameRange: recordAccess.fieldNameRange, record: recordSubstituted.node})
								},
								substitutions: recordSubstituted.substitutions,
								unchanged: false
							};
						}),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType, typeContext, replacement, expressionTypedNode.type_),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, recordAccess.record));
			case 'ExpressionInfixOperation':
				var expressionInfixOperation = _v1.a;
				var typeContext = {declarationTypes: declarationTypes, range: expressionTypedNode.range};
				return A4(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3,
					F3(
						function (typeSubstituted, leftSubstituted, rightSubstituted) {
							return (typeSubstituted.unchanged && (leftSubstituted.unchanged && rightSubstituted.unchanged)) ? $elm$core$Result$Ok(
								{node: expressionTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true}) : A2(
								$elm$core$Result$map,
								function (fullSubstitutions) {
									return {
										node: {
											range: expressionTypedNode.range,
											type_: typeSubstituted.type_,
											value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionInfixOperation(
												{
													left: leftSubstituted.node,
													operator: {
														moduleOrigin: expressionInfixOperation.operator.moduleOrigin,
														symbol: expressionInfixOperation.operator.symbol,
														type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																{
																	input: leftSubstituted.node.type_,
																	output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																			{input: rightSubstituted.node.type_, output: typeSubstituted.type_}))
																}))
													},
													right: rightSubstituted.node
												})
										},
										substitutions: fullSubstitutions,
										unchanged: false
									};
								},
								A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, typeContext, leftSubstituted.substitutions, rightSubstituted.substitutions));
						}),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType, typeContext, replacement, expressionTypedNode.type_),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, expressionInfixOperation.left),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, expressionInfixOperation.right));
			case 'ExpressionTuple':
				var expressionTuple = _v1.a;
				return A3(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
					F2(
						function (part0Substituted, part1Substituted) {
							return (part0Substituted.unchanged && part1Substituted.unchanged) ? $elm$core$Result$Ok(
								{node: expressionTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true}) : A2(
								$elm$core$Result$map,
								function (fullSubstitutions) {
									return {
										node: {
											range: expressionTypedNode.range,
											type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
													{part0: part0Substituted.node.type_, part1: part1Substituted.node.type_})),
											value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionTuple(
												{part0: part0Substituted.node, part1: part1Substituted.node})
										},
										substitutions: fullSubstitutions,
										unchanged: false
									};
								},
								A3(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge,
									{declarationTypes: declarationTypes, range: expressionTypedNode.range},
									part0Substituted.substitutions,
									part1Substituted.substitutions));
						}),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, expressionTuple.part0),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, expressionTuple.part1));
			case 'ExpressionTriple':
				var expressionTriple = _v1.a;
				return A4(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3,
					F3(
						function (part0Substituted, part1Substituted, part2Substituted) {
							return (part0Substituted.unchanged && (part1Substituted.unchanged && part2Substituted.unchanged)) ? $elm$core$Result$Ok(
								{node: expressionTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true}) : A2(
								$elm$core$Result$map,
								function (fullSubstitutions) {
									return {
										node: {
											range: expressionTypedNode.range,
											type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple(
													{part0: part0Substituted.node.type_, part1: part1Substituted.node.type_, part2: part2Substituted.node.type_})),
											value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionTriple(
												{part0: part0Substituted.node, part1: part1Substituted.node, part2: part2Substituted.node})
										},
										substitutions: fullSubstitutions,
										unchanged: false
									};
								},
								A4(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3,
									{declarationTypes: declarationTypes, range: expressionTypedNode.range},
									part0Substituted.substitutions,
									part1Substituted.substitutions,
									part2Substituted.substitutions));
						}),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, expressionTriple.part0),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, expressionTriple.part1),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, expressionTriple.part2));
			case 'ExpressionIfThenElse':
				var expressionIfThenElse = _v1.a;
				return A4(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3,
					F3(
						function (conditionSubstituted, onTrueSubstituted, onFalseSubstituted) {
							return (conditionSubstituted.unchanged && (onTrueSubstituted.unchanged && onFalseSubstituted.unchanged)) ? $elm$core$Result$Ok(
								{node: expressionTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true}) : A2(
								$elm$core$Result$map,
								function (fullSubstitutions) {
									return {
										node: {
											range: expressionTypedNode.range,
											type_: onTrueSubstituted.node.type_,
											value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionIfThenElse(
												{condition: conditionSubstituted.node, onFalse: onFalseSubstituted.node, onTrue: onTrueSubstituted.node})
										},
										substitutions: fullSubstitutions,
										unchanged: false
									};
								},
								A4(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3,
									{declarationTypes: declarationTypes, range: expressionTypedNode.range},
									conditionSubstituted.substitutions,
									onTrueSubstituted.substitutions,
									onFalseSubstituted.substitutions));
						}),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, expressionIfThenElse.condition),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, expressionIfThenElse.onTrue),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, expressionIfThenElse.onFalse));
			case 'ExpressionList':
				var expressionListElements = _v1.a;
				var typeContext = {declarationTypes: declarationTypes, range: expressionTypedNode.range};
				return A3(
					$elm$core$Result$map2,
					F2(
						function (typeSubstituted, elementsSubstituted) {
							return (typeSubstituted.unchanged && elementsSubstituted.allUnchanged) ? {node: expressionTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true} : {
								node: {
									range: expressionTypedNode.range,
									type_: typeSubstituted.type_,
									value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionList(elementsSubstituted.nodes)
								},
								substitutions: elementsSubstituted.substitutions,
								unchanged: false
							};
						}),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType, typeContext, replacement, expressionTypedNode.type_),
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue,
						F2(
							function (elementNode, soFar) {
								return A2(
									$elm$core$Result$andThen,
									function (elementSubstituted) {
										return elementSubstituted.unchanged ? $elm$core$Result$Ok(
											{
												allUnchanged: soFar.allUnchanged,
												nodes: A2($elm$core$List$cons, elementNode, soFar.nodes),
												substitutions: soFar.substitutions
											}) : A2(
											$elm$core$Result$map,
											function (substitutionsSoFarWithElement) {
												return {
													allUnchanged: false,
													nodes: A2($elm$core$List$cons, elementSubstituted.node, soFar.nodes),
													substitutions: substitutionsSoFarWithElement
												};
											},
											A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, typeContext, soFar.substitutions, elementSubstituted.substitutions));
									},
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, elementNode));
							}),
						expressionListElements));
			case 'ExpressionCall':
				var expressionCall = _v1.a;
				var typeContext = {declarationTypes: declarationTypes, range: expressionTypedNode.range};
				return A5(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen4,
					F4(
						function (typeSubstituted, calledSubstituted, argument0Substituted, argument1UpSubstituted) {
							return (typeSubstituted.unchanged && (calledSubstituted.unchanged && (argument0Substituted.unchanged && argument1UpSubstituted.allUnchanged))) ? $elm$core$Result$Ok(
								{node: expressionTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true}) : A2(
								$elm$core$Result$map,
								function (fullSubstitutions) {
									return {
										node: {
											range: expressionTypedNode.range,
											type_: typeSubstituted.type_,
											value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionCall(
												{argument0: argument0Substituted.node, argument1Up: argument1UpSubstituted.nodes, called: calledSubstituted.node})
										},
										substitutions: fullSubstitutions,
										unchanged: false
									};
								},
								A4($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3, typeContext, calledSubstituted.substitutions, argument0Substituted.substitutions, argument1UpSubstituted.substitutions));
						}),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType, typeContext, replacement, expressionTypedNode.type_),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, expressionCall.called),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, expressionCall.argument0),
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue,
						F2(
							function (argumentNode, soFar) {
								return A2(
									$elm$core$Result$andThen,
									function (argumentSubstituted) {
										return argumentSubstituted.unchanged ? $elm$core$Result$Ok(
											{
												allUnchanged: soFar.allUnchanged,
												nodes: A2($elm$core$List$cons, argumentNode, soFar.nodes),
												substitutions: soFar.substitutions
											}) : A2(
											$elm$core$Result$map,
											function (fullSubstitutions) {
												return {
													allUnchanged: false,
													nodes: A2($elm$core$List$cons, argumentSubstituted.node, soFar.nodes),
													substitutions: fullSubstitutions
												};
											},
											A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, typeContext, soFar.substitutions, argumentSubstituted.substitutions));
									},
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, argumentNode));
							}),
						expressionCall.argument1Up));
			case 'ExpressionRecord':
				var expressionRecordFields = _v1.a;
				var typeContext = {declarationTypes: declarationTypes, range: expressionTypedNode.range};
				return A2(
					$elm$core$Result$map,
					function (fieldsSubstituted) {
						return fieldsSubstituted.allUnchanged ? {node: expressionTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true} : {
							node: {
								range: expressionTypedNode.range,
								type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(
										A3(
											$elm$core$List$foldl,
											F2(
												function (fieldSubstituted, soFar) {
													return A3($miniBill$elm_fast_dict$FastDict$insert, fieldSubstituted.name, fieldSubstituted.value.type_, soFar);
												}),
											$miniBill$elm_fast_dict$FastDict$empty,
											fieldsSubstituted.nodes))),
								value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecord(fieldsSubstituted.nodes)
							},
							substitutions: fieldsSubstituted.substitutions,
							unchanged: false
						};
					},
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue,
						F2(
							function (fieldNode, soFar) {
								return A2(
									$elm$core$Result$andThen,
									function (fieldValueSubstituted) {
										return fieldValueSubstituted.unchanged ? $elm$core$Result$Ok(
											{
												allUnchanged: soFar.allUnchanged,
												nodes: A2($elm$core$List$cons, fieldNode, soFar.nodes),
												substitutions: soFar.substitutions
											}) : A2(
											$elm$core$Result$map,
											function (fullSubstitutions) {
												return {
													allUnchanged: false,
													nodes: A2(
														$elm$core$List$cons,
														{name: fieldNode.name, nameRange: fieldNode.nameRange, range: fieldNode.range, value: fieldValueSubstituted.node},
														soFar.nodes),
													substitutions: fullSubstitutions
												};
											},
											A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, typeContext, soFar.substitutions, fieldValueSubstituted.substitutions));
									},
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, fieldNode.value));
							}),
						expressionRecordFields));
			case 'ExpressionRecordUpdate':
				var expressionRecordUpdate = _v1.a;
				var typeContext = {declarationTypes: declarationTypes, range: expressionTypedNode.range};
				return A4(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3,
					F3(
						function (typeSubstituted, field0Substituted, field1UpSubstituted) {
							return (typeSubstituted.unchanged && (field0Substituted.unchanged && field1UpSubstituted.allUnchanged)) ? $elm$core$Result$Ok(
								{node: expressionTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true}) : A2(
								$elm$core$Result$map,
								function (fullSubstitutions) {
									return {
										node: {
											range: expressionTypedNode.range,
											type_: typeSubstituted.type_,
											value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecordUpdate(
												{
													field0: field0Substituted.node,
													field1Up: field1UpSubstituted.nodes,
													recordVariable: {range: expressionRecordUpdate.recordVariable.range, type_: typeSubstituted.type_, value: expressionRecordUpdate.recordVariable.value}
												})
										},
										substitutions: fullSubstitutions,
										unchanged: false
									};
								},
								A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, typeContext, field0Substituted.substitutions, field1UpSubstituted.substitutions));
						}),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType, typeContext, replacement, expressionTypedNode.type_),
					A2(
						$elm$core$Result$map,
						function (fieldValueSubstituted) {
							return fieldValueSubstituted.unchanged ? {node: expressionRecordUpdate.field0, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true} : {
								node: {name: expressionRecordUpdate.field0.name, nameRange: expressionRecordUpdate.field0.nameRange, range: expressionRecordUpdate.field0.range, value: fieldValueSubstituted.node},
								substitutions: fieldValueSubstituted.substitutions,
								unchanged: false
							};
						},
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, expressionRecordUpdate.field0.value)),
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue,
						F2(
							function (fieldNode, soFar) {
								return A2(
									$elm$core$Result$andThen,
									function (fieldValueSubstituted) {
										return fieldValueSubstituted.unchanged ? $elm$core$Result$Ok(
											{
												allUnchanged: soFar.allUnchanged,
												nodes: A2($elm$core$List$cons, fieldNode, soFar.nodes),
												substitutions: soFar.substitutions
											}) : A2(
											$elm$core$Result$map,
											function (fullSubstitutions) {
												return {
													allUnchanged: false,
													nodes: A2(
														$elm$core$List$cons,
														{name: fieldNode.name, nameRange: fieldNode.nameRange, range: fieldNode.range, value: fieldValueSubstituted.node},
														soFar.nodes),
													substitutions: fullSubstitutions
												};
											},
											A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, typeContext, soFar.substitutions, fieldValueSubstituted.substitutions));
									},
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, fieldNode.value));
							}),
						expressionRecordUpdate.field1Up));
			case 'ExpressionLambda':
				var expressionLambda = _v1.a;
				var typeContext = {declarationTypes: declarationTypes, range: expressionTypedNode.range};
				return A4(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3,
					F3(
						function (parameter0Substituted, parameter1UpSubstituted, resultSubstituted) {
							return (parameter0Substituted.unchanged && (parameter1UpSubstituted.allUnchanged && resultSubstituted.unchanged)) ? $elm$core$Result$Ok(
								{node: expressionTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true}) : A2(
								$elm$core$Result$map,
								function (fullSubstitutions) {
									return {
										node: {
											range: expressionTypedNode.range,
											type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
													{
														input: parameter0Substituted.node.type_,
														output: A3(
															$elm$core$List$foldr,
															F2(
																function (argumentTypedNode, output) {
																	return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																			{input: argumentTypedNode.type_, output: output}));
																}),
															resultSubstituted.node.type_,
															parameter1UpSubstituted.nodes)
													})),
											value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionLambda(
												{parameter0: parameter0Substituted.node, parameter1Up: parameter1UpSubstituted.nodes, result: resultSubstituted.node})
										},
										substitutions: fullSubstitutions,
										unchanged: false
									};
								},
								A4($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3, typeContext, parameter0Substituted.substitutions, parameter1UpSubstituted.substitutions, resultSubstituted.substitutions));
						}),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType, declarationTypes, replacement, expressionLambda.parameter0),
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue,
						F2(
							function (parameterNode, soFar) {
								return A2(
									$elm$core$Result$andThen,
									function (parameterSubstituted) {
										return parameterSubstituted.unchanged ? $elm$core$Result$Ok(
											{
												allUnchanged: soFar.allUnchanged,
												nodes: A2($elm$core$List$cons, parameterNode, soFar.nodes),
												substitutions: soFar.substitutions
											}) : A2(
											$elm$core$Result$map,
											function (substitutionsSoFarWithParameter) {
												return {
													allUnchanged: false,
													nodes: A2($elm$core$List$cons, parameterSubstituted.node, soFar.nodes),
													substitutions: substitutionsSoFarWithParameter
												};
											},
											A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, typeContext, parameterSubstituted.substitutions, soFar.substitutions));
									},
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType, declarationTypes, replacement, parameterNode));
							}),
						expressionLambda.parameter1Up),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, expressionLambda.result));
			case 'ExpressionCaseOf':
				var expressionCaseOf = _v1.a;
				var typeContext = {declarationTypes: declarationTypes, range: expressionTypedNode.range};
				return A4(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3,
					F3(
						function (matchedSubstituted, case0Substituted, case1UpSubstituted) {
							return (matchedSubstituted.unchanged && (case0Substituted.unchanged && case1UpSubstituted.allUnchanged)) ? $elm$core$Result$Ok(
								{node: expressionTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true}) : A2(
								$elm$core$Result$map,
								function (fullSubstitutions) {
									return {
										node: {
											range: expressionTypedNode.range,
											type_: case0Substituted.node.result.type_,
											value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionCaseOf(
												{case0: case0Substituted.node, case1Up: case1UpSubstituted.nodes, matched: matchedSubstituted.node})
										},
										substitutions: fullSubstitutions,
										unchanged: false
									};
								},
								A4($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3, typeContext, matchedSubstituted.substitutions, case0Substituted.substitutions, case1UpSubstituted.substitutions));
						}),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, expressionCaseOf.matched),
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
						F2(
							function (patternSubstituted, resultSubstituted) {
								return (patternSubstituted.unchanged && resultSubstituted.unchanged) ? $elm$core$Result$Ok(
									{node: expressionCaseOf.case0, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true}) : A2(
									$elm$core$Result$map,
									function (fullSubstitutions) {
										return {
											node: {pattern: patternSubstituted.node, result: resultSubstituted.node},
											substitutions: fullSubstitutions,
											unchanged: false
										};
									},
									A3(
										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge,
										{
											declarationTypes: declarationTypes,
											range: {end: expressionCaseOf.case0.result.range.end, start: expressionCaseOf.case0.pattern.range.start}
										},
										patternSubstituted.substitutions,
										resultSubstituted.substitutions));
							}),
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType, declarationTypes, replacement, expressionCaseOf.case0.pattern),
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, expressionCaseOf.case0.result)),
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue,
						F2(
							function (case_, soFar) {
								return A3(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
									F2(
										function (patternSubstituted, resultSubstituted) {
											return (resultSubstituted.unchanged && patternSubstituted.unchanged) ? $elm$core$Result$Ok(
												{
													allUnchanged: soFar.allUnchanged,
													nodes: A2($elm$core$List$cons, case_, soFar.nodes),
													substitutions: soFar.substitutions
												}) : A2(
												$elm$core$Result$map,
												function (fullSubstitutions) {
													return {
														allUnchanged: false,
														nodes: A2(
															$elm$core$List$cons,
															{pattern: patternSubstituted.node, result: resultSubstituted.node},
															soFar.nodes),
														substitutions: fullSubstitutions
													};
												},
												A4($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3, typeContext, patternSubstituted.substitutions, resultSubstituted.substitutions, soFar.substitutions));
										}),
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType, declarationTypes, replacement, case_.pattern),
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, case_.result));
							}),
						expressionCaseOf.case1Up));
			default:
				var expressionLetIn = _v1.a;
				var typeContext = {declarationTypes: declarationTypes, range: expressionTypedNode.range};
				return A4(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3,
					F3(
						function (declaration0Substituted, declaration1UpSubstituted, resultSubstituted) {
							if (declaration0Substituted.unchanged && (declaration1UpSubstituted.allUnchanged && resultSubstituted.unchanged)) {
								return $elm$core$Result$Ok(
									{node: expressionTypedNode, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true});
							} else {
								var updatedValueOrFunctionTypes = function () {
									var _v3 = declaration0Substituted.updatedValueOrFunctionType;
									if (_v3.$ === 'Nothing') {
										return declaration1UpSubstituted.updatedValueOrFunctionTypes;
									} else {
										var declaration0UpdatedValueOrFunctionType = _v3.a;
										return A3(
											$miniBill$elm_fast_dict$FastDict$insert,
											declaration0UpdatedValueOrFunctionType.name,
											{range: declaration0UpdatedValueOrFunctionType.range, type_: declaration0UpdatedValueOrFunctionType.type_},
											declaration1UpSubstituted.updatedValueOrFunctionTypes);
									}
								}();
								var resultLetInNode = {
									range: expressionTypedNode.range,
									type_: resultSubstituted.node.type_,
									value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionLetIn(
										{declaration0: declaration0Substituted.node, declaration1Up: declaration1UpSubstituted.nodes, result: resultSubstituted.node})
								};
								var variableSubstitutionsForUnifyingWithUpdatedValueOrFunctionTypesOrError = A3(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictFoldlWhileOkFrom,
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
									F3(
										function (inferredLetDeclarationName, uses, soFar) {
											var _v2 = A2($miniBill$elm_fast_dict$FastDict$get, inferredLetDeclarationName, updatedValueOrFunctionTypes);
											if (_v2.$ === 'Nothing') {
												return $elm$core$Result$Err(
													'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(expressionTypedNode.range) + (') ' + 'bug in elm-syntax-type-infer: collected uses of variable that wasn\'t asked for')));
											} else {
												var inferredDeclarationType = _v2.a;
												return A3(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ropeFoldlWhileOkFrom,
													soFar,
													F3(
														function (useRange, useType, soFarWithUses) {
															var letDeclarationTypeNewInstanceForUse = A2(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables,
																function (inferredDeclarationTypeVariable) {
																	return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeIncludesRange, useRange, inferredDeclarationType.range) ? {name: inferredDeclarationTypeVariable.name, useRange: useRange} : inferredDeclarationTypeVariable;
																},
																inferredDeclarationType.type_);
															return A2(
																$elm$core$Result$andThen,
																function (useUnifiedWithNewLetTypeInstance) {
																	return A2(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typesAreEquallyStrict,
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(useUnifiedWithNewLetTypeInstance.type_),
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(useType)) ? A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariableSetMergeIntoVariableSubstitutionsWithVariableToType, soFarWithUses.variableToType, soFarWithUses.equivalentVariables, useUnifiedWithNewLetTypeInstance.substitutions.equivalentVariables) : A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, typeContext, soFarWithUses, useUnifiedWithNewLetTypeInstance.substitutions);
																},
																A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, typeContext, useType, letDeclarationTypeNewInstanceForUse));
														}),
													uses);
											}
										}),
									A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, updatedValueOrFunctionTypes, resultLetInNode));
								return A2(
									$elm$core$Result$map,
									function (fullSubstitutions) {
										return {node: resultLetInNode, substitutions: fullSubstitutions, unchanged: false};
									},
									A2(
										$elm$core$Result$andThen,
										function (variableSubstitutionsForUnifyingWithUpdatedValueOrFunctionTypes) {
											return A5($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge4, typeContext, declaration0Substituted.substitutions, declaration1UpSubstituted.substitutions, resultSubstituted.substitutions, variableSubstitutionsForUnifyingWithUpdatedValueOrFunctionTypes);
										},
										variableSubstitutionsForUnifyingWithUpdatedValueOrFunctionTypesOrError));
							}
						}),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationSubstituteVariableByType, declarationTypes, replacement, expressionLetIn.declaration0),
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyUpdatedValueOrFunctionTypesDictEmptyAllUnchangedTrue,
						F2(
							function (letDeclarationNode, soFar) {
								return A2(
									$elm$core$Result$andThen,
									function (declarationSubstituted) {
										return declarationSubstituted.unchanged ? $elm$core$Result$Ok(
											{
												allUnchanged: soFar.allUnchanged,
												nodes: A2($elm$core$List$cons, letDeclarationNode, soFar.nodes),
												substitutions: soFar.substitutions,
												updatedValueOrFunctionTypes: soFar.updatedValueOrFunctionTypes
											}) : A2(
											$elm$core$Result$map,
											function (fullSubstitutions) {
												return {
													allUnchanged: false,
													nodes: A2($elm$core$List$cons, declarationSubstituted.node, soFar.nodes),
													substitutions: fullSubstitutions,
													updatedValueOrFunctionTypes: function () {
														var _v4 = declarationSubstituted.updatedValueOrFunctionType;
														if (_v4.$ === 'Nothing') {
															return soFar.updatedValueOrFunctionTypes;
														} else {
															var updatedValueOrFunctionType = _v4.a;
															return A3(
																$miniBill$elm_fast_dict$FastDict$insert,
																updatedValueOrFunctionType.name,
																{range: updatedValueOrFunctionType.range, type_: updatedValueOrFunctionType.type_},
																soFar.updatedValueOrFunctionTypes);
														}
													}()
												};
											},
											A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, typeContext, soFar.substitutions, declarationSubstituted.substitutions));
									},
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationSubstituteVariableByType, declarationTypes, replacement, letDeclarationNode));
							}),
						expressionLetIn.declaration1Up),
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, expressionLetIn.result));
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationSubstituteVariableByType = F3(
	function (declarationTypes, replacement, letDeclarationAndRange) {
		var _v0 = letDeclarationAndRange.declaration;
		if (_v0.$ === 'LetDestructuring') {
			var letDestructuring = _v0.a;
			return A3(
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
				F2(
					function (patternSubstituted, expressionSubstituted) {
						return (patternSubstituted.unchanged && expressionSubstituted.unchanged) ? $elm$core$Result$Ok(
							{node: letDeclarationAndRange, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true, updatedValueOrFunctionType: $elm$core$Maybe$Nothing}) : A2(
							$elm$core$Result$map,
							function (fullSubstitutions) {
								return {
									node: {
										declaration: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetDestructuring(
											{expression: expressionSubstituted.node, pattern: patternSubstituted.node}),
										range: letDeclarationAndRange.range
									},
									substitutions: fullSubstitutions,
									unchanged: false,
									updatedValueOrFunctionType: $elm$core$Maybe$Nothing
								};
							},
							A3(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge,
								{declarationTypes: declarationTypes, range: letDeclarationAndRange.range},
								patternSubstituted.substitutions,
								expressionSubstituted.substitutions));
					}),
				A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType, declarationTypes, replacement, letDestructuring.pattern),
				A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, letDestructuring.expression));
		} else {
			var letValueOrFunction = _v0.a;
			var typeContext = {declarationTypes: declarationTypes, range: letDeclarationAndRange.range};
			return A4(
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3,
				F3(
					function (parametersSubstituted, resultSubstituted, typeSubstituted) {
						return typeSubstituted.unchanged ? ((resultSubstituted.unchanged && parametersSubstituted.allUnchanged) ? $elm$core$Result$Ok(
							{node: letDeclarationAndRange, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchanged: true, updatedValueOrFunctionType: $elm$core$Maybe$Nothing}) : A2(
							$elm$core$Result$map,
							function (fullSubstitutions) {
								return {
									node: {
										declaration: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetValueOrFunctionDeclaration(
											{name: letValueOrFunction.name, nameRange: letValueOrFunction.nameRange, parameters: parametersSubstituted.nodes, result: resultSubstituted.node, signature: letValueOrFunction.signature, type_: letValueOrFunction.type_}),
										range: letDeclarationAndRange.range
									},
									substitutions: fullSubstitutions,
									unchanged: false,
									updatedValueOrFunctionType: $elm$core$Maybe$Nothing
								};
							},
							A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, typeContext, parametersSubstituted.substitutions, resultSubstituted.substitutions))) : A2(
							$elm$core$Result$map,
							function (fullSubstitutions) {
								return {
									node: {
										declaration: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetValueOrFunctionDeclaration(
											{name: letValueOrFunction.name, nameRange: letValueOrFunction.nameRange, parameters: parametersSubstituted.nodes, result: resultSubstituted.node, signature: letValueOrFunction.signature, type_: typeSubstituted.type_}),
										range: letDeclarationAndRange.range
									},
									substitutions: fullSubstitutions,
									unchanged: false,
									updatedValueOrFunctionType: $elm$core$Maybe$Just(
										{name: letValueOrFunction.name, range: letDeclarationAndRange.range, type_: typeSubstituted.type_})
								};
							},
							A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, typeContext, parametersSubstituted.substitutions, resultSubstituted.substitutions));
					}),
				A3(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue,
					F2(
						function (parameterNode, soFar) {
							return A2(
								$elm$core$Result$andThen,
								function (parameterSubstituted) {
									return parameterSubstituted.unchanged ? $elm$core$Result$Ok(
										{
											allUnchanged: soFar.allUnchanged,
											nodes: A2($elm$core$List$cons, parameterNode, soFar.nodes),
											substitutions: soFar.substitutions
										}) : A2(
										$elm$core$Result$map,
										function (fullSubstitutions) {
											return {
												allUnchanged: false,
												nodes: A2($elm$core$List$cons, parameterSubstituted.node, soFar.nodes),
												substitutions: fullSubstitutions
											};
										},
										A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, typeContext, soFar.substitutions, parameterSubstituted.substitutions));
								},
								A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType, declarationTypes, replacement, parameterNode));
						}),
					letValueOrFunction.parameters),
				A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, letValueOrFunction.result),
				A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType, typeContext, replacement, letValueOrFunction.type_));
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsIsNone = function (substitutions) {
	var _v0 = substitutions.equivalentVariables;
	if (_v0.b) {
		return false;
	} else {
		return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$isEmpty(substitutions.variableToType);
	}
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$annotatedValueOrFunctionDeclarationApplyVariableSubstitutions = F3(
	function (context, substitutionsToApply, valueOrFunctionDeclarationInfoOriginal) {
		annotatedValueOrFunctionDeclarationApplyVariableSubstitutions:
		while (true) {
			if ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsIsNone(substitutionsToApply)) {
				return $elm$core$Result$Ok(valueOrFunctionDeclarationInfoOriginal);
			} else {
				var _v0 = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$createBatchOfSubstitutionsToApply, context, substitutionsToApply);
				if (_v0.$ === 'Err') {
					var error = _v0.a;
					return $elm$core$Result$Err(error);
				} else {
					var batchOfSubstitutionsToApply = _v0.a;
					var _v1 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType, context, batchOfSubstitutionsToApply.substituteVariableByType, valueOrFunctionDeclarationInfoOriginal.type_);
					if (_v1.$ === 'Err') {
						var error = _v1.a;
						return $elm$core$Result$Err(error);
					} else {
						var typeSubstituted = _v1.a;
						var _v2 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, context.declarationTypes, batchOfSubstitutionsToApply.substituteVariableByType, valueOrFunctionDeclarationInfoOriginal.result);
						if (_v2.$ === 'Err') {
							var error = _v2.a;
							return $elm$core$Result$Err(error);
						} else {
							var resultSubstituted = _v2.a;
							var _v3 = A3(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue,
								F2(
									function (parameterInferred, parametersSubstitutedSoFar) {
										return A2(
											$elm$core$Result$andThen,
											function (parameterSubstituted) {
												return parameterSubstituted.unchanged ? $elm$core$Result$Ok(
													{
														allUnchanged: parametersSubstitutedSoFar.allUnchanged,
														nodes: A2($elm$core$List$cons, parameterInferred, parametersSubstitutedSoFar.nodes),
														substitutions: parametersSubstitutedSoFar.substitutions
													}) : A2(
													$elm$core$Result$map,
													function (substitutionsSoFarWithParameter) {
														return {
															allUnchanged: false,
															nodes: A2($elm$core$List$cons, parameterSubstituted.node, parametersSubstitutedSoFar.nodes),
															substitutions: substitutionsSoFarWithParameter
														};
													},
													A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, parametersSubstitutedSoFar.substitutions, parameterSubstituted.substitutions));
											},
											A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType, context.declarationTypes, batchOfSubstitutionsToApply.substituteVariableByType, parameterInferred));
									}),
								valueOrFunctionDeclarationInfoOriginal.parameters);
							if (_v3.$ === 'Err') {
								var error = _v3.a;
								return $elm$core$Result$Err(error);
							} else {
								var parametersSubstituted = _v3.a;
								if (resultSubstituted.unchanged && (typeSubstituted.unchanged && parametersSubstituted.allUnchanged)) {
									return $elm$core$Result$Ok(valueOrFunctionDeclarationInfoOriginal);
								} else {
									var _v4 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, resultSubstituted.substitutions, parametersSubstituted.substitutions);
									if (_v4.$ === 'Err') {
										var error = _v4.a;
										return $elm$core$Result$Err(error);
									} else {
										var newResultParametersSubstitutions = _v4.a;
										var _v5 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariableSetMergeIntoVariableSubstitutionsWithVariableToType, newResultParametersSubstitutions.variableToType, newResultParametersSubstitutions.equivalentVariables, batchOfSubstitutionsToApply.newEquivalentVariables);
										if (_v5.$ === 'Err') {
											var error = _v5.a;
											return $elm$core$Result$Err(error);
										} else {
											var newSubstitutions = _v5.a;
											var $temp$context = context,
												$temp$substitutionsToApply = newSubstitutions,
												$temp$valueOrFunctionDeclarationInfoOriginal = {documentation: valueOrFunctionDeclarationInfoOriginal.documentation, name: valueOrFunctionDeclarationInfoOriginal.name, nameRange: valueOrFunctionDeclarationInfoOriginal.nameRange, parameters: parametersSubstituted.nodes, result: resultSubstituted.node, signature: valueOrFunctionDeclarationInfoOriginal.signature, type_: typeSubstituted.type_};
											context = $temp$context;
											substitutionsToApply = $temp$substitutionsToApply;
											valueOrFunctionDeclarationInfoOriginal = $temp$valueOrFunctionDeclarationInfoOriginal;
											continue annotatedValueOrFunctionDeclarationApplyVariableSubstitutions;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$Base10 = {$: 'Base10'};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$Base16 = {$: 'Base16'};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionChar = function (a) {
	return {$: 'ExpressionChar', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionFloat = function (a) {
	return {$: 'ExpressionFloat', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionInteger = function (a) {
	return {$: 'ExpressionInteger', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionOperatorFunction = function (a) {
	return {$: 'ExpressionOperatorFunction', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecordAccessFunction = function (a) {
	return {$: 'ExpressionRecordAccessFunction', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionString = function (a) {
	return {$: 'ExpressionString', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionUnit = {$: 'ExpressionUnit'};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$annotatedLetValueOrFunctionDeclarationApplyVariableSubstitutions = F3(
	function (context, substitutionsToApply, valueOrFunctionDeclarationInfoOriginal) {
		annotatedLetValueOrFunctionDeclarationApplyVariableSubstitutions:
		while (true) {
			if ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsIsNone(substitutionsToApply)) {
				return $elm$core$Result$Ok(valueOrFunctionDeclarationInfoOriginal);
			} else {
				var _v0 = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$createBatchOfSubstitutionsToApply, context, substitutionsToApply);
				if (_v0.$ === 'Err') {
					var error = _v0.a;
					return $elm$core$Result$Err(error);
				} else {
					var batchOfSubstitutionsToApply = _v0.a;
					var _v1 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType, context, batchOfSubstitutionsToApply.substituteVariableByType, valueOrFunctionDeclarationInfoOriginal.type_);
					if (_v1.$ === 'Err') {
						var error = _v1.a;
						return $elm$core$Result$Err(error);
					} else {
						var typeSubstituted = _v1.a;
						var _v2 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, context.declarationTypes, batchOfSubstitutionsToApply.substituteVariableByType, valueOrFunctionDeclarationInfoOriginal.result);
						if (_v2.$ === 'Err') {
							var error = _v2.a;
							return $elm$core$Result$Err(error);
						} else {
							var resultSubstituted = _v2.a;
							var _v3 = A3(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue,
								F2(
									function (parameterInferred, parametersSubstitutedSoFar) {
										return A2(
											$elm$core$Result$andThen,
											function (parameterSubstituted) {
												return parameterSubstituted.unchanged ? $elm$core$Result$Ok(
													{
														allUnchanged: parametersSubstitutedSoFar.allUnchanged,
														nodes: A2($elm$core$List$cons, parameterInferred, parametersSubstitutedSoFar.nodes),
														substitutions: parametersSubstitutedSoFar.substitutions
													}) : A2(
													$elm$core$Result$map,
													function (substitutionsSoFarWithParameter) {
														return {
															allUnchanged: false,
															nodes: A2($elm$core$List$cons, parameterSubstituted.node, parametersSubstitutedSoFar.nodes),
															substitutions: substitutionsSoFarWithParameter
														};
													},
													A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, parametersSubstitutedSoFar.substitutions, parameterSubstituted.substitutions));
											},
											A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType, context.declarationTypes, batchOfSubstitutionsToApply.substituteVariableByType, parameterInferred));
									}),
								valueOrFunctionDeclarationInfoOriginal.parameters);
							if (_v3.$ === 'Err') {
								var error = _v3.a;
								return $elm$core$Result$Err(error);
							} else {
								var parametersSubstituted = _v3.a;
								if (resultSubstituted.unchanged && (typeSubstituted.unchanged && parametersSubstituted.allUnchanged)) {
									return $elm$core$Result$Ok(valueOrFunctionDeclarationInfoOriginal);
								} else {
									var _v4 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, resultSubstituted.substitutions, parametersSubstituted.substitutions);
									if (_v4.$ === 'Err') {
										var error = _v4.a;
										return $elm$core$Result$Err(error);
									} else {
										var newResultParametersSubstitutions = _v4.a;
										var _v5 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariableSetMergeIntoVariableSubstitutionsWithVariableToType, newResultParametersSubstitutions.variableToType, newResultParametersSubstitutions.equivalentVariables, batchOfSubstitutionsToApply.newEquivalentVariables);
										if (_v5.$ === 'Err') {
											var error = _v5.a;
											return $elm$core$Result$Err(error);
										} else {
											var newSubstitutions = _v5.a;
											var $temp$context = context,
												$temp$substitutionsToApply = newSubstitutions,
												$temp$valueOrFunctionDeclarationInfoOriginal = {name: valueOrFunctionDeclarationInfoOriginal.name, nameRange: valueOrFunctionDeclarationInfoOriginal.nameRange, parameters: parametersSubstituted.nodes, result: resultSubstituted.node, signature: valueOrFunctionDeclarationInfoOriginal.signature, type_: typeSubstituted.type_};
											context = $temp$context;
											substitutionsToApply = $temp$substitutionsToApply;
											valueOrFunctionDeclarationInfoOriginal = $temp$valueOrFunctionDeclarationInfoOriginal;
											continue annotatedLetValueOrFunctionDeclarationApplyVariableSubstitutions;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionReference = function (a) {
	return {$: 'ExpressionReference', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionReferenceRecordTypeAliasConstructorFunction = function (a) {
	return {$: 'ExpressionReferenceRecordTypeAliasConstructorFunction', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionReferenceVariant = function (a) {
	return {$: 'ExpressionReferenceVariant', a: a};
};
var $miniBill$elm_fast_dict$FastDict$Stop = function (a) {
	return {$: 'Stop', a: a};
};
var $miniBill$elm_fast_dict$FastDict$Continue = function (a) {
	return {$: 'Continue', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictContinueNothing = $miniBill$elm_fast_dict$FastDict$Continue($elm$core$Maybe$Nothing);
var $miniBill$elm_fast_dict$FastDict$stoppableFoldlInner = F3(
	function (func, acc, dict) {
		stoppableFoldlInner:
		while (true) {
			if (dict.$ === 'Leaf') {
				return $miniBill$elm_fast_dict$FastDict$Continue(acc);
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A3($miniBill$elm_fast_dict$FastDict$stoppableFoldlInner, func, acc, left);
				if (_v1.$ === 'Continue') {
					var lacc = _v1.a;
					var _v2 = A3(func, key, value, lacc);
					if (_v2.$ === 'Continue') {
						var vacc = _v2.a;
						var $temp$func = func,
							$temp$acc = vacc,
							$temp$dict = right;
						func = $temp$func;
						acc = $temp$acc;
						dict = $temp$dict;
						continue stoppableFoldlInner;
					} else {
						var vacc = _v2.a;
						return $miniBill$elm_fast_dict$FastDict$Stop(vacc);
					}
				} else {
					var lacc = _v1.a;
					return $miniBill$elm_fast_dict$FastDict$Stop(lacc);
				}
			}
		}
	});
var $miniBill$elm_fast_dict$FastDict$stoppableFoldl = F3(
	function (func, acc, _v0) {
		var dict = _v0.b;
		var _v1 = A3($miniBill$elm_fast_dict$FastDict$stoppableFoldlInner, func, acc, dict);
		if (_v1.$ === 'Continue') {
			var res = _v1.a;
			return res;
		} else {
			var res = _v1.a;
			return res;
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictMapAndSmallestJust = F2(
	function (keyValueToMaybe, fastDict) {
		return A3(
			$miniBill$elm_fast_dict$FastDict$stoppableFoldl,
			F3(
				function (key, value, _v0) {
					var _v1 = A2(keyValueToMaybe, key, value);
					if (_v1.$ === 'Just') {
						var foldedWithEntry = _v1.a;
						return $miniBill$elm_fast_dict$FastDict$Stop(
							$elm$core$Maybe$Just(foldedWithEntry));
					} else {
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictContinueNothing;
					}
				}),
			$elm$core$Maybe$Nothing,
			fastDict);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionReferenceTypeInfer = F2(
	function (context, expressionReference) {
		var useOfLocallyIntroducedExpressionVariablesOrLocallyIntroducedDeclaration = function () {
			var _v8 = expressionReference.qualification;
			if (_v8 === '') {
				var _v9 = A2($miniBill$elm_fast_dict$FastDict$get, expressionReference.name, context.locallyIntroducedExpressionVariables);
				if (_v9.$ === 'Just') {
					var locallyIntroducedExpressionVariableType = _v9.a;
					return $elm$core$Maybe$Just(
						{
							range: expressionReference.fullRange,
							type_: locallyIntroducedExpressionVariableType,
							value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionReference(
								{moduleOrigin: '', name: expressionReference.name, qualification: ''})
						});
				} else {
					var _v10 = A2($miniBill$elm_fast_dict$FastDict$get, expressionReference.name, context.locallyIntroducedDeclarationTypes);
					if (_v10.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var locallyIntroducedDeclarationType = _v10.a;
						return $elm$core$Maybe$Just(
							{
								range: expressionReference.fullRange,
								type_: A2(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables,
									function (partiallyInferredTypeVariable) {
										return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeIncludesRange, partiallyInferredTypeVariable.useRange, locallyIntroducedDeclarationType.range) ? {name: partiallyInferredTypeVariable.name, useRange: expressionReference.fullRange} : partiallyInferredTypeVariable;
									},
									locallyIntroducedDeclarationType.type_),
								value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionReference(
									{moduleOrigin: locallyIntroducedDeclarationType.moduleLevel, name: expressionReference.name, qualification: ''})
							});
					}
				}
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}();
		if (useOfLocallyIntroducedExpressionVariablesOrLocallyIntroducedDeclaration.$ === 'Just') {
			var inferred = useOfLocallyIntroducedExpressionVariablesOrLocallyIntroducedDeclaration.a;
			return $elm$core$Result$Ok(inferred);
		} else {
			var _v1 = A2(
				$elm$core$Maybe$andThen,
				function (inModuleLookup) {
					return A2($miniBill$elm_fast_dict$FastDict$get, expressionReference.name, inModuleLookup);
				},
				A2($miniBill$elm_fast_dict$FastDict$get, expressionReference.qualification, context.moduleOriginLookup.references));
			if (_v1.$ === 'Nothing') {
				return $elm$core$Result$Err(
					'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(expressionReference.fullRange) + (') ' + (' could not determine the module where the reference ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString(
						{name: expressionReference.name, qualification: expressionReference.qualification}) + ' was originally declared in. I\'m likely missing import information or don\'t know of some locally declared things.')))));
			} else {
				var moduleOrigin = _v1.a;
				var _v2 = A2($miniBill$elm_fast_dict$FastDict$get, moduleOrigin, context.declarationTypes);
				if (_v2.$ === 'Nothing') {
					return $elm$core$Result$Err(
						'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(expressionReference.fullRange) + (') ' + ('no declaration types found for the reference ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString(
							{name: expressionReference.name, qualification: expressionReference.qualification}) + ('. I looked for some in the module ' + moduleOrigin))))));
				} else {
					var originModuleDeclarationTypes = _v2.a;
					var _v3 = A2($miniBill$elm_fast_dict$FastDict$get, expressionReference.name, originModuleDeclarationTypes.signatures);
					if (_v3.$ === 'Just') {
						var signatureType = _v3.a;
						return $elm$core$Result$Ok(
							{
								range: expressionReference.fullRange,
								type_: A2(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables,
									function (variable) {
										return {name: variable.name, useRange: expressionReference.fullRange};
									},
									signatureType),
								value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionReference(
									{moduleOrigin: moduleOrigin, name: expressionReference.name, qualification: expressionReference.qualification})
							});
					} else {
						var _v4 = A2(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictMapAndSmallestJust,
							F2(
								function (choiceTypeName, choiceTypeInfo) {
									return A2(
										$elm$core$Maybe$map,
										function (variantValues) {
											return {choiceTypeName: choiceTypeName, choiceTypeParameters: choiceTypeInfo.parameters, variantValues: variantValues};
										},
										A2($miniBill$elm_fast_dict$FastDict$get, expressionReference.name, choiceTypeInfo.variants));
								}),
							originModuleDeclarationTypes.choiceTypes);
						if (_v4.$ === 'Just') {
							var variant = _v4.a;
							return $elm$core$Result$Ok(
								{
									range: expressionReference.fullRange,
									type_: A3(
										$elm$core$List$foldr,
										F2(
											function (argument, output) {
												return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
														{
															input: A2(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables,
																function (variable) {
																	return {name: variable.name, useRange: expressionReference.fullRange};
																},
																argument),
															output: output
														}));
											}),
										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
												{
													_arguments: A2(
														$elm$core$List$map,
														function (parameter) {
															return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																{name: parameter, useRange: expressionReference.fullRange});
														},
														variant.choiceTypeParameters),
													moduleOrigin: moduleOrigin,
													name: variant.choiceTypeName
												})),
										variant.variantValues),
									value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionReferenceVariant(
										{choiceTypeName: variant.choiceTypeName, moduleOrigin: moduleOrigin, name: expressionReference.name, qualification: expressionReference.qualification})
								});
						} else {
							var _v5 = A2($miniBill$elm_fast_dict$FastDict$get, expressionReference.name, originModuleDeclarationTypes.typeAliases);
							if (_v5.$ === 'Nothing') {
								return $elm$core$Result$Err(
									'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(expressionReference.fullRange) + (') ' + ('no value/function/port/variant/record type alias constructor found in the origin module of the reference ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString(
										{name: expressionReference.name, qualification: moduleOrigin})))));
							} else {
								var originTypeAliasDeclaration = _v5.a;
								var _v6 = _Utils_Tuple2(originTypeAliasDeclaration.recordFieldOrder, originTypeAliasDeclaration.type_);
								if (((_v6.a.$ === 'Just') && (_v6.b.$ === 'TypeNotVariable')) && (_v6.b.a.$ === 'TypeRecord')) {
									var fieldOrder = _v6.a.a;
									var fields = _v6.b.a.a;
									return $elm$core$Result$Ok(
										{
											range: expressionReference.fullRange,
											type_: A3(
												$elm$core$List$foldr,
												F2(
													function (fieldName, outputTypeSoFar) {
														var _v7 = A2($miniBill$elm_fast_dict$FastDict$get, fieldName, fields);
														if (_v7.$ === 'Nothing') {
															return outputTypeSoFar;
														} else {
															var fieldValueType = _v7.a;
															return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																	{
																		input: A2(
																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables,
																			function (variable) {
																				return {name: variable.name, useRange: expressionReference.fullRange};
																			},
																			fieldValueType),
																		output: outputTypeSoFar
																	}));
														}
													}),
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
														{
															_arguments: A2(
																$elm$core$List$map,
																function (parameterName) {
																	return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
																		{name: parameterName, useRange: expressionReference.fullRange});
																},
																originTypeAliasDeclaration.parameters),
															moduleOrigin: moduleOrigin,
															name: expressionReference.name
														})),
												fieldOrder),
											value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionReferenceRecordTypeAliasConstructorFunction(
												{moduleOrigin: moduleOrigin, name: expressionReference.name, qualification: expressionReference.qualification})
										});
								} else {
									return $elm$core$Result$Err(
										'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(expressionReference.fullRange) + (') ' + ('I found a type alias with the same name as the reference ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString(
											{name: expressionReference.name, qualification: moduleOrigin}) + ', so I thought you are constructing a record. However, I was unable to determine which arguments correspond to which fields')))));
								}
							}
						}
					}
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions = F3(
	function (declarationTypes, substitutions, expressionTypedNode) {
		expressionTypedNodeApplyVariableSubstitutions:
		while (true) {
			if ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsIsNone(substitutions)) {
				return $elm$core$Result$Ok(expressionTypedNode);
			} else {
				var _v0 = A2(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$createBatchOfSubstitutionsToApply,
					{declarationTypes: declarationTypes, range: expressionTypedNode.range},
					substitutions);
				if (_v0.$ === 'Err') {
					var error = _v0.a;
					return $elm$core$Result$Err(error);
				} else {
					var batchOfSubstitutionsToApply = _v0.a;
					var _v1 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, batchOfSubstitutionsToApply.substituteVariableByType, expressionTypedNode);
					if (_v1.$ === 'Err') {
						var error = _v1.a;
						return $elm$core$Result$Err(error);
					} else {
						var substitutedExpressionTypedNode = _v1.a;
						if (substitutedExpressionTypedNode.unchanged) {
							return $elm$core$Result$Ok(expressionTypedNode);
						} else {
							var _v2 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariableSetMergeIntoVariableSubstitutionsWithVariableToType, substitutedExpressionTypedNode.substitutions.variableToType, substitutedExpressionTypedNode.substitutions.equivalentVariables, batchOfSubstitutionsToApply.newEquivalentVariables);
							if (_v2.$ === 'Err') {
								var error = _v2.a;
								return $elm$core$Result$Err(error);
							} else {
								var withNewEquivalentVariables = _v2.a;
								var $temp$declarationTypes = declarationTypes,
									$temp$substitutions = withNewEquivalentVariables,
									$temp$expressionTypedNode = substitutedExpressionTypedNode.node;
								declarationTypes = $temp$declarationTypes;
								substitutions = $temp$substitutions;
								expressionTypedNode = $temp$expressionTypedNode;
								continue expressionTypedNodeApplyVariableSubstitutions;
							}
						}
					}
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionReferenceLetDeclaredUnifyWithTypeInstanceSubstitutions = F3(
	function (context, newLetDeclaredTypes, expressionReferenceLetDeclared) {
		var _v0 = expressionReferenceLetDeclared.moduleOrigin;
		if (_v0 === '') {
			var _v1 = A2($miniBill$elm_fast_dict$FastDict$get, expressionReferenceLetDeclared.name, newLetDeclaredTypes);
			if (_v1.$ === 'Nothing') {
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
			} else {
				var newLetDeclared = _v1.a;
				return A2(
					$elm$core$Result$map,
					function (useUnifiedWithNewLetTypeInstance) {
						return A2(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typesAreEquallyStrict,
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(useUnifiedWithNewLetTypeInstance.type_),
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(expressionReferenceLetDeclared.type_)) ? {equivalentVariables: useUnifiedWithNewLetTypeInstance.substitutions.equivalentVariables, variableToType: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty} : useUnifiedWithNewLetTypeInstance.substitutions;
					},
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify,
						context,
						expressionReferenceLetDeclared.type_,
						A2(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables,
							function (letDeclaredTypeVariable) {
								return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeIncludesRange, letDeclaredTypeVariable.useRange, newLetDeclared.range) ? {name: letDeclaredTypeVariable.name, useRange: expressionReferenceLetDeclared.range} : letDeclaredTypeVariable;
							},
							newLetDeclared.type_)));
			}
		} else {
			return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDestructuringExpressionRightOfEquals = function (letDeclaration) {
	if (letDeclaration.$ === 'LetDestructuring') {
		var letDestructuring = letDeclaration.a;
		return letDestructuring.expression;
	} else {
		var letValueOrFunctionDeclaration = letDeclaration.a;
		return letValueOrFunctionDeclaration.result;
	}
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult = F3(
	function (initialResult, reduceOnOk, list) {
		if (initialResult.$ === 'Err') {
			var error = initialResult.a;
			return $elm$core$Result$Err(error);
		} else {
			var initialOkFolded = initialResult.a;
			return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom, initialOkFolded, reduceOnOk, list);
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions = F3(
	function (context, newLetDeclaredTypes, expressionTypedNode) {
		expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions:
		while (true) {
			var _v0 = expressionTypedNode.value;
			switch (_v0.$) {
				case 'ExpressionUnit':
					return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
				case 'ExpressionInteger':
					return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
				case 'ExpressionFloat':
					return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
				case 'ExpressionString':
					return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
				case 'ExpressionChar':
					return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
				case 'ExpressionReferenceVariant':
					return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
				case 'ExpressionReferenceRecordTypeAliasConstructorFunction':
					return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
				case 'ExpressionOperatorFunction':
					return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
				case 'ExpressionRecordAccessFunction':
					return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
				case 'ExpressionReference':
					var reference = _v0.a;
					return A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionReferenceLetDeclaredUnifyWithTypeInstanceSubstitutions,
						context,
						newLetDeclaredTypes,
						{moduleOrigin: reference.moduleOrigin, name: reference.name, range: expressionTypedNode.range, type_: expressionTypedNode.type_});
				case 'ExpressionNegation':
					var negated = _v0.a;
					var $temp$context = context,
						$temp$newLetDeclaredTypes = newLetDeclaredTypes,
						$temp$expressionTypedNode = negated;
					context = $temp$context;
					newLetDeclaredTypes = $temp$newLetDeclaredTypes;
					expressionTypedNode = $temp$expressionTypedNode;
					continue expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions;
				case 'ExpressionParenthesized':
					var inParens = _v0.a;
					var $temp$context = context,
						$temp$newLetDeclaredTypes = newLetDeclaredTypes,
						$temp$expressionTypedNode = inParens;
					context = $temp$context;
					newLetDeclaredTypes = $temp$newLetDeclaredTypes;
					expressionTypedNode = $temp$expressionTypedNode;
					continue expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions;
				case 'ExpressionRecordAccess':
					var expressionRecordAccess = _v0.a;
					var $temp$context = context,
						$temp$newLetDeclaredTypes = newLetDeclaredTypes,
						$temp$expressionTypedNode = expressionRecordAccess.record;
					context = $temp$context;
					newLetDeclaredTypes = $temp$newLetDeclaredTypes;
					expressionTypedNode = $temp$expressionTypedNode;
					continue expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions;
				case 'ExpressionLambda':
					var expressionLambda = _v0.a;
					var $temp$context = context,
						$temp$newLetDeclaredTypes = newLetDeclaredTypes,
						$temp$expressionTypedNode = expressionLambda.result;
					context = $temp$context;
					newLetDeclaredTypes = $temp$newLetDeclaredTypes;
					expressionTypedNode = $temp$expressionTypedNode;
					continue expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions;
				case 'ExpressionInfixOperation':
					var expressionInfixOperation = _v0.a;
					return A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
						F2(
							function (leftSubstitutions, rightSubstitutions) {
								return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, leftSubstitutions, rightSubstitutions);
							}),
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions, context, newLetDeclaredTypes, expressionInfixOperation.left),
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions, context, newLetDeclaredTypes, expressionInfixOperation.right));
				case 'ExpressionTuple':
					var parts = _v0.a;
					return A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
						F2(
							function (part0Substitutions, part1Substitutions) {
								return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, part0Substitutions, part1Substitutions);
							}),
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions, context, newLetDeclaredTypes, parts.part0),
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions, context, newLetDeclaredTypes, parts.part1));
				case 'ExpressionTriple':
					var parts = _v0.a;
					return A4(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3,
						F3(
							function (part0Substitutions, part1Substitutions, part2Substitutions) {
								return A4($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3, context, part0Substitutions, part1Substitutions, part2Substitutions);
							}),
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions, context, newLetDeclaredTypes, parts.part0),
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions, context, newLetDeclaredTypes, parts.part1),
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions, context, newLetDeclaredTypes, parts.part2));
				case 'ExpressionIfThenElse':
					var expressionIfThenElse = _v0.a;
					return A4(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3,
						F3(
							function (part0Substitutions, part1Substitutions, part2Substitutions) {
								return A4($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3, context, part0Substitutions, part1Substitutions, part2Substitutions);
							}),
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions, context, newLetDeclaredTypes, expressionIfThenElse.condition),
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions, context, newLetDeclaredTypes, expressionIfThenElse.onTrue),
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions, context, newLetDeclaredTypes, expressionIfThenElse.onFalse));
				case 'ExpressionList':
					var elements = _v0.a;
					if (!elements.b) {
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
					} else {
						var head = elements.a;
						var tail = elements.b;
						return A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult,
							A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions, context, newLetDeclaredTypes, head),
							F2(
								function (element, soFar) {
									return A2(
										$elm$core$Result$andThen,
										function (elementSubstitutions) {
											return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, soFar, elementSubstitutions);
										},
										A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions, context, newLetDeclaredTypes, element));
								}),
							tail);
					}
				case 'ExpressionRecord':
					var fields = _v0.a;
					if (!fields.b) {
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
					} else {
						var field0 = fields.a;
						var field1Up = fields.b;
						return A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult,
							A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions, context, newLetDeclaredTypes, field0.value),
							F2(
								function (field, soFar) {
									return A2(
										$elm$core$Result$andThen,
										function (fieldValueSubstitutions) {
											return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, soFar, fieldValueSubstitutions);
										},
										A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions, context, newLetDeclaredTypes, field.value));
								}),
							field1Up);
					}
				case 'ExpressionCall':
					var expressionCall = _v0.a;
					return A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
						F2(
							function (calledSubstitutions, argument0Substitutions) {
								return A3(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult,
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, calledSubstitutions, argument0Substitutions),
									F2(
										function (argument, soFar) {
											return A2(
												$elm$core$Result$andThen,
												function (argumentSubstitutions) {
													return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, soFar, argumentSubstitutions);
												},
												A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions, context, newLetDeclaredTypes, argument));
										}),
									expressionCall.argument1Up);
							}),
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions, context, newLetDeclaredTypes, expressionCall.called),
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions, context, newLetDeclaredTypes, expressionCall.argument0));
				case 'ExpressionRecordUpdate':
					var expressionRecordUpdate = _v0.a;
					return A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
						F2(
							function (recordVariableSubstitutions, fieldValue0Substitutions) {
								return A3(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult,
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, recordVariableSubstitutions, fieldValue0Substitutions),
									F2(
										function (field, soFar) {
											return A2(
												$elm$core$Result$andThen,
												function (fieldValueSubstitutions) {
													return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, soFar, fieldValueSubstitutions);
												},
												A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions, context, newLetDeclaredTypes, field.value));
										}),
									expressionRecordUpdate.field1Up);
							}),
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions, context, newLetDeclaredTypes, expressionRecordUpdate.field0.value),
						A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionReferenceLetDeclaredUnifyWithTypeInstanceSubstitutions,
							context,
							newLetDeclaredTypes,
							{moduleOrigin: expressionRecordUpdate.recordVariable.value.moduleOrigin, name: expressionRecordUpdate.recordVariable.value.name, range: expressionRecordUpdate.recordVariable.range, type_: expressionRecordUpdate.recordVariable.type_}));
				case 'ExpressionCaseOf':
					var expressionCaseOf = _v0.a;
					return A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
						F2(
							function (matchedSubstitutions, case0ResultSubstitutions) {
								return A3(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult,
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, matchedSubstitutions, case0ResultSubstitutions),
									F2(
										function (case_, soFar) {
											return A2(
												$elm$core$Result$andThen,
												function (caseResultSubstitutions) {
													return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, soFar, caseResultSubstitutions);
												},
												A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions, context, newLetDeclaredTypes, case_.result));
										}),
									expressionCaseOf.case1Up);
							}),
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions, context, newLetDeclaredTypes, expressionCaseOf.matched),
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions, context, newLetDeclaredTypes, expressionCaseOf.case0.result));
				default:
					var expressionLetIn = _v0.a;
					return A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
						F2(
							function (declarationsSubstitutions, resultSubstitutions) {
								return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, declarationsSubstitutions, resultSubstitutions);
							}),
						A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult,
							A3(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions,
								context,
								newLetDeclaredTypes,
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDestructuringExpressionRightOfEquals(expressionLetIn.declaration0.declaration)),
							F2(
								function (declarationNode, soFar) {
									return A2(
										$elm$core$Result$andThen,
										function (declarationSubstitutions) {
											return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, soFar, declarationSubstitutions);
										},
										A3(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions,
											context,
											newLetDeclaredTypes,
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDestructuringExpressionRightOfEquals(declarationNode.declaration)));
								}),
							expressionLetIn.declaration1Up),
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions, context, newLetDeclaredTypes, expressionLetIn.result));
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$andExpressionTypedNodeUnifyUsesOfLocalReferences = F3(
	function (context, nextExpressionTypedNode, soFarUsesUnified) {
		return A2(
			$elm$core$Result$andThen,
			function (withNextUsesUnified) {
				return A2(
					$elm$core$Result$map,
					function (withNextSubstitutions) {
						return {substitutions: withNextSubstitutions, unifiedTypes: withNextUsesUnified.unifiedTypes};
					},
					A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, soFarUsesUnified.substitutions, withNextUsesUnified.substitutions));
			},
			A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences, context, soFarUsesUnified.unifiedTypes, nextExpressionTypedNode));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences = F3(
	function (context, unifiedTypesSoFar, expressionTypedNode) {
		expressionTypedNodeUnifyUsesOfLocalReferences:
		while (true) {
			var _v0 = expressionTypedNode.value;
			switch (_v0.$) {
				case 'ExpressionUnit':
					return $elm$core$Result$Ok(
						{substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unifiedTypes: unifiedTypesSoFar});
				case 'ExpressionInteger':
					return $elm$core$Result$Ok(
						{substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unifiedTypes: unifiedTypesSoFar});
				case 'ExpressionFloat':
					return $elm$core$Result$Ok(
						{substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unifiedTypes: unifiedTypesSoFar});
				case 'ExpressionString':
					return $elm$core$Result$Ok(
						{substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unifiedTypes: unifiedTypesSoFar});
				case 'ExpressionChar':
					return $elm$core$Result$Ok(
						{substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unifiedTypes: unifiedTypesSoFar});
				case 'ExpressionReferenceVariant':
					return $elm$core$Result$Ok(
						{substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unifiedTypes: unifiedTypesSoFar});
				case 'ExpressionReferenceRecordTypeAliasConstructorFunction':
					return $elm$core$Result$Ok(
						{substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unifiedTypes: unifiedTypesSoFar});
				case 'ExpressionOperatorFunction':
					return $elm$core$Result$Ok(
						{substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unifiedTypes: unifiedTypesSoFar});
				case 'ExpressionRecordAccessFunction':
					return $elm$core$Result$Ok(
						{substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unifiedTypes: unifiedTypesSoFar});
				case 'ExpressionReference':
					var reference = _v0.a;
					var _v1 = reference.moduleOrigin;
					if (_v1 === '') {
						var _v2 = A2($miniBill$elm_fast_dict$FastDict$get, reference.name, unifiedTypesSoFar);
						if (_v2.$ === 'Nothing') {
							return $elm$core$Result$Ok(
								{substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unifiedTypes: unifiedTypesSoFar});
						} else {
							var unifiedTypeWithSameNameSoFar = _v2.a;
							return A2(
								$elm$core$Result$map,
								function (unifiedTypeSoFarWithReference) {
									return {
										substitutions: unifiedTypeSoFarWithReference.substitutions,
										unifiedTypes: A3($miniBill$elm_fast_dict$FastDict$insert, reference.name, unifiedTypeSoFarWithReference.type_, unifiedTypesSoFar)
									};
								},
								A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, context, unifiedTypeWithSameNameSoFar, expressionTypedNode.type_));
						}
					} else {
						return $elm$core$Result$Ok(
							{substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unifiedTypes: unifiedTypesSoFar});
					}
				case 'ExpressionNegation':
					var negated = _v0.a;
					var $temp$context = context,
						$temp$unifiedTypesSoFar = unifiedTypesSoFar,
						$temp$expressionTypedNode = negated;
					context = $temp$context;
					unifiedTypesSoFar = $temp$unifiedTypesSoFar;
					expressionTypedNode = $temp$expressionTypedNode;
					continue expressionTypedNodeUnifyUsesOfLocalReferences;
				case 'ExpressionParenthesized':
					var inParens = _v0.a;
					var $temp$context = context,
						$temp$unifiedTypesSoFar = unifiedTypesSoFar,
						$temp$expressionTypedNode = inParens;
					context = $temp$context;
					unifiedTypesSoFar = $temp$unifiedTypesSoFar;
					expressionTypedNode = $temp$expressionTypedNode;
					continue expressionTypedNodeUnifyUsesOfLocalReferences;
				case 'ExpressionRecordAccess':
					var expressionRecordAccess = _v0.a;
					var $temp$context = context,
						$temp$unifiedTypesSoFar = unifiedTypesSoFar,
						$temp$expressionTypedNode = expressionRecordAccess.record;
					context = $temp$context;
					unifiedTypesSoFar = $temp$unifiedTypesSoFar;
					expressionTypedNode = $temp$expressionTypedNode;
					continue expressionTypedNodeUnifyUsesOfLocalReferences;
				case 'ExpressionLambda':
					var expressionLambda = _v0.a;
					var $temp$context = context,
						$temp$unifiedTypesSoFar = unifiedTypesSoFar,
						$temp$expressionTypedNode = expressionLambda.result;
					context = $temp$context;
					unifiedTypesSoFar = $temp$unifiedTypesSoFar;
					expressionTypedNode = $temp$expressionTypedNode;
					continue expressionTypedNodeUnifyUsesOfLocalReferences;
				case 'ExpressionInfixOperation':
					var expressionInfixOperation = _v0.a;
					return A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndExpressionTypedNodeUnifyUsesOfLocalReferences,
						context,
						expressionInfixOperation.right,
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences, context, unifiedTypesSoFar, expressionInfixOperation.left));
				case 'ExpressionTuple':
					var parts = _v0.a;
					return A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndExpressionTypedNodeUnifyUsesOfLocalReferences,
						context,
						parts.part1,
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences, context, unifiedTypesSoFar, parts.part0));
				case 'ExpressionTriple':
					var parts = _v0.a;
					return A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndExpressionTypedNodeUnifyUsesOfLocalReferences,
						context,
						parts.part2,
						A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndExpressionTypedNodeUnifyUsesOfLocalReferences,
							context,
							parts.part1,
							A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences, context, unifiedTypesSoFar, parts.part0)));
				case 'ExpressionIfThenElse':
					var expressionIfThenElse = _v0.a;
					return A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndExpressionTypedNodeUnifyUsesOfLocalReferences,
						context,
						expressionIfThenElse.onFalse,
						A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndExpressionTypedNodeUnifyUsesOfLocalReferences,
							context,
							expressionIfThenElse.onTrue,
							A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences, context, unifiedTypesSoFar, expressionIfThenElse.condition)));
				case 'ExpressionList':
					var elements = _v0.a;
					if (!elements.b) {
						return $elm$core$Result$Ok(
							{substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unifiedTypes: unifiedTypesSoFar});
					} else {
						var head = elements.a;
						var tail = elements.b;
						return A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult,
							A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences, context, unifiedTypesSoFar, head),
							F2(
								function (element, soFar) {
									return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$andExpressionTypedNodeUnifyUsesOfLocalReferences, context, element, soFar);
								}),
							tail);
					}
				case 'ExpressionRecord':
					var fields = _v0.a;
					if (!fields.b) {
						return $elm$core$Result$Ok(
							{substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unifiedTypes: unifiedTypesSoFar});
					} else {
						var field0 = fields.a;
						var field1Up = fields.b;
						return A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult,
							A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences, context, unifiedTypesSoFar, field0.value),
							F2(
								function (field, soFar) {
									return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$andExpressionTypedNodeUnifyUsesOfLocalReferences, context, field.value, soFar);
								}),
							field1Up);
					}
				case 'ExpressionCall':
					var expressionCall = _v0.a;
					return A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult,
						A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndExpressionTypedNodeUnifyUsesOfLocalReferences,
							context,
							expressionCall.argument0,
							A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences, context, unifiedTypesSoFar, expressionCall.called)),
						F2(
							function (argument, soFar) {
								return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$andExpressionTypedNodeUnifyUsesOfLocalReferences, context, argument, soFar);
							}),
						expressionCall.argument1Up);
				case 'ExpressionRecordUpdate':
					var expressionRecordUpdate = _v0.a;
					return A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult,
						A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndExpressionTypedNodeUnifyUsesOfLocalReferences,
							context,
							expressionRecordUpdate.field0.value,
							function () {
								var _v5 = expressionRecordUpdate.recordVariable.value.moduleOrigin;
								if (_v5 === '') {
									var _v6 = A2($miniBill$elm_fast_dict$FastDict$get, expressionRecordUpdate.recordVariable.value.name, unifiedTypesSoFar);
									if (_v6.$ === 'Nothing') {
										return $elm$core$Result$Ok(
											{substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unifiedTypes: unifiedTypesSoFar});
									} else {
										var unifiedTypeWithSameNameSoFar = _v6.a;
										return A2(
											$elm$core$Result$map,
											function (unifiedTypeSoFarWithReference) {
												return {
													substitutions: unifiedTypeSoFarWithReference.substitutions,
													unifiedTypes: A3($miniBill$elm_fast_dict$FastDict$insert, expressionRecordUpdate.recordVariable.value.name, unifiedTypeSoFarWithReference.type_, unifiedTypesSoFar)
												};
											},
											A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, context, unifiedTypeWithSameNameSoFar, expressionTypedNode.type_));
									}
								} else {
									return $elm$core$Result$Ok(
										{substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unifiedTypes: unifiedTypesSoFar});
								}
							}()),
						F2(
							function (field, soFar) {
								return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$andExpressionTypedNodeUnifyUsesOfLocalReferences, context, field.value, soFar);
							}),
						expressionRecordUpdate.field1Up);
				case 'ExpressionCaseOf':
					var expressionCaseOf = _v0.a;
					return A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult,
						A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndExpressionTypedNodeUnifyUsesOfLocalReferences,
							context,
							expressionCaseOf.case0.result,
							A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences, context, unifiedTypesSoFar, expressionCaseOf.matched)),
						F2(
							function (case_, soFar) {
								return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$andExpressionTypedNodeUnifyUsesOfLocalReferences, context, case_.result, soFar);
							}),
						expressionCaseOf.case1Up);
				default:
					var expressionLetIn = _v0.a;
					return A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndExpressionTypedNodeUnifyUsesOfLocalReferences,
						context,
						expressionLetIn.result,
						A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult,
							A3(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences,
								context,
								unifiedTypesSoFar,
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDestructuringExpressionRightOfEquals(expressionLetIn.declaration0.declaration)),
							F2(
								function (declarationNode, soFar) {
									return A3(
										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$andExpressionTypedNodeUnifyUsesOfLocalReferences,
										context,
										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDestructuringExpressionRightOfEquals(declarationNode.declaration),
										soFar);
								}),
							expressionLetIn.declaration1Up));
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndExpressionTypedNodeUnifyUsesOfLocalReferences = F3(
	function (context, nextExpressionTypedNode, soFarUsesUnifiedOrError) {
		return A2(
			$elm$core$Result$andThen,
			function (soFarUsesUnified) {
				return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$andExpressionTypedNodeUnifyUsesOfLocalReferences, context, nextExpressionTypedNode, soFarUsesUnified);
			},
			soFarUsesUnifiedOrError);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$infixOperationApproximateOperatorRange = function (infixOperation) {
	var operatorLength = $elm$core$String$length(infixOperation.operator);
	return (!(infixOperation.leftEnd.row - infixOperation.rightStart.row)) ? ((!((infixOperation.leftEnd.column + operatorLength) - infixOperation.rightStart.column)) ? {
		end: {column: infixOperation.rightStart.column, row: infixOperation.rightStart.row},
		start: {column: infixOperation.leftEnd.column, row: infixOperation.rightStart.row}
	} : {
		end: {column: infixOperation.rightStart.column - 1, row: infixOperation.rightStart.row},
		start: {column: (infixOperation.rightStart.column - 1) - operatorLength, row: infixOperation.rightStart.row}
	}) : {
		end: {column: infixOperation.rightStart.column - 1, row: infixOperation.rightStart.row},
		start: {column: (infixOperation.rightStart.column - 1) - operatorLength, row: infixOperation.rightStart.row}
	};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToFastDictsAndUnify = F2(
	function (elementToSet, elements) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (element, soFar) {
					return A2(
						$miniBill$elm_fast_dict$FastDict$union,
						soFar,
						elementToSet(element));
				}),
			$miniBill$elm_fast_dict$FastDict$empty,
			elements);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNoneUnifiedTypesDictEmpty = $elm$core$Result$Ok(
	{substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unifiedTypes: $miniBill$elm_fast_dict$FastDict$empty});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeConstructBasicsBool = {_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Bool'};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableBasicsBool = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeConstructBasicsBool);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableBasicsBool);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okAndOperatorInfo = $elm$core$Result$Ok(
	{leftType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool, moduleOrigin: 'Basics', resultType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool, rightType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsFloat = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
		{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Float'}));
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okFdivOperatorInfo = $elm$core$Result$Ok(
	{leftType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsFloat, moduleOrigin: 'Basics', resultType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsFloat, rightType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsFloat});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsInt = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
		{_arguments: _List_Nil, moduleOrigin: 'Basics', name: 'Int'}));
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okIdivOperatorInfo = $elm$core$Result$Ok(
	{leftType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsInt, moduleOrigin: 'Basics', resultType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsInt, rightType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsInt});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okOrOperatorInfo = $elm$core$Result$Ok(
	{leftType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool, moduleOrigin: 'Basics', resultType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool, rightType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserAdvancedParser = F3(
	function (context, problem, value) {
		return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
				{
					_arguments: _List_fromArray(
						[context, problem, value]),
					moduleOrigin: 'Parser.Advanced',
					name: 'Parser'
				}));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserParser = function (a) {
	return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
			{
				_arguments: _List_fromArray(
					[a]),
				moduleOrigin: 'Parser',
				name: 'Parser'
			}));
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUrlParserParser = F2(
	function (a, b) {
		return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
				{
					_arguments: _List_fromArray(
						[a, b]),
					moduleOrigin: 'Url.Parser',
					name: 'Parser'
				}));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUrlParserQueryParser = function (a) {
	return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
			{
				_arguments: _List_fromArray(
					[a]),
				moduleOrigin: 'Url.Parser.Query',
				name: 'Parser'
			}));
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$operatorFunctionType = F2(
	function (context, operator) {
		switch (operator) {
			case '|>':
				var b = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'b', useRange: context.range});
				var a = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'a', useRange: context.range});
				return $elm$core$Result$Ok(
					{
						leftType: a,
						moduleOrigin: 'Basics',
						resultType: b,
						rightType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
								{input: a, output: b}))
					});
			case '<|':
				var b = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'b', useRange: context.range});
				var a = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'a', useRange: context.range});
				return $elm$core$Result$Ok(
					{
						leftType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
								{input: a, output: b})),
						moduleOrigin: 'Basics',
						resultType: b,
						rightType: a
					});
			case '>>':
				var c = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'c', useRange: context.range});
				var b = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'b', useRange: context.range});
				var a = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'a', useRange: context.range});
				return $elm$core$Result$Ok(
					{
						leftType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
								{input: a, output: b})),
						moduleOrigin: 'Basics',
						resultType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
								{input: a, output: c})),
						rightType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
								{input: b, output: c}))
					});
			case '<<':
				var c = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'c', useRange: context.range});
				var b = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'b', useRange: context.range});
				var a = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'a', useRange: context.range});
				return $elm$core$Result$Ok(
					{
						leftType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
								{input: b, output: c})),
						moduleOrigin: 'Basics',
						resultType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
								{input: a, output: c})),
						rightType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
								{input: a, output: b}))
					});
			case '++':
				var appendable = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'appendable', useRange: context.range});
				return $elm$core$Result$Ok(
					{leftType: appendable, moduleOrigin: 'Basics', resultType: appendable, rightType: appendable});
			case '==':
				var equatable = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'equatable', useRange: context.range});
				return $elm$core$Result$Ok(
					{leftType: equatable, moduleOrigin: 'Basics', resultType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool, rightType: equatable});
			case '/=':
				var equatable = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'equatable', useRange: context.range});
				return $elm$core$Result$Ok(
					{leftType: equatable, moduleOrigin: 'Basics', resultType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool, rightType: equatable});
			case '::':
				var a = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'element', useRange: context.range});
				return $elm$core$Result$Ok(
					{
						leftType: a,
						moduleOrigin: 'List',
						resultType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeListList(a),
						rightType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeListList(a)
					});
			case '*':
				var number = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'number', useRange: context.range});
				return $elm$core$Result$Ok(
					{leftType: number, moduleOrigin: 'Basics', resultType: number, rightType: number});
			case '+':
				var number = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'number', useRange: context.range});
				return $elm$core$Result$Ok(
					{leftType: number, moduleOrigin: 'Basics', resultType: number, rightType: number});
			case '-':
				var number = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'number', useRange: context.range});
				return $elm$core$Result$Ok(
					{leftType: number, moduleOrigin: 'Basics', resultType: number, rightType: number});
			case '/':
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okFdivOperatorInfo;
			case '^':
				var number = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'number', useRange: context.range});
				return $elm$core$Result$Ok(
					{leftType: number, moduleOrigin: 'Basics', resultType: number, rightType: number});
			case '<=':
				var comparable = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'comparable', useRange: context.range});
				return $elm$core$Result$Ok(
					{leftType: comparable, moduleOrigin: 'Basics', resultType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool, rightType: comparable});
			case '>=':
				var comparable = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'comparable', useRange: context.range});
				return $elm$core$Result$Ok(
					{leftType: comparable, moduleOrigin: 'Basics', resultType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool, rightType: comparable});
			case '>':
				var comparable = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'comparable', useRange: context.range});
				return $elm$core$Result$Ok(
					{leftType: comparable, moduleOrigin: 'Basics', resultType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool, rightType: comparable});
			case '<':
				var comparable = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'comparable', useRange: context.range});
				return $elm$core$Result$Ok(
					{leftType: comparable, moduleOrigin: 'Basics', resultType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool, rightType: comparable});
			case '//':
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okIdivOperatorInfo;
			case '&&':
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okAndOperatorInfo;
			case '||':
				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okOrOperatorInfo;
			case '|.':
				return $elm$core$Result$Ok(
					function () {
						if (context.moduleOriginLookup.ignoreOperatorIsExposedFromParserAdvanced) {
							var varContext = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
								{name: 'context', useRange: context.range});
							var problem = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
								{name: 'problem', useRange: context.range});
							var keep = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
								{name: 'keep', useRange: context.range});
							var ignore = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
								{name: 'ignore', useRange: context.range});
							return {
								leftType: A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserAdvancedParser, varContext, problem, keep),
								moduleOrigin: 'Parser.Advanced',
								resultType: A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserAdvancedParser, varContext, problem, keep),
								rightType: A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserAdvancedParser, varContext, problem, ignore)
							};
						} else {
							var keep = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
								{name: 'keep', useRange: context.range});
							var ignore = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
								{name: 'ignore', useRange: context.range});
							return {
								leftType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserParser(keep),
								moduleOrigin: 'Parser',
								resultType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserParser(keep),
								rightType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserParser(ignore)
							};
						}
					}());
			case '|=':
				return $elm$core$Result$Ok(
					function () {
						if (context.moduleOriginLookup.keepOperatorIsExposedFromParserAdvanced) {
							var varContext = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
								{name: 'context', useRange: context.range});
							var problem = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
								{name: 'problem', useRange: context.range});
							var b = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
								{name: 'b', useRange: context.range});
							var a = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
								{name: 'a', useRange: context.range});
							return {
								leftType: A3(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserAdvancedParser,
									varContext,
									problem,
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
											{input: a, output: b}))),
								moduleOrigin: 'Parser.Advanced',
								resultType: A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserAdvancedParser, varContext, problem, b),
								rightType: A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserAdvancedParser, varContext, problem, a)
							};
						} else {
							var b = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
								{name: 'b', useRange: context.range});
							var a = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
								{name: 'a', useRange: context.range});
							return {
								leftType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserParser(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
											{input: a, output: b}))),
								moduleOrigin: 'Parser',
								resultType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserParser(b),
								rightType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserParser(a)
							};
						}
					}());
			case '</>':
				var c = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'c', useRange: context.range});
				var b = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'b', useRange: context.range});
				var a = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'a', useRange: context.range});
				return $elm$core$Result$Ok(
					{
						leftType: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUrlParserParser, a, b),
						moduleOrigin: 'Url.Parser',
						resultType: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUrlParserParser, a, c),
						rightType: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUrlParserParser, b, c)
					});
			case '<?>':
				var query = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'query', useRange: context.range});
				var b = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'b', useRange: context.range});
				var a = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{name: 'a', useRange: context.range});
				return $elm$core$Result$Ok(
					{
						leftType: A2(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUrlParserParser,
							a,
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{input: query, output: b}))),
						moduleOrigin: 'Url.Parser',
						resultType: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUrlParserParser, a, b),
						rightType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUrlParserQueryParser(query)
					});
			default:
				var unknownOperator = operator;
				return $elm$core$Result$Err(
					'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('unknown operator (' + (unknownOperator + ')')))));
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$introducedExpressionVariablesEmptyNodesEmpty = {introducedExpressionVariables: $miniBill$elm_fast_dict$FastDict$empty, nodes: _List_Nil};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternChar = function (a) {
	return {$: 'PatternChar', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternInt = function (a) {
	return {$: 'PatternInt', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternString = function (a) {
	return {$: 'PatternString', a: a};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternUnit = {$: 'PatternUnit'};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeApplyVariableSubstitutions = F3(
	function (declarationTypes, substitutions, patternTypedNode) {
		patternTypedNodeApplyVariableSubstitutions:
		while (true) {
			if ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsIsNone(substitutions)) {
				return $elm$core$Result$Ok(patternTypedNode);
			} else {
				var _v0 = A2(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$createBatchOfSubstitutionsToApply,
					{declarationTypes: declarationTypes, range: patternTypedNode.range},
					substitutions);
				if (_v0.$ === 'Err') {
					var error = _v0.a;
					return $elm$core$Result$Err(error);
				} else {
					var batchOfSubstitutionsToApply = _v0.a;
					var _v1 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType, declarationTypes, batchOfSubstitutionsToApply.substituteVariableByType, patternTypedNode);
					if (_v1.$ === 'Err') {
						var error = _v1.a;
						return $elm$core$Result$Err(error);
					} else {
						var substitutedPatternTypedNode = _v1.a;
						if (substitutedPatternTypedNode.unchanged) {
							return $elm$core$Result$Ok(patternTypedNode);
						} else {
							var _v2 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariableSetMergeIntoVariableSubstitutionsWithVariableToType, substitutedPatternTypedNode.substitutions.variableToType, substitutedPatternTypedNode.substitutions.equivalentVariables, batchOfSubstitutionsToApply.newEquivalentVariables);
							if (_v2.$ === 'Err') {
								var error = _v2.a;
								return $elm$core$Result$Err(error);
							} else {
								var withNewEquivalentVariables = _v2.a;
								var $temp$declarationTypes = declarationTypes,
									$temp$substitutions = withNewEquivalentVariables,
									$temp$patternTypedNode = substitutedPatternTypedNode.node;
								declarationTypes = $temp$declarationTypes;
								substitutions = $temp$substitutions;
								patternTypedNode = $temp$patternTypedNode;
								continue patternTypedNodeApplyVariableSubstitutions;
							}
						}
					}
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeApplyVariableSubstitutions = F3(
	function (context, substitutions, originalType) {
		typeApplyVariableSubstitutions:
		while (true) {
			if ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsIsNone(substitutions)) {
				return $elm$core$Result$Ok(originalType);
			} else {
				var _v0 = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$createBatchOfSubstitutionsToApply, context, substitutions);
				if (_v0.$ === 'Err') {
					var error = _v0.a;
					return $elm$core$Result$Err(error);
				} else {
					var batchOfSubstitutionsToApply = _v0.a;
					var _v1 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType, context, batchOfSubstitutionsToApply.substituteVariableByType, originalType);
					if (_v1.$ === 'Err') {
						var error = _v1.a;
						return $elm$core$Result$Err(error);
					} else {
						var substitutedType = _v1.a;
						if (substitutedType.unchanged) {
							return $elm$core$Result$Ok(originalType);
						} else {
							var $temp$context = context,
								$temp$substitutions = {equivalentVariables: batchOfSubstitutionsToApply.newEquivalentVariables, variableToType: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty},
								$temp$originalType = substitutedType.type_;
							context = $temp$context;
							substitutions = $temp$substitutions;
							originalType = $temp$originalType;
							continue typeApplyVariableSubstitutions;
						}
					}
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeCharChar = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
		{_arguments: _List_Nil, moduleOrigin: 'Char', name: 'Char'}));
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeStringString = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
	$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
		{_arguments: _List_Nil, moduleOrigin: 'String', name: 'String'}));
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTypeConstruct = F3(
	function (context, a, bTypeConstruct) {
		if (a.$ === 'TypeNotVariable') {
			var aTypeNotVariable = a.a;
			return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnifyWithTypeConstruct, context, aTypeNotVariable, bTypeConstruct);
		} else {
			var aVariable = a.a;
			var bTypeNotVariable = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(bTypeConstruct);
			return A4(
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableWithType,
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(bTypeNotVariable),
				context.declarationTypes,
				aVariable,
				bTypeNotVariable);
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableIsConstrained = function (variableName) {
	return A2($elm$core$String$startsWith, 'number', variableName) || function () {
		var _v0 = A3($elm$core$String$slice, 0, 10, variableName);
		switch (_v0) {
			case 'appendable':
				return true;
			case 'comparable':
				return true;
			case 'compappend':
				return true;
			default:
				return false;
		}
	}();
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer = F2(
	function (context, _v0) {
		var fullRange = _v0.a;
		var pattern = _v0.b;
		switch (pattern.$) {
			case 'FloatPattern':
				return $elm$core$Result$Err(
					'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (') ' + 'float patterns are invalid syntax')));
			case 'AllPattern':
				return $elm$core$Result$Ok(
					{
						range: fullRange,
						type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
							{name: 'ignored', useRange: fullRange}),
						value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternIgnored
					});
			case 'UnitPattern':
				return $elm$core$Result$Ok(
					{range: fullRange, type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnit, value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternUnit});
			case 'CharPattern':
				var charValue = pattern.a;
				return $elm$core$Result$Ok(
					{
						range: fullRange,
						type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeCharChar,
						value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternChar(charValue)
					});
			case 'IntPattern':
				var intValue = pattern.a;
				return $elm$core$Result$Ok(
					{
						range: fullRange,
						type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsInt,
						value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternInt(
							{base: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$Base10, value: intValue})
					});
			case 'HexPattern':
				var intValue = pattern.a;
				return $elm$core$Result$Ok(
					{
						range: fullRange,
						type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsInt,
						value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternInt(
							{base: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$Base16, value: intValue})
					});
			case 'StringPattern':
				var stringValue = pattern.a;
				return $elm$core$Result$Ok(
					{
						range: fullRange,
						type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeStringString,
						value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternString(stringValue)
					});
			case 'VarPattern':
				var variableName = pattern.a;
				return $elm$core$Result$Ok(
					{
						range: fullRange,
						type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
							{
								name: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableIsConstrained(variableName) ? ('incoming' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$stringFirstCharToUpper(variableName)) : variableName,
								useRange: fullRange
							}),
						value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternVariable(variableName)
					});
			case 'ParenthesizedPattern':
				var parenthesizedInParens = pattern.a;
				return A2(
					$elm$core$Result$map,
					function (inParens) {
						return {
							range: fullRange,
							type_: inParens.type_,
							value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternParenthesized(inParens)
						};
					},
					A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer, context, parenthesizedInParens));
			case 'AsPattern':
				var innerPatternNode = pattern.a;
				var _v2 = pattern.b;
				var variableNameRange = _v2.a;
				var variableName = _v2.b;
				return A2(
					$elm$core$Result$map,
					function (inner) {
						return {
							range: fullRange,
							type_: inner.type_,
							value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternAs(
								{
									pattern: inner,
									variable: {range: variableNameRange, type_: inner.type_, value: variableName}
								})
						};
					},
					A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer, context, innerPatternNode));
			case 'TuplePattern':
				var parts = pattern.a;
				if (!parts.b) {
					return $elm$core$Result$Ok(
						{range: fullRange, type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnit, value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternUnit});
				} else {
					if (!parts.b.b) {
						var parenthesizedInParens = parts.a;
						return A2(
							$elm$core$Result$map,
							function (inParens) {
								return {
									range: fullRange,
									type_: inParens.type_,
									value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternParenthesized(inParens)
								};
							},
							A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer, context, parenthesizedInParens));
					} else {
						if (!parts.b.b.b) {
							var tuplePart0 = parts.a;
							var _v4 = parts.b;
							var tuplePart1 = _v4.a;
							return A3(
								$elm$core$Result$map2,
								F2(
									function (part0, part1) {
										return {
											range: fullRange,
											type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
													{part0: part0.type_, part1: part1.type_})),
											value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternTuple(
												{part0: part0, part1: part1})
										};
									}),
								A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer, context, tuplePart0),
								A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer, context, tuplePart1));
						} else {
							if (!parts.b.b.b.b) {
								var tuplePart0 = parts.a;
								var _v5 = parts.b;
								var tuplePart1 = _v5.a;
								var _v6 = _v5.b;
								var tuplePart2 = _v6.a;
								return A4(
									$elm$core$Result$map3,
									F3(
										function (part0, part1, part2) {
											return {
												range: fullRange,
												type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple(
														{part0: part0.type_, part1: part1.type_, part2: part2.type_})),
												value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternTriple(
													{part0: part0, part1: part1, part2: part2})
											};
										}),
									A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer, context, tuplePart0),
									A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer, context, tuplePart1),
									A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer, context, tuplePart2));
							} else {
								var _v7 = parts.b;
								var _v8 = _v7.b;
								var _v9 = _v8.b;
								return $elm$core$Result$Err(
									'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (') ' + 'too many tuple parts')));
							}
						}
					}
				}
			case 'RecordPattern':
				var recordFields = pattern.a;
				var fieldTypedNodes = A2(
					$elm$core$List$map,
					function (_v10) {
						var fieldRange = _v10.a;
						var fieldName = _v10.b;
						return {
							range: fieldRange,
							type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
								{name: fieldName, useRange: fieldRange}),
							value: fieldName
						};
					},
					recordFields);
				return $elm$core$Result$Ok(
					{
						range: fullRange,
						type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(
								{
									fields: A3(
										$elm$core$List$foldl,
										F2(
											function (fieldVariable, soFar) {
												return A3($miniBill$elm_fast_dict$FastDict$insert, fieldVariable.value, fieldVariable.type_, soFar);
											}),
										$miniBill$elm_fast_dict$FastDict$empty,
										fieldTypedNodes),
									recordVariable: {name: 'record', useRange: fullRange}
								})),
						value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternRecord(fieldTypedNodes)
					});
			case 'UnConsPattern':
				var headNode = pattern.a;
				var tailNode = pattern.b;
				return A3(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
					F2(
						function (headInferred, tailInferred) {
							return A2(
								$elm$core$Result$andThen,
								function (fullListTypeUnified) {
									return A3(
										$elm$core$Result$map2,
										F2(
											function (headAfterUnification, tailAfterUnification) {
												return {
													range: fullRange,
													type_: fullListTypeUnified.type_,
													value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternListCons(
														{head: headAfterUnification, tail: tailAfterUnification})
												};
											}),
										A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeApplyVariableSubstitutions, context.declarationTypes, fullListTypeUnified.substitutions, headInferred),
										A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeApplyVariableSubstitutions, context.declarationTypes, fullListTypeUnified.substitutions, tailInferred));
								},
								A3(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTypeConstruct,
									{declarationTypes: context.declarationTypes, range: fullRange},
									tailInferred.type_,
									{
										_arguments: _List_fromArray(
											[headInferred.type_]),
										moduleOrigin: 'List',
										name: 'List'
									}));
						}),
					A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer, context, headNode),
					A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer, context, tailNode));
			case 'ListPattern':
				var elementNodes = pattern.a;
				if (!elementNodes.b) {
					return $elm$core$Result$Ok(
						{
							range: fullRange,
							type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeListList(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
									{name: 'element', useRange: fullRange})),
							value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternListExactEmpty
						});
				} else {
					var head = elementNodes.a;
					var tail = elementNodes.b;
					return A2(
						$elm$core$Result$andThen,
						function (headInferred) {
							var typeContext = {declarationTypes: context.declarationTypes, range: fullRange};
							return A2(
								$elm$core$Result$andThen,
								function (tailInferredAndUnifiedElementType) {
									return A3(
										$elm$core$Result$map2,
										F2(
											function (headInferredAfterUnification, tailInferredAfterUnification) {
												return {
													range: fullRange,
													type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeListList(tailInferredAndUnifiedElementType.unifiedElementType),
													value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternListExact(
														A2($elm$core$List$cons, headInferredAfterUnification, tailInferredAfterUnification))
												};
											}),
										A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeApplyVariableSubstitutions, context.declarationTypes, tailInferredAndUnifiedElementType.substitutions, headInferred),
										A3(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
											_List_Nil,
											F2(
												function (tailElementInferred, tailAfterUnificationSoFar) {
													return A2(
														$elm$core$Result$map,
														function (tailElementAfterUnification) {
															return A2($elm$core$List$cons, tailElementAfterUnification, tailAfterUnificationSoFar);
														},
														A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeApplyVariableSubstitutions, context.declarationTypes, tailInferredAndUnifiedElementType.substitutions, tailElementInferred));
												}),
											tailInferredAndUnifiedElementType.nodes));
								},
								A3(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
									{nodes: _List_Nil, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unifiedElementType: headInferred.type_},
									F2(
										function (tailElementNode, soFar) {
											return A2(
												$elm$core$Result$andThen,
												function (tailElementInferred) {
													return A2(
														$elm$core$Result$andThen,
														function (unifiedElementTypeSoFarWithTailElement) {
															return A2(
																$elm$core$Result$map,
																function (substitutionsSoFarWithUnifyingTailElement) {
																	return {
																		nodes: A2($elm$core$List$cons, tailElementInferred, soFar.nodes),
																		substitutions: substitutionsSoFarWithUnifyingTailElement,
																		unifiedElementType: unifiedElementTypeSoFarWithTailElement.type_
																	};
																},
																A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, typeContext, soFar.substitutions, unifiedElementTypeSoFarWithTailElement.substitutions));
														},
														A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, typeContext, soFar.unifiedElementType, tailElementInferred.type_));
												},
												A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer, context, tailElementNode));
										}),
									tail));
						},
						A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer, context, head));
				}
			default:
				var qualified = pattern.a;
				var values = pattern.b;
				var qualification = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$moduleNameToString(qualified.moduleName);
				var moduleOriginInfoOrError = function () {
					var _v14 = A2(
						$elm$core$Maybe$andThen,
						function (inModuleLookup) {
							return A2($miniBill$elm_fast_dict$FastDict$get, qualified.name, inModuleLookup);
						},
						A2($miniBill$elm_fast_dict$FastDict$get, qualification, context.moduleOriginLookup.references));
					if (_v14.$ === 'Nothing') {
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (') ' + ('no module origin found for the pattern variant ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString(
								{name: qualified.name, qualification: qualification})))));
					} else {
						var moduleOrigin = _v14.a;
						var _v15 = A2($miniBill$elm_fast_dict$FastDict$get, moduleOrigin, context.declarationTypes);
						if (_v15.$ === 'Nothing') {
							return $elm$core$Result$Err(
								'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (') ' + ('no declaration types found at the module origin of the variant reference ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString(
									{name: qualified.name, qualification: moduleOrigin})))));
						} else {
							var moduleOriginDeclarationTypes = _v15.a;
							return $elm$core$Result$Ok(
								{declarationTypes: moduleOriginDeclarationTypes, name: moduleOrigin});
						}
					}
				}();
				if (moduleOriginInfoOrError.$ === 'Err') {
					var error = moduleOriginInfoOrError.a;
					return $elm$core$Result$Err(error);
				} else {
					var moduleOriginInfo = moduleOriginInfoOrError.a;
					var _v13 = A2(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictMapAndSmallestJust,
						F2(
							function (choiceTypeName, choiceTypeInfo) {
								return A2(
									$elm$core$Maybe$map,
									function (variantParameters) {
										return {choiceTypeName: choiceTypeName, choiceTypeParameters: choiceTypeInfo.parameters, variantParameters: variantParameters};
									},
									A2($miniBill$elm_fast_dict$FastDict$get, qualified.name, choiceTypeInfo.variants));
							}),
						moduleOriginInfo.declarationTypes.choiceTypes);
					if (_v13.$ === 'Nothing') {
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (') ' + ('no choice type found at the module origin with the variant reference ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString(
								{name: qualified.name, qualification: moduleOriginInfo.name})))));
					} else {
						var variant = _v13.a;
						return A2(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternVariantTypeInfer,
							context,
							{choiceTypeName: variant.choiceTypeName, choiceTypeParameters: variant.choiceTypeParameters, fullRange: fullRange, moduleOrigin: moduleOriginInfo.name, name: qualified.name, qualification: qualification, values: values, variantValueTypes: variant.variantParameters});
					}
				}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternVariantTypeInfer = F2(
	function (context, patternVariant) {
		return A2(
			$elm$core$Result$map,
			function (valuesAndResultTypeUnified) {
				return {
					range: patternVariant.fullRange,
					type_: valuesAndResultTypeUnified.resultType,
					value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternVariant(
						{
							choiceTypeName: patternVariant.choiceTypeName,
							moduleOrigin: patternVariant.moduleOrigin,
							name: patternVariant.name,
							qualification: patternVariant.qualification,
							values: $elm$core$List$reverse(valuesAndResultTypeUnified.valuesReverse)
						})
				};
			},
			A4(
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldl2WhileOkFrom,
				{
					resultType: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(
							{
								_arguments: A2(
									$elm$core$List$map,
									function (parameter) {
										return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
											{name: parameter, useRange: patternVariant.fullRange});
									},
									patternVariant.choiceTypeParameters),
								moduleOrigin: patternVariant.moduleOrigin,
								name: patternVariant.choiceTypeName
							})),
					valuesReverse: _List_Nil
				},
				patternVariant.variantValueTypes,
				patternVariant.values,
				F3(
					function (typeInVariant, argumentPattern, soFar) {
						return A2(
							$elm$core$Result$andThen,
							function (valueInferred) {
								var typeContext = {declarationTypes: context.declarationTypes, range: patternVariant.fullRange};
								return A2(
									$elm$core$Result$andThen,
									function (valueTypeUnified) {
										return A3(
											$elm$core$Result$map2,
											F2(
												function (resultTypeAfterUnification, valueInferredAfterUnification) {
													return {
														resultType: resultTypeAfterUnification,
														valuesReverse: A2($elm$core$List$cons, valueInferredAfterUnification, soFar.valuesReverse)
													};
												}),
											A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeApplyVariableSubstitutions, typeContext, valueTypeUnified.substitutions, soFar.resultType),
											A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeApplyVariableSubstitutions, context.declarationTypes, valueTypeUnified.substitutions, valueInferred));
									},
									A3(
										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify,
										typeContext,
										valueInferred.type_,
										A2(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables,
											function (variable) {
												return {name: variable.name, useRange: patternVariant.fullRange};
											},
											typeInVariant)));
							},
							A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer, context, argumentPattern));
					})));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables = function (patternTypedNode) {
	patternTypedNodeIntroducedVariables:
	while (true) {
		var _v0 = patternTypedNode.value;
		switch (_v0.$) {
			case 'PatternUnit':
				return $miniBill$elm_fast_dict$FastDict$empty;
			case 'PatternIgnored':
				return $miniBill$elm_fast_dict$FastDict$empty;
			case 'PatternInt':
				return $miniBill$elm_fast_dict$FastDict$empty;
			case 'PatternString':
				return $miniBill$elm_fast_dict$FastDict$empty;
			case 'PatternChar':
				return $miniBill$elm_fast_dict$FastDict$empty;
			case 'PatternVariable':
				var variable = _v0.a;
				return A2($miniBill$elm_fast_dict$FastDict$singleton, variable, patternTypedNode.type_);
			case 'PatternRecord':
				var fieldVariables = _v0.a;
				return A3(
					$elm$core$List$foldl,
					F2(
						function (fieldVariable, soFar) {
							return A3($miniBill$elm_fast_dict$FastDict$insert, fieldVariable.value, fieldVariable.type_, soFar);
						}),
					$miniBill$elm_fast_dict$FastDict$empty,
					fieldVariables);
			case 'PatternAs':
				var patternAs = _v0.a;
				return A3(
					$miniBill$elm_fast_dict$FastDict$insert,
					patternAs.variable.value,
					patternAs.variable.type_,
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(patternAs.pattern));
			case 'PatternParenthesized':
				var inParens = _v0.a;
				var $temp$patternTypedNode = inParens;
				patternTypedNode = $temp$patternTypedNode;
				continue patternTypedNodeIntroducedVariables;
			case 'PatternListCons':
				var listCons = _v0.a;
				return A2(
					$miniBill$elm_fast_dict$FastDict$union,
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(listCons.head),
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(listCons.tail));
			case 'PatternTuple':
				var parts = _v0.a;
				return A2(
					$miniBill$elm_fast_dict$FastDict$union,
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(parts.part0),
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(parts.part1));
			case 'PatternTriple':
				var parts = _v0.a;
				return A2(
					$miniBill$elm_fast_dict$FastDict$union,
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(parts.part2),
					A2(
						$miniBill$elm_fast_dict$FastDict$union,
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(parts.part1),
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(parts.part0)));
			case 'PatternListExact':
				var elements = _v0.a;
				return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToFastDictsAndUnify, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables, elements);
			default:
				var variant = _v0.a;
				return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToFastDictsAndUnify, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables, variant.values);
		}
	}
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$parameterPatternsTypeInfer = F2(
	function (context, parameterPatterns) {
		return A2(
			$elm$core$Result$map,
			function (folded) {
				return {introducedExpressionVariables: folded.introducedExpressionVariables, nodes: folded.nodes};
			},
			A3(
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$introducedExpressionVariablesEmptyNodesEmpty,
				F2(
					function (pattern, soFar) {
						return A2(
							$elm$core$Result$map,
							function (patternInferred) {
								return {
									introducedExpressionVariables: A2(
										$miniBill$elm_fast_dict$FastDict$union,
										soFar.introducedExpressionVariables,
										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(patternInferred)),
									nodes: A2($elm$core$List$cons, patternInferred, soFar.nodes)
								};
							},
							A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer, context, pattern));
					}),
				parameterPatterns));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxValueOrFunctionDeclarationRange = function (syntaxValueOrFunctionDeclaration) {
	return {
		end: $stil4m$elm_syntax$Elm$Syntax$Node$range(syntaxValueOrFunctionDeclaration.declaration).end,
		start: function () {
			var _v0 = syntaxValueOrFunctionDeclaration.documentation;
			if (_v0.$ === 'Just') {
				var _v1 = _v0.a;
				var documentationRange = _v1.a;
				return documentationRange.start;
			} else {
				var _v2 = syntaxValueOrFunctionDeclaration.signature;
				if (_v2.$ === 'Just') {
					var _v3 = _v2.a;
					var signatureRange = _v3.a;
					return signatureRange.start;
				} else {
					return $stil4m$elm_syntax$Elm$Syntax$Node$range(syntaxValueOrFunctionDeclaration.declaration).start;
				}
			}
		}()
	};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithBasicsBool = F2(
	function (context, a) {
		if (a.$ === 'TypeNotVariable') {
			var aTypeNotVariable = a.a;
			switch (aTypeNotVariable.$) {
				case 'TypeConstruct':
					var aTypeConstruct = aTypeNotVariable.a;
					if (function () {
						var _v2 = aTypeConstruct.name;
						if (_v2 === 'Bool') {
							var _v3 = aTypeConstruct.moduleOrigin;
							if (_v3 === 'Basics') {
								return true;
							} else {
								return false;
							}
						} else {
							return false;
						}
					}()) {
						return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
					} else {
						var _v4 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct, context, aTypeConstruct, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableBasicsBool);
						if (_v4.$ === 'Just') {
							var result = _v4.a;
							return A2(
								$elm$core$Result$map,
								function ($) {
									return $.substitutions;
								},
								result);
						} else {
							return $elm$core$Result$Err(
								'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('choice type ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString(
									{name: aTypeConstruct.name, qualification: aTypeConstruct.moduleOrigin}) + ' cannot be unified be with a choice type with a different name: Basics.Bool')))));
						}
					}
				case 'TypeUnit':
					return $elm$core$Result$Err(
						'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'choice type Basics.Bool cannot be unified be with a choice type with a different name: Basics.Bool')));
				case 'TypeTuple':
					return $elm$core$Result$Err(
						'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'choice type Basics.Bool cannot be unified be with a choice type with a different name: Basics.Bool')));
				case 'TypeTriple':
					return $elm$core$Result$Err(
						'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'choice type Basics.Bool cannot be unified be with a choice type with a different name: Basics.Bool')));
				case 'TypeRecord':
					return $elm$core$Result$Err(
						'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'choice type Basics.Bool cannot be unified be with a choice type with a different name: Basics.Bool')));
				case 'TypeRecordExtension':
					return $elm$core$Result$Err(
						'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'choice type Basics.Bool cannot be unified be with a choice type with a different name: Basics.Bool')));
				default:
					return $elm$core$Result$Err(
						'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'choice type Basics.Bool cannot be unified be with a choice type with a different name: Basics.Bool')));
			}
		} else {
			var aVariable = a.a;
			return A2(
				$elm$core$Result$mapError,
				function (error) {
					return '(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + error));
				},
				A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableOrError, context.declarationTypes, aVariable, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableBasicsBool));
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithFunction = F3(
	function (context, aFunction, b) {
		if (b.$ === 'TypeVariable') {
			var bVariableName = b.a;
			var aTypeNotVariable = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction);
			return A4(
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableWithType,
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(aTypeNotVariable),
				context.declarationTypes,
				bVariableName,
				aTypeNotVariable);
		} else {
			var bTypeNotVariable = b.a;
			switch (bTypeNotVariable.$) {
				case 'TypeFunction':
					var bFunction = bTypeNotVariable.a;
					return A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
						F2(
							function (inputABUnified, outputABUnified) {
								return A2(
									$elm$core$Result$map,
									function (substitutionsABMerged) {
										return {
											substitutions: substitutionsABMerged,
											type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
													{input: inputABUnified.type_, output: outputABUnified.type_}))
										};
									},
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, inputABUnified.substitutions, outputABUnified.substitutions));
							}),
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, context, aFunction.input, bFunction.input),
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, context, aFunction.output, bFunction.output));
				case 'TypeUnit':
					return $elm$core$Result$Err(
						'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('function ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction)) + (' cannot be unified with types other than function: ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit)))))));
				case 'TypeConstruct':
					var bTypeConstruct = bTypeNotVariable.a;
					var _v2 = A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct,
						context,
						bTypeConstruct,
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction));
					if (_v2.$ === 'Just') {
						var result = _v2.a;
						return result;
					} else {
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('function ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction)) + (' cannot be unified with types other than function: ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(bTypeConstruct))))))));
					}
				case 'TypeTuple':
					var bTypeTuple = bTypeNotVariable.a;
					return $elm$core$Result$Err(
						'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('function ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction)) + (' cannot be unified with types other than function: ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(bTypeTuple))))))));
				case 'TypeTriple':
					var bTypeTriple = bTypeNotVariable.a;
					return $elm$core$Result$Err(
						'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('function ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction)) + (' cannot be unified with types other than function: ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple(bTypeTriple))))))));
				case 'TypeRecord':
					var bTypeRecord = bTypeNotVariable.a;
					return $elm$core$Result$Err(
						'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('function ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction)) + (' cannot be unified with types other than function: ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(bTypeRecord))))))));
				default:
					var bTypeRecordExtension = bTypeNotVariable.a;
					return $elm$core$Result$Err(
						'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + ('function ' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction)) + (' cannot be unified with types other than function: ' + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(bTypeRecordExtension))))))));
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToType = F3(
	function (declarationsTypes, variableToReplace, replacementType) {
		if (replacementType.$ === 'TypeNotVariable') {
			var replacementTypeNotVariable = replacementType.a;
			return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableOrError, declarationsTypes, variableToReplace, replacementTypeNotVariable);
		} else {
			var replacementVariable = replacementType.a;
			return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFrom2EquivalentVariables, variableToReplace, replacementVariable);
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionCaseTypeInfer = F2(
	function (context, _v43) {
		var syntaxCasePattern = _v43.a;
		var syntaxCaseResult = _v43.b;
		return A2(
			$elm$core$Result$andThen,
			function (patternInferred) {
				return A2(
					$elm$core$Result$andThen,
					function (resultInferred) {
						var patternIntroducedVariables = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(patternInferred);
						return $miniBill$elm_fast_dict$FastDict$isEmpty(patternIntroducedVariables) ? $elm$core$Result$Ok(
							{pattern: patternInferred, result: resultInferred}) : A2(
							$elm$core$Result$andThen,
							function (patternVariablesWithUsesUnification) {
								return A3(
									$elm$core$Result$map2,
									F2(
										function (patternInferredSubstituted, resultInferredSubstituted) {
											return {pattern: patternInferredSubstituted, result: resultInferredSubstituted};
										}),
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeApplyVariableSubstitutions, context.declarationTypes, patternVariablesWithUsesUnification.substitutions, patternInferred),
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions, context.declarationTypes, patternVariablesWithUsesUnification.substitutions, resultInferred));
							},
							A3(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences,
								{
									declarationTypes: context.declarationTypes,
									range: {
										end: $stil4m$elm_syntax$Elm$Syntax$Node$range(syntaxCaseResult).end,
										start: $stil4m$elm_syntax$Elm$Syntax$Node$range(syntaxCasePattern).start
									}
								},
								patternIntroducedVariables,
								resultInferred));
					},
					A2(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer,
						{
							declarationTypes: context.declarationTypes,
							locallyIntroducedDeclarationTypes: context.locallyIntroducedDeclarationTypes,
							locallyIntroducedExpressionVariables: A2(
								$miniBill$elm_fast_dict$FastDict$union,
								context.locallyIntroducedExpressionVariables,
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(patternInferred)),
							moduleOriginLookup: context.moduleOriginLookup
						},
						syntaxCaseResult));
			},
			A2(
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer,
				{declarationTypes: context.declarationTypes, moduleOriginLookup: context.moduleOriginLookup},
				syntaxCasePattern));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionInfixOperationTypeInfer = F2(
	function (context, infixOperation) {
		return A4(
			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3,
			F3(
				function (operatorAsFunctionType, leftInferred, rightInferred) {
					var typeContext = {declarationTypes: context.declarationTypes, range: infixOperation.fullRange};
					return A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
						F2(
							function (unifiedLeftType, unifiedRightType) {
								return A2(
									$elm$core$Result$andThen,
									function (leftRightAndUnificationSubstitutions) {
										return A3(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions,
											context.declarationTypes,
											leftRightAndUnificationSubstitutions,
											{
												range: infixOperation.fullRange,
												type_: operatorAsFunctionType.resultType,
												value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionInfixOperation(
													{
														left: leftInferred,
														operator: {
															moduleOrigin: operatorAsFunctionType.moduleOrigin,
															symbol: infixOperation.operator,
															type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																	{
																		input: leftInferred.type_,
																		output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																				{input: rightInferred.type_, output: operatorAsFunctionType.resultType}))
																	}))
														},
														right: rightInferred
													})
											});
									},
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, typeContext, unifiedLeftType.substitutions, unifiedRightType.substitutions));
							}),
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, typeContext, operatorAsFunctionType.leftType, leftInferred.type_),
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, typeContext, operatorAsFunctionType.rightType, rightInferred.type_));
				}),
			A2(
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$operatorFunctionType,
				{
					moduleOriginLookup: context.moduleOriginLookup,
					range: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$infixOperationApproximateOperatorRange(
						{
							leftEnd: $stil4m$elm_syntax$Elm$Syntax$Node$range(infixOperation.left).end,
							operator: infixOperation.operator,
							rightStart: $stil4m$elm_syntax$Elm$Syntax$Node$range(infixOperation.right).start
						})
				},
				infixOperation.operator),
			A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, infixOperation.left),
			A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, infixOperation.right));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionLetInTypeInfer = F2(
	function (context, syntaxExpressionLetIn) {
		return A2(
			$elm$core$Result$andThen,
			function (acrossLetInIncludingContextSoFar) {
				var inferContextAcrossLetIn = {declarationTypes: context.declarationTypes, locallyIntroducedDeclarationTypes: acrossLetInIncludingContextSoFar.introducedDeclarationTypes, locallyIntroducedExpressionVariables: acrossLetInIncludingContextSoFar.introducedExpressionVariables, moduleOriginLookup: context.moduleOriginLookup};
				return A4(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3,
					F3(
						function (declaration0Inferred, declaration1UpInferred, resultInferred) {
							var typeContext = {declarationTypes: context.declarationTypes, range: syntaxExpressionLetIn.fullRange};
							var letInTypedNodeInferred = {
								range: syntaxExpressionLetIn.fullRange,
								type_: resultInferred.type_,
								value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionLetIn(
									{declaration0: declaration0Inferred, declaration1Up: declaration1UpInferred, result: resultInferred})
							};
							var inferredUnannotatedDeclarationTypes = acrossLetInIncludingContextSoFar.unannotatedDeclarationsExist ? A2(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToFastDictsAndUnify,
								function (declarationInferred) {
									var _v36 = declarationInferred.declaration;
									if (_v36.$ === 'LetDestructuring') {
										return $miniBill$elm_fast_dict$FastDict$empty;
									} else {
										var letValueOrFunctionDeclaration = _v36.a;
										var _v37 = letValueOrFunctionDeclaration.signature;
										if (_v37.$ === 'Just') {
											return $miniBill$elm_fast_dict$FastDict$empty;
										} else {
											return A2(
												$miniBill$elm_fast_dict$FastDict$singleton,
												letValueOrFunctionDeclaration.name,
												{range: declarationInferred.range, type_: letValueOrFunctionDeclaration.type_});
										}
									}
								},
								A2($elm$core$List$cons, declaration0Inferred, declaration1UpInferred)) : $miniBill$elm_fast_dict$FastDict$empty;
							return A2(
								$elm$core$Result$andThen,
								function (fullSubstitutions) {
									return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions, context.declarationTypes, fullSubstitutions, letInTypedNodeInferred);
								},
								A3(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
									F2(
										function (destructuringUseUnification, declarationUseUnificationSubstitutions) {
											return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, typeContext, destructuringUseUnification.substitutions, declarationUseUnificationSubstitutions);
										}),
									acrossLetInIncludingContextSoFar.destructuringExists ? A3(
										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences,
										typeContext,
										A2(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToFastDictsAndUnify,
											function (declarationInferred) {
												var _v35 = declarationInferred.declaration;
												if (_v35.$ === 'LetDestructuring') {
													var letDestructuring = _v35.a;
													return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(letDestructuring.pattern);
												} else {
													return $miniBill$elm_fast_dict$FastDict$empty;
												}
											},
											A2($elm$core$List$cons, declaration0Inferred, declaration1UpInferred)),
										letInTypedNodeInferred) : $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNoneUnifiedTypesDictEmpty,
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions, typeContext, inferredUnannotatedDeclarationTypes, letInTypedNodeInferred)));
						}),
					A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationTypeInfer, inferContextAcrossLetIn, syntaxExpressionLetIn.declaration0),
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
						_List_Nil,
						F2(
							function (letDeclarationNode, soFar) {
								return A2(
									$elm$core$Result$map,
									function (letDeclarationInferred) {
										return A2($elm$core$List$cons, letDeclarationInferred, soFar);
									},
									A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationTypeInfer, inferContextAcrossLetIn, letDeclarationNode));
							}),
						syntaxExpressionLetIn.declaration1Up),
					A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, inferContextAcrossLetIn, syntaxExpressionLetIn.expression));
			},
			A3(
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom,
				{destructuringExists: false, introducedDeclarationTypes: context.locallyIntroducedDeclarationTypes, introducedExpressionVariables: context.locallyIntroducedExpressionVariables, unannotatedDeclarationsExist: false},
				F2(
					function (_v38, soFar) {
						var letDeclarationRange = _v38.a;
						var letDeclaration = _v38.b;
						if (letDeclaration.$ === 'LetDestructuring') {
							var patternNode = letDeclaration.a;
							return A2(
								$elm$core$Result$map,
								function (patternInferred) {
									return {
										destructuringExists: true,
										introducedDeclarationTypes: soFar.introducedDeclarationTypes,
										introducedExpressionVariables: A2(
											$miniBill$elm_fast_dict$FastDict$union,
											soFar.introducedExpressionVariables,
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(patternInferred)),
										unannotatedDeclarationsExist: soFar.unannotatedDeclarationsExist
									};
								},
								A2(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer,
									{declarationTypes: context.declarationTypes, moduleOriginLookup: context.moduleOriginLookup},
									patternNode));
						} else {
							var letValueOrFunctionDeclaration = letDeclaration.a;
							var _v40 = $stil4m$elm_syntax$Elm$Syntax$Node$value(letValueOrFunctionDeclaration.declaration).name;
							var name = _v40.b;
							var _v41 = letValueOrFunctionDeclaration.signature;
							if (_v41.$ === 'Nothing') {
								return $elm$core$Result$Ok(
									{
										destructuringExists: soFar.destructuringExists,
										introducedDeclarationTypes: A3(
											$miniBill$elm_fast_dict$FastDict$insert,
											name,
											{
												moduleLevel: '',
												range: letDeclarationRange,
												type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
													{name: name, useRange: letDeclarationRange})
											},
											soFar.introducedDeclarationTypes),
										introducedExpressionVariables: soFar.introducedExpressionVariables,
										unannotatedDeclarationsExist: true
									});
							} else {
								var _v42 = _v41.a;
								var signature = _v42.b;
								return A2(
									$elm$core$Result$map,
									function (type_) {
										return {
											destructuringExists: soFar.destructuringExists,
											introducedDeclarationTypes: A3(
												$miniBill$elm_fast_dict$FastDict$insert,
												name,
												{moduleLevel: '', range: letDeclarationRange, type_: type_},
												soFar.introducedDeclarationTypes),
											introducedExpressionVariables: soFar.introducedExpressionVariables,
											unannotatedDeclarationsExist: soFar.unannotatedDeclarationsExist
										};
									},
									A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToType, context.moduleOriginLookup.typeConstructs, signature.typeAnnotation));
							}
						}
					}),
				A2($elm$core$List$cons, syntaxExpressionLetIn.declaration0, syntaxExpressionLetIn.declaration1Up)));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer = F2(
	function (context, _v7) {
		var fullRange = _v7.a;
		var expression = _v7.b;
		switch (expression.$) {
			case 'UnitExpr':
				return $elm$core$Result$Ok(
					{range: fullRange, type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnit, value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionUnit});
			case 'Integer':
				var intValue = expression.a;
				return $elm$core$Result$Ok(
					{
						range: fullRange,
						type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
							{name: 'number', useRange: fullRange}),
						value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionInteger(
							{base: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$Base10, value: intValue})
					});
			case 'Hex':
				var intValue = expression.a;
				return $elm$core$Result$Ok(
					{
						range: fullRange,
						type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
							{name: 'number', useRange: fullRange}),
						value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionInteger(
							{base: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$Base16, value: intValue})
					});
			case 'Floatable':
				var floatValue = expression.a;
				return $elm$core$Result$Ok(
					{
						range: fullRange,
						type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsFloat,
						value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionFloat(floatValue)
					});
			case 'Literal':
				var stringValue = expression.a;
				return $elm$core$Result$Ok(
					{
						range: fullRange,
						type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeStringString,
						value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionString(stringValue)
					});
			case 'CharLiteral':
				var charValue = expression.a;
				return $elm$core$Result$Ok(
					{
						range: fullRange,
						type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeCharChar,
						value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionChar(charValue)
					});
			case 'PrefixOperator':
				var operator = expression.a;
				return A2(
					$elm$core$Result$map,
					function (operatorInferred) {
						return {
							range: fullRange,
							type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
									{
										input: operatorInferred.leftType,
										output: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
												{input: operatorInferred.rightType, output: operatorInferred.resultType}))
									})),
							value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionOperatorFunction(
								{moduleOrigin: operatorInferred.moduleOrigin, symbol: operator})
						};
					},
					A2(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$operatorFunctionType,
						{moduleOriginLookup: context.moduleOriginLookup, range: fullRange},
						operator));
			case 'FunctionOrValue':
				var qualificationDotSeparated = expression.a;
				var name = expression.b;
				return A2(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionReferenceTypeInfer,
					context,
					{
						fullRange: fullRange,
						name: name,
						qualification: A2($elm$core$String$join, '.', qualificationDotSeparated)
					});
			case 'RecordAccessFunction':
				var dotFieldName = expression.a;
				var nameStartLocation = {column: fullRange.start.column + 1, row: fullRange.start.row};
				var fieldName = A2($elm$core$String$dropLeft, 1, dotFieldName);
				var fieldValueType = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
					{
						name: fieldName,
						useRange: {end: fullRange.end, start: nameStartLocation}
					});
				return $elm$core$Result$Ok(
					{
						range: fullRange,
						type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
								{
									input: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(
											{
												fields: A2($miniBill$elm_fast_dict$FastDict$singleton, fieldName, fieldValueType),
												recordVariable: {
													name: 'record',
													useRange: {end: nameStartLocation, start: fullRange.start}
												}
											})),
									output: fieldValueType
								})),
						value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecordAccessFunction(fieldName)
					});
			case 'ParenthesizedExpression':
				var inParens = expression.a;
				return A2(
					$elm$core$Result$map,
					function (inParensInferred) {
						return {
							range: fullRange,
							type_: inParensInferred.type_,
							value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionParenthesized(inParensInferred)
						};
					},
					A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, inParens));
			case 'Negation':
				var negated = expression.a;
				return A2(
					$elm$core$Result$andThen,
					function (negatedInferred) {
						return A2(
							$elm$core$Result$andThen,
							function (substitutionsFromUnifyingNegatedWithNumber) {
								return A3(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions,
									context.declarationTypes,
									substitutionsFromUnifyingNegatedWithNumber,
									{
										range: fullRange,
										type_: negatedInferred.type_,
										value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionNegation(negatedInferred)
									});
							},
							A3(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToType,
								context.declarationTypes,
								{name: 'number', useRange: fullRange},
								negatedInferred.type_));
					},
					A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, negated));
			case 'RecordAccess':
				var recordNode = expression.a;
				var fieldNameNode = expression.b;
				return A2(
					$elm$core$Result$andThen,
					function (accessedRecordInferred) {
						var _v9 = fieldNameNode;
						var fieldRange = _v9.a;
						var fieldName = _v9.b;
						var introducedFieldValueTypeVariable = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
							{name: fieldName, useRange: fieldRange});
						return A2(
							$elm$core$Result$andThen,
							function (recordWithAccessedFieldUnified) {
								return A3(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions,
									context.declarationTypes,
									recordWithAccessedFieldUnified.substitutions,
									{
										range: fullRange,
										type_: introducedFieldValueTypeVariable,
										value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecordAccess(
											{
												fieldName: fieldName,
												fieldNameRange: $stil4m$elm_syntax$Elm$Syntax$Node$range(fieldNameNode),
												record: accessedRecordInferred
											})
									});
							},
							A3(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnifyWithType,
								{declarationTypes: context.declarationTypes, range: fullRange},
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(
									{
										fields: A2($miniBill$elm_fast_dict$FastDict$singleton, fieldName, introducedFieldValueTypeVariable),
										recordVariable: {
											name: 'record',
											useRange: {
												end: fieldRange.start,
												start: {column: fieldRange.start.column - 1, row: fieldRange.start.row}
											}
										}
									}),
								accessedRecordInferred.type_));
					},
					A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, recordNode));
			case 'OperatorApplication':
				var operator = expression.a;
				var left = expression.c;
				var right = expression.d;
				return A2(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionInfixOperationTypeInfer,
					context,
					{fullRange: fullRange, left: left, operator: operator, right: right});
			case 'IfBlock':
				var condition = expression.a;
				var onTrue = expression.b;
				var onFalse = expression.c;
				return A4(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3,
					F3(
						function (conditionInferred, onTrueInferred, onFalseInferred) {
							var typeContext = {declarationTypes: context.declarationTypes, range: fullRange};
							return A3(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
								F2(
									function (conditionTypeInferredUnifiedWithBoolSubstitutions, onTrueOnFalseTypesUnified) {
										return A2(
											$elm$core$Result$andThen,
											function (fullUnificationSubstitutions) {
												return A3(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions,
													context.declarationTypes,
													fullUnificationSubstitutions,
													{
														range: fullRange,
														type_: onTrueInferred.type_,
														value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionIfThenElse(
															{condition: conditionInferred, onFalse: onFalseInferred, onTrue: onTrueInferred})
													});
											},
											A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, typeContext, conditionTypeInferredUnifiedWithBoolSubstitutions, onTrueOnFalseTypesUnified.substitutions));
									}),
								A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithBasicsBool, typeContext, conditionInferred.type_),
								A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, typeContext, onTrueInferred.type_, onFalseInferred.type_));
						}),
					A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, condition),
					A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, onTrue),
					A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, onFalse));
			case 'TupledExpression':
				var tupleParts = expression.a;
				if (!tupleParts.b) {
					return $elm$core$Result$Ok(
						{range: fullRange, type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnit, value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionUnit});
				} else {
					if (!tupleParts.b.b) {
						var inParens = tupleParts.a;
						return A2(
							$elm$core$Result$map,
							function (inParensInferred) {
								return {
									range: fullRange,
									type_: inParensInferred.type_,
									value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionParenthesized(inParensInferred)
								};
							},
							A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, inParens));
					} else {
						if (!tupleParts.b.b.b) {
							var part0 = tupleParts.a;
							var _v11 = tupleParts.b;
							var part1 = _v11.a;
							return A3(
								$elm$core$Result$map2,
								F2(
									function (part0Inferred, part1Inferred) {
										return {
											range: fullRange,
											type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(
													{part0: part0Inferred.type_, part1: part1Inferred.type_})),
											value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionTuple(
												{part0: part0Inferred, part1: part1Inferred})
										};
									}),
								A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, part0),
								A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, part1));
						} else {
							if (!tupleParts.b.b.b.b) {
								var part0 = tupleParts.a;
								var _v12 = tupleParts.b;
								var part1 = _v12.a;
								var _v13 = _v12.b;
								var part2 = _v13.a;
								return A4(
									$elm$core$Result$map3,
									F3(
										function (part0Inferred, part1Inferred, part2Inferred) {
											return {
												range: fullRange,
												type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple(
														{part0: part0Inferred.type_, part1: part1Inferred.type_, part2: part2Inferred.type_})),
												value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionTriple(
													{part0: part0Inferred, part1: part1Inferred, part2: part2Inferred})
											};
										}),
									A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, part0),
									A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, part1),
									A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, part2));
							} else {
								var _v14 = tupleParts.b;
								var _v15 = _v14.b;
								var _v16 = _v15.b;
								return $elm$core$Result$Err(
									'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (') ' + 'too many tuple parts')));
							}
						}
					}
				}
			case 'ListExpr':
				var elements = expression.a;
				if (!elements.b) {
					return $elm$core$Result$Ok(
						{
							range: fullRange,
							type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeListList(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
									{name: 'element', useRange: fullRange})),
							value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionListEmpty
						});
				} else {
					var head = elements.a;
					var tail = elements.b;
					return A2(
						$elm$core$Result$andThen,
						function (headInferred) {
							var typeContext = {declarationTypes: context.declarationTypes, range: fullRange};
							return A2(
								$elm$core$Result$andThen,
								function (tailElementsInferredAndUnifiedElementType) {
									return A3(
										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions,
										context.declarationTypes,
										tailElementsInferredAndUnifiedElementType.substitutions,
										{
											range: fullRange,
											type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeListList(tailElementsInferredAndUnifiedElementType.unifiedElementType),
											value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionList(
												A2($elm$core$List$cons, headInferred, tailElementsInferredAndUnifiedElementType.nodes))
										});
								},
								A3(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
									{nodes: _List_Nil, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unifiedElementType: headInferred.type_},
									F2(
										function (elementNode, soFar) {
											return A2(
												$elm$core$Result$andThen,
												function (tailElementInferred) {
													return A2(
														$elm$core$Result$andThen,
														function (unifiedSoFarElementTypeWithElement) {
															return A2(
																$elm$core$Result$map,
																function (substitutionsSoFarWithElement) {
																	return {
																		nodes: A2($elm$core$List$cons, tailElementInferred, soFar.nodes),
																		substitutions: substitutionsSoFarWithElement,
																		unifiedElementType: unifiedSoFarElementTypeWithElement.type_
																	};
																},
																A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, typeContext, soFar.substitutions, unifiedSoFarElementTypeWithElement.substitutions));
														},
														A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, typeContext, soFar.unifiedElementType, tailElementInferred.type_));
												},
												A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, elementNode));
										}),
									tail));
						},
						A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, head));
				}
			case 'Application':
				var application = expression.a;
				if (!application.b) {
					return $elm$core$Result$Err(
						'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (') ' + 'empty application is invalid syntax')));
				} else {
					if (!application.b.b) {
						var subExpression = application.a;
						return A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, subExpression);
					} else {
						var called = application.a;
						var _v19 = application.b;
						var argument0 = _v19.a;
						var argument1Up = _v19.b;
						return A4(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3,
							F3(
								function (calledInferred, argument0Inferred, argument1UpInferred) {
									var introducedResultTypeVariable = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
										{name: 'callResult', useRange: fullRange});
									return A2(
										$elm$core$Result$andThen,
										function (callTypeUnified) {
											return A3(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions,
												context.declarationTypes,
												callTypeUnified.substitutions,
												{
													range: fullRange,
													type_: introducedResultTypeVariable,
													value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionCall(
														{argument0: argument0Inferred, argument1Up: argument1UpInferred, called: calledInferred})
												});
										},
										A3(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithFunction,
											{declarationTypes: context.declarationTypes, range: fullRange},
											{
												input: argument0Inferred.type_,
												output: A3(
													$elm$core$List$foldr,
													F2(
														function (argumentInferred, output) {
															return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																	{input: argumentInferred.type_, output: output}));
														}),
													introducedResultTypeVariable,
													argument1UpInferred)
											},
											calledInferred.type_));
								}),
							A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, called),
							A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, argument0),
							A3(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
								_List_Nil,
								F2(
									function (argumentNode, soFar) {
										return A2(
											$elm$core$Result$map,
											function (argumentInferred) {
												return A2($elm$core$List$cons, argumentInferred, soFar);
											},
											A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, argumentNode));
									}),
								argument1Up));
					}
				}
			case 'RecordExpr':
				var fields = expression.a;
				return A2(
					$elm$core$Result$map,
					function (fieldsInferred) {
						return {
							range: fullRange,
							type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(
									A3(
										$elm$core$List$foldl,
										F2(
											function (field, soFar) {
												return A3($miniBill$elm_fast_dict$FastDict$insert, field.name, field.value.type_, soFar);
											}),
										$miniBill$elm_fast_dict$FastDict$empty,
										fieldsInferred))),
							value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecord(fieldsInferred)
						};
					},
					A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
						_List_Nil,
						F2(
							function (_v20, soFar) {
								var fieldRange = _v20.a;
								var _v21 = _v20.b;
								var _v22 = _v21.a;
								var fieldNameRange = _v22.a;
								var fieldName = _v22.b;
								var fieldValueNode = _v21.b;
								return A2(
									$elm$core$Result$map,
									function (fieldValueInferred) {
										return A2(
											$elm$core$List$cons,
											{name: fieldName, nameRange: fieldNameRange, range: fieldRange, value: fieldValueInferred},
											soFar);
									},
									A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, fieldValueNode));
							}),
						fields));
			case 'RecordUpdateExpression':
				var _v23 = expression.a;
				var recordVariableRange = _v23.a;
				var recordVariable = _v23.b;
				var fields = expression.b;
				if (!fields.b) {
					return $elm$core$Result$Err(
						'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (') ' + 'record update without fields is invalid syntax')));
				} else {
					var _v25 = fields.a;
					var field0Range = _v25.a;
					var _v26 = _v25.b;
					var _v27 = _v26.a;
					var field0NameRange = _v27.a;
					var field0Name = _v27.b;
					var field0ValueNode = _v26.b;
					var field1Up = fields.b;
					return A4(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3,
						F3(
							function (recordVariableInferred, field0Inferred, field1UpInferred) {
								var _v28 = recordVariableInferred.value;
								if (_v28.$ === 'ExpressionReference') {
									var recordVariableReference = _v28.a;
									return A2(
										$elm$core$Result$andThen,
										function (recordVariableUnifiedWithUpdate) {
											return A3(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions,
												context.declarationTypes,
												recordVariableUnifiedWithUpdate.substitutions,
												{
													range: fullRange,
													type_: recordVariableInferred.type_,
													value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecordUpdate(
														{
															field0: field0Inferred,
															field1Up: field1UpInferred,
															recordVariable: {
																range: recordVariableInferred.range,
																type_: recordVariableInferred.type_,
																value: {moduleOrigin: recordVariableReference.moduleOrigin, name: recordVariableReference.name}
															}
														})
												});
										},
										A3(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify,
											{declarationTypes: context.declarationTypes, range: fullRange},
											recordVariableInferred.type_,
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(
													{
														fields: A3(
															$elm$core$List$foldl,
															F2(
																function (fieldInferred, soFar) {
																	return A3($miniBill$elm_fast_dict$FastDict$insert, fieldInferred.name, fieldInferred.value.type_, soFar);
																}),
															A2($miniBill$elm_fast_dict$FastDict$singleton, field0Inferred.name, field0Inferred.value.type_),
															field1UpInferred),
														recordVariable: {name: recordVariableReference.name, useRange: fullRange}
													}))));
								} else {
									return $elm$core$Result$Err('record update variable needs to be a reference to a lowercase value or function');
								}
							}),
						A2(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionReferenceTypeInfer,
							context,
							{fullRange: recordVariableRange, name: recordVariable, qualification: ''}),
						A2(
							$elm$core$Result$map,
							function (valueInferred) {
								return {name: field0Name, nameRange: field0NameRange, range: field0Range, value: valueInferred};
							},
							A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, field0ValueNode)),
						A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
							_List_Nil,
							F2(
								function (_v29, soFar) {
									var fieldRange = _v29.a;
									var _v30 = _v29.b;
									var _v31 = _v30.a;
									var nameRange = _v31.a;
									var name = _v31.b;
									var valueNode = _v30.b;
									return A2(
										$elm$core$Result$map,
										function (fieldValueInferred) {
											return A2(
												$elm$core$List$cons,
												{name: name, nameRange: nameRange, range: fieldRange, value: fieldValueInferred},
												soFar);
										},
										A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, valueNode));
								}),
							field1Up));
				}
			case 'LambdaExpression':
				var lambda = expression.a;
				var _v32 = lambda.args;
				if (!_v32.b) {
					return $elm$core$Result$Err(
						'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (') ' + 'lambda without parameter patterns is invalid syntax')));
				} else {
					var parameter0 = _v32.a;
					var parameter1Up = _v32.b;
					return A3(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
						F2(
							function (parameter0Inferred, parameter1UpInferred) {
								return A2(
									$elm$core$Result$andThen,
									function (resultInferred) {
										return A2(
											$elm$core$Result$andThen,
											function (parameterPatternVariablesAndUsesUnification) {
												return A3(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions,
													context.declarationTypes,
													parameterPatternVariablesAndUsesUnification.substitutions,
													{
														range: fullRange,
														type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																{
																	input: parameter0Inferred.type_,
																	output: A3(
																		$elm$core$List$foldr,
																		F2(
																			function (argumentTypedNode, output) {
																				return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																						{input: argumentTypedNode.type_, output: output}));
																			}),
																		resultInferred.type_,
																		parameter1UpInferred)
																})),
														value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionLambda(
															{parameter0: parameter0Inferred, parameter1Up: parameter1UpInferred, result: resultInferred})
													});
											},
											A3(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences,
												{declarationTypes: context.declarationTypes, range: fullRange},
												A2(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToFastDictsAndUnify,
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables,
													A2($elm$core$List$cons, parameter0Inferred, parameter1UpInferred)),
												resultInferred));
									},
									A2(
										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer,
										{
											declarationTypes: context.declarationTypes,
											locallyIntroducedDeclarationTypes: context.locallyIntroducedDeclarationTypes,
											locallyIntroducedExpressionVariables: A2(
												$miniBill$elm_fast_dict$FastDict$union,
												context.locallyIntroducedExpressionVariables,
												A3(
													$elm$core$List$foldl,
													F2(
														function (parameter, soFar) {
															return A2(
																$miniBill$elm_fast_dict$FastDict$union,
																soFar,
																$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(parameter));
														}),
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(parameter0Inferred),
													parameter1UpInferred)),
											moduleOriginLookup: context.moduleOriginLookup
										},
										lambda.expression));
							}),
						A2(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer,
							{declarationTypes: context.declarationTypes, moduleOriginLookup: context.moduleOriginLookup},
							parameter0),
						A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
							_List_Nil,
							F2(
								function (pattern, soFar) {
									return A2(
										$elm$core$Result$map,
										function (patternInferred) {
											return A2($elm$core$List$cons, patternInferred, soFar);
										},
										A2(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer,
											{declarationTypes: context.declarationTypes, moduleOriginLookup: context.moduleOriginLookup},
											pattern));
								}),
							parameter1Up));
				}
			case 'CaseExpression':
				var caseOf = expression.a;
				var _v33 = caseOf.cases;
				if (!_v33.b) {
					return $elm$core$Result$Err(
						'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (') ' + 'case-of without case branches is invalid syntax')));
				} else {
					var case0 = _v33.a;
					var case1Up = _v33.b;
					return A4(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3,
						F3(
							function (matchedInferred, case0Inferred, case1UpInferred) {
								var typeContext = {declarationTypes: context.declarationTypes, range: fullRange};
								return A2(
									$elm$core$Result$andThen,
									function (unifiedTypes) {
										return A3(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions,
											context.declarationTypes,
											unifiedTypes.substitutions,
											{
												range: fullRange,
												type_: case0Inferred.result.type_,
												value: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionCaseOf(
													{case0: case0Inferred, case1Up: case1UpInferred, matched: matchedInferred})
											});
									},
									A3(
										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult,
										A2(
											$elm$core$Result$map,
											function (matchedExpressionCase0PatternUnifiedType) {
												return {matchedType: matchedExpressionCase0PatternUnifiedType.type_, resultType: case0Inferred.result.type_, substitutions: matchedExpressionCase0PatternUnifiedType.substitutions};
											},
											A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, typeContext, matchedInferred.type_, case0Inferred.pattern.type_)),
										F2(
											function (caseInferred, soFar) {
												return A3(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
													F2(
														function (matchedTypeUnifiedWithCasePattern, resultTypeUnifiedWithCaseResult) {
															return A2(
																$elm$core$Result$map,
																function (substitutionsWithCase) {
																	return {matchedType: matchedTypeUnifiedWithCasePattern.type_, resultType: resultTypeUnifiedWithCaseResult.type_, substitutions: substitutionsWithCase};
																},
																A4($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3, typeContext, soFar.substitutions, matchedTypeUnifiedWithCasePattern.substitutions, resultTypeUnifiedWithCaseResult.substitutions));
														}),
													A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, typeContext, soFar.matchedType, caseInferred.pattern.type_),
													A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, typeContext, soFar.resultType, caseInferred.result.type_));
											}),
										case1UpInferred));
							}),
						A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, caseOf.expression),
						A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionCaseTypeInfer, context, case0),
						A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
							_List_Nil,
							F2(
								function (case_, soFar) {
									return A2(
										$elm$core$Result$map,
										function (caseInferred) {
											return A2($elm$core$List$cons, caseInferred, soFar);
										},
										A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionCaseTypeInfer, context, case_));
								}),
							case1Up));
				}
			case 'LetExpression':
				var letIn = expression.a;
				var _v34 = letIn.declarations;
				if (!_v34.b) {
					return $elm$core$Result$Err(
						'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (') ' + 'let-in without declarations is invalid syntax')));
				} else {
					var letDeclaration0Node = _v34.a;
					var letDeclaration1Up = _v34.b;
					return A2(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionLetInTypeInfer,
						context,
						{declaration0: letDeclaration0Node, declaration1Up: letDeclaration1Up, expression: letIn.expression, fullRange: fullRange});
				}
			case 'Operator':
				return $elm$core$Result$Err(
					'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (') ' + 'Elm.Syntax.Expression.Operator is not valid syntax')));
			default:
				return $elm$core$Result$Err(
					'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (') ' + 'glsl shader expressions not supported')));
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationTypeInfer = F2(
	function (context, _v5) {
		var letDeclarationRange = _v5.a;
		var letDeclaration = _v5.b;
		if (letDeclaration.$ === 'LetDestructuring') {
			var letDestructuringPattern = letDeclaration.a;
			var letDestructuringExpression = letDeclaration.b;
			return A3(
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
				F2(
					function (patternInferred, expressionInferred) {
						return A2(
							$elm$core$Result$andThen,
							function (patternExpressionUnified) {
								return A3(
									$elm$core$Result$map2,
									F2(
										function (patternWithUnificationSubstitutionsApplied, expressionWithUnificationSubstitutionsApplied) {
											return {
												declaration: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetDestructuring(
													{expression: expressionWithUnificationSubstitutionsApplied, pattern: patternWithUnificationSubstitutionsApplied}),
												range: letDeclarationRange
											};
										}),
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeApplyVariableSubstitutions, context.declarationTypes, patternExpressionUnified.substitutions, patternInferred),
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions, context.declarationTypes, patternExpressionUnified.substitutions, expressionInferred));
							},
							A3(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify,
								{declarationTypes: context.declarationTypes, range: letDeclarationRange},
								patternInferred.type_,
								expressionInferred.type_));
					}),
				A2(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer,
					{declarationTypes: context.declarationTypes, moduleOriginLookup: context.moduleOriginLookup},
					letDestructuringPattern),
				A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer, context, letDestructuringExpression));
		} else {
			var letValueOrFunction = letDeclaration.a;
			return A2(
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letFunctionOrValueDeclarationTypeInfer,
				context,
				A2($stil4m$elm_syntax$Elm$Syntax$Node$Node, letDeclarationRange, letValueOrFunction));
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letFunctionOrValueDeclarationTypeInfer = F2(
	function (context, _v0) {
		var letDeclarationRange = _v0.a;
		var letValueOrFunction = _v0.b;
		var implementation = $stil4m$elm_syntax$Elm$Syntax$Node$value(letValueOrFunction.declaration);
		return A2(
			$elm$core$Result$andThen,
			function (parametersInferred) {
				var typeContext = {declarationTypes: context.declarationTypes, range: letDeclarationRange};
				var name = $stil4m$elm_syntax$Elm$Syntax$Node$value(implementation.name);
				var _v1 = letValueOrFunction.signature;
				if (_v1.$ === 'Nothing') {
					return A2(
						$elm$core$Result$andThen,
						function (resultInferred) {
							var _v2 = implementation._arguments;
							if (!_v2.b) {
								return $elm$core$Result$Ok(
									{
										declaration: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetValueOrFunctionDeclaration(
											{
												name: name,
												nameRange: $stil4m$elm_syntax$Elm$Syntax$Node$range(implementation.name),
												parameters: _List_Nil,
												result: resultInferred,
												signature: $elm$core$Maybe$Nothing,
												type_: resultInferred.type_
											}),
										range: letDeclarationRange
									});
							} else {
								return A2(
									$elm$core$Result$andThen,
									function (parameterVariablesWithUsesUnification) {
										return A3(
											$elm$core$Result$map2,
											F2(
												function (parametersSubstituted, resultSubstituted) {
													return {
														declaration: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetValueOrFunctionDeclaration(
															{
																name: name,
																nameRange: $stil4m$elm_syntax$Elm$Syntax$Node$range(implementation.name),
																parameters: parametersSubstituted,
																result: resultSubstituted,
																signature: $elm$core$Maybe$Nothing,
																type_: A3(
																	$elm$core$List$foldr,
																	F2(
																		function (parameter, outputTypeSoFar) {
																			return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																					{input: parameter.type_, output: outputTypeSoFar}));
																		}),
																	resultSubstituted.type_,
																	parametersSubstituted)
															}),
														range: letDeclarationRange
													};
												}),
											A3(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
												_List_Nil,
												F2(
													function (parameterInferred, soFar) {
														return A2(
															$elm$core$Result$map,
															function (parameterSubstituted) {
																return A2($elm$core$List$cons, parameterSubstituted, soFar);
															},
															A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeApplyVariableSubstitutions, context.declarationTypes, parameterVariablesWithUsesUnification.substitutions, parameterInferred));
													}),
												parametersInferred.nodes),
											A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions, context.declarationTypes, parameterVariablesWithUsesUnification.substitutions, resultInferred));
									},
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences, typeContext, parametersInferred.introducedExpressionVariables, resultInferred));
							}
						},
						A2(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer,
							{
								declarationTypes: context.declarationTypes,
								locallyIntroducedDeclarationTypes: context.locallyIntroducedDeclarationTypes,
								locallyIntroducedExpressionVariables: A3(
									$miniBill$elm_fast_dict$FastDict$insert,
									name,
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
										{
											name: name,
											useRange: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxValueOrFunctionDeclarationRange(letValueOrFunction)
										}),
									A2($miniBill$elm_fast_dict$FastDict$union, parametersInferred.introducedExpressionVariables, context.locallyIntroducedExpressionVariables)),
								moduleOriginLookup: context.moduleOriginLookup
							},
							implementation.expression));
				} else {
					var _v3 = _v1.a;
					var signatureRange = _v3.a;
					var letValueOrFunctionSignature = _v3.b;
					return A2(
						$elm$core$Result$andThen,
						function (annotationAsType) {
							return A2(
								$elm$core$Result$andThen,
								function (resultInferred) {
									return A2(
										$elm$core$Result$andThen,
										function (typeUnifiedWithAnnotation) {
											return A2(
												$elm$core$Result$andThen,
												function (fullSubstitutions) {
													return A2(
														$elm$core$Result$map,
														function (letValueOrFunctionSubstituted) {
															return {
																declaration: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetValueOrFunctionDeclaration(letValueOrFunctionSubstituted),
																range: letDeclarationRange
															};
														},
														A3(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$annotatedLetValueOrFunctionDeclarationApplyVariableSubstitutions,
															typeContext,
															fullSubstitutions,
															{
																name: name,
																nameRange: $stil4m$elm_syntax$Elm$Syntax$Node$range(implementation.name),
																parameters: parametersInferred.nodes,
																result: resultInferred,
																signature: $elm$core$Maybe$Just(
																	{
																		annotationType: $stil4m$elm_syntax$Elm$Syntax$Node$value(letValueOrFunctionSignature.typeAnnotation),
																		annotationTypeRange: $stil4m$elm_syntax$Elm$Syntax$Node$range(letValueOrFunctionSignature.typeAnnotation),
																		nameRange: $stil4m$elm_syntax$Elm$Syntax$Node$range(letValueOrFunctionSignature.name),
																		range: signatureRange
																	}),
																type_: annotationAsType
															}));
												},
												function () {
													var _v4 = implementation._arguments;
													if (!_v4.b) {
														return $elm$core$Result$Ok(typeUnifiedWithAnnotation.substitutions);
													} else {
														return A2(
															$elm$core$Result$andThen,
															function (parameterVariablesWithUsesUnification) {
																return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, typeContext, parameterVariablesWithUsesUnification.substitutions, typeUnifiedWithAnnotation.substitutions);
															},
															A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences, typeContext, parametersInferred.introducedExpressionVariables, resultInferred));
													}
												}());
										},
										A3(
											$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify,
											typeContext,
											annotationAsType,
											A3(
												$elm$core$List$foldr,
												F2(
													function (parameterTypedNode, outputSoFar) {
														return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
															$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																{input: parameterTypedNode.type_, output: outputSoFar}));
													}),
												resultInferred.type_,
												parametersInferred.nodes)));
								},
								A2(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer,
									{
										declarationTypes: context.declarationTypes,
										locallyIntroducedDeclarationTypes: context.locallyIntroducedDeclarationTypes,
										locallyIntroducedExpressionVariables: A3(
											$miniBill$elm_fast_dict$FastDict$insert,
											name,
											annotationAsType,
											A2($miniBill$elm_fast_dict$FastDict$union, context.locallyIntroducedExpressionVariables, parametersInferred.introducedExpressionVariables)),
										moduleOriginLookup: context.moduleOriginLookup
									},
									implementation.expression));
						},
						A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToType, context.moduleOriginLookup.typeConstructs, letValueOrFunctionSignature.typeAnnotation));
				}
			},
			A2(
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$parameterPatternsTypeInfer,
				{declarationTypes: context.declarationTypes, moduleOriginLookup: context.moduleOriginLookup},
				implementation._arguments));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$moduleLevelValueOrFunctionDeclarationTypeInfer = F3(
	function (context, acrossValueAndFunctionDeclarationsToInfer, valueOrFunctionDeclarationToInfer) {
		var implementation = $stil4m$elm_syntax$Elm$Syntax$Node$value(valueOrFunctionDeclarationToInfer.declaration);
		return A2(
			$elm$core$Result$andThen,
			function (parametersInferred) {
				var valueOrFunctionDeclarationToInferRange = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxValueOrFunctionDeclarationRange(valueOrFunctionDeclarationToInfer);
				var typeContext = {declarationTypes: context.declarationTypes, range: valueOrFunctionDeclarationToInferRange};
				var name = $stil4m$elm_syntax$Elm$Syntax$Node$value(implementation.name);
				var maybeDocumentationAndRange = function () {
					var _v4 = valueOrFunctionDeclarationToInfer.documentation;
					if (_v4.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var _v5 = _v4.a;
						var documentationRange = _v5.a;
						var documentationContent = _v5.b;
						return $elm$core$Maybe$Just(
							{content: documentationContent, range: documentationRange});
					}
				}();
				var _v0 = valueOrFunctionDeclarationToInfer.signature;
				if (_v0.$ === 'Nothing') {
					return A2(
						$elm$core$Result$andThen,
						function (resultInferred) {
							var _v1 = parametersInferred.nodes;
							if (!_v1.b) {
								return $elm$core$Result$Ok(
									{
										documentation: maybeDocumentationAndRange,
										name: name,
										nameRange: $stil4m$elm_syntax$Elm$Syntax$Node$range(implementation.name),
										parameters: parametersInferred.nodes,
										result: resultInferred,
										signature: $elm$core$Maybe$Nothing,
										type_: A3(
											$elm$core$List$foldr,
											F2(
												function (parameterTypedNode, typeSoFar) {
													return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
															{input: parameterTypedNode.type_, output: typeSoFar}));
												}),
											resultInferred.type_,
											parametersInferred.nodes)
									});
							} else {
								return A2(
									$elm$core$Result$andThen,
									function (parameterPatternVariablesAndUsesUnification) {
										return A3(
											$elm$core$Result$map2,
											F2(
												function (resultSubstituted, parametersSubstituted) {
													return {
														documentation: maybeDocumentationAndRange,
														name: name,
														nameRange: $stil4m$elm_syntax$Elm$Syntax$Node$range(implementation.name),
														parameters: parametersSubstituted,
														result: resultSubstituted,
														signature: $elm$core$Maybe$Nothing,
														type_: A3(
															$elm$core$List$foldr,
															F2(
																function (parameterTypedNode, typeSoFar) {
																	return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
																		$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
																			{input: parameterTypedNode.type_, output: typeSoFar}));
																}),
															resultSubstituted.type_,
															parametersSubstituted)
													};
												}),
											A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions, context.declarationTypes, parameterPatternVariablesAndUsesUnification.substitutions, resultInferred),
											A3(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
												_List_Nil,
												F2(
													function (parameterInferred, parametersSubstitutedSoFar) {
														return A2(
															$elm$core$Result$map,
															function (parameterSubstituted) {
																return A2($elm$core$List$cons, parameterSubstituted, parametersSubstitutedSoFar);
															},
															A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeApplyVariableSubstitutions, context.declarationTypes, parameterPatternVariablesAndUsesUnification.substitutions, parameterInferred));
													}),
												parametersInferred.nodes));
									},
									A3(
										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences,
										typeContext,
										A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToFastDictsAndUnify, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables, parametersInferred.nodes),
										resultInferred));
							}
						},
						A2(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer,
							{
								declarationTypes: context.declarationTypes,
								locallyIntroducedDeclarationTypes: acrossValueAndFunctionDeclarationsToInfer.unannotatedInferredDeclarationTypes,
								locallyIntroducedExpressionVariables: A3(
									$miniBill$elm_fast_dict$FastDict$insert,
									name,
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
										{name: name, useRange: valueOrFunctionDeclarationToInferRange}),
									parametersInferred.introducedExpressionVariables),
								moduleOriginLookup: context.moduleOriginLookup
							},
							implementation.expression));
				} else {
					var _v2 = _v0.a;
					var signatureRange = _v2.a;
					var signature = _v2.b;
					var _v3 = A2($miniBill$elm_fast_dict$FastDict$get, name, acrossValueAndFunctionDeclarationsToInfer.annotated);
					if (_v3.$ === 'Nothing') {
						return $elm$core$Result$Err('bug in elm-syntax-type-infer: failed to retrieve annotation type for ' + name);
					} else {
						var annotationType = _v3.a;
						return A2(
							$elm$core$Result$andThen,
							function (resultInferred) {
								var inferredFullType = A3(
									$elm$core$List$foldr,
									F2(
										function (parameterTypedNode, typeSoFar) {
											return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(
													{input: parameterTypedNode.type_, output: typeSoFar}));
										}),
									resultInferred.type_,
									parametersInferred.nodes);
								return A3(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2,
									F2(
										function (inferredDeclarationTypeUnifiedWithAnnotation, parameterVariablesWithUsesUnification) {
											return A2(
												$elm$core$Result$andThen,
												function (fullSubstitutions) {
													return A3(
														$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$annotatedValueOrFunctionDeclarationApplyVariableSubstitutions,
														typeContext,
														fullSubstitutions,
														{
															documentation: maybeDocumentationAndRange,
															name: name,
															nameRange: $stil4m$elm_syntax$Elm$Syntax$Node$range(implementation.name),
															parameters: parametersInferred.nodes,
															result: resultInferred,
															signature: $elm$core$Maybe$Just(
																{
																	annotationType: $stil4m$elm_syntax$Elm$Syntax$Node$value(signature.typeAnnotation),
																	annotationTypeRange: $stil4m$elm_syntax$Elm$Syntax$Node$range(signature.typeAnnotation),
																	nameRange: $stil4m$elm_syntax$Elm$Syntax$Node$range(signature.name),
																	range: signatureRange
																}),
															type_: annotationType
														});
												},
												A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, typeContext, parameterVariablesWithUsesUnification.substitutions, inferredDeclarationTypeUnifiedWithAnnotation.substitutions));
										}),
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, typeContext, annotationType, inferredFullType),
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences, typeContext, parametersInferred.introducedExpressionVariables, resultInferred));
							},
							A2(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer,
								{
									declarationTypes: context.declarationTypes,
									locallyIntroducedDeclarationTypes: acrossValueAndFunctionDeclarationsToInfer.unannotatedInferredDeclarationTypes,
									locallyIntroducedExpressionVariables: A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToFastDictsAndUnify, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables, parametersInferred.nodes),
									moduleOriginLookup: context.moduleOriginLookup
								},
								implementation.expression));
					}
				}
			},
			A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$parameterPatternsTypeInfer, context, implementation._arguments));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsForInstanceUnifyingModuleDeclaredTypesWithUsesInExpression = F3(
	function (context, introducedDeclarations, expressionTypedNode) {
		return A3(
			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictFoldlWhileOkFrom,
			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
			F3(
				function (declarationName, usesInLambdaResult, soFar) {
					var _v0 = A2($miniBill$elm_fast_dict$FastDict$get, declarationName, introducedDeclarations);
					if (_v0.$ === 'Nothing') {
						return $elm$core$Result$Err(
							'(' + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.range) + (') ' + 'bug in elm-syntax-type-infer: collected uses of variable that wasn\'t asked for')));
					} else {
						var inferredDeclarationType = _v0.a;
						return A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ropeFoldlWhileOkFrom,
							soFar,
							F3(
								function (useRange, useType, soFarWithUses) {
									var newDeclarationTypeInstanceForUse = A2(
										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables,
										function (inferredDeclarationTypeVariable) {
											return {name: inferredDeclarationTypeVariable.name, useRange: useRange};
										},
										inferredDeclarationType.type_);
									return A2(
										$elm$core$Result$andThen,
										function (useUnifiedWithNewLetTypeInstance) {
											return A2(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typesAreEquallyStrict,
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(useUnifiedWithNewLetTypeInstance.type_),
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(useType)) ? A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariableSetMergeIntoVariableSubstitutionsWithVariableToType, soFarWithUses.variableToType, soFarWithUses.equivalentVariables, useUnifiedWithNewLetTypeInstance.substitutions.equivalentVariables) : A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, context, soFarWithUses, useUnifiedWithNewLetTypeInstance.substitutions);
										},
										A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, context, useType, newDeclarationTypeInstanceForUse));
								}),
							usesInLambdaResult);
					}
				}),
			A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, introducedDeclarations, expressionTypedNode));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$unannotatedInferredDeclarationTypesEmptyAndAnnotatedEmpty = {annotated: $miniBill$elm_fast_dict$FastDict$empty, unannotatedInferredDeclarationTypes: $miniBill$elm_fast_dict$FastDict$empty};
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (_v0.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return A2($elm$core$Dict$member, key, dict);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueOrFunctionDeclarationRange = function (valueOrFunctionDeclarationInfo) {
	return {
		end: valueOrFunctionDeclarationInfo.result.range.end,
		start: function () {
			var _v0 = valueOrFunctionDeclarationInfo.documentation;
			if (_v0.$ === 'Just') {
				var documentation = _v0.a;
				return documentation.range.start;
			} else {
				var _v1 = valueOrFunctionDeclarationInfo.signature;
				if (_v1.$ === 'Just') {
					var signature = _v1.a;
					return signature.range.start;
				} else {
					return valueOrFunctionDeclarationInfo.nameRange.start;
				}
			}
		}()
	};
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarationsGetPartiallyInferred = function (valueAndFunctionDeclarationsSoFar) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (valueOrFunctionDeclaration, moduleLevelPartiallyInferredDeclarationsSoFar) {
				var _v0 = valueOrFunctionDeclaration.signature;
				if (_v0.$ === 'Just') {
					return moduleLevelPartiallyInferredDeclarationsSoFar;
				} else {
					return A3(
						$miniBill$elm_fast_dict$FastDict$insert,
						valueOrFunctionDeclaration.name,
						{
							range: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueOrFunctionDeclarationRange(valueOrFunctionDeclaration),
							type_: valueOrFunctionDeclaration.type_
						},
						moduleLevelPartiallyInferredDeclarationsSoFar);
				}
			}),
		$miniBill$elm_fast_dict$FastDict$empty,
		valueAndFunctionDeclarationsSoFar);
};
var $elm$core$Set$Set_elm_builtin = function (a) {
	return {$: 'Set_elm_builtin', a: a};
};
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A3($elm$core$Dict$insert, key, _Utils_Tuple0, dict));
	});
var $elm$core$Set$empty = $elm$core$Set$Set_elm_builtin($elm$core$Dict$empty);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneDeclarationsListEmptyUnchangedDeclarationsSetEmpty = {declarations: _List_Nil, substitutions: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, unchangedDeclarations: $elm$core$Set$empty};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueOrFunctionDeclarationSubstituteVariableByType = F3(
	function (declarationTypes, replacement, declarationValueOrFunctionSoFar) {
		var typeContext = {
			declarationTypes: declarationTypes,
			range: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueOrFunctionDeclarationRange(declarationValueOrFunctionSoFar)
		};
		return A4(
			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3,
			F3(
				function (typeSubstituted, parametersSubstituted, resultSubstituted) {
					return (typeSubstituted.unchanged && (parametersSubstituted.allUnchanged && resultSubstituted.unchanged)) ? $elm$core$Result$Ok(
						{declaration: declarationValueOrFunctionSoFar, substitutions: parametersSubstituted.substitutions, unchanged: true}) : A2(
						$elm$core$Result$map,
						function (fullSubstitutions) {
							return {
								declaration: {documentation: declarationValueOrFunctionSoFar.documentation, name: declarationValueOrFunctionSoFar.name, nameRange: declarationValueOrFunctionSoFar.nameRange, parameters: parametersSubstituted.nodes, result: resultSubstituted.node, signature: declarationValueOrFunctionSoFar.signature, type_: typeSubstituted.type_},
								substitutions: fullSubstitutions,
								unchanged: false
							};
						},
						A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, typeContext, parametersSubstituted.substitutions, resultSubstituted.substitutions));
				}),
			A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType, typeContext, replacement, declarationValueOrFunctionSoFar.type_),
			A3(
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
				$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue,
				F2(
					function (patternTypedNode, soFar) {
						return A2(
							$elm$core$Result$andThen,
							function (patternSubstituted) {
								return patternSubstituted.unchanged ? $elm$core$Result$Ok(
									{
										allUnchanged: soFar.allUnchanged,
										nodes: A2($elm$core$List$cons, patternTypedNode, soFar.nodes),
										substitutions: soFar.substitutions
									}) : A2(
									$elm$core$Result$map,
									function (fullSubstitutions) {
										return {
											allUnchanged: false,
											nodes: A2($elm$core$List$cons, patternSubstituted.node, soFar.nodes),
											substitutions: fullSubstitutions
										};
									},
									A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, typeContext, patternSubstituted.substitutions, soFar.substitutions));
							},
							A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType, declarationTypes, replacement, patternTypedNode));
					}),
				declarationValueOrFunctionSoFar.parameters),
			A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType, declarationTypes, replacement, declarationValueOrFunctionSoFar.result));
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarationsSubstituteVariableByType = F3(
	function (declarationTypes, substitutionToApply, valueAndFunctionDeclarationsToApplySubstitutionTo) {
		return A3(
			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom,
			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneDeclarationsListEmptyUnchangedDeclarationsSetEmpty,
			F2(
				function (declarationToSubstituteIn, soFar) {
					return A2(
						$elm$core$Result$mapError,
						function (substitutionError) {
							return 'I inferred various parts of the value/function declaration ' + (declarationToSubstituteIn.name + (' but there was a problem after substituting pieces of knowledge: ' + substitutionError));
						},
						A2(
							$elm$core$Result$andThen,
							function (declarationSubstituted) {
								return declarationSubstituted.unchanged ? $elm$core$Result$Ok(
									{
										declarations: A2($elm$core$List$cons, declarationToSubstituteIn, soFar.declarations),
										substitutions: soFar.substitutions,
										unchangedDeclarations: A2($elm$core$Set$insert, declarationToSubstituteIn.name, soFar.unchangedDeclarations)
									}) : A2(
									$elm$core$Result$map,
									function (fullSubstitutions) {
										return {
											declarations: A2($elm$core$List$cons, declarationSubstituted.declaration, soFar.declarations),
											substitutions: fullSubstitutions,
											unchangedDeclarations: soFar.unchangedDeclarations
										};
									},
									A3(
										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge,
										{declarationTypes: declarationTypes, range: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$everywhereRange},
										soFar.substitutions,
										declarationSubstituted.substitutions));
							},
							A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueOrFunctionDeclarationSubstituteVariableByType, declarationTypes, substitutionToApply, declarationToSubstituteIn)));
				}),
			valueAndFunctionDeclarationsToApplySubstitutionTo);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarationsUsesOfLocalReferences = F2(
	function (localReferencesToCollect, inferredValueAndFunctionDeclarations) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (valueOrFunctionDeclaration, usesSoFar) {
					return A2(
						$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge,
						usesSoFar,
						A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences, localReferencesToCollect, valueOrFunctionDeclaration.result));
				}),
			$miniBill$elm_fast_dict$FastDict$empty,
			inferredValueAndFunctionDeclarations);
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarationsApplyVariableSubstitutions = F3(
	function (declarationTypes, substitutionsToApply, valueAndFunctionDeclarationsSoFar) {
		valueAndFunctionDeclarationsApplyVariableSubstitutions:
		while (true) {
			if ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsIsNone(substitutionsToApply)) {
				return $elm$core$Result$Ok(valueAndFunctionDeclarationsSoFar);
			} else {
				var everywhereTypeContext = {declarationTypes: declarationTypes, range: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$everywhereRange};
				var _v0 = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$createBatchOfSubstitutionsToApply, everywhereTypeContext, substitutionsToApply);
				if (_v0.$ === 'Err') {
					var error = _v0.a;
					return $elm$core$Result$Err(error);
				} else {
					var batchOfSubstitutionsToApply = _v0.a;
					var _v1 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarationsSubstituteVariableByType, declarationTypes, batchOfSubstitutionsToApply.substituteVariableByType, valueAndFunctionDeclarationsSoFar);
					if (_v1.$ === 'Err') {
						var error = _v1.a;
						return $elm$core$Result$Err(error);
					} else {
						var valueAndFunctionDeclarationsSubstituted = _v1.a;
						var moduleLevelPartiallyInferredDeclarations = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarationsGetPartiallyInferred(valueAndFunctionDeclarationsSoFar);
						var allPartiallyInferredDeclarationsAndUsesAfterSubstitution = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarationsUsesOfLocalReferences, moduleLevelPartiallyInferredDeclarations, valueAndFunctionDeclarationsSubstituted.declarations);
						var substitutionsOfPartiallyInferredDeclarationUses = A3(
							$elm$core$List$foldl,
							F2(
								function (inferredDeclarationAfterSubstituting, soFar) {
									var _v4 = A2($miniBill$elm_fast_dict$FastDict$get, inferredDeclarationAfterSubstituting.name, allPartiallyInferredDeclarationsAndUsesAfterSubstitution);
									if (_v4.$ === 'Nothing') {
										return soFar;
									} else {
										var uses = _v4.a;
										return A2($elm$core$Set$member, inferredDeclarationAfterSubstituting.name, valueAndFunctionDeclarationsSubstituted.unchangedDeclarations) ? A2(
											$elm$core$List$cons,
											{partiallyInferredDeclarationType: inferredDeclarationAfterSubstituting.type_, uses: uses},
											soFar) : soFar;
									}
								}),
							_List_Nil,
							valueAndFunctionDeclarationsSubstituted.declarations);
						var updatePartiallyInferredSubstitutionsOrError = A3(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom,
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
							F2(
								function (substitutionOfPartiallyInferredDeclaration, substitutionsSoFar) {
									return A3(
										$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ropeFoldlWhileOkFrom,
										substitutionsSoFar,
										F3(
											function (useRange, useType, unificationSubstitutionsWithUsesSoFar) {
												var partialTypeNewInstance = A2(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables,
													function (declarationTypeVariable) {
														return {name: declarationTypeVariable.name, useRange: useRange};
													},
													substitutionOfPartiallyInferredDeclaration.partiallyInferredDeclarationType);
												return A2(
													$elm$core$Result$andThen,
													function (unified) {
														return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge, everywhereTypeContext, unificationSubstitutionsWithUsesSoFar, unified.substitutions);
													},
													A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify, everywhereTypeContext, partialTypeNewInstance, useType));
											}),
										substitutionOfPartiallyInferredDeclaration.uses);
								}),
							substitutionsOfPartiallyInferredDeclarationUses);
						if (updatePartiallyInferredSubstitutionsOrError.$ === 'Err') {
							var error = updatePartiallyInferredSubstitutionsOrError.a;
							return $elm$core$Result$Err(error);
						} else {
							var updatePartiallyInferredSubstitutions = updatePartiallyInferredSubstitutionsOrError.a;
							var _v3 = A4(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3,
								everywhereTypeContext,
								valueAndFunctionDeclarationsSubstituted.substitutions,
								updatePartiallyInferredSubstitutions,
								{equivalentVariables: batchOfSubstitutionsToApply.newEquivalentVariables, variableToType: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty});
							if (_v3.$ === 'Err') {
								var error = _v3.a;
								return $elm$core$Result$Err(error);
							} else {
								var substitutionsAfterSubstitution = _v3.a;
								var $temp$declarationTypes = declarationTypes,
									$temp$substitutionsToApply = substitutionsAfterSubstitution,
									$temp$valueAndFunctionDeclarationsSoFar = valueAndFunctionDeclarationsSubstituted.declarations;
								declarationTypes = $temp$declarationTypes;
								substitutionsToApply = $temp$substitutionsToApply;
								valueAndFunctionDeclarationsSoFar = $temp$valueAndFunctionDeclarationsSoFar;
								continue valueAndFunctionDeclarationsApplyVariableSubstitutions;
							}
						}
					}
				}
			}
		}
	});
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarations = F2(
	function (context, syntaxValueAndFunctionDeclarations) {
		var moduleOriginLookup = {
			ignoreOperatorIsExposedFromParserAdvanced: context.moduleOriginLookup.ignoreOperatorIsExposedFromParserAdvanced,
			keepOperatorIsExposedFromParserAdvanced: context.moduleOriginLookup.keepOperatorIsExposedFromParserAdvanced,
			references: A3(
				$miniBill$elm_fast_dict$FastDict$update,
				'',
				function (existingExposedReferences) {
					return $elm$core$Maybe$Just(
						A3(
							$miniBill$elm_fast_dict$FastDict$foldl,
							F3(
								function (_v5, info, soFar) {
									return A3(
										$miniBill$elm_fast_dict$FastDict$foldl,
										F3(
											function (variantName, _v6, soFarWithVariantNames) {
												return A3($miniBill$elm_fast_dict$FastDict$insert, variantName, context.moduleName, soFarWithVariantNames);
											}),
										soFar,
										info.variants);
								}),
							A3(
								$miniBill$elm_fast_dict$FastDict$foldl,
								F3(
									function (typeAliasName, info, soFar) {
										var _v7 = info.recordFieldOrder;
										if (_v7.$ === 'Nothing') {
											return soFar;
										} else {
											return A3($miniBill$elm_fast_dict$FastDict$insert, typeAliasName, context.moduleName, soFar);
										}
									}),
								A3(
									$miniBill$elm_fast_dict$FastDict$foldl,
									F3(
										function (signatureName, _v8, soFar) {
											return A3($miniBill$elm_fast_dict$FastDict$insert, signatureName, context.moduleName, soFar);
										}),
									A3(
										$elm$core$List$foldl,
										F2(
											function (valueOrFunctionDeclaration, soFar) {
												return A3(
													$miniBill$elm_fast_dict$FastDict$insert,
													$stil4m$elm_syntax$Elm$Syntax$Node$value(
														$stil4m$elm_syntax$Elm$Syntax$Node$value(valueOrFunctionDeclaration.declaration).name),
													context.moduleName,
													soFar);
											}),
										A2($elm$core$Maybe$withDefault, $miniBill$elm_fast_dict$FastDict$empty, existingExposedReferences),
										syntaxValueAndFunctionDeclarations),
									context.otherModuleDeclaredTypes.signatures),
								context.otherModuleDeclaredTypes.typeAliases),
							context.otherModuleDeclaredTypes.choiceTypes));
				},
				context.moduleOriginLookup.references),
			typeConstructs: A3(
				$miniBill$elm_fast_dict$FastDict$update,
				'',
				function (existingExposedTypeConstructs) {
					return $elm$core$Maybe$Just(
						A3(
							$miniBill$elm_fast_dict$FastDict$foldl,
							F3(
								function (choiceTypeName, _v9, soFar) {
									return A3($miniBill$elm_fast_dict$FastDict$insert, choiceTypeName, context.moduleName, soFar);
								}),
							A3(
								$miniBill$elm_fast_dict$FastDict$foldl,
								F3(
									function (typeAliasName, _v10, soFar) {
										return A3($miniBill$elm_fast_dict$FastDict$insert, typeAliasName, context.moduleName, soFar);
									}),
								A2($elm$core$Maybe$withDefault, $miniBill$elm_fast_dict$FastDict$empty, existingExposedTypeConstructs),
								context.otherModuleDeclaredTypes.typeAliases),
							context.otherModuleDeclaredTypes.choiceTypes));
				},
				context.moduleOriginLookup.typeConstructs)
		};
		var acrossValueAndFunctionDeclarationsToInfer = A3(
			$elm$core$List$foldl,
			F2(
				function (syntaxValueOrFunctionDeclaration, soFar) {
					var name = $stil4m$elm_syntax$Elm$Syntax$Node$value(
						$stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxValueOrFunctionDeclaration.declaration).name);
					var _v2 = syntaxValueOrFunctionDeclaration.signature;
					if (_v2.$ === 'Nothing') {
						var declarationRange = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxValueOrFunctionDeclarationRange(syntaxValueOrFunctionDeclaration);
						return {
							annotated: soFar.annotated,
							unannotatedInferredDeclarationTypes: A3(
								$miniBill$elm_fast_dict$FastDict$insert,
								name,
								{
									moduleLevel: context.moduleName,
									range: declarationRange,
									type_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(
										{name: name, useRange: declarationRange})
								},
								soFar.unannotatedInferredDeclarationTypes)
						};
					} else {
						var _v3 = _v2.a;
						var signature = _v3.b;
						var _v4 = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToType, moduleOriginLookup.typeConstructs, signature.typeAnnotation);
						if (_v4.$ === 'Err') {
							return soFar;
						} else {
							var type_ = _v4.a;
							return {
								annotated: A3($miniBill$elm_fast_dict$FastDict$insert, name, type_, soFar.annotated),
								unannotatedInferredDeclarationTypes: soFar.unannotatedInferredDeclarationTypes
							};
						}
					}
				}),
			$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$unannotatedInferredDeclarationTypesEmptyAndAnnotatedEmpty,
			syntaxValueAndFunctionDeclarations);
		var declarationTypes = A3(
			$miniBill$elm_fast_dict$FastDict$insert,
			context.moduleName,
			{
				choiceTypes: context.otherModuleDeclaredTypes.choiceTypes,
				signatures: A2($miniBill$elm_fast_dict$FastDict$union, context.otherModuleDeclaredTypes.signatures, acrossValueAndFunctionDeclarationsToInfer.annotated),
				typeAliases: context.otherModuleDeclaredTypes.typeAliases
			},
			context.importedTypes);
		var declarationTypeInferContext = {declarationTypes: declarationTypes, moduleOriginLookup: moduleOriginLookup};
		return A2(
			$elm$core$Result$map,
			function (fullySubstitutedDeclarationsTypedWithContext) {
				return A3(
					$elm$core$List$foldl,
					F2(
						function (declaration, soFar) {
							return A2(
								$elm$core$List$cons,
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$declarationValueOrFunctionDisambiguateTypeVariables(declaration),
								soFar);
						}),
					_List_Nil,
					fullySubstitutedDeclarationsTypedWithContext);
			},
			A2(
				$elm$core$Result$andThen,
				function (declarationsInferredIndependentOfOtherLocalUnannotatedDeclarations) {
					if ($miniBill$elm_fast_dict$FastDict$isEmpty(acrossValueAndFunctionDeclarationsToInfer.unannotatedInferredDeclarationTypes)) {
						return $elm$core$Result$Ok(declarationsInferredIndependentOfOtherLocalUnannotatedDeclarations);
					} else {
						var unannotatedDeclarationTypes = A3(
							$elm$core$List$foldl,
							F2(
								function (declaration, soFar) {
									var _v1 = declaration.signature;
									if (_v1.$ === 'Just') {
										return soFar;
									} else {
										return A3(
											$miniBill$elm_fast_dict$FastDict$insert,
											declaration.name,
											{
												range: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueOrFunctionDeclarationRange(declaration),
												type_: declaration.type_
											},
											soFar);
									}
								}),
							$miniBill$elm_fast_dict$FastDict$empty,
							declarationsInferredIndependentOfOtherLocalUnannotatedDeclarations);
						return A2(
							$elm$core$Result$andThen,
							function (substitutionsForInstanceUnifyingUnannotatedDeclarationTypesWithUses) {
								return A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarationsApplyVariableSubstitutions, declarationTypes, substitutionsForInstanceUnifyingUnannotatedDeclarationTypesWithUses, declarationsInferredIndependentOfOtherLocalUnannotatedDeclarations);
							},
							A3(
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom,
								$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
								F2(
									function (declaration, soFar) {
										return A2(
											$elm$core$Result$andThen,
											function (resultSubstitutions) {
												return A3(
													$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge,
													{declarationTypes: declarationTypes, range: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$everywhereRange},
													soFar,
													resultSubstitutions);
											},
											A3(
												$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsForInstanceUnifyingModuleDeclaredTypesWithUsesInExpression,
												{
													declarationTypes: declarationTypes,
													range: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueOrFunctionDeclarationRange(declaration)
												},
												unannotatedDeclarationTypes,
												declaration.result));
									}),
								declarationsInferredIndependentOfOtherLocalUnannotatedDeclarations));
					}
				},
				A3(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom,
					_List_Nil,
					F2(
						function (valueOrFunctionDeclarationToInfer, soFar) {
							var _v0 = A3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$moduleLevelValueOrFunctionDeclarationTypeInfer, declarationTypeInferContext, acrossValueAndFunctionDeclarationsToInfer, valueOrFunctionDeclarationToInfer);
							if (_v0.$ === 'Ok') {
								var inferred = _v0.a;
								return $elm$core$Result$Ok(
									A2($elm$core$List$cons, inferred, soFar));
							} else {
								var inferError = _v0.a;
								return $elm$core$Result$Err(
									'inferring the value/function declaration ' + ($stil4m$elm_syntax$Elm$Syntax$Node$value(
										$stil4m$elm_syntax$Elm$Syntax$Node$value(valueOrFunctionDeclarationToInfer.declaration).name) + (', ' + inferError)));
							}
						}),
					syntaxValueAndFunctionDeclarations)));
	});
var $author$project$ElmSyntaxToRust$RustExpressionReference = function (a) {
	return {$: 'RustExpressionReference', a: a};
};
var $author$project$ElmSyntaxToRust$RustPatternVariable = function (a) {
	return {$: 'RustPatternVariable', a: a};
};
var $author$project$ElmSyntaxToRust$RustTypeBorrow = function (a) {
	return {$: 'RustTypeBorrow', a: a};
};
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $author$project$ElmSyntaxToRust$RustExpressionAfterStatement = function (a) {
	return {$: 'RustExpressionAfterStatement', a: a};
};
var $author$project$ElmSyntaxToRust$RustExpressionArrayLiteral = function (a) {
	return {$: 'RustExpressionArrayLiteral', a: a};
};
var $author$project$ElmSyntaxToRust$RustExpressionBorrow = function (a) {
	return {$: 'RustExpressionBorrow', a: a};
};
var $author$project$ElmSyntaxToRust$RustExpressionF64 = function (a) {
	return {$: 'RustExpressionF64', a: a};
};
var $author$project$ElmSyntaxToRust$RustExpressionIfElse = function (a) {
	return {$: 'RustExpressionIfElse', a: a};
};
var $author$project$ElmSyntaxToRust$RustExpressionMatch = function (a) {
	return {$: 'RustExpressionMatch', a: a};
};
var $author$project$ElmSyntaxToRust$RustExpressionNegateOperation = function (a) {
	return {$: 'RustExpressionNegateOperation', a: a};
};
var $author$project$ElmSyntaxToRust$RustExpressionRecord = function (a) {
	return {$: 'RustExpressionRecord', a: a};
};
var $author$project$ElmSyntaxToRust$RustExpressionRecordAccess = function (a) {
	return {$: 'RustExpressionRecordAccess', a: a};
};
var $author$project$ElmSyntaxToRust$RustExpressionStringLiteral = function (a) {
	return {$: 'RustExpressionStringLiteral', a: a};
};
var $author$project$ElmSyntaxToRust$RustExpressionUnicodeScalar = function (a) {
	return {$: 'RustExpressionUnicodeScalar', a: a};
};
var $author$project$ElmSyntaxToRust$RustExpressionUnit = {$: 'RustExpressionUnit'};
var $author$project$ElmSyntaxToRust$RustExpressionVariant = function (a) {
	return {$: 'RustExpressionVariant', a: a};
};
var $author$project$ElmSyntaxToRust$RustStatementFuncDeclaration = function (a) {
	return {$: 'RustStatementFuncDeclaration', a: a};
};
var $author$project$ElmSyntaxToRust$RustStatementLetDeclaration = function (a) {
	return {$: 'RustStatementLetDeclaration', a: a};
};
var $author$project$ElmSyntaxToRust$RustStatementLetDestructuring = function (a) {
	return {$: 'RustStatementLetDestructuring', a: a};
};
var $author$project$ElmSyntaxToRust$okReferenceAdd = $elm$core$Result$Ok(
	{name: 'basics_add', qualification: _List_Nil, requiresAllocator: false});
var $author$project$ElmSyntaxToRust$okReferenceAnd = $elm$core$Result$Ok(
	{name: 'basics_and', qualification: _List_Nil, requiresAllocator: false});
var $author$project$ElmSyntaxToRust$okReferenceApL = $elm$core$Result$Ok(
	{name: 'basics_apl', qualification: _List_Nil, requiresAllocator: false});
var $author$project$ElmSyntaxToRust$okReferenceApR = $elm$core$Result$Ok(
	{name: 'basics_apr', qualification: _List_Nil, requiresAllocator: false});
var $author$project$ElmSyntaxToRust$okReferenceComposeL = $elm$core$Result$Ok(
	{name: 'basics_composel', qualification: _List_Nil, requiresAllocator: false});
var $author$project$ElmSyntaxToRust$okReferenceComposeR = $elm$core$Result$Ok(
	{name: 'basics_composer', qualification: _List_Nil, requiresAllocator: false});
var $author$project$ElmSyntaxToRust$okReferenceEq = $elm$core$Result$Ok(
	{name: 'basics_eq', qualification: _List_Nil, requiresAllocator: false});
var $author$project$ElmSyntaxToRust$okReferenceFdiv = $elm$core$Result$Ok(
	{name: 'basics_fdiv', qualification: _List_Nil, requiresAllocator: false});
var $author$project$ElmSyntaxToRust$okReferenceGe = $elm$core$Result$Ok(
	{name: 'basics_ge', qualification: _List_Nil, requiresAllocator: false});
var $author$project$ElmSyntaxToRust$okReferenceGt = $elm$core$Result$Ok(
	{name: 'basics_gt', qualification: _List_Nil, requiresAllocator: false});
var $author$project$ElmSyntaxToRust$okReferenceIdiv = $elm$core$Result$Ok(
	{name: 'basics_idiv', qualification: _List_Nil, requiresAllocator: false});
var $author$project$ElmSyntaxToRust$okReferenceLe = $elm$core$Result$Ok(
	{name: 'basics_le', qualification: _List_Nil, requiresAllocator: false});
var $author$project$ElmSyntaxToRust$okReferenceListAppend = $elm$core$Result$Ok(
	{name: 'list_append', qualification: _List_Nil, requiresAllocator: true});
var $author$project$ElmSyntaxToRust$okReferenceListCons = $elm$core$Result$Ok(
	{name: 'list_cons', qualification: _List_Nil, requiresAllocator: true});
var $author$project$ElmSyntaxToRust$okReferenceLt = $elm$core$Result$Ok(
	{name: 'basics_lt', qualification: _List_Nil, requiresAllocator: false});
var $author$project$ElmSyntaxToRust$okReferenceMul = $elm$core$Result$Ok(
	{name: 'basics_mul', qualification: _List_Nil, requiresAllocator: false});
var $author$project$ElmSyntaxToRust$okReferenceNeq = $elm$core$Result$Ok(
	{name: 'basics_neq', qualification: _List_Nil, requiresAllocator: false});
var $author$project$ElmSyntaxToRust$okReferenceOr = $elm$core$Result$Ok(
	{name: 'basics_or', qualification: _List_Nil, requiresAllocator: false});
var $author$project$ElmSyntaxToRust$okReferenceParserAdvancedIgnorer = $elm$core$Result$Ok(
	{name: 'parser_advanced_ignorer', qualification: _List_Nil, requiresAllocator: true});
var $author$project$ElmSyntaxToRust$okReferenceParserAdvancedKeeper = $elm$core$Result$Ok(
	{name: 'parser_advanced_keeper', qualification: _List_Nil, requiresAllocator: true});
var $author$project$ElmSyntaxToRust$okReferencePow = $elm$core$Result$Ok(
	{name: 'basics_pow', qualification: _List_Nil, requiresAllocator: false});
var $author$project$ElmSyntaxToRust$okReferenceStringAppend = $elm$core$Result$Ok(
	{name: 'string_append', qualification: _List_Nil, requiresAllocator: true});
var $author$project$ElmSyntaxToRust$okReferenceSub = $elm$core$Result$Ok(
	{name: 'basics_sub', qualification: _List_Nil, requiresAllocator: false});
var $author$project$ElmSyntaxToRust$okReferenceUrlParserQuestionMark = $elm$core$Result$Ok(
	{name: 'url_parser_question_mark', qualification: _List_Nil, requiresAllocator: true});
var $author$project$ElmSyntaxToRust$okReferenceUrlParserSlash = $elm$core$Result$Ok(
	{name: 'url_parser_slash', qualification: _List_Nil, requiresAllocator: true});
var $author$project$ElmSyntaxToRust$expressionOperatorToRustFunctionReference = function (operator) {
	var _v0 = operator.symbol;
	switch (_v0) {
		case '+':
			return $author$project$ElmSyntaxToRust$okReferenceAdd;
		case '-':
			return $author$project$ElmSyntaxToRust$okReferenceSub;
		case '*':
			return $author$project$ElmSyntaxToRust$okReferenceMul;
		case '/':
			return $author$project$ElmSyntaxToRust$okReferenceFdiv;
		case '//':
			return $author$project$ElmSyntaxToRust$okReferenceIdiv;
		case '^':
			return $author$project$ElmSyntaxToRust$okReferencePow;
		case '==':
			return $author$project$ElmSyntaxToRust$okReferenceEq;
		case '/=':
			return $author$project$ElmSyntaxToRust$okReferenceNeq;
		case '||':
			return $author$project$ElmSyntaxToRust$okReferenceOr;
		case '&&':
			return $author$project$ElmSyntaxToRust$okReferenceAnd;
		case '<':
			return $author$project$ElmSyntaxToRust$okReferenceLt;
		case '>':
			return $author$project$ElmSyntaxToRust$okReferenceGt;
		case '<=':
			return $author$project$ElmSyntaxToRust$okReferenceLe;
		case '>=':
			return $author$project$ElmSyntaxToRust$okReferenceGe;
		case '::':
			return $author$project$ElmSyntaxToRust$okReferenceListCons;
		case '++':
			var _v1 = operator.type_;
			if ((_v1.$ === 'TypeNotVariable') && (_v1.a.$ === 'TypeFunction')) {
				var typeFunction = _v1.a.a;
				return _Utils_eq(typeFunction.input, $author$project$ElmSyntaxToRust$inferredTypeString) ? $author$project$ElmSyntaxToRust$okReferenceStringAppend : $author$project$ElmSyntaxToRust$okReferenceListAppend;
			} else {
				return $author$project$ElmSyntaxToRust$okReferenceListAppend;
			}
		case '|>':
			return $author$project$ElmSyntaxToRust$okReferenceApR;
		case '<|':
			return $author$project$ElmSyntaxToRust$okReferenceApL;
		case '>>':
			return $author$project$ElmSyntaxToRust$okReferenceComposeR;
		case '<<':
			return $author$project$ElmSyntaxToRust$okReferenceComposeL;
		case '|=':
			return $author$project$ElmSyntaxToRust$okReferenceParserAdvancedKeeper;
		case '|.':
			return $author$project$ElmSyntaxToRust$okReferenceParserAdvancedIgnorer;
		case '</>':
			return $author$project$ElmSyntaxToRust$okReferenceUrlParserSlash;
		case '<?>':
			return $author$project$ElmSyntaxToRust$okReferenceUrlParserQuestionMark;
		default:
			var unknownOrUnsupportedOperator = _v0;
			return $elm$core$Result$Err('unknown/unsupported operator ' + unknownOrUnsupportedOperator);
	}
};
var $author$project$ElmSyntaxToRust$generatedAccessedRecordVariableName = 'generated_record';
var $author$project$ElmSyntaxToRust$generatedAllocatorVariableName = 'generated_allocator';
var $author$project$ElmSyntaxToRust$generatedFieldValueParameterName = function (fieldName) {
	return 'generated_' + fieldName;
};
var $author$project$ElmSyntaxToRust$generatedParameterNameForIndexAtPath = F2(
	function (index, path) {
		return 'generated_' + (A2($elm$core$String$join, '_', path) + ('_' + $elm$core$String$fromInt(index)));
	});
var $miniBill$elm_fast_dict$FastSet$singleton = function (value) {
	return $miniBill$elm_fast_dict$FastSet$Set(
		A2($miniBill$elm_fast_dict$FastDict$singleton, value, false));
};
var $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences = function (inferredExpressionTypedNode) {
	return $author$project$ElmSyntaxToRust$inferredExpressionUsedLocalReferences(inferredExpressionTypedNode.value);
};
var $author$project$ElmSyntaxToRust$inferredExpressionUsedLocalReferences = function (inferredExpression) {
	switch (inferredExpression.$) {
		case 'ExpressionUnit':
			return $miniBill$elm_fast_dict$FastSet$empty;
		case 'ExpressionReferenceVariant':
			return $miniBill$elm_fast_dict$FastSet$empty;
		case 'ExpressionReferenceRecordTypeAliasConstructorFunction':
			return $miniBill$elm_fast_dict$FastSet$empty;
		case 'ExpressionInteger':
			return $miniBill$elm_fast_dict$FastSet$empty;
		case 'ExpressionFloat':
			return $miniBill$elm_fast_dict$FastSet$empty;
		case 'ExpressionChar':
			return $miniBill$elm_fast_dict$FastSet$empty;
		case 'ExpressionString':
			return $miniBill$elm_fast_dict$FastSet$empty;
		case 'ExpressionOperatorFunction':
			return $miniBill$elm_fast_dict$FastSet$empty;
		case 'ExpressionRecordAccessFunction':
			return $miniBill$elm_fast_dict$FastSet$empty;
		case 'ExpressionReference':
			var reference = inferredExpression.a;
			var _v2 = reference.moduleOrigin;
			if (_v2 === '') {
				return $miniBill$elm_fast_dict$FastSet$singleton(reference.name);
			} else {
				return $miniBill$elm_fast_dict$FastSet$empty;
			}
		case 'ExpressionParenthesized':
			var inParens = inferredExpression.a;
			return $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(inParens);
		case 'ExpressionNegation':
			var inNegation = inferredExpression.a;
			return $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(inNegation);
		case 'ExpressionLambda':
			var lambda = inferredExpression.a;
			return $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(lambda.result);
		case 'ExpressionRecordAccess':
			var recordAccess = inferredExpression.a;
			return $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(recordAccess.record);
		case 'ExpressionInfixOperation':
			var infixOperation = inferredExpression.a;
			return A2(
				$miniBill$elm_fast_dict$FastSet$union,
				$author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(infixOperation.right),
				$author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(infixOperation.left));
		case 'ExpressionTuple':
			var parts = inferredExpression.a;
			return A2(
				$miniBill$elm_fast_dict$FastSet$union,
				$author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(parts.part1),
				$author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(parts.part0));
		case 'ExpressionTriple':
			var parts = inferredExpression.a;
			return A2(
				$miniBill$elm_fast_dict$FastSet$union,
				$author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(parts.part2),
				A2(
					$miniBill$elm_fast_dict$FastSet$union,
					$author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(parts.part1),
					$author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(parts.part0)));
		case 'ExpressionIfThenElse':
			var ifThenElse = inferredExpression.a;
			return A2(
				$miniBill$elm_fast_dict$FastSet$union,
				$author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(ifThenElse.onFalse),
				A2(
					$miniBill$elm_fast_dict$FastSet$union,
					$author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(ifThenElse.onTrue),
					$author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(ifThenElse.condition)));
		case 'ExpressionList':
			var elements = inferredExpression.a;
			return A2($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify, $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences, elements);
		case 'ExpressionRecord':
			var fields = inferredExpression.a;
			return A2(
				$author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify,
				function (field) {
					return $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(field.value);
				},
				fields);
		case 'ExpressionRecordUpdate':
			var recordUpdate = inferredExpression.a;
			return A2(
				$miniBill$elm_fast_dict$FastSet$union,
				A2(
					$author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify,
					function (field) {
						return $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(field.value);
					},
					recordUpdate.field1Up),
				A2(
					$miniBill$elm_fast_dict$FastSet$union,
					$author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(recordUpdate.field0.value),
					function () {
						var _v3 = recordUpdate.recordVariable.value.moduleOrigin;
						if (_v3 === '') {
							return $miniBill$elm_fast_dict$FastSet$empty;
						} else {
							return $miniBill$elm_fast_dict$FastSet$singleton(recordUpdate.recordVariable.value.name);
						}
					}()));
		case 'ExpressionCaseOf':
			var caseOf = inferredExpression.a;
			return A2(
				$miniBill$elm_fast_dict$FastSet$union,
				A2(
					$author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify,
					function (laterCase) {
						return $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(laterCase.result);
					},
					caseOf.case1Up),
				A2(
					$miniBill$elm_fast_dict$FastSet$union,
					$author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(caseOf.case0.result),
					$author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(caseOf.matched)));
		case 'ExpressionCall':
			var call = inferredExpression.a;
			return A2(
				$miniBill$elm_fast_dict$FastSet$union,
				A2($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify, $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences, call.argument1Up),
				A2(
					$miniBill$elm_fast_dict$FastSet$union,
					$author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(call.argument0),
					$author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(call.called)));
		default:
			var letIn = inferredExpression.a;
			return A2(
				$miniBill$elm_fast_dict$FastSet$union,
				A2(
					$author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify,
					function (letDeclarationNode) {
						return $author$project$ElmSyntaxToRust$inferredLetDeclarationUsedLocalReferences(letDeclarationNode.declaration);
					},
					letIn.declaration1Up),
				A2(
					$miniBill$elm_fast_dict$FastSet$union,
					$author$project$ElmSyntaxToRust$inferredLetDeclarationUsedLocalReferences(letIn.declaration0.declaration),
					$author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(letIn.result)));
	}
};
var $author$project$ElmSyntaxToRust$inferredLetDeclarationUsedLocalReferences = function (inferredLetDeclaration) {
	if (inferredLetDeclaration.$ === 'LetValueOrFunctionDeclaration') {
		var inferredLetValueOrFunctionDeclaration = inferredLetDeclaration.a;
		return $author$project$ElmSyntaxToRust$inferredExpressionUsedLocalReferences(inferredLetValueOrFunctionDeclaration.result.value);
	} else {
		var inferredLetDestructuring = inferredLetDeclaration.a;
		return $author$project$ElmSyntaxToRust$inferredExpressionUsedLocalReferences(inferredLetDestructuring.expression.value);
	}
};
var $author$project$ElmSyntaxToRust$destructuringHasBeenInsertedFalseLeastToMostDependedOnListEmpty = {destructuringHasBeenInserted: false, leastToMostDependedOn: _List_Nil};
var $author$project$ElmSyntaxToRust$fastSetAny = F2(
	function (isFound, fastSet) {
		return A3(
			$miniBill$elm_fast_dict$FastSet$foldl,
			F2(
				function (element, soFar) {
					return soFar || isFound(element);
				}),
			false,
			fastSet);
	});
var $author$project$ElmSyntaxToRust$fastSetsIntersect = F2(
	function (aSet, bSet) {
		return A2(
			$author$project$ElmSyntaxToRust$fastSetAny,
			function (aElement) {
				return A2($miniBill$elm_fast_dict$FastSet$member, aElement, bSet);
			},
			aSet);
	});
var $author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables = function (patternTypedNode) {
	inferredPatternIntroducedVariables:
	while (true) {
		var _v0 = patternTypedNode.value;
		switch (_v0.$) {
			case 'PatternUnit':
				return _List_Nil;
			case 'PatternIgnored':
				return _List_Nil;
			case 'PatternInt':
				return _List_Nil;
			case 'PatternString':
				return _List_Nil;
			case 'PatternChar':
				return _List_Nil;
			case 'PatternVariable':
				var variable = _v0.a;
				return _List_fromArray(
					[
						{name: variable, type_: patternTypedNode.type_}
					]);
			case 'PatternRecord':
				var fieldVariables = _v0.a;
				return A2(
					$elm$core$List$map,
					function (fieldVariable) {
						return {name: fieldVariable.value, type_: fieldVariable.type_};
					},
					fieldVariables);
			case 'PatternAs':
				var patternAs = _v0.a;
				return A2(
					$elm$core$List$cons,
					{name: patternAs.variable.value, type_: patternAs.variable.type_},
					$author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables(patternAs.pattern));
			case 'PatternParenthesized':
				var inParens = _v0.a;
				var $temp$patternTypedNode = inParens;
				patternTypedNode = $temp$patternTypedNode;
				continue inferredPatternIntroducedVariables;
			case 'PatternListCons':
				var listCons = _v0.a;
				return _Utils_ap(
					$author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables(listCons.head),
					$author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables(listCons.tail));
			case 'PatternTuple':
				var parts = _v0.a;
				return _Utils_ap(
					$author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables(parts.part0),
					$author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables(parts.part1));
			case 'PatternTriple':
				var parts = _v0.a;
				return _Utils_ap(
					$author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables(parts.part0),
					_Utils_ap(
						$author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables(parts.part1),
						$author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables(parts.part2)));
			case 'PatternListExact':
				var elements = _v0.a;
				return A2($elm$core$List$concatMap, $author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables, elements);
			default:
				var variant = _v0.a;
				return A2($elm$core$List$concatMap, $author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables, variant.values);
		}
	}
};
var $author$project$ElmSyntaxToRust$fsharpLetDeclarationsInsertFsharpLetDestructuring = F2(
	function (fsharpLetDestructuringToInsert, existingLetDeclarationsMostToLeastDependedOn) {
		var variablesIntroducedInDestructuringPattern = A3(
			$elm$core$List$foldl,
			F2(
				function (variable, soFar) {
					return A2($miniBill$elm_fast_dict$FastSet$insert, variable.name, soFar);
				}),
			$miniBill$elm_fast_dict$FastSet$empty,
			$author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables(fsharpLetDestructuringToInsert.declaration.pattern));
		var withLetDestructuring = A3(
			$elm$core$List$foldl,
			F2(
				function (existingLetDeclaration, soFar) {
					if (soFar.destructuringHasBeenInserted) {
						return {
							destructuringHasBeenInserted: true,
							leastToMostDependedOn: A2($elm$core$List$cons, existingLetDeclaration, soFar.leastToMostDependedOn)
						};
					} else {
						var existingLetDeclarationUsedLocalReferences = $author$project$ElmSyntaxToRust$inferredLetDeclarationUsedLocalReferences(existingLetDeclaration.declaration);
						return A2($author$project$ElmSyntaxToRust$fastSetsIntersect, variablesIntroducedInDestructuringPattern, existingLetDeclarationUsedLocalReferences) ? {
							destructuringHasBeenInserted: true,
							leastToMostDependedOn: A2(
								$elm$core$List$cons,
								existingLetDeclaration,
								A2(
									$elm$core$List$cons,
									{
										declaration: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetDestructuring(fsharpLetDestructuringToInsert.declaration),
										range: fsharpLetDestructuringToInsert.range
									},
									soFar.leastToMostDependedOn))
						} : {
							destructuringHasBeenInserted: false,
							leastToMostDependedOn: A2($elm$core$List$cons, existingLetDeclaration, soFar.leastToMostDependedOn)
						};
					}
				}),
			$author$project$ElmSyntaxToRust$destructuringHasBeenInsertedFalseLeastToMostDependedOnListEmpty,
			existingLetDeclarationsMostToLeastDependedOn);
		return withLetDestructuring.destructuringHasBeenInserted ? $elm$core$List$reverse(withLetDestructuring.leastToMostDependedOn) : $elm$core$List$reverse(
			A2(
				$elm$core$List$cons,
				{
					declaration: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetDestructuring(fsharpLetDestructuringToInsert.declaration),
					range: fsharpLetDestructuringToInsert.range
				},
				withLetDestructuring.leastToMostDependedOn));
	});
var $author$project$ElmSyntaxToRust$inferredLetDeclarationsInsertLetDestructurings = F2(
	function (fsharpLetDestructuringsToInsert, existingLetDeclarations) {
		return A3(
			$elm$core$List$foldl,
			F2(
				function (fsharpLetDestructuringToInsert, soFar) {
					return A2($author$project$ElmSyntaxToRust$fsharpLetDeclarationsInsertFsharpLetDestructuring, fsharpLetDestructuringToInsert, soFar);
				}),
			existingLetDeclarations,
			fsharpLetDestructuringsToInsert);
	});
var $miniBill$elm_fast_dict$FastSet$toList = function (_v0) {
	var set = _v0.a;
	return $miniBill$elm_fast_dict$FastDict$keys(set);
};
var $author$project$ElmSyntaxToRust$inferredLetDeclarationNodesSortFromMostToLeastDependedOn = function (inferredLetDeclarationNodes) {
	var letValueOrFunctionDeclarations = A2(
		$elm$core$List$filterMap,
		function (inferredLetDeclarationNode) {
			var _v2 = inferredLetDeclarationNode.declaration;
			if (_v2.$ === 'LetDestructuring') {
				return $elm$core$Maybe$Nothing;
			} else {
				var inferredLetValueOrFunctionDeclaration = _v2.a;
				return $elm$core$Maybe$Just(
					{declaration: inferredLetValueOrFunctionDeclaration, range: inferredLetDeclarationNode.range});
			}
		},
		inferredLetDeclarationNodes);
	var letDestructurings = A2(
		$elm$core$List$filterMap,
		function (inferredLetDeclarationNode) {
			var _v1 = inferredLetDeclarationNode.declaration;
			if (_v1.$ === 'LetValueOrFunctionDeclaration') {
				return $elm$core$Maybe$Nothing;
			} else {
				var inferredLetDestructuring = _v1.a;
				return $elm$core$Maybe$Just(
					{declaration: inferredLetDestructuring, range: inferredLetDeclarationNode.range});
			}
		},
		inferredLetDeclarationNodes);
	return A2(
		$author$project$ElmSyntaxToRust$inferredLetDeclarationsInsertLetDestructurings,
		letDestructurings,
		A2(
			$elm$core$List$concatMap,
			function (bucket) {
				if (bucket.$ === 'AcyclicSCC') {
					var node = bucket.a;
					return _List_fromArray(
						[node]);
				} else {
					var nodes = bucket.a;
					return nodes;
				}
			},
			$author$project$Graph$stronglyConnComponents(
				A2(
					$elm$core$List$map,
					function (inferredLetValueOrFunctionDeclarationNode) {
						return _Utils_Tuple3(
							{
								declaration: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetValueOrFunctionDeclaration(inferredLetValueOrFunctionDeclarationNode.declaration),
								range: inferredLetValueOrFunctionDeclarationNode.range
							},
							inferredLetValueOrFunctionDeclarationNode.declaration.name,
							$miniBill$elm_fast_dict$FastSet$toList(
								$author$project$ElmSyntaxToRust$inferredExpressionUsedLocalReferences(inferredLetValueOrFunctionDeclarationNode.declaration.result.value)));
					},
					letValueOrFunctionDeclarations))));
};
var $author$project$ElmSyntaxToRust$inferredPatternBindings = function (syntaxPattern) {
	var _v0 = syntaxPattern.value;
	switch (_v0.$) {
		case 'PatternIgnored':
			return _List_Nil;
		case 'PatternUnit':
			return _List_Nil;
		case 'PatternChar':
			return _List_Nil;
		case 'PatternString':
			return _List_Nil;
		case 'PatternInt':
			return _List_Nil;
		case 'PatternVariable':
			var name = _v0.a;
			return _List_fromArray(
				[name]);
		case 'PatternAs':
			var patternAs = _v0.a;
			return A2(
				$elm$core$List$cons,
				patternAs.variable.value,
				$author$project$ElmSyntaxToRust$inferredPatternBindings(patternAs.pattern));
		case 'PatternParenthesized':
			var inParens = _v0.a;
			return $author$project$ElmSyntaxToRust$inferredPatternBindings(inParens);
		case 'PatternListExact':
			var elements = _v0.a;
			return A2($elm$core$List$concatMap, $author$project$ElmSyntaxToRust$inferredPatternBindings, elements);
		case 'PatternTuple':
			var parts = _v0.a;
			return _Utils_ap(
				$author$project$ElmSyntaxToRust$inferredPatternBindings(parts.part0),
				$author$project$ElmSyntaxToRust$inferredPatternBindings(parts.part1));
		case 'PatternTriple':
			var parts = _v0.a;
			return _Utils_ap(
				$author$project$ElmSyntaxToRust$inferredPatternBindings(parts.part0),
				_Utils_ap(
					$author$project$ElmSyntaxToRust$inferredPatternBindings(parts.part1),
					$author$project$ElmSyntaxToRust$inferredPatternBindings(parts.part2)));
		case 'PatternRecord':
			var fields = _v0.a;
			return A2(
				$elm$core$List$map,
				function (field) {
					return field.value;
				},
				fields);
		case 'PatternVariant':
			var patternVariant = _v0.a;
			return A2($elm$core$List$concatMap, $author$project$ElmSyntaxToRust$inferredPatternBindings, patternVariant.values);
		default:
			var listCons = _v0.a;
			return _Utils_ap(
				$author$project$ElmSyntaxToRust$inferredPatternBindings(listCons.head),
				$author$project$ElmSyntaxToRust$inferredPatternBindings(listCons.head));
	}
};
var $author$project$ElmSyntaxToRust$inferredReferenceToInfoString = function (reference) {
	var _v0 = reference.moduleOrigin;
	if (_v0 === '') {
		return reference.name;
	} else {
		var moduleOriginNotEmpty = _v0;
		return moduleOriginNotEmpty + ('.' + reference.name);
	}
};
var $author$project$ElmSyntaxToRust$inferredTypeContainedVariables = function (inferredType) {
	if (inferredType.$ === 'TypeVariable') {
		var variable = inferredType.a;
		return A2($miniBill$elm_fast_dict$FastDict$singleton, variable.name, variable.useRange);
	} else {
		var inferredTypeNotVariable = inferredType.a;
		return $author$project$ElmSyntaxToRust$inferredTypeNotVariableContainedVariables(inferredTypeNotVariable);
	}
};
var $author$project$ElmSyntaxToRust$inferredTypeNotVariableContainedVariables = function (inferredTypeNotVariable) {
	switch (inferredTypeNotVariable.$) {
		case 'TypeUnit':
			return $miniBill$elm_fast_dict$FastDict$empty;
		case 'TypeFunction':
			var typeFunction = inferredTypeNotVariable.a;
			return A2(
				$miniBill$elm_fast_dict$FastDict$union,
				$author$project$ElmSyntaxToRust$inferredTypeContainedVariables(typeFunction.input),
				$author$project$ElmSyntaxToRust$inferredTypeContainedVariables(typeFunction.output));
		case 'TypeTuple':
			var typeTuple = inferredTypeNotVariable.a;
			return A2(
				$miniBill$elm_fast_dict$FastDict$union,
				$author$project$ElmSyntaxToRust$inferredTypeContainedVariables(typeTuple.part0),
				$author$project$ElmSyntaxToRust$inferredTypeContainedVariables(typeTuple.part1));
		case 'TypeTriple':
			var typeTriple = inferredTypeNotVariable.a;
			return A2(
				$miniBill$elm_fast_dict$FastDict$union,
				$author$project$ElmSyntaxToRust$inferredTypeContainedVariables(typeTriple.part2),
				A2(
					$miniBill$elm_fast_dict$FastDict$union,
					$author$project$ElmSyntaxToRust$inferredTypeContainedVariables(typeTriple.part1),
					$author$project$ElmSyntaxToRust$inferredTypeContainedVariables(typeTriple.part0)));
		case 'TypeConstruct':
			var typeConstruct = inferredTypeNotVariable.a;
			return A2($author$project$ElmSyntaxToRust$listMapToFastDictsAndUnify, $author$project$ElmSyntaxToRust$inferredTypeContainedVariables, typeConstruct._arguments);
		case 'TypeRecord':
			var typeRecordFields = inferredTypeNotVariable.a;
			return A3(
				$miniBill$elm_fast_dict$FastDict$foldl,
				F3(
					function (_v1, value, soFar) {
						return A2(
							$miniBill$elm_fast_dict$FastDict$union,
							soFar,
							$author$project$ElmSyntaxToRust$inferredTypeContainedVariables(value));
					}),
				$miniBill$elm_fast_dict$FastDict$empty,
				typeRecordFields);
		default:
			var typeRecordExtension = inferredTypeNotVariable.a;
			return A3(
				$miniBill$elm_fast_dict$FastDict$foldl,
				F3(
					function (_v2, value, soFar) {
						return A2(
							$miniBill$elm_fast_dict$FastDict$union,
							soFar,
							$author$project$ElmSyntaxToRust$inferredTypeContainedVariables(value));
					}),
				A2($miniBill$elm_fast_dict$FastDict$singleton, typeRecordExtension.recordVariable.name, typeRecordExtension.recordVariable.useRange),
				typeRecordExtension.fields);
	}
};
var $author$project$ElmSyntaxToRust$inferredTypeExpandFunction = function (inferredType) {
	if ((inferredType.$ === 'TypeNotVariable') && (inferredType.a.$ === 'TypeFunction')) {
		var typeFunction = inferredType.a.a;
		var outputExpanded = $author$project$ElmSyntaxToRust$inferredTypeExpandFunction(typeFunction.output);
		return {
			inputs: A2($elm$core$List$cons, typeFunction.input, outputExpanded.inputs),
			output: outputExpanded.output
		};
	} else {
		var typeNotFunction = inferredType;
		return {inputs: _List_Nil, output: typeNotFunction};
	}
};
var $author$project$ElmSyntaxToRust$inferredTypeExpandFunctionIntoReverse = F2(
	function (soFarReverse, inferredType) {
		inferredTypeExpandFunctionIntoReverse:
		while (true) {
			if (inferredType.$ === 'TypeVariable') {
				return {
					inputs: $elm$core$List$reverse(soFarReverse),
					output: inferredType
				};
			} else {
				var inferredTypeNotVariable = inferredType.a;
				switch (inferredTypeNotVariable.$) {
					case 'TypeFunction':
						var _function = inferredTypeNotVariable.a;
						var $temp$soFarReverse = A2($elm$core$List$cons, _function.input, soFarReverse),
							$temp$inferredType = _function.output;
						soFarReverse = $temp$soFarReverse;
						inferredType = $temp$inferredType;
						continue inferredTypeExpandFunctionIntoReverse;
					case 'TypeUnit':
						return {
							inputs: $elm$core$List$reverse(soFarReverse),
							output: inferredType
						};
					case 'TypeConstruct':
						return {
							inputs: $elm$core$List$reverse(soFarReverse),
							output: inferredType
						};
					case 'TypeTuple':
						return {
							inputs: $elm$core$List$reverse(soFarReverse),
							output: inferredType
						};
					case 'TypeTriple':
						return {
							inputs: $elm$core$List$reverse(soFarReverse),
							output: inferredType
						};
					case 'TypeRecord':
						return {
							inputs: $elm$core$List$reverse(soFarReverse),
							output: inferredType
						};
					default:
						return {
							inputs: $elm$core$List$reverse(soFarReverse),
							output: inferredType
						};
				}
			}
		}
	});
var $author$project$ElmSyntaxToRust$inferredTypeExpandToFunction = function (inferredType) {
	return A2($author$project$ElmSyntaxToRust$inferredTypeExpandFunctionIntoReverse, _List_Nil, inferredType);
};
var $author$project$ElmSyntaxToRust$listOfFastDictsUnify = function (list) {
	return A3($elm$core$List$foldl, $miniBill$elm_fast_dict$FastDict$union, $miniBill$elm_fast_dict$FastDict$empty, list);
};
var $author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom = F2(
	function (originalInferredType, specializedInferredType) {
		if (originalInferredType.$ === 'TypeVariable') {
			return $miniBill$elm_fast_dict$FastDict$empty;
		} else {
			var originalTypeNotVariable = originalInferredType.a;
			return A2($author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFromNotVariable, originalTypeNotVariable, specializedInferredType);
		}
	});
var $author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFromNotVariable = F2(
	function (originalTypeNotVariable, specializedInferredType) {
		switch (originalTypeNotVariable.$) {
			case 'TypeUnit':
				return $miniBill$elm_fast_dict$FastDict$empty;
			case 'TypeFunction':
				var originalTypeFunction = originalTypeNotVariable.a;
				if ((specializedInferredType.$ === 'TypeNotVariable') && (specializedInferredType.a.$ === 'TypeFunction')) {
					var inferredFunction = specializedInferredType.a.a;
					return A2(
						$miniBill$elm_fast_dict$FastDict$union,
						A2($author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom, originalTypeFunction.output, inferredFunction.output),
						A2($author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom, originalTypeFunction.input, inferredFunction.input));
				} else {
					return $miniBill$elm_fast_dict$FastDict$empty;
				}
			case 'TypeTuple':
				var originalParts = originalTypeNotVariable.a;
				if ((specializedInferredType.$ === 'TypeNotVariable') && (specializedInferredType.a.$ === 'TypeTuple')) {
					var inferredTuple = specializedInferredType.a.a;
					return A2(
						$miniBill$elm_fast_dict$FastDict$union,
						A2($author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom, originalParts.part1, inferredTuple.part1),
						A2($author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom, originalParts.part0, inferredTuple.part0));
				} else {
					return $miniBill$elm_fast_dict$FastDict$empty;
				}
			case 'TypeTriple':
				var originalParts = originalTypeNotVariable.a;
				if ((specializedInferredType.$ === 'TypeNotVariable') && (specializedInferredType.a.$ === 'TypeTriple')) {
					var inferredTriple = specializedInferredType.a.a;
					return A2(
						$miniBill$elm_fast_dict$FastDict$union,
						A2($author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom, originalParts.part2, inferredTriple.part2),
						A2(
							$miniBill$elm_fast_dict$FastDict$union,
							A2($author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom, originalParts.part1, inferredTriple.part1),
							A2($author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom, originalParts.part0, inferredTriple.part0)));
				} else {
					return $miniBill$elm_fast_dict$FastDict$empty;
				}
			case 'TypeConstruct':
				var originalTypeConstruct = originalTypeNotVariable.a;
				if (specializedInferredType.$ === 'TypeVariable') {
					return $miniBill$elm_fast_dict$FastDict$empty;
				} else {
					var inferredTypeNotVariable_ = specializedInferredType.a;
					switch (inferredTypeNotVariable_.$) {
						case 'TypeConstruct':
							var inferredTypeConstruct = inferredTypeNotVariable_.a;
							return $author$project$ElmSyntaxToRust$listOfFastDictsUnify(
								A3($elm$core$List$map2, $author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom, originalTypeConstruct._arguments, inferredTypeConstruct._arguments));
						case 'TypeUnit':
							return $miniBill$elm_fast_dict$FastDict$empty;
						case 'TypeTuple':
							return $miniBill$elm_fast_dict$FastDict$empty;
						case 'TypeTriple':
							return $miniBill$elm_fast_dict$FastDict$empty;
						case 'TypeRecord':
							return $miniBill$elm_fast_dict$FastDict$empty;
						case 'TypeRecordExtension':
							return $miniBill$elm_fast_dict$FastDict$empty;
						default:
							return $miniBill$elm_fast_dict$FastDict$empty;
					}
				}
			case 'TypeRecord':
				var originalFields = originalTypeNotVariable.a;
				if ((specializedInferredType.$ === 'TypeNotVariable') && (specializedInferredType.a.$ === 'TypeRecord')) {
					var inferredRecord = specializedInferredType.a.a;
					return $author$project$ElmSyntaxToRust$listOfFastDictsUnify(
						A3(
							$elm$core$List$map2,
							$author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom,
							$miniBill$elm_fast_dict$FastDict$values(originalFields),
							$miniBill$elm_fast_dict$FastDict$values(inferredRecord)));
				} else {
					return $miniBill$elm_fast_dict$FastDict$empty;
				}
			default:
				var originalTypeRecordExtension = originalTypeNotVariable.a;
				if (specializedInferredType.$ === 'TypeNotVariable') {
					var inferredTypeNotVariable_ = specializedInferredType.a;
					switch (inferredTypeNotVariable_.$) {
						case 'TypeRecordExtension':
							var inferredRecordExtension = inferredTypeNotVariable_.a;
							return A6(
								$miniBill$elm_fast_dict$FastDict$merge,
								F3(
									function (_v9, _v10, soFar) {
										return soFar;
									}),
								F4(
									function (_v11, originalValue, specializedValue, soFar) {
										return A2(
											$miniBill$elm_fast_dict$FastDict$union,
											soFar,
											A2($author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom, originalValue, specializedValue));
									}),
								F3(
									function (_v12, _v13, soFar) {
										return soFar;
									}),
								originalTypeRecordExtension.fields,
								inferredRecordExtension.fields,
								$miniBill$elm_fast_dict$FastDict$empty);
						case 'TypeRecord':
							var inferredRecordFields = inferredTypeNotVariable_.a;
							return A3(
								$miniBill$elm_fast_dict$FastDict$insert,
								originalTypeRecordExtension.recordVariable.name,
								$author$project$ElmSyntaxToRust$RustTypeVariableSpecializationToRecord(
									$miniBill$elm_fast_dict$FastDict$keys(inferredRecordFields)),
								A6(
									$miniBill$elm_fast_dict$FastDict$merge,
									F3(
										function (_v14, _v15, soFar) {
											return soFar;
										}),
									F4(
										function (_v16, originalValue, specializedValue, soFar) {
											return A2(
												$miniBill$elm_fast_dict$FastDict$union,
												soFar,
												A2($author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom, originalValue, specializedValue));
										}),
									F3(
										function (_v17, _v18, soFar) {
											return soFar;
										}),
									originalTypeRecordExtension.fields,
									inferredRecordFields,
									$miniBill$elm_fast_dict$FastDict$empty));
						case 'TypeUnit':
							return $miniBill$elm_fast_dict$FastDict$empty;
						case 'TypeConstruct':
							return $miniBill$elm_fast_dict$FastDict$empty;
						case 'TypeTuple':
							return $miniBill$elm_fast_dict$FastDict$empty;
						case 'TypeTriple':
							return $miniBill$elm_fast_dict$FastDict$empty;
						default:
							return $miniBill$elm_fast_dict$FastDict$empty;
					}
				} else {
					return $miniBill$elm_fast_dict$FastDict$empty;
				}
		}
	});
var $author$project$ElmSyntaxToRust$listMapAndCombineOkFrom = F3(
	function (soFar, elementToResult, list) {
		listMapAndCombineOkFrom:
		while (true) {
			if (!list.b) {
				return $elm$core$Result$Ok(
					$elm$core$List$reverse(soFar));
			} else {
				var head = list.a;
				var tail = list.b;
				var _v1 = elementToResult(head);
				if (_v1.$ === 'Err') {
					var headErr = _v1.a;
					return $elm$core$Result$Err(headErr);
				} else {
					var headOk = _v1.a;
					var $temp$soFar = A2($elm$core$List$cons, headOk, soFar),
						$temp$elementToResult = elementToResult,
						$temp$list = tail;
					soFar = $temp$soFar;
					elementToResult = $temp$elementToResult;
					list = $temp$list;
					continue listMapAndCombineOkFrom;
				}
			}
		}
	});
var $author$project$ElmSyntaxToRust$listMapAndCombineOk = F2(
	function (elementToResult, list) {
		return A3($author$project$ElmSyntaxToRust$listMapAndCombineOkFrom, _List_Nil, elementToResult, list);
	});
var $author$project$ElmSyntaxToRust$RustPatternAlias = function (a) {
	return {$: 'RustPatternAlias', a: a};
};
var $author$project$ElmSyntaxToRust$RustPatternBool = function (a) {
	return {$: 'RustPatternBool', a: a};
};
var $author$project$ElmSyntaxToRust$RustPatternIgnore = {$: 'RustPatternIgnore'};
var $author$project$ElmSyntaxToRust$RustPatternInteger = function (a) {
	return {$: 'RustPatternInteger', a: a};
};
var $author$project$ElmSyntaxToRust$RustPatternRecord = function (a) {
	return {$: 'RustPatternRecord', a: a};
};
var $author$project$ElmSyntaxToRust$RustPatternStringLiteral = function (a) {
	return {$: 'RustPatternStringLiteral', a: a};
};
var $author$project$ElmSyntaxToRust$RustPatternUnicodeScalar = function (a) {
	return {$: 'RustPatternUnicodeScalar', a: a};
};
var $author$project$ElmSyntaxToRust$RustPatternVariant = function (a) {
	return {$: 'RustPatternVariant', a: a};
};
var $author$project$ElmSyntaxToRust$fieldsDictEmptyIntroducedVariablesDictEmpty = {fields: $miniBill$elm_fast_dict$FastDict$empty, introducedVariables: $miniBill$elm_fast_dict$FastSet$empty};
var $author$project$ElmSyntaxToRust$rustPatternIgnoreIntroducedVariablesSetEmpty = {introducedVariables: $miniBill$elm_fast_dict$FastSet$empty, pattern: $author$project$ElmSyntaxToRust$RustPatternIgnore};
var $author$project$ElmSyntaxToRust$rustPatternListCons = F2(
	function (head, tail) {
		return $author$project$ElmSyntaxToRust$RustPatternVariant(
			{
				isReference: true,
				name: 'Cons',
				originTypeName: _List_fromArray(
					['ListListGuts']),
				values: _List_fromArray(
					[head, tail])
			});
	});
var $author$project$ElmSyntaxToRust$rustPatternListEmpty = $author$project$ElmSyntaxToRust$RustPatternVariant(
	{
		isReference: true,
		name: 'Empty',
		originTypeName: _List_fromArray(
			['ListListGuts']),
		values: _List_Nil
	});
var $author$project$ElmSyntaxToRust$RustPatternTuple = function (a) {
	return {$: 'RustPatternTuple', a: a};
};
var $author$project$ElmSyntaxToRust$rustPatternVariantTriple = F3(
	function (part0, part1, part2) {
		return $author$project$ElmSyntaxToRust$RustPatternTuple(
			{
				part0: part0,
				part1: part1,
				part2Up: _List_fromArray(
					[part2])
			});
	});
var $author$project$ElmSyntaxToRust$rustPatternVariantTuple = F2(
	function (part0, part1) {
		return $author$project$ElmSyntaxToRust$RustPatternTuple(
			{part0: part0, part1: part1, part2Up: _List_Nil});
	});
var $author$project$ElmSyntaxToRust$variantToCoreRust = function (reference) {
	var _v0 = reference.moduleOrigin;
	switch (_v0) {
		case 'Basics':
			var _v1 = reference.name;
			switch (_v1) {
				case 'LT':
					return $elm$core$Maybe$Just(
						{
							isReference: false,
							name: 'Less',
							originTypeName: _List_fromArray(
								['std', 'cmp', 'Ordering'])
						});
				case 'EQ':
					return $elm$core$Maybe$Just(
						{
							isReference: false,
							name: 'Equal',
							originTypeName: _List_fromArray(
								['std', 'cmp', 'Ordering'])
						});
				case 'GT':
					return $elm$core$Maybe$Just(
						{
							isReference: false,
							name: 'Greater',
							originTypeName: _List_fromArray(
								['std', 'cmp', 'Ordering'])
						});
				case 'True':
					return $elm$core$Maybe$Just(
						{isReference: false, name: 'true', originTypeName: _List_Nil});
				case 'False':
					return $elm$core$Maybe$Just(
						{isReference: false, name: 'false', originTypeName: _List_Nil});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Maybe':
			var _v2 = reference.name;
			switch (_v2) {
				case 'Nothing':
					return $elm$core$Maybe$Just(
						{
							isReference: false,
							name: 'None',
							originTypeName: _List_fromArray(
								['Option'])
						});
				case 'Just':
					return $elm$core$Maybe$Just(
						{
							isReference: false,
							name: 'Some',
							originTypeName: _List_fromArray(
								['Option'])
						});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Result':
			var _v3 = reference.name;
			switch (_v3) {
				case 'Err':
					return $elm$core$Maybe$Just(
						{
							isReference: false,
							name: 'Err',
							originTypeName: _List_fromArray(
								['Result'])
						});
				case 'Ok':
					return $elm$core$Maybe$Just(
						{
							isReference: false,
							name: 'Ok',
							originTypeName: _List_fromArray(
								['Result'])
						});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Json.Decode':
			var _v4 = reference.name;
			switch (_v4) {
				case 'Field':
					return $elm$core$Maybe$Just(
						{
							isReference: true,
							name: 'Field',
							originTypeName: _List_fromArray(
								['JsonDecodeErrorGuts'])
						});
				case 'Index':
					return $elm$core$Maybe$Just(
						{
							isReference: true,
							name: 'Index',
							originTypeName: _List_fromArray(
								['JsonDecodeErrorGuts'])
						});
				case 'OneOf':
					return $elm$core$Maybe$Just(
						{
							isReference: true,
							name: 'OneOf',
							originTypeName: _List_fromArray(
								['JsonDecodeErrorGuts'])
						});
				case 'Failure':
					return $elm$core$Maybe$Just(
						{
							isReference: true,
							name: 'Failure',
							originTypeName: _List_fromArray(
								['JsonDecodeErrorGuts'])
						});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Bytes':
			var _v5 = reference.name;
			switch (_v5) {
				case 'LE':
					return $elm$core$Maybe$Just(
						{
							isReference: false,
							name: 'LE',
							originTypeName: _List_fromArray(
								['BytesEndianness'])
						});
				case 'BE':
					return $elm$core$Maybe$Just(
						{
							isReference: false,
							name: 'BE',
							originTypeName: _List_fromArray(
								['BytesEndianness'])
						});
				default:
					return $elm$core$Maybe$Nothing;
			}
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$ElmSyntaxToRust$pattern = function (patternInferred) {
	pattern:
	while (true) {
		var _v0 = patternInferred.value;
		switch (_v0.$) {
			case 'PatternIgnored':
				return $author$project$ElmSyntaxToRust$rustPatternIgnoreIntroducedVariablesSetEmpty;
			case 'PatternUnit':
				return $author$project$ElmSyntaxToRust$rustPatternIgnoreIntroducedVariablesSetEmpty;
			case 'PatternChar':
				var charValue = _v0.a;
				return {
					introducedVariables: $miniBill$elm_fast_dict$FastSet$empty,
					pattern: $author$project$ElmSyntaxToRust$RustPatternUnicodeScalar(charValue)
				};
			case 'PatternString':
				var stringValue = _v0.a;
				return {
					introducedVariables: $miniBill$elm_fast_dict$FastSet$empty,
					pattern: $author$project$ElmSyntaxToRust$RustPatternStringLiteral(stringValue)
				};
			case 'PatternInt':
				var intValue = _v0.a;
				return {
					introducedVariables: $miniBill$elm_fast_dict$FastSet$empty,
					pattern: $author$project$ElmSyntaxToRust$RustPatternInteger(intValue.value)
				};
			case 'PatternVariable':
				var variableName = _v0.a;
				return {
					introducedVariables: $miniBill$elm_fast_dict$FastSet$singleton(variableName),
					pattern: $author$project$ElmSyntaxToRust$RustPatternVariable(
						$author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(variableName))
				};
			case 'PatternParenthesized':
				var inParens = _v0.a;
				var $temp$patternInferred = inParens;
				patternInferred = $temp$patternInferred;
				continue pattern;
			case 'PatternTuple':
				var parts = _v0.a;
				var part1 = $author$project$ElmSyntaxToRust$pattern(parts.part1);
				var part0 = $author$project$ElmSyntaxToRust$pattern(parts.part0);
				return {
					introducedVariables: A2($miniBill$elm_fast_dict$FastSet$union, part0.introducedVariables, part1.introducedVariables),
					pattern: A2($author$project$ElmSyntaxToRust$rustPatternVariantTuple, part0.pattern, part1.pattern)
				};
			case 'PatternTriple':
				var parts = _v0.a;
				var part2 = $author$project$ElmSyntaxToRust$pattern(parts.part2);
				var part1 = $author$project$ElmSyntaxToRust$pattern(parts.part1);
				var part0 = $author$project$ElmSyntaxToRust$pattern(parts.part0);
				return {
					introducedVariables: A2(
						$miniBill$elm_fast_dict$FastSet$union,
						part2.introducedVariables,
						A2($miniBill$elm_fast_dict$FastSet$union, part1.introducedVariables, part0.introducedVariables)),
					pattern: A3($author$project$ElmSyntaxToRust$rustPatternVariantTriple, part0.pattern, part1.pattern, part2.pattern)
				};
			case 'PatternRecord':
				var patternFields = _v0.a;
				var allFields = function () {
					var _v5 = patternInferred.type_;
					if (_v5.$ === 'TypeVariable') {
						return $miniBill$elm_fast_dict$FastDict$empty;
					} else {
						var patternTypeNotVariable = _v5.a;
						switch (patternTypeNotVariable.$) {
							case 'TypeUnit':
								return $miniBill$elm_fast_dict$FastDict$empty;
							case 'TypeConstruct':
								return $miniBill$elm_fast_dict$FastDict$empty;
							case 'TypeTuple':
								return $miniBill$elm_fast_dict$FastDict$empty;
							case 'TypeTriple':
								return $miniBill$elm_fast_dict$FastDict$empty;
							case 'TypeRecord':
								var patternTypeRecordFields = patternTypeNotVariable.a;
								return patternTypeRecordFields;
							case 'TypeRecordExtension':
								return $miniBill$elm_fast_dict$FastDict$empty;
							default:
								return $miniBill$elm_fast_dict$FastDict$empty;
						}
					}
				}();
				var combinedFieldNames = A6(
					$miniBill$elm_fast_dict$FastDict$merge,
					F3(
						function (fieldName, _v1, soFar) {
							return {
								fields: A3(
									$miniBill$elm_fast_dict$FastDict$insert,
									$author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(fieldName),
									$author$project$ElmSyntaxToRust$RustPatternIgnore,
									soFar.fields),
								introducedVariables: soFar.introducedVariables
							};
						}),
					F4(
						function (fieldName, _v2, _v3, soFar) {
							var disambiguatedFieldName = $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(fieldName);
							return {
								fields: A3(
									$miniBill$elm_fast_dict$FastDict$insert,
									disambiguatedFieldName,
									$author$project$ElmSyntaxToRust$RustPatternVariable(disambiguatedFieldName),
									soFar.fields),
								introducedVariables: A2($miniBill$elm_fast_dict$FastSet$insert, fieldName, soFar.introducedVariables)
							};
						}),
					F3(
						function (fieldName, _v4, soFar) {
							var disambiguatedFieldName = $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(fieldName);
							return {
								fields: A3(
									$miniBill$elm_fast_dict$FastDict$insert,
									disambiguatedFieldName,
									$author$project$ElmSyntaxToRust$RustPatternVariable(disambiguatedFieldName),
									soFar.fields),
								introducedVariables: A2($miniBill$elm_fast_dict$FastSet$insert, fieldName, soFar.introducedVariables)
							};
						}),
					allFields,
					A3(
						$elm$core$List$foldl,
						F2(
							function (fieldNameTypedNode, soFar) {
								return A3($miniBill$elm_fast_dict$FastDict$insert, fieldNameTypedNode.value, _Utils_Tuple0, soFar);
							}),
						$miniBill$elm_fast_dict$FastDict$empty,
						patternFields),
					$author$project$ElmSyntaxToRust$fieldsDictEmptyIntroducedVariablesDictEmpty);
				return {
					introducedVariables: combinedFieldNames.introducedVariables,
					pattern: $author$project$ElmSyntaxToRust$RustPatternRecord(combinedFieldNames.fields)
				};
			case 'PatternListCons':
				var listCons = _v0.a;
				var tail = $author$project$ElmSyntaxToRust$pattern(listCons.tail);
				var head = $author$project$ElmSyntaxToRust$pattern(listCons.head);
				return {
					introducedVariables: A2($miniBill$elm_fast_dict$FastSet$union, head.introducedVariables, tail.introducedVariables),
					pattern: A2($author$project$ElmSyntaxToRust$rustPatternListCons, head.pattern, tail.pattern)
				};
			case 'PatternListExact':
				var elementPatterns = _v0.a;
				var elements = A2($elm$core$List$map, $author$project$ElmSyntaxToRust$pattern, elementPatterns);
				return {
					introducedVariables: A2(
						$author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify,
						function ($) {
							return $.introducedVariables;
						},
						elements),
					pattern: A3(
						$elm$core$List$foldr,
						F2(
							function (element, soFar) {
								return A2($author$project$ElmSyntaxToRust$rustPatternListCons, element.pattern, soFar);
							}),
						$author$project$ElmSyntaxToRust$rustPatternListEmpty,
						elements)
				};
			case 'PatternVariant':
				var variant = _v0.a;
				var asBool = function () {
					var _v9 = variant.moduleOrigin;
					if (_v9 === 'Basics') {
						var _v10 = variant.name;
						switch (_v10) {
							case 'True':
								return $elm$core$Maybe$Just(true);
							case 'False':
								return $elm$core$Maybe$Just(false);
							default:
								return $elm$core$Maybe$Nothing;
						}
					} else {
						return $elm$core$Maybe$Nothing;
					}
				}();
				if (asBool.$ === 'Just') {
					var bool = asBool.a;
					return {
						introducedVariables: $miniBill$elm_fast_dict$FastSet$empty,
						pattern: $author$project$ElmSyntaxToRust$RustPatternBool(bool)
					};
				} else {
					var values = A2($elm$core$List$map, $author$project$ElmSyntaxToRust$pattern, variant.values);
					var reference = function () {
						var _v8 = $author$project$ElmSyntaxToRust$variantToCoreRust(
							{moduleOrigin: variant.moduleOrigin, name: variant.name, type_: patternInferred.type_});
						if (_v8.$ === 'Just') {
							var rustReference = _v8.a;
							return rustReference;
						} else {
							return {
								isReference: true,
								name: $author$project$ElmSyntaxToRust$normalizeToRustPascalCase(variant.name),
								originTypeName: _List_fromArray(
									[
										A3($elm$core$String$replace, '.', '', variant.moduleOrigin) + ('_' + (variant.choiceTypeName + 'Guts'))
									])
							};
						}
					}();
					return {
						introducedVariables: A2(
							$author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify,
							function ($) {
								return $.introducedVariables;
							},
							values),
						pattern: $author$project$ElmSyntaxToRust$RustPatternVariant(
							{
								isReference: reference.isReference,
								name: reference.name,
								originTypeName: reference.originTypeName,
								values: A2(
									$elm$core$List$map,
									function (value) {
										return value.pattern;
									},
									values)
							})
					};
				}
			default:
				var patternAs = _v0.a;
				var aliasedPattern = $author$project$ElmSyntaxToRust$pattern(patternAs.pattern);
				return {
					introducedVariables: A2($miniBill$elm_fast_dict$FastSet$insert, patternAs.variable.value, aliasedPattern.introducedVariables),
					pattern: $author$project$ElmSyntaxToRust$RustPatternAlias(
						{pattern: aliasedPattern.pattern, variable: patternAs.variable.value})
				};
		}
	}
};
var $author$project$ElmSyntaxToRust$patternIntroducedVariables = function (inferredPattern) {
	switch (inferredPattern.$) {
		case 'PatternIgnored':
			return $miniBill$elm_fast_dict$FastSet$empty;
		case 'PatternUnit':
			return $miniBill$elm_fast_dict$FastSet$empty;
		case 'PatternChar':
			return $miniBill$elm_fast_dict$FastSet$empty;
		case 'PatternString':
			return $miniBill$elm_fast_dict$FastSet$empty;
		case 'PatternInt':
			return $miniBill$elm_fast_dict$FastSet$empty;
		case 'PatternVariable':
			var variable = inferredPattern.a;
			return $miniBill$elm_fast_dict$FastSet$singleton(variable);
		case 'PatternParenthesized':
			var inParens = inferredPattern.a;
			return $author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables(inParens);
		case 'PatternAs':
			var patternAs = inferredPattern.a;
			return A2(
				$miniBill$elm_fast_dict$FastSet$insert,
				patternAs.variable.value,
				$author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables(patternAs.pattern));
		case 'PatternTuple':
			var parts = inferredPattern.a;
			return A2(
				$miniBill$elm_fast_dict$FastSet$union,
				$author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables(parts.part0),
				$author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables(parts.part1));
		case 'PatternTriple':
			var parts = inferredPattern.a;
			return A2(
				$miniBill$elm_fast_dict$FastSet$union,
				$author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables(parts.part0),
				A2(
					$miniBill$elm_fast_dict$FastSet$union,
					$author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables(parts.part1),
					$author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables(parts.part2)));
		case 'PatternListCons':
			var patternListCons = inferredPattern.a;
			return A2(
				$miniBill$elm_fast_dict$FastSet$union,
				$author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables(patternListCons.head),
				$author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables(patternListCons.tail));
		case 'PatternListExact':
			var elements = inferredPattern.a;
			return A2(
				$author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify,
				function (element) {
					return $author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables(element);
				},
				elements);
		case 'PatternVariant':
			var patternVariant = inferredPattern.a;
			return A2(
				$author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify,
				function (value) {
					return $author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables(value);
				},
				patternVariant.values);
		default:
			var fields = inferredPattern.a;
			return A3(
				$elm$core$List$foldl,
				F2(
					function (fieldTypedNode, soFar) {
						return A2($miniBill$elm_fast_dict$FastSet$insert, fieldTypedNode.value, soFar);
					}),
				$miniBill$elm_fast_dict$FastSet$empty,
				fields);
	}
};
var $author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables = function (patternTypedNode) {
	return $author$project$ElmSyntaxToRust$patternIntroducedVariables(patternTypedNode.value);
};
var $author$project$ElmSyntaxToRust$rangeIncludesRange = F2(
	function (toCheckForInclusion, baseRange) {
		return (((baseRange.start.row - toCheckForInclusion.start.row) < 0) || ((!(baseRange.start.row - toCheckForInclusion.start.row)) && ((baseRange.start.column - toCheckForInclusion.start.column) <= 0))) && (((baseRange.end.row - toCheckForInclusion.end.row) > 0) || ((!(baseRange.end.row - toCheckForInclusion.end.row)) && ((baseRange.end.column - toCheckForInclusion.end.column) >= 0)));
	});
var $author$project$ElmSyntaxToRust$locationToInfoString = function (location) {
	return $elm$core$String$fromInt(location.row) + (':' + $elm$core$String$fromInt(location.column));
};
var $author$project$ElmSyntaxToRust$rangeToInfoString = function (range) {
	return $author$project$ElmSyntaxToRust$locationToInfoString(range.start) + ('-' + $author$project$ElmSyntaxToRust$locationToInfoString(range.end));
};
var $elm$core$Debug$todo = _Debug_todo;
var $author$project$ElmSyntaxToRust$referenceToCoreRust = function (reference) {
	var _v0 = reference.moduleOrigin;
	switch (_v0) {
		case 'Basics':
			var _v1 = reference.name;
			switch (_v1) {
				case 'identity':
					return $elm$core$Maybe$Just(
						{name: 'basics_identity', qualification: _List_Nil, requiresAllocator: false});
				case 'always':
					return $elm$core$Maybe$Just(
						{name: 'basics_always', qualification: _List_Nil, requiresAllocator: false});
				case 'compare':
					return $elm$core$Maybe$Just(
						{name: 'basics_compare', qualification: _List_Nil, requiresAllocator: false});
				case 'max':
					return $elm$core$Maybe$Just(
						{name: 'basics_max', qualification: _List_Nil, requiresAllocator: false});
				case 'min':
					return $elm$core$Maybe$Just(
						{name: 'basics_min', qualification: _List_Nil, requiresAllocator: false});
				case 'not':
					return $elm$core$Maybe$Just(
						{name: 'basics_not', qualification: _List_Nil, requiresAllocator: false});
				case 'xor':
					return $elm$core$Maybe$Just(
						{name: 'basics_neq', qualification: _List_Nil, requiresAllocator: false});
				case 'e':
					return $elm$core$Maybe$Just(
						{
							name: 'E',
							qualification: _List_fromArray(
								['std', 'f64', 'consts']),
							requiresAllocator: false
						});
				case 'pi':
					return $elm$core$Maybe$Just(
						{
							name: 'PI',
							qualification: _List_fromArray(
								['std', 'f64', 'consts']),
							requiresAllocator: false
						});
				case 'ceiling':
					return $elm$core$Maybe$Just(
						{
							name: 'ceil',
							qualification: _List_fromArray(
								['f64']),
							requiresAllocator: false
						});
				case 'floor':
					return $elm$core$Maybe$Just(
						{
							name: 'floor',
							qualification: _List_fromArray(
								['f64']),
							requiresAllocator: false
						});
				case 'round':
					return $elm$core$Maybe$Just(
						{
							name: 'round',
							qualification: _List_fromArray(
								['f64']),
							requiresAllocator: false
						});
				case 'truncate':
					return $elm$core$Maybe$Just(
						{
							name: 'trunc',
							qualification: _List_fromArray(
								['f64']),
							requiresAllocator: false
						});
				case 'negate':
					return $elm$core$Maybe$Just(
						{
							name: 'neg',
							qualification: _List_fromArray(
								['std', 'ops', 'Neg']),
							requiresAllocator: false
						});
				case 'abs':
					return $elm$core$Maybe$Just(
						{
							name: 'abs',
							qualification: _List_fromArray(
								['f64']),
							requiresAllocator: false
						});
				case 'toFloat':
					return $elm$core$Maybe$Just(
						{name: 'basics_identity', qualification: _List_Nil, requiresAllocator: false});
				case 'isNaN':
					return $elm$core$Maybe$Just(
						{
							name: 'is_nan',
							qualification: _List_fromArray(
								['f64']),
							requiresAllocator: false
						});
				case 'isInfinite':
					return $elm$core$Maybe$Just(
						{
							name: 'is_infinite',
							qualification: _List_fromArray(
								['f64']),
							requiresAllocator: false
						});
				case 'remainderBy':
					return $elm$core$Maybe$Just(
						{name: 'basics_remainder_by', qualification: _List_Nil, requiresAllocator: false});
				case 'modBy':
					return $elm$core$Maybe$Just(
						{name: 'basics_mod_by', qualification: _List_Nil, requiresAllocator: false});
				case 'sin':
					return $elm$core$Maybe$Just(
						{
							name: 'sin',
							qualification: _List_fromArray(
								['f64']),
							requiresAllocator: false
						});
				case 'cos':
					return $elm$core$Maybe$Just(
						{
							name: 'cos',
							qualification: _List_fromArray(
								['f64']),
							requiresAllocator: false
						});
				case 'tan':
					return $elm$core$Maybe$Just(
						{
							name: 'tan',
							qualification: _List_fromArray(
								['f64']),
							requiresAllocator: false
						});
				case 'asin':
					return $elm$core$Maybe$Just(
						{
							name: 'asin',
							qualification: _List_fromArray(
								['f64']),
							requiresAllocator: false
						});
				case 'acos':
					return $elm$core$Maybe$Just(
						{
							name: 'acos',
							qualification: _List_fromArray(
								['f64']),
							requiresAllocator: false
						});
				case 'atan':
					return $elm$core$Maybe$Just(
						{
							name: 'atan',
							qualification: _List_fromArray(
								['f64']),
							requiresAllocator: false
						});
				case 'atan2':
					return $elm$core$Maybe$Just(
						{
							name: 'atan2',
							qualification: _List_fromArray(
								['f64']),
							requiresAllocator: false
						});
				case 'sqrt':
					return $elm$core$Maybe$Just(
						{
							name: 'sqrt',
							qualification: _List_fromArray(
								['f64']),
							requiresAllocator: false
						});
				case 'logBase':
					return $elm$core$Maybe$Just(
						{name: 'basics_log_base', qualification: _List_Nil, requiresAllocator: false});
				case 'radians':
					return $elm$core$Maybe$Just(
						{name: 'basics_identity', qualification: _List_Nil, requiresAllocator: false});
				case 'degrees':
					return $elm$core$Maybe$Just(
						{name: 'basics_degrees', qualification: _List_Nil, requiresAllocator: false});
				case 'turns':
					return $elm$core$Maybe$Just(
						{name: 'basics_turns', qualification: _List_Nil, requiresAllocator: false});
				case 'fromPolar':
					return $elm$core$Maybe$Just(
						{name: 'basics_from_polar', qualification: _List_Nil, requiresAllocator: false});
				case 'toPolar':
					return $elm$core$Maybe$Just(
						{name: 'basics_to_polar', qualification: _List_Nil, requiresAllocator: false});
				case 'clamp':
					return $elm$core$Maybe$Just(
						{name: 'basics_clamp', qualification: _List_Nil, requiresAllocator: false});
				case 'never':
					return $elm$core$Maybe$Just(
						{name: 'basics_never', qualification: _List_Nil, requiresAllocator: false});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Bitwise':
			var _v2 = reference.name;
			switch (_v2) {
				case 'complement':
					return $elm$core$Maybe$Just(
						{name: 'bitwise_complement', qualification: _List_Nil, requiresAllocator: false});
				case 'and':
					return $elm$core$Maybe$Just(
						{name: 'bitwise_and', qualification: _List_Nil, requiresAllocator: false});
				case 'or':
					return $elm$core$Maybe$Just(
						{name: 'bitwise_or', qualification: _List_Nil, requiresAllocator: false});
				case 'xor':
					return $elm$core$Maybe$Just(
						{name: 'bitwise_xor', qualification: _List_Nil, requiresAllocator: false});
				case 'shiftLeftBy':
					return $elm$core$Maybe$Just(
						{name: 'bitwise_shift_left_by', qualification: _List_Nil, requiresAllocator: false});
				case 'shiftRightBy':
					return $elm$core$Maybe$Just(
						{name: 'bitwise_shift_right_by', qualification: _List_Nil, requiresAllocator: false});
				case 'shiftRightZfBy':
					return $elm$core$Maybe$Just(
						{name: 'bitwise_shift_right_zf_by', qualification: _List_Nil, requiresAllocator: false});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'String':
			var _v3 = reference.name;
			switch (_v3) {
				case 'isEmpty':
					return $elm$core$Maybe$Just(
						{name: 'string_is_empty', qualification: _List_Nil, requiresAllocator: false});
				case 'length':
					return $elm$core$Maybe$Just(
						{name: 'string_length', qualification: _List_Nil, requiresAllocator: false});
				case 'append':
					return $elm$core$Maybe$Just(
						{name: 'string_concat', qualification: _List_Nil, requiresAllocator: true});
				case 'trim':
					return $elm$core$Maybe$Just(
						{name: 'string_trim', qualification: _List_Nil, requiresAllocator: false});
				case 'trimLeft':
					return $elm$core$Maybe$Just(
						{name: 'string_trim_left', qualification: _List_Nil, requiresAllocator: false});
				case 'trimRight':
					return $elm$core$Maybe$Just(
						{name: 'string_trim_right', qualification: _List_Nil, requiresAllocator: false});
				case 'left':
					return $elm$core$Maybe$Just(
						{name: 'string_left', qualification: _List_Nil, requiresAllocator: false});
				case 'right':
					return $elm$core$Maybe$Just(
						{name: 'string_right', qualification: _List_Nil, requiresAllocator: false});
				case 'dropLeft':
					return $elm$core$Maybe$Just(
						{name: 'string_drop_left', qualification: _List_Nil, requiresAllocator: false});
				case 'dropRight':
					return $elm$core$Maybe$Just(
						{name: 'string_drop_right', qualification: _List_Nil, requiresAllocator: false});
				case 'padLeft':
					return $elm$core$Maybe$Just(
						{name: 'string_pad_left', qualification: _List_Nil, requiresAllocator: true});
				case 'padRight':
					return $elm$core$Maybe$Just(
						{name: 'string_pad_right', qualification: _List_Nil, requiresAllocator: true});
				case 'replace':
					return $elm$core$Maybe$Just(
						{name: 'string_replace', qualification: _List_Nil, requiresAllocator: true});
				case 'toList':
					return $elm$core$Maybe$Just(
						{name: 'string_toList', qualification: _List_Nil, requiresAllocator: true});
				case 'foldl':
					return $elm$core$Maybe$Just(
						{name: 'string_foldl', qualification: _List_Nil, requiresAllocator: false});
				case 'foldr':
					return $elm$core$Maybe$Just(
						{name: 'string_foldr', qualification: _List_Nil, requiresAllocator: false});
				case 'join':
					return $elm$core$Maybe$Just(
						{name: 'string_join', qualification: _List_Nil, requiresAllocator: true});
				case 'filter':
					return $elm$core$Maybe$Just(
						{name: 'string_filter', qualification: _List_Nil, requiresAllocator: true});
				case 'any':
					return $elm$core$Maybe$Just(
						{name: 'string_any', qualification: _List_Nil, requiresAllocator: false});
				case 'all':
					return $elm$core$Maybe$Just(
						{name: 'string_all', qualification: _List_Nil, requiresAllocator: false});
				case 'map':
					return $elm$core$Maybe$Just(
						{name: 'string_map', qualification: _List_Nil, requiresAllocator: true});
				case 'repeat':
					return $elm$core$Maybe$Just(
						{name: 'string_repeat', qualification: _List_Nil, requiresAllocator: true});
				case 'split':
					return $elm$core$Maybe$Just(
						{name: 'string_split', qualification: _List_Nil, requiresAllocator: true});
				case 'lines':
					return $elm$core$Maybe$Just(
						{name: 'string_lines', qualification: _List_Nil, requiresAllocator: true});
				case 'words':
					return $elm$core$Maybe$Just(
						{name: 'string_words', qualification: _List_Nil, requiresAllocator: true});
				case 'startsWith':
					return $elm$core$Maybe$Just(
						{name: 'string_starts_with', qualification: _List_Nil, requiresAllocator: false});
				case 'endsWith':
					return $elm$core$Maybe$Just(
						{name: 'string_ends_with', qualification: _List_Nil, requiresAllocator: false});
				case 'toInt':
					return $elm$core$Maybe$Just(
						{name: 'string_to_int', qualification: _List_Nil, requiresAllocator: false});
				case 'toFloat':
					return $elm$core$Maybe$Just(
						{name: 'string_to_float', qualification: _List_Nil, requiresAllocator: false});
				case 'fromInt':
					return $elm$core$Maybe$Just(
						{name: 'string_from_int', qualification: _List_Nil, requiresAllocator: true});
				case 'fromFloat':
					return $elm$core$Maybe$Just(
						{name: 'string_from_float', qualification: _List_Nil, requiresAllocator: true});
				case 'contains':
					return $elm$core$Maybe$Just(
						{name: 'string_contains', qualification: _List_Nil, requiresAllocator: false});
				case 'fromChar':
					return $elm$core$Maybe$Just(
						{name: 'string_from_char', qualification: _List_Nil, requiresAllocator: true});
				case 'cons':
					return $elm$core$Maybe$Just(
						{name: 'string_cons', qualification: _List_Nil, requiresAllocator: true});
				case 'uncons':
					return $elm$core$Maybe$Just(
						{name: 'string_uncons', qualification: _List_Nil, requiresAllocator: false});
				case 'slice':
					return $elm$core$Maybe$Just(
						{name: 'string_slice', qualification: _List_Nil, requiresAllocator: false});
				case 'toLower':
					return $elm$core$Maybe$Just(
						{name: 'string_to_lower', qualification: _List_Nil, requiresAllocator: true});
				case 'toUpper':
					return $elm$core$Maybe$Just(
						{name: 'string_to_upper', qualification: _List_Nil, requiresAllocator: true});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Char':
			var _v4 = reference.name;
			switch (_v4) {
				case 'toCode':
					return $elm$core$Maybe$Just(
						{name: 'char_to_code', qualification: _List_Nil, requiresAllocator: false});
				case 'fromCode':
					return $elm$core$Maybe$Just(
						{name: 'char_from_code', qualification: _List_Nil, requiresAllocator: false});
				case 'toLower':
					return $elm$core$Maybe$Just(
						{name: 'char_to_lower', qualification: _List_Nil, requiresAllocator: false});
				case 'toUpper':
					return $elm$core$Maybe$Just(
						{name: 'char_to_upper', qualification: _List_Nil, requiresAllocator: false});
				case 'toLocaleLower':
					return $elm$core$Maybe$Just(
						{name: 'char_to_lower', qualification: _List_Nil, requiresAllocator: false});
				case 'toLocaleUpper':
					return $elm$core$Maybe$Just(
						{name: 'char_to_upper', qualification: _List_Nil, requiresAllocator: false});
				case 'isLower':
					return $elm$core$Maybe$Just(
						{name: 'char_is_lower', qualification: _List_Nil, requiresAllocator: false});
				case 'isUpper':
					return $elm$core$Maybe$Just(
						{name: 'char_is_upper', qualification: _List_Nil, requiresAllocator: false});
				case 'isHexDigit':
					return $elm$core$Maybe$Just(
						{name: 'char_is_hex_digit', qualification: _List_Nil, requiresAllocator: false});
				case 'isOctDigit':
					return $elm$core$Maybe$Just(
						{name: 'char_isOctDigit', qualification: _List_Nil, requiresAllocator: false});
				case 'isDigit':
					return $elm$core$Maybe$Just(
						{name: 'char_is_digit', qualification: _List_Nil, requiresAllocator: false});
				case 'isAlpha':
					return $elm$core$Maybe$Just(
						{name: 'char_is_alpha', qualification: _List_Nil, requiresAllocator: false});
				case 'isAlphaNum':
					return $elm$core$Maybe$Just(
						{name: 'char_is_alpha_num', qualification: _List_Nil, requiresAllocator: false});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'List':
			var _v5 = reference.name;
			switch (_v5) {
				case 'singleton':
					return $elm$core$Maybe$Just(
						{name: 'list_singleton', qualification: _List_Nil, requiresAllocator: true});
				case 'isEmpty':
					return $elm$core$Maybe$Just(
						{name: 'list_isEmpty', qualification: _List_Nil, requiresAllocator: false});
				case 'length':
					return $elm$core$Maybe$Just(
						{name: 'list_length', qualification: _List_Nil, requiresAllocator: false});
				case 'member':
					return $elm$core$Maybe$Just(
						{name: 'list_member', qualification: _List_Nil, requiresAllocator: false});
				case 'minimum':
					return $elm$core$Maybe$Just(
						{name: 'list_minimum', qualification: _List_Nil, requiresAllocator: false});
				case 'maximum':
					return $elm$core$Maybe$Just(
						{name: 'list_maximum', qualification: _List_Nil, requiresAllocator: false});
				case 'sum':
					return $elm$core$Maybe$Just(
						{name: 'list_sum', qualification: _List_Nil, requiresAllocator: false});
				case 'product':
					return $elm$core$Maybe$Just(
						{name: 'list_product', qualification: _List_Nil, requiresAllocator: false});
				case 'append':
					return $elm$core$Maybe$Just(
						{name: 'list_append', qualification: _List_Nil, requiresAllocator: true});
				case 'concat':
					return $elm$core$Maybe$Just(
						{name: 'list_concat', qualification: _List_Nil, requiresAllocator: true});
				case 'reverse':
					return $elm$core$Maybe$Just(
						{name: 'list_reverse', qualification: _List_Nil, requiresAllocator: true});
				case 'repeat':
					return $elm$core$Maybe$Just(
						{name: 'list_repeat', qualification: _List_Nil, requiresAllocator: true});
				case 'head':
					return $elm$core$Maybe$Just(
						{name: 'list_head', qualification: _List_Nil, requiresAllocator: false});
				case 'tail':
					return $elm$core$Maybe$Just(
						{name: 'list_tail', qualification: _List_Nil, requiresAllocator: false});
				case 'all':
					return $elm$core$Maybe$Just(
						{name: 'list_all', qualification: _List_Nil, requiresAllocator: false});
				case 'any':
					return $elm$core$Maybe$Just(
						{name: 'list_any', qualification: _List_Nil, requiresAllocator: false});
				case 'filter':
					return $elm$core$Maybe$Just(
						{name: 'list_filter', qualification: _List_Nil, requiresAllocator: true});
				case 'filterMap':
					return $elm$core$Maybe$Just(
						{name: 'list_filter_map', qualification: _List_Nil, requiresAllocator: true});
				case 'map':
					return $elm$core$Maybe$Just(
						{name: 'list_map', qualification: _List_Nil, requiresAllocator: true});
				case 'indexedMap':
					return $elm$core$Maybe$Just(
						{name: 'list_indexed_map', qualification: _List_Nil, requiresAllocator: true});
				case 'map2':
					return $elm$core$Maybe$Just(
						{name: 'list_map2', qualification: _List_Nil, requiresAllocator: true});
				case 'zip':
					return $elm$core$Maybe$Just(
						{name: 'list_zip', qualification: _List_Nil, requiresAllocator: true});
				case 'map3':
					return $elm$core$Maybe$Just(
						{name: 'list_map3', qualification: _List_Nil, requiresAllocator: true});
				case 'map4':
					return $elm$core$Maybe$Just(
						{name: 'list_map4', qualification: _List_Nil, requiresAllocator: true});
				case 'map5':
					return $elm$core$Maybe$Just(
						{name: 'list_map5', qualification: _List_Nil, requiresAllocator: true});
				case 'unzip':
					return $elm$core$Maybe$Just(
						{name: 'list_unzip', qualification: _List_Nil, requiresAllocator: true});
				case 'concatMap':
					return $elm$core$Maybe$Just(
						{name: 'list_concat_map', qualification: _List_Nil, requiresAllocator: true});
				case 'sort':
					return $elm$core$Maybe$Just(
						{name: 'list_sort', qualification: _List_Nil, requiresAllocator: true});
				case 'sortBy':
					return $elm$core$Maybe$Just(
						{name: 'list_sort_by', qualification: _List_Nil, requiresAllocator: true});
				case 'sortWith':
					return $elm$core$Maybe$Just(
						{name: 'list_sort_with', qualification: _List_Nil, requiresAllocator: true});
				case 'range':
					return $elm$core$Maybe$Just(
						{name: 'list_range', qualification: _List_Nil, requiresAllocator: true});
				case 'take':
					return $elm$core$Maybe$Just(
						{name: 'list_take', qualification: _List_Nil, requiresAllocator: true});
				case 'drop':
					return $elm$core$Maybe$Just(
						{name: 'list_drop', qualification: _List_Nil, requiresAllocator: false});
				case 'intersperse':
					return $elm$core$Maybe$Just(
						{name: 'list_intersperse', qualification: _List_Nil, requiresAllocator: true});
				case 'foldl':
					return $elm$core$Maybe$Just(
						{name: 'list_foldl', qualification: _List_Nil, requiresAllocator: false});
				case 'foldr':
					return $elm$core$Maybe$Just(
						{name: 'list_foldr', qualification: _List_Nil, requiresAllocator: false});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Maybe':
			var _v6 = reference.name;
			switch (_v6) {
				case 'withDefault':
					return $elm$core$Maybe$Just(
						{name: 'maybe_with_default', qualification: _List_Nil, requiresAllocator: false});
				case 'map':
					return $elm$core$Maybe$Just(
						{name: 'maybe_map', qualification: _List_Nil, requiresAllocator: false});
				case 'map2':
					return $elm$core$Maybe$Just(
						{name: 'maybe_map2', qualification: _List_Nil, requiresAllocator: false});
				case 'map3':
					return $elm$core$Maybe$Just(
						{name: 'maybe_map3', qualification: _List_Nil, requiresAllocator: false});
				case 'map4':
					return $elm$core$Maybe$Just(
						{name: 'maybe_map4', qualification: _List_Nil, requiresAllocator: false});
				case 'map5':
					return $elm$core$Maybe$Just(
						{name: 'maybe_map5', qualification: _List_Nil, requiresAllocator: false});
				case 'andThen':
					return $elm$core$Maybe$Just(
						{name: 'maybe_and_then', qualification: _List_Nil, requiresAllocator: false});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Result':
			var _v7 = reference.name;
			switch (_v7) {
				case 'map':
					return $elm$core$Maybe$Just(
						{name: 'result_map', qualification: _List_Nil, requiresAllocator: false});
				case 'map2':
					return $elm$core$Maybe$Just(
						{name: 'result_map2', qualification: _List_Nil, requiresAllocator: false});
				case 'map3':
					return $elm$core$Maybe$Just(
						{name: 'result_map3', qualification: _List_Nil, requiresAllocator: false});
				case 'map4':
					return $elm$core$Maybe$Just(
						{name: 'result_map4', qualification: _List_Nil, requiresAllocator: false});
				case 'map5':
					return $elm$core$Maybe$Just(
						{name: 'result_map5', qualification: _List_Nil, requiresAllocator: false});
				case 'andThen':
					return $elm$core$Maybe$Just(
						{name: 'result_and_then', qualification: _List_Nil, requiresAllocator: false});
				case 'withDefault':
					return $elm$core$Maybe$Just(
						{name: 'result_with_default', qualification: _List_Nil, requiresAllocator: false});
				case 'toMaybe':
					return $elm$core$Maybe$Just(
						{name: 'result_to_maybe', qualification: _List_Nil, requiresAllocator: false});
				case 'fromMaybe':
					return $elm$core$Maybe$Just(
						{name: 'result_from_maybe', qualification: _List_Nil, requiresAllocator: false});
				case 'mapError':
					return $elm$core$Maybe$Just(
						{name: 'result_map_error', qualification: _List_Nil, requiresAllocator: false});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Array':
			var _v8 = reference.name;
			switch (_v8) {
				case 'isEmpty':
					return $elm$core$Maybe$Just(
						{name: 'array_is_empty', qualification: _List_Nil, requiresAllocator: false});
				case 'length':
					return $elm$core$Maybe$Just(
						{name: 'array_length', qualification: _List_Nil, requiresAllocator: false});
				case 'get':
					return $elm$core$Maybe$Just(
						{name: 'array_get', qualification: _List_Nil, requiresAllocator: false});
				case 'empty':
					return $elm$core$Maybe$Just(
						{name: 'array_empty', qualification: _List_Nil, requiresAllocator: false});
				case 'initialize':
					return $elm$core$Maybe$Just(
						{name: 'array_initialize', qualification: _List_Nil, requiresAllocator: true});
				case 'repeat':
					return $elm$core$Maybe$Just(
						{name: 'array_repeat', qualification: _List_Nil, requiresAllocator: true});
				case 'fromList':
					return $elm$core$Maybe$Just(
						{name: 'array_from_list', qualification: _List_Nil, requiresAllocator: true});
				case 'reverse':
					return $elm$core$Maybe$Just(
						{name: 'array_reverse', qualification: _List_Nil, requiresAllocator: true});
				case 'filter':
					return $elm$core$Maybe$Just(
						{name: 'array_filter', qualification: _List_Nil, requiresAllocator: true});
				case 'push':
					return $elm$core$Maybe$Just(
						{name: 'array_push', qualification: _List_Nil, requiresAllocator: true});
				case 'set':
					return $elm$core$Maybe$Just(
						{name: 'array_set', qualification: _List_Nil, requiresAllocator: true});
				case 'slice':
					return $elm$core$Maybe$Just(
						{name: 'array_slice', qualification: _List_Nil, requiresAllocator: false});
				case 'map':
					return $elm$core$Maybe$Just(
						{name: 'array_map', qualification: _List_Nil, requiresAllocator: true});
				case 'indexedMap':
					return $elm$core$Maybe$Just(
						{name: 'array_indexed_map', qualification: _List_Nil, requiresAllocator: true});
				case 'append':
					return $elm$core$Maybe$Just(
						{name: 'array_append', qualification: _List_Nil, requiresAllocator: true});
				case 'toList':
					return $elm$core$Maybe$Just(
						{name: 'array_to_list', qualification: _List_Nil, requiresAllocator: true});
				case 'toIndexedList':
					return $elm$core$Maybe$Just(
						{name: 'array_to_indexed_list', qualification: _List_Nil, requiresAllocator: true});
				case 'foldl':
					return $elm$core$Maybe$Just(
						{name: 'array_foldl', qualification: _List_Nil, requiresAllocator: false});
				case 'foldr':
					return $elm$core$Maybe$Just(
						{name: 'array_foldr', qualification: _List_Nil, requiresAllocator: false});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Debug':
			var _v9 = reference.name;
			switch (_v9) {
				case 'log':
					return $elm$core$Maybe$Just(
						{name: 'Debug_log', qualification: _List_Nil, requiresAllocator: false});
				case 'toString':
					return $elm$core$Maybe$Just(
						{name: 'Debug_to_string', qualification: _List_Nil, requiresAllocator: true});
				case 'todo':
					return $elm$core$Maybe$Just(
						{name: 'Debug_todo', qualification: _List_Nil, requiresAllocator: false});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Json.Encode':
			var _v10 = reference.name;
			switch (_v10) {
				case 'encode':
					return $elm$core$Maybe$Just(
						{
							name: 'json_encode_encode',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4121, column: 97},
									end: {line: 4121, column: 107}
								})('')
						});
				case 'null':
					return $elm$core$Maybe$Just(
						{
							name: 'json_encode_null',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4124, column: 95},
									end: {line: 4124, column: 105}
								})('')
						});
				case 'bool':
					return $elm$core$Maybe$Just(
						{
							name: 'json_encode_bool',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4127, column: 95},
									end: {line: 4127, column: 105}
								})('')
						});
				case 'string':
					return $elm$core$Maybe$Just(
						{
							name: 'json_encode_string',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4130, column: 97},
									end: {line: 4130, column: 107}
								})('')
						});
				case 'int':
					return $elm$core$Maybe$Just(
						{
							name: 'json_encode_int',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4133, column: 94},
									end: {line: 4133, column: 104}
								})('')
						});
				case 'float':
					return $elm$core$Maybe$Just(
						{
							name: 'json_encode_float',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4136, column: 96},
									end: {line: 4136, column: 106}
								})('')
						});
				case 'list':
					return $elm$core$Maybe$Just(
						{
							name: 'json_encode_list',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4139, column: 95},
									end: {line: 4139, column: 105}
								})('')
						});
				case 'array':
					return $elm$core$Maybe$Just(
						{
							name: 'json_encode_array',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4142, column: 96},
									end: {line: 4142, column: 106}
								})('')
						});
				case 'set':
					return $elm$core$Maybe$Just(
						{
							name: 'json_encode_set',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4145, column: 94},
									end: {line: 4145, column: 104}
								})('')
						});
				case 'object':
					return $elm$core$Maybe$Just(
						{
							name: 'json_encode_object',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4148, column: 97},
									end: {line: 4148, column: 107}
								})('')
						});
				case 'dict':
					return $elm$core$Maybe$Just(
						{
							name: 'json_encode_dict',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4151, column: 95},
									end: {line: 4151, column: 105}
								})('')
						});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Json.Decode':
			var _v11 = reference.name;
			switch (_v11) {
				case 'string':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_string',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4159, column: 97},
									end: {line: 4159, column: 107}
								})('')
						});
				case 'bool':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_bool',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4162, column: 95},
									end: {line: 4162, column: 105}
								})('')
						});
				case 'int':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_int',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4165, column: 94},
									end: {line: 4165, column: 104}
								})('')
						});
				case 'float':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_float',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4168, column: 96},
									end: {line: 4168, column: 106}
								})('')
						});
				case 'nullable':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_nullable',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4171, column: 99},
									end: {line: 4171, column: 109}
								})('')
						});
				case 'list':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_list',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4174, column: 95},
									end: {line: 4174, column: 105}
								})('')
						});
				case 'array':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_array',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4177, column: 96},
									end: {line: 4177, column: 106}
								})('')
						});
				case 'dict':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_dict',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4180, column: 95},
									end: {line: 4180, column: 105}
								})('')
						});
				case 'keyValuePairs':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_keyValuePairs',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4183, column: 104},
									end: {line: 4183, column: 114}
								})('')
						});
				case 'oneOrMore':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_oneOrMore',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4186, column: 100},
									end: {line: 4186, column: 110}
								})('')
						});
				case 'field':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_field',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4189, column: 96},
									end: {line: 4189, column: 106}
								})('')
						});
				case 'at':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_at',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4192, column: 93},
									end: {line: 4192, column: 103}
								})('')
						});
				case 'index':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_index',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4195, column: 96},
									end: {line: 4195, column: 106}
								})('')
						});
				case 'maybe':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_maybe',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4198, column: 96},
									end: {line: 4198, column: 106}
								})('')
						});
				case 'oneOf':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_oneOf',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4201, column: 96},
									end: {line: 4201, column: 106}
								})('')
						});
				case 'decodeString':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_decodeString',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4204, column: 103},
									end: {line: 4204, column: 113}
								})('')
						});
				case 'decodeValue':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_decodeValue',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4207, column: 102},
									end: {line: 4207, column: 112}
								})('')
						});
				case 'errorToString':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_errorToString',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4210, column: 104},
									end: {line: 4210, column: 114}
								})('')
						});
				case 'map':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_map',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4213, column: 94},
									end: {line: 4213, column: 104}
								})('')
						});
				case 'map2':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_map2',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4216, column: 95},
									end: {line: 4216, column: 105}
								})('')
						});
				case 'map3':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_map3',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4219, column: 95},
									end: {line: 4219, column: 105}
								})('')
						});
				case 'map4':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_map4',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4222, column: 95},
									end: {line: 4222, column: 105}
								})('')
						});
				case 'map5':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_map5',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4225, column: 95},
									end: {line: 4225, column: 105}
								})('')
						});
				case 'map6':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_map6',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4228, column: 95},
									end: {line: 4228, column: 105}
								})('')
						});
				case 'map7':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_map7',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4231, column: 95},
									end: {line: 4231, column: 105}
								})('')
						});
				case 'map8':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_map8',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4234, column: 95},
									end: {line: 4234, column: 105}
								})('')
						});
				case 'lazy':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_lazy',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4237, column: 95},
									end: {line: 4237, column: 105}
								})('')
						});
				case 'value':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_value',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4240, column: 96},
									end: {line: 4240, column: 106}
								})('')
						});
				case 'null':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_null',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4243, column: 95},
									end: {line: 4243, column: 105}
								})('')
						});
				case 'succeed':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_succeed',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4246, column: 98},
									end: {line: 4246, column: 108}
								})('')
						});
				case 'fail':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_fail',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4249, column: 95},
									end: {line: 4249, column: 105}
								})('')
						});
				case 'andThen':
					return $elm$core$Maybe$Just(
						{
							name: 'json_decode_andThen',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4252, column: 98},
									end: {line: 4252, column: 108}
								})('')
						});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Regex':
			var _v12 = reference.name;
			switch (_v12) {
				case 'fromString':
					return $elm$core$Maybe$Just(
						{
							name: 'regex_fromString',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4260, column: 95},
									end: {line: 4260, column: 105}
								})('')
						});
				case 'fromStringWith':
					return $elm$core$Maybe$Just(
						{
							name: 'regex_fromStringWith',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4263, column: 99},
									end: {line: 4263, column: 109}
								})('')
						});
				case 'never':
					return $elm$core$Maybe$Just(
						{
							name: 'regex_never',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4266, column: 90},
									end: {line: 4266, column: 100}
								})('')
						});
				case 'contains':
					return $elm$core$Maybe$Just(
						{
							name: 'regex_contains',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4269, column: 93},
									end: {line: 4269, column: 103}
								})('')
						});
				case 'split':
					return $elm$core$Maybe$Just(
						{
							name: 'regex_split',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4272, column: 90},
									end: {line: 4272, column: 100}
								})('')
						});
				case 'find':
					return $elm$core$Maybe$Just(
						{
							name: 'regex_find',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4275, column: 89},
									end: {line: 4275, column: 99}
								})('')
						});
				case 'replace':
					return $elm$core$Maybe$Just(
						{
							name: 'regex_replace',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4278, column: 92},
									end: {line: 4278, column: 102}
								})('')
						});
				case 'splitAtMost':
					return $elm$core$Maybe$Just(
						{
							name: 'regex_splitAtMost',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4281, column: 96},
									end: {line: 4281, column: 106}
								})('')
						});
				case 'findAtMost':
					return $elm$core$Maybe$Just(
						{
							name: 'regex_findAtMost',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4284, column: 95},
									end: {line: 4284, column: 105}
								})('')
						});
				case 'replaceAtMost':
					return $elm$core$Maybe$Just(
						{
							name: 'regex_replaceAtMost',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4287, column: 98},
									end: {line: 4287, column: 108}
								})('')
						});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Random':
			var _v13 = reference.name;
			switch (_v13) {
				case 'int':
					return $elm$core$Maybe$Just(
						{
							name: 'random_int',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4295, column: 89},
									end: {line: 4295, column: 99}
								})('')
						});
				case 'float':
					return $elm$core$Maybe$Just(
						{
							name: 'random_float',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4298, column: 91},
									end: {line: 4298, column: 101}
								})('')
						});
				case 'uniform':
					return $elm$core$Maybe$Just(
						{
							name: 'random_uniform',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4301, column: 93},
									end: {line: 4301, column: 103}
								})('')
						});
				case 'weighted':
					return $elm$core$Maybe$Just(
						{
							name: 'random_weighted',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4304, column: 94},
									end: {line: 4304, column: 104}
								})('')
						});
				case 'constant':
					return $elm$core$Maybe$Just(
						{
							name: 'random_constant',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4307, column: 94},
									end: {line: 4307, column: 104}
								})('')
						});
				case 'list':
					return $elm$core$Maybe$Just(
						{
							name: 'random_list',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4310, column: 90},
									end: {line: 4310, column: 100}
								})('')
						});
				case 'pair':
					return $elm$core$Maybe$Just(
						{
							name: 'random_pair',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4313, column: 90},
									end: {line: 4313, column: 100}
								})('')
						});
				case 'map':
					return $elm$core$Maybe$Just(
						{
							name: 'random_map',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4316, column: 89},
									end: {line: 4316, column: 99}
								})('')
						});
				case 'map2':
					return $elm$core$Maybe$Just(
						{
							name: 'random_map2',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4319, column: 90},
									end: {line: 4319, column: 100}
								})('')
						});
				case 'map3':
					return $elm$core$Maybe$Just(
						{
							name: 'random_map3',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4322, column: 90},
									end: {line: 4322, column: 100}
								})('')
						});
				case 'map4':
					return $elm$core$Maybe$Just(
						{
							name: 'random_map4',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4325, column: 90},
									end: {line: 4325, column: 100}
								})('')
						});
				case 'map5':
					return $elm$core$Maybe$Just(
						{
							name: 'random_map5',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4328, column: 90},
									end: {line: 4328, column: 100}
								})('')
						});
				case 'andThen':
					return $elm$core$Maybe$Just(
						{
							name: 'random_andThen',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4331, column: 93},
									end: {line: 4331, column: 103}
								})('')
						});
				case 'lazy':
					return $elm$core$Maybe$Just(
						{
							name: 'random_lazy',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4334, column: 90},
									end: {line: 4334, column: 100}
								})('')
						});
				case 'minInt':
					return $elm$core$Maybe$Just(
						{
							name: 'random_minInt',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4337, column: 92},
									end: {line: 4337, column: 102}
								})('')
						});
				case 'maxInt':
					return $elm$core$Maybe$Just(
						{
							name: 'random_maxInt',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4340, column: 92},
									end: {line: 4340, column: 102}
								})('')
						});
				case 'step':
					return $elm$core$Maybe$Just(
						{
							name: 'random_step',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4343, column: 90},
									end: {line: 4343, column: 100}
								})('')
						});
				case 'initialSeed':
					return $elm$core$Maybe$Just(
						{
							name: 'random_initialSeed',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4346, column: 97},
									end: {line: 4346, column: 107}
								})('')
						});
				case 'independentSeed':
					return $elm$core$Maybe$Just(
						{
							name: 'random_independentSeed',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4349, column: 101},
									end: {line: 4349, column: 111}
								})('')
						});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Time':
			var _v14 = reference.name;
			switch (_v14) {
				case 'posixToMillis':
					return $elm$core$Maybe$Just(
						{
							name: 'time_posixToMillis',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4357, column: 97},
									end: {line: 4357, column: 107}
								})('')
						});
				case 'millisToPosix':
					return $elm$core$Maybe$Just(
						{
							name: 'time_millisToPosix',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4360, column: 97},
									end: {line: 4360, column: 107}
								})('')
						});
				case 'utc':
					return $elm$core$Maybe$Just(
						{
							name: 'time_utc',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4363, column: 87},
									end: {line: 4363, column: 97}
								})('')
						});
				case 'toYear':
					return $elm$core$Maybe$Just(
						{
							name: 'time_toYear',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4366, column: 90},
									end: {line: 4366, column: 100}
								})('')
						});
				case 'toMonth':
					return $elm$core$Maybe$Just(
						{
							name: 'time_toMonth',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4369, column: 91},
									end: {line: 4369, column: 101}
								})('')
						});
				case 'toDay':
					return $elm$core$Maybe$Just(
						{
							name: 'time_toDay',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4372, column: 89},
									end: {line: 4372, column: 99}
								})('')
						});
				case 'toWeekday':
					return $elm$core$Maybe$Just(
						{
							name: 'time_toWeekday',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4375, column: 93},
									end: {line: 4375, column: 103}
								})('')
						});
				case 'toHour':
					return $elm$core$Maybe$Just(
						{
							name: 'time_toHour',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4378, column: 90},
									end: {line: 4378, column: 100}
								})('')
						});
				case 'toMinute':
					return $elm$core$Maybe$Just(
						{
							name: 'time_toMinute',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4381, column: 92},
									end: {line: 4381, column: 102}
								})('')
						});
				case 'toSecond':
					return $elm$core$Maybe$Just(
						{
							name: 'time_toSecond',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4384, column: 92},
									end: {line: 4384, column: 102}
								})('')
						});
				case 'toMillis':
					return $elm$core$Maybe$Just(
						{
							name: 'time_toMillis',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4387, column: 92},
									end: {line: 4387, column: 102}
								})('')
						});
				case 'customZone':
					return $elm$core$Maybe$Just(
						{
							name: 'time_customZone',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4390, column: 94},
									end: {line: 4390, column: 104}
								})('')
						});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Bytes':
			var _v15 = reference.name;
			if (_v15 === 'width') {
				return $elm$core$Maybe$Just(
					{
						name: 'bytes_width',
						qualification: _List_Nil,
						requiresAllocator: _Debug_todo(
							'ElmSyntaxToRust',
							{
								start: {line: 4398, column: 90},
								end: {line: 4398, column: 100}
							})('')
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		case 'Bytes.Decode':
			var _v16 = reference.name;
			switch (_v16) {
				case 'Loop':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_decode_Loop',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4406, column: 96},
									end: {line: 4406, column: 106}
								})('')
						});
				case 'Done':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_decode_Done',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4409, column: 96},
									end: {line: 4409, column: 106}
								})('')
						});
				case 'decode':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_decode_decode',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4412, column: 98},
									end: {line: 4412, column: 108}
								})('')
						});
				case 'signedInt8':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_decode_signedInt8',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4415, column: 102},
									end: {line: 4415, column: 112}
								})('')
						});
				case 'signedInt16':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_decode_signedInt16',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4418, column: 103},
									end: {line: 4418, column: 113}
								})('')
						});
				case 'signedInt32':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_decode_signedInt32',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4421, column: 103},
									end: {line: 4421, column: 113}
								})('')
						});
				case 'unsignedInt8':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_decode_unsignedInt8',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4424, column: 104},
									end: {line: 4424, column: 114}
								})('')
						});
				case 'unsignedInt16':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_decode_unsignedInt16',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4427, column: 105},
									end: {line: 4427, column: 115}
								})('')
						});
				case 'unsignedInt32':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_decode_unsignedInt32',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4430, column: 105},
									end: {line: 4430, column: 115}
								})('')
						});
				case 'float32':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_decode_float32',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4433, column: 99},
									end: {line: 4433, column: 109}
								})('')
						});
				case 'float64':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_decode_float64',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4436, column: 99},
									end: {line: 4436, column: 109}
								})('')
						});
				case 'string':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_decode_string',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4439, column: 98},
									end: {line: 4439, column: 108}
								})('')
						});
				case 'bytes':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_decode_bytes',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4442, column: 97},
									end: {line: 4442, column: 107}
								})('')
						});
				case 'map':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_decode_map',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4445, column: 95},
									end: {line: 4445, column: 105}
								})('')
						});
				case 'map2':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_decode_map2',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4448, column: 96},
									end: {line: 4448, column: 106}
								})('')
						});
				case 'map3':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_decode_map3',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4451, column: 96},
									end: {line: 4451, column: 106}
								})('')
						});
				case 'map4':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_decode_map4',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4454, column: 96},
									end: {line: 4454, column: 106}
								})('')
						});
				case 'map5':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_decode_map5',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4457, column: 96},
									end: {line: 4457, column: 106}
								})('')
						});
				case 'andThen':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_decode_andThen',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4460, column: 99},
									end: {line: 4460, column: 109}
								})('')
						});
				case 'succeed':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_decode_succeed',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4463, column: 99},
									end: {line: 4463, column: 109}
								})('')
						});
				case 'fail':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_decode_fail',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4466, column: 96},
									end: {line: 4466, column: 106}
								})('')
						});
				case 'loop':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_decode_loop',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4469, column: 96},
									end: {line: 4469, column: 106}
								})('')
						});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Bytes.Encode':
			var _v17 = reference.name;
			switch (_v17) {
				case 'encode':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_encode_encode',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4477, column: 98},
									end: {line: 4477, column: 108}
								})('')
						});
				case 'signedInt8':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_encode_signedInt8',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4480, column: 102},
									end: {line: 4480, column: 112}
								})('')
						});
				case 'signedInt16':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_encode_signedInt16',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4483, column: 103},
									end: {line: 4483, column: 113}
								})('')
						});
				case 'signedInt32':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_encode_signedInt32',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4486, column: 103},
									end: {line: 4486, column: 113}
								})('')
						});
				case 'unsignedInt8':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_encode_unsignedInt8',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4489, column: 104},
									end: {line: 4489, column: 114}
								})('')
						});
				case 'unsignedInt16':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_encode_unsignedInt16',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4492, column: 105},
									end: {line: 4492, column: 115}
								})('')
						});
				case 'unsignedInt32':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_encode_unsignedInt32',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4495, column: 105},
									end: {line: 4495, column: 115}
								})('')
						});
				case 'float32':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_encode_float32',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4498, column: 99},
									end: {line: 4498, column: 109}
								})('')
						});
				case 'float64':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_encode_float64',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4501, column: 99},
									end: {line: 4501, column: 109}
								})('')
						});
				case 'bytes':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_encode_bytes',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4504, column: 97},
									end: {line: 4504, column: 107}
								})('')
						});
				case 'string':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_encode_string',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4507, column: 98},
									end: {line: 4507, column: 108}
								})('')
						});
				case 'getStringWidth':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_encode_getStringWidth',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4510, column: 106},
									end: {line: 4510, column: 116}
								})('')
						});
				case 'sequence':
					return $elm$core$Maybe$Just(
						{
							name: 'bytes_encode_sequence',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4513, column: 100},
									end: {line: 4513, column: 110}
								})('')
						});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Elm.Kernel.Parser':
			var _v18 = reference.name;
			switch (_v18) {
				case 'isSubString':
					return $elm$core$Maybe$Just(
						{
							name: 'ElmKernelParser_isSubString',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4521, column: 106},
									end: {line: 4521, column: 116}
								})('')
						});
				case 'isSubChar':
					return $elm$core$Maybe$Just(
						{
							name: 'ElmKernelParser_isSubChar',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4524, column: 104},
									end: {line: 4524, column: 114}
								})('')
						});
				case 'isAsciiCode':
					return $elm$core$Maybe$Just(
						{
							name: 'ElmKernelParser_isAsciiCode',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4527, column: 106},
									end: {line: 4527, column: 116}
								})('')
						});
				case 'chompBase10':
					return $elm$core$Maybe$Just(
						{
							name: 'ElmKernelParser_chompBase10',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4530, column: 106},
									end: {line: 4530, column: 116}
								})('')
						});
				case 'consumeBase':
					return $elm$core$Maybe$Just(
						{
							name: 'ElmKernelParser_consumeBase',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4533, column: 106},
									end: {line: 4533, column: 116}
								})('')
						});
				case 'consumeBase16':
					return $elm$core$Maybe$Just(
						{
							name: 'ElmKernelParser_consumeBase16',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4536, column: 108},
									end: {line: 4536, column: 118}
								})('')
						});
				case 'findSubString':
					return $elm$core$Maybe$Just(
						{
							name: 'ElmKernelParser_findSubString',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4539, column: 108},
									end: {line: 4539, column: 118}
								})('')
						});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Elm.Kernel.VirtualDom':
			var _v19 = reference.name;
			switch (_v19) {
				case 'property':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_property',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4547, column: 99},
									end: {line: 4547, column: 109}
								})('')
						});
				case 'attribute':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_attribute',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4550, column: 100},
									end: {line: 4550, column: 110}
								})('')
						});
				case 'attributeNS':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_attributeNS',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4553, column: 102},
									end: {line: 4553, column: 112}
								})('')
						});
				case 'node':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_node',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4556, column: 95},
									end: {line: 4556, column: 105}
								})('')
						});
				case 'nodeNS':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_nodeNS',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4559, column: 97},
									end: {line: 4559, column: 107}
								})('')
						});
				case 'noJavaScriptOrHtmlUri':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_noJavaScriptOrHtmlUri',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4562, column: 112},
									end: {line: 4562, column: 122}
								})('')
						});
				case 'noJavaScriptUri':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_noJavaScriptUri',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4565, column: 106},
									end: {line: 4565, column: 116}
								})('')
						});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'VirtualDom':
			var _v20 = reference.name;
			switch (_v20) {
				case 'Normal':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_Normal',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4573, column: 97},
									end: {line: 4573, column: 107}
								})('')
						});
				case 'MayStopPropagation':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_MayStopPropagation',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4576, column: 109},
									end: {line: 4576, column: 119}
								})('')
						});
				case 'MayPreventDefault':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_MayPreventDefault',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4579, column: 108},
									end: {line: 4579, column: 118}
								})('')
						});
				case 'Custom':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_Custom',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4582, column: 97},
									end: {line: 4582, column: 107}
								})('')
						});
				case 'text':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_text',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4585, column: 95},
									end: {line: 4585, column: 105}
								})('')
						});
				case 'node':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_node',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4588, column: 95},
									end: {line: 4588, column: 105}
								})('')
						});
				case 'nodeNS':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_nodeNS',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4591, column: 97},
									end: {line: 4591, column: 107}
								})('')
						});
				case 'style':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_style',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4594, column: 96},
									end: {line: 4594, column: 106}
								})('')
						});
				case 'property':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_property',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4597, column: 99},
									end: {line: 4597, column: 109}
								})('')
						});
				case 'attribute':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_attribute',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4600, column: 100},
									end: {line: 4600, column: 110}
								})('')
						});
				case 'attributeNS':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_attributeNS',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4603, column: 102},
									end: {line: 4603, column: 112}
								})('')
						});
				case 'on':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_on',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4606, column: 93},
									end: {line: 4606, column: 103}
								})('')
						});
				case 'map':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_map',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4609, column: 94},
									end: {line: 4609, column: 104}
								})('')
						});
				case 'mapAttribute':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_mapAttribute',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4612, column: 103},
									end: {line: 4612, column: 113}
								})('')
						});
				case 'keyedNode':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_keyedNode',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4615, column: 100},
									end: {line: 4615, column: 110}
								})('')
						});
				case 'keyedNodeNS':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_keyedNodeNS',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4618, column: 102},
									end: {line: 4618, column: 112}
								})('')
						});
				case 'lazy':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_lazy',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4621, column: 95},
									end: {line: 4621, column: 105}
								})('')
						});
				case 'lazy2':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_lazy2',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4624, column: 96},
									end: {line: 4624, column: 106}
								})('')
						});
				case 'lazy3':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_lazy3',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4627, column: 96},
									end: {line: 4627, column: 106}
								})('')
						});
				case 'lazy4':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_lazy4',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4630, column: 96},
									end: {line: 4630, column: 106}
								})('')
						});
				case 'lazy5':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_lazy5',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4633, column: 96},
									end: {line: 4633, column: 106}
								})('')
						});
				case 'lazy6':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_lazy6',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4636, column: 96},
									end: {line: 4636, column: 106}
								})('')
						});
				case 'lazy7':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_lazy7',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4639, column: 96},
									end: {line: 4639, column: 106}
								})('')
						});
				case 'lazy8':
					return $elm$core$Maybe$Just(
						{
							name: 'virtual_dom_lazy8',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4642, column: 96},
									end: {line: 4642, column: 106}
								})('')
						});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Math.Vector2':
			var _v21 = reference.name;
			switch (_v21) {
				case 'add':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector2_add',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4650, column: 95},
									end: {line: 4650, column: 105}
								})('')
						});
				case 'direction':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector2_direction',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4653, column: 101},
									end: {line: 4653, column: 111}
								})('')
						});
				case 'distance':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector2_distance',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4656, column: 100},
									end: {line: 4656, column: 110}
								})('')
						});
				case 'distanceSquared':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector2_distanceSquared',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4659, column: 107},
									end: {line: 4659, column: 117}
								})('')
						});
				case 'dot':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector2_dot',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4662, column: 95},
									end: {line: 4662, column: 105}
								})('')
						});
				case 'fromRecord':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector2_fromRecord',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4665, column: 102},
									end: {line: 4665, column: 112}
								})('')
						});
				case 'getX':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector2_getX',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4668, column: 96},
									end: {line: 4668, column: 106}
								})('')
						});
				case 'getY':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector2_getY',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4671, column: 96},
									end: {line: 4671, column: 106}
								})('')
						});
				case 'length':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector2_length',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4674, column: 98},
									end: {line: 4674, column: 108}
								})('')
						});
				case 'lengthSquared':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector2_lengthSquared',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4677, column: 105},
									end: {line: 4677, column: 115}
								})('')
						});
				case 'negate':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector2_negate',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4680, column: 98},
									end: {line: 4680, column: 108}
								})('')
						});
				case 'normalize':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector2_normalize',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4683, column: 101},
									end: {line: 4683, column: 111}
								})('')
						});
				case 'scale':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector2_scale',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4686, column: 97},
									end: {line: 4686, column: 107}
								})('')
						});
				case 'setX':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector2_setX',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4689, column: 96},
									end: {line: 4689, column: 106}
								})('')
						});
				case 'setY':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector2_setY',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4692, column: 96},
									end: {line: 4692, column: 106}
								})('')
						});
				case 'sub':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector2_sub',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4695, column: 95},
									end: {line: 4695, column: 105}
								})('')
						});
				case 'toRecord':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector2_toRecord',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4698, column: 100},
									end: {line: 4698, column: 110}
								})('')
						});
				case 'vec2':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector2_vec2',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4701, column: 96},
									end: {line: 4701, column: 106}
								})('')
						});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Math.Vector3':
			var _v22 = reference.name;
			switch (_v22) {
				case 'add':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_add',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4709, column: 95},
									end: {line: 4709, column: 105}
								})('')
						});
				case 'cross':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_cross',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4712, column: 97},
									end: {line: 4712, column: 107}
								})('')
						});
				case 'direction':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_direction',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4715, column: 101},
									end: {line: 4715, column: 111}
								})('')
						});
				case 'distance':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_distance',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4718, column: 100},
									end: {line: 4718, column: 110}
								})('')
						});
				case 'distanceSquared':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_distanceSquared',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4721, column: 107},
									end: {line: 4721, column: 117}
								})('')
						});
				case 'dot':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_dot',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4724, column: 95},
									end: {line: 4724, column: 105}
								})('')
						});
				case 'fromRecord':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_fromRecord',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4727, column: 102},
									end: {line: 4727, column: 112}
								})('')
						});
				case 'getX':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_getX',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4730, column: 96},
									end: {line: 4730, column: 106}
								})('')
						});
				case 'getY':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_getY',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4733, column: 96},
									end: {line: 4733, column: 106}
								})('')
						});
				case 'getZ':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_getZ',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4736, column: 96},
									end: {line: 4736, column: 106}
								})('')
						});
				case 'i':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_i',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4739, column: 93},
									end: {line: 4739, column: 103}
								})('')
						});
				case 'j':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_j',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4742, column: 93},
									end: {line: 4742, column: 103}
								})('')
						});
				case 'k':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_k',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4745, column: 93},
									end: {line: 4745, column: 103}
								})('')
						});
				case 'length':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_length',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4748, column: 98},
									end: {line: 4748, column: 108}
								})('')
						});
				case 'lengthSquared':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_lengthSquared',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4751, column: 105},
									end: {line: 4751, column: 115}
								})('')
						});
				case 'negate':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_negate',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4754, column: 98},
									end: {line: 4754, column: 108}
								})('')
						});
				case 'normalize':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_normalize',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4757, column: 101},
									end: {line: 4757, column: 111}
								})('')
						});
				case 'scale':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_scale',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4760, column: 97},
									end: {line: 4760, column: 107}
								})('')
						});
				case 'setX':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_setX',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4763, column: 96},
									end: {line: 4763, column: 106}
								})('')
						});
				case 'setY':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_setY',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4766, column: 96},
									end: {line: 4766, column: 106}
								})('')
						});
				case 'setZ':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_setZ',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4769, column: 96},
									end: {line: 4769, column: 106}
								})('')
						});
				case 'sub':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_sub',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4772, column: 95},
									end: {line: 4772, column: 105}
								})('')
						});
				case 'toRecord':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_toRecord',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4775, column: 100},
									end: {line: 4775, column: 110}
								})('')
						});
				case 'vec3':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_vec3',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4778, column: 96},
									end: {line: 4778, column: 106}
								})('')
						});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Math.Vector4':
			var _v23 = reference.name;
			switch (_v23) {
				case 'add':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector4_add',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4786, column: 95},
									end: {line: 4786, column: 105}
								})('')
						});
				case 'direction':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector4_direction',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4789, column: 101},
									end: {line: 4789, column: 111}
								})('')
						});
				case 'distance':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector4_distance',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4792, column: 100},
									end: {line: 4792, column: 110}
								})('')
						});
				case 'distanceSquared':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector4_distanceSquared',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4795, column: 107},
									end: {line: 4795, column: 117}
								})('')
						});
				case 'dot':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector4_dot',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4798, column: 95},
									end: {line: 4798, column: 105}
								})('')
						});
				case 'fromRecord':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector4_fromRecord',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4801, column: 102},
									end: {line: 4801, column: 112}
								})('')
						});
				case 'getW':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector4_getW',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4804, column: 96},
									end: {line: 4804, column: 106}
								})('')
						});
				case 'getX':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector4_getX',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4807, column: 96},
									end: {line: 4807, column: 106}
								})('')
						});
				case 'getY':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector4_getY',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4810, column: 96},
									end: {line: 4810, column: 106}
								})('')
						});
				case 'getZ':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector4_getZ',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4813, column: 96},
									end: {line: 4813, column: 106}
								})('')
						});
				case 'length':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector4_length',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4816, column: 98},
									end: {line: 4816, column: 108}
								})('')
						});
				case 'lengthSquared':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector4_lengthSquared',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4819, column: 105},
									end: {line: 4819, column: 115}
								})('')
						});
				case 'negate':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_negate',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4822, column: 98},
									end: {line: 4822, column: 108}
								})('')
						});
				case 'normalize':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector3_normalize',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4825, column: 101},
									end: {line: 4825, column: 111}
								})('')
						});
				case 'scale':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector4_scale',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4828, column: 97},
									end: {line: 4828, column: 107}
								})('')
						});
				case 'setW':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector4_setW',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4831, column: 96},
									end: {line: 4831, column: 106}
								})('')
						});
				case 'setX':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector4_setX',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4834, column: 96},
									end: {line: 4834, column: 106}
								})('')
						});
				case 'setY':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector4_setY',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4837, column: 96},
									end: {line: 4837, column: 106}
								})('')
						});
				case 'setZ':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector4_setZ',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4840, column: 96},
									end: {line: 4840, column: 106}
								})('')
						});
				case 'sub':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector4_sub',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4843, column: 95},
									end: {line: 4843, column: 105}
								})('')
						});
				case 'toRecord':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector4_toRecord',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4846, column: 100},
									end: {line: 4846, column: 110}
								})('')
						});
				case 'vec4':
					return $elm$core$Maybe$Just(
						{
							name: 'math_vector4_vec4',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4849, column: 96},
									end: {line: 4849, column: 106}
								})('')
						});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Math.Matrix4':
			return $elm$core$Maybe$Nothing;
		case 'Platform':
			var _v24 = reference.name;
			if (_v24 === 'worker') {
				return $elm$core$Maybe$Just(
					{
						name: 'platform_worker',
						qualification: _List_Nil,
						requiresAllocator: _Debug_todo(
							'ElmSyntaxToRust',
							{
								start: {line: 4861, column: 94},
								end: {line: 4861, column: 104}
							})('')
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		case 'Platform.Cmd':
			var _v25 = reference.name;
			switch (_v25) {
				case 'none':
					return $elm$core$Maybe$Just(
						{
							name: 'platform_cmd_none',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4869, column: 96},
									end: {line: 4869, column: 106}
								})('')
						});
				case 'batch':
					return $elm$core$Maybe$Just(
						{
							name: 'platform_cmd_batch',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4872, column: 97},
									end: {line: 4872, column: 107}
								})('')
						});
				case 'map':
					return $elm$core$Maybe$Just(
						{
							name: 'platform_cmd_map',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4875, column: 95},
									end: {line: 4875, column: 105}
								})('')
						});
				default:
					return $elm$core$Maybe$Nothing;
			}
		case 'Platform.Sub':
			var _v26 = reference.name;
			switch (_v26) {
				case 'none':
					return $elm$core$Maybe$Just(
						{
							name: 'platform_sub_none',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4883, column: 96},
									end: {line: 4883, column: 106}
								})('')
						});
				case 'batch':
					return $elm$core$Maybe$Just(
						{
							name: 'platform_sub_batch',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4886, column: 97},
									end: {line: 4886, column: 107}
								})('')
						});
				case 'map':
					return $elm$core$Maybe$Just(
						{
							name: 'platform_sub_map',
							qualification: _List_Nil,
							requiresAllocator: _Debug_todo(
								'ElmSyntaxToRust',
								{
									start: {line: 4889, column: 95},
									end: {line: 4889, column: 105}
								})('')
						});
				default:
					return $elm$core$Maybe$Nothing;
			}
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$ElmSyntaxToRust$listMapAndSumPlus = F3(
	function (soFar, elementToInt, list) {
		listMapAndSumPlus:
		while (true) {
			if (!list.b) {
				return soFar;
			} else {
				var head = list.a;
				var tail = list.b;
				var $temp$soFar = soFar + elementToInt(head),
					$temp$elementToInt = elementToInt,
					$temp$list = tail;
				soFar = $temp$soFar;
				elementToInt = $temp$elementToInt;
				list = $temp$list;
				continue listMapAndSumPlus;
			}
		}
	});
var $author$project$ElmSyntaxToRust$listMapAndSum = F2(
	function (elementToInt, list) {
		return A3($author$project$ElmSyntaxToRust$listMapAndSumPlus, 0, elementToInt, list);
	});
var $author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference = F2(
	function (referenceToCountUsesOf, rustExpression) {
		rustExpressionCountUsesOfReference:
		while (true) {
			switch (rustExpression.$) {
				case 'RustExpressionReference':
					var reference = rustExpression.a;
					return (_Utils_eq(reference.qualification, referenceToCountUsesOf.qualification) && _Utils_eq(reference.name, referenceToCountUsesOf.name)) ? 1 : 0;
				case 'RustExpressionUnit':
					return 0;
				case 'RustExpressionSelf':
					return 0;
				case 'RustExpressionVariant':
					return 0;
				case 'RustExpressionF64':
					return 0;
				case 'RustExpressionStringLiteral':
					return 0;
				case 'RustExpressionUnicodeScalar':
					return 0;
				case 'RustExpressionNegateOperation':
					var inNegation = rustExpression.a;
					var $temp$referenceToCountUsesOf = referenceToCountUsesOf,
						$temp$rustExpression = inNegation;
					referenceToCountUsesOf = $temp$referenceToCountUsesOf;
					rustExpression = $temp$rustExpression;
					continue rustExpressionCountUsesOfReference;
				case 'RustExpressionBorrow':
					var borrowed = rustExpression.a;
					var $temp$referenceToCountUsesOf = referenceToCountUsesOf,
						$temp$rustExpression = borrowed;
					referenceToCountUsesOf = $temp$referenceToCountUsesOf;
					rustExpression = $temp$rustExpression;
					continue rustExpressionCountUsesOfReference;
				case 'RustExpressionRecordAccess':
					var recordAccess = rustExpression.a;
					var $temp$referenceToCountUsesOf = referenceToCountUsesOf,
						$temp$rustExpression = recordAccess.record;
					referenceToCountUsesOf = $temp$referenceToCountUsesOf;
					rustExpression = $temp$rustExpression;
					continue rustExpressionCountUsesOfReference;
				case 'RustExpressionLambda':
					var lambda = rustExpression.a;
					var $temp$referenceToCountUsesOf = referenceToCountUsesOf,
						$temp$rustExpression = lambda.result;
					referenceToCountUsesOf = $temp$referenceToCountUsesOf;
					rustExpression = $temp$rustExpression;
					continue rustExpressionCountUsesOfReference;
				case 'RustExpressionCall':
					var call = rustExpression.a;
					return A2($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference, referenceToCountUsesOf, call.called) + A2(
						$author$project$ElmSyntaxToRust$listMapAndSum,
						function (argument) {
							return A2($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference, referenceToCountUsesOf, argument);
						},
						call._arguments);
				case 'RustExpressionArrayLiteral':
					var elements = rustExpression.a;
					return A2(
						$author$project$ElmSyntaxToRust$listMapAndSum,
						function (element) {
							return A2($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference, referenceToCountUsesOf, element);
						},
						elements);
				case 'RustExpressionRecord':
					var fields = rustExpression.a;
					return A3(
						$miniBill$elm_fast_dict$FastDict$foldl,
						F3(
							function (_v2, fieldValue, soFar) {
								return soFar + A2($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference, referenceToCountUsesOf, fieldValue);
							}),
						0,
						fields);
				case 'RustExpressionIfElse':
					var ifThenElse = rustExpression.a;
					return (A2($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference, referenceToCountUsesOf, ifThenElse.condition) + A2($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference, referenceToCountUsesOf, ifThenElse.onTrue)) + A2($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference, referenceToCountUsesOf, ifThenElse.onFalse);
				case 'RustExpressionMatch':
					var match = rustExpression.a;
					return A2($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference, referenceToCountUsesOf, match.matched) + A2(
						$author$project$ElmSyntaxToRust$listMapAndSum,
						function (rustCase) {
							return A2($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference, referenceToCountUsesOf, rustCase.result);
						},
						A2($elm$core$List$cons, match.case0, match.case1Up));
				case 'RustExpressionTuple':
					var parts = rustExpression.a;
					return (A2($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference, referenceToCountUsesOf, parts.part0) + A2($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference, referenceToCountUsesOf, parts.part1)) + A2(
						$author$project$ElmSyntaxToRust$listMapAndSum,
						function (part) {
							return A2($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference, referenceToCountUsesOf, part);
						},
						parts.part2Up);
				default:
					var rustExpressionAfterStatement = rustExpression.a;
					return A2($author$project$ElmSyntaxToRust$rustStatementCountUsesOfReference, referenceToCountUsesOf, rustExpressionAfterStatement.statement) + A2($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference, referenceToCountUsesOf, rustExpressionAfterStatement.result);
			}
		}
	});
var $author$project$ElmSyntaxToRust$rustStatementCountUsesOfReference = F2(
	function (referenceToCountUsesOf, rustStatement) {
		switch (rustStatement.$) {
			case 'RustStatementLetDeclarationUninitialized':
				return 0;
			case 'RustStatementLetDestructuring':
				var destructuring = rustStatement.a;
				return A2($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference, referenceToCountUsesOf, destructuring.expression);
			case 'RustStatementLetDeclaration':
				var rustStatementLetDeclaration = rustStatement.a;
				return A2($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference, referenceToCountUsesOf, rustStatementLetDeclaration.result);
			case 'RustStatementFuncDeclaration':
				var funcDeclaration = rustStatement.a;
				return A2($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference, referenceToCountUsesOf, funcDeclaration.result);
			case 'RustStatementVarDeclaration':
				var _var = rustStatement.a;
				return A2($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference, referenceToCountUsesOf, _var.value);
			case 'RustStatementBindingAssignment':
				var assignment = rustStatement.a;
				return A2($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference, referenceToCountUsesOf, assignment.assignedValue);
			case 'RustStatementRecordFieldAssignment':
				var assignment = rustStatement.a;
				return A2($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference, referenceToCountUsesOf, assignment.assignedValue);
			case 'RustStatementIfElse':
				var ifElse = rustStatement.a;
				return (A2($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference, referenceToCountUsesOf, ifElse.condition) + A2(
					$author$project$ElmSyntaxToRust$listMapAndSum,
					function (statement) {
						return A2($author$project$ElmSyntaxToRust$rustStatementCountUsesOfReference, referenceToCountUsesOf, statement);
					},
					ifElse.onTrue)) + A2(
					$author$project$ElmSyntaxToRust$listMapAndSum,
					function (statement) {
						return A2($author$project$ElmSyntaxToRust$rustStatementCountUsesOfReference, referenceToCountUsesOf, statement);
					},
					ifElse.onFalse);
			default:
				var match = rustStatement.a;
				return (A2($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference, referenceToCountUsesOf, match.matched) + A2(
					$author$project$ElmSyntaxToRust$listMapAndSum,
					function (statement) {
						return A2($author$project$ElmSyntaxToRust$rustStatementCountUsesOfReference, referenceToCountUsesOf, statement);
					},
					match.case0.statements)) + A2(
					$author$project$ElmSyntaxToRust$listMapAndSum,
					function (laterCase) {
						return A2(
							$author$project$ElmSyntaxToRust$listMapAndSum,
							function (statement) {
								return A2($author$project$ElmSyntaxToRust$rustStatementCountUsesOfReference, referenceToCountUsesOf, statement);
							},
							laterCase.statements);
					},
					match.case1Up);
		}
	});
var $author$project$ElmSyntaxToRust$rustExpressionInnermostLambdaResult = function (rustExpression) {
	switch (rustExpression.$) {
		case 'RustExpressionLambda':
			var lambda = rustExpression.a;
			var resultInnermostLambdaResult = $author$project$ElmSyntaxToRust$rustExpressionInnermostLambdaResult(lambda.result);
			return {result: resultInnermostLambdaResult.result, statements: resultInnermostLambdaResult.statements};
		case 'RustExpressionUnit':
			return {result: rustExpression, statements: _List_Nil};
		case 'RustExpressionF64':
			return {result: rustExpression, statements: _List_Nil};
		case 'RustExpressionUnicodeScalar':
			return {result: rustExpression, statements: _List_Nil};
		case 'RustExpressionStringLiteral':
			return {result: rustExpression, statements: _List_Nil};
		case 'RustExpressionSelf':
			return {result: rustExpression, statements: _List_Nil};
		case 'RustExpressionReference':
			return {result: rustExpression, statements: _List_Nil};
		case 'RustExpressionVariant':
			return {result: rustExpression, statements: _List_Nil};
		case 'RustExpressionNegateOperation':
			return {result: rustExpression, statements: _List_Nil};
		case 'RustExpressionBorrow':
			return {result: rustExpression, statements: _List_Nil};
		case 'RustExpressionRecordAccess':
			return {result: rustExpression, statements: _List_Nil};
		case 'RustExpressionTuple':
			return {result: rustExpression, statements: _List_Nil};
		case 'RustExpressionArrayLiteral':
			return {result: rustExpression, statements: _List_Nil};
		case 'RustExpressionRecord':
			return {result: rustExpression, statements: _List_Nil};
		case 'RustExpressionCall':
			return {result: rustExpression, statements: _List_Nil};
		case 'RustExpressionIfElse':
			return {result: rustExpression, statements: _List_Nil};
		case 'RustExpressionMatch':
			return {result: rustExpression, statements: _List_Nil};
		default:
			var rustExpressionAfterStatement = rustExpression.a;
			var inner = $author$project$ElmSyntaxToRust$rustExpressionInnermostLambdaResult(rustExpressionAfterStatement.result);
			return {
				result: inner.result,
				statements: A2($elm$core$List$cons, rustExpressionAfterStatement.statement, inner.statements)
			};
	}
};
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $author$project$ElmSyntaxToRust$rustExpressionIsConstant = function (rustExpression) {
	switch (rustExpression.$) {
		case 'RustExpressionUnit':
			return true;
		case 'RustExpressionF64':
			return true;
		case 'RustExpressionUnicodeScalar':
			return true;
		case 'RustExpressionStringLiteral':
			return true;
		case 'RustExpressionSelf':
			return true;
		case 'RustExpressionReference':
			return true;
		case 'RustExpressionVariant':
			return true;
		case 'RustExpressionNegateOperation':
			return false;
		case 'RustExpressionBorrow':
			return false;
		case 'RustExpressionRecordAccess':
			return false;
		case 'RustExpressionTuple':
			return false;
		case 'RustExpressionArrayLiteral':
			var elements = rustExpression.a;
			return $elm$core$List$isEmpty(elements);
		case 'RustExpressionRecord':
			var fields = rustExpression.a;
			return $miniBill$elm_fast_dict$FastDict$isEmpty(fields);
		case 'RustExpressionCall':
			return false;
		case 'RustExpressionLambda':
			return false;
		case 'RustExpressionIfElse':
			return false;
		case 'RustExpressionMatch':
			return false;
		default:
			return false;
	}
};
var $author$project$ElmSyntaxToRust$RustExpressionTuple = function (a) {
	return {$: 'RustExpressionTuple', a: a};
};
var $author$project$ElmSyntaxToRust$RustStatementBindingAssignment = function (a) {
	return {$: 'RustStatementBindingAssignment', a: a};
};
var $author$project$ElmSyntaxToRust$RustStatementIfElse = function (a) {
	return {$: 'RustStatementIfElse', a: a};
};
var $author$project$ElmSyntaxToRust$RustStatementMatch = function (a) {
	return {$: 'RustStatementMatch', a: a};
};
var $author$project$ElmSyntaxToRust$RustStatementRecordFieldAssignment = function (a) {
	return {$: 'RustStatementRecordFieldAssignment', a: a};
};
var $author$project$ElmSyntaxToRust$RustStatementVarDeclaration = function (a) {
	return {$: 'RustStatementVarDeclaration', a: a};
};
var $author$project$ElmSyntaxToRust$rustExpressionMatchCaseSubstituteReferences = F2(
	function (referenceToExpression, rustCase) {
		return {
			pattern: rustCase.pattern,
			result: A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, rustCase.result)
		};
	});
var $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences = F2(
	function (referenceToExpression, rustExpression) {
		switch (rustExpression.$) {
			case 'RustExpressionUnit':
				return $author$project$ElmSyntaxToRust$RustExpressionUnit;
			case 'RustExpressionF64':
				return rustExpression;
			case 'RustExpressionUnicodeScalar':
				return rustExpression;
			case 'RustExpressionStringLiteral':
				return rustExpression;
			case 'RustExpressionVariant':
				return rustExpression;
			case 'RustExpressionSelf':
				return rustExpression;
			case 'RustExpressionReference':
				var reference = rustExpression.a;
				return referenceToExpression(reference);
			case 'RustExpressionNegateOperation':
				var inNegation = rustExpression.a;
				return $author$project$ElmSyntaxToRust$RustExpressionNegateOperation(
					A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, inNegation));
			case 'RustExpressionBorrow':
				var borrowed = rustExpression.a;
				return $author$project$ElmSyntaxToRust$RustExpressionBorrow(
					A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, borrowed));
			case 'RustExpressionRecordAccess':
				var recordAccess = rustExpression.a;
				return $author$project$ElmSyntaxToRust$RustExpressionRecordAccess(
					{
						field: recordAccess.field,
						record: A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, recordAccess.record)
					});
			case 'RustExpressionLambda':
				var lambda = rustExpression.a;
				return $author$project$ElmSyntaxToRust$RustExpressionLambda(
					{
						parameters: lambda.parameters,
						result: A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, lambda.result)
					});
			case 'RustExpressionIfElse':
				var ifElse = rustExpression.a;
				return $author$project$ElmSyntaxToRust$RustExpressionIfElse(
					{
						condition: A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, ifElse.condition),
						onFalse: A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, ifElse.onFalse),
						onTrue: A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, ifElse.onTrue)
					});
			case 'RustExpressionTuple':
				var parts = rustExpression.a;
				return $author$project$ElmSyntaxToRust$RustExpressionTuple(
					{
						part0: A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, parts.part0),
						part1: A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, parts.part1),
						part2Up: A2(
							$elm$core$List$map,
							function (part) {
								return A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, part);
							},
							parts.part2Up)
					});
			case 'RustExpressionArrayLiteral':
				var elements = rustExpression.a;
				return $author$project$ElmSyntaxToRust$RustExpressionArrayLiteral(
					A2(
						$elm$core$List$map,
						function (element) {
							return A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, element);
						},
						elements));
			case 'RustExpressionRecord':
				var fields = rustExpression.a;
				return $author$project$ElmSyntaxToRust$RustExpressionRecord(
					A2(
						$miniBill$elm_fast_dict$FastDict$map,
						F2(
							function (_v2, fieldValue) {
								return A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, fieldValue);
							}),
						fields));
			case 'RustExpressionCall':
				var call = rustExpression.a;
				return $author$project$ElmSyntaxToRust$RustExpressionCall(
					{
						_arguments: A2(
							$elm$core$List$map,
							function (argument) {
								return A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, argument);
							},
							call._arguments),
						called: A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, call.called)
					});
			case 'RustExpressionMatch':
				var match = rustExpression.a;
				return $author$project$ElmSyntaxToRust$RustExpressionMatch(
					{
						case0: A2($author$project$ElmSyntaxToRust$rustExpressionMatchCaseSubstituteReferences, referenceToExpression, match.case0),
						case1Up: A2(
							$elm$core$List$map,
							function (matchCase) {
								return A2($author$project$ElmSyntaxToRust$rustExpressionMatchCaseSubstituteReferences, referenceToExpression, matchCase);
							},
							match.case1Up),
						matched: A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, match.matched)
					});
			default:
				var rustExpressionAfterStatement = rustExpression.a;
				return $author$project$ElmSyntaxToRust$RustExpressionAfterStatement(
					{
						result: A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, rustExpressionAfterStatement.result),
						statement: A2($author$project$ElmSyntaxToRust$rustStatementSubstituteReferences, referenceToExpression, rustExpressionAfterStatement.statement)
					});
		}
	});
var $author$project$ElmSyntaxToRust$rustStatementMatchCaseSubstituteReferences = F2(
	function (referenceToExpression, rustCase) {
		return {
			pattern: rustCase.pattern,
			statements: A2(
				$elm$core$List$map,
				function (statement) {
					return A2($author$project$ElmSyntaxToRust$rustStatementSubstituteReferences, referenceToExpression, statement);
				},
				rustCase.statements)
		};
	});
var $author$project$ElmSyntaxToRust$rustStatementSubstituteReferences = F2(
	function (referenceToExpression, rustStatement) {
		switch (rustStatement.$) {
			case 'RustStatementLetDeclarationUninitialized':
				return rustStatement;
			case 'RustStatementLetDestructuring':
				var letDestructuring = rustStatement.a;
				return $author$project$ElmSyntaxToRust$RustStatementLetDestructuring(
					{
						expression: A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, letDestructuring.expression),
						pattern: letDestructuring.pattern
					});
			case 'RustStatementVarDeclaration':
				var varDeclaration = rustStatement.a;
				return $author$project$ElmSyntaxToRust$RustStatementVarDeclaration(
					{
						name: varDeclaration.name,
						value: A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, varDeclaration.value)
					});
			case 'RustStatementBindingAssignment':
				var assignment = rustStatement.a;
				return $author$project$ElmSyntaxToRust$RustStatementBindingAssignment(
					{
						assignedValue: A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, assignment.assignedValue),
						name: assignment.name
					});
			case 'RustStatementRecordFieldAssignment':
				var assignment = rustStatement.a;
				return $author$project$ElmSyntaxToRust$RustStatementRecordFieldAssignment(
					{
						assignedValue: A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, assignment.assignedValue),
						fieldName: assignment.fieldName,
						recordBindingName: assignment.recordBindingName
					});
			case 'RustStatementLetDeclaration':
				var rustStatementLetDeclaration = rustStatement.a;
				return $author$project$ElmSyntaxToRust$RustStatementLetDeclaration(
					{
						name: rustStatementLetDeclaration.name,
						result: A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, rustStatementLetDeclaration.result),
						resultType: rustStatementLetDeclaration.resultType
					});
			case 'RustStatementFuncDeclaration':
				var funcDeclaration = rustStatement.a;
				return $author$project$ElmSyntaxToRust$RustStatementFuncDeclaration(
					{
						introducedTypeParameters: funcDeclaration.introducedTypeParameters,
						name: funcDeclaration.name,
						parameters: funcDeclaration.parameters,
						result: A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, funcDeclaration.result),
						resultType: funcDeclaration.resultType
					});
			case 'RustStatementIfElse':
				var rustStatementIfElse = rustStatement.a;
				return $author$project$ElmSyntaxToRust$RustStatementIfElse(
					{
						condition: A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, rustStatementIfElse.condition),
						onFalse: A2(
							$elm$core$List$map,
							function (statement) {
								return A2($author$project$ElmSyntaxToRust$rustStatementSubstituteReferences, referenceToExpression, statement);
							},
							rustStatementIfElse.onFalse),
						onTrue: A2(
							$elm$core$List$map,
							function (statement) {
								return A2($author$project$ElmSyntaxToRust$rustStatementSubstituteReferences, referenceToExpression, statement);
							},
							rustStatementIfElse.onTrue)
					});
			default:
				var match = rustStatement.a;
				return $author$project$ElmSyntaxToRust$RustStatementMatch(
					{
						case0: A2($author$project$ElmSyntaxToRust$rustStatementMatchCaseSubstituteReferences, referenceToExpression, match.case0),
						case1Up: A2(
							$elm$core$List$map,
							function (matchCase) {
								return A2($author$project$ElmSyntaxToRust$rustStatementMatchCaseSubstituteReferences, referenceToExpression, matchCase);
							},
							match.case1Up),
						matched: A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, referenceToExpression, match.matched)
					});
		}
	});
var $author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration = F2(
	function (referenceToCheck, rustExpression) {
		rustExpressionUsesReferenceInLambdaOrFuncDeclaration:
		while (true) {
			switch (rustExpression.$) {
				case 'RustExpressionUnit':
					return false;
				case 'RustExpressionF64':
					return false;
				case 'RustExpressionUnicodeScalar':
					return false;
				case 'RustExpressionStringLiteral':
					return false;
				case 'RustExpressionSelf':
					return false;
				case 'RustExpressionReference':
					return false;
				case 'RustExpressionVariant':
					return false;
				case 'RustExpressionNegateOperation':
					var inNegation = rustExpression.a;
					var $temp$referenceToCheck = referenceToCheck,
						$temp$rustExpression = inNegation;
					referenceToCheck = $temp$referenceToCheck;
					rustExpression = $temp$rustExpression;
					continue rustExpressionUsesReferenceInLambdaOrFuncDeclaration;
				case 'RustExpressionBorrow':
					var borrowed = rustExpression.a;
					var $temp$referenceToCheck = referenceToCheck,
						$temp$rustExpression = borrowed;
					referenceToCheck = $temp$referenceToCheck;
					rustExpression = $temp$rustExpression;
					continue rustExpressionUsesReferenceInLambdaOrFuncDeclaration;
				case 'RustExpressionRecordAccess':
					var recordAccess = rustExpression.a;
					var $temp$referenceToCheck = referenceToCheck,
						$temp$rustExpression = recordAccess.record;
					referenceToCheck = $temp$referenceToCheck;
					rustExpression = $temp$rustExpression;
					continue rustExpressionUsesReferenceInLambdaOrFuncDeclaration;
				case 'RustExpressionTuple':
					var parts = rustExpression.a;
					return A2($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, parts.part0) || (A2($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, parts.part1) || A2(
						$elm$core$List$any,
						function (part) {
							return A2($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, part);
						},
						parts.part2Up));
				case 'RustExpressionArrayLiteral':
					var elements = rustExpression.a;
					return A2(
						$elm$core$List$any,
						function (element) {
							return A2($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, element);
						},
						elements);
				case 'RustExpressionRecord':
					var fields = rustExpression.a;
					return A2(
						$author$project$ElmSyntaxToRust$fastDictAny,
						F2(
							function (_v2, fieldValue) {
								return A2($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, fieldValue);
							}),
						fields);
				case 'RustExpressionCall':
					var call = rustExpression.a;
					return A2($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, call.called) || A2(
						$elm$core$List$any,
						function (argument) {
							return A2($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, argument);
						},
						call._arguments);
				case 'RustExpressionLambda':
					var lambda = rustExpression.a;
					return A2($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference, referenceToCheck, lambda.result) >= 1;
				case 'RustExpressionIfElse':
					var ifElse = rustExpression.a;
					return A2($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, ifElse.condition) || (A2($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, ifElse.onTrue) || A2($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, ifElse.onFalse));
				case 'RustExpressionMatch':
					var match = rustExpression.a;
					return A2($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, match.matched) || (A2($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, match.case0.result) || A2(
						$elm$core$List$any,
						function (laterCase) {
							return A2($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, laterCase.result);
						},
						match.case1Up));
				default:
					var rustExpressionAfterStatement = rustExpression.a;
					return A2($author$project$ElmSyntaxToRust$rustStatementUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, rustExpressionAfterStatement.statement) || A2($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, rustExpressionAfterStatement.result);
			}
		}
	});
var $author$project$ElmSyntaxToRust$rustStatementUsesReferenceInLambdaOrFuncDeclaration = F2(
	function (referenceToCheck, rustStatement) {
		switch (rustStatement.$) {
			case 'RustStatementLetDeclarationUninitialized':
				return false;
			case 'RustStatementFuncDeclaration':
				var func = rustStatement.a;
				return A2($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference, referenceToCheck, func.result) >= 1;
			case 'RustStatementLetDestructuring':
				var destructuring = rustStatement.a;
				return A2($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, destructuring.expression);
			case 'RustStatementVarDeclaration':
				var _var = rustStatement.a;
				return A2($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, _var.value);
			case 'RustStatementBindingAssignment':
				var assignment = rustStatement.a;
				return A2($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, assignment.assignedValue);
			case 'RustStatementRecordFieldAssignment':
				var assignment = rustStatement.a;
				return A2($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, assignment.assignedValue);
			case 'RustStatementLetDeclaration':
				var rustStatementLetDeclaration = rustStatement.a;
				return A2($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, rustStatementLetDeclaration.result);
			case 'RustStatementIfElse':
				var ifElse = rustStatement.a;
				return A2($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, ifElse.condition) || (A2(
					$elm$core$List$any,
					function (statement) {
						return A2($author$project$ElmSyntaxToRust$rustStatementUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, statement);
					},
					ifElse.onTrue) || A2(
					$elm$core$List$any,
					function (statement) {
						return A2($author$project$ElmSyntaxToRust$rustStatementUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, statement);
					},
					ifElse.onFalse));
			default:
				var match = rustStatement.a;
				return A2($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, match.matched) || (A2(
					$elm$core$List$any,
					function (statement) {
						return A2($author$project$ElmSyntaxToRust$rustStatementUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, statement);
					},
					match.case0.statements) || A2(
					$elm$core$List$any,
					function (laterCase) {
						return A2(
							$elm$core$List$any,
							function (statement) {
								return A2($author$project$ElmSyntaxToRust$rustStatementUsesReferenceInLambdaOrFuncDeclaration, referenceToCheck, statement);
							},
							laterCase.statements);
					},
					match.case1Up));
		}
	});
var $author$project$ElmSyntaxToRust$rustExpressionCallCondense = function (call) {
	var _v0 = call.called;
	switch (_v0.$) {
		case 'RustExpressionLambda':
			var calledLambda = _v0.a;
			var _v1 = A2(
				$elm$core$List$map,
				function ($) {
					return $.pattern;
				},
				calledLambda.parameters);
			if ((_v1.b && (_v1.a.$ === 'RustPatternVariable')) && (!_v1.b.b)) {
				var parameter = _v1.a.a;
				if ($author$project$ElmSyntaxToRust$rustExpressionIsConstant(call.argument) || ((A2(
					$author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference,
					{name: parameter, qualification: _List_Nil},
					call.called) === 1) && (!function () {
					var calledLambdaResultInnermostLambdaResult = $author$project$ElmSyntaxToRust$rustExpressionInnermostLambdaResult(call.called);
					return A2(
						$author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration,
						{name: parameter, qualification: _List_Nil},
						calledLambdaResultInnermostLambdaResult.result) || A2(
						$elm$core$List$any,
						function (statement) {
							return A2(
								$author$project$ElmSyntaxToRust$rustStatementUsesReferenceInLambdaOrFuncDeclaration,
								{name: parameter, qualification: _List_Nil},
								statement);
						},
						calledLambdaResultInnermostLambdaResult.statements);
				}()))) {
					var substituteReferences = function (existingReference) {
						return function () {
							var _v2 = existingReference.qualification;
							if (_v2.b) {
								return false;
							} else {
								return _Utils_eq(existingReference.name, parameter);
							}
						}() ? call.argument : $author$project$ElmSyntaxToRust$RustExpressionReference(existingReference);
					};
					return A2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences, substituteReferences, calledLambda.result);
				} else {
					return $author$project$ElmSyntaxToRust$RustExpressionCall(
						{
							_arguments: _List_fromArray(
								[call.argument]),
							called: call.called
						});
				}
			} else {
				return $author$project$ElmSyntaxToRust$RustExpressionCall(
					{
						_arguments: _List_fromArray(
							[call.argument]),
						called: call.called
					});
			}
		case 'RustExpressionReference':
			var reference = _v0.a;
			var _v3 = function () {
				var _v4 = reference.name;
				if (_v4 === 'array_fromList') {
					var _v5 = call.argument;
					if (_v5.$ === 'RustExpressionCall') {
						var argumentCall = _v5.a;
						var _v6 = argumentCall.called;
						if (_v6.$ === 'RustExpressionReference') {
							var argumentReference = _v6.a;
							var _v7 = argumentReference.name;
							if (_v7 === 'array_toList') {
								var _v8 = argumentCall._arguments;
								if ((_v8.b && (_v8.a.$ === 'RustExpressionArrayLiteral')) && (!_v8.b.b)) {
									var elements = _v8.a.a;
									return $elm$core$Maybe$Just(elements);
								} else {
									return $elm$core$Maybe$Nothing;
								}
							} else {
								return $elm$core$Maybe$Nothing;
							}
						} else {
							return $elm$core$Maybe$Nothing;
						}
					} else {
						return $elm$core$Maybe$Nothing;
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}();
			if (_v3.$ === 'Just') {
				var elements = _v3.a;
				return $author$project$ElmSyntaxToRust$RustExpressionArrayLiteral(elements);
			} else {
				return $author$project$ElmSyntaxToRust$RustExpressionCall(
					{
						_arguments: _List_fromArray(
							[call.argument]),
						called: call.called
					});
			}
		case 'RustExpressionUnit':
			return $author$project$ElmSyntaxToRust$RustExpressionCall(
				{
					_arguments: _List_fromArray(
						[call.argument]),
					called: call.called
				});
		case 'RustExpressionCall':
			return $author$project$ElmSyntaxToRust$RustExpressionCall(
				{
					_arguments: _List_fromArray(
						[call.argument]),
					called: call.called
				});
		case 'RustExpressionSelf':
			return $author$project$ElmSyntaxToRust$RustExpressionCall(
				{
					_arguments: _List_fromArray(
						[call.argument]),
					called: call.called
				});
		case 'RustExpressionVariant':
			return $author$project$ElmSyntaxToRust$RustExpressionCall(
				{
					_arguments: _List_fromArray(
						[call.argument]),
					called: call.called
				});
		case 'RustExpressionF64':
			return $author$project$ElmSyntaxToRust$RustExpressionCall(
				{
					_arguments: _List_fromArray(
						[call.argument]),
					called: call.called
				});
		case 'RustExpressionUnicodeScalar':
			return $author$project$ElmSyntaxToRust$RustExpressionCall(
				{
					_arguments: _List_fromArray(
						[call.argument]),
					called: call.called
				});
		case 'RustExpressionStringLiteral':
			return $author$project$ElmSyntaxToRust$RustExpressionCall(
				{
					_arguments: _List_fromArray(
						[call.argument]),
					called: call.called
				});
		case 'RustExpressionNegateOperation':
			return $author$project$ElmSyntaxToRust$RustExpressionCall(
				{
					_arguments: _List_fromArray(
						[call.argument]),
					called: call.called
				});
		case 'RustExpressionBorrow':
			return $author$project$ElmSyntaxToRust$RustExpressionCall(
				{
					_arguments: _List_fromArray(
						[call.argument]),
					called: call.called
				});
		case 'RustExpressionRecordAccess':
			return $author$project$ElmSyntaxToRust$RustExpressionCall(
				{
					_arguments: _List_fromArray(
						[call.argument]),
					called: call.called
				});
		case 'RustExpressionTuple':
			return $author$project$ElmSyntaxToRust$RustExpressionCall(
				{
					_arguments: _List_fromArray(
						[call.argument]),
					called: call.called
				});
		case 'RustExpressionIfElse':
			return $author$project$ElmSyntaxToRust$RustExpressionCall(
				{
					_arguments: _List_fromArray(
						[call.argument]),
					called: call.called
				});
		case 'RustExpressionArrayLiteral':
			return $author$project$ElmSyntaxToRust$RustExpressionCall(
				{
					_arguments: _List_fromArray(
						[call.argument]),
					called: call.called
				});
		case 'RustExpressionRecord':
			return $author$project$ElmSyntaxToRust$RustExpressionCall(
				{
					_arguments: _List_fromArray(
						[call.argument]),
					called: call.called
				});
		case 'RustExpressionMatch':
			return $author$project$ElmSyntaxToRust$RustExpressionCall(
				{
					_arguments: _List_fromArray(
						[call.argument]),
					called: call.called
				});
		default:
			return $author$project$ElmSyntaxToRust$RustExpressionCall(
				{
					_arguments: _List_fromArray(
						[call.argument]),
					called: call.called
				});
	}
};
var $author$project$ElmSyntaxToRust$rustExpressionCallTriple = F3(
	function (part0, part1, part2) {
		return $author$project$ElmSyntaxToRust$RustExpressionTuple(
			{
				part0: part0,
				part1: part1,
				part2Up: _List_fromArray(
					[part2])
			});
	});
var $author$project$ElmSyntaxToRust$rustExpressionCallTuple = F2(
	function (part0, part1) {
		return $author$project$ElmSyntaxToRust$RustExpressionTuple(
			{part0: part0, part1: part1, part2Up: _List_Nil});
	});
var $author$project$ElmSyntaxToRust$rustExpressionStringLiteralEmpty = $author$project$ElmSyntaxToRust$RustExpressionStringLiteral('');
var $author$project$ElmSyntaxToRust$rustExpressionIsEmptyString = function (rustExpression) {
	return _Utils_eq(rustExpression, $author$project$ElmSyntaxToRust$rustExpressionStringLiteralEmpty);
};
var $author$project$ElmSyntaxToRust$rustExpressionListEmpty = $author$project$ElmSyntaxToRust$RustExpressionVariant(
	{
		name: 'Empty',
		originTypeName: _List_fromArray(
			['ListListGuts'])
	});
var $author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType = function (inferredType) {
	if (inferredType.$ === 'TypeVariable') {
		var variable = inferredType.a;
		return A2($elm$core$String$startsWith, 'number', variable.name);
	} else {
		var inferredTypNotVariable = inferredType.a;
		return $author$project$ElmSyntaxToRust$inferredTypeNotVariableIsConcreteRustType(inferredTypNotVariable);
	}
};
var $author$project$ElmSyntaxToRust$inferredTypeNotVariableIsConcreteRustType = function (inferredTypeNotVariable) {
	switch (inferredTypeNotVariable.$) {
		case 'TypeUnit':
			return true;
		case 'TypeFunction':
			var typeFunction = inferredTypeNotVariable.a;
			return $author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType(typeFunction.input) && $author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType(typeFunction.output);
		case 'TypeTuple':
			var parts = inferredTypeNotVariable.a;
			return $author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType(parts.part0) && $author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType(parts.part1);
		case 'TypeTriple':
			var parts = inferredTypeNotVariable.a;
			return $author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType(parts.part0) && ($author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType(parts.part1) && $author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType(parts.part2));
		case 'TypeConstruct':
			var typeConstruct = inferredTypeNotVariable.a;
			return A2($elm$core$List$all, $author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType, typeConstruct._arguments);
		case 'TypeRecord':
			var fields = inferredTypeNotVariable.a;
			return A2(
				$author$project$ElmSyntaxToRust$fastDictAll,
				F2(
					function (_v1, fieldValue) {
						return $author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType(fieldValue);
					}),
				fields);
		default:
			var recordExtension = inferredTypeNotVariable.a;
			return A2(
				$author$project$ElmSyntaxToRust$fastDictAll,
				F2(
					function (_v2, fieldValue) {
						return $author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType(fieldValue);
					}),
				recordExtension.fields);
	}
};
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $author$project$ElmSyntaxToRust$rustExpressionReferenceDeclaredValueOrFunctionAppliedLazilyOrCurriedIfNecessary = F2(
	function (context, rustReference) {
		var parameterCount = $elm$core$List$length(
			$author$project$ElmSyntaxToRust$inferredTypeExpandFunction(rustReference.originDeclarationTypeWithExpandedAliases).inputs);
		var parameterCountIncludingPotentialAllocator = rustReference.requiresAllocator ? (parameterCount + 1) : parameterCount;
		switch (parameterCountIncludingPotentialAllocator) {
			case 1:
				return $author$project$ElmSyntaxToRust$RustExpressionReference(
					{name: rustReference.name, qualification: rustReference.qualification});
			case 0:
				return $author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType(rustReference.originDeclarationTypeWithExpandedAliases) ? $author$project$ElmSyntaxToRust$RustExpressionReference(
					{name: rustReference.name, qualification: rustReference.qualification}) : $author$project$ElmSyntaxToRust$RustExpressionCall(
					{
						_arguments: _List_Nil,
						called: $author$project$ElmSyntaxToRust$RustExpressionReference(
							{name: rustReference.name, qualification: rustReference.qualification})
					});
			default:
				var typeAliasesInModule = function (moduleNameToAccess) {
					return A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.typeAliases;
						},
						A2($miniBill$elm_fast_dict$FastDict$get, moduleNameToAccess, context.moduleInfo));
				};
				return A3(
					$elm$core$List$foldr,
					F2(
						function (_v1, resultSoFar) {
							var parameterIndex = _v1.a;
							var parameterInferredType = _v1.b;
							return $author$project$ElmSyntaxToRust$RustExpressionLambda(
								{
									parameters: _List_fromArray(
										[
											{
											pattern: $author$project$ElmSyntaxToRust$RustPatternVariable(
												A2($author$project$ElmSyntaxToRust$generatedParameterNameForIndexAtPath, parameterIndex, context.path)),
											type_: A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, parameterInferredType)
										}
										]),
									result: resultSoFar
								});
						}),
					$author$project$ElmSyntaxToRust$RustExpressionCall(
						{
							_arguments: _Utils_ap(
								rustReference.requiresAllocator ? _List_fromArray(
									[
										$author$project$ElmSyntaxToRust$RustExpressionReference(
										{name: $author$project$ElmSyntaxToRust$generatedAllocatorVariableName, qualification: _List_Nil})
									]) : _List_Nil,
								A2(
									$elm$core$List$map,
									function (parameterIndex) {
										return $author$project$ElmSyntaxToRust$RustExpressionReference(
											{
												name: A2($author$project$ElmSyntaxToRust$generatedParameterNameForIndexAtPath, parameterIndex, context.path),
												qualification: _List_Nil
											});
									},
									A2($elm$core$List$range, 0, parameterCount - 1))),
							called: $author$project$ElmSyntaxToRust$RustExpressionReference(
								{name: rustReference.name, qualification: rustReference.qualification})
						}),
					A2(
						$elm$core$List$indexedMap,
						$elm$core$Tuple$pair,
						A2(
							$elm$core$List$take,
							parameterCount,
							$author$project$ElmSyntaxToRust$inferredTypeExpandFunction(
								A2($author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases, typeAliasesInModule, rustReference.inferredType)).inputs)));
		}
	});
var $author$project$ElmSyntaxToRust$rustTypeIsConcrete = function (rustType) {
	rustTypeIsConcrete:
	while (true) {
		switch (rustType.$) {
			case 'RustTypeUnit':
				return true;
			case 'RustTypeVariable':
				return false;
			case 'RustTypeBorrow':
				var borrow = rustType.a;
				var $temp$rustType = borrow.type_;
				rustType = $temp$rustType;
				continue rustTypeIsConcrete;
			case 'RustTypeTuple':
				var parts = rustType.a;
				return $author$project$ElmSyntaxToRust$rustTypeIsConcrete(parts.part0) && ($author$project$ElmSyntaxToRust$rustTypeIsConcrete(parts.part1) && A2($elm$core$List$all, $author$project$ElmSyntaxToRust$rustTypeIsConcrete, parts.part2Up));
			case 'RustTypeRecord':
				var fields = rustType.a;
				return A2(
					$author$project$ElmSyntaxToRust$fastDictAll,
					F2(
						function (_v1, fieldValue) {
							return $author$project$ElmSyntaxToRust$rustTypeIsConcrete(fieldValue);
						}),
					fields);
			case 'RustTypeConstruct':
				var typeConstruct = rustType.a;
				return A2($elm$core$List$all, $author$project$ElmSyntaxToRust$rustTypeIsConcrete, typeConstruct._arguments);
			default:
				var typeFunction = rustType.a;
				return A2($elm$core$List$all, $author$project$ElmSyntaxToRust$rustTypeIsConcrete, typeFunction.input) && $author$project$ElmSyntaxToRust$rustTypeIsConcrete(typeFunction.output);
		}
	}
};
var $author$project$ElmSyntaxToRust$case_ = F2(
	function (context, syntaxCase) {
		var casePatternAsRust = $author$project$ElmSyntaxToRust$pattern(syntaxCase.pattern);
		return A2(
			$elm$core$Result$map,
			function (result) {
				return {pattern: casePatternAsRust.pattern, result: result};
			},
			A2(
				$author$project$ElmSyntaxToRust$expression,
				{
					letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
					moduleInfo: context.moduleInfo,
					path: A2($elm$core$List$cons, 'caseResult', context.path),
					variablesFromWithinDeclarationInScope: A2($miniBill$elm_fast_dict$FastSet$union, casePatternAsRust.introducedVariables, context.variablesFromWithinDeclarationInScope)
				},
				syntaxCase.result));
	});
var $author$project$ElmSyntaxToRust$expression = F2(
	function (context, expressionTypedNode) {
		expression:
		while (true) {
			var _v3 = expressionTypedNode.value;
			switch (_v3.$) {
				case 'ExpressionUnit':
					return $elm$core$Result$Ok($author$project$ElmSyntaxToRust$RustExpressionUnit);
				case 'ExpressionInteger':
					var intValue = _v3.a;
					return $elm$core$Result$Ok(
						$author$project$ElmSyntaxToRust$RustExpressionF64(intValue.value));
				case 'ExpressionFloat':
					var doubleValue = _v3.a;
					return $elm$core$Result$Ok(
						$author$project$ElmSyntaxToRust$RustExpressionF64(doubleValue));
				case 'ExpressionChar':
					var charValue = _v3.a;
					return $elm$core$Result$Ok(
						$author$project$ElmSyntaxToRust$RustExpressionUnicodeScalar(charValue));
				case 'ExpressionString':
					var stringValue = _v3.a;
					return $elm$core$Result$Ok(
						$author$project$ElmSyntaxToRust$RustExpressionStringLiteral(stringValue));
				case 'ExpressionRecordAccessFunction':
					var fieldName = _v3.a;
					var _v4 = expressionTypedNode.type_;
					if ((_v4.$ === 'TypeNotVariable') && (_v4.a.$ === 'TypeFunction')) {
						var typeFunction = _v4.a.a;
						return $elm$core$Result$Ok(
							$author$project$ElmSyntaxToRust$RustExpressionLambda(
								{
									parameters: _List_fromArray(
										[
											{
											pattern: $author$project$ElmSyntaxToRust$RustPatternVariable($author$project$ElmSyntaxToRust$generatedAccessedRecordVariableName),
											type_: A2(
												$author$project$ElmSyntaxToRust$type_,
												function (moduleNameToAccess) {
													return A2(
														$elm$core$Maybe$map,
														function ($) {
															return $.typeAliases;
														},
														A2($miniBill$elm_fast_dict$FastDict$get, moduleNameToAccess, context.moduleInfo));
												},
												typeFunction.input)
										}
										]),
									result: $author$project$ElmSyntaxToRust$RustExpressionRecordAccess(
										{
											field: $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(
												A3($elm$core$String$replace, '.', '', fieldName)),
											record: $author$project$ElmSyntaxToRust$RustExpressionReference(
												{name: $author$project$ElmSyntaxToRust$generatedAccessedRecordVariableName, qualification: _List_Nil})
										})
								}));
					} else {
						return $elm$core$Result$Err('record access function has an inferred type that wasn\'t a function');
					}
				case 'ExpressionOperatorFunction':
					var operator = _v3.a;
					var _v5 = $author$project$ElmSyntaxToRust$inferredTypeExpandToFunction(expressionTypedNode.type_).inputs;
					if (_v5.b && _v5.b.b) {
						var leftInferredType = _v5.a;
						var _v6 = _v5.b;
						var rightInferredType = _v6.a;
						var typeAliasesInModule = function (moduleNameToAccess) {
							return A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.typeAliases;
								},
								A2($miniBill$elm_fast_dict$FastDict$get, moduleNameToAccess, context.moduleInfo));
						};
						return A2(
							$elm$core$Result$map,
							function (reference) {
								return $author$project$ElmSyntaxToRust$RustExpressionLambda(
									{
										parameters: _List_fromArray(
											[
												{
												pattern: $author$project$ElmSyntaxToRust$RustPatternVariable('generated_left'),
												type_: A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, leftInferredType)
											}
											]),
										result: $author$project$ElmSyntaxToRust$RustExpressionLambda(
											{
												parameters: _List_fromArray(
													[
														{
														pattern: $author$project$ElmSyntaxToRust$RustPatternVariable('generated_right'),
														type_: A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, rightInferredType)
													}
													]),
												result: $author$project$ElmSyntaxToRust$RustExpressionCall(
													{
														_arguments: _Utils_ap(
															reference.requiresAllocator ? _List_fromArray(
																[
																	$author$project$ElmSyntaxToRust$RustExpressionReference(
																	{name: $author$project$ElmSyntaxToRust$generatedAllocatorVariableName, qualification: _List_Nil})
																]) : _List_Nil,
															_List_fromArray(
																[
																	$author$project$ElmSyntaxToRust$RustExpressionReference(
																	{name: 'generated_left', qualification: _List_Nil}),
																	$author$project$ElmSyntaxToRust$RustExpressionReference(
																	{name: 'generated_right', qualification: _List_Nil})
																])),
														called: $author$project$ElmSyntaxToRust$RustExpressionReference(
															{name: reference.name, qualification: reference.qualification})
													})
											})
									});
							},
							$author$project$ElmSyntaxToRust$expressionOperatorToRustFunctionReference(
								{moduleOrigin: operator.moduleOrigin, symbol: operator.symbol, type_: expressionTypedNode.type_}));
					} else {
						return $elm$core$Result$Err(
							'(' + ($author$project$ElmSyntaxToRust$rangeToInfoString(expressionTypedNode.range) + (') I tried to transpile the operator function (' + (operator.symbol + ') to a lambda into a call but for that I needed to find the left and right argument types which I couldn\'t'))));
					}
				case 'ExpressionCall':
					var call = _v3.a;
					return A4(
						$elm$core$Result$map3,
						F3(
							function (called, argument0, argument1Up) {
								return A3(
									$elm$core$List$foldl,
									F2(
										function (argument, condensedSoFar) {
											return $author$project$ElmSyntaxToRust$rustExpressionCallCondense(
												{argument: argument, called: condensedSoFar});
										}),
									called,
									A2($elm$core$List$cons, argument0, argument1Up));
							}),
						A2(
							$author$project$ElmSyntaxToRust$expression,
							{
								letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
								moduleInfo: context.moduleInfo,
								path: A2($elm$core$List$cons, 'called', context.path),
								variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
							},
							call.called),
						A2(
							$author$project$ElmSyntaxToRust$expression,
							{
								letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
								moduleInfo: context.moduleInfo,
								path: A2($elm$core$List$cons, 'argument0', context.path),
								variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
							},
							call.argument0),
						A2(
							$author$project$ElmSyntaxToRust$listMapAndCombineOk,
							function (_v7) {
								var argumentIndex = _v7.a;
								var argument = _v7.b;
								return A2(
									$author$project$ElmSyntaxToRust$expression,
									{
										letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
										moduleInfo: context.moduleInfo,
										path: A2(
											$elm$core$List$cons,
											'argument' + $elm$core$String$fromInt(argumentIndex),
											context.path),
										variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
									},
									argument);
							},
							A2(
								$elm$core$List$indexedMap,
								F2(
									function (index, argument) {
										return _Utils_Tuple2(index + 1, argument);
									}),
								call.argument1Up)));
				case 'ExpressionInfixOperation':
					var infixOperation = _v3.a;
					var _v8 = infixOperation.operator.symbol;
					switch (_v8) {
						case '|>':
							return A3(
								$elm$core$Result$map2,
								F2(
									function (argument, called) {
										return $author$project$ElmSyntaxToRust$rustExpressionCallCondense(
											{argument: argument, called: called});
									}),
								A2(
									$author$project$ElmSyntaxToRust$expression,
									{
										letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
										moduleInfo: context.moduleInfo,
										path: A2($elm$core$List$cons, 'left', context.path),
										variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
									},
									infixOperation.left),
								A2(
									$author$project$ElmSyntaxToRust$expression,
									{
										letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
										moduleInfo: context.moduleInfo,
										path: A2($elm$core$List$cons, 'right', context.path),
										variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
									},
									infixOperation.right));
						case '<|':
							return A3(
								$elm$core$Result$map2,
								F2(
									function (called, argument) {
										return $author$project$ElmSyntaxToRust$rustExpressionCallCondense(
											{argument: argument, called: called});
									}),
								A2(
									$author$project$ElmSyntaxToRust$expression,
									{
										letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
										moduleInfo: context.moduleInfo,
										path: A2($elm$core$List$cons, 'left', context.path),
										variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
									},
									infixOperation.left),
								A2(
									$author$project$ElmSyntaxToRust$expression,
									{
										letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
										moduleInfo: context.moduleInfo,
										path: A2($elm$core$List$cons, 'right', context.path),
										variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
									},
									infixOperation.right));
						case '++':
							return A3(
								$elm$core$Result$map2,
								F2(
									function (left, right) {
										return _Utils_eq(infixOperation.left.type_, $author$project$ElmSyntaxToRust$inferredTypeString) ? ($author$project$ElmSyntaxToRust$rustExpressionIsEmptyString(left) ? right : ($author$project$ElmSyntaxToRust$rustExpressionIsEmptyString(right) ? left : $author$project$ElmSyntaxToRust$RustExpressionCall(
											{
												_arguments: _List_fromArray(
													[
														$author$project$ElmSyntaxToRust$RustExpressionReference(
														{name: $author$project$ElmSyntaxToRust$generatedAllocatorVariableName, qualification: _List_Nil}),
														left,
														right
													]),
												called: $author$project$ElmSyntaxToRust$RustExpressionReference(
													{name: 'string_append', qualification: _List_Nil})
											}))) : $author$project$ElmSyntaxToRust$RustExpressionCall(
											{
												_arguments: _List_fromArray(
													[
														$author$project$ElmSyntaxToRust$RustExpressionReference(
														{name: $author$project$ElmSyntaxToRust$generatedAllocatorVariableName, qualification: _List_Nil}),
														left,
														right
													]),
												called: $author$project$ElmSyntaxToRust$RustExpressionReference(
													{name: 'list_append', qualification: _List_Nil})
											});
									}),
								A2(
									$author$project$ElmSyntaxToRust$expression,
									{
										letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
										moduleInfo: context.moduleInfo,
										path: A2($elm$core$List$cons, 'left', context.path),
										variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
									},
									infixOperation.left),
								A2(
									$author$project$ElmSyntaxToRust$expression,
									{
										letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
										moduleInfo: context.moduleInfo,
										path: A2($elm$core$List$cons, 'right', context.path),
										variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
									},
									infixOperation.right));
						default:
							return A4(
								$elm$core$Result$map3,
								F3(
									function (operationFunctionReference, left, right) {
										return $author$project$ElmSyntaxToRust$RustExpressionCall(
											{
												_arguments: _Utils_ap(
													operationFunctionReference.requiresAllocator ? _List_fromArray(
														[
															$author$project$ElmSyntaxToRust$RustExpressionReference(
															{name: $author$project$ElmSyntaxToRust$generatedAllocatorVariableName, qualification: _List_Nil})
														]) : _List_Nil,
													_List_fromArray(
														[left, right])),
												called: $author$project$ElmSyntaxToRust$RustExpressionReference(
													{name: operationFunctionReference.name, qualification: operationFunctionReference.qualification})
											});
									}),
								$author$project$ElmSyntaxToRust$expressionOperatorToRustFunctionReference(infixOperation.operator),
								A2(
									$author$project$ElmSyntaxToRust$expression,
									{
										letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
										moduleInfo: context.moduleInfo,
										path: A2($elm$core$List$cons, 'left', context.path),
										variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
									},
									infixOperation.left),
								A2(
									$author$project$ElmSyntaxToRust$expression,
									{
										letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
										moduleInfo: context.moduleInfo,
										path: A2($elm$core$List$cons, 'right', context.path),
										variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
									},
									infixOperation.right));
					}
				case 'ExpressionReferenceVariant':
					var reference = _v3.a;
					var asBool = function () {
						var _v13 = reference.moduleOrigin;
						if (_v13 === 'Basics') {
							var _v14 = reference.name;
							switch (_v14) {
								case 'True':
									return $elm$core$Maybe$Just(
										$author$project$ElmSyntaxToRust$RustExpressionReference(
											{name: 'true', qualification: _List_Nil}));
								case 'False':
									return $elm$core$Maybe$Just(
										$author$project$ElmSyntaxToRust$RustExpressionReference(
											{name: 'false', qualification: _List_Nil}));
								default:
									return $elm$core$Maybe$Nothing;
							}
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}();
					if (asBool.$ === 'Just') {
						var bool = asBool.a;
						return $elm$core$Result$Ok(bool);
					} else {
						var asRustVariant = function () {
							var _v12 = $author$project$ElmSyntaxToRust$variantToCoreRust(
								{moduleOrigin: reference.moduleOrigin, name: reference.name, type_: expressionTypedNode.type_});
							if (_v12.$ === 'Just') {
								var rustCoreReference = _v12.a;
								return rustCoreReference;
							} else {
								return {
									isReference: true,
									name: $author$project$ElmSyntaxToRust$referenceToRustName(
										{moduleOrigin: reference.moduleOrigin, name: reference.name}),
									originTypeName: _List_fromArray(
										[
											$author$project$ElmSyntaxToRust$normalizeToRustPascalCase(
											A3($elm$core$String$replace, '.', '', reference.moduleOrigin) + ('_' + (reference.choiceTypeName + 'Guts')))
										])
								};
							}
						}();
						var rustExpressionVariantValue = $author$project$ElmSyntaxToRust$RustExpressionVariant(
							{name: asRustVariant.name, originTypeName: asRustVariant.originTypeName});
						return $elm$core$Result$Ok(
							function () {
								var _v10 = A2(
									$elm$core$List$map,
									function (input) {
										return A2(
											$author$project$ElmSyntaxToRust$type_,
											function (moduleNameToAccess) {
												return A2(
													$elm$core$Maybe$map,
													function ($) {
														return $.typeAliases;
													},
													A2($miniBill$elm_fast_dict$FastDict$get, moduleNameToAccess, context.moduleInfo));
											},
											input);
									},
									$author$project$ElmSyntaxToRust$inferredTypeExpandFunction(expressionTypedNode.type_).inputs);
								if (!_v10.b) {
									return asRustVariant.isReference ? $author$project$ElmSyntaxToRust$RustExpressionBorrow(rustExpressionVariantValue) : rustExpressionVariantValue;
								} else {
									var valueType0 = _v10.a;
									var valueType1Up = _v10.b;
									var generatedValueParameterName = function (valueIndex) {
										return _Utils_ap(
											'generated_' + ($elm$core$String$fromInt(valueIndex) + '_'),
											A2($elm$core$String$join, '_', context.path));
									};
									return A3(
										$elm$core$List$foldr,
										F2(
											function (parameter, resultSoFar) {
												return $author$project$ElmSyntaxToRust$RustExpressionLambda(
													{
														parameters: _List_fromArray(
															[
																{
																pattern: $author$project$ElmSyntaxToRust$RustPatternVariable(parameter.pattern),
																type_: parameter.type_
															}
															]),
														result: resultSoFar
													});
											}),
										$author$project$ElmSyntaxToRust$RustExpressionCall(
											{
												_arguments: A2(
													$elm$core$List$indexedMap,
													F2(
														function (valueIndex, _v11) {
															return $author$project$ElmSyntaxToRust$RustExpressionReference(
																{
																	name: generatedValueParameterName(valueIndex),
																	qualification: _List_Nil
																});
														}),
													A2($elm$core$List$cons, valueType0, valueType1Up)),
												called: asRustVariant.isReference ? $author$project$ElmSyntaxToRust$RustExpressionCall(
													{
														_arguments: _List_fromArray(
															[rustExpressionVariantValue]),
														called: $author$project$ElmSyntaxToRust$RustExpressionRecordAccess(
															{
																field: 'alloc',
																record: $author$project$ElmSyntaxToRust$RustExpressionReference(
																	{name: $author$project$ElmSyntaxToRust$generatedAllocatorVariableName, qualification: _List_Nil})
															})
													}) : rustExpressionVariantValue
											}),
										A2(
											$elm$core$List$indexedMap,
											F2(
												function (valueIndex, valueType) {
													return {
														pattern: generatedValueParameterName(valueIndex),
														type_: valueType
													};
												}),
											A2($elm$core$List$cons, valueType0, valueType1Up)));
								}
							}());
					}
				case 'ExpressionReferenceRecordTypeAliasConstructorFunction':
					var reference = _v3.a;
					var _v15 = A2(
						$elm$core$Maybe$andThen,
						function ($) {
							return $.recordFieldOrder;
						},
						A2(
							$elm$core$Maybe$andThen,
							function (byName) {
								return A2($miniBill$elm_fast_dict$FastDict$get, reference.name, byName.typeAliases);
							},
							A2($miniBill$elm_fast_dict$FastDict$get, reference.moduleOrigin, context.moduleInfo)));
					if (_v15.$ === 'Just') {
						var fieldOrder = _v15.a;
						if (!fieldOrder.b) {
							return $elm$core$Result$Ok(
								$author$project$ElmSyntaxToRust$RustExpressionRecord($miniBill$elm_fast_dict$FastDict$empty));
						} else {
							var fieldName0 = fieldOrder.a;
							var fieldName1Up = fieldOrder.b;
							var resultRecordFields = A3(
								$elm$core$List$foldl,
								F2(
									function (fieldName, soFar) {
										return A3(
											$miniBill$elm_fast_dict$FastDict$insert,
											$author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(fieldName),
											$author$project$ElmSyntaxToRust$RustExpressionReference(
												{
													name: $author$project$ElmSyntaxToRust$generatedFieldValueParameterName(fieldName),
													qualification: _List_Nil
												}),
											soFar);
									}),
								$miniBill$elm_fast_dict$FastDict$empty,
								A2($elm$core$List$cons, fieldName0, fieldName1Up));
							var parameterTypes = $author$project$ElmSyntaxToRust$inferredTypeExpandToFunction(expressionTypedNode.type_).inputs;
							return $elm$core$Result$Ok(
								A3(
									$elm$core$List$foldr,
									F2(
										function (parameter, resultSoFar) {
											return $author$project$ElmSyntaxToRust$RustExpressionLambda(
												{
													parameters: _List_fromArray(
														[
															{
															pattern: $author$project$ElmSyntaxToRust$RustPatternVariable(parameter.name),
															type_: A2(
																$author$project$ElmSyntaxToRust$type_,
																function (moduleNameToAccess) {
																	return A2(
																		$elm$core$Maybe$map,
																		function ($) {
																			return $.typeAliases;
																		},
																		A2($miniBill$elm_fast_dict$FastDict$get, moduleNameToAccess, context.moduleInfo));
																},
																parameter.type_)
														}
														]),
													result: resultSoFar
												});
										}),
									$author$project$ElmSyntaxToRust$RustExpressionRecord(resultRecordFields),
									A3(
										$elm$core$List$map2,
										F2(
											function (fieldName, fieldType) {
												return {
													name: $author$project$ElmSyntaxToRust$generatedFieldValueParameterName(fieldName),
													type_: fieldType
												};
											}),
										A2($elm$core$List$cons, fieldName0, fieldName1Up),
										parameterTypes)));
						}
					} else {
						return $elm$core$Result$Err(
							'could not find declaration for the record type alias constructor ' + $author$project$ElmSyntaxToRust$inferredReferenceToInfoString(reference));
					}
				case 'ExpressionReference':
					var reference = _v3.a;
					var asVariableFromWithinDeclaration = function () {
						var _v23 = reference.moduleOrigin;
						if (_v23 === '') {
							return A2($miniBill$elm_fast_dict$FastSet$member, reference.name, context.variablesFromWithinDeclarationInScope) ? $elm$core$Maybe$Just(
								$author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(reference.name)) : $elm$core$Maybe$Nothing;
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}();
					return $elm$core$Result$Ok(
						function () {
							if (asVariableFromWithinDeclaration.$ === 'Just') {
								var variableFromWithinDeclaration = asVariableFromWithinDeclaration.a;
								var _v18 = A2($miniBill$elm_fast_dict$FastDict$get, variableFromWithinDeclaration, context.letDeclaredValueAndFunctionTypes);
								if (_v18.$ === 'Nothing') {
									return $author$project$ElmSyntaxToRust$RustExpressionReference(
										{name: variableFromWithinDeclaration, qualification: _List_Nil});
								} else {
									var letDeclaredValueOrFunctionType = _v18.a;
									return A2(
										$author$project$ElmSyntaxToRust$rustExpressionReferenceDeclaredValueOrFunctionAppliedLazilyOrCurriedIfNecessary,
										context,
										{
											inferredType: expressionTypedNode.type_,
											name: variableFromWithinDeclaration,
											originDeclarationTypeWithExpandedAliases: A2(
												$author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases,
												function (moduleName) {
													return A2(
														$elm$core$Maybe$map,
														function ($) {
															return $.typeAliases;
														},
														A2($miniBill$elm_fast_dict$FastDict$get, moduleName, context.moduleInfo));
												},
												letDeclaredValueOrFunctionType),
											qualification: _List_Nil,
											requiresAllocator: false
										});
								}
							} else {
								var _v19 = A2($miniBill$elm_fast_dict$FastDict$get, reference.moduleOrigin, context.moduleInfo);
								if (_v19.$ === 'Nothing') {
									return $author$project$ElmSyntaxToRust$RustExpressionReference(
										{
											name: $author$project$ElmSyntaxToRust$referenceToRustName(
												{moduleOrigin: reference.moduleOrigin, name: reference.name}),
											qualification: _List_Nil
										});
								} else {
									var referenceOriginModuleInfo = _v19.a;
									if (A2($miniBill$elm_fast_dict$FastSet$member, reference.name, referenceOriginModuleInfo.portsOutgoing)) {
										return $author$project$ElmSyntaxToRust$RustExpressionLambda(
											{
												parameters: _List_fromArray(
													[
														{
														pattern: $author$project$ElmSyntaxToRust$RustPatternVariable('generated_value'),
														type_: $author$project$ElmSyntaxToRust$RustTypeConstruct(
															{
																_arguments: _List_Nil,
																isFunction: false,
																lifetimeArgument: $elm$core$Maybe$Just($author$project$ElmSyntaxToRust$generatedLifetimeVariableName),
																name: 'JsonEncodeValue',
																qualification: _List_Nil
															})
													}
													]),
												result: $author$project$ElmSyntaxToRust$RustExpressionArrayLiteral(
													_List_fromArray(
														[
															$author$project$ElmSyntaxToRust$RustExpressionCall(
															{
																_arguments: _List_fromArray(
																	[
																		$author$project$ElmSyntaxToRust$RustExpressionStringLiteral(reference.name),
																		$author$project$ElmSyntaxToRust$RustExpressionReference(
																		{name: 'generated_value', qualification: _List_Nil})
																	]),
																called: $author$project$ElmSyntaxToRust$RustExpressionVariant(
																	{
																		name: 'PortOutgoing',
																		originTypeName: _List_fromArray(
																			['PlatformCmdSingle'])
																	})
															})
														]))
											});
									} else {
										if (A2($miniBill$elm_fast_dict$FastSet$member, reference.name, referenceOriginModuleInfo.portsIncoming)) {
											return $author$project$ElmSyntaxToRust$RustExpressionLambda(
												{
													parameters: _List_fromArray(
														[
															{
															pattern: $author$project$ElmSyntaxToRust$RustPatternVariable('generated_onValue'),
															type_: function () {
																var _v20 = expressionTypedNode.type_;
																if ((_v20.$ === 'TypeNotVariable') && (_v20.a.$ === 'TypeFunction')) {
																	var expressionTypeFunction = _v20.a.a;
																	return A2(
																		$author$project$ElmSyntaxToRust$type_,
																		function (moduleName) {
																			return A2(
																				$elm$core$Maybe$map,
																				function ($) {
																					return $.typeAliases;
																				},
																				A2($miniBill$elm_fast_dict$FastDict$get, moduleName, context.moduleInfo));
																		},
																		expressionTypeFunction.input);
																} else {
																	return $author$project$ElmSyntaxToRust$RustTypeFunction(
																		{
																			input: _List_fromArray(
																				[
																					$author$project$ElmSyntaxToRust$RustTypeConstruct(
																					{
																						_arguments: _List_Nil,
																						isFunction: false,
																						lifetimeArgument: $elm$core$Maybe$Just($author$project$ElmSyntaxToRust$generatedLifetimeVariableName),
																						name: 'JsonEncodeValue',
																						qualification: _List_Nil
																					})
																				]),
																			output: $author$project$ElmSyntaxToRust$RustTypeVariable('event')
																		});
																}
															}()
														}
														]),
													result: $author$project$ElmSyntaxToRust$RustExpressionArrayLiteral(
														_List_fromArray(
															[
																$author$project$ElmSyntaxToRust$RustExpressionCall(
																{
																	_arguments: _List_fromArray(
																		[
																			$author$project$ElmSyntaxToRust$RustExpressionStringLiteral(reference.name),
																			$author$project$ElmSyntaxToRust$RustExpressionReference(
																			{name: 'generated_onValue', qualification: _List_Nil})
																		]),
																	called: $author$project$ElmSyntaxToRust$RustExpressionVariant(
																		{
																			name: 'PortIncoming',
																			originTypeName: _List_fromArray(
																				['PlatformSubSingle'])
																		})
																})
															]))
												});
										} else {
											var _v21 = A2($miniBill$elm_fast_dict$FastDict$get, reference.name, referenceOriginModuleInfo.valueAndFunctionAnnotations);
											if (_v21.$ === 'Nothing') {
												return $author$project$ElmSyntaxToRust$RustExpressionReference(
													{
														name: $author$project$ElmSyntaxToRust$referenceToRustName(
															{moduleOrigin: reference.moduleOrigin, name: reference.name}),
														qualification: _List_Nil
													});
											} else {
												var originDeclarationType = _v21.a;
												var typeAliasesInModule = function (moduleNameToAccess) {
													return A2(
														$elm$core$Maybe$map,
														function ($) {
															return $.typeAliases;
														},
														A2($miniBill$elm_fast_dict$FastDict$get, moduleNameToAccess, context.moduleInfo));
												};
												var originDeclarationTypeWithExpandedAliases = A2($author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases, typeAliasesInModule, originDeclarationType);
												var rustReference = function () {
													var _v22 = $author$project$ElmSyntaxToRust$referenceToCoreRust(
														{moduleOrigin: reference.moduleOrigin, name: reference.name, type_: expressionTypedNode.type_});
													if (_v22.$ === 'Just') {
														var coreRustReference = _v22.a;
														return coreRustReference;
													} else {
														return {
															name: A2(
																$author$project$ElmSyntaxToRust$rustNameWithSpecializedTypes,
																A2(
																	$author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom,
																	originDeclarationTypeWithExpandedAliases,
																	A2($author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases, typeAliasesInModule, expressionTypedNode.type_)),
																$author$project$ElmSyntaxToRust$referenceToRustName(
																	{moduleOrigin: reference.moduleOrigin, name: reference.name})),
															qualification: _List_Nil,
															requiresAllocator: true
														};
													}
												}();
												return A2(
													$author$project$ElmSyntaxToRust$rustExpressionReferenceDeclaredValueOrFunctionAppliedLazilyOrCurriedIfNecessary,
													context,
													{inferredType: expressionTypedNode.type_, name: rustReference.name, originDeclarationTypeWithExpandedAliases: originDeclarationTypeWithExpandedAliases, qualification: rustReference.qualification, requiresAllocator: rustReference.requiresAllocator});
											}
										}
									}
								}
							}
						}());
				case 'ExpressionIfThenElse':
					var ifThenElse = _v3.a;
					return A4(
						$elm$core$Result$map3,
						F3(
							function (condition, onTrue, onFalse) {
								return $author$project$ElmSyntaxToRust$RustExpressionIfElse(
									{condition: condition, onFalse: onFalse, onTrue: onTrue});
							}),
						A2(
							$author$project$ElmSyntaxToRust$expression,
							{
								letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
								moduleInfo: context.moduleInfo,
								path: A2($elm$core$List$cons, 'condition', context.path),
								variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
							},
							ifThenElse.condition),
						A2(
							$author$project$ElmSyntaxToRust$expression,
							{
								letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
								moduleInfo: context.moduleInfo,
								path: A2($elm$core$List$cons, 'onTrue', context.path),
								variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
							},
							ifThenElse.onTrue),
						A2(
							$author$project$ElmSyntaxToRust$expression,
							{
								letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
								moduleInfo: context.moduleInfo,
								path: A2($elm$core$List$cons, 'onFalse', context.path),
								variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
							},
							ifThenElse.onFalse));
				case 'ExpressionParenthesized':
					var inParens = _v3.a;
					var $temp$context = context,
						$temp$expressionTypedNode = inParens;
					context = $temp$context;
					expressionTypedNode = $temp$expressionTypedNode;
					continue expression;
				case 'ExpressionNegation':
					var inNegationNode = _v3.a;
					return A2(
						$elm$core$Result$map,
						function (rustInNegation) {
							return $author$project$ElmSyntaxToRust$RustExpressionNegateOperation(rustInNegation);
						},
						A2($author$project$ElmSyntaxToRust$expression, context, inNegationNode));
				case 'ExpressionRecordAccess':
					var recordAccess = _v3.a;
					return A2(
						$elm$core$Result$map,
						function (record) {
							return $author$project$ElmSyntaxToRust$RustExpressionRecordAccess(
								{
									field: $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(
										A3($elm$core$String$replace, '.', '', recordAccess.fieldName)),
									record: record
								});
						},
						A2($author$project$ElmSyntaxToRust$expression, context, recordAccess.record));
				case 'ExpressionTuple':
					var parts = _v3.a;
					return A3(
						$elm$core$Result$map2,
						F2(
							function (part0, part1) {
								return A2($author$project$ElmSyntaxToRust$rustExpressionCallTuple, part0, part1);
							}),
						A2(
							$author$project$ElmSyntaxToRust$expression,
							{
								letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
								moduleInfo: context.moduleInfo,
								path: A2($elm$core$List$cons, 'part0', context.path),
								variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
							},
							parts.part0),
						A2(
							$author$project$ElmSyntaxToRust$expression,
							{
								letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
								moduleInfo: context.moduleInfo,
								path: A2($elm$core$List$cons, 'part1', context.path),
								variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
							},
							parts.part1));
				case 'ExpressionTriple':
					var parts = _v3.a;
					return A4(
						$elm$core$Result$map3,
						F3(
							function (part0, part1, part2) {
								return A3($author$project$ElmSyntaxToRust$rustExpressionCallTriple, part0, part1, part2);
							}),
						A2(
							$author$project$ElmSyntaxToRust$expression,
							{
								letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
								moduleInfo: context.moduleInfo,
								path: A2($elm$core$List$cons, 'part0', context.path),
								variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
							},
							parts.part0),
						A2(
							$author$project$ElmSyntaxToRust$expression,
							{
								letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
								moduleInfo: context.moduleInfo,
								path: A2($elm$core$List$cons, 'part1', context.path),
								variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
							},
							parts.part1),
						A2(
							$author$project$ElmSyntaxToRust$expression,
							{
								letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
								moduleInfo: context.moduleInfo,
								path: A2($elm$core$List$cons, 'part2', context.path),
								variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
							},
							parts.part2));
				case 'ExpressionList':
					var elementNodes = _v3.a;
					return A2(
						$elm$core$Result$map,
						function (elements) {
							if (!elements.b) {
								return $author$project$ElmSyntaxToRust$rustExpressionListEmpty;
							} else {
								if (!elements.b.b) {
									var onlyElement = elements.a;
									return $author$project$ElmSyntaxToRust$RustExpressionCall(
										{
											_arguments: _List_fromArray(
												[onlyElement]),
											called: $author$project$ElmSyntaxToRust$RustExpressionReference(
												{name: 'list_singleton', qualification: _List_Nil})
										});
								} else {
									var element0 = elements.a;
									var _v25 = elements.b;
									var element1 = _v25.a;
									var element2Up = _v25.b;
									return $author$project$ElmSyntaxToRust$RustExpressionCall(
										{
											_arguments: _List_fromArray(
												[
													$author$project$ElmSyntaxToRust$RustExpressionArrayLiteral(
													A2(
														$elm$core$List$cons,
														element0,
														A2($elm$core$List$cons, element1, element2Up)))
												]),
											called: $author$project$ElmSyntaxToRust$RustExpressionReference(
												{name: 'array_toList', qualification: _List_Nil})
										});
								}
							}
						},
						A2(
							$author$project$ElmSyntaxToRust$listMapAndCombineOk,
							function (_v26) {
								var elementIndex = _v26.a;
								var element = _v26.b;
								return A2(
									$author$project$ElmSyntaxToRust$expression,
									{
										letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
										moduleInfo: context.moduleInfo,
										path: A2(
											$elm$core$List$cons,
											$elm$core$String$fromInt(elementIndex),
											context.path),
										variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
									},
									element);
							},
							A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, elementNodes)));
				case 'ExpressionRecord':
					var fieldNodes = _v3.a;
					return A2(
						$elm$core$Result$map,
						function (fields) {
							var fieldResults = A3(
								$elm$core$List$foldl,
								F2(
									function (_v27, soFar) {
										var fieldName = _v27.a;
										var fieldValue = _v27.b;
										return A3($miniBill$elm_fast_dict$FastDict$insert, fieldName, fieldValue, soFar);
									}),
								$miniBill$elm_fast_dict$FastDict$empty,
								fields);
							return $author$project$ElmSyntaxToRust$RustExpressionRecord(fieldResults);
						},
						A2(
							$author$project$ElmSyntaxToRust$listMapAndCombineOk,
							function (field) {
								return A2(
									$elm$core$Result$map,
									function (fieldValue) {
										return _Utils_Tuple2(
											$author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(field.name),
											fieldValue);
									},
									A2(
										$author$project$ElmSyntaxToRust$expression,
										{
											letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
											moduleInfo: context.moduleInfo,
											path: A2($elm$core$List$cons, field.name, context.path),
											variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
										},
										field.value));
							},
							fieldNodes));
				case 'ExpressionRecordUpdate':
					var recordUpdate = _v3.a;
					var _v28 = expressionTypedNode.type_;
					if ((_v28.$ === 'TypeNotVariable') && (_v28.a.$ === 'TypeRecord')) {
						var allFields = _v28.a.a;
						return A2(
							$elm$core$Result$map,
							function (fieldsToSet) {
								var originalRecordVariable = $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(
									$author$project$ElmSyntaxToRust$referenceToRustName(
										{moduleOrigin: recordUpdate.recordVariable.value.moduleOrigin, name: recordUpdate.recordVariable.value.name}));
								var rustOriginalRecordVariableReferenceExpression = $author$project$ElmSyntaxToRust$RustExpressionReference(
									{name: originalRecordVariable, qualification: _List_Nil});
								var fieldsToSetDict = A3(
									$elm$core$List$foldl,
									F2(
										function (_v31, soFar) {
											var fieldName = _v31.a;
											var valueToSet = _v31.b;
											return A3($miniBill$elm_fast_dict$FastDict$insert, fieldName, valueToSet, soFar);
										}),
									$miniBill$elm_fast_dict$FastDict$empty,
									fieldsToSet);
								return $author$project$ElmSyntaxToRust$RustExpressionRecord(
									A2(
										$miniBill$elm_fast_dict$FastDict$map,
										F2(
											function (fieldName, _v29) {
												var _v30 = A2($miniBill$elm_fast_dict$FastDict$get, fieldName, fieldsToSetDict);
												if (_v30.$ === 'Just') {
													var valueToSet = _v30.a;
													return valueToSet;
												} else {
													return $author$project$ElmSyntaxToRust$RustExpressionRecordAccess(
														{field: fieldName, record: rustOriginalRecordVariableReferenceExpression});
												}
											}),
										allFields));
							},
							A2(
								$author$project$ElmSyntaxToRust$listMapAndCombineOk,
								function (field) {
									return A2(
										$elm$core$Result$map,
										function (fieldValue) {
											return _Utils_Tuple2(
												$author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(field.name),
												fieldValue);
										},
										A2(
											$author$project$ElmSyntaxToRust$expression,
											{
												letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
												moduleInfo: context.moduleInfo,
												path: A2($elm$core$List$cons, field.name, context.path),
												variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
											},
											field.value));
								},
								A2($elm$core$List$cons, recordUpdate.field0, recordUpdate.field1Up)));
					} else {
						return $elm$core$Result$Err(
							'(' + ($author$project$ElmSyntaxToRust$rangeToInfoString(expressionTypedNode.range) + ') I tried to transpile an elm record update but the inferred type is not a record so I am unable to construct a new record. This likely means you are using extensible records in a variant or let declaration'));
					}
				case 'ExpressionLambda':
					var lambda = _v3.a;
					var typeAliasesInModule = function (moduleNameToAccess) {
						return A2(
							$elm$core$Maybe$map,
							function ($) {
								return $.typeAliases;
							},
							A2($miniBill$elm_fast_dict$FastDict$get, moduleNameToAccess, context.moduleInfo));
					};
					return A2(
						$elm$core$Result$map,
						function (result) {
							var parameter1UpResult = A3(
								$elm$core$List$foldr,
								F2(
									function (parameter, soFar) {
										return $author$project$ElmSyntaxToRust$RustExpressionLambda(
											{
												parameters: _List_fromArray(
													[
														{
														pattern: parameter.pattern,
														type_: A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, parameter.type_)
													}
													]),
												result: soFar
											});
									}),
								result,
								A2(
									$elm$core$List$map,
									function (parameter) {
										return {
											pattern: $author$project$ElmSyntaxToRust$pattern(parameter).pattern,
											type_: parameter.type_
										};
									},
									lambda.parameter1Up));
							return $author$project$ElmSyntaxToRust$RustExpressionLambda(
								{
									parameters: _List_fromArray(
										[
											{
											pattern: $author$project$ElmSyntaxToRust$pattern(lambda.parameter0).pattern,
											type_: A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, lambda.parameter0.type_)
										}
										]),
									result: parameter1UpResult
								});
						},
						A2(
							$author$project$ElmSyntaxToRust$expression,
							{
								letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
								moduleInfo: context.moduleInfo,
								path: A2($elm$core$List$cons, 'result', context.path),
								variablesFromWithinDeclarationInScope: A2(
									$miniBill$elm_fast_dict$FastSet$union,
									A2(
										$author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify,
										$author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables,
										A2($elm$core$List$cons, lambda.parameter0, lambda.parameter1Up)),
									context.variablesFromWithinDeclarationInScope)
							},
							lambda.result));
				case 'ExpressionCaseOf':
					var caseOf = _v3.a;
					return A4(
						$elm$core$Result$map3,
						F3(
							function (matched, case0, case1Up) {
								return $author$project$ElmSyntaxToRust$RustExpressionMatch(
									{
										case0: {pattern: case0.pattern, result: case0.result},
										case1Up: A2(
											$elm$core$List$map,
											function (rustCase) {
												return {pattern: rustCase.pattern, result: rustCase.result};
											},
											case1Up),
										matched: matched
									});
							}),
						A2(
							$author$project$ElmSyntaxToRust$expression,
							{
								letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
								moduleInfo: context.moduleInfo,
								path: A2($elm$core$List$cons, 'matched', context.path),
								variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
							},
							caseOf.matched),
						A2(
							$author$project$ElmSyntaxToRust$case_,
							{
								letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
								moduleInfo: context.moduleInfo,
								path: A2($elm$core$List$cons, 'case0', context.path),
								variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
							},
							caseOf.case0),
						A2(
							$author$project$ElmSyntaxToRust$listMapAndCombineOk,
							function (_v32) {
								var caseIndex = _v32.a;
								var laterCase = _v32.b;
								return A2(
									$author$project$ElmSyntaxToRust$case_,
									{
										letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
										moduleInfo: context.moduleInfo,
										path: A2(
											$elm$core$List$cons,
											'case' + $elm$core$String$fromInt(caseIndex),
											context.path),
										variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
									},
									laterCase);
							},
							A2(
								$elm$core$List$indexedMap,
								F2(
									function (laterCaseIndex, laterCase) {
										return _Utils_Tuple2(laterCaseIndex + 1, laterCase);
									}),
								caseOf.case1Up)));
				default:
					var letIn = _v3.a;
					var letIntroducedBindings = A2(
						$author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify,
						function (syntaxLetDeclarationAndRange) {
							var _v35 = syntaxLetDeclarationAndRange.declaration;
							if (_v35.$ === 'LetValueOrFunctionDeclaration') {
								var syntaxLetValueOrFunction = _v35.a;
								return $miniBill$elm_fast_dict$FastSet$singleton(syntaxLetValueOrFunction.name);
							} else {
								var syntaxLetDestructuring = _v35.a;
								return $miniBill$elm_fast_dict$FastSet$fromList(
									$author$project$ElmSyntaxToRust$inferredPatternBindings(syntaxLetDestructuring.pattern));
							}
						},
						A2($elm$core$List$cons, letIn.declaration0, letIn.declaration1Up));
					var letDeclaredValueAndFunctionTypesIncludingCurrentFromLets = A3(
						$elm$core$List$foldl,
						F2(
							function (declarationNode, soFar) {
								var _v34 = declarationNode.declaration;
								if (_v34.$ === 'LetDestructuring') {
									return soFar;
								} else {
									var inferredLetValueOrFunction = _v34.a;
									return A3($miniBill$elm_fast_dict$FastDict$insert, inferredLetValueOrFunction.name, inferredLetValueOrFunction.type_, soFar);
								}
							}),
						context.letDeclaredValueAndFunctionTypes,
						A2($elm$core$List$cons, letIn.declaration0, letIn.declaration1Up));
					return A3(
						$elm$core$Result$map2,
						F2(
							function (declarations, result) {
								return A3(
									$elm$core$List$foldr,
									F2(
										function (statement, soFar) {
											return $author$project$ElmSyntaxToRust$RustExpressionAfterStatement(
												{result: soFar, statement: statement});
										}),
									result,
									declarations);
							}),
						A2(
							$author$project$ElmSyntaxToRust$listMapAndCombineOk,
							function (_v33) {
								var letDeclarationIndex = _v33.a;
								var letDeclarationNode = _v33.b;
								return A2(
									$author$project$ElmSyntaxToRust$letDeclaration,
									{
										letDeclaredValueAndFunctionTypes: letDeclaredValueAndFunctionTypesIncludingCurrentFromLets,
										moduleInfo: context.moduleInfo,
										path: A2(
											$elm$core$List$cons,
											'letDeclaration' + $elm$core$String$fromInt(letDeclarationIndex),
											context.path),
										variablesFromWithinDeclarationInScope: A2($miniBill$elm_fast_dict$FastSet$union, letIntroducedBindings, context.variablesFromWithinDeclarationInScope)
									},
									letDeclarationNode);
							},
							A2(
								$elm$core$List$indexedMap,
								F2(
									function (letDeclarationIndex, laterDeclaration) {
										return _Utils_Tuple2(letDeclarationIndex, laterDeclaration);
									}),
								$author$project$ElmSyntaxToRust$inferredLetDeclarationNodesSortFromMostToLeastDependedOn(
									A2($elm$core$List$cons, letIn.declaration0, letIn.declaration1Up)))),
						A2(
							$author$project$ElmSyntaxToRust$expression,
							{
								letDeclaredValueAndFunctionTypes: letDeclaredValueAndFunctionTypesIncludingCurrentFromLets,
								moduleInfo: context.moduleInfo,
								path: A2($elm$core$List$cons, 'letResult', context.path),
								variablesFromWithinDeclarationInScope: A2($miniBill$elm_fast_dict$FastSet$union, letIntroducedBindings, context.variablesFromWithinDeclarationInScope)
							},
							letIn.result));
			}
		}
	});
var $author$project$ElmSyntaxToRust$letDeclaration = F2(
	function (context, syntaxLetDeclarationNode) {
		var _v2 = syntaxLetDeclarationNode.declaration;
		if (_v2.$ === 'LetDestructuring') {
			var letDestructuring = _v2.a;
			return A2(
				$elm$core$Result$map,
				function (destructuredExpression) {
					return $author$project$ElmSyntaxToRust$RustStatementLetDestructuring(
						{
							expression: destructuredExpression,
							pattern: $author$project$ElmSyntaxToRust$pattern(letDestructuring.pattern).pattern
						});
				},
				A2(
					$author$project$ElmSyntaxToRust$expression,
					{
						letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
						moduleInfo: context.moduleInfo,
						path: A2($elm$core$List$cons, 'destructuredExpression', context.path),
						variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope
					},
					letDestructuring.expression));
		} else {
			var letValueOrFunction = _v2.a;
			return A2(
				$author$project$ElmSyntaxToRust$letValueOrFunctionDeclaration,
				context,
				{declaration: letValueOrFunction, range: syntaxLetDeclarationNode.range});
		}
	});
var $author$project$ElmSyntaxToRust$letValueOrFunctionDeclaration = F2(
	function (context, syntaxLetDeclarationValueOrFunctionNode) {
		var typeAliasesInModule = function (moduleNameToAccess) {
			return A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.typeAliases;
				},
				A2($miniBill$elm_fast_dict$FastDict$get, moduleNameToAccess, context.moduleInfo));
		};
		var typeWithExpandedAliases = A2($author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases, typeAliasesInModule, syntaxLetDeclarationValueOrFunctionNode.declaration.type_);
		var rustFullTypeAsFunction = $author$project$ElmSyntaxToRust$inferredTypeExpandFunction(typeWithExpandedAliases);
		var introducedTypeParameters = A3(
			$miniBill$elm_fast_dict$FastDict$foldl,
			F3(
				function (variableName, variableUseRange, soFar) {
					return ((!A2($elm$core$String$startsWith, 'number', variableName)) && A2($author$project$ElmSyntaxToRust$rangeIncludesRange, variableUseRange, syntaxLetDeclarationValueOrFunctionNode.range)) ? A2($elm$core$List$cons, variableName, soFar) : soFar;
				}),
			_List_Nil,
			$author$project$ElmSyntaxToRust$inferredTypeContainedVariables(syntaxLetDeclarationValueOrFunctionNode.declaration.type_));
		var _v0 = rustFullTypeAsFunction.inputs;
		if (!_v0.b) {
			return A2(
				$elm$core$Result$map,
				function (result) {
					var rustResultType = A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, syntaxLetDeclarationValueOrFunctionNode.declaration.type_);
					var rustName = $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(syntaxLetDeclarationValueOrFunctionNode.declaration.name);
					return $author$project$ElmSyntaxToRust$rustTypeIsConcrete(rustResultType) ? $author$project$ElmSyntaxToRust$RustStatementLetDeclaration(
						{name: rustName, result: result, resultType: rustResultType}) : $author$project$ElmSyntaxToRust$RustStatementFuncDeclaration(
						{introducedTypeParameters: introducedTypeParameters, name: rustName, parameters: _List_Nil, result: result, resultType: rustResultType});
				},
				A2(
					$author$project$ElmSyntaxToRust$expression,
					{letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes, moduleInfo: context.moduleInfo, path: context.path, variablesFromWithinDeclarationInScope: context.variablesFromWithinDeclarationInScope},
					syntaxLetDeclarationValueOrFunctionNode.declaration.result));
		} else {
			return A2(
				$elm$core$Result$map,
				function (result) {
					var syntaxParameterCount = $elm$core$List$length(syntaxLetDeclarationValueOrFunctionNode.declaration.parameters);
					var additionalGeneratedParameters = A2(
						$elm$core$List$indexedMap,
						F2(
							function (additionalParameterIndex, additionalParameterInferredType) {
								return {
									name: A2($author$project$ElmSyntaxToRust$generatedParameterNameForIndexAtPath, syntaxParameterCount + additionalParameterIndex, context.path),
									type_: A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, additionalParameterInferredType)
								};
							}),
						A2($elm$core$List$drop, syntaxParameterCount, rustFullTypeAsFunction.inputs));
					var fullResult = A3(
						$elm$core$List$foldl,
						F2(
							function (additionalGeneratedParameter, soFar) {
								return $author$project$ElmSyntaxToRust$rustExpressionCallCondense(
									{
										argument: $author$project$ElmSyntaxToRust$RustExpressionReference(
											{name: additionalGeneratedParameter.name, qualification: _List_Nil}),
										called: soFar
									});
							}),
						result,
						additionalGeneratedParameters);
					return $author$project$ElmSyntaxToRust$RustStatementFuncDeclaration(
						{
							introducedTypeParameters: introducedTypeParameters,
							name: syntaxLetDeclarationValueOrFunctionNode.declaration.name,
							parameters: _Utils_ap(
								A2(
									$elm$core$List$indexedMap,
									F2(
										function (parameterIndex, parameter) {
											return {
												name: function () {
													var _v1 = parameter.value;
													if (_v1.$ === 'PatternVariable') {
														var patternVariable = _v1.a;
														return $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(patternVariable);
													} else {
														return A2($author$project$ElmSyntaxToRust$generatedParameterNameForIndexAtPath, parameterIndex, context.path);
													}
												}(),
												type_: A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, parameter.type_)
											};
										}),
									syntaxLetDeclarationValueOrFunctionNode.declaration.parameters),
								additionalGeneratedParameters),
							result: fullResult,
							resultType: A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, rustFullTypeAsFunction.output)
						});
				},
				A2(
					$author$project$ElmSyntaxToRust$expression,
					{
						letDeclaredValueAndFunctionTypes: context.letDeclaredValueAndFunctionTypes,
						moduleInfo: context.moduleInfo,
						path: A2($elm$core$List$cons, 'letDeclarationResult', context.path),
						variablesFromWithinDeclarationInScope: A2(
							$miniBill$elm_fast_dict$FastSet$union,
							A2($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify, $author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables, syntaxLetDeclarationValueOrFunctionNode.declaration.parameters),
							context.variablesFromWithinDeclarationInScope)
					},
					syntaxLetDeclarationValueOrFunctionNode.declaration.result));
		}
	});
var $author$project$ElmSyntaxToRust$generatedParameterNameForIndex = function (parameterIndex) {
	return 'generated_' + $elm$core$String$fromInt(parameterIndex);
};
var $author$project$ElmSyntaxToRust$rustTypeConstructBumpaloBump = $author$project$ElmSyntaxToRust$RustTypeConstruct(
	{_arguments: _List_Nil, isFunction: false, lifetimeArgument: $elm$core$Maybe$Nothing, name: 'Bump', qualification: _List_Nil});
var $author$project$ElmSyntaxToRust$valueOrFunctionDeclaration = F2(
	function (moduleContext, syntaxDeclarationValueOrFunction) {
		var typeAliasesInModule = function (moduleNameToAccess) {
			return A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.typeAliases;
				},
				A2($miniBill$elm_fast_dict$FastDict$get, moduleNameToAccess, moduleContext));
		};
		var typeWithExpandedAliases = A2($author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases, typeAliasesInModule, syntaxDeclarationValueOrFunction.type_);
		var rustFullTypeAsFunction = $author$project$ElmSyntaxToRust$inferredTypeExpandFunction(typeWithExpandedAliases);
		var _v0 = rustFullTypeAsFunction.inputs;
		if (!_v0.b) {
			return A2(
				$elm$core$Result$map,
				function (result) {
					var rustResultType = A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, syntaxDeclarationValueOrFunction.type_);
					return $author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType(typeWithExpandedAliases) ? {lifetimeParameters: _List_Nil, parameters: $elm$core$Maybe$Nothing, result: result, resultType: rustResultType} : {
						lifetimeParameters: _List_fromArray(
							[$author$project$ElmSyntaxToRust$generatedLifetimeVariableName]),
						parameters: $elm$core$Maybe$Just(
							_List_fromArray(
								[
									{
									pattern: $author$project$ElmSyntaxToRust$RustPatternVariable($author$project$ElmSyntaxToRust$generatedAllocatorVariableName),
									type_: $author$project$ElmSyntaxToRust$RustTypeBorrow(
										{
											lifetimeVariable: $elm$core$Maybe$Just($author$project$ElmSyntaxToRust$generatedLifetimeVariableName),
											type_: $author$project$ElmSyntaxToRust$rustTypeConstructBumpaloBump
										})
								}
								])),
						result: result,
						resultType: rustResultType
					};
				},
				A2(
					$author$project$ElmSyntaxToRust$expression,
					{letDeclaredValueAndFunctionTypes: $miniBill$elm_fast_dict$FastDict$empty, moduleInfo: moduleContext, path: _List_Nil, variablesFromWithinDeclarationInScope: $miniBill$elm_fast_dict$FastSet$empty},
					syntaxDeclarationValueOrFunction.result));
		} else {
			return A2(
				$elm$core$Result$map,
				function (result) {
					var syntaxParameterCount = $elm$core$List$length(syntaxDeclarationValueOrFunction.parameters);
					var additionalGeneratedParameters = A2(
						$elm$core$List$indexedMap,
						F2(
							function (additionalParameterIndex, additionalParameterInferredType) {
								return {
									name: $author$project$ElmSyntaxToRust$generatedParameterNameForIndex(syntaxParameterCount + additionalParameterIndex),
									type_: A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, additionalParameterInferredType)
								};
							}),
						A2($elm$core$List$drop, syntaxParameterCount, rustFullTypeAsFunction.inputs));
					var fullResult = A3(
						$elm$core$List$foldl,
						F2(
							function (additionalGeneratedParameter, soFar) {
								return $author$project$ElmSyntaxToRust$rustExpressionCallCondense(
									{
										argument: $author$project$ElmSyntaxToRust$RustExpressionReference(
											{name: additionalGeneratedParameter.name, qualification: _List_Nil}),
										called: soFar
									});
							}),
						result,
						additionalGeneratedParameters);
					return {
						lifetimeParameters: _List_fromArray(
							[$author$project$ElmSyntaxToRust$generatedLifetimeVariableName]),
						parameters: $elm$core$Maybe$Just(
							A2(
								$elm$core$List$cons,
								{
									pattern: $author$project$ElmSyntaxToRust$RustPatternVariable($author$project$ElmSyntaxToRust$generatedAllocatorVariableName),
									type_: $author$project$ElmSyntaxToRust$RustTypeBorrow(
										{
											lifetimeVariable: $elm$core$Maybe$Just($author$project$ElmSyntaxToRust$generatedLifetimeVariableName),
											type_: $author$project$ElmSyntaxToRust$rustTypeConstructBumpaloBump
										})
								},
								_Utils_ap(
									A2(
										$elm$core$List$map,
										function (parameter) {
											return {
												pattern: $author$project$ElmSyntaxToRust$pattern(parameter).pattern,
												type_: A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, parameter.type_)
											};
										},
										syntaxDeclarationValueOrFunction.parameters),
									A2(
										$elm$core$List$map,
										function (additionalParameter) {
											return {
												pattern: $author$project$ElmSyntaxToRust$RustPatternVariable(additionalParameter.name),
												type_: additionalParameter.type_
											};
										},
										additionalGeneratedParameters)))),
						result: fullResult,
						resultType: A2($author$project$ElmSyntaxToRust$type_, typeAliasesInModule, rustFullTypeAsFunction.output)
					};
				},
				A2(
					$author$project$ElmSyntaxToRust$expression,
					{
						letDeclaredValueAndFunctionTypes: $miniBill$elm_fast_dict$FastDict$empty,
						moduleInfo: moduleContext,
						path: _List_fromArray(
							['declarationResult']),
						variablesFromWithinDeclarationInScope: A2($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify, $author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables, syntaxDeclarationValueOrFunction.parameters)
					},
					syntaxDeclarationValueOrFunction.result));
		}
	});
var $author$project$ElmSyntaxToRust$modules = function (syntaxDeclarationsIncludingOverwrittenOnes) {
	var syntaxModules = A2(
		$elm$core$List$filter,
		function (syntaxModule) {
			var _v48 = $author$project$ElmSyntaxToRust$moduleHeaderName(
				$stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxModule.moduleDefinition));
			switch (_v48) {
				case 'Basics':
					return false;
				case 'Array':
					return false;
				case 'Elm.JsArray':
					return false;
				case 'Bitwise':
					return false;
				case 'Debug':
					return false;
				case 'Char':
					return false;
				case 'String':
					return false;
				case 'List':
					return false;
				case 'Maybe':
					return false;
				case 'Result':
					return false;
				case 'Dict':
					return false;
				case 'Set':
					return false;
				case 'Platform':
					return false;
				case 'Platform.Cmd':
					return false;
				case 'Platform.Sub':
					return false;
				case 'Process':
					return false;
				case 'Task':
					return false;
				case 'Json.Decode':
					return false;
				case 'Json.Encode':
					return false;
				case 'Regex':
					return false;
				case 'File':
					return false;
				case 'Bytes':
					return false;
				case 'Bytes.Encode':
					return false;
				case 'Bytes.Decode':
					return false;
				case 'Http':
					return false;
				case 'VirtualDom':
					return false;
				case 'Browser':
					return false;
				case 'Browser.Events':
					return false;
				case 'Browser.Navigation':
					return false;
				case 'Browser.Dom':
					return false;
				case 'Browser.AnimationManager':
					return false;
				case 'Debugger.Expando':
					return false;
				case 'Debugger.History':
					return false;
				case 'Debugger.Main':
					return false;
				case 'Debugger.Metadata':
					return false;
				case 'Debugger.Overlay':
					return false;
				case 'Debugger.Report':
					return false;
				case 'Time':
					return false;
				case 'Random':
					return false;
				case 'Markdown':
					return false;
				case 'Benchmark':
					return false;
				case 'WebGL':
					return false;
				case 'WebGL.Settings':
					return false;
				case 'WebGL.Settings.Blend':
					return false;
				case 'WebGL.Settings.DepthTest':
					return false;
				case 'WebGL.Settings.StencilTest':
					return false;
				case 'WebGL.Texture':
					return false;
				case 'Math.Matrix4':
					return false;
				case 'Math.Vector2':
					return false;
				case 'Math.Vector3':
					return false;
				case 'Math.Vector4':
					return false;
				default:
					return true;
			}
		},
		syntaxDeclarationsIncludingOverwrittenOnes);
	var syntaxModulesFromMostToLeastImported = A3(
		$elm$core$List$foldr,
		F2(
			function (edge0, syntaxModulesFromMostToLeastImportedSoFar) {
				if (edge0.$ === 'AcyclicSCC') {
					var n = edge0.a;
					return A2($elm$core$List$cons, n, syntaxModulesFromMostToLeastImportedSoFar);
				} else {
					var recursive = edge0.a;
					return _Utils_ap(recursive, syntaxModulesFromMostToLeastImportedSoFar);
				}
			}),
		_List_Nil,
		$author$project$Graph$stronglyConnComponents(
			A2(
				$elm$core$List$map,
				function (syntaxModule) {
					return _Utils_Tuple3(
						syntaxModule,
						$author$project$ElmSyntaxToRust$moduleHeaderName(
							$stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxModule.moduleDefinition)),
						A2(
							$elm$core$List$map,
							function (_v46) {
								var import_ = _v46.b;
								return A2(
									$elm$core$String$join,
									'.',
									$stil4m$elm_syntax$Elm$Syntax$Node$value(import_.moduleName));
							},
							syntaxModule.imports));
				},
				syntaxModules)));
	var allElmRecords = A2(
		$author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify,
		function (syntaxModule) {
			return A2(
				$author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify,
				function (_v41) {
					var syntaxDeclaration = _v41.b;
					switch (syntaxDeclaration.$) {
						case 'FunctionDeclaration':
							var syntaxValueOrFunctionDeclaration = syntaxDeclaration.a;
							var implementationContainedConstructedRecords = $author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords(
								$stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxValueOrFunctionDeclaration.declaration).expression);
							var _v43 = syntaxValueOrFunctionDeclaration.signature;
							if (_v43.$ === 'Nothing') {
								return implementationContainedConstructedRecords;
							} else {
								var _v44 = _v43.a;
								var signature = _v44.b;
								return A2(
									$miniBill$elm_fast_dict$FastSet$union,
									$author$project$ElmSyntaxToRust$typeContainedRecords(signature.typeAnnotation),
									implementationContainedConstructedRecords);
							}
						case 'Destructuring':
							return $miniBill$elm_fast_dict$FastSet$empty;
						case 'InfixDeclaration':
							return $miniBill$elm_fast_dict$FastSet$empty;
						case 'AliasDeclaration':
							var syntaxTypeAliasDeclaration = syntaxDeclaration.a;
							return $author$project$ElmSyntaxToRust$typeContainedRecords(syntaxTypeAliasDeclaration.typeAnnotation);
						case 'PortDeclaration':
							var syntaxPortDeclaration = syntaxDeclaration.a;
							return $author$project$ElmSyntaxToRust$typeContainedRecords(syntaxPortDeclaration.typeAnnotation);
						default:
							var syntaxChoiceTypeDeclaration = syntaxDeclaration.a;
							return A2(
								$author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify,
								function (_v45) {
									var variant = _v45.b;
									return A2($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify, $author$project$ElmSyntaxToRust$typeContainedRecords, variant._arguments);
								},
								syntaxChoiceTypeDeclaration.constructors);
					}
				},
				syntaxModule.declarations);
		},
		syntaxModules);
	var specialize = function (config) {
		var specializedTypes = A2(
			$author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes,
			{allElmRecords: allElmRecords},
			A2(
				$author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases,
				function (moduleName) {
					return A2($miniBill$elm_fast_dict$FastDict$get, moduleName, config.typeAliases);
				},
				config.inferred.type_));
		if ($miniBill$elm_fast_dict$FastDict$isEmpty(specializedTypes)) {
			return _List_Nil;
		} else {
			var _v36 = config.syntax.signature;
			if (_v36.$ === 'Nothing') {
				return A2(
					$elm$core$List$map,
					function (specialization) {
						var specializedName = A2($author$project$ElmSyntaxToRust$rustNameWithSpecializedTypes, specialization, config.inferred.name);
						var _v37 = config.syntax.declaration;
						var implementationRange = _v37.a;
						var implementation = _v37.b;
						return {
							declaration: A2(
								$stil4m$elm_syntax$Elm$Syntax$Node$Node,
								implementationRange,
								{
									_arguments: implementation._arguments,
									expression: implementation.expression,
									name: A2(
										$stil4m$elm_syntax$Elm$Syntax$Node$Node,
										$stil4m$elm_syntax$Elm$Syntax$Node$range(implementation.name),
										specializedName)
								}),
							documentation: config.syntax.documentation,
							signature: $elm$core$Maybe$Nothing
						};
					},
					$author$project$ElmSyntaxToRust$fastDictPermutations(specializedTypes));
			} else {
				var _v38 = _v36.a;
				var signatureRange = _v38.a;
				var signature = _v38.b;
				var synchronizationFromInferredTypeVariableToAnnotationTypeVariable = A2($author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable, config.inferred.type_, signature.typeAnnotation);
				return A2(
					$elm$core$List$map,
					function (specialization) {
						var specializedName = A2($author$project$ElmSyntaxToRust$rustNameWithSpecializedTypes, specialization, config.inferred.name);
						return {
							declaration: function () {
								var _v39 = config.syntax.declaration;
								var implementationRange = _v39.a;
								var implementation = _v39.b;
								return A2(
									$stil4m$elm_syntax$Elm$Syntax$Node$Node,
									implementationRange,
									{
										_arguments: implementation._arguments,
										expression: implementation.expression,
										name: A2(
											$stil4m$elm_syntax$Elm$Syntax$Node$Node,
											$stil4m$elm_syntax$Elm$Syntax$Node$range(implementation.name),
											specializedName)
									});
							}(),
							documentation: config.syntax.documentation,
							signature: $elm$core$Maybe$Just(
								A2(
									$stil4m$elm_syntax$Elm$Syntax$Node$Node,
									signatureRange,
									{
										name: A2(
											$stil4m$elm_syntax$Elm$Syntax$Node$Node,
											$stil4m$elm_syntax$Elm$Syntax$Node$range(signature.name),
											specializedName),
										typeAnnotation: A2(
											$author$project$ElmSyntaxToRust$syntaxTypeNodeApplySpecialization,
											A3(
												$miniBill$elm_fast_dict$FastDict$foldl,
												F3(
													function (inferredVariable, specializedType, soFar) {
														var _v40 = A2($miniBill$elm_fast_dict$FastDict$get, inferredVariable, synchronizationFromInferredTypeVariableToAnnotationTypeVariable);
														if (_v40.$ === 'Nothing') {
															return soFar;
														} else {
															var annotationVariable = _v40.a;
															return A3($miniBill$elm_fast_dict$FastDict$insert, annotationVariable, specializedType, soFar);
														}
													}),
												$miniBill$elm_fast_dict$FastDict$empty,
												specialization),
											signature.typeAnnotation)
									}))
						};
					},
					$author$project$ElmSyntaxToRust$fastDictPermutations(specializedTypes));
			}
		}
	};
	var syntaxModulesInferredOrError = A3(
		$author$project$ElmSyntaxToRust$listFoldlWhileOkFrom,
		{errors: _List_Nil, inferred: _List_Nil, types: $author$project$ElmSyntaxToRust$baseElmDeclarationTypes, valueAndFunctionAnnotations: $miniBill$elm_fast_dict$FastDict$empty},
		F2(
			function (syntaxModule, soFar) {
				var syntaxValueOrFunctionDeclarations = A2(
					$elm$core$List$filterMap,
					function (_v34) {
						var declaration = _v34.b;
						switch (declaration.$) {
							case 'FunctionDeclaration':
								var syntaxValueOrFunctionDeclaration = declaration.a;
								return $elm$core$Maybe$Just(syntaxValueOrFunctionDeclaration);
							case 'AliasDeclaration':
								return $elm$core$Maybe$Nothing;
							case 'CustomTypeDeclaration':
								return $elm$core$Maybe$Nothing;
							case 'PortDeclaration':
								return $elm$core$Maybe$Nothing;
							case 'InfixDeclaration':
								return $elm$core$Maybe$Nothing;
							default:
								return $elm$core$Maybe$Nothing;
						}
					},
					syntaxModule.declarations);
				var moduleOriginLookup = A2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importsToModuleOriginLookup, soFar.types, syntaxModule.imports);
				var moduleName = $author$project$ElmSyntaxToRust$moduleHeaderName(
					$stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxModule.moduleDefinition));
				var currentModuleDeclarationTypesAndErrors = A2(
					$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$moduleDeclarationsToTypes,
					{moduleName: moduleName, moduleOriginLookup: moduleOriginLookup},
					syntaxModule.declarations);
				return A2(
					$elm$core$Result$mapError,
					function (error) {
						return 'In module ' + (moduleName + (': ' + error));
					},
					A2(
						$elm$core$Result$andThen,
						function (declarationsInferredUnspecialized) {
							var typeAliasesAcrossModulesSoFarWithCurrent = A3(
								$miniBill$elm_fast_dict$FastDict$insert,
								moduleName,
								currentModuleDeclarationTypesAndErrors.types.typeAliases,
								A2(
									$miniBill$elm_fast_dict$FastDict$map,
									F2(
										function (_v33, moduleTypes) {
											return moduleTypes.typeAliases;
										}),
									soFar.types));
							var specializedDeclarations = A3(
								$elm$core$List$foldl,
								F2(
									function (inferredUnspecializedValueOrFunctionDeclaration, specializedDeclarationsSoFar) {
										var _v31 = A2(
											$author$project$ElmSyntaxToRust$listMapAndFirstJust,
											function (syntaxValueOrFunctionDeclaration) {
												return _Utils_eq(
													$stil4m$elm_syntax$Elm$Syntax$Node$value(
														$stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxValueOrFunctionDeclaration.declaration).name),
													inferredUnspecializedValueOrFunctionDeclaration.name) ? $elm$core$Maybe$Just(syntaxValueOrFunctionDeclaration) : $elm$core$Maybe$Nothing;
											},
											syntaxValueOrFunctionDeclarations);
										if (_v31.$ === 'Nothing') {
											return specializedDeclarationsSoFar;
										} else {
											var originalSyntaxForInferredDeclaration = _v31.a;
											var _v32 = specialize(
												{inferred: inferredUnspecializedValueOrFunctionDeclaration, syntax: originalSyntaxForInferredDeclaration, typeAliases: typeAliasesAcrossModulesSoFarWithCurrent});
											if (!_v32.b) {
												return specializedDeclarationsSoFar;
											} else {
												var split0 = _v32.a;
												var split1Up = _v32.b;
												return {
													originalDeclarationNamesThatGotSplit: A2($miniBill$elm_fast_dict$FastSet$insert, inferredUnspecializedValueOrFunctionDeclaration.name, specializedDeclarationsSoFar.originalDeclarationNamesThatGotSplit),
													splitDeclarations: A2(
														$elm$core$List$cons,
														split0,
														_Utils_ap(split1Up, specializedDeclarationsSoFar.splitDeclarations))
												};
											}
										}
									}),
								{originalDeclarationNamesThatGotSplit: $miniBill$elm_fast_dict$FastSet$empty, splitDeclarations: _List_Nil},
								declarationsInferredUnspecialized);
							return A2(
								$elm$core$Result$map,
								function (specializedInferredDeclarations) {
									var currentModuleDeclarationSignatureTypesIncludingUnannotated = A3(
										$elm$core$List$foldl,
										F2(
											function (declarationInferred, moduleTypesSoFar) {
												return A3($miniBill$elm_fast_dict$FastDict$insert, declarationInferred.name, declarationInferred.type_, moduleTypesSoFar);
											}),
										A3(
											$elm$core$List$foldl,
											F2(
												function (declarationInferred, moduleTypesSoFar) {
													return A3($miniBill$elm_fast_dict$FastDict$insert, declarationInferred.name, declarationInferred.type_, moduleTypesSoFar);
												}),
											currentModuleDeclarationTypesAndErrors.types.signatures,
											declarationsInferredUnspecialized),
										specializedInferredDeclarations);
									var currentModuleDeclarationTypesIncludingUnannotated = {choiceTypes: currentModuleDeclarationTypesAndErrors.types.choiceTypes, signatures: currentModuleDeclarationSignatureTypesIncludingUnannotated, typeAliases: currentModuleDeclarationTypesAndErrors.types.typeAliases};
									return {
										errors: _Utils_ap(currentModuleDeclarationTypesAndErrors.errors, soFar.errors),
										inferred: A2(
											$elm$core$List$cons,
											{
												declarationTypes: currentModuleDeclarationTypesIncludingUnannotated,
												declarationsInferred: function () {
													if (!specializedInferredDeclarations.b) {
														return declarationsInferredUnspecialized;
													} else {
														var specializedInferredDeclaration0 = specializedInferredDeclarations.a;
														var specializedInferredDeclaration1Up = specializedInferredDeclarations.b;
														return A2(
															$elm$core$List$cons,
															specializedInferredDeclaration0,
															_Utils_ap(
																specializedInferredDeclaration1Up,
																A2(
																	$elm$core$List$filter,
																	function (declarationInferredUnspecialized) {
																		return !A2($miniBill$elm_fast_dict$FastSet$member, declarationInferredUnspecialized.name, specializedDeclarations.originalDeclarationNamesThatGotSplit);
																	},
																	declarationsInferredUnspecialized)));
													}
												}(),
												moduleOriginLookup: moduleOriginLookup,
												module_: syntaxModule
											},
											soFar.inferred),
										types: A3($miniBill$elm_fast_dict$FastDict$insert, moduleName, currentModuleDeclarationTypesIncludingUnannotated, soFar.types),
										valueAndFunctionAnnotations: A3($miniBill$elm_fast_dict$FastDict$insert, moduleName, currentModuleDeclarationSignatureTypesIncludingUnannotated, soFar.valueAndFunctionAnnotations)
									};
								},
								A2(
									$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarations,
									{importedTypes: soFar.types, moduleName: moduleName, moduleOriginLookup: moduleOriginLookup, otherModuleDeclaredTypes: currentModuleDeclarationTypesAndErrors.types},
									specializedDeclarations.splitDeclarations));
						},
						A2(
							$lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarations,
							{importedTypes: soFar.types, moduleName: moduleName, moduleOriginLookup: moduleOriginLookup, otherModuleDeclaredTypes: currentModuleDeclarationTypesAndErrors.types},
							syntaxValueOrFunctionDeclarations)));
			}),
		syntaxModulesFromMostToLeastImported);
	if (syntaxModulesInferredOrError.$ === 'Err') {
		var error = syntaxModulesInferredOrError.a;
		return {
			declarations: {enumTypes: $miniBill$elm_fast_dict$FastDict$empty, fns: $miniBill$elm_fast_dict$FastDict$empty, lets: $miniBill$elm_fast_dict$FastDict$empty, typeAliases: $miniBill$elm_fast_dict$FastDict$empty},
			errors: _List_fromArray(
				[error])
		};
	} else {
		var modulesInferred = syntaxModulesInferredOrError.a;
		var moduleDeclaredPorts = A3(
			$elm$core$List$foldl,
			F2(
				function (syntaxModule, acrossModulesSoFar) {
					return A3(
						$miniBill$elm_fast_dict$FastDict$insert,
						$author$project$ElmSyntaxToRust$moduleHeaderName(
							$stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxModule.moduleDefinition)),
						A3(
							$elm$core$List$foldl,
							F2(
								function (_v28, membersSoFar) {
									var declaration = _v28.b;
									switch (declaration.$) {
										case 'PortDeclaration':
											var portDeclaration = declaration.a;
											return $author$project$ElmSyntaxToRust$portTypeSignifiesOutgoing(portDeclaration.typeAnnotation) ? {
												portsIncoming: membersSoFar.portsIncoming,
												portsOutgoing: A2(
													$miniBill$elm_fast_dict$FastSet$insert,
													$stil4m$elm_syntax$Elm$Syntax$Node$value(portDeclaration.name),
													membersSoFar.portsOutgoing)
											} : {
												portsIncoming: A2(
													$miniBill$elm_fast_dict$FastSet$insert,
													$stil4m$elm_syntax$Elm$Syntax$Node$value(portDeclaration.name),
													membersSoFar.portsIncoming),
												portsOutgoing: membersSoFar.portsOutgoing
											};
										case 'FunctionDeclaration':
											return membersSoFar;
										case 'CustomTypeDeclaration':
											return membersSoFar;
										case 'AliasDeclaration':
											return membersSoFar;
										case 'InfixDeclaration':
											return membersSoFar;
										default:
											return membersSoFar;
									}
								}),
							$author$project$ElmSyntaxToRust$portsOutgoingDictEmptyPortsIncomingDictEmpty,
							syntaxModule.declarations),
						acrossModulesSoFar);
				}),
			$miniBill$elm_fast_dict$FastDict$empty,
			A2(
				$elm$core$List$filter,
				function (syntaxModule) {
					var _v27 = $author$project$ElmSyntaxToRust$moduleHeaderName(
						$stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxModule.moduleDefinition));
					switch (_v27) {
						case 'Elm.JsArray':
							return false;
						case 'Process':
							return false;
						case 'Task':
							return false;
						case 'File':
							return false;
						case 'Http':
							return false;
						case 'Browser':
							return false;
						case 'Browser.Events':
							return false;
						case 'Browser.Navigation':
							return false;
						case 'Browser.Dom':
							return false;
						case 'Browser.AnimationManager':
							return false;
						case 'Debugger.Expando':
							return false;
						case 'Debugger.History':
							return false;
						case 'Debugger.Main':
							return false;
						case 'Debugger.Metadata':
							return false;
						case 'Debugger.Overlay':
							return false;
						case 'Debugger.Report':
							return false;
						case 'Markdown':
							return false;
						case 'Benchmark':
							return false;
						case 'WebGL':
							return false;
						case 'WebGL.Settings':
							return false;
						case 'WebGL.Settings.Blend':
							return false;
						case 'WebGL.Settings.DepthTest':
							return false;
						case 'WebGL.Settings.StencilTest':
							return false;
						case 'WebGL.Texture':
							return false;
						default:
							return true;
					}
				},
				syntaxDeclarationsIncludingOverwrittenOnes));
		var transpiledRustDeclarations = A3(
			$elm$core$List$foldr,
			F2(
				function (moduleInferred, soFarAcrossModules) {
					var moduleName = $author$project$ElmSyntaxToRust$moduleHeaderName(
						$stil4m$elm_syntax$Elm$Syntax$Node$value(moduleInferred.module_.moduleDefinition));
					var createdModuleContext = A2(
						$author$project$ElmSyntaxToRust$modulesPlusImplicitlyImportedToModuleContext,
						{ports: moduleDeclaredPorts, types: modulesInferred.types, valueAndFunctionAnnotations: modulesInferred.valueAndFunctionAnnotations},
						A2(
							$elm$core$List$cons,
							moduleName,
							A2(
								$elm$core$List$map,
								function (_v26) {
									var syntaxImport = _v26.b;
									return A2(
										$elm$core$String$join,
										'.',
										$stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxImport.moduleName));
								},
								moduleInferred.module_.imports)));
					return A3(
						$elm$core$List$foldr,
						F2(
							function (_v19, soFar) {
								var declaration = _v19.b;
								switch (declaration.$) {
									case 'FunctionDeclaration':
										return soFar;
									case 'AliasDeclaration':
										var syntaxTypeAliasDeclaration = declaration.a;
										var typeAliasName = $stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxTypeAliasDeclaration.name);
										var _v21 = A2($miniBill$elm_fast_dict$FastDict$get, typeAliasName, moduleInferred.declarationTypes.typeAliases);
										if (_v21.$ === 'Nothing') {
											return {
												declarations: soFar.declarations,
												errors: A2($elm$core$List$cons, 'bug in elm-syntax-to-rust: failed to find transformed type alias declaration ' + (moduleName + ('.' + typeAliasName)), soFar.errors)
											};
										} else {
											var inferredTypeAliasDeclaration = _v21.a;
											if ($author$project$ElmSyntaxToRust$inferredTypeContainsExtensibleRecord(
												A2(
													$author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases,
													function (moduleNameToAccess) {
														return A2(
															$elm$core$Maybe$map,
															function ($) {
																return $.typeAliases;
															},
															A2($miniBill$elm_fast_dict$FastDict$get, moduleNameToAccess, modulesInferred.types));
													},
													inferredTypeAliasDeclaration.type_))) {
												return soFar;
											} else {
												var rustTypeAliasDeclaration = A2(
													$author$project$ElmSyntaxToRust$typeAliasDeclaration,
													function (moduleNameToAccess) {
														return A2(
															$elm$core$Maybe$map,
															function ($) {
																return $.typeAliases;
															},
															A2($miniBill$elm_fast_dict$FastDict$get, moduleNameToAccess, modulesInferred.types));
													},
													{name: typeAliasName, parameters: inferredTypeAliasDeclaration.parameters, type_: inferredTypeAliasDeclaration.type_});
												return {
													declarations: {
														enumTypes: soFar.declarations.enumTypes,
														fns: soFar.declarations.fns,
														lets: soFar.declarations.lets,
														typeAliases: A3(
															$miniBill$elm_fast_dict$FastDict$insert,
															$author$project$ElmSyntaxToRust$referenceToRustName(
																{moduleOrigin: moduleName, name: rustTypeAliasDeclaration.name}),
															{parameters: rustTypeAliasDeclaration.parameters, type_: rustTypeAliasDeclaration.type_},
															soFar.declarations.typeAliases)
													},
													errors: soFar.errors
												};
											}
										}
									case 'CustomTypeDeclaration':
										var syntaxChoiceTypeDeclaration = declaration.a;
										var choiceTypeName = $stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxChoiceTypeDeclaration.name);
										var _v22 = A2($miniBill$elm_fast_dict$FastDict$get, choiceTypeName, moduleInferred.declarationTypes.choiceTypes);
										if (_v22.$ === 'Nothing') {
											return {
												declarations: soFar.declarations,
												errors: A2($elm$core$List$cons, 'bug in elm-syntax-to-rust: failed to find transformed choice type declaration ' + (moduleName + ('.' + choiceTypeName)), soFar.errors)
											};
										} else {
											var inferredChoiceAliasDeclaration = _v22.a;
											var rustTypeAliasDeclaration = A2(
												$author$project$ElmSyntaxToRust$choiceTypeDeclaration,
												function (moduleNameToAccess) {
													return A2(
														$elm$core$Maybe$map,
														function ($) {
															return $.typeAliases;
														},
														A2($miniBill$elm_fast_dict$FastDict$get, moduleNameToAccess, modulesInferred.types));
												},
												{name: choiceTypeName, parameters: inferredChoiceAliasDeclaration.parameters, variants: inferredChoiceAliasDeclaration.variants});
											return {
												declarations: {
													enumTypes: A3(
														$miniBill$elm_fast_dict$FastDict$insert,
														$author$project$ElmSyntaxToRust$referenceToRustName(
															{moduleOrigin: moduleName, name: rustTypeAliasDeclaration.name}),
														{
															cases: A3(
																$miniBill$elm_fast_dict$FastDict$foldl,
																F3(
																	function (variantName, values, variantsSoFar) {
																		return A3(
																			$miniBill$elm_fast_dict$FastDict$insert,
																			$author$project$ElmSyntaxToRust$referenceToRustName(
																				{moduleOrigin: moduleName, name: variantName}),
																			values,
																			variantsSoFar);
																	}),
																$miniBill$elm_fast_dict$FastDict$empty,
																rustTypeAliasDeclaration.variants),
															parameters: rustTypeAliasDeclaration.parameters
														},
														soFar.declarations.enumTypes),
													fns: soFar.declarations.fns,
													lets: soFar.declarations.lets,
													typeAliases: soFar.declarations.typeAliases
												},
												errors: soFar.errors
											};
										}
									case 'PortDeclaration':
										return soFar;
									case 'InfixDeclaration':
										return soFar;
									default:
										return soFar;
								}
							}),
						A3(
							$elm$core$List$foldl,
							F2(
								function (valueOrFunctionDeclarationInferred, soFarAcrossModulesWithInferredValeAndFunctionDeclarations) {
									var _v23 = A2($author$project$ElmSyntaxToRust$valueOrFunctionDeclaration, createdModuleContext, valueOrFunctionDeclarationInferred);
									if (_v23.$ === 'Ok') {
										var rustValueOrFunctionDeclaration = _v23.a;
										var rustName = $author$project$ElmSyntaxToRust$referenceToRustName(
											{moduleOrigin: moduleName, name: valueOrFunctionDeclarationInferred.name});
										return {
											declarations: function () {
												var _v24 = rustValueOrFunctionDeclaration.parameters;
												if (_v24.$ === 'Just') {
													var parameters = _v24.a;
													return {
														enumTypes: soFarAcrossModulesWithInferredValeAndFunctionDeclarations.declarations.enumTypes,
														fns: A3(
															$miniBill$elm_fast_dict$FastDict$insert,
															rustName,
															{lifetimeParameters: rustValueOrFunctionDeclaration.lifetimeParameters, parameters: parameters, result: rustValueOrFunctionDeclaration.result, resultType: rustValueOrFunctionDeclaration.resultType},
															soFarAcrossModulesWithInferredValeAndFunctionDeclarations.declarations.fns),
														lets: soFarAcrossModulesWithInferredValeAndFunctionDeclarations.declarations.lets,
														typeAliases: soFarAcrossModulesWithInferredValeAndFunctionDeclarations.declarations.typeAliases
													};
												} else {
													return {
														enumTypes: soFarAcrossModulesWithInferredValeAndFunctionDeclarations.declarations.enumTypes,
														fns: soFarAcrossModulesWithInferredValeAndFunctionDeclarations.declarations.fns,
														lets: A3(
															$miniBill$elm_fast_dict$FastDict$insert,
															rustName,
															{
																result: function () {
																	var _v25 = rustValueOrFunctionDeclaration.result;
																	if (_v25.$ === 'RustExpressionAfterStatement') {
																		return $author$project$ElmSyntaxToRust$RustExpressionCall(
																			{
																				_arguments: _List_Nil,
																				called: $author$project$ElmSyntaxToRust$RustExpressionLambda(
																					{parameters: _List_Nil, result: rustValueOrFunctionDeclaration.result})
																			});
																	} else {
																		return rustValueOrFunctionDeclaration.result;
																	}
																}(),
																resultType: rustValueOrFunctionDeclaration.resultType
															},
															soFarAcrossModulesWithInferredValeAndFunctionDeclarations.declarations.lets),
														typeAliases: soFarAcrossModulesWithInferredValeAndFunctionDeclarations.declarations.typeAliases
													};
												}
											}(),
											errors: soFarAcrossModulesWithInferredValeAndFunctionDeclarations.errors
										};
									} else {
										var error = _v23.a;
										return {
											declarations: soFarAcrossModulesWithInferredValeAndFunctionDeclarations.declarations,
											errors: A2($elm$core$List$cons, 'in value/function declaration ' + (moduleName + ('.' + (valueOrFunctionDeclarationInferred.name + (': ' + error)))), soFarAcrossModulesWithInferredValeAndFunctionDeclarations.errors)
										};
									}
								}),
							soFarAcrossModules,
							moduleInferred.declarationsInferred),
						moduleInferred.module_.declarations);
				}),
			{
				declarations: {enumTypes: $miniBill$elm_fast_dict$FastDict$empty, fns: $miniBill$elm_fast_dict$FastDict$empty, lets: $miniBill$elm_fast_dict$FastDict$empty, typeAliases: $miniBill$elm_fast_dict$FastDict$empty},
				errors: _List_Nil
			},
			modulesInferred.inferred);
		return {
			declarations: {
				enumTypes: A2(
					$miniBill$elm_fast_dict$FastDict$union,
					A3(
						$miniBill$elm_fast_dict$FastSet$foldl,
						F2(
							function (elmRecordFields, soFar) {
								_v2$7:
								while (true) {
									if (elmRecordFields.b && elmRecordFields.b.b) {
										if (!elmRecordFields.b.b.b) {
											switch (elmRecordFields.a) {
												case 'caseInsensitive':
													if (elmRecordFields.b.a === 'multiline') {
														var _v5 = elmRecordFields.b;
														return soFar;
													} else {
														break _v2$7;
													}
												case 'offset':
													if (elmRecordFields.b.a === 'start') {
														var _v9 = elmRecordFields.b;
														return soFar;
													} else {
														break _v2$7;
													}
												case 'x':
													if (elmRecordFields.b.a === 'y') {
														var _v10 = elmRecordFields.b;
														return soFar;
													} else {
														break _v2$7;
													}
												default:
													break _v2$7;
											}
										} else {
											if (!elmRecordFields.b.b.b.b) {
												switch (elmRecordFields.a) {
													case 'init':
														if ((elmRecordFields.b.a === 'subscriptions') && (elmRecordFields.b.b.a === 'update')) {
															var _v3 = elmRecordFields.b;
															var _v4 = _v3.b;
															return soFar;
														} else {
															break _v2$7;
														}
													case 'x':
														if ((elmRecordFields.b.a === 'y') && (elmRecordFields.b.b.a === 'z')) {
															var _v11 = elmRecordFields.b;
															var _v12 = _v11.b;
															return soFar;
														} else {
															break _v2$7;
														}
													default:
														break _v2$7;
												}
											} else {
												if (!elmRecordFields.b.b.b.b.b) {
													switch (elmRecordFields.a) {
														case 'index':
															if (((elmRecordFields.b.a === 'match') && (elmRecordFields.b.b.a === 'number')) && (elmRecordFields.b.b.b.a === 'submatches')) {
																var _v6 = elmRecordFields.b;
																var _v7 = _v6.b;
																var _v8 = _v7.b;
																return soFar;
															} else {
																break _v2$7;
															}
														case 'w':
															if (((elmRecordFields.b.a === 'x') && (elmRecordFields.b.b.a === 'y')) && (elmRecordFields.b.b.b.a === 'z')) {
																var _v13 = elmRecordFields.b;
																var _v14 = _v13.b;
																var _v15 = _v14.b;
																return soFar;
															} else {
																break _v2$7;
															}
														default:
															break _v2$7;
													}
												} else {
													break _v2$7;
												}
											}
										}
									} else {
										break _v2$7;
									}
								}
								var elmRecordFieldsNotAlreadyInDefaultDeclarations = elmRecordFields;
								var rustRecordFields = A2($elm$core$List$map, $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords, elmRecordFieldsNotAlreadyInDefaultDeclarations);
								var rustTypeName = $author$project$ElmSyntaxToRust$generatedRecordTypeName(rustRecordFields);
								return soFar;
							}),
						$miniBill$elm_fast_dict$FastDict$empty,
						allElmRecords),
					A2(
						$miniBill$elm_fast_dict$FastDict$map,
						F2(
							function (_v1, enumDeclarationInfo) {
								return {parameters: enumDeclarationInfo.parameters, variants: enumDeclarationInfo.cases};
							}),
						transpiledRustDeclarations.declarations.enumTypes)),
				fns: A2(
					$miniBill$elm_fast_dict$FastDict$map,
					F2(
						function (_v16, valueOrFunctionInfo) {
							return {lifetimeParameters: valueOrFunctionInfo.lifetimeParameters, parameters: valueOrFunctionInfo.parameters, result: valueOrFunctionInfo.result, resultType: valueOrFunctionInfo.resultType};
						}),
					transpiledRustDeclarations.declarations.fns),
				lets: A2(
					$miniBill$elm_fast_dict$FastDict$map,
					F2(
						function (_v17, valueOrFunctionInfo) {
							return {result: valueOrFunctionInfo.result, resultType: valueOrFunctionInfo.resultType};
						}),
					transpiledRustDeclarations.declarations.lets),
				typeAliases: A2(
					$miniBill$elm_fast_dict$FastDict$map,
					F2(
						function (_v18, typeAliasInfo) {
							return {parameters: typeAliasInfo.parameters, type_: typeAliasInfo.type_};
						}),
					transpiledRustDeclarations.declarations.typeAliases)
			},
			errors: _Utils_ap(
				$elm$core$List$reverse(modulesInferred.errors),
				$elm$core$List$reverse(transpiledRustDeclarations.errors))
		};
	}
};
var $miniBill$elm_fast_dict$FastSet$remove = F2(
	function (value, _v0) {
		var set = _v0.a;
		return $miniBill$elm_fast_dict$FastSet$Set(
			A2($miniBill$elm_fast_dict$FastDict$remove, value, set));
	});
var $author$project$ElmSyntaxToRust$defaultDeclarations = '\npub type ResultResult<X, A> = Result<A, X>;\n\npub type StringString<\'a> = &\'a str;\n\n#[derive(Copy, Clone /*, Debug is implemented below */, Eq, PartialEq, Hash, PartialOrd, Ord)]\npub enum ListListGuts<\'a, A> {\n    Empty,\n    Cons(A, ListList<\'a, A>),\n}\npub type ListList<\'a, A> = &\'a ListListGuts<\'a, A>;\n\npub struct ListIterator<\'a, A> {\n    remaining_list: ListList<\'a, A>,\n}\n\nimpl<\'a, A: Copy> Iterator for ListIterator<\'a, A> {\n    type Item = A; // it might be better to return &A\n    fn next(&mut self) -> Option<Self::Item> {\n        match self.remaining_list {\n            &ListListGuts::Empty => Option::None,\n            &ListListGuts::Cons(head, tail) => {\n                self.remaining_list = tail;\n                Option::Some(head)\n            }\n        }\n    }\n}\n\nimpl<\'a, A> ListListGuts<\'a, A> {\n    fn iter(&self) -> ListIterator<\'_, A> {\n        ListIterator {\n            remaining_list: self,\n        }\n    }\n}\nimpl<\'a, A: Copy + std::fmt::Debug> std::fmt::Debug for ListListGuts<\'a, A> {\n    fn fmt(&self, f: &mut std::fmt::Formatter<\'_>) -> std::fmt::Result {\n        f.write_str("List[")?;\n        let mut is_tail_element: bool = false;\n        for element in self.iter() {\n            if is_tail_element {\n                f.write_str(", ")?;\n            } else {\n                is_tail_element = true;\n            }\n            element.fmt(f)?;\n        }\n        f.write_str("]")\n    }\n}\n\n#[derive(Copy, Clone, Debug, Eq, PartialEq)]\npub enum Never {}\n\npub fn basics_identity<A>(a: A) -> A {\n    a\n}\npub fn basics_always<Kept, Ignored>(kept: Kept, _: Ignored) -> Kept {\n    kept\n}\npub fn basics_apr<A, B, AToB: Fn(A) -> B>(food: A, eat: AToB) -> B {\n    eat(food)\n}\npub fn basics_apl<A, B, AToB: Fn(A) -> B>(eat: AToB, food: A) -> B {\n    eat(food)\n}\npub fn basics_composer<A, B, C, AToB: Fn(A) -> B, BToC: Fn(B) -> C>(\n    earlier: AToB,\n    later: BToC,\n) -> impl Fn(A) -> C {\n    move |food| later(earlier(food))\n}\npub fn basics_composel<A, B, C, AToB: Fn(A) -> B, BToC: Fn(B) -> C>(\n    later: BToC,\n    earlier: AToB,\n) -> impl Fn(A) -> C {\n    move |food| later(earlier(food))\n}\npub fn basics_eq<A: PartialEq>(a: A, b: A) -> bool {\n    a == b\n}\npub fn basics_neq<A: PartialEq>(a: A, b: A) -> bool {\n    a != b\n}\npub fn basics_lt<A: PartialOrd>(a: A, b: A) -> bool {\n    a < b\n}\npub fn basics_le<A: PartialOrd>(a: A, b: A) -> bool {\n    a <= b\n}\npub fn basics_gt<A: PartialOrd>(a: A, b: A) -> bool {\n    a > b\n}\npub fn basics_ge<A: PartialOrd>(a: A, b: A) -> bool {\n    a >= b\n}\npub fn basics_max<A: PartialOrd>(a: A, b: A) -> A {\n    // std::cmp::max(a, b) requires Ord (which f64 and others are not)\n    if a > b { a } else { b }\n}\npub fn basics_min<A: PartialOrd>(a: A, b: A) -> A {\n    // std::cmp::max(a, b) requires Ord (which f64 and others are not)\n    if a < b { a } else { b }\n}\npub fn basics_compare<A: PartialOrd>(a: A, b: A) -> std::cmp::Ordering {\n    match a.partial_cmp(&b) {\n        Option::None => std::cmp::Ordering::Greater,\n        Option::Some(order) => order,\n    }\n}\n\npub fn basics_and(a: bool, b: bool) -> bool {\n    a && b\n}\npub fn basics_or(a: bool, b: bool) -> bool {\n    a || b\n}\npub fn basics_xor(a: bool, b: bool) -> bool {\n    a ^ b\n}\npub fn basics_not(bool: bool) -> bool {\n    !bool\n}\n\npub fn basics_clamp(min: f64, max: f64, n: f64) -> f64 {\n    n.clamp(min, max)\n}\npub fn basics_log_base(base: f64, n: f64) -> f64 {\n    n.log(base)\n}\npub fn basics_add(a: f64, b: f64) -> f64 {\n    a + b\n}\npub fn basics_sub(base: f64, reduction: f64) -> f64 {\n    base - reduction\n}\npub fn basics_mul(a: f64, b: f64) -> f64 {\n    a * b\n}\npub fn basics_fdiv(base: f64, by: f64) -> f64 {\n    base / by\n}\npub fn basics_idiv(base: f64, by: f64) -> f64 {\n    (base / by).trunc()\n}\npub fn basics_pow(base: f64, by: f64) -> f64 {\n    base.powf(by)\n}\npub fn basics_remainder_by(by: f64, base: f64) -> f64 {\n    std::ops::Rem::rem(base, by)\n}\npub fn basics_mod_by(by: f64, base: f64) -> f64 {\n    // https://github.com/elm/core/blob/1.0.5/src/Elm/Kernel/Basics.js#L20\n    // https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf\n    if by == 0_f64 {\n        panic!("mod by 0")\n    } else {\n        let remainder: f64 = std::ops::Rem::rem(base, by);\n        if (remainder > 0_f64 && by < 0_f64) || (remainder < 0_f64 && by > 0_f64) {\n            remainder + by\n        } else {\n            remainder\n        }\n    }\n}\npub fn basics_degrees(degrees: f64) -> f64 {\n    degrees.to_radians()\n}\npub fn basics_turns(turns: f64) -> f64 {\n    turns * 2_f64 * std::f64::consts::PI\n}\npub fn basics_to_polar((x, y): (f64, f64)) -> (f64, f64) {\n    (f64::sqrt((x * x) + (y * y)), f64::atan2(y, x))\n}\npub fn basics_from_polar((radius, theta): (f64, f64)) -> (f64, f64) {\n    (radius * (f64::cos(theta)), radius * (f64::sin(theta)))\n}\n\npub fn basics_never<A>(never: Never) -> A {\n    match never {}\n}\n\npub fn list_is_empty<A: Copy>(list: ListList<A>) -> bool {\n    match list {\n        &ListListGuts::Empty => true,\n        &ListListGuts::Cons(_, _) => false,\n    }\n}\npub fn list_head<A: Copy>(list: ListList<A>) -> Option<A> {\n    match list {\n        &ListListGuts::Empty => Option::None,\n        &ListListGuts::Cons(head, _) => Option::Some(head),\n    }\n}\npub fn list_tail<A: Copy>(list: ListList<A>) -> Option<ListList<A>> {\n    match list {\n        &ListListGuts::Empty => Option::None,\n        &ListListGuts::Cons(_, tail) => Option::Some(tail),\n    }\n}\npub fn list_cons<\'a, A>(allocator: &\'a Bump, head: A, tail: ListList<\'a, A>) -> ListList<\'a, A> {\n    allocator.alloc(ListListGuts::Cons(head, tail))\n}\npub fn list_singleton<\'a, A>(allocator: &\'a Bump, only_element: A) -> ListList<\'a, A> {\n    list_cons(allocator, only_element, &ListListGuts::Empty)\n}\npub fn list_repeat<\'a, A: Copy>(allocator: &\'a Bump, count: f64, element: A) -> ListList<\'a, A> {\n    double_ended_iterator_to_list(allocator, std::iter::repeat_n(element, count as usize))\n}\npub fn list_range<\'a>(allocator: &\'a Bump, min: f64, max: f64) -> ListList<\'a, f64> {\n    double_ended_iterator_to_list(allocator, ((min as i32)..=(max as i32)).map(|n| n as f64))\n}\npub fn double_ended_iterator_to_list<\'a, A: Copy, AIterator: DoubleEndedIterator<Item = A>>(\n    allocator: &\'a Bump,\n    iterator: AIterator,\n) -> ListList<\'a, A> {\n    let mut list_so_far: ListList<A> = &ListListGuts::Empty;\n    for element in iterator.rev() {\n        list_so_far = list_cons(allocator, element, list_so_far)\n    }\n    list_so_far\n}\n\npub fn list_length<A: Copy>(list: ListList<A>) -> f64 {\n    list.iter().count() as f64\n}\npub fn list_sum(list: ListList<f64>) -> f64 {\n    list.iter().sum()\n}\npub fn list_product(list: ListList<f64>) -> f64 {\n    list.iter().product()\n}\npub fn list_all<A: Copy, IsExpected: Fn(A) -> bool>(\n    is_expected: IsExpected,\n    list: ListList<A>,\n) -> bool {\n    list.iter().all(is_expected)\n}\npub fn list_any<A: Copy, IsNeedle: Fn(A) -> bool>(is_needle: IsNeedle, list: ListList<A>) -> bool {\n    list.iter().any(is_needle)\n}\npub fn list_member<A: Copy + Eq>(needle: A, list: ListList<A>) -> bool {\n    list.iter().any(|el| el == needle)\n}\npub fn list_minimum<A: Copy + PartialOrd>(list: ListList<A>) -> Option<A> {\n    list.iter().min_by(|&l, &r| basics_compare(l, r))\n}\npub fn list_maximum<A: Copy + PartialOrd>(list: ListList<A>) -> Option<A> {\n    list.iter().max_by(|&l, &r| basics_compare(l, r))\n}\npub fn list_take<\'a, A: Copy>(\n    allocator: &\'a Bump,\n    keep_count: f64,\n    list: ListList<A>,\n) -> ListList<\'a, A> {\n    iterator_to_list(allocator, list.iter().take(keep_count as usize))\n}\n/// prefer `double_ended_iterator_to_list` where possible\npub fn iterator_to_list<\'a, A: Copy, AIterator: Iterator<Item = A>>(\n    allocator: &\'a Bump,\n    iterator: AIterator,\n) -> ListList<\'a, A> {\n    double_ended_iterator_to_list(allocator, iterator.collect::<Vec<A>>().into_iter())\n}\npub fn list_drop<\'a, A: Copy>(skip_count: f64, list: ListList<\'a, A>) -> ListList<\'a, A> {\n    let mut iterator = list.iter();\n    for () in std::iter::repeat_n((), skip_count as usize) {\n        match iterator.next() {\n            None => return &ListListGuts::Empty,\n            Some(_) => {}\n        }\n    }\n    iterator.remaining_list\n}\npub fn list_intersperse<\'a, A: Copy>(\n    allocator: &\'a Bump,\n    in_between: A,\n    list: ListList<A>,\n) -> ListList<\'a, A> {\n    match list {\n        &ListListGuts::Empty => &ListListGuts::Empty,\n        &ListListGuts::Cons(head, tail) => list_cons(\n            allocator,\n            head,\n            iterator_to_list(\n                allocator,\n                tail.iter().flat_map(|tail_element| {\n                    std::iter::once(in_between).chain(std::iter::once(tail_element))\n                }),\n            ),\n        ),\n    }\n}\npub fn list_concat<\'a, A: Copy>(\n    allocator: &\'a Bump,\n    list: ListList<ListList<A>>,\n) -> ListList<\'a, A> {\n    iterator_to_list(allocator, list.iter().flat_map(|inner| inner.iter()))\n}\npub fn list_concat_map<\'a, A: Copy, B: Copy, ElementToList: Fn(A) -> ListList<\'a, B>>(\n    allocator: &\'a Bump,\n    element_to_list: ElementToList,\n    list: ListList<A>,\n) -> ListList<\'a, B> {\n    iterator_to_list(\n        allocator,\n        list.iter().flat_map(|inner| element_to_list(inner).iter()),\n    )\n}\npub fn list_foldl<A: Copy, State, Reduce: Fn(A) -> Reduce1, Reduce1: Fn(State) -> State>(\n    reduce: Reduce,\n    initial_state: State,\n    list: ListList<A>,\n) -> State {\n    list.iter()\n        .fold(initial_state, |state, element| reduce(element)(state))\n}\npub fn list_foldr<A: Copy, State, Reduce: Fn(A) -> Reduce1, Reduce1: Fn(State) -> State>(\n    reduce: Reduce,\n    initial_state: State,\n    list: ListList<A>,\n) -> State {\n    list.iter()\n        .collect::<Vec<A>>()\n        .iter()\n        .rev()\n        .fold(initial_state, |state, &element| reduce(element)(state))\n}\n\npub fn list_reverse<\'a, A: Copy>(allocator: &\'a Bump, list: ListList<A>) -> ListList<\'a, A> {\n    let mut reverse_list: ListList<A> = &ListListGuts::Empty;\n    for new_head in list.iter() {\n        reverse_list = list_cons(allocator, new_head, reverse_list)\n    }\n    reverse_list\n}\npub fn list_filter<\'a, A: Copy, Keep: Fn(A) -> bool>(\n    allocator: &\'a Bump,\n    keep: Keep,\n    list: ListList<A>,\n) -> ListList<\'a, A> {\n    // can be optimized by just returning list when all elements were kept\n    iterator_to_list(allocator, list.iter().filter(|&element| keep(element)))\n}\npub fn list_map<\'a, A: Copy, B: Copy, ElementChange: Fn(A) -> B>(\n    allocator: &\'a Bump,\n    element_change: ElementChange,\n    list: ListList<A>,\n) -> ListList<\'a, B> {\n    iterator_to_list(allocator, list.iter().map(element_change))\n}\npub fn list_indexed_map<\n    \'a,\n    A: Copy,\n    B: Copy,\n    IndexedElementToNew: Fn(f64) -> IndexedElementToNew1,\n    IndexedElementToNew1: Fn(A) -> B,\n>(\n    allocator: &\'a Bump,\n    indexed_element_to_new: IndexedElementToNew,\n    list: ListList<A>,\n) -> ListList<\'a, B> {\n    iterator_to_list(\n        allocator,\n        list.iter()\n            .enumerate()\n            .map(|(index, element)| indexed_element_to_new(index as f64)(element)),\n    )\n}\npub fn list_filter_map<\'a, A: Copy, B: Copy, ElementToMaybe: Fn(A) -> Option<B>>(\n    allocator: &\'a Bump,\n    element_to_maybe: ElementToMaybe,\n    list: ListList<\'a, A>,\n) -> ListList<\'a, B> {\n    iterator_to_list(allocator, list.iter().filter_map(element_to_maybe))\n}\npub fn list_sort<\'a, A: Copy + PartialOrd>(\n    allocator: &\'a Bump,\n    list: ListList<A>,\n) -> ListList<\'a, A> {\n    let mut list_copy_as_vec: Vec<A> = list.iter().collect();\n    list_copy_as_vec.sort_by(|&a, &b| basics_compare(a, b));\n    array_to_list(allocator, &list_copy_as_vec)\n}\npub fn list_sort_by<\'a, A: Copy, B: PartialOrd, ElementToComparable: Fn(A) -> B>(\n    allocator: &\'a Bump,\n    element_to_comparable: ElementToComparable,\n    list: ListList<\'a, A>,\n) -> ListList<\'a, A> {\n    let mut list_copy_as_vec: Vec<A> = list.iter().collect();\n    list_copy_as_vec\n        .sort_by(|&a, &b| basics_compare(element_to_comparable(a), element_to_comparable(b)));\n    array_to_list(allocator, &list_copy_as_vec)\n}\npub fn list_sort_with<\n    \'a,\n    A: Copy,\n    ElementCompare: Fn(A) -> ElementCompare1,\n    ElementCompare1: Fn(A) -> std::cmp::Ordering,\n>(\n    allocator: &\'a Bump,\n    element_compare: ElementCompare,\n    list: ListList<\'a, A>,\n) -> ListList<\'a, A> {\n    let mut list_copy_as_vec: Vec<A> = list.iter().collect();\n    list_copy_as_vec.sort_by(|&a, &b| element_compare(a)(b));\n    array_to_list(allocator, &list_copy_as_vec)\n}\npub fn list_append<\'a, A: Copy>(\n    allocator: &\'a Bump,\n    left: ListList<A>,\n    right: ListList<\'a, A>,\n) -> ListList<\'a, A> {\n    // can be optimized\n    let mut combined_list: ListList<A> = right;\n    for next_right_last_element in left.iter().collect::<Vec<A>>().into_iter().rev() {\n        combined_list = list_cons(allocator, next_right_last_element, combined_list)\n    }\n    combined_list\n}\npub fn list_unzip<\'a, A: Copy, B: Copy>(\n    allocator: &\'a Bump,\n    list: ListList<(A, B)>,\n) -> (ListList<\'a, A>, ListList<\'a, B>) {\n    let mut a_list: ListList<A> = &ListListGuts::Empty;\n    let mut b_list: ListList<B> = &ListListGuts::Empty;\n    for (next_last_a, next_last_b) in list.iter().collect::<Vec<(A, B)>>().into_iter().rev() {\n        a_list = list_cons(allocator, next_last_a, a_list);\n        b_list = list_cons(allocator, next_last_b, b_list)\n    }\n    (a_list, b_list)\n}\npub fn list_partition<\'a, A: Copy, Decode: Fn(A) -> bool>(\n    allocator: &\'a Bump,\n    decode: Decode,\n    list: ListList<A>,\n) -> (ListList<\'a, A>, ListList<\'a, A>) {\n    let (yes, no): (Vec<A>, Vec<A>) = list.iter().partition(|&element| decode(element));\n    (\n        iterator_to_list(allocator, yes.into_iter()),\n        iterator_to_list(allocator, no.into_iter()),\n    )\n}\npub fn list_zip<\'a, A: Copy, B: Copy>(\n    allocator: &\'a Bump,\n    a_list: ListList<A>,\n    b_list: ListList<B>,\n) -> ListList<\'a, (A, B)> {\n    iterator_to_list(allocator, std::iter::zip(a_list.iter(), b_list.iter()))\n}\npub fn list_map2<\n    \'a,\n    A: Copy,\n    B: Copy,\n    Combined: Copy,\n    Combine: Fn(A) -> Combine1,\n    Combine1: Fn(B) -> Combined,\n>(\n    allocator: &\'a Bump,\n    combine: Combine,\n    a_list: ListList<A>,\n    b_list: ListList<B>,\n) -> ListList<\'a, Combined> {\n    iterator_to_list(\n        allocator,\n        std::iter::zip(a_list.iter(), b_list.iter()).map(|(a, b)| combine(a)(b)),\n    )\n}\npub fn list_map3<\n    \'a,\n    A: Copy,\n    B: Copy,\n    C: Copy,\n    Combined: Copy,\n    Combine: Fn(A) -> Combine1,\n    Combine1: Fn(B) -> Combine2,\n    Combine2: Fn(C) -> Combined,\n>(\n    allocator: &\'a Bump,\n    combine: Combine,\n    a_list: ListList<A>,\n    b_list: ListList<B>,\n    c_list: ListList<C>,\n) -> ListList<\'a, Combined> {\n    iterator_to_list(\n        allocator,\n        a_list\n            .iter()\n            .zip(b_list.iter())\n            .zip(c_list.iter())\n            .map(|((a, b), c)| combine(a)(b)(c)),\n    )\n}\npub fn list_map4<\n    \'a,\n    A: Copy,\n    B: Copy,\n    C: Copy,\n    D: Copy,\n    Combined: Copy,\n    Combine: Fn(A) -> Combine1,\n    Combine1: Fn(B) -> Combine2,\n    Combine2: Fn(C) -> Combine3,\n    Combine3: Fn(D) -> Combined,\n>(\n    allocator: &\'a Bump,\n    combine: Combine,\n    a_list: ListList<A>,\n    b_list: ListList<B>,\n    c_list: ListList<C>,\n    d_list: ListList<D>,\n) -> ListList<\'a, Combined> {\n    iterator_to_list(\n        allocator,\n        a_list\n            .iter()\n            .zip(b_list.iter())\n            .zip(c_list.iter())\n            .zip(d_list.iter())\n            .map(|(((a, b), c), d)| combine(a)(b)(c)(d)),\n    )\n}\npub fn list_map5<\n    \'a,\n    A: Copy,\n    B: Copy,\n    C: Copy,\n    D: Copy,\n    E: Copy,\n    Combined: Copy,\n    Combine: Fn(A) -> Combine1,\n    Combine1: Fn(B) -> Combine2,\n    Combine2: Fn(C) -> Combine3,\n    Combine3: Fn(D) -> Combine4,\n    Combine4: Fn(E) -> Combined,\n>(\n    allocator: &\'a Bump,\n    combine: Combine,\n    a_list: ListList<A>,\n    b_list: ListList<B>,\n    c_list: ListList<C>,\n    d_list: ListList<D>,\n    e_list: ListList<E>,\n) -> ListList<\'a, Combined> {\n    iterator_to_list(\n        allocator,\n        a_list\n            .iter()\n            .zip(b_list.iter())\n            .zip(c_list.iter())\n            .zip(d_list.iter())\n            .zip(e_list.iter())\n            .map(|((((a, b), c), d), e)| combine(a)(b)(c)(d)(e)),\n    )\n}\n\npub type ArrayArray<\'a, A> = &\'a [A];\n\npub fn array_empty<\'a, A>() -> ArrayArray<\'a, A> {\n    &[]\n}\npub fn array_singleton<A>(allocator: &Bump, only_element: A) -> ArrayArray<A> {\n    allocator.alloc([only_element])\n}\npub fn array_repeat<\'a, A: Copy>(\n    allocator: &\'a Bump,\n    length: f64,\n    element: A,\n) -> ArrayArray<\'a, A> {\n    allocator.alloc(std::vec::from_elem(element, length as usize))\n}\npub fn array_initialize<\'a, A, IndexToElement: Fn(f64) -> A>(\n    allocator: &\'a Bump,\n    length: f64,\n    index_to_element: IndexToElement,\n) -> ArrayArray<\'a, A> {\n    allocator.alloc(\n        (0..(length as i64))\n            .map(|i| index_to_element(i as f64))\n            .collect::<Vec<A>>(),\n    )\n}\npub fn array_is_empty<A>(array: ArrayArray<A>) -> bool {\n    array.is_empty()\n}\npub fn array_length<A>(array: ArrayArray<A>) -> f64 {\n    array.len() as f64\n}\npub fn array_get<A: Copy>(index: f64, array: ArrayArray<A>) -> Option<A> {\n    array.get(index as usize).map(|&element| element)\n}\npub fn array_push<\'a, A: Copy>(\n    allocator: &\'a Bump,\n    new_last_element: A,\n    array: ArrayArray<A>,\n) -> ArrayArray<\'a, A> {\n    let mut array_as_vec: Vec<A> = array.to_vec();\n    array_as_vec.push(new_last_element);\n    allocator.alloc(array_as_vec)\n}\npub fn array_set<\'a, A: Copy>(\n    allocator: &\'a Bump,\n    index: f64,\n    new_element: A,\n    array: ArrayArray<\'a, A>,\n) -> ArrayArray<\'a, A> {\n    if index < 0_f64 {\n        array\n    } else {\n        let index_usize: usize = index as usize;\n        if index_usize > array.len() {\n            array\n        } else {\n            let mut array_as_vec: Vec<A> = array.to_vec();\n            if index_usize == array.len() {\n                array_as_vec.push(new_element)\n            } else {\n                array_as_vec[index as usize] = new_element;\n            }\n            allocator.alloc(array_as_vec)\n        }\n    }\n}\npub fn array_slice<\'a, A>(\n    start_inclusive_possibly_negative: f64,\n    end_exclusive_possibly_negative: f64,\n    array: ArrayArray<\'a, A>,\n) -> ArrayArray<\'a, A> {\n    let start_inclusive: usize =\n        index_from_end_if_negative(start_inclusive_possibly_negative, array.len());\n    let end_exclusive: usize =\n        index_from_end_if_negative(end_exclusive_possibly_negative, array.len());\n    if end_exclusive <= start_inclusive {\n        &[]\n    } else {\n        &array[start_inclusive..end_exclusive]\n    }\n}\n/// For an index where -1 meaning one before the last element, 1 meaning one after the first element,\n/// normalize to valid index from the start (or the index _after_ the last valid index)\nfn index_from_end_if_negative(index_possibly_negative: f64, full_length: usize) -> usize {\n    if index_possibly_negative >= 0_f64 {\n        (index_possibly_negative.max(0_f64) as usize).min(full_length)\n    } else {\n        ((full_length as f64 + index_possibly_negative).max(0_f64) as usize).min(full_length)\n    }\n}\npub fn array_from_list<\'a, A: Copy>(allocator: &\'a Bump, list: ListList<A>) -> ArrayArray<\'a, A> {\n    allocator.alloc(list.iter().collect::<Vec<A>>())\n}\n\npub fn array_reverse<\'a, A: Copy>(allocator: &\'a Bump, array: ArrayArray<A>) -> ArrayArray<\'a, A> {\n    let mut array_copy: Vec<A> = array.to_vec();\n    array_copy.reverse();\n    allocator.alloc(array_copy)\n}\npub fn array_filter<\'a, A: Copy, Keep: Fn(A) -> bool>(\n    allocator: &\'a Bump,\n    keep: Keep,\n    array: ArrayArray<\'a, A>,\n) -> ArrayArray<\'a, A> {\n    allocator.alloc(\n        array\n            .iter()\n            .map(|&element| element)\n            .filter(|&element| keep(element))\n            .collect::<Vec<A>>(),\n    )\n}\npub fn array_map<\'a, A: Copy, B, ElementChange: Fn(A) -> B>(\n    allocator: &\'a Bump,\n    element_change: ElementChange,\n    array: ArrayArray<\'a, A>,\n) -> ArrayArray<\'a, B> {\n    allocator.alloc(\n        array\n            .iter()\n            .map(|&element| element_change(element))\n            .collect::<Vec<B>>(),\n    )\n}\npub fn array_indexed_map<\n    \'a,\n    A: Copy,\n    B,\n    IndexedElementToNew: Fn(f64) -> IndexedElementToNew1,\n    IndexedElementToNew1: Fn(A) -> B,\n>(\n    allocator: &\'a Bump,\n    element_change: IndexedElementToNew,\n    array: ArrayArray<\'a, A>,\n) -> ArrayArray<\'a, B> {\n    allocator.alloc(\n        array\n            .iter()\n            .enumerate()\n            .map(|(index, &element)| element_change(index as f64)(element))\n            .collect::<Vec<B>>(),\n    )\n}\npub fn array_sort<\'a, A: Copy + PartialOrd>(\n    allocator: &\'a Bump,\n    array: ArrayArray<A>,\n) -> ArrayArray<\'a, A> {\n    let mut array_copy: Vec<A> = array.to_vec();\n    array_copy.sort_by(|&a, &b| basics_compare(a, b));\n    allocator.alloc(array_copy)\n}\npub fn array_sort_by<\'a, A: Copy, B: PartialOrd, ElementToComparable: Fn(A) -> B>(\n    allocator: &\'a Bump,\n    element_to_comparable: ElementToComparable,\n    array: ArrayArray<\'a, A>,\n) -> ArrayArray<\'a, A> {\n    let mut array_copy: Vec<A> = array.to_vec();\n    array_copy.sort_by(|&a, &b| basics_compare(element_to_comparable(a), element_to_comparable(b)));\n    allocator.alloc(array_copy)\n}\npub fn array_sort_with<\n    \'a,\n    A: Copy,\n    ElementCompare: Fn(A) -> ElementCompare1,\n    ElementCompare1: Fn(A) -> std::cmp::Ordering,\n>(\n    allocator: &\'a Bump,\n    element_compare: ElementCompare,\n    array: ArrayArray<\'a, A>,\n) -> ArrayArray<\'a, A> {\n    let mut array_copy: Vec<A> = array.to_vec();\n    array_copy.sort_by(|&a, &b| element_compare(a)(b));\n    allocator.alloc(array_copy)\n}\n\npub fn array_to_list<\'a, A: Copy>(allocator: &\'a Bump, array: ArrayArray<A>) -> ListList<\'a, A> {\n    double_ended_iterator_to_list(allocator, array.iter().map(|&e| e))\n}\npub fn array_to_indexed_list<\'a, A: Copy>(\n    allocator: &\'a Bump,\n    array: ArrayArray<A>,\n) -> ListList<\'a, (f64, A)> {\n    double_ended_iterator_to_list(\n        allocator,\n        array\n            .iter()\n            .enumerate()\n            .map(|(index, &element)| (index as f64, element)),\n    )\n}\npub fn array_foldl<\'a, A: Copy, State, Reduce: Fn(A) -> Reduce1, Reduce1: Fn(State) -> State>(\n    reduce: Reduce,\n    initial_state: State,\n    array: ArrayArray<\'a, A>,\n) -> State {\n    array\n        .iter()\n        .fold(initial_state, |state, &element| reduce(element)(state))\n}\npub fn array_foldr<\'a, A: Copy, State, Reduce: Fn(A) -> Reduce1, Reduce1: Fn(State) -> State>(\n    reduce: Reduce,\n    initial_state: State,\n    array: ArrayArray<\'a, A>,\n) -> State {\n    array\n        .iter()\n        .rev()\n        .fold(initial_state, |state, &element| reduce(element)(state))\n}\n\nfn array_append<\'a, A: Copy>(\n    allocator: &\'a Bump,\n    left: ArrayArray<A>,\n    right: ArrayArray<A>,\n) -> ArrayArray<\'a, A> {\n    let mut left_as_vec: Vec<A> = left.to_vec();\n    left_as_vec.extend_from_slice(right);\n    allocator.alloc(left_as_vec)\n}\n\npub fn char_is_upper(char: char) -> bool {\n    char.is_ascii_uppercase()\n}\npub fn char_is_lower(char: char) -> bool {\n    char.is_ascii_lowercase()\n}\npub fn char_is_alpha(char: char) -> bool {\n    char.is_ascii_alphabetic()\n}\npub fn char_is_alpha_num(char: char) -> bool {\n    char.is_ascii_alphanumeric()\n}\npub fn char_is_digit(char: char) -> bool {\n    char.is_ascii_digit()\n}\npub fn char_is_hex_digit(char: char) -> bool {\n    char.is_ascii_hexdigit()\n}\npub fn char_is_oct_digit(char: char) -> bool {\n    match char {\n        \'0\'..=\'7\' => true,\n        _ => false,\n    }\n}\npub fn char_to_upper(char: char) -> char {\n    match char.to_uppercase().next() {\n        None => char,\n        Some(approximate_uppercase) => approximate_uppercase,\n    }\n}\npub fn char_to_lower(char: char) -> char {\n    match char.to_lowercase().next() {\n        None => char,\n        Some(approximate_lowercase) => approximate_lowercase,\n    }\n}\npub fn char_to_code(char: char) -> f64 {\n    char as u32 as f64\n}\npub fn char_from_code(code: f64) -> char {\n    char::from_u32(code as u32).unwrap_or(\'\\0\')\n}\n\npub fn string_is_empty(string: StringString) -> bool {\n    string.is_empty()\n}\npub fn string_length(string: StringString) -> f64 {\n    string.chars().count() as f64\n}\npub fn string_from_int<\'a>(allocator: &\'a Bump, int: f64) -> StringString<\'a> {\n    allocator.alloc((int as i64).to_string())\n}\npub fn string_from_float<\'a>(allocator: &\'a Bump, float: f64) -> StringString<\'a> {\n    allocator.alloc(float.to_string())\n}\npub fn string_from_char<\'a>(allocator: &\'a Bump, char: char) -> StringString<\'a> {\n    allocator.alloc(char.to_string())\n}\npub fn string_repeat<\'a>(\n    allocator: &\'a Bump,\n    length: f64,\n    segment: StringString,\n) -> StringString<\'a> {\n    if length <= 0_f64 {\n        &""\n    } else {\n        allocator.alloc(segment.repeat(length as usize))\n    }\n}\npub fn string_cons<\'a>(\n    allocator: &\'a Bump,\n    new_first_char: char,\n    tail_string: StringString,\n) -> StringString<\'a> {\n    let mut tail_string_copy: String = tail_string.to_owned();\n    tail_string_copy.insert(0, new_first_char);\n    allocator.alloc(tail_string_copy)\n}\npub fn string_all<IsExpected: Fn(char) -> bool>(\n    is_expected: IsExpected,\n    string: StringString,\n) -> bool {\n    string.chars().all(is_expected)\n}\npub fn string_any<IsNeedle: Fn(char) -> bool>(is_needle: IsNeedle, string: StringString) -> bool {\n    string.chars().any(is_needle)\n}\npub fn string_filter<\'a, Keep: Fn(char) -> bool>(\n    allocator: &\'a Bump,\n    keep: Keep,\n    string: StringString,\n) -> StringString<\'a> {\n    allocator.alloc(\n        string\n            .chars()\n            .filter(|&element| keep(element))\n            .collect::<String>(),\n    )\n}\npub fn string_map<\'a, ElementChange: Fn(char) -> char>(\n    allocator: &\'a Bump,\n    element_change: ElementChange,\n    string: StringString,\n) -> StringString<\'a> {\n    allocator.alloc(string.chars().map(element_change).collect::<String>())\n}\npub fn string_foldl<State, Reduce: Fn(char) -> Reduce1, Reduce1: Fn(State) -> State>(\n    reduce: Reduce,\n    initial_state: State,\n    string: StringString,\n) -> State {\n    string\n        .chars()\n        .fold(initial_state, |state, element| reduce(element)(state))\n}\npub fn string_foldr<State, Reduce: Fn(char) -> Reduce1, Reduce1: Fn(State) -> State>(\n    reduce: Reduce,\n    initial_state: State,\n    string: StringString,\n) -> State {\n    string\n        .chars()\n        .rev()\n        .fold(initial_state, |state, element| reduce(element)(state))\n}\npub fn string_to_list<\'a>(allocator: &\'a Bump, string: StringString) -> ListList<\'a, char> {\n    double_ended_iterator_to_list(allocator, string.chars())\n}\npub fn string_from_list<\'a>(allocator: &\'a Bump, list: ListList<char>) -> StringString<\'a> {\n    allocator.alloc(list.iter().collect::<String>())\n}\npub fn string_reverse<\'a>(allocator: &\'a Bump, string: StringString) -> StringString<\'a> {\n    allocator.alloc(string.chars().rev().collect::<String>())\n}\npub fn string_uncons<\'a>(string: StringString<\'a>) -> Option<(char, StringString<\'a>)> {\n    let mut string_chars_iterator: std::str::Chars = string.chars();\n    match string_chars_iterator.next() {\n        Option::None => Option::None,\n        Option::Some(head_char) => Option::Some((head_char, string_chars_iterator.as_str())),\n    }\n}\n\npub fn string_left(taken_count: f64, string: StringString) -> StringString {\n    if taken_count <= 0_f64 {\n        &""\n    } else {\n        match string.char_indices().nth(taken_count as usize) {\n            Option::None => string,\n            Option::Some((end_exclusive, _)) => &string[..end_exclusive],\n        }\n    }\n}\npub fn string_drop_left(skipped_count: f64, string: StringString) -> StringString {\n    if skipped_count <= 0_f64 {\n        string\n    } else {\n        match string.char_indices().nth(skipped_count as usize) {\n            Option::None => &"",\n            Option::Some((start, _)) => &string[start..],\n        }\n    }\n}\npub fn string_right(taken_count: f64, string: StringString) -> StringString {\n    if taken_count <= 0_f64 {\n        &""\n    } else {\n        match string\n            .char_indices()\n            .nth_back((taken_count - 1_f64) as usize)\n        {\n            Option::None => string,\n            Option::Some((start, _)) => &string[start..],\n        }\n    }\n}\npub fn string_drop_right(skipped_count: f64, string: StringString) -> StringString {\n    if skipped_count <= 0_f64 {\n        string\n    } else {\n        match string\n            .char_indices()\n            .nth_back((skipped_count - 1_f64) as usize)\n        {\n            Option::None => &"",\n            Option::Some((end_exclusive, _)) => &string[..end_exclusive],\n        }\n    }\n}\npub fn string_slice<\'a>(\n    start_inclusive_possibly_negative: f64,\n    end_exclusive_possibly_negative: f64,\n    string: StringString<\'a>,\n) -> StringString<\'a> {\n    let start_inclusive_or_none_if_too_big: Option<usize> =\n        normalize_string_slice_index_from_end_if_negative(\n            start_inclusive_possibly_negative,\n            string,\n        );\n    match start_inclusive_or_none_if_too_big {\n        Option::None => &"",\n        Option::Some(start_inclusive) => {\n            let end_exclusive_or_none_if_too_big: Option<usize> =\n                normalize_string_slice_index_from_end_if_negative(\n                    end_exclusive_possibly_negative,\n                    string,\n                );\n            match end_exclusive_or_none_if_too_big {\n                Option::None => &string[start_inclusive..],\n                Option::Some(end_exclusive) => {\n                    if end_exclusive <= start_inclusive {\n                        &""\n                    } else {\n                        &string[start_inclusive..end_exclusive]\n                    }\n                }\n            }\n        }\n    }\n}\n/// Option::None means too big\nfn normalize_string_slice_index_from_end_if_negative(\n    elm_index: f64,\n    string: StringString,\n) -> Option<usize> {\n    if elm_index >= 0_f64 {\n        match string.char_indices().nth(elm_index as usize) {\n            Option::None => Option::None,\n            Option::Some((end_inclusive, _)) => Option::Some(end_inclusive),\n        }\n    } else {\n        match string\n            .char_indices()\n            .nth_back((elm_index.abs() - 1_f64) as usize)\n        {\n            Option::None => Option::Some(0),\n            Option::Some((end_inclusive, _)) => Option::Some(end_inclusive),\n        }\n    }\n}\npub fn string_replace<\'a>(\n    allocator: &\'a Bump,\n    from: StringString,\n    to: StringString,\n    string: StringString<\'a>,\n) -> StringString<\'a> {\n    allocator.alloc(string.replace(from, to))\n}\npub fn string_append<\'a>(\n    allocator: &\'a Bump,\n    left: StringString,\n    right: StringString,\n) -> StringString<\'a> {\n    allocator.alloc(left.to_owned() + right)\n}\npub fn string_concat<\'a>(\n    allocator: &\'a Bump,\n    segments: ListList<StringString>,\n) -> StringString<\'a> {\n    let mut string_builder = String::new();\n    for segment in segments.iter() {\n        string_builder.push_str(segment);\n    }\n    allocator.alloc(string_builder)\n}\npub fn string_join<\'a>(\n    allocator: &\'a Bump,\n    in_between: StringString,\n    segments: ListList<StringString>,\n) -> StringString<\'a> {\n    match segments {\n        &ListListGuts::Empty => &"",\n        &ListListGuts::Cons(head_segment, tail_segments) => {\n            let mut string_builder = head_segment.to_owned();\n            for segment in tail_segments.iter() {\n                string_builder.push_str(in_between);\n                string_builder.push_str(segment);\n            }\n            allocator.alloc(string_builder)\n        }\n    }\n}\npub fn string_split<\'a>(\n    allocator: &\'a Bump,\n    separator: StringString,\n    string: StringString<\'a>,\n) -> ListList<\'a, StringString<\'a>> {\n    iterator_to_list(allocator, string.split(separator))\n}\npub fn string_words<\'a>(\n    allocator: &\'a Bump,\n    string: StringString<\'a>,\n) -> ListList<\'a, StringString<\'a>> {\n    iterator_to_list(allocator, string.split_whitespace())\n}\npub fn string_lines<\'a>(\n    allocator: &\'a Bump,\n    string: StringString<\'a>,\n) -> ListList<\'a, StringString<\'a>> {\n    iterator_to_list(allocator, string.lines())\n}\npub fn string_contains(needle: StringString, string: StringString) -> bool {\n    string.contains(needle)\n}\npub fn string_indexes<\'a>(\n    allocator: &\'a Bump,\n    needle: StringString,\n    string: StringString<\'a>,\n) -> ListList<\'a, f64> {\n    // this is a fairly expensive operation, O(chars * matches). Anyone know something faster?\n    iterator_to_list(\n        allocator,\n        string\n            .match_indices(needle)\n            .filter_map(|(instance_byte_index, _)| {\n                // translate byte index to char position\n                string\n                    .char_indices()\n                    .map(|(char_index, _)| char_index)\n                    .find(|&char_index| instance_byte_index >= char_index)\n                    // find should always succeed\n                    .map(|char_index_usize| char_index_usize as f64)\n            }),\n    )\n}\npub fn string_indices<\'a>(\n    allocator: &\'a Bump,\n    needle: StringString,\n    string: StringString<\'a>,\n) -> ListList<\'a, f64> {\n    string_indexes(allocator, needle, string)\n}\npub fn string_starts_with(prefix_to_check_for: StringString, string: StringString) -> bool {\n    string.starts_with(prefix_to_check_for)\n}\npub fn string_ends_with(suffix_to_check_for: StringString, string: StringString) -> bool {\n    string.ends_with(suffix_to_check_for)\n}\npub fn string_to_float(string: StringString) -> Option<f64> {\n    match string.parse::<f64>() {\n        Result::Err(_) => Option::None,\n        Result::Ok(float) => Option::Some(float),\n    }\n}\npub fn string_to_int(string: StringString) -> Option<f64> {\n    match string.parse::<i64>() {\n        Result::Err(_) => Option::None,\n        Result::Ok(int) => Option::Some(int as f64),\n    }\n}\npub fn string_to_upper<\'a>(allocator: &\'a Bump, string: StringString) -> StringString<\'a> {\n    allocator.alloc(string.to_uppercase())\n}\npub fn string_to_lower<\'a>(allocator: &\'a Bump, string: StringString) -> StringString<\'a> {\n    allocator.alloc(string.to_lowercase())\n}\npub fn string_pad<\'a>(\n    allocator: &\'a Bump,\n    minimum_full_char_count: f64,\n    padding: char,\n    string: StringString,\n) -> StringString<\'a> {\n    let half_to_pad: f64 = (minimum_full_char_count - string.chars().count() as f64) / 2_f64;\n    let padding_string: String = padding.to_string();\n    let mut padded: String = padding_string.repeat(half_to_pad.ceil() as usize);\n    padded.push_str(string);\n    padded.push_str(&padding_string.repeat(half_to_pad.floor() as usize));\n    allocator.alloc(padded)\n}\npub fn string_pad_left<\'a>(\n    allocator: &\'a Bump,\n    minimum_length: f64,\n    padding: char,\n    string: StringString,\n) -> StringString<\'a> {\n    let mut padded: String = padding\n        .to_string()\n        .repeat((minimum_length - string.chars().count() as f64) as usize);\n    padded.push_str(string);\n    allocator.alloc(padded)\n}\npub fn string_pad_right<\'a>(\n    allocator: &\'a Bump,\n    minimum_length: f64,\n    padding: char,\n    string: StringString,\n) -> StringString<\'a> {\n    let mut padded: String = string.to_owned();\n    padded.push_str(\n        &padding\n            .to_string()\n            .repeat((minimum_length - string.chars().count() as f64) as usize),\n    );\n    allocator.alloc(padded)\n}\npub fn string_trim(string: StringString) -> StringString {\n    string.trim()\n}\npub fn string_trim_left(string: StringString) -> StringString {\n    string.trim_start()\n}\npub fn string_trim_right(string: StringString) -> StringString {\n    string.trim_end()\n}\n\npub fn debug_to_string<\'a, A: std::fmt::Debug>(allocator: &\'a Bump, data: A) -> StringString<\'a> {\n    allocator.alloc(format!("{:?}", data)).as_str()\n}\npub fn debug_log<\'a, A: std::fmt::Debug>(data: A) -> A {\n    println!("{:?}", data);\n    data\n}\npub fn debug_todo<Any>(message: StringString) -> Any {\n    todo!("{}", message)\n}\npub fn maybe_with_default<A>(on_nothing: A, maybe: Option<A>) -> A {\n    maybe.unwrap_or(on_nothing)\n}\npub fn maybe_and_then<A, B, ValueToMaybe: Fn(A) -> Option<B>>(\n    value_to_maybe: ValueToMaybe,\n    maybe: Option<A>,\n) -> Option<B> {\n    maybe.and_then(value_to_maybe)\n}\n\npub fn maybe_map<A, B, ValueChange: Fn(A) -> B>(\n    value_change: ValueChange,\n    maybe: Option<A>,\n) -> Option<B> {\n    maybe.map(value_change)\n}\npub fn maybe_map2<A, B, Combined, Combine: Fn(A) -> Combine1, Combine1: Fn(B) -> Combined>(\n    combine: Combine,\n    a_maybe: Option<A>,\n    b_maybe: Option<B>,\n) -> Option<Combined> {\n    a_maybe.zip(b_maybe).map(|(a, b)| combine(a)(b))\n}\npub fn maybe_map3<\n    A,\n    B,\n    C,\n    Combined,\n    Combine: Fn(A) -> Combine1,\n    Combine1: Fn(B) -> Combine2,\n    Combine2: Fn(C) -> Combined,\n>(\n    combine: Combine,\n    a_maybe: Option<A>,\n    b_maybe: Option<B>,\n    c_maybe: Option<C>,\n) -> Option<Combined> {\n    a_maybe\n        .zip(b_maybe)\n        .zip(c_maybe)\n        .map(|((a, b), c)| combine(a)(b)(c))\n}\npub fn maybe_map4<\n    A,\n    B,\n    C,\n    D,\n    Combined,\n    Combine: Fn(A) -> Combine1,\n    Combine1: Fn(B) -> Combine2,\n    Combine2: Fn(C) -> Combine3,\n    Combine3: Fn(D) -> Combined,\n>(\n    combine: Combine,\n    a_maybe: Option<A>,\n    b_maybe: Option<B>,\n    c_maybe: Option<C>,\n    d_maybe: Option<D>,\n) -> Option<Combined> {\n    a_maybe\n        .zip(b_maybe)\n        .zip(c_maybe)\n        .zip(d_maybe)\n        .map(|(((a, b), c), d)| combine(a)(b)(c)(d))\n}\npub fn maybe_map5<\n    A,\n    B,\n    C,\n    D,\n    E,\n    Combined,\n    Combine: Fn(A) -> Combine1,\n    Combine1: Fn(B) -> Combine2,\n    Combine2: Fn(C) -> Combine3,\n    Combine3: Fn(D) -> Combine4,\n    Combine4: Fn(E) -> Combined,\n>(\n    combine: Combine,\n    a_maybe: Option<A>,\n    b_maybe: Option<B>,\n    c_maybe: Option<C>,\n    d_maybe: Option<D>,\n    e_maybe: Option<E>,\n) -> Option<Combined> {\n    a_maybe\n        .zip(b_maybe)\n        .zip(c_maybe)\n        .zip(d_maybe)\n        .zip(e_maybe)\n        .map(|((((a, b), c), d), e)| combine(a)(b)(c)(d)(e))\n}\n\npub fn result_with_default<A, X>(value_on_err: A, result: ResultResult<X, A>) -> A {\n    result.unwrap_or(value_on_err)\n}\npub fn result_from_maybe<A, X>(error_on_nothing: X, maybe: Option<A>) -> ResultResult<X, A> {\n    maybe.ok_or(error_on_nothing)\n}\npub fn result_map_error<A, X, Y, ErrorChange: Fn(X) -> Y>(\n    error_change: ErrorChange,\n    result: ResultResult<X, A>,\n) -> ResultResult<Y, A> {\n    result.map_err(error_change)\n}\npub fn result_and_then<A, B, X, ValueToResult: Fn(A) -> ResultResult<X, B>>(\n    value_to_result: ValueToResult,\n    result: ResultResult<X, A>,\n) -> ResultResult<X, B> {\n    result.and_then(value_to_result)\n}\npub fn result_map<A, B, X, ValueChange: Fn(A) -> B>(\n    value_change: ValueChange,\n    result: ResultResult<X, A>,\n) -> ResultResult<X, B> {\n    result.map(value_change)\n}\npub fn result_map2<A, B, Combined, X, Combine: Fn(A) -> Combine1, Combine1: Fn(B) -> Combined>(\n    combine: Combine,\n    a_result: ResultResult<X, A>,\n    b_result: ResultResult<X, B>,\n) -> ResultResult<X, Combined> {\n    Result::Ok(combine(a_result?)(b_result?))\n}\npub fn result_map3<\n    A,\n    B,\n    C,\n    Combined,\n    X,\n    Combine: Fn(A) -> Combine1,\n    Combine1: Fn(B) -> Combine2,\n    Combine2: Fn(C) -> Combined,\n>(\n    combine: Combine,\n    a_result: ResultResult<X, A>,\n    b_result: ResultResult<X, B>,\n    c_result: ResultResult<X, C>,\n) -> ResultResult<X, Combined> {\n    Result::Ok(combine(a_result?)(b_result?)(c_result?))\n}\npub fn result_map4<\n    A,\n    B,\n    C,\n    D,\n    Combined,\n    X,\n    Combine: Fn(A) -> Combine1,\n    Combine1: Fn(B) -> Combine2,\n    Combine2: Fn(C) -> Combine3,\n    Combine3: Fn(D) -> Combined,\n>(\n    combine: Combine,\n    a_result: ResultResult<X, A>,\n    b_result: ResultResult<X, B>,\n    c_result: ResultResult<X, C>,\n    d_result: ResultResult<X, D>,\n) -> ResultResult<X, Combined> {\n    Result::Ok(combine(a_result?)(b_result?)(c_result?)(d_result?))\n}\npub fn result_map5<\n    A,\n    B,\n    C,\n    D,\n    E,\n    Combined,\n    X,\n    Combine: Fn(A) -> Combine1,\n    Combine1: Fn(B) -> Combine2,\n    Combine2: Fn(C) -> Combine3,\n    Combine3: Fn(D) -> Combine4,\n    Combine4: Fn(E) -> Combined,\n>(\n    combine: Combine,\n    a_result: ResultResult<X, A>,\n    b_result: ResultResult<X, B>,\n    c_result: ResultResult<X, C>,\n    d_result: ResultResult<X, D>,\n    e_result: ResultResult<X, E>,\n) -> ResultResult<X, Combined> {\n    Result::Ok(combine(a_result?)(b_result?)(c_result?)(d_result?)(\n        e_result?,\n    ))\n}\n';
var $author$project$Print$Exact = F2(
	function (a, b) {
		return {$: 'Exact', a: a, b: b};
	});
var $author$project$Print$exactly = function (exactNextString) {
	return A2($author$project$Print$Exact, exactNextString, _Utils_Tuple0);
};
var $author$project$Print$empty = $author$project$Print$exactly('');
var $author$project$ElmSyntaxToRust$fastDictMapAndToList = F2(
	function (keyValueToElement, fastDict) {
		return A3(
			$miniBill$elm_fast_dict$FastDict$foldr,
			F3(
				function (key, value, soFar) {
					return A2(
						$elm$core$List$cons,
						A2(keyValueToElement, key, value),
						soFar);
				}),
			_List_Nil,
			fastDict);
	});
var $author$project$Print$FollowedBy = F2(
	function (a, b) {
		return {$: 'FollowedBy', a: a, b: b};
	});
var $author$project$Print$followedBy = $author$project$Print$FollowedBy;
var $author$project$Print$listMapAndIntersperseAndFlatten = F3(
	function (elementToPrint, inBetweenPrint, prints) {
		if (!prints.b) {
			return $author$project$Print$empty;
		} else {
			var head = prints.a;
			var tail = prints.b;
			return A3(
				$elm$core$List$foldl,
				F2(
					function (next, soFar) {
						return A2(
							$author$project$Print$followedBy,
							elementToPrint(next),
							A2($author$project$Print$followedBy, inBetweenPrint, soFar));
					}),
				elementToPrint(head),
				tail);
		}
	});
var $author$project$Print$Linebreak = F2(
	function (a, b) {
		return {$: 'Linebreak', a: a, b: b};
	});
var $author$project$Print$linebreak = A2($author$project$Print$Linebreak, _Utils_Tuple0, _Utils_Tuple0);
var $author$project$Print$LinebreakIndented = F2(
	function (a, b) {
		return {$: 'LinebreakIndented', a: a, b: b};
	});
var $author$project$Print$linebreakIndented = A2($author$project$Print$LinebreakIndented, _Utils_Tuple0, _Utils_Tuple0);
var $author$project$ElmSyntaxToRust$printLinebreakLinebreakIndented = A2($author$project$Print$followedBy, $author$project$Print$linebreakIndented, $author$project$Print$linebreak);
var $author$project$ElmSyntaxToRust$printExactlyCurlyClosing = $author$project$Print$exactly('}');
var $author$project$Print$emptyOrLinebreakIndented = function (lineSpreadToUse) {
	if (lineSpreadToUse.$ === 'SingleLine') {
		return $author$project$Print$empty;
	} else {
		return $author$project$Print$linebreakIndented;
	}
};
var $author$project$Print$MultipleLines = {$: 'MultipleLines'};
var $author$project$Print$SingleLine = {$: 'SingleLine'};
var $author$project$Print$lineSpreadWithRemaining = F2(
	function (print, remainingPrints) {
		lineSpreadWithRemaining:
		while (true) {
			switch (print.$) {
				case 'Exact':
					if (!remainingPrints.b) {
						return $author$project$Print$SingleLine;
					} else {
						var nextPrint = remainingPrints.a;
						var nextRemainingPrints = remainingPrints.b;
						var $temp$print = nextPrint,
							$temp$remainingPrints = nextRemainingPrints;
						print = $temp$print;
						remainingPrints = $temp$remainingPrints;
						continue lineSpreadWithRemaining;
					}
				case 'FollowedBy':
					var b = print.a;
					var a = print.b;
					var $temp$print = a,
						$temp$remainingPrints = A2($elm$core$List$cons, b, remainingPrints);
					print = $temp$print;
					remainingPrints = $temp$remainingPrints;
					continue lineSpreadWithRemaining;
				case 'Linebreak':
					return $author$project$Print$MultipleLines;
				case 'LinebreakIndented':
					return $author$project$Print$MultipleLines;
				case 'WithIndentIncreasedBy':
					var innerPrint = print.b;
					var $temp$print = innerPrint,
						$temp$remainingPrints = remainingPrints;
					print = $temp$print;
					remainingPrints = $temp$remainingPrints;
					continue lineSpreadWithRemaining;
				default:
					var innerPrint = print.a;
					var $temp$print = innerPrint,
						$temp$remainingPrints = remainingPrints;
					print = $temp$print;
					remainingPrints = $temp$remainingPrints;
					continue lineSpreadWithRemaining;
			}
		}
	});
var $author$project$Print$lineSpread = function (print) {
	lineSpread:
	while (true) {
		switch (print.$) {
			case 'Exact':
				return $author$project$Print$SingleLine;
			case 'FollowedBy':
				var b = print.a;
				var a = print.b;
				return A2(
					$author$project$Print$lineSpreadWithRemaining,
					a,
					_List_fromArray(
						[b]));
			case 'Linebreak':
				return $author$project$Print$MultipleLines;
			case 'LinebreakIndented':
				return $author$project$Print$MultipleLines;
			case 'WithIndentIncreasedBy':
				var innerPrint = print.b;
				var $temp$print = innerPrint;
				print = $temp$print;
				continue lineSpread;
			default:
				var innerPrint = print.a;
				var $temp$print = innerPrint;
				print = $temp$print;
				continue lineSpread;
		}
	}
};
var $author$project$Print$lineSpreadListMapAndCombine = F2(
	function (elementLineSpread, lineSpreads) {
		lineSpreadListMapAndCombine:
		while (true) {
			if (!lineSpreads.b) {
				return $author$project$Print$SingleLine;
			} else {
				var head = lineSpreads.a;
				var tail = lineSpreads.b;
				var _v1 = elementLineSpread(head);
				if (_v1.$ === 'MultipleLines') {
					return $author$project$Print$MultipleLines;
				} else {
					var $temp$elementLineSpread = elementLineSpread,
						$temp$lineSpreads = tail;
					elementLineSpread = $temp$elementLineSpread;
					lineSpreads = $temp$lineSpreads;
					continue lineSpreadListMapAndCombine;
				}
			}
		}
	});
var $author$project$ElmSyntaxToRust$printExactlyComma = $author$project$Print$exactly(',');
var $author$project$ElmSyntaxToRust$printExactlyParenClosing = $author$project$Print$exactly(')');
var $author$project$ElmSyntaxToRust$TypeIncoming = {$: 'TypeIncoming'};
var $author$project$ElmSyntaxToRust$TypeOutgoing = {$: 'TypeOutgoing'};
var $author$project$Print$lineSpreadMergeWith = F2(
	function (bLineSpreadLazy, aLineSpread) {
		if (aLineSpread.$ === 'MultipleLines') {
			return $author$project$Print$MultipleLines;
		} else {
			return bLineSpreadLazy(_Utils_Tuple0);
		}
	});
var $author$project$Print$listIntersperseAndFlatten = F2(
	function (inBetweenPrint, elements) {
		if (!elements.b) {
			return $author$project$Print$empty;
		} else {
			var head = elements.a;
			var tail = elements.b;
			return A3(
				$elm$core$List$foldl,
				F2(
					function (next, soFar) {
						return A2(
							$author$project$Print$followedBy,
							next,
							A2($author$project$Print$followedBy, inBetweenPrint, soFar));
					}),
				head,
				tail);
		}
	});
var $author$project$ElmSyntaxToRust$printExactlyGreaterThan = $author$project$Print$exactly('>');
var $author$project$ElmSyntaxToRust$printExactlyLessThan = $author$project$Print$exactly('<');
var $author$project$ElmSyntaxToRust$printExactlyParenOpening = $author$project$Print$exactly('(');
var $author$project$Print$WithIndentIncreasedBy = F2(
	function (a, b) {
		return {$: 'WithIndentIncreasedBy', a: a, b: b};
	});
var $author$project$Print$withIndentIncreasedBy = $author$project$Print$WithIndentIncreasedBy;
var $author$project$ElmSyntaxToRust$printParenthesized = function (inner) {
	return A2(
		$author$project$Print$followedBy,
		$author$project$ElmSyntaxToRust$printExactlyParenClosing,
		A2(
			$author$project$Print$followedBy,
			$author$project$Print$emptyOrLinebreakIndented(
				$author$project$Print$lineSpread(inner)),
			A2(
				$author$project$Print$followedBy,
				A2($author$project$Print$withIndentIncreasedBy, 1, inner),
				$author$project$ElmSyntaxToRust$printExactlyParenOpening)));
};
var $author$project$ElmSyntaxToRust$printRustTypeRecordEmpty = $author$project$Print$exactly('()');
var $author$project$ElmSyntaxToRust$qualifiedReferenceToRustName = function (reference) {
	var _v0 = reference.qualification;
	if (!_v0.b) {
		return reference.name;
	} else {
		var qualificationPart0 = _v0.a;
		var qualificationPart1Up = _v0.b;
		return A2(
			$elm$core$String$join,
			'::',
			A2($elm$core$List$cons, qualificationPart0, qualificationPart1Up)) + ('::' + reference.name);
	}
};
var $author$project$ElmSyntaxToRust$rustTypeExpandFunctionIntoReverse = F2(
	function (soFarReverse, rustType) {
		rustTypeExpandFunctionIntoReverse:
		while (true) {
			switch (rustType.$) {
				case 'RustTypeFunction':
					var _function = rustType.a;
					var $temp$soFarReverse = A2($elm$core$List$cons, _function.input, soFarReverse),
						$temp$rustType = _function.output;
					soFarReverse = $temp$soFarReverse;
					rustType = $temp$rustType;
					continue rustTypeExpandFunctionIntoReverse;
				case 'RustTypeUnit':
					return {
						inputs: $elm$core$List$reverse(soFarReverse),
						output: $author$project$ElmSyntaxToRust$RustTypeUnit
					};
				case 'RustTypeBorrow':
					return {
						inputs: $elm$core$List$reverse(soFarReverse),
						output: rustType
					};
				case 'RustTypeConstruct':
					return {
						inputs: $elm$core$List$reverse(soFarReverse),
						output: rustType
					};
				case 'RustTypeTuple':
					return {
						inputs: $elm$core$List$reverse(soFarReverse),
						output: rustType
					};
				case 'RustTypeRecord':
					return {
						inputs: $elm$core$List$reverse(soFarReverse),
						output: rustType
					};
				default:
					return {
						inputs: $elm$core$List$reverse(soFarReverse),
						output: rustType
					};
			}
		}
	});
var $author$project$ElmSyntaxToRust$rustTypeExpandToFunction = function (rustType) {
	return A2($author$project$ElmSyntaxToRust$rustTypeExpandFunctionIntoReverse, _List_Nil, rustType);
};
var $author$project$Print$space = $author$project$Print$exactly(' ');
var $author$project$Print$spaceOrLinebreakIndented = function (lineSpreadToUse) {
	if (lineSpreadToUse.$ === 'SingleLine') {
		return $author$project$Print$space;
	} else {
		return $author$project$Print$linebreakIndented;
	}
};
var $author$project$ElmSyntaxToRust$typeIsSpaceSeparated = function (rustType) {
	switch (rustType.$) {
		case 'RustTypeUnit':
			return false;
		case 'RustTypeVariable':
			return false;
		case 'RustTypeConstruct':
			return false;
		case 'RustTypeTuple':
			return false;
		case 'RustTypeRecord':
			return false;
		case 'RustTypeFunction':
			return true;
		default:
			return true;
	}
};
var $author$project$Print$WithIndentAtNextMultipleOf4 = F2(
	function (a, b) {
		return {$: 'WithIndentAtNextMultipleOf4', a: a, b: b};
	});
var $author$project$Print$withIndentAtNextMultipleOf4 = function (print) {
	return A2($author$project$Print$WithIndentAtNextMultipleOf4, print, _Utils_Tuple0);
};
var $author$project$ElmSyntaxToRust$printRustTypeConstruct = F2(
	function (positionOrNothing, typeConstruct) {
		var referencePrint = $author$project$Print$exactly(
			$author$project$ElmSyntaxToRust$qualifiedReferenceToRustName(
				{name: typeConstruct.name, qualification: typeConstruct.qualification}));
		var _v9 = _Utils_ap(
			function () {
				var _v10 = typeConstruct.lifetimeArgument;
				if (_v10.$ === 'Nothing') {
					return _List_Nil;
				} else {
					var lifetimeArgument = _v10.a;
					return _List_fromArray(
						[
							$author$project$Print$exactly('\'' + lifetimeArgument)
						]);
				}
			}(),
			A2(
				$elm$core$List$map,
				function (argument) {
					return A2($author$project$ElmSyntaxToRust$printRustTypeNotParenthesized, $elm$core$Maybe$Nothing, argument);
				},
				typeConstruct._arguments));
		if (!_v9.b) {
			return referencePrint;
		} else {
			var argument0 = _v9.a;
			var argument1Up = _v9.b;
			var argumentPrints = A2($elm$core$List$cons, argument0, argument1Up);
			var fullLineSpread = A2($author$project$Print$lineSpreadListMapAndCombine, $author$project$Print$lineSpread, argumentPrints);
			return A2(
				$author$project$Print$followedBy,
				$author$project$ElmSyntaxToRust$printExactlyGreaterThan,
				A2(
					$author$project$Print$followedBy,
					$author$project$Print$emptyOrLinebreakIndented(fullLineSpread),
					A2(
						$author$project$Print$followedBy,
						$author$project$Print$withIndentAtNextMultipleOf4(
							A2(
								$author$project$Print$followedBy,
								A2(
									$author$project$Print$listIntersperseAndFlatten,
									A2(
										$author$project$Print$followedBy,
										$author$project$Print$spaceOrLinebreakIndented(fullLineSpread),
										$author$project$ElmSyntaxToRust$printExactlyComma),
									argumentPrints),
								$author$project$Print$emptyOrLinebreakIndented(fullLineSpread))),
						A2($author$project$Print$followedBy, $author$project$ElmSyntaxToRust$printExactlyLessThan, referencePrint))));
		}
	});
var $author$project$ElmSyntaxToRust$printRustTypeFunction = F2(
	function (positionOrNothing, typeFunction) {
		var outputExpanded = $author$project$ElmSyntaxToRust$rustTypeExpandToFunction(typeFunction.output);
		var outputPrint = A2(
			$author$project$ElmSyntaxToRust$printRustTypeParenthesizedIfSpaceSeparated,
			function () {
				if (positionOrNothing.$ === 'Nothing') {
					return $elm$core$Maybe$Nothing;
				} else {
					return $elm$core$Maybe$Just($author$project$ElmSyntaxToRust$TypeOutgoing);
				}
			}(),
			outputExpanded.output);
		var inputIsEscaping = function () {
			if (positionOrNothing.$ === 'Nothing') {
				return false;
			} else {
				return true;
			}
		}();
		var input1UpPrints = A2(
			$elm$core$List$map,
			function (input) {
				return A2(
					$author$project$ElmSyntaxToRust$printRustTypeFunctionInput,
					{escaping: inputIsEscaping},
					input);
			},
			outputExpanded.inputs);
		var input0Print = A2(
			$author$project$ElmSyntaxToRust$printRustTypeFunctionInput,
			{escaping: inputIsEscaping},
			typeFunction.input);
		var fullLineSpread = A2(
			$author$project$Print$lineSpreadMergeWith,
			function (_v6) {
				return A2($author$project$Print$lineSpreadListMapAndCombine, $author$project$Print$lineSpread, input1UpPrints);
			},
			A2(
				$author$project$Print$lineSpreadMergeWith,
				function (_v5) {
					return $author$project$Print$lineSpread(outputPrint);
				},
				$author$project$Print$lineSpread(input0Print)));
		return A2(
			$author$project$Print$followedBy,
			outputPrint,
			A2(
				$author$project$Print$followedBy,
				$author$project$Print$spaceOrLinebreakIndented(fullLineSpread),
				A3(
					$author$project$Print$listMapAndIntersperseAndFlatten,
					function (typePrint) {
						return A2(
							$author$project$Print$followedBy,
							$author$project$Print$exactly(' ->'),
							A2(
								$author$project$Print$followedBy,
								$author$project$Print$emptyOrLinebreakIndented(fullLineSpread),
								A2(
									$author$project$Print$followedBy,
									A2($author$project$Print$withIndentIncreasedBy, 3, typePrint),
									$author$project$Print$exactly('Fn'))));
					},
					$author$project$Print$empty,
					A2($elm$core$List$cons, input0Print, input1UpPrints))));
	});
var $author$project$ElmSyntaxToRust$printRustTypeFunctionInput = F2(
	function (config, input) {
		var input0PartPrints = A2(
			$elm$core$List$map,
			function (inputPart) {
				return A2(
					$author$project$ElmSyntaxToRust$printRustTypeNotParenthesized,
					config.escaping ? $elm$core$Maybe$Just($author$project$ElmSyntaxToRust$TypeIncoming) : $elm$core$Maybe$Nothing,
					inputPart);
			},
			input);
		var input0LineSpread = A2($author$project$Print$lineSpreadListMapAndCombine, $author$project$Print$lineSpread, input0PartPrints);
		return $author$project$ElmSyntaxToRust$printParenthesized(
			A3(
				$author$project$Print$listMapAndIntersperseAndFlatten,
				function (inputPart) {
					return inputPart;
				},
				A2(
					$author$project$Print$followedBy,
					$author$project$Print$spaceOrLinebreakIndented(input0LineSpread),
					$author$project$ElmSyntaxToRust$printExactlyComma),
				input0PartPrints));
	});
var $author$project$ElmSyntaxToRust$printRustTypeNotParenthesized = F2(
	function (position, rustType) {
		switch (rustType.$) {
			case 'RustTypeUnit':
				return $author$project$Print$exactly('()');
			case 'RustTypeVariable':
				var variable = rustType.a;
				return $author$project$Print$exactly(variable);
			case 'RustTypeBorrow':
				var borrow = rustType.a;
				return A2(
					$author$project$Print$followedBy,
					A2(
						$author$project$Print$withIndentIncreasedBy,
						1,
						A2($author$project$ElmSyntaxToRust$printRustTypeParenthesizedIfSpaceSeparated, position, borrow.type_)),
					$author$project$Print$exactly(
						function () {
							var _v4 = borrow.lifetimeVariable;
							if (_v4.$ === 'Nothing') {
								return '&';
							} else {
								var lifetimeVariable = _v4.a;
								return '&\'' + (lifetimeVariable + ' ');
							}
						}()));
			case 'RustTypeConstruct':
				var typeConstruct = rustType.a;
				return A2($author$project$ElmSyntaxToRust$printRustTypeConstruct, position, typeConstruct);
			case 'RustTypeTuple':
				var parts = rustType.a;
				return $author$project$ElmSyntaxToRust$printRustTypeTuple(parts);
			case 'RustTypeRecord':
				var fields = rustType.a;
				return $author$project$ElmSyntaxToRust$printRustTypeRecord(fields);
			default:
				var typeFunction = rustType.a;
				return A2($author$project$ElmSyntaxToRust$printRustTypeFunction, position, typeFunction);
		}
	});
var $author$project$ElmSyntaxToRust$printRustTypeParenthesizedIfSpaceSeparated = F2(
	function (position, rustType) {
		var notParenthesizedPrint = A2($author$project$ElmSyntaxToRust$printRustTypeNotParenthesized, position, rustType);
		return $author$project$ElmSyntaxToRust$typeIsSpaceSeparated(rustType) ? $author$project$ElmSyntaxToRust$printParenthesized(notParenthesizedPrint) : notParenthesizedPrint;
	});
var $author$project$ElmSyntaxToRust$printRustTypeRecord = function (fields) {
	return $miniBill$elm_fast_dict$FastDict$isEmpty(fields) ? $author$project$ElmSyntaxToRust$printRustTypeRecordEmpty : A2(
		$author$project$Print$followedBy,
		$author$project$ElmSyntaxToRust$printExactlyParenClosing,
		A2(
			$author$project$Print$followedBy,
			$author$project$Print$linebreakIndented,
			A2(
				$author$project$Print$followedBy,
				A2(
					$author$project$Print$withIndentIncreasedBy,
					1,
					A3(
						$author$project$Print$listMapAndIntersperseAndFlatten,
						function (_v2) {
							var fieldName = _v2.a;
							var fieldValue = _v2.b;
							var fieldValuePrint = A2($author$project$ElmSyntaxToRust$printRustTypeNotParenthesized, $elm$core$Maybe$Nothing, fieldValue);
							return A2(
								$author$project$Print$followedBy,
								$author$project$Print$withIndentAtNextMultipleOf4(
									A2(
										$author$project$Print$followedBy,
										fieldValuePrint,
										$author$project$Print$spaceOrLinebreakIndented(
											$author$project$Print$lineSpread(fieldValuePrint)))),
								$author$project$Print$exactly(fieldName + ':'));
						},
						A2($author$project$Print$followedBy, $author$project$Print$linebreakIndented, $author$project$ElmSyntaxToRust$printExactlyComma),
						$miniBill$elm_fast_dict$FastDict$toList(fields))),
				$author$project$ElmSyntaxToRust$printExactlyParenOpening)));
};
var $author$project$ElmSyntaxToRust$printRustTypeTuple = function (parts) {
	var part2UpPrints = A2(
		$elm$core$List$map,
		function (part) {
			return A2($author$project$ElmSyntaxToRust$printRustTypeNotParenthesized, $elm$core$Maybe$Nothing, part);
		},
		parts.part2Up);
	var part1Print = A2($author$project$ElmSyntaxToRust$printRustTypeNotParenthesized, $elm$core$Maybe$Nothing, parts.part1);
	var part0Print = A2($author$project$ElmSyntaxToRust$printRustTypeNotParenthesized, $elm$core$Maybe$Nothing, parts.part0);
	var lineSpread = A2(
		$author$project$Print$lineSpreadMergeWith,
		function (_v1) {
			return A2($author$project$Print$lineSpreadListMapAndCombine, $author$project$Print$lineSpread, part2UpPrints);
		},
		A2(
			$author$project$Print$lineSpreadMergeWith,
			function (_v0) {
				return $author$project$Print$lineSpread(part1Print);
			},
			$author$project$Print$lineSpread(part0Print)));
	return A2(
		$author$project$Print$followedBy,
		$author$project$ElmSyntaxToRust$printExactlyParenClosing,
		A2(
			$author$project$Print$followedBy,
			$author$project$Print$emptyOrLinebreakIndented(lineSpread),
			A2(
				$author$project$Print$followedBy,
				A2(
					$author$project$Print$withIndentIncreasedBy,
					3,
					A3(
						$author$project$Print$listMapAndIntersperseAndFlatten,
						function (partPrint) {
							return partPrint;
						},
						A2(
							$author$project$Print$followedBy,
							$author$project$Print$spaceOrLinebreakIndented(lineSpread),
							$author$project$ElmSyntaxToRust$printExactlyComma),
						A2(
							$elm$core$List$cons,
							part0Print,
							A2($elm$core$List$cons, part1Print, part2UpPrints)))),
				$author$project$ElmSyntaxToRust$printExactlyParenOpening)));
};
var $author$project$ElmSyntaxToRust$printRustEnumVariantDeclaration = function (rustVariant) {
	var _v0 = rustVariant.values;
	if (!_v0.b) {
		return $author$project$Print$exactly('case ' + rustVariant.name);
	} else {
		var value0 = _v0.a;
		var value1Up = _v0.b;
		var valuePrints = A2(
			$elm$core$List$map,
			function (value) {
				return A2($author$project$ElmSyntaxToRust$printRustTypeNotParenthesized, $elm$core$Maybe$Nothing, value);
			},
			A2($elm$core$List$cons, value0, value1Up));
		var fullLineSpread = A2($author$project$Print$lineSpreadListMapAndCombine, $author$project$Print$lineSpread, valuePrints);
		return A2(
			$author$project$Print$followedBy,
			$author$project$ElmSyntaxToRust$printExactlyParenClosing,
			A2(
				$author$project$Print$followedBy,
				$author$project$Print$emptyOrLinebreakIndented(fullLineSpread),
				A2(
					$author$project$Print$followedBy,
					$author$project$Print$withIndentAtNextMultipleOf4(
						A2(
							$author$project$Print$followedBy,
							A3(
								$author$project$Print$listMapAndIntersperseAndFlatten,
								function (valuePrint) {
									return $author$project$Print$withIndentAtNextMultipleOf4(valuePrint);
								},
								A2(
									$author$project$Print$followedBy,
									$author$project$Print$spaceOrLinebreakIndented(fullLineSpread),
									$author$project$ElmSyntaxToRust$printExactlyComma),
								valuePrints),
							$author$project$Print$emptyOrLinebreakIndented(fullLineSpread))),
					$author$project$Print$exactly('case ' + (rustVariant.name + '(')))));
	}
};
var $author$project$ElmSyntaxToRust$printRustEnumDeclaration = function (rustEnumType) {
	return A2(
		$author$project$Print$followedBy,
		$author$project$ElmSyntaxToRust$printExactlyCurlyClosing,
		A2(
			$author$project$Print$followedBy,
			$author$project$Print$linebreakIndented,
			A2(
				$author$project$Print$followedBy,
				$author$project$Print$withIndentAtNextMultipleOf4(
					A2(
						$author$project$Print$followedBy,
						A3(
							$author$project$Print$listMapAndIntersperseAndFlatten,
							function (_v1) {
								var name = _v1.a;
								var values = _v1.b;
								return $author$project$ElmSyntaxToRust$printRustEnumVariantDeclaration(
									{name: name, values: values});
							},
							$author$project$Print$linebreakIndented,
							$miniBill$elm_fast_dict$FastDict$toList(rustEnumType.variants)),
						$author$project$Print$linebreakIndented)),
				$author$project$Print$exactly(
					(rustEnumType.indirect ? 'pub enum ' : 'pub enum ') + (rustEnumType.name + (function () {
						var _v0 = rustEnumType.parameters;
						if (!_v0.b) {
							return '';
						} else {
							var parameter0 = _v0.a;
							var parameter1Up = _v0.b;
							return '<' + (A2(
								$elm$core$String$join,
								', ',
								A2($elm$core$List$cons, parameter0, parameter1Up)) + '>');
						}
					}() + ' {'))))));
};
var $author$project$ElmSyntaxToRust$printExactlyColon = $author$project$Print$exactly(':');
var $author$project$ElmSyntaxToRust$printExactlySpaceCurlyOpening = $author$project$Print$exactly(' {');
var $author$project$ElmSyntaxToRust$printExactlySpaceMinusGreaterThanSpace = $author$project$Print$exactly(' -> ');
var $elm$core$String$fromFloat = _String_fromNumber;
var $author$project$ElmSyntaxToRust$f64Literal = function (_double) {
	var asString = $elm$core$String$fromFloat(_double);
	return A2($elm$core$String$contains, '.', asString) ? asString : (A2($elm$core$String$contains, 'e', asString) ? asString : (asString + '_f64'));
};
var $author$project$ElmSyntaxToRust$printExactlyAngledClosing = $author$project$Print$exactly(']');
var $author$project$ElmSyntaxToRust$printExactlyAngledOpeningSpace = $author$project$Print$exactly('[ ');
var $author$project$ElmSyntaxToRust$printExactlyCaseSpace = $author$project$Print$exactly('case ');
var $author$project$ElmSyntaxToRust$printExactlyCaseSpaceLetSpace = $author$project$Print$exactly('case let ');
var $author$project$ElmSyntaxToRust$printExactlyCommaLinebreakIndented = A2(
	$author$project$Print$followedBy,
	$author$project$Print$linebreakIndented,
	$author$project$Print$exactly(','));
var $author$project$ElmSyntaxToRust$printExactlyCommaSpace = $author$project$Print$exactly(', ');
var $author$project$ElmSyntaxToRust$printExactlyCurlyClosingSpaceElseSpaceCurlyOpening = $author$project$Print$exactly('} else {');
var $author$project$ElmSyntaxToRust$printExactlyCurlyOpening = $author$project$Print$exactly('{');
var $author$project$ElmSyntaxToRust$printExactlyIf = $author$project$Print$exactly('if');
var $author$project$ElmSyntaxToRust$printExactlyLetSpace = $author$project$Print$exactly('let ');
var $author$project$ElmSyntaxToRust$printExactlyMatch = $author$project$Print$exactly('match');
var $author$project$ElmSyntaxToRust$printExactlyMinus = $author$project$Print$exactly('-');
var $author$project$ElmSyntaxToRust$printExactlyParenOpeningParenClosing = $author$project$Print$exactly('()');
var $author$project$ElmSyntaxToRust$printExactlyParenOpeningSpace = $author$project$Print$exactly('( ');
var $author$project$ElmSyntaxToRust$printExactlyReturn = $author$project$Print$exactly('return');
var $author$project$ElmSyntaxToRust$printExactlyRustExpressionRecordEmpty = $author$project$Print$exactly('Generated{}');
var $author$project$ElmSyntaxToRust$printExactlySpaceEquals = $author$project$Print$exactly(' =');
var $author$project$ElmSyntaxToRust$printExactlySpaceEqualsLinebreakIndented = A2($author$project$Print$followedBy, $author$project$Print$linebreakIndented, $author$project$ElmSyntaxToRust$printExactlySpaceEquals);
var $author$project$ElmSyntaxToRust$printRustExpressionArrayLiteralEmpty = $author$project$Print$exactly('[]');
var $author$project$ElmSyntaxToRust$printRustExpressionSelf = $author$project$Print$exactly('self');
var $author$project$ElmSyntaxToRust$patternIsSpaceSeparated = function (rustPattern) {
	switch (rustPattern.$) {
		case 'RustPatternAlias':
			return true;
		case 'RustPatternIgnore':
			return false;
		case 'RustPatternBool':
			return false;
		case 'RustPatternInteger':
			return false;
		case 'RustPatternUnicodeScalar':
			return false;
		case 'RustPatternStringLiteral':
			return false;
		case 'RustPatternVariable':
			return false;
		case 'RustPatternRecord':
			return false;
		case 'RustPatternVariant':
			return false;
		default:
			return false;
	}
};
var $author$project$ElmSyntaxToRust$printExactlyUnderscore = $author$project$Print$exactly('_');
var $author$project$ElmSyntaxToRust$printRustPatternFalse = $author$project$Print$exactly('false');
var $author$project$ElmSyntaxToRust$printRustPatternTrue = $author$project$Print$exactly('true');
var $elm$core$String$foldl = _String_foldl;
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $author$project$ElmSyntaxToRust$unsafeHexDigitIntToString = function (_int) {
	switch (_int) {
		case 0:
			return '0';
		case 1:
			return '1';
		case 2:
			return '2';
		case 3:
			return '3';
		case 4:
			return '4';
		case 5:
			return '5';
		case 6:
			return '6';
		case 7:
			return '7';
		case 8:
			return '8';
		case 9:
			return '9';
		case 10:
			return 'A';
		case 11:
			return 'B';
		case 12:
			return 'C';
		case 13:
			return 'D';
		case 14:
			return 'E';
		default:
			return 'F';
	}
};
var $author$project$ElmSyntaxToRust$characterHex = function (character) {
	var charCode = $elm$core$Char$toCode(character);
	return $elm$core$String$toUpper(
		$author$project$ElmSyntaxToRust$unsafeHexDigitIntToString((61440 & charCode) >> 12) + ($author$project$ElmSyntaxToRust$unsafeHexDigitIntToString((3840 & charCode) >> 8) + ($author$project$ElmSyntaxToRust$unsafeHexDigitIntToString((240 & charCode) >> 4) + ($author$project$ElmSyntaxToRust$unsafeHexDigitIntToString(15 & charCode) + ''))));
};
var $author$project$ElmSyntaxToRust$charCodeIsDigit = function (code) {
	return (code <= 57) && (48 <= code);
};
var $author$project$ElmSyntaxToRust$charCodeIsLower = function (code) {
	return (97 <= code) && (code <= 122);
};
var $author$project$ElmSyntaxToRust$charCodeIsUpper = function (code) {
	return (code <= 90) && (65 <= code);
};
var $author$project$ElmSyntaxToRust$charIsLatinAlphaNumOrUnderscoreFast = function (c) {
	var code = $elm$core$Char$toCode(c);
	return $author$project$ElmSyntaxToRust$charCodeIsLower(code) || ($author$project$ElmSyntaxToRust$charCodeIsUpper(code) || ($author$project$ElmSyntaxToRust$charCodeIsDigit(code) || (code === 95)));
};
var $miniBill$elm_unicode$Unicode$LetterLowercase = {$: 'LetterLowercase'};
var $miniBill$elm_unicode$Unicode$LetterModifier = {$: 'LetterModifier'};
var $miniBill$elm_unicode$Unicode$LetterOther = {$: 'LetterOther'};
var $miniBill$elm_unicode$Unicode$LetterTitlecase = {$: 'LetterTitlecase'};
var $miniBill$elm_unicode$Unicode$LetterUppercase = {$: 'LetterUppercase'};
var $miniBill$elm_unicode$Unicode$MarkEnclosing = {$: 'MarkEnclosing'};
var $miniBill$elm_unicode$Unicode$MarkNonSpacing = {$: 'MarkNonSpacing'};
var $miniBill$elm_unicode$Unicode$MarkSpacingCombining = {$: 'MarkSpacingCombining'};
var $miniBill$elm_unicode$Unicode$NumberDecimalDigit = {$: 'NumberDecimalDigit'};
var $miniBill$elm_unicode$Unicode$NumberLetter = {$: 'NumberLetter'};
var $miniBill$elm_unicode$Unicode$NumberOther = {$: 'NumberOther'};
var $miniBill$elm_unicode$Unicode$OtherControl = {$: 'OtherControl'};
var $miniBill$elm_unicode$Unicode$OtherFormat = {$: 'OtherFormat'};
var $miniBill$elm_unicode$Unicode$OtherPrivateUse = {$: 'OtherPrivateUse'};
var $miniBill$elm_unicode$Unicode$OtherSurrogate = {$: 'OtherSurrogate'};
var $miniBill$elm_unicode$Unicode$PunctuationClose = {$: 'PunctuationClose'};
var $miniBill$elm_unicode$Unicode$PunctuationConnector = {$: 'PunctuationConnector'};
var $miniBill$elm_unicode$Unicode$PunctuationDash = {$: 'PunctuationDash'};
var $miniBill$elm_unicode$Unicode$PunctuationFinalQuote = {$: 'PunctuationFinalQuote'};
var $miniBill$elm_unicode$Unicode$PunctuationInitialQuote = {$: 'PunctuationInitialQuote'};
var $miniBill$elm_unicode$Unicode$PunctuationOpen = {$: 'PunctuationOpen'};
var $miniBill$elm_unicode$Unicode$PunctuationOther = {$: 'PunctuationOther'};
var $miniBill$elm_unicode$Unicode$SeparatorLine = {$: 'SeparatorLine'};
var $miniBill$elm_unicode$Unicode$SeparatorParagraph = {$: 'SeparatorParagraph'};
var $miniBill$elm_unicode$Unicode$SeparatorSpace = {$: 'SeparatorSpace'};
var $miniBill$elm_unicode$Unicode$SymbolCurrency = {$: 'SymbolCurrency'};
var $miniBill$elm_unicode$Unicode$SymbolMath = {$: 'SymbolMath'};
var $miniBill$elm_unicode$Unicode$SymbolModifier = {$: 'SymbolModifier'};
var $miniBill$elm_unicode$Unicode$SymbolOther = {$: 'SymbolOther'};
var $miniBill$elm_unicode$Unicode$getCategory = function (c) {
	var code = $elm$core$Char$toCode(c);
	var e = function (hex) {
		return _Utils_eq(hex, code);
	};
	var l = function (hex) {
		return _Utils_cmp(code, hex) < 0;
	};
	var r = F2(
		function (from, to) {
			return (_Utils_cmp(from, code) < 1) && (_Utils_cmp(code, to) < 1);
		});
	return l(256) ? (l(160) ? (l(59) ? (l(41) ? ((code <= 31) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$OtherControl) : (e(32) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SeparatorSpace) : ((A2(r, 33, 35) || A2(r, 37, 39)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(36) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolCurrency) : (e(40) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : $elm$core$Maybe$Nothing))))) : (e(41) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : ((e(42) || (e(44) || (A2(r, 46, 47) || e(58)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(43) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : (e(45) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationDash) : (A2(r, 48, 57) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : $elm$core$Maybe$Nothing)))))) : (l(94) ? ((e(59) || (A2(r, 63, 64) || e(92))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 60, 62) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : (A2(r, 65, 90) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : (e(91) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : (e(93) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : $elm$core$Maybe$Nothing))))) : ((e(94) || e(96)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolModifier) : (e(95) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationConnector) : (A2(r, 97, 122) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (e(123) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : ((e(124) || e(126)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : (e(125) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : (A2(r, 127, 159) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$OtherControl) : $elm$core$Maybe$Nothing))))))))) : (l(177) ? (l(169) ? (e(160) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SeparatorSpace) : ((e(161) || e(167)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 162, 165) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolCurrency) : (e(166) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (e(168) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolModifier) : $elm$core$Maybe$Nothing))))) : ((e(169) || (e(174) || e(176))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (e(170) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(171) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationInitialQuote) : (e(172) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : (e(173) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$OtherFormat) : (e(175) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolModifier) : $elm$core$Maybe$Nothing))))))) : (l(186) ? (e(177) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : ((A2(r, 178, 179) || e(185)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : ((e(180) || e(184)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolModifier) : (e(181) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (A2(r, 182, 183) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing))))) : (e(186) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(187) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationFinalQuote) : (A2(r, 188, 190) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : (e(191) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((A2(r, 192, 214) || A2(r, 216, 222)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(215) || e(247)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : ((A2(r, 223, 246) || A2(r, 248, 255)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)))))))))) : (l(9084) ? (l(3085) ? (l(1166) ? (l(488) ? (l(356) ? (l(304) ? (l(279) ? (l(266) ? ((e(256) || (e(258) || (e(260) || (e(262) || e(264))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(257) || (e(259) || (e(261) || (e(263) || e(265))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : (l(271) ? ((e(266) || (e(268) || e(270))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(267) || e(269)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : ((e(271) || (e(273) || (e(275) || e(277)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(272) || (e(274) || (e(276) || e(278)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)))) : (l(290) ? ((e(279) || (e(281) || (e(283) || (e(285) || (e(287) || e(289)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(280) || (e(282) || (e(284) || (e(286) || e(288))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : (l(296) ? ((e(290) || (e(292) || e(294))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(291) || (e(293) || e(295))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : ((e(296) || (e(298) || (e(300) || e(302)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(297) || (e(299) || (e(301) || e(303)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing))))) : (l(330) ? (l(316) ? ((e(304) || (e(306) || (e(308) || (e(310) || (e(313) || e(315)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(305) || (e(307) || (e(309) || (A2(r, 311, 312) || e(314))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : (l(321) ? ((e(316) || (e(318) || e(320))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(317) || e(319)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : ((e(321) || (e(323) || (e(325) || e(327)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(322) || (e(324) || (e(326) || A2(r, 328, 329)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)))) : (l(342) ? ((e(330) || (e(332) || (e(334) || (e(336) || (e(338) || e(340)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(331) || (e(333) || (e(335) || (e(337) || (e(339) || e(341)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : (l(348) ? ((e(342) || (e(344) || e(346))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(343) || (e(345) || e(347))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : ((e(348) || (e(350) || (e(352) || e(354)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(349) || (e(351) || (e(353) || e(355)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)))))) : (l(424) ? (l(380) ? (l(366) ? ((e(356) || (e(358) || (e(360) || (e(362) || e(364))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(357) || (e(359) || (e(361) || (e(363) || e(365))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : (l(371) ? ((e(366) || (e(368) || e(370))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(367) || e(369)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : ((e(371) || (e(373) || (e(375) || e(378)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(372) || (e(374) || (A2(r, 376, 377) || e(379)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)))) : (l(402) ? ((e(380) || (A2(r, 382, 384) || (e(387) || (e(389) || (e(392) || A2(r, 396, 397)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(381) || (A2(r, 385, 386) || (e(388) || (A2(r, 390, 391) || (A2(r, 393, 395) || A2(r, 398, 401)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : (l(414) ? ((e(402) || (e(405) || A2(r, 409, 411))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((A2(r, 403, 404) || (A2(r, 406, 408) || A2(r, 412, 413))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : ((e(414) || (e(417) || (e(419) || e(421)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((A2(r, 415, 416) || (e(418) || (e(420) || A2(r, 422, 423)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing))))) : (l(460) ? (l(440) ? ((e(424) || (A2(r, 426, 427) || (e(429) || (e(432) || (e(436) || e(438)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(425) || (e(428) || (A2(r, 430, 431) || (A2(r, 433, 435) || (e(437) || e(439)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : (l(452) ? ((e(440) || e(444)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((A2(r, 441, 442) || A2(r, 445, 447)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(443) || A2(r, 448, 451)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing))) : ((e(452) || (e(455) || e(458))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(453) || (e(456) || e(459))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterTitlecase) : ((e(454) || e(457)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing))))) : (l(472) ? ((e(460) || (e(462) || (e(464) || (e(466) || (e(468) || e(470)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(461) || (e(463) || (e(465) || (e(467) || (e(469) || e(471)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : (l(479) ? ((e(472) || (e(474) || A2(r, 476, 477))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(473) || (e(475) || e(478))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : ((e(479) || (e(481) || (e(483) || (e(485) || e(487))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(480) || (e(482) || (e(484) || e(486)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing))))))) : (l(767) ? (l(540) ? (l(514) ? (l(499) ? ((e(488) || (e(490) || (e(492) || (e(494) || e(497))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(489) || (e(491) || (e(493) || A2(r, 495, 496)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (e(498) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterTitlecase) : $elm$core$Maybe$Nothing))) : (l(506) ? ((e(499) || (e(501) || e(505))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(500) || A2(r, 502, 504)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : ((e(506) || (e(508) || (e(510) || e(512)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(507) || (e(509) || (e(511) || e(513)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)))) : (l(526) ? ((e(514) || (e(516) || (e(518) || (e(520) || (e(522) || e(524)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(515) || (e(517) || (e(519) || (e(521) || (e(523) || e(525)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : (l(532) ? ((e(526) || (e(528) || e(530))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(527) || (e(529) || e(531))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : ((e(532) || (e(534) || (e(536) || e(538)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(533) || (e(535) || (e(537) || e(539)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing))))) : (l(572) ? (l(551) ? ((e(540) || (e(542) || (e(544) || (e(546) || (e(548) || e(550)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(541) || (e(543) || (e(545) || (e(547) || e(549))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : (l(557) ? ((e(551) || (e(553) || e(555))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(552) || (e(554) || e(556))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : ((e(557) || (e(559) || (e(561) || A2(r, 563, 569)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(558) || (e(560) || (e(562) || A2(r, 570, 571)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)))) : (l(589) ? ((e(572) || (A2(r, 575, 576) || (e(578) || (e(583) || (e(585) || e(587)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((A2(r, 573, 574) || (e(577) || (A2(r, 579, 582) || (e(584) || (e(586) || e(588)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : (l(709) ? ((e(589) || (A2(r, 591, 659) || A2(r, 661, 687))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (e(590) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : (e(660) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 688, 705) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : (A2(r, 706, 708) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolModifier) : $elm$core$Maybe$Nothing))))) : ((e(709) || (A2(r, 722, 735) || (A2(r, 741, 747) || (e(749) || A2(r, 751, 766))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolModifier) : ((A2(r, 710, 721) || (A2(r, 736, 740) || (e(748) || e(750)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : $elm$core$Maybe$Nothing)))))) : (l(1006) ? (l(975) ? (l(893) ? ((e(767) || e(885)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolModifier) : (A2(r, 768, 879) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((e(880) || (e(882) || e(886))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(881) || (e(883) || (e(887) || A2(r, 891, 892)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(884) || e(890)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : $elm$core$Maybe$Nothing))))) : (l(903) ? (e(893) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (e(894) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((e(895) || e(902)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : (A2(r, 900, 901) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolModifier) : $elm$core$Maybe$Nothing)))) : (e(903) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((A2(r, 904, 906) || (e(908) || (A2(r, 910, 911) || (A2(r, 913, 929) || A2(r, 931, 939))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(912) || A2(r, 940, 974)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing))))) : (l(992) ? ((e(975) || (A2(r, 978, 980) || (e(984) || (e(986) || (e(988) || e(990)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((A2(r, 976, 977) || (A2(r, 981, 983) || (e(985) || (e(987) || (e(989) || e(991)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : (l(998) ? ((e(992) || (e(994) || e(996))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(993) || (e(995) || e(997))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : ((e(998) || (e(1000) || (e(1002) || e(1004)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(999) || (e(1001) || (e(1003) || e(1005)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing))))) : (l(1134) ? (l(1120) ? ((e(1006) || (e(1012) || (e(1015) || (A2(r, 1017, 1018) || A2(r, 1021, 1071))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((A2(r, 1007, 1011) || (e(1013) || (e(1016) || (A2(r, 1019, 1020) || A2(r, 1072, 1119))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (e(1014) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : $elm$core$Maybe$Nothing))) : (l(1126) ? ((e(1120) || (e(1122) || e(1124))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(1121) || (e(1123) || e(1125))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : ((e(1126) || (e(1128) || (e(1130) || e(1132)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(1127) || (e(1129) || (e(1131) || e(1133)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)))) : (l(1146) ? ((e(1134) || (e(1136) || (e(1138) || (e(1140) || (e(1142) || e(1144)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(1135) || (e(1137) || (e(1139) || (e(1141) || (e(1143) || e(1145)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : (l(1152) ? ((e(1146) || (e(1148) || e(1150))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(1147) || (e(1149) || e(1151))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : ((e(1152) || (e(1162) || e(1164))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(1153) || (e(1163) || e(1165))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (e(1154) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 1155, 1159) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 1160, 1161) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkEnclosing) : $elm$core$Maybe$Nothing))))))))))) : (l(1756) ? (l(1268) ? (l(1215) ? (l(1189) ? (l(1176) ? ((e(1166) || (e(1168) || (e(1170) || (e(1172) || e(1174))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(1167) || (e(1169) || (e(1171) || (e(1173) || e(1175))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : (l(1181) ? ((e(1176) || (e(1178) || e(1180))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(1177) || e(1179)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : ((e(1181) || (e(1183) || (e(1185) || e(1187)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(1182) || (e(1184) || (e(1186) || e(1188)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)))) : (l(1201) ? ((e(1189) || (e(1191) || (e(1193) || (e(1195) || (e(1197) || e(1199)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(1190) || (e(1192) || (e(1194) || (e(1196) || (e(1198) || e(1200)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : (l(1207) ? ((e(1201) || (e(1203) || e(1205))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(1202) || (e(1204) || e(1206))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : ((e(1207) || (e(1209) || (e(1211) || e(1213)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(1208) || (e(1210) || (e(1212) || e(1214)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing))))) : (l(1241) ? (l(1227) ? ((e(1215) || (e(1218) || (e(1220) || (e(1222) || (e(1224) || e(1226)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((A2(r, 1216, 1217) || (e(1219) || (e(1221) || (e(1223) || e(1225))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : (l(1233) ? ((e(1227) || (e(1229) || e(1232))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(1228) || A2(r, 1230, 1231)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : ((e(1233) || (e(1235) || (e(1237) || e(1239)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(1234) || (e(1236) || (e(1238) || e(1240)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)))) : (l(1253) ? ((e(1241) || (e(1243) || (e(1245) || (e(1247) || (e(1249) || e(1251)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(1242) || (e(1244) || (e(1246) || (e(1248) || (e(1250) || e(1252)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : (l(1259) ? ((e(1253) || (e(1255) || e(1257))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(1254) || (e(1256) || e(1258))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : ((e(1259) || (e(1261) || (e(1263) || (e(1265) || e(1267))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(1260) || (e(1262) || (e(1264) || e(1266)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)))))) : (l(1318) ? (l(1292) ? (l(1279) ? ((e(1268) || (e(1270) || (e(1272) || (e(1274) || (e(1276) || e(1278)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(1269) || (e(1271) || (e(1273) || (e(1275) || e(1277))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : (l(1284) ? ((e(1279) || (e(1281) || e(1283))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(1280) || e(1282)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : ((e(1284) || (e(1286) || (e(1288) || e(1290)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(1285) || (e(1287) || (e(1289) || e(1291)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)))) : (l(1304) ? ((e(1292) || (e(1294) || (e(1296) || (e(1298) || (e(1300) || e(1302)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(1293) || (e(1295) || (e(1297) || (e(1299) || (e(1301) || e(1303)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : (l(1310) ? ((e(1304) || (e(1306) || e(1308))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(1305) || (e(1307) || e(1309))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : ((e(1310) || (e(1312) || (e(1314) || e(1316)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(1311) || (e(1313) || (e(1315) || e(1317)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing))))) : (l(1478) ? (l(1369) ? ((e(1318) || (e(1320) || (e(1322) || (e(1324) || (e(1326) || A2(r, 1329, 1366)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(1319) || (e(1321) || (e(1323) || (e(1325) || e(1327))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : (l(1424) ? (e(1369) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : ((A2(r, 1370, 1375) || e(1417)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 1376, 1416) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (e(1418) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationDash) : (A2(r, 1421, 1422) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (e(1423) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolCurrency) : $elm$core$Maybe$Nothing)))))) : ((A2(r, 1425, 1469) || (e(1471) || (A2(r, 1473, 1474) || A2(r, 1476, 1477)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(1470) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationDash) : ((e(1472) || e(1475)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing))))) : (l(1563) ? ((e(1478) || (A2(r, 1523, 1524) || (A2(r, 1545, 1546) || A2(r, 1548, 1549)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((e(1479) || A2(r, 1552, 1562)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 1488, 1514) || A2(r, 1519, 1522)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 1536, 1541) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$OtherFormat) : (A2(r, 1542, 1544) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : (e(1547) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolCurrency) : (A2(r, 1550, 1551) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : $elm$core$Maybe$Nothing))))))) : (l(1631) ? ((e(1563) || A2(r, 1565, 1567)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(1564) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$OtherFormat) : ((A2(r, 1568, 1599) || A2(r, 1601, 1610)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(1600) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : (A2(r, 1611, 1630) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing))))) : ((e(1631) || (e(1648) || A2(r, 1750, 1755))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 1632, 1641) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : ((A2(r, 1642, 1645) || e(1748)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((A2(r, 1646, 1647) || (A2(r, 1649, 1747) || e(1749))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing))))))))) : (l(2556) ? (l(2248) ? (l(2035) ? (l(1790) ? ((e(1756) || (A2(r, 1759, 1764) || (A2(r, 1767, 1768) || A2(r, 1770, 1773)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(1757) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$OtherFormat) : ((e(1758) || (e(1769) || e(1789))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 1765, 1766) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : ((A2(r, 1774, 1775) || A2(r, 1786, 1788)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 1776, 1785) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : $elm$core$Maybe$Nothing)))))) : (l(1839) ? (e(1790) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : ((e(1791) || (e(1808) || A2(r, 1810, 1838))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 1792, 1805) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(1807) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$OtherFormat) : (e(1809) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing))))) : ((e(1839) || (A2(r, 1869, 1957) || (e(1969) || A2(r, 1994, 2026)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 1840, 1866) || (A2(r, 1958, 1968) || A2(r, 2027, 2034))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 1984, 1993) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : $elm$core$Maybe$Nothing))))) : (l(2087) ? (l(2045) ? (e(2035) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 2036, 2037) || e(2042)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : (e(2038) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 2039, 2041) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing)))) : ((e(2045) || (A2(r, 2070, 2073) || (A2(r, 2075, 2083) || A2(r, 2085, 2086)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 2046, 2047) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolCurrency) : (A2(r, 2048, 2069) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((e(2074) || e(2084)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : $elm$core$Maybe$Nothing))))) : (l(2143) ? ((e(2087) || (A2(r, 2089, 2093) || A2(r, 2137, 2139))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(2088) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : ((A2(r, 2096, 2110) || e(2142)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 2112, 2136) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing)))) : ((A2(r, 2144, 2154) || (A2(r, 2160, 2183) || (A2(r, 2185, 2190) || A2(r, 2208, 2247)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(2184) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolModifier) : (A2(r, 2192, 2193) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$OtherFormat) : (A2(r, 2200, 2207) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing))))))) : (l(2432) ? (l(2368) ? ((e(2248) || (A2(r, 2308, 2361) || e(2365))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(2249) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : ((A2(r, 2250, 2273) || (A2(r, 2275, 2306) || (e(2362) || e(2364)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(2274) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$OtherFormat) : ((e(2307) || (e(2363) || A2(r, 2366, 2367))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing))))) : (l(2391) ? ((e(2368) || (A2(r, 2377, 2380) || A2(r, 2382, 2383))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 2369, 2376) || (e(2381) || A2(r, 2385, 2390))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(2384) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing))) : ((e(2391) || A2(r, 2402, 2403)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 2392, 2401) || A2(r, 2418, 2431)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 2404, 2405) || e(2416)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 2406, 2415) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (e(2417) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : $elm$core$Maybe$Nothing))))))) : (l(2502) ? (l(2473) ? ((e(2432) || (A2(r, 2437, 2444) || (A2(r, 2447, 2448) || A2(r, 2451, 2472)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(2433) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 2434, 2435) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing))) : ((A2(r, 2474, 2480) || (e(2482) || (A2(r, 2486, 2489) || e(2493)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((e(2492) || A2(r, 2497, 2500)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 2494, 2496) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing)))) : (l(2529) ? ((A2(r, 2503, 2504) || (A2(r, 2507, 2508) || e(2519))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (e(2509) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((e(2510) || (A2(r, 2524, 2525) || A2(r, 2527, 2528))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing))) : ((e(2529) || A2(r, 2544, 2545)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 2530, 2531) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 2534, 2543) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : ((A2(r, 2546, 2547) || e(2555)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolCurrency) : (A2(r, 2548, 2553) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : (e(2554) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : $elm$core$Maybe$Nothing)))))))))) : (l(2820) ? (l(2688) ? (l(2619) ? ((e(2556) || (A2(r, 2565, 2570) || (A2(r, 2575, 2576) || (A2(r, 2579, 2600) || (A2(r, 2602, 2608) || (A2(r, 2610, 2611) || (A2(r, 2613, 2614) || A2(r, 2616, 2617)))))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(2557) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((e(2558) || A2(r, 2561, 2562)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(2563) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing)))) : (l(2648) ? ((e(2620) || (A2(r, 2625, 2626) || (A2(r, 2631, 2632) || (A2(r, 2635, 2637) || e(2641))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 2622, 2624) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing)) : ((A2(r, 2649, 2652) || (e(2654) || A2(r, 2674, 2676))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 2662, 2671) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : ((A2(r, 2672, 2673) || e(2677)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(2678) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing)))))) : (l(2760) ? (l(2737) ? (A2(r, 2689, 2690) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(2691) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 2693, 2701) || (A2(r, 2703, 2705) || (A2(r, 2707, 2728) || A2(r, 2730, 2736)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing))) : ((A2(r, 2738, 2739) || (A2(r, 2741, 2745) || e(2749))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((e(2748) || (A2(r, 2753, 2757) || e(2759))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 2750, 2752) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing)))) : (l(2789) ? ((e(2760) || (e(2765) || A2(r, 2786, 2787))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((e(2761) || A2(r, 2763, 2764)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((e(2768) || A2(r, 2784, 2785)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing))) : (A2(r, 2790, 2799) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (e(2800) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(2801) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolCurrency) : (e(2809) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 2810, 2815) || e(2817)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 2818, 2819) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing))))))))) : (l(2948) ? (l(2890) ? (l(2875) ? ((A2(r, 2821, 2828) || (A2(r, 2831, 2832) || (A2(r, 2835, 2856) || (A2(r, 2858, 2864) || (A2(r, 2866, 2867) || A2(r, 2869, 2873)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing) : ((e(2876) || (e(2879) || A2(r, 2881, 2884))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(2877) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((e(2878) || (e(2880) || A2(r, 2887, 2888))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing)))) : (l(2913) ? ((A2(r, 2891, 2892) || e(2903)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((e(2893) || A2(r, 2901, 2902)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 2908, 2909) || A2(r, 2911, 2912)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing))) : ((e(2913) || (e(2929) || e(2947))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 2914, 2915) || e(2946)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 2918, 2927) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (e(2928) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 2930, 2935) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : $elm$core$Maybe$Nothing))))))) : (l(3017) ? (l(2978) ? ((A2(r, 2949, 2954) || (A2(r, 2958, 2960) || (A2(r, 2962, 2965) || (A2(r, 2969, 2970) || (e(2972) || A2(r, 2974, 2975)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing) : ((A2(r, 2979, 2980) || (A2(r, 2984, 2986) || A2(r, 2990, 3001))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 3006, 3007) || (A2(r, 3009, 3010) || A2(r, 3014, 3016))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (e(3008) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing)))) : (l(3058) ? ((A2(r, 3018, 3020) || e(3031)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (e(3021) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(3024) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 3046, 3055) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (A2(r, 3056, 3057) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : $elm$core$Maybe$Nothing))))) : (e(3058) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : ((A2(r, 3059, 3064) || e(3066)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (e(3065) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolCurrency) : ((e(3072) || e(3076)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 3073, 3075) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (A2(r, 3077, 3084) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing))))))))))))) : (l(7695) ? (l(4881) ? (l(3763) ? (l(3389) ? (l(3217) ? (l(3167) ? ((A2(r, 3086, 3088) || (A2(r, 3090, 3112) || (A2(r, 3114, 3129) || (e(3133) || (A2(r, 3160, 3162) || e(3165)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((e(3132) || (A2(r, 3134, 3136) || (A2(r, 3142, 3144) || (A2(r, 3146, 3149) || A2(r, 3157, 3158))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 3137, 3140) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing))) : ((A2(r, 3168, 3169) || (e(3200) || (A2(r, 3205, 3212) || A2(r, 3214, 3216)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 3170, 3171) || e(3201)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 3174, 3183) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : ((e(3191) || e(3204)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 3192, 3198) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : (e(3199) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 3202, 3203) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing)))))))) : (l(3284) ? ((A2(r, 3218, 3240) || (A2(r, 3242, 3251) || (A2(r, 3253, 3257) || e(3261)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((e(3260) || (e(3263) || (e(3270) || A2(r, 3276, 3277)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((e(3262) || (A2(r, 3264, 3268) || (A2(r, 3271, 3272) || A2(r, 3274, 3275)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing))) : (l(3314) ? (A2(r, 3285, 3286) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 3293, 3294) || (A2(r, 3296, 3297) || e(3313))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 3298, 3299) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 3302, 3311) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : $elm$core$Maybe$Nothing)))) : ((e(3314) || (A2(r, 3332, 3340) || (A2(r, 3342, 3344) || A2(r, 3346, 3386)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((e(3315) || A2(r, 3330, 3331)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 3328, 3329) || A2(r, 3387, 3388)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing)))))) : (l(3534) ? (l(3425) ? ((e(3389) || (e(3406) || (A2(r, 3412, 3414) || A2(r, 3423, 3424)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 3390, 3392) || (A2(r, 3398, 3400) || (A2(r, 3402, 3404) || e(3415)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 3393, 3396) || e(3405)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(3407) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 3416, 3422) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : $elm$core$Maybe$Nothing))))) : (l(3457) ? ((e(3425) || A2(r, 3450, 3455)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 3426, 3427) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 3430, 3439) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (A2(r, 3440, 3448) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : (e(3449) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : $elm$core$Maybe$Nothing))))) : ((e(3457) || e(3530)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 3458, 3459) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 3461, 3478) || (A2(r, 3482, 3505) || (A2(r, 3507, 3515) || (e(3517) || A2(r, 3520, 3526))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing))))) : (l(3653) ? (l(3571) ? ((A2(r, 3535, 3537) || (A2(r, 3544, 3551) || e(3570))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 3538, 3540) || e(3542)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 3558, 3567) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : $elm$core$Maybe$Nothing))) : (e(3571) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (e(3572) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((A2(r, 3585, 3632) || (A2(r, 3634, 3635) || A2(r, 3648, 3652))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((e(3633) || A2(r, 3636, 3642)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(3647) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolCurrency) : $elm$core$Maybe$Nothing)))))) : (l(3715) ? ((e(3653) || A2(r, 3713, 3714)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(3654) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : (A2(r, 3655, 3662) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((e(3663) || A2(r, 3674, 3675)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 3664, 3673) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : $elm$core$Maybe$Nothing))))) : ((e(3716) || (A2(r, 3718, 3722) || (A2(r, 3724, 3747) || (e(3749) || (A2(r, 3751, 3760) || e(3762)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(3761) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing)))))) : (l(4151) ? (l(3898) ? (l(3859) ? ((e(3763) || (e(3773) || (A2(r, 3776, 3780) || (A2(r, 3804, 3807) || e(3840))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 3764, 3772) || A2(r, 3784, 3790)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(3782) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : (A2(r, 3792, 3801) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (A2(r, 3841, 3843) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 3844, 3858) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing)))))) : (l(3881) ? ((e(3859) || (A2(r, 3861, 3863) || A2(r, 3866, 3871))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (e(3860) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 3864, 3865) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 3872, 3880) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : $elm$core$Maybe$Nothing)))) : (e(3881) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (A2(r, 3882, 3891) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : ((e(3892) || (e(3894) || e(3896))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : ((e(3893) || (e(3895) || e(3897))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing)))))) : (l(3980) ? (l(3912) ? ((e(3898) || e(3900)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : ((e(3899) || e(3901)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : (A2(r, 3902, 3903) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (A2(r, 3904, 3911) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing)))) : ((A2(r, 3913, 3948) || A2(r, 3976, 3979)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 3953, 3966) || (A2(r, 3968, 3972) || A2(r, 3974, 3975))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(3967) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (e(3973) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing))))) : (l(4047) ? (e(3980) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 3981, 3991) || (A2(r, 3993, 4028) || e(4038))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 4030, 4037) || (A2(r, 4039, 4044) || e(4046))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : $elm$core$Maybe$Nothing))) : ((e(4047) || A2(r, 4053, 4056)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : ((A2(r, 4048, 4052) || A2(r, 4057, 4058)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 4096, 4138) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 4139, 4140) || e(4145)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 4141, 4144) || A2(r, 4146, 4150)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing)))))))) : (l(4238) ? (l(4189) ? ((e(4151) || (A2(r, 4153, 4154) || (A2(r, 4157, 4158) || A2(r, 4184, 4185)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((e(4152) || (A2(r, 4155, 4156) || A2(r, 4182, 4183))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((e(4159) || (A2(r, 4176, 4181) || A2(r, 4186, 4188))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 4160, 4169) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (A2(r, 4170, 4175) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing))))) : (l(4208) ? ((e(4189) || (e(4193) || (A2(r, 4197, 4198) || A2(r, 4206, 4207)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 4190, 4192) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 4194, 4196) || A2(r, 4199, 4205)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing))) : ((e(4208) || A2(r, 4213, 4225)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 4209, 4212) || (e(4226) || (A2(r, 4229, 4230) || e(4237)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 4227, 4228) || A2(r, 4231, 4236)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing))))) : (l(4351) ? (l(4255) ? (e(4238) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((e(4239) || A2(r, 4250, 4252)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (A2(r, 4240, 4249) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (e(4253) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(4254) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : $elm$core$Maybe$Nothing))))) : (e(4255) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : ((A2(r, 4256, 4293) || (e(4295) || e(4301))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((A2(r, 4304, 4346) || A2(r, 4349, 4350)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (e(4347) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(4348) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : $elm$core$Maybe$Nothing)))))) : (l(4745) ? (e(4351) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((A2(r, 4352, 4680) || (A2(r, 4682, 4685) || (A2(r, 4688, 4694) || (e(4696) || (A2(r, 4698, 4701) || A2(r, 4704, 4744)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing)) : ((A2(r, 4746, 4749) || (A2(r, 4752, 4784) || (A2(r, 4786, 4789) || (A2(r, 4792, 4798) || (e(4800) || (A2(r, 4802, 4805) || (A2(r, 4808, 4822) || A2(r, 4824, 4880)))))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing)))))) : (l(6764) ? (l(6143) ? (l(5918) ? (l(5741) ? ((A2(r, 4882, 4885) || (A2(r, 4888, 4954) || (A2(r, 4992, 5007) || A2(r, 5121, 5740)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 4957, 4959) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 4960, 4968) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 4969, 4988) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : (A2(r, 5008, 5017) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 5024, 5109) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : (A2(r, 5112, 5117) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (e(5120) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationDash) : $elm$core$Maybe$Nothing)))))))) : (l(5791) ? (e(5741) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (e(5742) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((A2(r, 5743, 5759) || A2(r, 5761, 5786)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(5760) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SeparatorSpace) : (e(5787) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : (e(5788) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : $elm$core$Maybe$Nothing)))))) : ((A2(r, 5792, 5866) || (A2(r, 5873, 5880) || A2(r, 5888, 5905))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 5867, 5869) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 5870, 5872) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberLetter) : (A2(r, 5906, 5908) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(5909) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing))))))) : (l(6070) ? ((A2(r, 5919, 5937) || (A2(r, 5952, 5969) || (A2(r, 5984, 5996) || (A2(r, 5998, 6000) || A2(r, 6016, 6067))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 5938, 5939) || (A2(r, 5970, 5971) || (A2(r, 6002, 6003) || A2(r, 6068, 6069)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(5940) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (A2(r, 5941, 5942) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing)))) : (l(6102) ? ((e(6070) || (A2(r, 6078, 6085) || A2(r, 6087, 6088))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 6071, 6077) || (e(6086) || A2(r, 6089, 6099))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 6100, 6101) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing))) : ((e(6102) || A2(r, 6104, 6106)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(6103) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : (e(6107) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolCurrency) : (e(6108) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(6109) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 6112, 6121) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (A2(r, 6128, 6137) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : $elm$core$Maybe$Nothing)))))))))) : (l(6463) ? (l(6278) ? ((A2(r, 6144, 6149) || A2(r, 6151, 6154)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(6150) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationDash) : ((A2(r, 6155, 6157) || (e(6159) || e(6277))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(6158) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$OtherFormat) : (A2(r, 6160, 6169) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : ((A2(r, 6176, 6210) || (A2(r, 6212, 6264) || A2(r, 6272, 6276))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(6211) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : $elm$core$Maybe$Nothing))))))) : (l(6434) ? ((e(6278) || (e(6313) || A2(r, 6432, 6433))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 6279, 6312) || (e(6314) || (A2(r, 6320, 6389) || A2(r, 6400, 6430)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing)) : ((e(6434) || (A2(r, 6439, 6440) || (e(6450) || A2(r, 6457, 6459)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 6435, 6438) || (A2(r, 6441, 6443) || (A2(r, 6448, 6449) || A2(r, 6451, 6456)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing)))) : (l(6680) ? ((e(6464) || A2(r, 6622, 6655)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 6468, 6469) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((A2(r, 6470, 6479) || A2(r, 6608, 6617)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : ((A2(r, 6480, 6509) || (A2(r, 6512, 6516) || (A2(r, 6528, 6571) || (A2(r, 6576, 6601) || A2(r, 6656, 6678))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(6618) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : (e(6679) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing)))))) : (l(6742) ? ((e(6680) || e(6683)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 6681, 6682) || e(6741)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (A2(r, 6686, 6687) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 6688, 6740) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing)))) : ((e(6742) || (A2(r, 6744, 6750) || (e(6752) || (e(6754) || A2(r, 6757, 6763))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((e(6743) || (e(6753) || A2(r, 6755, 6756))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing)))))) : (l(7167) ? (l(7001) ? (l(6911) ? ((e(6764) || (A2(r, 6771, 6780) || (e(6783) || (A2(r, 6832, 6845) || A2(r, 6847, 6862))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 6765, 6770) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 6784, 6793) || A2(r, 6800, 6809)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : ((A2(r, 6816, 6822) || A2(r, 6824, 6829)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(6823) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : (e(6846) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkEnclosing) : $elm$core$Maybe$Nothing)))))) : (l(6970) ? ((A2(r, 6912, 6915) || (e(6964) || A2(r, 6966, 6969))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((e(6916) || e(6965)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (A2(r, 6917, 6963) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing))) : ((e(6970) || (e(6972) || e(6978))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((e(6971) || (A2(r, 6973, 6977) || A2(r, 6979, 6980))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (A2(r, 6981, 6988) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 6992, 7000) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : $elm$core$Maybe$Nothing)))))) : (l(7081) ? (l(7039) ? (e(7001) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : ((A2(r, 7002, 7008) || A2(r, 7037, 7038)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((A2(r, 7009, 7018) || A2(r, 7028, 7036)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 7019, 7027) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing)))) : ((A2(r, 7040, 7041) || (A2(r, 7074, 7077) || e(7080))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((e(7042) || (e(7073) || A2(r, 7078, 7079))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (A2(r, 7043, 7072) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing)))) : (l(7142) ? ((e(7081) || A2(r, 7083, 7085)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(7082) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 7086, 7087) || A2(r, 7098, 7141)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 7088, 7097) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : $elm$core$Maybe$Nothing)))) : ((e(7142) || (A2(r, 7144, 7145) || (e(7149) || A2(r, 7151, 7153)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((e(7143) || (A2(r, 7146, 7148) || (e(7150) || A2(r, 7154, 7155)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (A2(r, 7164, 7166) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing)))))) : (l(7412) ? (l(7293) ? ((e(7167) || A2(r, 7227, 7231)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((A2(r, 7168, 7203) || (A2(r, 7245, 7247) || A2(r, 7258, 7287))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 7204, 7211) || A2(r, 7220, 7221)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 7212, 7219) || A2(r, 7222, 7223)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 7232, 7241) || A2(r, 7248, 7257)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (A2(r, 7288, 7292) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : $elm$core$Maybe$Nothing)))))) : (l(7378) ? (e(7293) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : ((A2(r, 7294, 7295) || A2(r, 7360, 7367)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 7296, 7304) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((A2(r, 7312, 7354) || A2(r, 7357, 7359)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : (A2(r, 7376, 7377) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing))))) : ((e(7378) || (A2(r, 7380, 7392) || (A2(r, 7394, 7400) || e(7405)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(7379) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(7393) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 7401, 7404) || A2(r, 7406, 7411)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing)))))) : (l(7680) ? ((e(7412) || (A2(r, 7416, 7417) || A2(r, 7616, 7679))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 7413, 7414) || e(7418)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(7415) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 7424, 7467) || (A2(r, 7531, 7543) || A2(r, 7545, 7578))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((A2(r, 7468, 7530) || (e(7544) || A2(r, 7579, 7615))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : $elm$core$Maybe$Nothing))))) : (l(7686) ? ((e(7680) || (e(7682) || e(7684))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(7681) || (e(7683) || e(7685))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : ((e(7686) || (e(7688) || (e(7690) || (e(7692) || e(7694))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(7687) || (e(7689) || (e(7691) || e(7693)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)))))))) : (l(7904) ? (l(7794) ? (l(7743) ? (l(7718) ? (l(7705) ? ((e(7695) || (e(7697) || (e(7699) || (e(7701) || e(7703))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(7696) || (e(7698) || (e(7700) || (e(7702) || e(7704))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : (l(7710) ? ((e(7705) || (e(7707) || e(7709))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(7706) || e(7708)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : ((e(7710) || (e(7712) || (e(7714) || e(7716)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(7711) || (e(7713) || (e(7715) || e(7717)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)))) : (l(7729) ? ((e(7718) || (e(7720) || (e(7722) || (e(7724) || (e(7726) || e(7728)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(7719) || (e(7721) || (e(7723) || (e(7725) || e(7727))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : (l(7735) ? ((e(7729) || (e(7731) || e(7733))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(7730) || (e(7732) || e(7734))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : ((e(7735) || (e(7737) || (e(7739) || e(7741)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(7736) || (e(7738) || (e(7740) || e(7742)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing))))) : (l(7767) ? (l(7754) ? ((e(7743) || (e(7745) || (e(7747) || (e(7749) || (e(7751) || e(7753)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(7744) || (e(7746) || (e(7748) || (e(7750) || e(7752))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : (l(7759) ? ((e(7754) || (e(7756) || e(7758))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(7755) || e(7757)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : ((e(7759) || (e(7761) || (e(7763) || e(7765)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(7760) || (e(7762) || (e(7764) || e(7766)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)))) : (l(7779) ? ((e(7767) || (e(7769) || (e(7771) || (e(7773) || (e(7775) || e(7777)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(7768) || (e(7770) || (e(7772) || (e(7774) || (e(7776) || e(7778)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : (l(7785) ? ((e(7779) || (e(7781) || e(7783))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(7780) || (e(7782) || e(7784))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : ((e(7785) || (e(7787) || (e(7789) || (e(7791) || e(7793))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(7786) || (e(7788) || (e(7790) || e(7792)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)))))) : (l(7852) ? (l(7818) ? (l(7805) ? ((e(7794) || (e(7796) || (e(7798) || (e(7800) || (e(7802) || e(7804)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(7795) || (e(7797) || (e(7799) || (e(7801) || e(7803))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : (l(7810) ? ((e(7805) || (e(7807) || e(7809))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(7806) || e(7808)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : ((e(7810) || (e(7812) || (e(7814) || e(7816)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(7811) || (e(7813) || (e(7815) || e(7817)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)))) : (l(7838) ? ((e(7818) || (e(7820) || (e(7822) || (e(7824) || (e(7826) || e(7828)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(7819) || (e(7821) || (e(7823) || (e(7825) || (e(7827) || A2(r, 7829, 7837)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : (l(7844) ? ((e(7838) || (e(7840) || e(7842))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(7839) || (e(7841) || e(7843))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : ((e(7844) || (e(7846) || (e(7848) || e(7850)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(7845) || (e(7847) || (e(7849) || e(7851)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing))))) : (l(7877) ? (l(7863) ? ((e(7852) || (e(7854) || (e(7856) || (e(7858) || (e(7860) || e(7862)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(7853) || (e(7855) || (e(7857) || (e(7859) || e(7861))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : (l(7869) ? ((e(7863) || (e(7865) || e(7867))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(7864) || (e(7866) || e(7868))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : ((e(7869) || (e(7871) || (e(7873) || e(7875)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(7870) || (e(7872) || (e(7874) || e(7876)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)))) : (l(7889) ? ((e(7877) || (e(7879) || (e(7881) || (e(7883) || (e(7885) || e(7887)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(7878) || (e(7880) || (e(7882) || (e(7884) || (e(7886) || e(7888)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : (l(7895) ? ((e(7889) || (e(7891) || e(7893))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(7890) || (e(7892) || e(7894))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : ((e(7895) || (e(7897) || (e(7899) || (e(7901) || e(7903))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(7896) || (e(7898) || (e(7900) || e(7902)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing))))))) : (l(8273) ? (l(8103) ? (l(7928) ? (l(7915) ? ((e(7904) || (e(7906) || (e(7908) || (e(7910) || (e(7912) || e(7914)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(7905) || (e(7907) || (e(7909) || (e(7911) || e(7913))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : (l(7920) ? ((e(7915) || (e(7917) || e(7919))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(7916) || e(7918)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : ((e(7920) || (e(7922) || (e(7924) || e(7926)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(7921) || (e(7923) || (e(7925) || e(7927)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)))) : (l(7983) ? (l(7933) ? ((e(7928) || (e(7930) || e(7932))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(7929) || e(7931)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : ((e(7933) || (A2(r, 7935, 7943) || (A2(r, 7952, 7957) || A2(r, 7968, 7975)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(7934) || (A2(r, 7944, 7951) || (A2(r, 7960, 7965) || A2(r, 7976, 7982)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing))) : (l(8039) ? ((e(7983) || (A2(r, 7992, 7999) || (A2(r, 8008, 8013) || ((A2($elm$core$Basics$modBy, 2, code) === 1) && A2(r, 8025, 8031))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((A2(r, 7984, 7991) || (A2(r, 8000, 8005) || (A2(r, 8016, 8023) || A2(r, 8032, 8038)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : ((e(8039) || (A2(r, 8048, 8061) || (A2(r, 8064, 8071) || (A2(r, 8080, 8087) || A2(r, 8096, 8102))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (A2(r, 8040, 8047) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((A2(r, 8072, 8079) || A2(r, 8088, 8095)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterTitlecase) : $elm$core$Maybe$Nothing)))))) : (l(8191) ? (l(8140) ? ((e(8103) || (A2(r, 8112, 8116) || (A2(r, 8118, 8119) || (e(8126) || (A2(r, 8130, 8132) || A2(r, 8134, 8135)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((A2(r, 8104, 8111) || e(8124)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterTitlecase) : ((A2(r, 8120, 8123) || A2(r, 8136, 8139)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(8125) || A2(r, 8127, 8129)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolModifier) : $elm$core$Maybe$Nothing)))) : (l(8167) ? (e(8140) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterTitlecase) : ((A2(r, 8141, 8143) || A2(r, 8157, 8159)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolModifier) : ((A2(r, 8144, 8147) || (A2(r, 8150, 8151) || A2(r, 8160, 8166))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (A2(r, 8152, 8155) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)))) : ((e(8167) || (A2(r, 8178, 8180) || A2(r, 8182, 8183))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((A2(r, 8168, 8172) || A2(r, 8184, 8187)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((A2(r, 8173, 8175) || A2(r, 8189, 8190)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolModifier) : (e(8188) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterTitlecase) : $elm$core$Maybe$Nothing)))))) : (l(8232) ? (A2(r, 8192, 8202) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SeparatorSpace) : (A2(r, 8203, 8207) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$OtherFormat) : (A2(r, 8208, 8213) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationDash) : ((A2(r, 8214, 8215) || A2(r, 8224, 8231)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((e(8216) || (A2(r, 8219, 8220) || e(8223))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationInitialQuote) : ((e(8217) || e(8221)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationFinalQuote) : ((e(8218) || e(8222)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : $elm$core$Maybe$Nothing))))))) : (l(8250) ? (e(8232) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SeparatorLine) : (e(8233) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SeparatorParagraph) : (A2(r, 8234, 8238) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$OtherFormat) : (e(8239) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SeparatorSpace) : (A2(r, 8240, 8248) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(8249) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationInitialQuote) : $elm$core$Maybe$Nothing)))))) : (e(8250) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationFinalQuote) : ((A2(r, 8251, 8254) || (A2(r, 8257, 8259) || A2(r, 8263, 8272))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 8255, 8256) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationConnector) : (e(8260) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : (e(8261) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : (e(8262) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : $elm$core$Maybe$Nothing)))))))))) : (l(8495) ? (l(8420) ? (l(8316) ? ((e(8273) || (e(8275) || A2(r, 8277, 8286))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((e(8274) || A2(r, 8314, 8315)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : (e(8276) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationConnector) : (e(8287) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SeparatorSpace) : ((A2(r, 8288, 8292) || A2(r, 8294, 8303)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$OtherFormat) : ((e(8304) || A2(r, 8308, 8313)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : (e(8305) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : $elm$core$Maybe$Nothing))))))) : (l(8333) ? ((e(8316) || A2(r, 8330, 8332)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : (e(8317) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : (e(8318) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : (e(8319) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : (A2(r, 8320, 8329) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : $elm$core$Maybe$Nothing))))) : (e(8333) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : (e(8334) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : (A2(r, 8336, 8348) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : (A2(r, 8352, 8384) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolCurrency) : ((A2(r, 8400, 8412) || e(8417)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 8413, 8416) || A2(r, 8418, 8419)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkEnclosing) : $elm$core$Maybe$Nothing)))))))) : (l(8468) ? (e(8420) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkEnclosing) : (A2(r, 8421, 8432) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 8448, 8449) || (A2(r, 8451, 8454) || A2(r, 8456, 8457))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : ((e(8450) || (e(8455) || (A2(r, 8459, 8461) || A2(r, 8464, 8466)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(8458) || (A2(r, 8462, 8463) || e(8467))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing))))) : (l(8484) ? ((e(8468) || (A2(r, 8470, 8471) || A2(r, 8478, 8483))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : ((e(8469) || A2(r, 8473, 8477)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : (e(8472) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : $elm$core$Maybe$Nothing))) : ((e(8484) || (e(8486) || (e(8488) || A2(r, 8490, 8493)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(8485) || (e(8487) || (e(8489) || e(8494)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : $elm$core$Maybe$Nothing))))) : (l(8603) ? (l(8523) ? ((e(8495) || (e(8500) || (e(8505) || (A2(r, 8508, 8509) || A2(r, 8518, 8521))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((A2(r, 8496, 8499) || (A2(r, 8510, 8511) || e(8517))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : (A2(r, 8501, 8504) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 8506, 8507) || e(8522)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 8512, 8516) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : $elm$core$Maybe$Nothing))))) : (l(8579) ? (e(8523) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : ((A2(r, 8524, 8525) || e(8527)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (e(8526) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (A2(r, 8528, 8543) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : (A2(r, 8544, 8578) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberLetter) : $elm$core$Maybe$Nothing))))) : (e(8579) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : (e(8580) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (A2(r, 8581, 8584) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberLetter) : (e(8585) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : ((A2(r, 8586, 8587) || A2(r, 8597, 8601)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : ((A2(r, 8592, 8596) || e(8602)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : $elm$core$Maybe$Nothing)))))))) : (l(8659) ? (l(8613) ? ((e(8603) || (e(8608) || e(8611))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : ((A2(r, 8604, 8607) || (A2(r, 8609, 8610) || e(8612))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : $elm$core$Maybe$Nothing)) : ((e(8613) || (A2(r, 8615, 8621) || (A2(r, 8623, 8653) || A2(r, 8656, 8657)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : ((e(8614) || (e(8622) || (A2(r, 8654, 8655) || e(8658)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : $elm$core$Maybe$Nothing))) : (l(8969) ? ((e(8659) || (A2(r, 8661, 8691) || A2(r, 8960, 8967))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : ((e(8660) || A2(r, 8692, 8959)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : (e(8968) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : $elm$core$Maybe$Nothing))) : ((e(8969) || (e(8971) || e(9002))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : ((e(8970) || e(9001)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : ((A2(r, 8972, 8991) || (A2(r, 8994, 9000) || A2(r, 9003, 9083))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 8992, 8993) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : $elm$core$Maybe$Nothing)))))))))))) : (l(65103) ? (l(42587) ? (l(11483) ? (l(11370) ? (l(10223) ? (l(10092) ? (l(9654) ? ((e(9084) || (A2(r, 9115, 9139) || A2(r, 9180, 9185))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : ((A2(r, 9085, 9114) || (A2(r, 9140, 9179) || (A2(r, 9186, 9254) || (A2(r, 9280, 9290) || (A2(r, 9372, 9449) || A2(r, 9472, 9653)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : ((A2(r, 9312, 9371) || A2(r, 9450, 9471)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : $elm$core$Maybe$Nothing))) : (l(9727) ? ((e(9654) || (A2(r, 9656, 9664) || A2(r, 9666, 9719))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : ((e(9655) || (e(9665) || A2(r, 9720, 9726))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : $elm$core$Maybe$Nothing)) : ((e(9727) || e(9839)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : ((A2(r, 9728, 9838) || A2(r, 9840, 10087)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : ((e(10088) || e(10090)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : ((e(10089) || e(10091)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : $elm$core$Maybe$Nothing)))))) : (l(10175) ? ((e(10092) || (e(10094) || (e(10096) || (e(10098) || e(10100))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : ((e(10093) || (e(10095) || (e(10097) || (e(10099) || e(10101))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : (A2(r, 10102, 10131) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : (A2(r, 10132, 10174) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : $elm$core$Maybe$Nothing)))) : (l(10215) ? (e(10175) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : ((A2(r, 10176, 10180) || A2(r, 10183, 10213)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : ((e(10181) || e(10214)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : (e(10182) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : $elm$core$Maybe$Nothing)))) : ((e(10215) || (e(10217) || (e(10219) || e(10221)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : ((e(10216) || (e(10218) || (e(10220) || e(10222)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : $elm$core$Maybe$Nothing))))) : (l(10647) ? (l(10634) ? ((e(10223) || (e(10628) || (e(10630) || e(10632)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : ((A2(r, 10224, 10239) || A2(r, 10496, 10626)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : (A2(r, 10240, 10495) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : ((e(10627) || (e(10629) || (e(10631) || e(10633)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : $elm$core$Maybe$Nothing)))) : (l(10639) ? ((e(10634) || (e(10636) || e(10638))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : ((e(10635) || e(10637)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : $elm$core$Maybe$Nothing)) : ((e(10639) || (e(10641) || (e(10643) || e(10645)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : ((e(10640) || (e(10642) || (e(10644) || e(10646)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : $elm$core$Maybe$Nothing)))) : (l(11076) ? (l(10714) ? ((e(10647) || e(10712)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : ((e(10648) || e(10713)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : (A2(r, 10649, 10711) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : $elm$core$Maybe$Nothing))) : ((e(10714) || e(10748)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : ((e(10715) || e(10749)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : ((A2(r, 10716, 10747) || (A2(r, 10750, 11007) || A2(r, 11056, 11075))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : (A2(r, 11008, 11055) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : $elm$core$Maybe$Nothing))))) : (l(11311) ? ((e(11076) || A2(r, 11079, 11084)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : ((A2(r, 11077, 11078) || (A2(r, 11085, 11123) || (A2(r, 11126, 11157) || A2(r, 11159, 11263)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 11264, 11310) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing))) : ((e(11311) || (e(11360) || (A2(r, 11362, 11364) || (e(11367) || e(11369))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((A2(r, 11312, 11359) || (e(11361) || (A2(r, 11365, 11366) || e(11368)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)))))) : (l(11431) ? (l(11405) ? (l(11392) ? ((e(11370) || (e(11372) || (e(11377) || (A2(r, 11379, 11380) || A2(r, 11382, 11387))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(11371) || (A2(r, 11373, 11376) || (e(11378) || (e(11381) || A2(r, 11390, 11391))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : (A2(r, 11388, 11389) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : $elm$core$Maybe$Nothing))) : (l(11397) ? ((e(11392) || (e(11394) || e(11396))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(11393) || e(11395)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : ((e(11397) || (e(11399) || (e(11401) || e(11403)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(11398) || (e(11400) || (e(11402) || e(11404)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)))) : (l(11417) ? ((e(11405) || (e(11407) || (e(11409) || (e(11411) || (e(11413) || e(11415)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(11406) || (e(11408) || (e(11410) || (e(11412) || (e(11414) || e(11416)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : (l(11423) ? ((e(11417) || (e(11419) || e(11421))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(11418) || (e(11420) || e(11422))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : ((e(11423) || (e(11425) || (e(11427) || e(11429)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(11424) || (e(11426) || (e(11428) || e(11430)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing))))) : (l(11456) ? (l(11442) ? ((e(11431) || (e(11433) || (e(11435) || (e(11437) || (e(11439) || e(11441)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(11432) || (e(11434) || (e(11436) || (e(11438) || e(11440))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : (l(11448) ? ((e(11442) || (e(11444) || e(11446))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(11443) || (e(11445) || e(11447))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : ((e(11448) || (e(11450) || (e(11452) || e(11454)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(11449) || (e(11451) || (e(11453) || e(11455)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)))) : (l(11468) ? ((e(11456) || (e(11458) || (e(11460) || (e(11462) || (e(11464) || e(11466)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(11457) || (e(11459) || (e(11461) || (e(11463) || (e(11465) || e(11467)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : (l(11474) ? ((e(11468) || (e(11470) || e(11472))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(11469) || (e(11471) || e(11473))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : ((e(11474) || (e(11476) || (e(11478) || (e(11480) || e(11482))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(11475) || (e(11477) || (e(11479) || e(11481)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing))))))) : (l(12300) ? (l(11799) ? (l(11630) ? (l(11500) ? ((e(11483) || (e(11485) || (e(11487) || (e(11489) || A2(r, 11491, 11492))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(11484) || (e(11486) || (e(11488) || (e(11490) || e(11499))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : (A2(r, 11493, 11498) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : $elm$core$Maybe$Nothing))) : (l(11512) ? ((e(11500) || (e(11502) || e(11507))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(11501) || e(11506)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : (A2(r, 11503, 11505) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing))) : ((A2(r, 11513, 11516) || A2(r, 11518, 11519)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(11517) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : ((A2(r, 11520, 11557) || (e(11559) || e(11565))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (A2(r, 11568, 11623) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing)))))) : (l(11743) ? (e(11631) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : (e(11632) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(11647) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 11648, 11670) || (A2(r, 11680, 11686) || (A2(r, 11688, 11694) || (A2(r, 11696, 11702) || (A2(r, 11704, 11710) || (A2(r, 11712, 11718) || (A2(r, 11720, 11726) || (A2(r, 11728, 11734) || A2(r, 11736, 11742))))))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing)))) : (l(11781) ? (A2(r, 11744, 11775) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 11776, 11777) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((e(11778) || e(11780)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationInitialQuote) : (e(11779) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationFinalQuote) : $elm$core$Maybe$Nothing)))) : ((e(11781) || (e(11786) || e(11789))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationFinalQuote) : ((A2(r, 11782, 11784) || (e(11787) || A2(r, 11790, 11798))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((e(11785) || e(11788)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationInitialQuote) : $elm$core$Maybe$Nothing)))))) : (l(11842) ? (l(11812) ? ((e(11799) || e(11802)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationDash) : ((A2(r, 11800, 11801) || (e(11803) || A2(r, 11806, 11807))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((e(11804) || e(11808)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationInitialQuote) : ((e(11805) || e(11809)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationFinalQuote) : (e(11810) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : (e(11811) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : $elm$core$Maybe$Nothing)))))) : (l(11817) ? ((e(11812) || (e(11814) || e(11816))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : ((e(11813) || e(11815)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : $elm$core$Maybe$Nothing)) : (e(11817) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : ((A2(r, 11818, 11822) || (A2(r, 11824, 11833) || (A2(r, 11836, 11839) || e(11841)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(11823) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : ((A2(r, 11834, 11835) || e(11840)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationDash) : $elm$core$Maybe$Nothing)))))) : (l(11903) ? (l(11862) ? ((e(11842) || e(11861)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : ((A2(r, 11843, 11855) || A2(r, 11858, 11860)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 11856, 11857) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : $elm$core$Maybe$Nothing))) : ((e(11862) || (e(11864) || (e(11866) || e(11868)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : ((e(11863) || (e(11865) || e(11867))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : (e(11869) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationDash) : $elm$core$Maybe$Nothing)))) : (l(12292) ? ((A2(r, 11904, 11929) || (A2(r, 11931, 12019) || (A2(r, 12032, 12245) || A2(r, 12272, 12287)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (e(12288) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SeparatorSpace) : (A2(r, 12289, 12291) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing))) : (e(12292) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (e(12293) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : (e(12294) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(12295) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberLetter) : ((e(12296) || e(12298)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : ((e(12297) || e(12299)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : $elm$core$Maybe$Nothing)))))))))) : (l(12841) ? (l(12343) ? (l(12312) ? ((e(12300) || (e(12302) || (e(12304) || (e(12308) || e(12310))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : ((e(12301) || (e(12303) || (e(12305) || (e(12309) || e(12311))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : (A2(r, 12306, 12307) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : $elm$core$Maybe$Nothing))) : (l(12319) ? ((e(12312) || (e(12314) || e(12317))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : ((e(12313) || (e(12315) || e(12318))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : (e(12316) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationDash) : $elm$core$Maybe$Nothing))) : (e(12319) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : ((e(12320) || e(12342)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 12321, 12329) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberLetter) : (A2(r, 12330, 12333) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 12334, 12335) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (e(12336) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationDash) : (A2(r, 12337, 12341) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : $elm$core$Maybe$Nothing))))))))) : (l(12538) ? (l(12352) ? ((e(12343) || A2(r, 12350, 12351)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 12344, 12346) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberLetter) : (e(12347) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : (e(12348) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(12349) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing))))) : ((A2(r, 12353, 12438) || (e(12447) || A2(r, 12449, 12537))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 12441, 12442) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 12443, 12444) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolModifier) : (A2(r, 12445, 12446) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : (e(12448) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationDash) : $elm$core$Maybe$Nothing)))))) : (l(12689) ? ((e(12538) || (e(12543) || (A2(r, 12549, 12591) || A2(r, 12593, 12686)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(12539) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 12540, 12542) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : (e(12688) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : $elm$core$Maybe$Nothing)))) : ((e(12689) || (A2(r, 12694, 12703) || (A2(r, 12736, 12771) || (e(12783) || A2(r, 12800, 12830))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : ((A2(r, 12690, 12693) || A2(r, 12832, 12840)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : ((A2(r, 12704, 12735) || A2(r, 12784, 12799)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing)))))) : (l(42560) ? (l(19967) ? ((e(12841) || (A2(r, 12872, 12879) || (A2(r, 12881, 12895) || (A2(r, 12928, 12937) || A2(r, 12977, 12991))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : ((A2(r, 12842, 12871) || (e(12880) || (A2(r, 12896, 12927) || (A2(r, 12938, 12976) || (A2(r, 12992, 13311) || A2(r, 19904, 19966)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 13312, 19903) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing))) : (l(42237) ? ((e(19967) || A2(r, 42128, 42182)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : ((A2(r, 19968, 40980) || (A2(r, 40982, 42124) || A2(r, 42192, 42231))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((e(40981) || A2(r, 42232, 42236)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : $elm$core$Maybe$Nothing))) : ((e(42237) || e(42508)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : ((A2(r, 42238, 42239) || A2(r, 42509, 42511)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((A2(r, 42240, 42507) || (A2(r, 42512, 42527) || A2(r, 42538, 42539))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 42528, 42537) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : $elm$core$Maybe$Nothing)))))) : (l(42572) ? ((e(42560) || (e(42562) || (e(42564) || (e(42566) || (e(42568) || e(42570)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(42561) || (e(42563) || (e(42565) || (e(42567) || (e(42569) || e(42571)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : (l(42578) ? ((e(42572) || (e(42574) || e(42576))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(42573) || (e(42575) || e(42577))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : ((e(42578) || (e(42580) || (e(42582) || (e(42584) || e(42586))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(42579) || (e(42581) || (e(42583) || e(42585)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)))))))) : (l(42945) ? (l(42824) ? (l(42646) ? (l(42621) ? (l(42598) ? ((e(42587) || (e(42589) || (e(42591) || (e(42593) || (e(42595) || e(42597)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(42588) || (e(42590) || (e(42592) || (e(42594) || e(42596))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : (l(42603) ? ((e(42598) || (e(42600) || e(42602))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(42599) || e(42601)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : ((e(42603) || e(42605)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (e(42604) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : (e(42606) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((e(42607) || A2(r, 42612, 42620)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 42608, 42610) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkEnclosing) : (e(42611) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing)))))))) : (l(42632) ? (e(42621) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(42622) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(42623) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : ((e(42624) || (e(42626) || (e(42628) || e(42630)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(42625) || (e(42627) || (e(42629) || e(42631)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing))))) : (l(42638) ? ((e(42632) || (e(42634) || e(42636))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(42633) || (e(42635) || e(42637))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : ((e(42638) || (e(42640) || (e(42642) || e(42644)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(42639) || (e(42641) || (e(42643) || e(42645)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing))))) : (l(42795) ? (l(42751) ? ((e(42646) || (e(42648) || e(42650))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(42647) || (e(42649) || e(42651))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (A2(r, 42652, 42653) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : ((A2(r, 42654, 42655) || A2(r, 42736, 42737)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 42656, 42725) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 42726, 42735) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberLetter) : (A2(r, 42738, 42743) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing))))))) : ((A2(r, 42752, 42774) || A2(r, 42784, 42785)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolModifier) : (A2(r, 42775, 42783) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : ((e(42786) || (e(42788) || (e(42790) || (e(42792) || e(42794))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(42787) || (e(42789) || (e(42791) || e(42793)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing))))) : (l(42809) ? ((e(42795) || (e(42797) || (A2(r, 42799, 42801) || (e(42803) || (e(42805) || e(42807)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(42796) || (e(42798) || (e(42802) || (e(42804) || (e(42806) || e(42808)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : (l(42815) ? ((e(42809) || (e(42811) || e(42813))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(42810) || (e(42812) || e(42814))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : ((e(42815) || (e(42817) || (e(42819) || (e(42821) || e(42823))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(42816) || (e(42818) || (e(42820) || e(42822)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)))))) : (l(42882) ? (l(42848) ? (l(42835) ? ((e(42824) || (e(42826) || (e(42828) || (e(42830) || (e(42832) || e(42834)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(42825) || (e(42827) || (e(42829) || (e(42831) || e(42833))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : (l(42840) ? ((e(42835) || (e(42837) || e(42839))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(42836) || e(42838)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : ((e(42840) || (e(42842) || (e(42844) || e(42846)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(42841) || (e(42843) || (e(42845) || e(42847)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)))) : (l(42860) ? ((e(42848) || (e(42850) || (e(42852) || (e(42854) || (e(42856) || e(42858)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(42849) || (e(42851) || (e(42853) || (e(42855) || (e(42857) || e(42859)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : (l(42873) ? ((e(42860) || e(42862)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(42861) || (e(42863) || A2(r, 42865, 42872))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (e(42864) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : $elm$core$Maybe$Nothing))) : ((e(42873) || (e(42875) || (A2(r, 42877, 42878) || e(42880)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(42874) || (e(42876) || (e(42879) || e(42881)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing))))) : (l(42910) ? (l(42894) ? ((e(42882) || (e(42884) || (e(42886) || (e(42891) || e(42893))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(42883) || (e(42885) || (e(42887) || e(42892)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (e(42888) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : (A2(r, 42889, 42890) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolModifier) : $elm$core$Maybe$Nothing)))) : (l(42902) ? ((e(42894) || (e(42897) || A2(r, 42899, 42901))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (e(42895) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((e(42896) || e(42898)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing))) : ((e(42902) || (e(42904) || (e(42906) || e(42908)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(42903) || (e(42905) || (e(42907) || e(42909)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)))) : (l(42926) ? (l(42915) ? ((e(42910) || (e(42912) || e(42914))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(42911) || e(42913)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : ((e(42915) || (e(42917) || (e(42919) || e(42921)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(42916) || (e(42918) || (e(42920) || A2(r, 42922, 42925)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing))) : (l(42936) ? ((e(42926) || (A2(r, 42928, 42932) || e(42934))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(42927) || (e(42933) || e(42935))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : ((e(42936) || (e(42938) || (e(42940) || (e(42942) || e(42944))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((e(42937) || (e(42939) || (e(42941) || e(42943)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing))))))) : (l(43697) ? (l(43273) ? (l(43042) ? (l(42993) ? ((e(42945) || (e(42947) || (e(42952) || (e(42954) || (e(42967) || (e(42969) || ((A2($elm$core$Basics$modBy, 2, code) === 1) && A2(r, 42961, 42965)))))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(42946) || (A2(r, 42948, 42951) || (e(42953) || (e(42960) || (e(42966) || e(42968)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : (l(43002) ? ((A2(r, 42994, 42996) || A2(r, 43000, 43001)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : (e(42997) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : (e(42998) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (e(42999) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing)))) : (e(43002) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((A2(r, 43003, 43009) || (A2(r, 43011, 43013) || (A2(r, 43015, 43018) || A2(r, 43020, 43041)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((e(43010) || (e(43014) || e(43019))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing))))) : (l(43137) ? (l(43055) ? (e(43042) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 43043, 43044) || e(43047)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 43045, 43046) || e(43052)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 43048, 43051) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : $elm$core$Maybe$Nothing)))) : (A2(r, 43056, 43061) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : ((A2(r, 43062, 43063) || e(43065)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (e(43064) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolCurrency) : (A2(r, 43072, 43123) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 43124, 43127) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(43136) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing))))))) : (l(43249) ? ((e(43137) || A2(r, 43188, 43203)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (A2(r, 43138, 43187) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 43204, 43205) || A2(r, 43232, 43248)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 43214, 43215) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 43216, 43225) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : $elm$core$Maybe$Nothing))))) : ((e(43249) || e(43263)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 43250, 43255) || (e(43259) || A2(r, 43261, 43262))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 43256, 43258) || e(43260)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 43264, 43272) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : $elm$core$Maybe$Nothing))))))) : (l(43494) ? (l(43442) ? (e(43273) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : ((A2(r, 43274, 43301) || (A2(r, 43312, 43334) || (A2(r, 43360, 43388) || A2(r, 43396, 43441)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 43302, 43309) || (A2(r, 43335, 43345) || A2(r, 43392, 43394))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 43310, 43311) || e(43359)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((A2(r, 43346, 43347) || e(43395)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing))))) : (l(43453) ? (e(43442) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((e(43443) || (A2(r, 43446, 43449) || e(43452))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 43444, 43445) || A2(r, 43450, 43451)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing))) : ((e(43453) || e(43493)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 43454, 43456) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 43457, 43469) || A2(r, 43486, 43487)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(43471) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : (A2(r, 43472, 43481) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (A2(r, 43488, 43492) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing)))))))) : (l(43595) ? (l(43566) ? (e(43494) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : ((A2(r, 43495, 43503) || (A2(r, 43514, 43518) || A2(r, 43520, 43560))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 43504, 43513) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (A2(r, 43561, 43565) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing)))) : ((e(43566) || (A2(r, 43569, 43570) || (A2(r, 43573, 43574) || e(43587)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 43567, 43568) || A2(r, 43571, 43572)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 43584, 43586) || A2(r, 43588, 43594)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing)))) : (l(43632) ? ((e(43595) || A2(r, 43616, 43631)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(43596) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(43597) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (A2(r, 43600, 43609) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (A2(r, 43612, 43615) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing))))) : (e(43632) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : ((A2(r, 43633, 43638) || (e(43642) || A2(r, 43646, 43695))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 43639, 43641) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : ((e(43643) || e(43645)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((e(43644) || e(43696)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing))))))))) : (l(64274) ? (l(43815) ? (l(43743) ? ((e(43697) || (A2(r, 43701, 43702) || (A2(r, 43705, 43709) || (e(43712) || (e(43714) || A2(r, 43739, 43740)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 43698, 43700) || (A2(r, 43703, 43704) || (A2(r, 43710, 43711) || e(43713)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(43741) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : (e(43742) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing)))) : (l(43762) ? ((e(43743) || A2(r, 43760, 43761)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 43744, 43754) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((e(43755) || A2(r, 43758, 43759)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (A2(r, 43756, 43757) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing)))) : ((e(43762) || (A2(r, 43777, 43782) || (A2(r, 43785, 43790) || (A2(r, 43793, 43798) || A2(r, 43808, 43814))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 43763, 43764) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : (e(43765) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (e(43766) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing)))))) : (l(44008) ? ((A2(r, 43816, 43822) || A2(r, 43968, 44002)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 43824, 43866) || (A2(r, 43872, 43880) || A2(r, 43888, 43967))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(43867) || A2(r, 43882, 43883)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolModifier) : ((A2(r, 43868, 43871) || e(43881)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : ((A2(r, 44003, 44004) || A2(r, 44006, 44007)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (e(44005) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing)))))) : (l(55215) ? ((e(44008) || e(44013)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 44009, 44010) || e(44012)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (e(44011) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 44016, 44025) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (A2(r, 44032, 55203) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing))))) : ((A2(r, 55216, 55238) || (A2(r, 55243, 55291) || (A2(r, 63744, 64109) || A2(r, 64112, 64217)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 55296, 57343) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$OtherSurrogate) : (A2(r, 57344, 63743) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$OtherPrivateUse) : (A2(r, 64256, 64262) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing))))))) : (l(65048) ? (l(64466) ? (A2(r, 64275, 64279) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(64285) || (A2(r, 64287, 64296) || (A2(r, 64298, 64310) || (A2(r, 64312, 64316) || (e(64318) || (A2(r, 64320, 64321) || (A2(r, 64323, 64324) || A2(r, 64326, 64433)))))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(64286) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(64297) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : (A2(r, 64434, 64450) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolModifier) : $elm$core$Maybe$Nothing))))) : (l(64974) ? ((A2(r, 64467, 64829) || (A2(r, 64848, 64911) || A2(r, 64914, 64967))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(64830) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : (e(64831) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : (A2(r, 64832, 64847) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : $elm$core$Maybe$Nothing)))) : ((e(64975) || A2(r, 65021, 65023)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 65008, 65019) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(65020) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolCurrency) : (A2(r, 65024, 65039) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 65040, 65046) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(65047) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : $elm$core$Maybe$Nothing)))))))) : (l(65083) ? ((e(65048) || (e(65078) || (e(65080) || e(65082)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : ((e(65049) || e(65072)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 65056, 65071) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 65073, 65074) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationDash) : (A2(r, 65075, 65076) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationConnector) : ((e(65077) || (e(65079) || e(65081))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : $elm$core$Maybe$Nothing)))))) : (l(65089) ? ((e(65083) || (e(65085) || e(65087))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : ((e(65084) || (e(65086) || e(65088))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : $elm$core$Maybe$Nothing)) : ((e(65089) || (e(65091) || e(65095))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : ((e(65090) || (e(65092) || e(65096))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : ((A2(r, 65093, 65094) || A2(r, 65097, 65100)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 65101, 65102) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationConnector) : $elm$core$Maybe$Nothing))))))))))) : (l(71996) ? (l(69404) ? (l(66421) ? (l(65378) ? (l(65288) ? (l(65121) ? (e(65103) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationConnector) : ((A2(r, 65104, 65106) || (A2(r, 65108, 65111) || A2(r, 65119, 65120))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(65112) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationDash) : ((e(65113) || (e(65115) || e(65117))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : ((e(65114) || (e(65116) || e(65118))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : $elm$core$Maybe$Nothing))))) : (l(65129) ? ((e(65121) || e(65128)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((e(65122) || A2(r, 65124, 65126)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : (e(65123) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationDash) : $elm$core$Maybe$Nothing))) : ((e(65129) || e(65284)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolCurrency) : ((A2(r, 65130, 65131) || (A2(r, 65281, 65283) || A2(r, 65285, 65287))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((A2(r, 65136, 65140) || A2(r, 65142, 65276)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(65279) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$OtherFormat) : $elm$core$Maybe$Nothing)))))) : (l(65339) ? (e(65288) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : (e(65289) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : ((e(65290) || (e(65292) || (A2(r, 65294, 65295) || (A2(r, 65306, 65307) || A2(r, 65311, 65312))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((e(65291) || A2(r, 65308, 65310)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : (e(65293) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationDash) : (A2(r, 65296, 65305) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (A2(r, 65313, 65338) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing))))))) : (l(65370) ? (e(65339) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : (e(65340) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(65341) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : ((e(65342) || e(65344)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolModifier) : (e(65343) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationConnector) : (A2(r, 65345, 65369) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)))))) : (e(65370) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((e(65371) || e(65375)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : ((e(65372) || e(65374)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : ((e(65373) || e(65376)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : (e(65377) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing)))))))) : (l(65598) ? (l(65505) ? (l(65437) ? (e(65378) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOpen) : (e(65379) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationClose) : (A2(r, 65380, 65381) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((A2(r, 65382, 65391) || A2(r, 65393, 65436)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(65392) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : $elm$core$Maybe$Nothing))))) : ((e(65437) || (A2(r, 65440, 65470) || (A2(r, 65474, 65479) || (A2(r, 65482, 65487) || (A2(r, 65490, 65495) || A2(r, 65498, 65500)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 65438, 65439) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : (e(65504) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolCurrency) : $elm$core$Maybe$Nothing)))) : (l(65516) ? ((e(65505) || A2(r, 65509, 65510)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolCurrency) : ((e(65506) || A2(r, 65513, 65515)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : (e(65507) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolModifier) : ((e(65508) || e(65512)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : $elm$core$Maybe$Nothing)))) : (e(65516) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : ((A2(r, 65517, 65518) || A2(r, 65532, 65533)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 65529, 65531) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$OtherFormat) : ((A2(r, 65536, 65547) || (A2(r, 65549, 65574) || (A2(r, 65576, 65594) || A2(r, 65596, 65597)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing)))))) : (l(65999) ? (l(65855) ? ((A2(r, 65599, 65613) || (A2(r, 65616, 65629) || A2(r, 65664, 65786))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 65792, 65794) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 65799, 65843) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : (A2(r, 65847, 65854) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : $elm$core$Maybe$Nothing)))) : ((e(65855) || (A2(r, 65913, 65929) || (A2(r, 65932, 65934) || (A2(r, 65936, 65948) || e(65952))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 65856, 65908) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberLetter) : ((A2(r, 65909, 65912) || A2(r, 65930, 65931)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : $elm$core$Maybe$Nothing)))) : (l(66303) ? (A2(r, 66000, 66044) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : ((e(66045) || e(66272)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 66176, 66204) || A2(r, 66208, 66256)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 66273, 66299) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : $elm$core$Maybe$Nothing)))) : ((A2(r, 66304, 66335) || (A2(r, 66349, 66368) || (A2(r, 66370, 66377) || A2(r, 66384, 66420)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 66336, 66339) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : ((e(66369) || e(66378)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberLetter) : $elm$core$Maybe$Nothing))))))) : (l(67902) ? (l(67071) ? (l(66735) ? ((e(66421) || (A2(r, 66432, 66461) || (A2(r, 66464, 66499) || (A2(r, 66504, 66511) || A2(r, 66640, 66717))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 66422, 66426) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((e(66463) || e(66512)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 66513, 66517) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberLetter) : (A2(r, 66560, 66599) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : (A2(r, 66600, 66639) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (A2(r, 66720, 66729) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : $elm$core$Maybe$Nothing))))))) : (l(66939) ? ((A2(r, 66736, 66771) || A2(r, 66928, 66938)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : (A2(r, 66776, 66811) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((A2(r, 66816, 66855) || A2(r, 66864, 66915)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(66927) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing)))) : ((A2(r, 66940, 66954) || (A2(r, 66956, 66962) || A2(r, 66964, 66965))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((A2(r, 66967, 66977) || (A2(r, 66979, 66993) || (A2(r, 66995, 67001) || A2(r, 67003, 67004)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)))) : (l(67671) ? ((A2(r, 67072, 67382) || (A2(r, 67392, 67413) || (A2(r, 67424, 67431) || (A2(r, 67584, 67589) || (e(67592) || (A2(r, 67594, 67637) || (A2(r, 67639, 67640) || (e(67644) || A2(r, 67647, 67669))))))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 67456, 67461) || (A2(r, 67463, 67504) || A2(r, 67506, 67514))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : $elm$core$Maybe$Nothing)) : (l(67807) ? (e(67671) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((A2(r, 67672, 67679) || (A2(r, 67705, 67711) || A2(r, 67751, 67759))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : ((A2(r, 67680, 67702) || A2(r, 67712, 67742)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 67703, 67704) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : $elm$core$Maybe$Nothing)))) : ((A2(r, 67808, 67826) || (A2(r, 67828, 67829) || (A2(r, 67840, 67861) || A2(r, 67872, 67897)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 67835, 67839) || A2(r, 67862, 67867)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : (e(67871) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing)))))) : (l(68324) ? (l(68120) ? (e(67903) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((A2(r, 67968, 68023) || (A2(r, 68030, 68031) || (e(68096) || (A2(r, 68112, 68115) || A2(r, 68117, 68119))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 68028, 68029) || (A2(r, 68032, 68047) || A2(r, 68050, 68095))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : ((A2(r, 68097, 68099) || (A2(r, 68101, 68102) || A2(r, 68108, 68111))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing)))) : (l(68220) ? ((A2(r, 68121, 68149) || A2(r, 68192, 68219)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 68152, 68154) || e(68159)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 68160, 68168) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : (A2(r, 68176, 68184) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing)))) : ((e(68220) || (A2(r, 68224, 68252) || (A2(r, 68288, 68295) || A2(r, 68297, 68323)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 68221, 68222) || A2(r, 68253, 68255)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : (e(68223) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(68296) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : $elm$core$Maybe$Nothing)))))) : (l(68607) ? (l(68415) ? ((e(68324) || A2(r, 68352, 68405)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 68325, 68326) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 68331, 68335) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : ((A2(r, 68336, 68342) || A2(r, 68409, 68414)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing)))) : ((e(68415) || A2(r, 68505, 68508)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((A2(r, 68416, 68437) || (A2(r, 68448, 68466) || A2(r, 68480, 68497))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 68440, 68447) || (A2(r, 68472, 68479) || A2(r, 68521, 68527))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : $elm$core$Maybe$Nothing)))) : (l(69215) ? ((A2(r, 68608, 68680) || A2(r, 68864, 68899)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 68736, 68786) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : (A2(r, 68800, 68850) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (A2(r, 68858, 68863) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : (A2(r, 68900, 68903) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 68912, 68921) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : $elm$core$Maybe$Nothing)))))) : (A2(r, 69216, 69246) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : ((A2(r, 69248, 69289) || (A2(r, 69296, 69297) || A2(r, 69376, 69403))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 69291, 69292) || A2(r, 69373, 69375)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(69293) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationDash) : $elm$core$Maybe$Nothing))))))))) : (l(70452) ? (l(70002) ? (l(69758) ? (l(69599) ? ((e(69404) || (e(69415) || (A2(r, 69424, 69445) || (A2(r, 69488, 69505) || A2(r, 69552, 69572))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 69405, 69414) || (A2(r, 69457, 69460) || A2(r, 69573, 69579))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : ((A2(r, 69446, 69456) || A2(r, 69506, 69509)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 69461, 69465) || A2(r, 69510, 69513)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing)))) : (l(69702) ? ((A2(r, 69600, 69622) || A2(r, 69635, 69687)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((e(69632) || e(69634)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((e(69633) || A2(r, 69688, 69701)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing))) : ((e(69702) || (e(69744) || A2(r, 69747, 69748))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 69703, 69709) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 69714, 69733) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : (A2(r, 69734, 69743) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : ((A2(r, 69745, 69746) || e(69749)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing))))))) : (l(69839) ? ((A2(r, 69759, 69761) || (A2(r, 69811, 69814) || (A2(r, 69817, 69818) || e(69826)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((e(69762) || (A2(r, 69808, 69810) || A2(r, 69815, 69816))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (A2(r, 69763, 69807) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 69819, 69820) || A2(r, 69822, 69825)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((e(69821) || e(69837)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$OtherFormat) : $elm$core$Maybe$Nothing))))) : (l(69932) ? ((A2(r, 69840, 69864) || A2(r, 69891, 69926)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 69872, 69881) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : ((A2(r, 69888, 69890) || A2(r, 69927, 69931)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing))) : ((e(69932) || A2(r, 69957, 69958)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (A2(r, 69933, 69940) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 69942, 69951) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (A2(r, 69952, 69955) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((e(69956) || (e(69959) || A2(r, 69968, 70001))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing)))))))) : (l(70193) ? (l(70092) ? (l(70018) ? ((e(70002) || e(70006)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((e(70003) || A2(r, 70016, 70017)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 70004, 70005) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing))) : ((e(70018) || (A2(r, 70067, 70069) || A2(r, 70079, 70080))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 70019, 70066) || A2(r, 70081, 70084)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 70070, 70078) || A2(r, 70089, 70091)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 70085, 70088) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing))))) : (l(70107) ? ((e(70092) || e(70095)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(70093) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(70094) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (A2(r, 70096, 70105) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (e(70106) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing))))) : ((e(70107) || A2(r, 70109, 70111)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((e(70108) || (A2(r, 70144, 70161) || A2(r, 70163, 70187))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 70113, 70132) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : (A2(r, 70188, 70190) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (A2(r, 70191, 70192) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing))))))) : (l(70302) ? (l(70205) ? ((e(70193) || (e(70196) || A2(r, 70198, 70199))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 70194, 70195) || e(70197)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (A2(r, 70200, 70204) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing))) : (e(70205) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((e(70206) || e(70209)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 70207, 70208) || (A2(r, 70272, 70278) || (e(70280) || (A2(r, 70282, 70285) || A2(r, 70287, 70301))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing)))) : (l(70399) ? ((A2(r, 70303, 70312) || A2(r, 70320, 70366)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(70313) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((e(70367) || A2(r, 70371, 70378)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 70368, 70370) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (A2(r, 70384, 70393) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : $elm$core$Maybe$Nothing))))) : (A2(r, 70400, 70401) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 70402, 70403) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 70405, 70412) || (A2(r, 70415, 70416) || (A2(r, 70419, 70440) || (A2(r, 70442, 70448) || A2(r, 70450, 70451))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing))))))) : (l(71167) ? (l(70748) ? (l(70501) ? ((A2(r, 70453, 70457) || (e(70461) || (e(70480) || A2(r, 70493, 70497)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 70459, 70460) || e(70464)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 70462, 70463) || (A2(r, 70465, 70468) || (A2(r, 70471, 70472) || (A2(r, 70475, 70477) || (e(70487) || A2(r, 70498, 70499)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing))) : (l(70721) ? ((A2(r, 70502, 70508) || (A2(r, 70512, 70516) || A2(r, 70712, 70719))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 70656, 70708) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 70709, 70711) || e(70720)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing))) : ((e(70721) || e(70725)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 70722, 70724) || e(70726)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 70727, 70730) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 70731, 70735) || A2(r, 70746, 70747)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 70736, 70745) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : $elm$core$Maybe$Nothing))))))) : (l(70853) ? (l(70840) ? (e(70749) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((e(70750) || A2(r, 70835, 70839)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 70751, 70753) || A2(r, 70784, 70831)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 70832, 70834) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing)))) : ((e(70840) || (e(70842) || (A2(r, 70847, 70848) || A2(r, 70850, 70851)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((e(70841) || (A2(r, 70843, 70846) || e(70849))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (e(70852) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing)))) : (l(71095) ? ((e(70853) || (e(70855) || A2(r, 71040, 71086))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(70854) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 70864, 70873) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (A2(r, 71087, 71089) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (A2(r, 71090, 71093) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing))))) : ((A2(r, 71096, 71099) || e(71102)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 71100, 71101) || (A2(r, 71103, 71104) || A2(r, 71132, 71133))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 71105, 71127) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 71128, 71131) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing))))))) : (l(71457) ? (l(71338) ? ((A2(r, 71168, 71215) || (e(71236) || A2(r, 71296, 71337))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 71216, 71218) || (A2(r, 71227, 71228) || e(71230))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 71219, 71226) || (e(71229) || A2(r, 71231, 71232))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 71233, 71235) || A2(r, 71264, 71276)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 71248, 71257) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : $elm$core$Maybe$Nothing))))) : (l(71350) ? (e(71338) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((e(71339) || (e(71341) || A2(r, 71344, 71349))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((e(71340) || A2(r, 71342, 71343)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing))) : ((e(71350) || e(71456)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((e(71351) || A2(r, 71453, 71455)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((e(71352) || A2(r, 71424, 71450)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(71353) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 71360, 71369) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : $elm$core$Maybe$Nothing))))))) : (l(71736) ? ((e(71457) || (e(71462) || A2(r, 71724, 71726))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 71458, 71461) || (A2(r, 71463, 71467) || A2(r, 71727, 71735))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 71472, 71481) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (A2(r, 71482, 71483) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : (A2(r, 71484, 71486) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(71487) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : ((A2(r, 71488, 71494) || A2(r, 71680, 71723)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing))))))) : (l(71934) ? (e(71736) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (A2(r, 71737, 71738) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(71739) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 71840, 71871) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : (A2(r, 71872, 71903) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (A2(r, 71904, 71913) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (A2(r, 71914, 71922) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : $elm$core$Maybe$Nothing))))))) : ((A2(r, 71935, 71942) || (e(71945) || (A2(r, 71948, 71955) || (A2(r, 71957, 71958) || A2(r, 71960, 71983))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 71984, 71989) || A2(r, 71991, 71992)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (e(71995) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing))))))))) : (l(119893) ? (l(73647) ? (l(72767) ? (l(72242) ? (l(72144) ? ((e(71996) || (e(71998) || e(72003))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((e(71997) || (e(72000) || e(72002))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((e(71999) || (e(72001) || (A2(r, 72096, 72103) || A2(r, 72106, 72143)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 72004, 72006) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 72016, 72025) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : $elm$core$Maybe$Nothing))))) : (l(72160) ? (e(72144) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 72145, 72147) || A2(r, 72156, 72159)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 72148, 72151) || A2(r, 72154, 72155)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing))) : ((e(72160) || A2(r, 72193, 72202)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((e(72161) || (e(72163) || (e(72192) || A2(r, 72203, 72241)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(72162) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(72164) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing)))))) : (l(72342) ? (l(72262) ? ((e(72242) || e(72250)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 72243, 72248) || A2(r, 72251, 72254)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(72249) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (A2(r, 72255, 72261) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing)))) : (e(72262) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((e(72263) || (A2(r, 72273, 72278) || (A2(r, 72281, 72283) || A2(r, 72330, 72341)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((e(72272) || A2(r, 72284, 72329)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 72279, 72280) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing))))) : (l(72447) ? ((e(72342) || A2(r, 72344, 72345)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(72343) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 72346, 72348) || A2(r, 72350, 72354)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((e(72349) || A2(r, 72368, 72440)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing)))) : (A2(r, 72448, 72457) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((A2(r, 72704, 72712) || A2(r, 72714, 72750)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((e(72751) || e(72766)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 72752, 72758) || A2(r, 72760, 72765)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing))))))) : (l(73065) ? (l(72884) ? ((e(72767) || (A2(r, 72850, 72871) || (A2(r, 72874, 72880) || A2(r, 72882, 72883)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((e(72768) || A2(r, 72818, 72847)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 72769, 72773) || A2(r, 72816, 72817)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 72784, 72793) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (A2(r, 72794, 72812) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : ((e(72873) || e(72881)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing)))))) : (l(73019) ? (e(72884) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 72885, 72886) || (A2(r, 73009, 73014) || e(73018))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 72960, 72966) || (A2(r, 72968, 72969) || A2(r, 72971, 73008))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing))) : ((A2(r, 73020, 73021) || (A2(r, 73023, 73029) || e(73031))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((e(73030) || (A2(r, 73056, 73061) || A2(r, 73063, 73064))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 73040, 73049) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : $elm$core$Maybe$Nothing))))) : (l(73471) ? (l(73110) ? (A2(r, 73066, 73097) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 73098, 73102) || A2(r, 73107, 73108)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 73104, 73105) || e(73109)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing))) : ((e(73110) || A2(r, 73461, 73462)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((e(73111) || A2(r, 73459, 73460)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((e(73112) || A2(r, 73440, 73458)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 73120, 73129) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (A2(r, 73463, 73464) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing)))))) : (l(73525) ? (A2(r, 73472, 73473) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((e(73474) || (A2(r, 73476, 73488) || A2(r, 73490, 73523))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((e(73475) || e(73524)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : $elm$core$Maybe$Nothing))) : ((e(73525) || (A2(r, 73534, 73535) || e(73537))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 73526, 73530) || (e(73536) || e(73538))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 73539, 73551) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 73552, 73561) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : $elm$core$Maybe$Nothing)))))))) : (l(94178) ? (l(92879) ? (l(77823) ? ((e(73648) || (A2(r, 73728, 74649) || (A2(r, 74880, 75075) || A2(r, 77712, 77808)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 73664, 73684) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : ((A2(r, 73685, 73692) || A2(r, 73697, 73713)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 73693, 73696) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolCurrency) : ((e(73727) || (A2(r, 74864, 74868) || A2(r, 77809, 77810))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 74752, 74862) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberLetter) : $elm$core$Maybe$Nothing)))))) : ((A2(r, 77824, 78895) || (A2(r, 78913, 78918) || (A2(r, 82944, 83526) || (A2(r, 92160, 92728) || (A2(r, 92736, 92766) || A2(r, 92784, 92862)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 78896, 78911) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$OtherFormat) : ((e(78912) || A2(r, 78919, 78933)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 92768, 92777) || A2(r, 92864, 92873)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (A2(r, 92782, 92783) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing)))))) : (l(93026) ? ((A2(r, 92880, 92909) || A2(r, 92928, 92975)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 92912, 92916) || A2(r, 92976, 92982)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((e(92917) || (A2(r, 92983, 92987) || e(92996))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((A2(r, 92988, 92991) || e(92997)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 92992, 92995) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : (A2(r, 93008, 93017) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (A2(r, 93019, 93025) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : $elm$core$Maybe$Nothing))))))) : (l(93951) ? ((A2(r, 93027, 93047) || A2(r, 93053, 93071)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 93760, 93791) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : (A2(r, 93792, 93823) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (A2(r, 93824, 93846) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : (A2(r, 93847, 93850) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : $elm$core$Maybe$Nothing))))) : ((A2(r, 93952, 94026) || e(94032)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((e(94031) || A2(r, 94095, 94098)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 94033, 94087) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 94099, 94111) || A2(r, 94176, 94177)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : $elm$core$Maybe$Nothing))))))) : (l(118607) ? (l(110932) ? (l(101631) ? (e(94178) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (e(94179) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : (e(94180) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 94192, 94193) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : ((A2(r, 94208, 100343) || A2(r, 100352, 101589)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing))))) : ((A2(r, 101632, 101640) || (A2(r, 110592, 110882) || (e(110898) || A2(r, 110928, 110930)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 110576, 110579) || (A2(r, 110581, 110587) || A2(r, 110589, 110590))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : $elm$core$Maybe$Nothing))) : (l(113807) ? ((e(110933) || (A2(r, 110948, 110951) || (A2(r, 110960, 111355) || (A2(r, 113664, 113770) || (A2(r, 113776, 113788) || A2(r, 113792, 113800)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing) : (A2(r, 113808, 113817) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(113820) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : ((A2(r, 113821, 113822) || (A2(r, 118528, 118573) || A2(r, 118576, 118598))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(113823) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 113824, 113827) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$OtherFormat) : $elm$core$Maybe$Nothing))))))) : (l(119209) ? (l(119145) ? ((A2(r, 118608, 118723) || (A2(r, 118784, 119029) || (A2(r, 119040, 119078) || A2(r, 119081, 119140)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 119141, 119142) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (A2(r, 119143, 119144) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing))) : ((e(119145) || (A2(r, 119163, 119170) || A2(r, 119173, 119179))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 119146, 119148) || (A2(r, 119171, 119172) || A2(r, 119180, 119208))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 119149, 119154) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkSpacingCombining) : (A2(r, 119155, 119162) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$OtherFormat) : $elm$core$Maybe$Nothing))))) : (l(119519) ? ((e(119209) || (A2(r, 119214, 119274) || (A2(r, 119296, 119361) || e(119365)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : ((A2(r, 119210, 119213) || A2(r, 119362, 119364)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 119488, 119507) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : $elm$core$Maybe$Nothing))) : ((A2(r, 119520, 119539) || A2(r, 119648, 119672)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : (A2(r, 119552, 119638) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : ((A2(r, 119808, 119833) || A2(r, 119860, 119885)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((A2(r, 119834, 119859) || A2(r, 119886, 119892)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing))))))))) : (l(124111) ? (l(120629) ? (l(120137) ? (l(120004) ? ((A2(r, 119894, 119911) || (A2(r, 119938, 119963) || (A2(r, 119990, 119993) || (e(119995) || A2(r, 119997, 120003))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((A2(r, 119912, 119937) || (e(119964) || (A2(r, 119966, 119967) || (e(119970) || (A2(r, 119973, 119974) || (A2(r, 119977, 119980) || A2(r, 119982, 119989))))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)) : ((A2(r, 120005, 120015) || (A2(r, 120042, 120067) || A2(r, 120094, 120119))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((A2(r, 120016, 120041) || (A2(r, 120068, 120069) || (A2(r, 120071, 120074) || (A2(r, 120077, 120084) || (A2(r, 120086, 120092) || (A2(r, 120120, 120121) || (A2(r, 120123, 120126) || (A2(r, 120128, 120132) || e(120134))))))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing))) : (l(120431) ? ((A2(r, 120138, 120144) || (A2(r, 120172, 120197) || (A2(r, 120224, 120249) || (A2(r, 120276, 120301) || (A2(r, 120328, 120353) || A2(r, 120380, 120405)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : ((A2(r, 120146, 120171) || (A2(r, 120198, 120223) || (A2(r, 120250, 120275) || (A2(r, 120302, 120327) || (A2(r, 120354, 120379) || A2(r, 120406, 120430)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)) : (l(120539) ? ((e(120431) || (A2(r, 120458, 120485) || A2(r, 120514, 120538))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((A2(r, 120432, 120457) || A2(r, 120488, 120512)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : (e(120513) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : $elm$core$Maybe$Nothing))) : ((e(120539) || (e(120571) || e(120597))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : ((A2(r, 120540, 120545) || (A2(r, 120572, 120596) || A2(r, 120598, 120603))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((A2(r, 120546, 120570) || A2(r, 120604, 120628)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)))))) : (l(121478) ? (l(120771) ? ((e(120629) || (e(120655) || (e(120687) || (e(120713) || e(120745))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : ((A2(r, 120630, 120654) || (A2(r, 120656, 120661) || (A2(r, 120688, 120712) || (A2(r, 120714, 120719) || A2(r, 120746, 120770))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((A2(r, 120662, 120686) || A2(r, 120720, 120744)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing))) : (l(121398) ? (e(120771) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : ((A2(r, 120772, 120777) || e(120779)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (e(120778) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : (A2(r, 120782, 120831) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (A2(r, 120832, 121343) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 121344, 121397) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing)))))) : ((e(121398) || (A2(r, 121403, 121452) || (e(121461) || e(121476)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : ((A2(r, 121399, 121402) || (A2(r, 121453, 121460) || (A2(r, 121462, 121475) || e(121477)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : $elm$core$Maybe$Nothing)))) : (l(122927) ? (l(122634) ? (e(121478) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 121479, 121483) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : ((A2(r, 121499, 121503) || A2(r, 121505, 121519)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 122624, 122633) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : $elm$core$Maybe$Nothing)))) : (e(122634) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((A2(r, 122635, 122654) || A2(r, 122661, 122666)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : ((A2(r, 122880, 122886) || (A2(r, 122888, 122904) || (A2(r, 122907, 122913) || (A2(r, 122915, 122916) || A2(r, 122918, 122922))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : $elm$core$Maybe$Nothing)))) : (l(123214) ? ((A2(r, 122928, 122989) || A2(r, 123191, 123197)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : ((e(123023) || A2(r, 123184, 123190)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 123136, 123180) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 123200, 123209) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : $elm$core$Maybe$Nothing)))) : ((e(123214) || (A2(r, 123536, 123565) || A2(r, 123584, 123627))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(123215) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : ((e(123566) || A2(r, 123628, 123631)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 123632, 123641) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (e(123647) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolCurrency) : $elm$core$Maybe$Nothing))))))))) : (l(127135) ? (l(126463) ? (l(125217) ? ((A2(r, 124112, 124138) || (A2(r, 124896, 124902) || (A2(r, 124904, 124907) || (A2(r, 124909, 124910) || (A2(r, 124912, 124926) || A2(r, 124928, 125124)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (e(124139) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : ((A2(r, 124140, 124143) || A2(r, 125136, 125142)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 124144, 124153) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (A2(r, 125127, 125135) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : (A2(r, 125184, 125216) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : $elm$core$Maybe$Nothing)))))) : (l(126123) ? (e(125217) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterUppercase) : (A2(r, 125218, 125251) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterLowercase) : (A2(r, 125252, 125258) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (e(125259) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterModifier) : (A2(r, 125264, 125273) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : (A2(r, 125278, 125279) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$PunctuationOther) : (A2(r, 126065, 126122) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : $elm$core$Maybe$Nothing))))))) : ((e(126123) || (A2(r, 126125, 126127) || (A2(r, 126129, 126132) || (A2(r, 126209, 126253) || A2(r, 126255, 126269))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : ((e(126124) || e(126254)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (e(126128) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolCurrency) : $elm$core$Maybe$Nothing))))) : (l(126566) ? (l(126515) ? ((A2(r, 126464, 126467) || (A2(r, 126469, 126495) || (A2(r, 126497, 126498) || (e(126500) || (e(126503) || A2(r, 126505, 126514)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing) : ((A2(r, 126516, 126519) || (e(126530) || (A2(r, 126541, 126543) || (A2(r, 126545, 126546) || (e(126548) || (A2(r, 126561, 126562) || (e(126564) || ((A2($elm$core$Basics$modBy, 2, code) === 1) && (A2(r, 126521, 126523) || (A2(r, 126535, 126539) || A2(r, 126551, 126559))))))))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing)) : (l(126602) ? ((A2(r, 126567, 126570) || (A2(r, 126572, 126578) || (A2(r, 126580, 126583) || (A2(r, 126585, 126588) || (e(126590) || A2(r, 126592, 126601)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing) : ((A2(r, 126603, 126619) || (A2(r, 126625, 126627) || (A2(r, 126629, 126633) || A2(r, 126635, 126651)))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : (A2(r, 126704, 126705) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolMath) : ((A2(r, 126976, 127019) || A2(r, 127024, 127123)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : $elm$core$Maybe$Nothing)))))) : (l(129199) ? (l(127994) ? ((A2(r, 127136, 127150) || (A2(r, 127153, 127167) || (A2(r, 127169, 127183) || (A2(r, 127185, 127221) || (A2(r, 127245, 127405) || (A2(r, 127462, 127490) || (A2(r, 127504, 127547) || (A2(r, 127552, 127560) || (A2(r, 127568, 127569) || (A2(r, 127584, 127589) || A2(r, 127744, 127993))))))))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 127232, 127244) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberOther) : $elm$core$Maybe$Nothing)) : (l(128991) ? ((e(127994) || (A2(r, 128000, 128727) || (A2(r, 128732, 128748) || (A2(r, 128752, 128764) || (A2(r, 128768, 128886) || A2(r, 128891, 128985)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 127995, 127999) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolModifier) : $elm$core$Maybe$Nothing)) : ((A2(r, 128992, 129003) || (e(129008) || (A2(r, 129024, 129035) || (A2(r, 129040, 129095) || (A2(r, 129104, 129113) || (A2(r, 129120, 129159) || A2(r, 129168, 129197))))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : $elm$core$Maybe$Nothing))) : (l(131071) ? (l(129726) ? ((A2(r, 129200, 129201) || (A2(r, 129280, 129619) || (A2(r, 129632, 129645) || (A2(r, 129648, 129660) || (A2(r, 129664, 129672) || A2(r, 129680, 129725)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : $elm$core$Maybe$Nothing) : ((A2(r, 129727, 129733) || (A2(r, 129742, 129755) || (A2(r, 129760, 129768) || (A2(r, 129776, 129784) || (A2(r, 129792, 129938) || A2(r, 129940, 129994)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$SymbolOther) : (A2(r, 130032, 130041) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$NumberDecimalDigit) : $elm$core$Maybe$Nothing))) : (l(194559) ? ((A2(r, 131072, 173791) || (A2(r, 173824, 177977) || (A2(r, 177984, 178205) || (A2(r, 178208, 183969) || (A2(r, 183984, 191456) || A2(r, 191472, 192093)))))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : $elm$core$Maybe$Nothing) : ((A2(r, 194560, 195101) || (A2(r, 196608, 201546) || A2(r, 201552, 205743))) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$LetterOther) : ((e(917505) || A2(r, 917536, 917631)) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$OtherFormat) : (A2(r, 917760, 917999) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$MarkNonSpacing) : (A2(r, 983040, 1114109) ? $elm$core$Maybe$Just($miniBill$elm_unicode$Unicode$OtherPrivateUse) : $elm$core$Maybe$Nothing)))))))))))));
};
var $author$project$ElmSyntaxToRust$characterIsNotPrint = function (character) {
	if ($author$project$ElmSyntaxToRust$charIsLatinAlphaNumOrUnderscoreFast(character) || function () {
		switch (character.valueOf()) {
			case ' ':
				return true;
			case '.':
				return true;
			case '!':
				return true;
			case '?':
				return true;
			case '-':
				return true;
			case ':':
				return true;
			default:
				return false;
		}
	}()) {
		return false;
	} else {
		var _v1 = $miniBill$elm_unicode$Unicode$getCategory(character);
		if (_v1.$ === 'Nothing') {
			return true;
		} else {
			var category = _v1.a;
			switch (category.$) {
				case 'SeparatorLine':
					return true;
				case 'SeparatorParagraph':
					return true;
				case 'OtherControl':
					return true;
				case 'OtherFormat':
					return true;
				case 'OtherSurrogate':
					return true;
				case 'OtherPrivateUse':
					return true;
				case 'OtherNotAssigned':
					return true;
				case 'LetterUppercase':
					return false;
				case 'LetterLowercase':
					return false;
				case 'LetterTitlecase':
					return false;
				case 'MarkNonSpacing':
					return false;
				case 'MarkSpacingCombining':
					return false;
				case 'MarkEnclosing':
					return false;
				case 'NumberDecimalDigit':
					return false;
				case 'NumberLetter':
					return false;
				case 'NumberOther':
					return false;
				case 'SeparatorSpace':
					return true;
				case 'LetterModifier':
					return false;
				case 'LetterOther':
					return false;
				case 'PunctuationConnector':
					return false;
				case 'PunctuationDash':
					return false;
				case 'PunctuationOpen':
					return false;
				case 'PunctuationClose':
					return false;
				case 'PunctuationInitialQuote':
					return false;
				case 'PunctuationFinalQuote':
					return false;
				case 'PunctuationOther':
					return false;
				case 'SymbolMath':
					return false;
				case 'SymbolCurrency':
					return false;
				case 'SymbolModifier':
					return false;
				default:
					return false;
			}
		}
	}
};
var $author$project$ElmSyntaxToRust$singleDoubleQuotedStringCharToEscaped = function (character) {
	switch (character.valueOf()) {
		case '\"':
			return '\\\"';
		case '\\':
			return '\\\\';
		case '\t':
			return '\\t';
		case '\n':
			return '\\n';
		case '\u000D':
			return '\\r';
		case '{':
			return '\\{';
		default:
			var otherCharacter = character;
			return $author$project$ElmSyntaxToRust$characterIsNotPrint(otherCharacter) ? ('\\u' + $author$project$ElmSyntaxToRust$characterHex(otherCharacter)) : $elm$core$String$fromChar(otherCharacter);
	}
};
var $author$project$ElmSyntaxToRust$printRustStringLiteral = function (stringContent) {
	var singleDoubleQuotedStringContentEscaped = A3(
		$elm$core$String$foldl,
		F2(
			function (contentChar, soFar) {
				return soFar + ($author$project$ElmSyntaxToRust$singleDoubleQuotedStringCharToEscaped(contentChar) + '');
			}),
		'',
		stringContent);
	return $author$project$Print$exactly('\"' + (singleDoubleQuotedStringContentEscaped + '\"'));
};
var $author$project$ElmSyntaxToRust$printRustPatternNotParenthesized = function (rustPattern) {
	switch (rustPattern.$) {
		case 'RustPatternIgnore':
			return $author$project$ElmSyntaxToRust$printExactlyUnderscore;
		case 'RustPatternBool':
			var bool = rustPattern.a;
			return bool ? $author$project$ElmSyntaxToRust$printRustPatternTrue : $author$project$ElmSyntaxToRust$printRustPatternFalse;
		case 'RustPatternInteger':
			var int64 = rustPattern.a;
			return $author$project$Print$exactly(
				$elm$core$String$fromFloat(int64));
		case 'RustPatternUnicodeScalar':
			var _char = rustPattern.a;
			return $author$project$ElmSyntaxToRust$printRustStringLiteral(
				$elm$core$String$fromChar(_char));
		case 'RustPatternStringLiteral':
			var string = rustPattern.a;
			return $author$project$ElmSyntaxToRust$printRustStringLiteral(string);
		case 'RustPatternVariable':
			var name = rustPattern.a;
			return $author$project$Print$exactly(name);
		case 'RustPatternAlias':
			var rustPatternAlias = rustPattern.a;
			var patternPrint = $author$project$ElmSyntaxToRust$printRustPatternParenthesizedIfSpaceSeparated(rustPatternAlias.pattern);
			return A2(
				$author$project$Print$followedBy,
				$author$project$Print$withIndentAtNextMultipleOf4(
					A2(
						$author$project$Print$followedBy,
						patternPrint,
						$author$project$Print$spaceOrLinebreakIndented(
							$author$project$Print$lineSpread(patternPrint)))),
				$author$project$Print$exactly(rustPatternAlias.variable + ' @'));
		case 'RustPatternRecord':
			var recordFields = rustPattern.a;
			return $author$project$ElmSyntaxToRust$printRustPatternRecord(recordFields);
		case 'RustPatternVariant':
			var patternVariant = rustPattern.a;
			return A2(
				$author$project$Print$followedBy,
				function () {
					var _v2 = patternVariant.values;
					if (!_v2.b) {
						return $author$project$Print$empty;
					} else {
						var variantValue0 = _v2.a;
						var variantValue1Up = _v2.b;
						return A2(
							$author$project$Print$followedBy,
							$author$project$ElmSyntaxToRust$printExactlyParenClosing,
							A2(
								$author$project$Print$followedBy,
								A3(
									$author$project$Print$listMapAndIntersperseAndFlatten,
									$author$project$ElmSyntaxToRust$printRustPatternNotParenthesized,
									$author$project$ElmSyntaxToRust$printExactlyCommaSpace,
									A2($elm$core$List$cons, variantValue0, variantValue1Up)),
								$author$project$ElmSyntaxToRust$printExactlyParenOpening));
					}
				}(),
				$author$project$Print$exactly(
					$author$project$ElmSyntaxToRust$qualifiedReferenceToRustName(
						{name: patternVariant.name, qualification: patternVariant.originTypeName})));
		default:
			var parts = rustPattern.a;
			return A2(
				$author$project$Print$followedBy,
				$author$project$ElmSyntaxToRust$printExactlyParenClosing,
				A2(
					$author$project$Print$followedBy,
					A3(
						$author$project$Print$listMapAndIntersperseAndFlatten,
						$author$project$ElmSyntaxToRust$printRustPatternParenthesizedIfSpaceSeparated,
						$author$project$ElmSyntaxToRust$printExactlyCommaSpace,
						A2(
							$elm$core$List$cons,
							parts.part0,
							A2($elm$core$List$cons, parts.part1, parts.part2Up))),
					$author$project$ElmSyntaxToRust$printExactlyParenOpening));
	}
};
var $author$project$ElmSyntaxToRust$printRustPatternParenthesizedIfSpaceSeparated = function (rustPattern) {
	var notParenthesizedPrint = $author$project$ElmSyntaxToRust$printRustPatternNotParenthesized(rustPattern);
	return $author$project$ElmSyntaxToRust$patternIsSpaceSeparated(rustPattern) ? $author$project$ElmSyntaxToRust$printParenthesized(notParenthesizedPrint) : notParenthesizedPrint;
};
var $author$project$ElmSyntaxToRust$printRustPatternRecord = function (recordFields) {
	return A2(
		$author$project$Print$followedBy,
		$author$project$ElmSyntaxToRust$printExactlyCurlyClosing,
		A2(
			$author$project$Print$followedBy,
			A3(
				$author$project$Print$listMapAndIntersperseAndFlatten,
				function (_v0) {
					var fieldName = _v0.a;
					var fieldValuePattern = _v0.b;
					return A2(
						$author$project$Print$followedBy,
						$author$project$ElmSyntaxToRust$printRustPatternNotParenthesized(fieldValuePattern),
						$author$project$Print$exactly(fieldName + ': '));
				},
				$author$project$ElmSyntaxToRust$printExactlyComma,
				$miniBill$elm_fast_dict$FastDict$toList(recordFields)),
			A2(
				$author$project$Print$followedBy,
				$author$project$ElmSyntaxToRust$printExactlyCurlyOpening,
				$author$project$Print$exactly(
					$author$project$ElmSyntaxToRust$generatedRecordTypeName(
						$miniBill$elm_fast_dict$FastDict$keys(recordFields))))));
};
var $author$project$ElmSyntaxToRust$printRustStatementLetDeclarationUninitialized = function (letDeclarationUnassigned) {
	var typePrint = A2($author$project$ElmSyntaxToRust$printRustTypeNotParenthesized, $elm$core$Maybe$Nothing, letDeclarationUnassigned.type_);
	return A2(
		$author$project$Print$followedBy,
		$author$project$Print$withIndentAtNextMultipleOf4(
			A2(
				$author$project$Print$followedBy,
				typePrint,
				$author$project$Print$spaceOrLinebreakIndented(
					$author$project$Print$lineSpread(typePrint)))),
		$author$project$Print$exactly('let ' + (letDeclarationUnassigned.name + ':')));
};
var $author$project$ElmSyntaxToRust$rustExpressionIsSpaceSeparated = function (rustExpression) {
	switch (rustExpression.$) {
		case 'RustExpressionUnit':
			return false;
		case 'RustExpressionUnicodeScalar':
			return false;
		case 'RustExpressionF64':
			return false;
		case 'RustExpressionStringLiteral':
			return false;
		case 'RustExpressionSelf':
			return false;
		case 'RustExpressionReference':
			return false;
		case 'RustExpressionVariant':
			return false;
		case 'RustExpressionNegateOperation':
			return false;
		case 'RustExpressionBorrow':
			return false;
		case 'RustExpressionRecordAccess':
			return false;
		case 'RustExpressionTuple':
			return false;
		case 'RustExpressionIfElse':
			return true;
		case 'RustExpressionMatch':
			return true;
		case 'RustExpressionArrayLiteral':
			return false;
		case 'RustExpressionRecord':
			return false;
		case 'RustExpressionCall':
			return false;
		case 'RustExpressionLambda':
			return true;
		default:
			return true;
	}
};
var $author$project$ElmSyntaxToRust$rustFuncGenericsToString = function (typeVariablesToDeclare) {
	if (!typeVariablesToDeclare.b) {
		return '';
	} else {
		var typeParameter0 = typeVariablesToDeclare.a;
		var typeParameter1Up = typeVariablesToDeclare.b;
		return '<' + (A4(
			$author$project$ElmSyntaxToRust$listFilledMapAndStringJoinWith,
			', ',
			function (typeParameter) {
				return A2($elm$core$String$startsWith, 'comparable', typeParameter) ? (typeParameter + ': Copy + PartialOrd') : (typeParameter + ': Copy');
			},
			typeParameter0,
			typeParameter1Up) + '>');
	}
};
var $author$project$ElmSyntaxToRust$rustPatternContainsBindings = function (rustPattern) {
	switch (rustPattern.$) {
		case 'RustPatternVariable':
			return true;
		case 'RustPatternAlias':
			return true;
		case 'RustPatternIgnore':
			return false;
		case 'RustPatternBool':
			return false;
		case 'RustPatternInteger':
			return false;
		case 'RustPatternUnicodeScalar':
			return false;
		case 'RustPatternStringLiteral':
			return false;
		case 'RustPatternTuple':
			var partPatterns = rustPattern.a;
			return $author$project$ElmSyntaxToRust$rustPatternContainsBindings(partPatterns.part0) || ($author$project$ElmSyntaxToRust$rustPatternContainsBindings(partPatterns.part1) || A2($elm$core$List$any, $author$project$ElmSyntaxToRust$rustPatternContainsBindings, partPatterns.part2Up));
		case 'RustPatternVariant':
			var patternVariant = rustPattern.a;
			return A2($elm$core$List$any, $author$project$ElmSyntaxToRust$rustPatternContainsBindings, patternVariant.values);
		default:
			var recordPatternInexhaustiveFieldNames = rustPattern.a;
			return A3(
				$miniBill$elm_fast_dict$FastDict$foldl,
				F3(
					function (_v1, valuePattern, soFar) {
						return soFar || $author$project$ElmSyntaxToRust$rustPatternContainsBindings(valuePattern);
					}),
				false,
				recordPatternInexhaustiveFieldNames);
	}
};
var $author$project$ElmSyntaxToRust$printRustExpressionAfterStatement = function (rustExpressionAfterStatement) {
	return A2(
		$author$project$Print$followedBy,
		$author$project$ElmSyntaxToRust$printRustReturn(rustExpressionAfterStatement.result),
		A2(
			$author$project$Print$followedBy,
			$author$project$Print$linebreakIndented,
			A2(
				$author$project$Print$followedBy,
				$author$project$Print$exactly(';'),
				$author$project$ElmSyntaxToRust$printRustStatement(rustExpressionAfterStatement.statement))));
};
var $author$project$ElmSyntaxToRust$printRustExpressionArrayLiteral = function (elements) {
	if (!elements.b) {
		return $author$project$ElmSyntaxToRust$printRustExpressionArrayLiteralEmpty;
	} else {
		var element0 = elements.a;
		var element1Up = elements.b;
		var elementsPrint = A3(
			$author$project$Print$listMapAndIntersperseAndFlatten,
			$author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized,
			$author$project$ElmSyntaxToRust$printExactlyCommaLinebreakIndented,
			A2($elm$core$List$cons, element0, element1Up));
		return A2(
			$author$project$Print$followedBy,
			$author$project$ElmSyntaxToRust$printExactlyAngledClosing,
			A2(
				$author$project$Print$followedBy,
				$author$project$Print$spaceOrLinebreakIndented(
					$author$project$Print$lineSpread(elementsPrint)),
				A2(
					$author$project$Print$followedBy,
					A2($author$project$Print$withIndentIncreasedBy, 2, elementsPrint),
					$author$project$ElmSyntaxToRust$printExactlyAngledOpeningSpace)));
	}
};
var $author$project$ElmSyntaxToRust$printRustExpressionCall = function (call) {
	var calledPrint = $author$project$ElmSyntaxToRust$printRustExpressionParenthesizedIfSpaceSeparated(call.called);
	var _v7 = call._arguments;
	if (!_v7.b) {
		return A2($author$project$Print$followedBy, $author$project$ElmSyntaxToRust$printExactlyParenOpeningParenClosing, calledPrint);
	} else {
		var argument0 = _v7.a;
		var argument1Up = _v7.b;
		var argumentPrints = A2(
			$elm$core$List$map,
			$author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized,
			A2($elm$core$List$cons, argument0, argument1Up));
		var argumentsLineSpread = A2($author$project$Print$lineSpreadListMapAndCombine, $author$project$Print$lineSpread, argumentPrints);
		return A2(
			$author$project$Print$followedBy,
			$author$project$ElmSyntaxToRust$printExactlyParenClosing,
			A2(
				$author$project$Print$followedBy,
				$author$project$Print$emptyOrLinebreakIndented(argumentsLineSpread),
				A2(
					$author$project$Print$followedBy,
					$author$project$Print$withIndentAtNextMultipleOf4(
						A2(
							$author$project$Print$followedBy,
							A2(
								$author$project$Print$listIntersperseAndFlatten,
								A2(
									$author$project$Print$followedBy,
									$author$project$Print$spaceOrLinebreakIndented(argumentsLineSpread),
									$author$project$ElmSyntaxToRust$printExactlyComma),
								argumentPrints),
							$author$project$Print$emptyOrLinebreakIndented(argumentsLineSpread))),
					A2($author$project$Print$followedBy, $author$project$ElmSyntaxToRust$printExactlyParenOpening, calledPrint))));
	}
};
var $author$project$ElmSyntaxToRust$printRustExpressionIfElse = function (syntaxIfElse) {
	var conditionPrint = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(syntaxIfElse.condition);
	var conditionLineSpread = $author$project$Print$lineSpread(conditionPrint);
	return A2(
		$author$project$Print$followedBy,
		$author$project$ElmSyntaxToRust$printExactlyCurlyClosing,
		A2(
			$author$project$Print$followedBy,
			$author$project$Print$linebreakIndented,
			A2(
				$author$project$Print$followedBy,
				$author$project$Print$withIndentAtNextMultipleOf4(
					A2(
						$author$project$Print$followedBy,
						$author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(syntaxIfElse.onFalse),
						$author$project$Print$linebreakIndented)),
				A2(
					$author$project$Print$followedBy,
					$author$project$ElmSyntaxToRust$printExactlyCurlyClosingSpaceElseSpaceCurlyOpening,
					A2(
						$author$project$Print$followedBy,
						$author$project$Print$linebreakIndented,
						A2(
							$author$project$Print$followedBy,
							$author$project$Print$withIndentAtNextMultipleOf4(
								A2(
									$author$project$Print$followedBy,
									$author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(syntaxIfElse.onTrue),
									$author$project$Print$linebreakIndented)),
							A2(
								$author$project$Print$followedBy,
								$author$project$ElmSyntaxToRust$printExactlyCurlyOpening,
								A2(
									$author$project$Print$followedBy,
									$author$project$Print$spaceOrLinebreakIndented(conditionLineSpread),
									A2(
										$author$project$Print$followedBy,
										$author$project$Print$withIndentAtNextMultipleOf4(
											A2(
												$author$project$Print$followedBy,
												conditionPrint,
												$author$project$Print$spaceOrLinebreakIndented(conditionLineSpread))),
										$author$project$ElmSyntaxToRust$printExactlyIf)))))))));
};
var $author$project$ElmSyntaxToRust$printRustExpressionLambda = function (lambda) {
	var resultPrint = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(lambda.result);
	var statementsAndResultPrintLineSpread = $author$project$Print$lineSpread(resultPrint);
	var parameterPrints = A2(
		$elm$core$List$map,
		function (lambdaParameter) {
			var parameterTypePrint = A2(
				$author$project$ElmSyntaxToRust$printRustTypeNotParenthesized,
				$elm$core$Maybe$Just($author$project$ElmSyntaxToRust$TypeIncoming),
				lambdaParameter.type_);
			return $author$project$ElmSyntaxToRust$printParenthesized(
				A2(
					$author$project$Print$followedBy,
					$author$project$Print$withIndentAtNextMultipleOf4(
						A2(
							$author$project$Print$followedBy,
							parameterTypePrint,
							$author$project$Print$spaceOrLinebreakIndented(
								$author$project$Print$lineSpread(parameterTypePrint)))),
					A2(
						$author$project$Print$followedBy,
						$author$project$ElmSyntaxToRust$printExactlyColon,
						$author$project$ElmSyntaxToRust$printRustPatternNotParenthesized(lambdaParameter.pattern))));
		},
		lambda.parameters);
	var parametersLineSpread = A2($author$project$Print$lineSpreadListMapAndCombine, $author$project$Print$lineSpread, parameterPrints);
	var fullLineSpread = A2(
		$author$project$Print$lineSpreadMergeWith,
		function (_v6) {
			return parametersLineSpread;
		},
		statementsAndResultPrintLineSpread);
	return A2(
		$author$project$Print$followedBy,
		$author$project$ElmSyntaxToRust$printExactlyCurlyClosing,
		A2(
			$author$project$Print$followedBy,
			$author$project$Print$spaceOrLinebreakIndented(fullLineSpread),
			A2(
				$author$project$Print$followedBy,
				$author$project$Print$withIndentAtNextMultipleOf4(
					A2(
						$author$project$Print$followedBy,
						resultPrint,
						$author$project$Print$spaceOrLinebreakIndented(fullLineSpread))),
				A2(
					$author$project$Print$followedBy,
					A2(
						$author$project$Print$withIndentIncreasedBy,
						1,
						A2(
							$author$project$Print$followedBy,
							$author$project$Print$exactly('| {'),
							A3(
								$author$project$Print$listMapAndIntersperseAndFlatten,
								function (lambdaParameter) {
									return lambdaParameter;
								},
								A2(
									$author$project$Print$followedBy,
									$author$project$Print$spaceOrLinebreakIndented(parametersLineSpread),
									$author$project$ElmSyntaxToRust$printExactlyComma),
								parameterPrints))),
					$author$project$Print$exactly('move |')))));
};
var $author$project$ElmSyntaxToRust$printRustExpressionMatch = function (rustMatch) {
	var matchedPrint = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(rustMatch.matched);
	var matchedPrintLineSpread = $author$project$Print$lineSpread(matchedPrint);
	return A2(
		$author$project$Print$followedBy,
		$author$project$ElmSyntaxToRust$printExactlyCurlyClosing,
		A2(
			$author$project$Print$followedBy,
			$author$project$Print$linebreakIndented,
			A2(
				$author$project$Print$followedBy,
				A2(
					$author$project$Print$followedBy,
					A3(
						$author$project$Print$listMapAndIntersperseAndFlatten,
						$author$project$ElmSyntaxToRust$printRustExpressionMatchCase,
						$author$project$Print$linebreakIndented,
						A2($elm$core$List$cons, rustMatch.case0, rustMatch.case1Up)),
					$author$project$Print$linebreakIndented),
				A2(
					$author$project$Print$followedBy,
					$author$project$ElmSyntaxToRust$printExactlySpaceCurlyOpening,
					A2(
						$author$project$Print$followedBy,
						$author$project$Print$withIndentAtNextMultipleOf4(
							A2(
								$author$project$Print$followedBy,
								matchedPrint,
								$author$project$Print$spaceOrLinebreakIndented(matchedPrintLineSpread))),
						$author$project$ElmSyntaxToRust$printExactlyMatch)))));
};
var $author$project$ElmSyntaxToRust$printRustExpressionMatchCase = function (branch) {
	var patternPrint = $author$project$ElmSyntaxToRust$printRustPatternNotParenthesized(branch.pattern);
	return A2(
		$author$project$Print$followedBy,
		$author$project$Print$withIndentAtNextMultipleOf4(
			A2(
				$author$project$Print$followedBy,
				$author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(branch.result),
				$author$project$Print$linebreakIndented)),
		A2(
			$author$project$Print$followedBy,
			$author$project$ElmSyntaxToRust$printExactlyColon,
			A2(
				$author$project$Print$followedBy,
				A2($author$project$Print$withIndentIncreasedBy, 2, patternPrint),
				$author$project$ElmSyntaxToRust$rustPatternContainsBindings(branch.pattern) ? $author$project$ElmSyntaxToRust$printExactlyCaseSpaceLetSpace : $author$project$ElmSyntaxToRust$printExactlyCaseSpace)));
};
var $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized = function (rustExpression) {
	switch (rustExpression.$) {
		case 'RustExpressionUnit':
			return $author$project$Print$exactly('()');
		case 'RustExpressionCall':
			var call = rustExpression.a;
			return $author$project$ElmSyntaxToRust$printRustExpressionCall(call);
		case 'RustExpressionSelf':
			return $author$project$ElmSyntaxToRust$printRustExpressionSelf;
		case 'RustExpressionReference':
			var reference = rustExpression.a;
			return $author$project$Print$exactly(
				$author$project$ElmSyntaxToRust$qualifiedReferenceToRustName(reference));
		case 'RustExpressionVariant':
			var reference = rustExpression.a;
			return $author$project$Print$exactly(
				$author$project$ElmSyntaxToRust$qualifiedReferenceToRustName(
					{name: reference.name, qualification: reference.originTypeName}));
		case 'RustExpressionIfElse':
			var ifElse = rustExpression.a;
			return $author$project$ElmSyntaxToRust$printRustExpressionIfElse(ifElse);
		case 'RustExpressionUnicodeScalar':
			var charValue = rustExpression.a;
			return $author$project$ElmSyntaxToRust$printRustStringLiteral(
				$elm$core$String$fromChar(charValue));
		case 'RustExpressionF64':
			var _double = rustExpression.a;
			return $author$project$Print$exactly(
				$author$project$ElmSyntaxToRust$f64Literal(_double));
		case 'RustExpressionStringLiteral':
			var string = rustExpression.a;
			return $author$project$ElmSyntaxToRust$printRustStringLiteral(string);
		case 'RustExpressionTuple':
			var parts = rustExpression.a;
			return $author$project$ElmSyntaxToRust$printRustExpressionTuple(parts);
		case 'RustExpressionLambda':
			var syntaxLambda = rustExpression.a;
			return $author$project$ElmSyntaxToRust$printRustExpressionLambda(syntaxLambda);
		case 'RustExpressionAfterStatement':
			var rustExpressionAfterStatement = rustExpression.a;
			return $author$project$ElmSyntaxToRust$printRustExpressionAfterStatement(rustExpressionAfterStatement);
		case 'RustExpressionRecord':
			var fields = rustExpression.a;
			return $author$project$ElmSyntaxToRust$printRustExpressionRecord(fields);
		case 'RustExpressionArrayLiteral':
			var elements = rustExpression.a;
			return $author$project$ElmSyntaxToRust$printRustExpressionArrayLiteral(elements);
		case 'RustExpressionNegateOperation':
			var inNegation = rustExpression.a;
			return A2(
				$author$project$Print$followedBy,
				A2(
					$author$project$Print$withIndentIncreasedBy,
					1,
					$author$project$ElmSyntaxToRust$printRustExpressionParenthesizedIfSpaceSeparated(inNegation)),
				$author$project$ElmSyntaxToRust$printExactlyMinus);
		case 'RustExpressionBorrow':
			var borrowed = rustExpression.a;
			return A2(
				$author$project$Print$followedBy,
				A2(
					$author$project$Print$withIndentIncreasedBy,
					1,
					$author$project$ElmSyntaxToRust$printRustExpressionParenthesizedIfSpaceSeparated(borrowed)),
				$author$project$Print$exactly('&'));
		case 'RustExpressionRecordAccess':
			var syntaxRecordAccess = rustExpression.a;
			return A2(
				$author$project$Print$followedBy,
				$author$project$Print$exactly('.' + syntaxRecordAccess.field),
				$author$project$ElmSyntaxToRust$printRustExpressionParenthesizedIfSpaceSeparated(syntaxRecordAccess.record));
		default:
			var match = rustExpression.a;
			return $author$project$ElmSyntaxToRust$printRustExpressionMatch(match);
	}
};
var $author$project$ElmSyntaxToRust$printRustExpressionParenthesizedIfSpaceSeparated = function (rustExpression) {
	var notParenthesizedPrint = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(rustExpression);
	return $author$project$ElmSyntaxToRust$rustExpressionIsSpaceSeparated(rustExpression) ? $author$project$ElmSyntaxToRust$printParenthesized(notParenthesizedPrint) : notParenthesizedPrint;
};
var $author$project$ElmSyntaxToRust$printRustExpressionRecord = function (rustRecordFields) {
	if ($miniBill$elm_fast_dict$FastDict$isEmpty(rustRecordFields)) {
		return $author$project$ElmSyntaxToRust$printExactlyRustExpressionRecordEmpty;
	} else {
		var fieldsPrint = A3(
			$author$project$Print$listMapAndIntersperseAndFlatten,
			function (_v4) {
				var fieldName = _v4.a;
				var fieldValue = _v4.b;
				var fieldValuePrint = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(fieldValue);
				return A2(
					$author$project$Print$followedBy,
					$author$project$Print$withIndentAtNextMultipleOf4(
						A2(
							$author$project$Print$followedBy,
							fieldValuePrint,
							$author$project$Print$spaceOrLinebreakIndented(
								$author$project$Print$lineSpread(fieldValuePrint)))),
					$author$project$Print$exactly(fieldName + ':'));
			},
			A2($author$project$Print$followedBy, $author$project$Print$linebreakIndented, $author$project$ElmSyntaxToRust$printExactlyComma),
			$miniBill$elm_fast_dict$FastDict$toList(rustRecordFields));
		return A2(
			$author$project$Print$followedBy,
			$author$project$ElmSyntaxToRust$printExactlyCurlyClosing,
			A2(
				$author$project$Print$followedBy,
				$author$project$Print$spaceOrLinebreakIndented(
					$author$project$Print$lineSpread(fieldsPrint)),
				A2(
					$author$project$Print$followedBy,
					$author$project$Print$withIndentAtNextMultipleOf4(fieldsPrint),
					A2(
						$author$project$Print$followedBy,
						$author$project$Print$spaceOrLinebreakIndented(
							$author$project$Print$lineSpread(fieldsPrint)),
						$author$project$Print$exactly(
							$author$project$ElmSyntaxToRust$generatedRecordTypeName(
								$miniBill$elm_fast_dict$FastDict$keys(rustRecordFields)) + ' {')))));
	}
};
var $author$project$ElmSyntaxToRust$printRustExpressionTuple = function (parts) {
	var part2UpPrints = A2($elm$core$List$map, $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized, parts.part2Up);
	var part1Print = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(parts.part1);
	var part0Print = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(parts.part0);
	var lineSpread = A2(
		$author$project$Print$lineSpreadMergeWith,
		function (_v3) {
			return A2($author$project$Print$lineSpreadListMapAndCombine, $author$project$Print$lineSpread, part2UpPrints);
		},
		A2(
			$author$project$Print$lineSpreadMergeWith,
			function (_v2) {
				return $author$project$Print$lineSpread(part1Print);
			},
			$author$project$Print$lineSpread(part0Print)));
	return A2(
		$author$project$Print$followedBy,
		$author$project$ElmSyntaxToRust$printExactlyParenClosing,
		A2(
			$author$project$Print$followedBy,
			$author$project$Print$spaceOrLinebreakIndented(lineSpread),
			A2(
				$author$project$Print$followedBy,
				A3(
					$author$project$Print$listMapAndIntersperseAndFlatten,
					function (partPrint) {
						return A2($author$project$Print$withIndentIncreasedBy, 2, partPrint);
					},
					A2(
						$author$project$Print$followedBy,
						$author$project$ElmSyntaxToRust$printExactlyCommaSpace,
						$author$project$Print$emptyOrLinebreakIndented(lineSpread)),
					A2(
						$elm$core$List$cons,
						part0Print,
						A2($elm$core$List$cons, part1Print, part2UpPrints))),
				$author$project$ElmSyntaxToRust$printExactlyParenOpeningSpace)));
};
var $author$project$ElmSyntaxToRust$printRustLetDestructuring = function (letDestructuring) {
	return A2(
		$author$project$Print$followedBy,
		$author$project$Print$withIndentAtNextMultipleOf4(
			A2(
				$author$project$Print$followedBy,
				A2(
					$author$project$Print$followedBy,
					$author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(letDestructuring.expression),
					$author$project$Print$linebreakIndented),
				A2(
					$author$project$Print$followedBy,
					$author$project$ElmSyntaxToRust$printExactlySpaceEquals,
					$author$project$ElmSyntaxToRust$printParenthesized(
						$author$project$ElmSyntaxToRust$printRustPatternParenthesizedIfSpaceSeparated(letDestructuring.pattern))))),
		$author$project$ElmSyntaxToRust$printExactlyLetSpace);
};
var $author$project$ElmSyntaxToRust$printRustLocalFuncDeclaration = function (rustValueOrFunctionDeclaration) {
	var resultTypePrint = A2(
		$author$project$ElmSyntaxToRust$printRustTypeNotParenthesized,
		$elm$core$Maybe$Just($author$project$ElmSyntaxToRust$TypeOutgoing),
		rustValueOrFunctionDeclaration.resultType);
	var parameterPrints = A2(
		$elm$core$List$map,
		function (parameter) {
			var parameterTypePrint = A2(
				$author$project$ElmSyntaxToRust$printRustTypeNotParenthesized,
				$elm$core$Maybe$Just($author$project$ElmSyntaxToRust$TypeIncoming),
				parameter.type_);
			return A2(
				$author$project$Print$followedBy,
				$author$project$Print$withIndentAtNextMultipleOf4(
					A2(
						$author$project$Print$followedBy,
						parameterTypePrint,
						$author$project$Print$spaceOrLinebreakIndented(
							$author$project$Print$lineSpread(parameterTypePrint)))),
				A2(
					$author$project$Print$followedBy,
					$author$project$ElmSyntaxToRust$printExactlyColon,
					$author$project$Print$exactly('_ ' + parameter.name)));
		},
		rustValueOrFunctionDeclaration.parameters);
	var parametersLineSpread = A2($author$project$Print$lineSpreadListMapAndCombine, $author$project$Print$lineSpread, parameterPrints);
	var headerLineSpread = A2(
		$author$project$Print$lineSpreadMergeWith,
		function (_v1) {
			return $author$project$Print$lineSpread(resultTypePrint);
		},
		parametersLineSpread);
	return A2(
		$author$project$Print$followedBy,
		$author$project$ElmSyntaxToRust$printExactlyCurlyClosing,
		A2(
			$author$project$Print$followedBy,
			$author$project$Print$linebreakIndented,
			A2(
				$author$project$Print$followedBy,
				A2(
					$author$project$Print$withIndentIncreasedBy,
					4,
					A2(
						$author$project$Print$followedBy,
						$author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(rustValueOrFunctionDeclaration.result),
						A2(
							$author$project$Print$followedBy,
							$author$project$Print$linebreakIndented,
							A2(
								$author$project$Print$followedBy,
								$author$project$ElmSyntaxToRust$printExactlySpaceCurlyOpening,
								A2(
									$author$project$Print$followedBy,
									resultTypePrint,
									A2(
										$author$project$Print$followedBy,
										$author$project$Print$spaceOrLinebreakIndented(headerLineSpread),
										A2(
											$author$project$Print$followedBy,
											$author$project$ElmSyntaxToRust$printExactlySpaceMinusGreaterThanSpace,
											$author$project$ElmSyntaxToRust$printParenthesized(
												A2(
													$author$project$Print$followedBy,
													$author$project$Print$emptyOrLinebreakIndented(parametersLineSpread),
													A2(
														$author$project$Print$followedBy,
														A3(
															$author$project$Print$listMapAndIntersperseAndFlatten,
															function (parameterPrint) {
																return parameterPrint;
															},
															A2(
																$author$project$Print$followedBy,
																$author$project$Print$spaceOrLinebreakIndented(parametersLineSpread),
																$author$project$ElmSyntaxToRust$printExactlyComma),
															parameterPrints),
														$author$project$Print$emptyOrLinebreakIndented(parametersLineSpread))))))))))),
				$author$project$Print$exactly(
					'fn ' + (rustValueOrFunctionDeclaration.name + $author$project$ElmSyntaxToRust$rustFuncGenericsToString(rustValueOrFunctionDeclaration.introducedTypeParameters))))));
};
var $author$project$ElmSyntaxToRust$printRustLocalLetDeclaration = function (rustLetDeclaration) {
	var resultTypePrint = A2($author$project$ElmSyntaxToRust$printRustTypeNotParenthesized, $elm$core$Maybe$Nothing, rustLetDeclaration.resultType);
	return A2(
		$author$project$Print$followedBy,
		$author$project$Print$withIndentAtNextMultipleOf4(
			A2(
				$author$project$Print$followedBy,
				$author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(rustLetDeclaration.result),
				A2(
					$author$project$Print$followedBy,
					$author$project$ElmSyntaxToRust$printExactlySpaceEqualsLinebreakIndented,
					$author$project$Print$withIndentAtNextMultipleOf4(
						A2(
							$author$project$Print$followedBy,
							resultTypePrint,
							$author$project$Print$spaceOrLinebreakIndented(
								$author$project$Print$lineSpread(resultTypePrint))))))),
		$author$project$Print$exactly('let ' + (rustLetDeclaration.name + ':')));
};
var $author$project$ElmSyntaxToRust$printRustReturn = function (rustResultExpression) {
	var rustResultExpressionPrint = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(rustResultExpression);
	return A2(
		$author$project$Print$followedBy,
		$author$project$Print$withIndentAtNextMultipleOf4(
			A2(
				$author$project$Print$followedBy,
				rustResultExpressionPrint,
				$author$project$Print$spaceOrLinebreakIndented(
					$author$project$Print$lineSpread(rustResultExpressionPrint)))),
		$author$project$ElmSyntaxToRust$printExactlyReturn);
};
var $author$project$ElmSyntaxToRust$printRustStatement = function (rustStatement) {
	switch (rustStatement.$) {
		case 'RustStatementLetDestructuring':
			var letDestructuring = rustStatement.a;
			return $author$project$ElmSyntaxToRust$printRustLetDestructuring(letDestructuring);
		case 'RustStatementFuncDeclaration':
			var letValueOrFunction = rustStatement.a;
			return $author$project$ElmSyntaxToRust$printRustLocalFuncDeclaration(letValueOrFunction);
		case 'RustStatementLetDeclaration':
			var rustLetDeclaration = rustStatement.a;
			return $author$project$ElmSyntaxToRust$printRustLocalLetDeclaration(rustLetDeclaration);
		case 'RustStatementLetDeclarationUninitialized':
			var letDeclarationUnassigned = rustStatement.a;
			return $author$project$ElmSyntaxToRust$printRustStatementLetDeclarationUninitialized(letDeclarationUnassigned);
		case 'RustStatementVarDeclaration':
			var varDeclarationInitialized = rustStatement.a;
			var assignedValuePrint = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(varDeclarationInitialized.value);
			return A2(
				$author$project$Print$followedBy,
				$author$project$Print$withIndentAtNextMultipleOf4(
					A2(
						$author$project$Print$followedBy,
						assignedValuePrint,
						$author$project$Print$spaceOrLinebreakIndented(
							$author$project$Print$lineSpread(assignedValuePrint)))),
				$author$project$Print$exactly('var ' + (varDeclarationInitialized.name + ' =')));
		case 'RustStatementBindingAssignment':
			var assignment = rustStatement.a;
			return A2(
				$author$project$Print$followedBy,
				$author$project$Print$withIndentAtNextMultipleOf4(
					A2(
						$author$project$Print$followedBy,
						$author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(assignment.assignedValue),
						$author$project$Print$linebreakIndented)),
				$author$project$Print$exactly(assignment.name + ' ='));
		case 'RustStatementRecordFieldAssignment':
			var assignment = rustStatement.a;
			var assignedValuePrint = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(assignment.assignedValue);
			return A2(
				$author$project$Print$followedBy,
				$author$project$Print$withIndentAtNextMultipleOf4(
					A2(
						$author$project$Print$followedBy,
						assignedValuePrint,
						$author$project$Print$spaceOrLinebreakIndented(
							$author$project$Print$lineSpread(assignedValuePrint)))),
				$author$project$Print$exactly(assignment.recordBindingName + ('.' + (assignment.fieldName + ' ='))));
		case 'RustStatementIfElse':
			var ifElse = rustStatement.a;
			return $author$project$ElmSyntaxToRust$printRustStatementIfElse(ifElse);
		default:
			var syntaxMatch = rustStatement.a;
			return $author$project$ElmSyntaxToRust$printRustStatementMatch(syntaxMatch);
	}
};
var $author$project$ElmSyntaxToRust$printRustStatementIfElse = function (ifElse) {
	var conditionPrint = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(ifElse.condition);
	var conditionLineSpread = $author$project$Print$lineSpread(conditionPrint);
	return A2(
		$author$project$Print$followedBy,
		$author$project$ElmSyntaxToRust$printExactlyCurlyClosing,
		A2(
			$author$project$Print$followedBy,
			$author$project$Print$linebreakIndented,
			A2(
				$author$project$Print$followedBy,
				$author$project$Print$withIndentAtNextMultipleOf4(
					A2(
						$author$project$Print$followedBy,
						$author$project$ElmSyntaxToRust$printRustStatements(ifElse.onFalse),
						$author$project$Print$linebreakIndented)),
				A2(
					$author$project$Print$followedBy,
					$author$project$ElmSyntaxToRust$printExactlyCurlyClosingSpaceElseSpaceCurlyOpening,
					A2(
						$author$project$Print$followedBy,
						$author$project$Print$linebreakIndented,
						A2(
							$author$project$Print$followedBy,
							$author$project$Print$withIndentAtNextMultipleOf4(
								A2(
									$author$project$Print$followedBy,
									$author$project$ElmSyntaxToRust$printRustStatements(ifElse.onTrue),
									$author$project$Print$linebreakIndented)),
							A2(
								$author$project$Print$followedBy,
								$author$project$ElmSyntaxToRust$printExactlyCurlyOpening,
								A2(
									$author$project$Print$followedBy,
									$author$project$Print$spaceOrLinebreakIndented(conditionLineSpread),
									A2(
										$author$project$Print$followedBy,
										$author$project$Print$withIndentAtNextMultipleOf4(
											A2(
												$author$project$Print$followedBy,
												conditionPrint,
												$author$project$Print$spaceOrLinebreakIndented(conditionLineSpread))),
										$author$project$ElmSyntaxToRust$printExactlyIf)))))))));
};
var $author$project$ElmSyntaxToRust$printRustStatementMatch = function (rustMatch) {
	var matchedPrint = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(rustMatch.matched);
	var matchedPrintLineSpread = $author$project$Print$lineSpread(matchedPrint);
	return A2(
		$author$project$Print$followedBy,
		$author$project$ElmSyntaxToRust$printExactlyCurlyClosing,
		A2(
			$author$project$Print$followedBy,
			$author$project$Print$linebreakIndented,
			A2(
				$author$project$Print$followedBy,
				A2(
					$author$project$Print$followedBy,
					A3(
						$author$project$Print$listMapAndIntersperseAndFlatten,
						$author$project$ElmSyntaxToRust$printRustStatementMatchCase,
						$author$project$Print$linebreakIndented,
						A2($elm$core$List$cons, rustMatch.case0, rustMatch.case1Up)),
					$author$project$Print$linebreakIndented),
				A2(
					$author$project$Print$followedBy,
					$author$project$ElmSyntaxToRust$printExactlySpaceCurlyOpening,
					A2(
						$author$project$Print$followedBy,
						$author$project$Print$withIndentAtNextMultipleOf4(
							A2(
								$author$project$Print$followedBy,
								matchedPrint,
								$author$project$Print$spaceOrLinebreakIndented(matchedPrintLineSpread))),
						$author$project$ElmSyntaxToRust$printExactlyMatch)))));
};
var $author$project$ElmSyntaxToRust$printRustStatementMatchCase = function (branch) {
	var patternPrint = $author$project$ElmSyntaxToRust$printRustPatternNotParenthesized(branch.pattern);
	return A2(
		$author$project$Print$followedBy,
		$author$project$Print$withIndentAtNextMultipleOf4(
			A2(
				$author$project$Print$followedBy,
				$author$project$ElmSyntaxToRust$printRustStatements(branch.statements),
				$author$project$Print$linebreakIndented)),
		A2(
			$author$project$Print$followedBy,
			$author$project$ElmSyntaxToRust$printExactlyColon,
			A2(
				$author$project$Print$followedBy,
				A2($author$project$Print$withIndentIncreasedBy, 2, patternPrint),
				$author$project$ElmSyntaxToRust$rustPatternContainsBindings(branch.pattern) ? $author$project$ElmSyntaxToRust$printExactlyCaseSpaceLetSpace : $author$project$ElmSyntaxToRust$printExactlyCaseSpace)));
};
var $author$project$ElmSyntaxToRust$printRustStatements = function (rustStatements) {
	return A3($author$project$Print$listMapAndIntersperseAndFlatten, $author$project$ElmSyntaxToRust$printRustStatement, $author$project$Print$linebreakIndented, rustStatements);
};
var $author$project$ElmSyntaxToRust$rustTypeContainedVariables = function (rustType) {
	rustTypeContainedVariables:
	while (true) {
		switch (rustType.$) {
			case 'RustTypeUnit':
				return $miniBill$elm_fast_dict$FastSet$empty;
			case 'RustTypeVariable':
				var variable = rustType.a;
				return $miniBill$elm_fast_dict$FastSet$singleton(variable);
			case 'RustTypeBorrow':
				var borrow = rustType.a;
				var $temp$rustType = borrow.type_;
				rustType = $temp$rustType;
				continue rustTypeContainedVariables;
			case 'RustTypeTuple':
				var parts = rustType.a;
				return A2(
					$miniBill$elm_fast_dict$FastSet$union,
					A2($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify, $author$project$ElmSyntaxToRust$rustTypeContainedVariables, parts.part2Up),
					A2(
						$miniBill$elm_fast_dict$FastSet$union,
						$author$project$ElmSyntaxToRust$rustTypeContainedVariables(parts.part1),
						$author$project$ElmSyntaxToRust$rustTypeContainedVariables(parts.part0)));
			case 'RustTypeRecord':
				var fields = rustType.a;
				return A2(
					$author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify,
					$author$project$ElmSyntaxToRust$rustTypeContainedVariables,
					$miniBill$elm_fast_dict$FastDict$values(fields));
			case 'RustTypeConstruct':
				var typeConstruct = rustType.a;
				return A2($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify, $author$project$ElmSyntaxToRust$rustTypeContainedVariables, typeConstruct._arguments);
			default:
				var typeFunction = rustType.a;
				return A2(
					$miniBill$elm_fast_dict$FastSet$union,
					A2($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify, $author$project$ElmSyntaxToRust$rustTypeContainedVariables, typeFunction.input),
					$author$project$ElmSyntaxToRust$rustTypeContainedVariables(typeFunction.output));
		}
	}
};
var $author$project$ElmSyntaxToRust$printRustFuncDeclaration = function (rustValueOrFunctionDeclaration) {
	var typeVariablesToDeclare = $miniBill$elm_fast_dict$FastSet$toList(
		A2(
			$miniBill$elm_fast_dict$FastSet$union,
			A2(
				$author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify,
				function (parameter) {
					return $author$project$ElmSyntaxToRust$rustTypeContainedVariables(parameter.type_);
				},
				rustValueOrFunctionDeclaration.parameters),
			$author$project$ElmSyntaxToRust$rustTypeContainedVariables(rustValueOrFunctionDeclaration.resultType)));
	var resultTypePrint = A2(
		$author$project$ElmSyntaxToRust$printRustTypeNotParenthesized,
		$elm$core$Maybe$Just($author$project$ElmSyntaxToRust$TypeOutgoing),
		rustValueOrFunctionDeclaration.resultType);
	var parameterPrints = A2(
		$elm$core$List$map,
		function (parameter) {
			var parameterTypePrint = A2(
				$author$project$ElmSyntaxToRust$printRustTypeNotParenthesized,
				$elm$core$Maybe$Just($author$project$ElmSyntaxToRust$TypeIncoming),
				parameter.type_);
			return A2(
				$author$project$Print$followedBy,
				$author$project$Print$withIndentAtNextMultipleOf4(
					A2(
						$author$project$Print$followedBy,
						parameterTypePrint,
						$author$project$Print$spaceOrLinebreakIndented(
							$author$project$Print$lineSpread(parameterTypePrint)))),
				A2(
					$author$project$Print$followedBy,
					$author$project$ElmSyntaxToRust$printExactlyColon,
					$author$project$ElmSyntaxToRust$printRustPatternNotParenthesized(parameter.pattern)));
		},
		rustValueOrFunctionDeclaration.parameters);
	var parametersLineSpread = A2($author$project$Print$lineSpreadListMapAndCombine, $author$project$Print$lineSpread, parameterPrints);
	var headerLineSpread = A2(
		$author$project$Print$lineSpreadMergeWith,
		function (_v1) {
			return $author$project$Print$lineSpread(resultTypePrint);
		},
		parametersLineSpread);
	return A2(
		$author$project$Print$followedBy,
		$author$project$ElmSyntaxToRust$printExactlyCurlyClosing,
		A2(
			$author$project$Print$followedBy,
			$author$project$Print$linebreakIndented,
			A2(
				$author$project$Print$followedBy,
				A2(
					$author$project$Print$withIndentIncreasedBy,
					4,
					A2(
						$author$project$Print$followedBy,
						$author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(rustValueOrFunctionDeclaration.result),
						A2(
							$author$project$Print$followedBy,
							$author$project$Print$linebreakIndented,
							A2(
								$author$project$Print$followedBy,
								$author$project$ElmSyntaxToRust$printExactlySpaceCurlyOpening,
								A2(
									$author$project$Print$followedBy,
									resultTypePrint,
									A2(
										$author$project$Print$followedBy,
										$author$project$Print$spaceOrLinebreakIndented(headerLineSpread),
										A2(
											$author$project$Print$followedBy,
											$author$project$ElmSyntaxToRust$printExactlySpaceMinusGreaterThanSpace,
											$author$project$ElmSyntaxToRust$printParenthesized(
												A2(
													$author$project$Print$followedBy,
													$author$project$Print$emptyOrLinebreakIndented(parametersLineSpread),
													A2(
														$author$project$Print$followedBy,
														A3(
															$author$project$Print$listMapAndIntersperseAndFlatten,
															function (parameterPrint) {
																return parameterPrint;
															},
															A2(
																$author$project$Print$followedBy,
																$author$project$Print$spaceOrLinebreakIndented(parametersLineSpread),
																$author$project$ElmSyntaxToRust$printExactlyComma),
															parameterPrints),
														$author$project$Print$emptyOrLinebreakIndented(parametersLineSpread))))))))))),
				$author$project$Print$exactly(
					'pub fn ' + (rustValueOrFunctionDeclaration.name + function () {
						var _v0 = _Utils_ap(
							A2(
								$elm$core$List$map,
								function (variable) {
									return '\'' + variable;
								},
								rustValueOrFunctionDeclaration.lifetimeParameters),
							A2(
								$elm$core$List$map,
								function (typeParameter) {
									return A2($elm$core$String$startsWith, 'comparable', typeParameter) ? (typeParameter + ': Copy + PartialOrd') : (typeParameter + ': Copy');
								},
								typeVariablesToDeclare));
						if (!_v0.b) {
							return '';
						} else {
							var typeParameter0 = _v0.a;
							var typeParameter1Up = _v0.b;
							return '<' + (A4(
								$author$project$ElmSyntaxToRust$listFilledMapAndStringJoinWith,
								', ',
								function (typeParameter) {
									return typeParameter;
								},
								typeParameter0,
								typeParameter1Up) + '>');
						}
					}())))));
};
var $author$project$ElmSyntaxToRust$printRustLetDeclaration = function (rustLetDeclaration) {
	var resultTypePrint = A2($author$project$ElmSyntaxToRust$printRustTypeNotParenthesized, $elm$core$Maybe$Nothing, rustLetDeclaration.resultType);
	var resultTypeFullLineSpread = $author$project$Print$lineSpread(resultTypePrint);
	return A2(
		$author$project$Print$followedBy,
		$author$project$Print$withIndentAtNextMultipleOf4(
			A2(
				$author$project$Print$followedBy,
				$author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(rustLetDeclaration.result),
				A2(
					$author$project$Print$followedBy,
					$author$project$ElmSyntaxToRust$printExactlySpaceEqualsLinebreakIndented,
					A2(
						$author$project$Print$followedBy,
						$author$project$Print$withIndentAtNextMultipleOf4(
							A2(
								$author$project$Print$followedBy,
								resultTypePrint,
								$author$project$Print$spaceOrLinebreakIndented(resultTypeFullLineSpread))),
						$author$project$ElmSyntaxToRust$printExactlyColon)))),
		$author$project$Print$exactly('pub let ' + rustLetDeclaration.name));
};
var $author$project$ElmSyntaxToRust$rustTypeParametersToString = function (rustTypeParameters) {
	if (!rustTypeParameters.b) {
		return '';
	} else {
		var parameter0 = rustTypeParameters.a;
		var parameter1Up = rustTypeParameters.b;
		return '<' + (A4(
			$author$project$ElmSyntaxToRust$listFilledMapAndStringJoinWith,
			', ',
			function (parameter) {
				return parameter;
			},
			parameter0,
			parameter1Up) + '>');
	}
};
var $author$project$ElmSyntaxToRust$printRustTypealiasDeclaration = function (rustTypeAliasDeclaration) {
	return A2(
		$author$project$Print$followedBy,
		$author$project$Print$withIndentAtNextMultipleOf4(
			A2(
				$author$project$Print$followedBy,
				A2($author$project$ElmSyntaxToRust$printRustTypeNotParenthesized, $elm$core$Maybe$Nothing, rustTypeAliasDeclaration.type_),
				$author$project$Print$linebreakIndented)),
		$author$project$Print$exactly(
			'public typealias ' + (rustTypeAliasDeclaration.name + ($author$project$ElmSyntaxToRust$rustTypeParametersToString(rustTypeAliasDeclaration.parameters) + ' ='))));
};
var $author$project$ElmSyntaxToRust$RustEnumTypeDeclaration = function (a) {
	return {$: 'RustEnumTypeDeclaration', a: a};
};
var $author$project$ElmSyntaxToRust$RustTypeAliasDeclaration = function (a) {
	return {$: 'RustTypeAliasDeclaration', a: a};
};
var $author$project$ElmSyntaxToRust$rustTypeContainedReferences = function (rustType) {
	rustTypeContainedReferences:
	while (true) {
		switch (rustType.$) {
			case 'RustTypeUnit':
				return $miniBill$elm_fast_dict$FastSet$empty;
			case 'RustTypeVariable':
				return $miniBill$elm_fast_dict$FastSet$empty;
			case 'RustTypeBorrow':
				var borrow = rustType.a;
				var $temp$rustType = borrow.type_;
				rustType = $temp$rustType;
				continue rustTypeContainedReferences;
			case 'RustTypeTuple':
				var parts = rustType.a;
				return A2(
					$miniBill$elm_fast_dict$FastSet$union,
					A2($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify, $author$project$ElmSyntaxToRust$rustTypeContainedReferences, parts.part2Up),
					A2(
						$miniBill$elm_fast_dict$FastSet$union,
						$author$project$ElmSyntaxToRust$rustTypeContainedReferences(parts.part1),
						$author$project$ElmSyntaxToRust$rustTypeContainedReferences(parts.part0)));
			case 'RustTypeRecord':
				var fields = rustType.a;
				return A2(
					$author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify,
					$author$project$ElmSyntaxToRust$rustTypeContainedReferences,
					$miniBill$elm_fast_dict$FastDict$values(fields));
			case 'RustTypeConstruct':
				var typeConstruct = rustType.a;
				return A2(
					$miniBill$elm_fast_dict$FastSet$union,
					function () {
						var _v1 = typeConstruct.qualification;
						if (!_v1.b) {
							return $miniBill$elm_fast_dict$FastSet$singleton(typeConstruct.name);
						} else {
							return $miniBill$elm_fast_dict$FastSet$empty;
						}
					}(),
					A2($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify, $author$project$ElmSyntaxToRust$rustTypeContainedReferences, typeConstruct._arguments));
			default:
				var typeFunction = rustType.a;
				return A2(
					$miniBill$elm_fast_dict$FastSet$union,
					A2($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify, $author$project$ElmSyntaxToRust$rustTypeContainedReferences, typeFunction.input),
					$author$project$ElmSyntaxToRust$rustTypeContainedReferences(typeFunction.output));
		}
	}
};
var $author$project$ElmSyntaxToRust$rustTypeDeclarationsGroupByDependencies = function (rustTypeDeclarations) {
	return {
		mostToLeastDependedOn: $author$project$Graph$stronglyConnComponents(
			A3(
				$elm$core$List$foldl,
				F2(
					function (aliasDeclaration, soFar) {
						return A2(
							$elm$core$List$cons,
							_Utils_Tuple3(
								$author$project$ElmSyntaxToRust$RustTypeAliasDeclaration(aliasDeclaration),
								aliasDeclaration.name,
								$miniBill$elm_fast_dict$FastSet$toList(
									$author$project$ElmSyntaxToRust$rustTypeContainedReferences(aliasDeclaration.type_))),
							soFar);
					}),
				A2(
					$elm$core$List$map,
					function (enumDeclaration) {
						return _Utils_Tuple3(
							$author$project$ElmSyntaxToRust$RustEnumTypeDeclaration(enumDeclaration),
							enumDeclaration.name,
							$miniBill$elm_fast_dict$FastSet$toList(
								A3(
									$miniBill$elm_fast_dict$FastDict$foldl,
									F3(
										function (_v0, variantValues, soFar) {
											return A2(
												$miniBill$elm_fast_dict$FastSet$union,
												soFar,
												A2(
													$author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify,
													function (variantValue) {
														return $author$project$ElmSyntaxToRust$rustTypeContainedReferences(variantValue);
													},
													variantValues));
										}),
									$miniBill$elm_fast_dict$FastSet$empty,
									enumDeclaration.variants)));
					},
					rustTypeDeclarations.enums),
				rustTypeDeclarations.typeAliases))
	};
};
var $author$project$Print$indentAtMost4 = function (atMost4) {
	switch (atMost4) {
		case 1:
			return ' ';
		case 2:
			return '  ';
		case 3:
			return '   ';
		default:
			return '    ';
	}
};
var $author$project$Print$indentInverseRemainderBy4 = function (inverseRemainderBy4) {
	switch (inverseRemainderBy4) {
		case 0:
			return '    ';
		case 1:
			return '   ';
		case 2:
			return '  ';
		default:
			return ' ';
	}
};
var $author$project$Print$toStringWithIndentAndLinebreakIndentAsStringWithRight = F4(
	function (indentIgnoringMultiplesOfBy4, linebreakIndentAsString, right, print) {
		toStringWithIndentAndLinebreakIndentAsStringWithRight:
		while (true) {
			switch (print.$) {
				case 'Exact':
					var string = print.a;
					return string + (right + '');
				case 'FollowedBy':
					var b = print.a;
					var a = print.b;
					var $temp$indentIgnoringMultiplesOfBy4 = indentIgnoringMultiplesOfBy4,
						$temp$linebreakIndentAsString = linebreakIndentAsString,
						$temp$right = A4($author$project$Print$toStringWithIndentAndLinebreakIndentAsStringWithRight, indentIgnoringMultiplesOfBy4, linebreakIndentAsString, right, b),
						$temp$print = a;
					indentIgnoringMultiplesOfBy4 = $temp$indentIgnoringMultiplesOfBy4;
					linebreakIndentAsString = $temp$linebreakIndentAsString;
					right = $temp$right;
					print = $temp$print;
					continue toStringWithIndentAndLinebreakIndentAsStringWithRight;
				case 'Linebreak':
					return '\n' + right;
				case 'LinebreakIndented':
					return linebreakIndentAsString + (right + '');
				case 'WithIndentIncreasedBy':
					var increase = print.a;
					var innerPrint = print.b;
					var $temp$indentIgnoringMultiplesOfBy4 = (indentIgnoringMultiplesOfBy4 + increase) + 0,
						$temp$linebreakIndentAsString = linebreakIndentAsString + ($author$project$Print$indentAtMost4(increase) + ''),
						$temp$right = right,
						$temp$print = innerPrint;
					indentIgnoringMultiplesOfBy4 = $temp$indentIgnoringMultiplesOfBy4;
					linebreakIndentAsString = $temp$linebreakIndentAsString;
					right = $temp$right;
					print = $temp$print;
					continue toStringWithIndentAndLinebreakIndentAsStringWithRight;
				default:
					var innerPrint = print.a;
					var $temp$indentIgnoringMultiplesOfBy4 = 0,
						$temp$linebreakIndentAsString = linebreakIndentAsString + ($author$project$Print$indentInverseRemainderBy4(indentIgnoringMultiplesOfBy4 - (((indentIgnoringMultiplesOfBy4 / 4) | 0) * 4)) + ''),
						$temp$right = right,
						$temp$print = innerPrint;
					indentIgnoringMultiplesOfBy4 = $temp$indentIgnoringMultiplesOfBy4;
					linebreakIndentAsString = $temp$linebreakIndentAsString;
					right = $temp$right;
					print = $temp$print;
					continue toStringWithIndentAndLinebreakIndentAsStringWithRight;
			}
		}
	});
var $author$project$Print$toStringWithIndent = F2(
	function (indent, print) {
		return A4($author$project$Print$toStringWithIndentAndLinebreakIndentAsStringWithRight, indent, '\n', '', print);
	});
var $author$project$Print$toString = function (print) {
	return A2($author$project$Print$toStringWithIndent, 0, print);
};
var $author$project$ElmSyntaxToRust$rustDeclarationsToModuleString = function (rustDeclarations) {
	var rustEnumDeclarationList = A2(
		$author$project$ElmSyntaxToRust$fastDictMapAndToList,
		F2(
			function (name, info) {
				return {name: name, parameters: info.parameters, variants: info.variants};
			}),
		rustDeclarations.enumTypes);
	var typeDeclarationsOrdered = $author$project$ElmSyntaxToRust$rustTypeDeclarationsGroupByDependencies(
		{
			enums: rustEnumDeclarationList,
			typeAliases: A2(
				$author$project$ElmSyntaxToRust$fastDictMapAndToList,
				F2(
					function (name, info) {
						return {name: name, parameters: info.parameters, type_: info.type_};
					}),
				rustDeclarations.typeAliases)
		});
	return '#![allow(dead_code)]\n#![allow(non_shorthand_field_patterns)]\n\nuse bumpalo::Bump;\n\n' + ($author$project$ElmSyntaxToRust$defaultDeclarations + ('\n\n' + ($author$project$Print$toString(
		A3(
			$author$project$Print$listMapAndIntersperseAndFlatten,
			function (typeAliasDeclarationGroup) {
				if (typeAliasDeclarationGroup.$ === 'AcyclicSCC') {
					var single = typeAliasDeclarationGroup.a;
					if (single.$ === 'RustEnumTypeDeclaration') {
						var rustEnumTypeDeclaration = single.a;
						return $author$project$ElmSyntaxToRust$printRustEnumDeclaration(
							{indirect: false, name: rustEnumTypeDeclaration.name, parameters: rustEnumTypeDeclaration.parameters, variants: rustEnumTypeDeclaration.variants});
					} else {
						var aliasDeclaration = single.a;
						return $author$project$ElmSyntaxToRust$printRustTypealiasDeclaration(aliasDeclaration);
					}
				} else {
					var recursiveBucket = typeAliasDeclarationGroup.a;
					if (!recursiveBucket.b) {
						return $author$project$Print$empty;
					} else {
						var recursiveBucketMember0 = recursiveBucket.a;
						var recursiveBucketMember1Up = recursiveBucket.b;
						return A2(
							$author$project$Print$followedBy,
							A3(
								$author$project$Print$listMapAndIntersperseAndFlatten,
								function (typeDeclaration) {
									return A2(
										$author$project$Print$followedBy,
										function () {
											if (typeDeclaration.$ === 'RustEnumTypeDeclaration') {
												var rustEnumTypeDeclaration = typeDeclaration.a;
												return $author$project$ElmSyntaxToRust$printRustEnumDeclaration(
													{indirect: true, name: rustEnumTypeDeclaration.name, parameters: rustEnumTypeDeclaration.parameters, variants: rustEnumTypeDeclaration.variants});
											} else {
												var aliasDeclaration = typeDeclaration.a;
												return $author$project$ElmSyntaxToRust$printRustTypealiasDeclaration(aliasDeclaration);
											}
										}(),
										$author$project$ElmSyntaxToRust$printLinebreakLinebreakIndented);
								},
								$author$project$Print$empty,
								recursiveBucketMember1Up),
							function () {
								if (recursiveBucketMember0.$ === 'RustEnumTypeDeclaration') {
									var rustEnumTypeDeclaration = recursiveBucketMember0.a;
									return $author$project$ElmSyntaxToRust$printRustEnumDeclaration(
										{indirect: true, name: rustEnumTypeDeclaration.name, parameters: rustEnumTypeDeclaration.parameters, variants: rustEnumTypeDeclaration.variants});
								} else {
									var aliasDeclaration = recursiveBucketMember0.a;
									return $author$project$ElmSyntaxToRust$printRustTypealiasDeclaration(aliasDeclaration);
								}
							}());
					}
				}
			},
			$author$project$ElmSyntaxToRust$printLinebreakLinebreakIndented,
			typeDeclarationsOrdered.mostToLeastDependedOn)) + ('\n\n\n' + ($author$project$Print$toString(
		A3(
			$author$project$Print$listMapAndIntersperseAndFlatten,
			function (rustValueOrFunctionPrint) {
				return A2($author$project$Print$followedBy, $author$project$ElmSyntaxToRust$printLinebreakLinebreakIndented, rustValueOrFunctionPrint);
			},
			$author$project$Print$empty,
			_Utils_ap(
				A2(
					$elm$core$List$map,
					$author$project$ElmSyntaxToRust$printRustLetDeclaration,
					A2(
						$author$project$ElmSyntaxToRust$fastDictMapAndToList,
						F2(
							function (name, valueOrFunctionInfo) {
								return {name: name, result: valueOrFunctionInfo.result, resultType: valueOrFunctionInfo.resultType};
							}),
						rustDeclarations.lets)),
				A2(
					$elm$core$List$map,
					$author$project$ElmSyntaxToRust$printRustFuncDeclaration,
					A2(
						$author$project$ElmSyntaxToRust$fastDictMapAndToList,
						F2(
							function (name, valueOrFunctionInfo) {
								return {lifetimeParameters: valueOrFunctionInfo.lifetimeParameters, name: name, parameters: valueOrFunctionInfo.parameters, result: valueOrFunctionInfo.result, resultType: valueOrFunctionInfo.resultType};
							}),
						rustDeclarations.fns))))) + '\n')))));
};
var $lue_bird$elm_state_interface_experimental$Node$standardOutWrite = function (text) {
	return $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle(
		$lue_bird$elm_state_interface_experimental$Node$StandardOutWrite(text));
};
var $elm$bytes$Bytes$Encode$Utf8 = F2(
	function (a, b) {
		return {$: 'Utf8', a: a, b: b};
	});
var $elm$bytes$Bytes$Encode$string = function (str) {
	return A2(
		$elm$bytes$Bytes$Encode$Utf8,
		_Bytes_getStringWidth(str),
		str);
};
var $author$project$Main$runningInterface = function (state) {
	return $lue_bird$elm_state_interface_experimental$Node$interfaceBatch(
		_List_fromArray(
			[
				function () {
				if ($miniBill$elm_fast_dict$FastSet$isEmpty(state.sourceDirectoriesToRead) && $miniBill$elm_fast_dict$FastSet$isEmpty(state.sourceFilesToRead)) {
					var transpiledDeclarationsAndErrors = $author$project$ElmSyntaxToRust$modules(state.parsedModules);
					return $lue_bird$elm_state_interface_experimental$Node$interfaceBatch(
						_List_fromArray(
							[
								$lue_bird$elm_state_interface_experimental$Node$standardOutWrite(
								A2($elm$core$String$join, '\n', transpiledDeclarationsAndErrors.errors) + '\n'),
								A2(
								$lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap,
								$author$project$Main$Finished,
								$lue_bird$elm_state_interface_experimental$Node$fileWrite(
									{
										content: $elm$bytes$Bytes$Encode$encode(
											$elm$bytes$Bytes$Encode$string(
												$author$project$ElmSyntaxToRust$rustDeclarationsToModuleString(transpiledDeclarationsAndErrors.declarations))),
										path: 'src/elm.rs'
									}))
							]));
				} else {
					return $lue_bird$elm_state_interface_experimental$Node$interfaceNone;
				}
			}(),
				$lue_bird$elm_state_interface_experimental$Node$interfaceBatch(
				A2(
					$author$project$Main$fastSetToListAndMap,
					function (sourceDirectoryPath) {
						return A2(
							$lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap,
							function (subPathsOrError) {
								if (subPathsOrError.$ === 'Err') {
									var sourceDirectoryReadError = subPathsOrError.a;
									return $author$project$Main$Running(
										_Utils_update(
											state,
											{
												sourceDirectoryReadErrors: A2(
													$elm$core$List$cons,
													{message: sourceDirectoryReadError.message, path: sourceDirectoryPath},
													state.sourceDirectoryReadErrors)
											}));
								} else {
									var subPaths = subPathsOrError.a;
									return $author$project$Main$Running(
										{
											parsedModules: state.parsedModules,
											sourceDirectoriesToRead: A2($miniBill$elm_fast_dict$FastSet$remove, sourceDirectoryPath, state.sourceDirectoriesToRead),
											sourceDirectoryReadErrors: state.sourceDirectoryReadErrors,
											sourceFileReadErrors: state.sourceFileReadErrors,
											sourceFilesToRead: A3(
												$elm$core$List$foldl,
												F2(
													function (subPath, soFar) {
														return A2($miniBill$elm_fast_dict$FastSet$insert, sourceDirectoryPath + ('/' + subPath), soFar);
													}),
												state.sourceFilesToRead,
												A2(
													$elm$core$List$filterMap,
													function (subPath) {
														return (!A2($elm$core$String$endsWith, '.elm', subPath)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(subPath);
													},
													subPaths))
										});
								}
							},
							$lue_bird$elm_state_interface_experimental$Node$directorySubPathsRequest(sourceDirectoryPath));
					},
					state.sourceDirectoriesToRead)),
				$lue_bird$elm_state_interface_experimental$Node$interfaceBatch(
				A2(
					$author$project$Main$fastSetToListAndMap,
					function (sourceFilePath) {
						return A2(
							$lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap,
							function (sourceBytesOrError) {
								var sourceBytesOrReadError = function () {
									if (sourceBytesOrError.$ === 'Err') {
										var sourceFileReadError = sourceBytesOrError.a;
										return $elm$core$Result$Err(sourceFileReadError.message);
									} else {
										var sourceBytes = sourceBytesOrError.a;
										return $author$project$Main$bytesToElmSyntaxModule(sourceBytes);
									}
								}();
								if (sourceBytesOrReadError.$ === 'Err') {
									var readError = sourceBytesOrReadError.a;
									return $author$project$Main$Running(
										_Utils_update(
											state,
											{
												sourceFileReadErrors: A2(
													$elm$core$List$cons,
													{message: readError, path: sourceFilePath},
													state.sourceFileReadErrors)
											}));
								} else {
									var syntaxModule = sourceBytesOrReadError.a;
									return $author$project$Main$Running(
										{
											parsedModules: A2($elm$core$List$cons, syntaxModule, state.parsedModules),
											sourceDirectoriesToRead: state.sourceDirectoriesToRead,
											sourceDirectoryReadErrors: state.sourceDirectoryReadErrors,
											sourceFileReadErrors: state.sourceFileReadErrors,
											sourceFilesToRead: A2($miniBill$elm_fast_dict$FastSet$remove, sourceFilePath, state.sourceFilesToRead)
										});
								}
							},
							$lue_bird$elm_state_interface_experimental$Node$fileRequest(sourceFilePath));
					},
					state.sourceFilesToRead)),
				$lue_bird$elm_state_interface_experimental$Node$interfaceBatch(
				A2(
					$elm$core$List$map,
					function (directoryReadError) {
						return $lue_bird$elm_state_interface_experimental$Node$standardOutWrite('failed to read the source directory ' + (directoryReadError.path + (': ' + (directoryReadError.message + '\n'))));
					},
					state.sourceDirectoryReadErrors)),
				$lue_bird$elm_state_interface_experimental$Node$interfaceBatch(
				A2(
					$elm$core$List$map,
					function (fileReadError) {
						return $lue_bird$elm_state_interface_experimental$Node$standardOutWrite('failed to read the source file ' + (fileReadError.path + (': ' + (fileReadError.message + '\n'))));
					},
					state.sourceFileReadErrors))
			]));
};
var $elm$project_metadata_utils$Elm$Package$toString = function (_v0) {
	var user = _v0.a;
	var project = _v0.b;
	return user + ('/' + project);
};
var $elm$project_metadata_utils$Elm$Version$toString = function (_v0) {
	var major = _v0.a;
	var minor = _v0.b;
	var patch = _v0.c;
	return $elm$core$String$fromInt(major) + ('.' + ($elm$core$String$fromInt(minor) + ('.' + $elm$core$String$fromInt(patch))));
};
var $author$project$Main$interface = function (state) {
	switch (state.$) {
		case 'WaitingForElmHomeDirectory':
			return A2(
				$lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap,
				function (environmentVariables) {
					var _v1 = A2($elm$core$Dict$get, 'ELM_HOME', environmentVariables);
					if (_v1.$ === 'Just') {
						var homeDirectory = _v1.a;
						return $author$project$Main$WaitingForElmJson(
							{elmHomeDirectory: homeDirectory});
					} else {
						return $author$project$Main$WaitingForNodeHomeDirectoryBecauseElmHomeIsNotDefined;
					}
				},
				$lue_bird$elm_state_interface_experimental$Node$environmentVariablesRequest);
		case 'WaitingForNodeHomeDirectoryBecauseElmHomeIsNotDefined':
			return A2(
				$lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap,
				function (homeDirectory) {
					return $author$project$Main$WaitingForElmJson(
						{elmHomeDirectory: homeDirectory + '/.elm'});
				},
				$lue_bird$elm_state_interface_experimental$Node$homeDirectoryPathRequest);
		case 'WaitingForElmJson':
			var homeDirectory = state.a;
			return A2(
				$lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap,
				function (elmJsonBytesOrError) {
					if (elmJsonBytesOrError.$ === 'Err') {
						var elmJsonReadError = elmJsonBytesOrError.a;
						return $author$project$Main$ElmJsonReadFailed(elmJsonReadError);
					} else {
						var elmJson = elmJsonBytesOrError.a;
						if (elmJson.$ === 'Application') {
							var application = elmJson.a;
							return $author$project$Main$Running(
								{
									parsedModules: _List_Nil,
									sourceDirectoriesToRead: $miniBill$elm_fast_dict$FastSet$fromList(
										_Utils_ap(
											application.dirs,
											A2(
												$elm$core$List$map,
												function (_v4) {
													var dependencyName = _v4.a;
													var dependencyVersion = _v4.b;
													return $author$project$Main$packageSourceDirectoryPath(
														{
															elmHomeDirectory: homeDirectory.elmHomeDirectory,
															packageName: $elm$project_metadata_utils$Elm$Package$toString(dependencyName),
															packageVersion: $elm$project_metadata_utils$Elm$Version$toString(dependencyVersion)
														});
												},
												_Utils_ap(application.depsDirect, application.depsIndirect)))),
									sourceDirectoryReadErrors: _List_Nil,
									sourceFileReadErrors: _List_Nil,
									sourceFilesToRead: $miniBill$elm_fast_dict$FastSet$empty
								});
						} else {
							return $author$project$Main$ElmJsonReadFailed('You\'re in a package but elm-to-rust only works for applications.');
						}
					}
				},
				$author$project$Main$nodeElmJsonRequest);
		case 'Running':
			var runningState = state.a;
			return $author$project$Main$runningInterface(runningState);
		case 'Finished':
			var result = state.a;
			if (result.$ === 'Err') {
				var error = result.a;
				return $author$project$Main$errorInterface('Failed to write the bundled code into src/elm.rs.');
			} else {
				return $lue_bird$elm_state_interface_experimental$Node$standardOutWrite('Successfully wrote the bundled code into src/elm.rs.\n');
			}
		default:
			var elmJsonDecodeError = state.a;
			return $author$project$Main$errorInterface(elmJsonDecodeError);
	}
};
var $lue_bird$elm_state_interface_experimental$Node$Add = function (a) {
	return {$: 'Add', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$State = function (a) {
	return {$: 'State', a: a};
};
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $lue_bird$elm_state_interface_experimental$Json$Encode$LocalExtra$nullable = F2(
	function (valueToJson, maybe) {
		if (maybe.$ === 'Nothing') {
			return $elm$json$Json$Encode$null;
		} else {
			var value = maybe.a;
			return valueToJson(value);
		}
	});
var $lue_bird$elm_state_interface_experimental$Json$Encode$LocalExtra$variant = function (tagAndValue) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'tag',
				$elm$json$Json$Encode$string(tagAndValue.tag)),
				_Utils_Tuple2('value', tagAndValue.value)
			]));
};
var $lue_bird$elm_state_interface_experimental$Node$interfaceSingleToJson = function (interfaceSingle) {
	return $lue_bird$elm_state_interface_experimental$Json$Encode$LocalExtra$variant(
		function () {
			switch (interfaceSingle.$) {
				case 'HttpRequestSend':
					var send = interfaceSingle.a;
					return {
						tag: 'HttpRequestSend',
						value: $elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'url',
									$elm$json$Json$Encode$string(send.url)),
									_Utils_Tuple2(
									'method',
									$elm$json$Json$Encode$string(send.method)),
									_Utils_Tuple2(
									'headers',
									A2(
										$elm$json$Json$Encode$list,
										function (header) {
											return $elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'name',
														$elm$json$Json$Encode$string(header.name)),
														_Utils_Tuple2(
														'value',
														$elm$json$Json$Encode$string(header.value))
													]));
										},
										send.headers)),
									_Utils_Tuple2(
									'bodyAsciiString',
									A2($lue_bird$elm_state_interface_experimental$Json$Encode$LocalExtra$nullable, $elm$json$Json$Encode$string, send.bodyAsciiString))
								]))
					};
				case 'HttpRequestListen':
					var listen = interfaceSingle.a;
					return {
						tag: 'HttpRequestListen',
						value: $elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'port',
									$elm$json$Json$Encode$int(listen.portNumber))
								]))
					};
				case 'HttpResponseSend':
					var send = interfaceSingle.a;
					return {
						tag: 'HttpResponseSend',
						value: $elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'port',
									$elm$json$Json$Encode$int(send.portNumber)),
									_Utils_Tuple2(
									'statusCode',
									$elm$json$Json$Encode$int(send.statusCode)),
									_Utils_Tuple2(
									'headers',
									A2(
										$elm$json$Json$Encode$list,
										function (header) {
											return $elm$json$Json$Encode$object(
												_List_fromArray(
													[
														_Utils_Tuple2(
														'name',
														$elm$json$Json$Encode$string(header.name)),
														_Utils_Tuple2(
														'value',
														$elm$json$Json$Encode$string(header.value))
													]));
										},
										send.headers)),
									_Utils_Tuple2(
									'dataAsciiString',
									$elm$json$Json$Encode$string(send.dataAsciiString))
								]))
					};
				case 'TimePosixRequest':
					return {tag: 'TimePosixRequest', value: $elm$json$Json$Encode$null};
				case 'TimezoneOffsetRequest':
					return {tag: 'TimezoneOffsetRequest', value: $elm$json$Json$Encode$null};
				case 'TimezoneNameRequest':
					return {tag: 'TimezoneNameRequest', value: $elm$json$Json$Encode$null};
				case 'TimeOnce':
					var once = interfaceSingle.a;
					return {
						tag: 'TimeOnce',
						value: $elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'pointInTime',
									$elm$json$Json$Encode$int(
										$elm$time$Time$posixToMillis(once.pointInTime)))
								]))
					};
				case 'RandomUnsignedInt32sRequest':
					var request = interfaceSingle.a;
					return {
						tag: 'RandomUnsignedInt32sRequest',
						value: $elm$json$Json$Encode$int(request.count)
					};
				case 'TimePeriodicallyListen':
					var intervalDuration = interfaceSingle.a;
					return {
						tag: 'TimePeriodicallyListen',
						value: $elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'milliSeconds',
									$elm$json$Json$Encode$int(intervalDuration.intervalDurationMilliSeconds))
								]))
					};
				case 'Exit':
					var code = interfaceSingle.a;
					return {
						tag: 'Exit',
						value: $elm$json$Json$Encode$int(code)
					};
				case 'DirectoryMake':
					var make = interfaceSingle.a;
					return {
						tag: 'DirectoryMake',
						value: $elm$json$Json$Encode$string(make.path)
					};
				case 'FileRemove':
					var path = interfaceSingle.a;
					return {
						tag: 'FileRemove',
						value: $elm$json$Json$Encode$string(path)
					};
				case 'FileWrite':
					var write = interfaceSingle.a;
					return {
						tag: 'FileWrite',
						value: $elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'path',
									$elm$json$Json$Encode$string(write.path)),
									_Utils_Tuple2(
									'contentAsciiString',
									$elm$json$Json$Encode$string(write.contentAsciiString))
								]))
					};
				case 'FileRequest':
					var request = interfaceSingle.a;
					return {
						tag: 'FileRequest',
						value: $elm$json$Json$Encode$string(request.path)
					};
				case 'FileChangeListen':
					var listen = interfaceSingle.a;
					return {
						tag: 'FileChangeListen',
						value: $elm$json$Json$Encode$string(listen.path)
					};
				case 'FileInfoRequest':
					var request = interfaceSingle.a;
					return {
						tag: 'FileInfoRequest',
						value: $elm$json$Json$Encode$string(request.path)
					};
				case 'DirectorySubPathsRequest':
					var request = interfaceSingle.a;
					return {
						tag: 'DirectorySubPathsRequest',
						value: $elm$json$Json$Encode$string(request.path)
					};
				case 'WorkingDirectoryPathRequest':
					return {tag: 'WorkingDirectoryPathRequest', value: $elm$json$Json$Encode$null};
				case 'HomeDirectoryPathRequest':
					return {tag: 'HomeDirectoryPathRequest', value: $elm$json$Json$Encode$null};
				case 'NullDevicePathRequest':
					return {tag: 'NullDevicePathRequest', value: $elm$json$Json$Encode$null};
				case 'LaunchArgumentsRequest':
					return {tag: 'LaunchArgumentsRequest', value: $elm$json$Json$Encode$null};
				case 'EnvironmentVariablesRequest':
					return {tag: 'EnvironmentVariablesRequest', value: $elm$json$Json$Encode$null};
				case 'TerminalSizeRequest':
					return {tag: 'TerminalSizeRequest', value: $elm$json$Json$Encode$null};
				case 'TerminalSizeChangeListen':
					return {tag: 'TerminalSizeChangeListen', value: $elm$json$Json$Encode$null};
				case 'ProcessTitleSet':
					var newTitle = interfaceSingle.a;
					return {
						tag: 'ProcessTitleSet',
						value: $elm$json$Json$Encode$string(newTitle)
					};
				case 'StandardOutWrite':
					var text = interfaceSingle.a;
					return {
						tag: 'StandardOutWrite',
						value: $elm$json$Json$Encode$string(text)
					};
				case 'StandardErrWrite':
					var text = interfaceSingle.a;
					return {
						tag: 'StandardErrWrite',
						value: $elm$json$Json$Encode$string(text)
					};
				case 'StandardInListen':
					return {tag: 'StandardInListen', value: $elm$json$Json$Encode$null};
				case 'StandardInRawListen':
					return {tag: 'StandardInRawListen', value: $elm$json$Json$Encode$null};
				case 'SubProcessSpawn':
					var spawn = interfaceSingle.a;
					return {
						tag: 'SubProcessSpawn',
						value: $elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'command',
									$elm$json$Json$Encode$string(spawn.command)),
									_Utils_Tuple2(
									'arguments',
									A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, spawn._arguments)),
									_Utils_Tuple2(
									'workingDirectoryPath',
									$elm$json$Json$Encode$string(spawn.workingDirectoryPath)),
									_Utils_Tuple2(
									'environmentVariables',
									$lue_bird$elm_state_interface_experimental$Node$environmentVariablesToJson(spawn.environmentVariables))
								]))
					};
				default:
					var write = interfaceSingle.a;
					return {
						tag: 'SubProcessStandardInWrite',
						value: $elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'command',
									$elm$json$Json$Encode$string(write.command)),
									_Utils_Tuple2(
									'arguments',
									A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, write._arguments)),
									_Utils_Tuple2(
									'workingDirectoryPath',
									$elm$json$Json$Encode$string(write.workingDirectoryPath)),
									_Utils_Tuple2(
									'environmentVariables',
									$lue_bird$elm_state_interface_experimental$Node$environmentVariablesToJson(write.environmentVariables)),
									_Utils_Tuple2(
									'data',
									$elm$json$Json$Encode$string(
										$lue_bird$elm_state_interface_experimental$AsciiString$fromBytes(write.data)))
								]))
					};
			}
		}());
};
var $lue_bird$elm_state_interface_experimental$Node$interfaceSingleDiffToJson = function (diff) {
	return $lue_bird$elm_state_interface_experimental$Json$Encode$LocalExtra$variant(
		function () {
			if (diff.$ === 'Add') {
				var interfaceSingleInfo = diff.a;
				return {
					tag: 'Add',
					value: $lue_bird$elm_state_interface_experimental$Node$interfaceSingleToJson(interfaceSingleInfo)
				};
			} else {
				return {tag: 'Remove', value: $elm$json$Json$Encode$null};
			}
		}());
};
var $lue_bird$elm_state_interface_experimental$Node$idAndDiffToJson = F2(
	function (id, diff) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'id',
					$elm$json$Json$Encode$string(id)),
					_Utils_Tuple2(
					'diff',
					$lue_bird$elm_state_interface_experimental$Node$interfaceSingleDiffToJson(diff))
				]));
	});
var $lue_bird$elm_state_interface_experimental$Node$programInit = function (appConfig) {
	var initialInterface = appConfig._interface(appConfig.initialState);
	return _Utils_Tuple2(
		$lue_bird$elm_state_interface_experimental$Node$State(
			{appState: appConfig.initialState, _interface: initialInterface}),
		$elm$core$Platform$Cmd$batch(
			A3(
				$miniBill$elm_fast_dict$FastDict$foldl,
				F3(
					function (id, _new, soFar) {
						return A2(
							$elm$core$List$cons,
							appConfig.ports.toJs(
								A2(
									$lue_bird$elm_state_interface_experimental$Node$idAndDiffToJson,
									id,
									$lue_bird$elm_state_interface_experimental$Node$Add(_new))),
							soFar);
					}),
				_List_Nil,
				initialInterface)));
};
var $lue_bird$elm_state_interface_experimental$Node$JsEventCouldNotBeAssociated = {$: 'JsEventCouldNotBeAssociated'};
var $lue_bird$elm_state_interface_experimental$Node$JsEventEnabledConstructionOfNewAppState = function (a) {
	return {$: 'JsEventEnabledConstructionOfNewAppState', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$JsEventFailedToDecode = function (a) {
	return {$: 'JsEventFailedToDecode', a: a};
};
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $lue_bird$elm_state_interface_experimental$Node$Associated = function (a) {
	return {$: 'Associated', a: a};
};
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$null = _Json_decodeNull;
var $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$resultOkErr = F2(
	function (okJsonDecoder, errJsonDecoder) {
		var valueOkJsonDecoder = A2($elm$json$Json$Decode$field, 'value', okJsonDecoder);
		var valueErrJsonDecoder = A2($elm$json$Json$Decode$field, 'value', errJsonDecoder);
		return A2(
			$elm$json$Json$Decode$andThen,
			function (tag) {
				switch (tag) {
					case 'Ok':
						return valueOkJsonDecoder;
					case 'Err':
						return valueErrJsonDecoder;
					default:
						return $elm$json$Json$Decode$fail('expected either \"Ok\" or \"Err\"');
				}
			},
			A2($elm$json$Json$Decode$field, 'tag', $elm$json$Json$Decode$string));
	});
var $lue_bird$elm_state_interface_experimental$Node$directoryMakeResultJsonDecoder = A2(
	$lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$resultOkErr,
	$elm$json$Json$Decode$null(
		$elm$core$Result$Ok(_Utils_Tuple0)),
	A3(
		$elm$json$Json$Decode$map2,
		F2(
			function (code, message) {
				return $elm$core$Result$Err(
					{code: code, message: message});
			}),
		$elm$json$Json$Decode$oneOf(
			_List_fromArray(
				[
					A2($elm$json$Json$Decode$field, 'code', $elm$json$Json$Decode$string),
					$elm$json$Json$Decode$succeed('')
				])),
		$elm$json$Json$Decode$oneOf(
			_List_fromArray(
				[
					A2($elm$json$Json$Decode$field, 'message', $elm$json$Json$Decode$string),
					$elm$json$Json$Decode$succeed('')
				]))));
var $lue_bird$elm_state_interface_experimental$Node$directorySubPathsResultJsonDecoder = A2(
	$lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$resultOkErr,
	A2(
		$elm$json$Json$Decode$map,
		$elm$core$Result$Ok,
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	A3(
		$elm$json$Json$Decode$map2,
		F2(
			function (code, message) {
				return $elm$core$Result$Err(
					{code: code, message: message});
			}),
		$elm$json$Json$Decode$oneOf(
			_List_fromArray(
				[
					A2($elm$json$Json$Decode$field, 'code', $elm$json$Json$Decode$string),
					$elm$json$Json$Decode$succeed('')
				])),
		$elm$json$Json$Decode$oneOf(
			_List_fromArray(
				[
					A2($elm$json$Json$Decode$field, 'message', $elm$json$Json$Decode$string),
					$elm$json$Json$Decode$succeed('')
				]))));
var $elm$json$Json$Decode$dict = function (decoder) {
	return A2(
		$elm$json$Json$Decode$map,
		$elm$core$Dict$fromList,
		$elm$json$Json$Decode$keyValuePairs(decoder));
};
var $lue_bird$elm_state_interface_experimental$Node$environmentVariablesJsonDecoder = $elm$json$Json$Decode$dict($elm$json$Json$Decode$string);
var $lue_bird$elm_state_interface_experimental$Node$FileAddedOrChanged = function (a) {
	return {$: 'FileAddedOrChanged', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$FileRemoved = function (a) {
	return {$: 'FileRemoved', a: a};
};
var $lue_bird$elm_state_interface_experimental$List$LocalExtra$firstJustMap = F2(
	function (elementToMaybeFound, list) {
		firstJustMap:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var head = list.a;
				var tail = list.b;
				var _v1 = elementToMaybeFound(head);
				if (_v1.$ === 'Nothing') {
					var $temp$elementToMaybeFound = elementToMaybeFound,
						$temp$list = tail;
					elementToMaybeFound = $temp$elementToMaybeFound;
					list = $temp$list;
					continue firstJustMap;
				} else {
					var found = _v1.a;
					return $elm$core$Maybe$Just(found);
				}
			}
		}
	});
var $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$choice = function (variantDecoders) {
	return A2(
		$elm$json$Json$Decode$andThen,
		function (tag) {
			var _v0 = A2(
				$lue_bird$elm_state_interface_experimental$List$LocalExtra$firstJustMap,
				function (variantDecoder) {
					return _Utils_eq(variantDecoder.tag, tag) ? $elm$core$Maybe$Just(variantDecoder.value) : $elm$core$Maybe$Nothing;
				},
				variantDecoders);
			if (_v0.$ === 'Just') {
				var valueDecoder = _v0.a;
				return A2($elm$json$Json$Decode$field, 'value', valueDecoder);
			} else {
				return $elm$json$Json$Decode$fail(
					'expected one of the following tags: ' + A2(
						$elm$core$String$join,
						', ',
						A2(
							$elm$core$List$map,
							function (variantDecoder) {
								return '\"' + (variantDecoder.tag + '\"');
							},
							variantDecoders)));
			}
		},
		A2($elm$json$Json$Decode$field, 'tag', $elm$json$Json$Decode$string));
};
var $lue_bird$elm_state_interface_experimental$Node$fileChangeJsonDecoder = $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$choice(
	_List_fromArray(
		[
			{
			tag: 'Removed',
			value: A2($elm$json$Json$Decode$map, $lue_bird$elm_state_interface_experimental$Node$FileRemoved, $elm$json$Json$Decode$string)
		},
			{
			tag: 'AddedOrChanged',
			value: A2($elm$json$Json$Decode$map, $lue_bird$elm_state_interface_experimental$Node$FileAddedOrChanged, $elm$json$Json$Decode$string)
		}
		]));
var $lue_bird$elm_state_interface_experimental$Node$KindDirectory = {$: 'KindDirectory'};
var $lue_bird$elm_state_interface_experimental$Node$KindFile = {$: 'KindFile'};
var $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$onlyString = function (specificAllowedString) {
	return A2(
		$elm$json$Json$Decode$andThen,
		function (str) {
			return _Utils_eq(str, specificAllowedString) ? $elm$json$Json$Decode$succeed(_Utils_Tuple0) : $elm$json$Json$Decode$fail('expected only \"' + (specificAllowedString + '\"'));
		},
		$elm$json$Json$Decode$string);
};
var $lue_bird$elm_state_interface_experimental$Node$fileKindJsonDecoder = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$map,
			function (_v0) {
				return $lue_bird$elm_state_interface_experimental$Node$KindFile;
			},
			$lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$onlyString('File')),
			A2(
			$elm$json$Json$Decode$map,
			function (_v1) {
				return $lue_bird$elm_state_interface_experimental$Node$KindDirectory;
			},
			$lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$onlyString('Directory'))
		]));
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $elm$json$Json$Decode$map3 = _Json_map3;
var $elm$time$Time$Posix = function (a) {
	return {$: 'Posix', a: a};
};
var $elm$time$Time$millisToPosix = $elm$time$Time$Posix;
var $elm$json$Json$Decode$nullable = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				$elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder)
			]));
};
var $lue_bird$elm_state_interface_experimental$Node$fileInfoJsonDecoder = $elm$json$Json$Decode$nullable(
	A4(
		$elm$json$Json$Decode$map3,
		F3(
			function (kind, byteCount, lastContentChangeTime) {
				return {byteCount: byteCount, kind: kind, lastContentChangeTime: lastContentChangeTime};
			}),
		A2($elm$json$Json$Decode$field, 'kind', $lue_bird$elm_state_interface_experimental$Node$fileKindJsonDecoder),
		A2($elm$json$Json$Decode$field, 'byteCount', $elm$json$Json$Decode$int),
		A2(
			$elm$json$Json$Decode$field,
			'lastContentChangePosixMilliseconds',
			A2($elm$json$Json$Decode$map, $elm$time$Time$millisToPosix, $elm$json$Json$Decode$int))));
var $lue_bird$elm_state_interface_experimental$AsciiString$asciiCharToInt = function (asciiChar) {
	return $elm$core$Char$toCode(asciiChar);
};
var $elm$core$Bitwise$or = _Bitwise_or;
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $elm$bytes$Bytes$Encode$U32 = F2(
	function (a, b) {
		return {$: 'U32', a: a, b: b};
	});
var $elm$bytes$Bytes$Encode$unsignedInt32 = $elm$bytes$Bytes$Encode$U32;
var $elm$bytes$Bytes$Encode$U8 = function (a) {
	return {$: 'U8', a: a};
};
var $elm$bytes$Bytes$Encode$unsignedInt8 = $elm$bytes$Bytes$Encode$U8;
var $lue_bird$elm_state_interface_experimental$AsciiString$encodeChunks = F3(
	function (input, inputLength, soFar) {
		encodeChunks:
		while (true) {
			var _v0 = $elm$core$String$toList(
				A3($elm$core$String$slice, 0, 4, input));
			if (_v0.b) {
				if (((_v0.b.b && _v0.b.b.b) && _v0.b.b.b.b) && (!_v0.b.b.b.b.b)) {
					var a = _v0.a;
					var _v1 = _v0.b;
					var b = _v1.a;
					var _v2 = _v1.b;
					var c = _v2.a;
					var _v3 = _v2.b;
					var d = _v3.a;
					var $temp$input = A3($elm$core$String$slice, 4, inputLength, input),
						$temp$inputLength = inputLength,
						$temp$soFar = A2(
						$elm$core$List$cons,
						A2(
							$elm$bytes$Bytes$Encode$unsignedInt32,
							$elm$bytes$Bytes$BE,
							(($lue_bird$elm_state_interface_experimental$AsciiString$asciiCharToInt(a) << 24) | ($lue_bird$elm_state_interface_experimental$AsciiString$asciiCharToInt(b) << 16)) | (($lue_bird$elm_state_interface_experimental$AsciiString$asciiCharToInt(c) << 8) | $lue_bird$elm_state_interface_experimental$AsciiString$asciiCharToInt(d))),
						soFar);
					input = $temp$input;
					inputLength = $temp$inputLength;
					soFar = $temp$soFar;
					continue encodeChunks;
				} else {
					var a = _v0.a;
					var $temp$input = A3($elm$core$String$slice, 1, inputLength, input),
						$temp$inputLength = inputLength,
						$temp$soFar = A2(
						$elm$core$List$cons,
						$elm$bytes$Bytes$Encode$unsignedInt8(
							$lue_bird$elm_state_interface_experimental$AsciiString$asciiCharToInt(a)),
						soFar);
					input = $temp$input;
					inputLength = $temp$inputLength;
					soFar = $temp$soFar;
					continue encodeChunks;
				}
			} else {
				return soFar;
			}
		}
	});
var $elm$bytes$Bytes$Encode$Seq = F2(
	function (a, b) {
		return {$: 'Seq', a: a, b: b};
	});
var $elm$bytes$Bytes$Encode$getWidths = F2(
	function (width, builders) {
		getWidths:
		while (true) {
			if (!builders.b) {
				return width;
			} else {
				var b = builders.a;
				var bs = builders.b;
				var $temp$width = width + $elm$bytes$Bytes$Encode$getWidth(b),
					$temp$builders = bs;
				width = $temp$width;
				builders = $temp$builders;
				continue getWidths;
			}
		}
	});
var $elm$bytes$Bytes$Encode$sequence = function (builders) {
	return A2(
		$elm$bytes$Bytes$Encode$Seq,
		A2($elm$bytes$Bytes$Encode$getWidths, 0, builders),
		builders);
};
var $lue_bird$elm_state_interface_experimental$AsciiString$encoder = function (string) {
	return $elm$bytes$Bytes$Encode$sequence(
		$elm$core$List$reverse(
			A3(
				$lue_bird$elm_state_interface_experimental$AsciiString$encodeChunks,
				string,
				$elm$core$String$length(string),
				_List_Nil)));
};
var $lue_bird$elm_state_interface_experimental$AsciiString$toBytes = function (string) {
	return $elm$bytes$Bytes$Encode$encode(
		$lue_bird$elm_state_interface_experimental$AsciiString$encoder(string));
};
var $lue_bird$elm_state_interface_experimental$Node$fileResultJsonDecoder = A2(
	$lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$resultOkErr,
	A2(
		$elm$json$Json$Decode$map,
		function (asciiString) {
			return $elm$core$Result$Ok(
				$lue_bird$elm_state_interface_experimental$AsciiString$toBytes(asciiString));
		},
		$elm$json$Json$Decode$string),
	A3(
		$elm$json$Json$Decode$map2,
		F2(
			function (code, message) {
				return $elm$core$Result$Err(
					{code: code, message: message});
			}),
		$elm$json$Json$Decode$oneOf(
			_List_fromArray(
				[
					A2($elm$json$Json$Decode$field, 'code', $elm$json$Json$Decode$string),
					$elm$json$Json$Decode$succeed('')
				])),
		$elm$json$Json$Decode$oneOf(
			_List_fromArray(
				[
					A2($elm$json$Json$Decode$field, 'message', $elm$json$Json$Decode$string),
					$elm$json$Json$Decode$succeed('')
				]))));
var $lue_bird$elm_state_interface_experimental$Node$fileWriteResultJsonDecoder = A2(
	$lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$resultOkErr,
	$elm$json$Json$Decode$null(
		$elm$core$Result$Ok(_Utils_Tuple0)),
	A3(
		$elm$json$Json$Decode$map2,
		F2(
			function (code, message) {
				return $elm$core$Result$Err(
					{code: code, message: message});
			}),
		$elm$json$Json$Decode$oneOf(
			_List_fromArray(
				[
					A2($elm$json$Json$Decode$field, 'code', $elm$json$Json$Decode$string),
					$elm$json$Json$Decode$succeed('')
				])),
		$elm$json$Json$Decode$oneOf(
			_List_fromArray(
				[
					A2($elm$json$Json$Decode$field, 'message', $elm$json$Json$Decode$string),
					$elm$json$Json$Decode$succeed('')
				]))));
var $lue_bird$elm_state_interface_experimental$Node$HttpBadUrl = {$: 'HttpBadUrl'};
var $lue_bird$elm_state_interface_experimental$Node$HttpNetworkError = function (a) {
	return {$: 'HttpNetworkError', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$httpErrorJsonDecoder = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$map,
			function (_v0) {
				return $lue_bird$elm_state_interface_experimental$Node$HttpBadUrl;
			},
			A2(
				$elm$json$Json$Decode$field,
				'cause',
				A2(
					$elm$json$Json$Decode$field,
					'code',
					$lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$onlyString('BAD_URL')))),
			A2(
			$elm$json$Json$Decode$map,
			$lue_bird$elm_state_interface_experimental$Node$HttpNetworkError,
			$elm$json$Json$Decode$oneOf(
				_List_fromArray(
					[
						A2($elm$json$Json$Decode$field, 'message', $elm$json$Json$Decode$string),
						$elm$json$Json$Decode$succeed('')
					])))
		]));
var $lue_bird$elm_state_interface_experimental$Node$HttpRequestReceived = function (a) {
	return {$: 'HttpRequestReceived', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$HttpResponseSent = {$: 'HttpResponseSent'};
var $lue_bird$elm_state_interface_experimental$Node$HttpServerFailed = function (a) {
	return {$: 'HttpServerFailed', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$HttpServerOpened = {$: 'HttpServerOpened'};
var $lue_bird$elm_state_interface_experimental$Node$httpServerEventJsonDecoder = $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$choice(
	_List_fromArray(
		[
			{
			tag: 'HttpServerOpened',
			value: $elm$json$Json$Decode$null($lue_bird$elm_state_interface_experimental$Node$HttpServerOpened)
		},
			{
			tag: 'HttpRequestReceived',
			value: A4(
				$elm$json$Json$Decode$map3,
				F3(
					function (method, headers, data) {
						return $lue_bird$elm_state_interface_experimental$Node$HttpRequestReceived(
							{data: data, headers: headers, method: method});
					}),
				A2($elm$json$Json$Decode$field, 'method', $elm$json$Json$Decode$string),
				A2(
					$elm$json$Json$Decode$field,
					'headers',
					$elm$json$Json$Decode$list(
						A3(
							$elm$json$Json$Decode$map2,
							F2(
								function (name, value) {
									return {name: name, value: value};
								}),
							A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
							A2($elm$json$Json$Decode$field, 'value', $elm$json$Json$Decode$string)))),
				A2(
					$elm$json$Json$Decode$field,
					'dataAsciiString',
					A2($elm$json$Json$Decode$map, $lue_bird$elm_state_interface_experimental$AsciiString$toBytes, $elm$json$Json$Decode$string)))
		},
			{
			tag: 'HttpResponseSent',
			value: $elm$json$Json$Decode$null($lue_bird$elm_state_interface_experimental$Node$HttpResponseSent)
		},
			{
			tag: 'HttpServerFailed',
			value: A3(
				$elm$json$Json$Decode$map2,
				F2(
					function (code, message) {
						return $lue_bird$elm_state_interface_experimental$Node$HttpServerFailed(
							{code: code, message: message});
					}),
				A2($elm$json$Json$Decode$field, 'code', $elm$json$Json$Decode$string),
				A2($elm$json$Json$Decode$field, 'message', $elm$json$Json$Decode$string))
		}
		]));
var $lue_bird$elm_state_interface_experimental$Node$HttpBadStatus = function (a) {
	return {$: 'HttpBadStatus', a: a};
};
var $elm$json$Json$Decode$map4 = _Json_map4;
var $lue_bird$elm_state_interface_experimental$Node$httpResponseJsonDecoder = A5(
	$elm$json$Json$Decode$map4,
	F4(
		function (statusCode, statusText, headers, body) {
			return {body: body, headers: headers, statusCode: statusCode, statusText: statusText};
		}),
	A2($elm$json$Json$Decode$field, 'statusCode', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'statusText', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'headers',
		$elm$json$Json$Decode$list(
			A3(
				$elm$json$Json$Decode$map2,
				F2(
					function (name, value) {
						return {name: name, value: value};
					}),
				A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
				A2($elm$json$Json$Decode$field, 'value', $elm$json$Json$Decode$string)))),
	A2(
		$elm$json$Json$Decode$field,
		'bodyAsciiString',
		A2($elm$json$Json$Decode$map, $lue_bird$elm_state_interface_experimental$AsciiString$toBytes, $elm$json$Json$Decode$string)));
var $lue_bird$elm_state_interface_experimental$Node$httpSuccessResponseJsonDecoder = A2(
	$elm$json$Json$Decode$map,
	function (response) {
		return ((response.statusCode >= 200) && (response.statusCode < 300)) ? $elm$core$Result$Ok(response.body) : $elm$core$Result$Err(
			$lue_bird$elm_state_interface_experimental$Node$HttpBadStatus(response));
	},
	$lue_bird$elm_state_interface_experimental$Node$httpResponseJsonDecoder);
var $lue_bird$elm_state_interface_experimental$Node$NotAssociated = {$: 'NotAssociated'};
var $lue_bird$elm_state_interface_experimental$Node$jsonDecodeSucceedNotAssociated = $elm$json$Json$Decode$succeed($lue_bird$elm_state_interface_experimental$Node$NotAssociated);
var $lue_bird$elm_state_interface_experimental$Node$launchArgumentsJsonDecoder = $elm$json$Json$Decode$list($elm$json$Json$Decode$string);
var $lue_bird$elm_state_interface_experimental$Time$LocalExtra$posixJsonDecoder = A2($elm$json$Json$Decode$map, $elm$time$Time$millisToPosix, $elm$json$Json$Decode$int);
var $lue_bird$elm_state_interface_experimental$Node$StreamDataEndReached = {$: 'StreamDataEndReached'};
var $lue_bird$elm_state_interface_experimental$Node$StreamDataReceived = function (a) {
	return {$: 'StreamDataReceived', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$streamReadEventOfStringDataJsonDecoder = $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$choice(
	_List_fromArray(
		[
			{
			tag: 'StreamDataReceived',
			value: A2($elm$json$Json$Decode$map, $lue_bird$elm_state_interface_experimental$Node$StreamDataReceived, $elm$json$Json$Decode$string)
		},
			{
			tag: 'StreamDataEndReached',
			value: $elm$json$Json$Decode$null($lue_bird$elm_state_interface_experimental$Node$StreamDataEndReached)
		}
		]));
var $lue_bird$elm_state_interface_experimental$Node$SubProcessExited = function (a) {
	return {$: 'SubProcessExited', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$SubProcessStandardErrEvent = function (a) {
	return {$: 'SubProcessStandardErrEvent', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$SubProcessStandardOutEvent = function (a) {
	return {$: 'SubProcessStandardOutEvent', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$streamReadEventOfBytesDataJsonDecoder = $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$choice(
	_List_fromArray(
		[
			{
			tag: 'StreamDataReceived',
			value: A2(
				$elm$json$Json$Decode$map,
				function (asciiString) {
					return $lue_bird$elm_state_interface_experimental$Node$StreamDataReceived(
						$lue_bird$elm_state_interface_experimental$AsciiString$toBytes(asciiString));
				},
				$elm$json$Json$Decode$string)
		},
			{
			tag: 'StreamDataEndReached',
			value: $elm$json$Json$Decode$null($lue_bird$elm_state_interface_experimental$Node$StreamDataEndReached)
		}
		]));
var $lue_bird$elm_state_interface_experimental$Node$subProcessEventJsonDecoder = $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$choice(
	_List_fromArray(
		[
			{
			tag: 'SubProcessExited',
			value: A2($elm$json$Json$Decode$map, $lue_bird$elm_state_interface_experimental$Node$SubProcessExited, $elm$json$Json$Decode$int)
		},
			{
			tag: 'SubProcessStandardOutEvent',
			value: A2($elm$json$Json$Decode$map, $lue_bird$elm_state_interface_experimental$Node$SubProcessStandardOutEvent, $lue_bird$elm_state_interface_experimental$Node$streamReadEventOfBytesDataJsonDecoder)
		},
			{
			tag: 'SubProcessStandardErrEvent',
			value: A2($elm$json$Json$Decode$map, $lue_bird$elm_state_interface_experimental$Node$SubProcessStandardErrEvent, $lue_bird$elm_state_interface_experimental$Node$streamReadEventOfStringDataJsonDecoder)
		}
		]));
var $lue_bird$elm_state_interface_experimental$Node$terminalSizeJsonDecoder = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (lines, columns) {
			return {columns: columns, lines: lines};
		}),
	A2($elm$json$Json$Decode$field, 'lines', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'columns', $elm$json$Json$Decode$int));
var $lue_bird$elm_state_interface_experimental$Node$interfaceSingleFutureJsonDecoder = function (_interface) {
	switch (_interface.$) {
		case 'HttpRequestSend':
			var send = _interface.a;
			return A2(
				$elm$json$Json$Decode$map,
				function (result) {
					return $lue_bird$elm_state_interface_experimental$Node$Associated(
						send.on(result));
				},
				A2(
					$lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$resultOkErr,
					$lue_bird$elm_state_interface_experimental$Node$httpSuccessResponseJsonDecoder,
					A2($elm$json$Json$Decode$map, $elm$core$Result$Err, $lue_bird$elm_state_interface_experimental$Node$httpErrorJsonDecoder)));
		case 'HttpRequestListen':
			var listen = _interface.a;
			return A2(
				$elm$json$Json$Decode$map,
				function (event) {
					return $lue_bird$elm_state_interface_experimental$Node$Associated(
						listen.on(event));
				},
				$lue_bird$elm_state_interface_experimental$Node$httpServerEventJsonDecoder);
		case 'HttpResponseSend':
			return $lue_bird$elm_state_interface_experimental$Node$jsonDecodeSucceedNotAssociated;
		case 'TimePosixRequest':
			var toFuture = _interface.a;
			return A2(
				$elm$json$Json$Decode$map,
				function (posix) {
					return $lue_bird$elm_state_interface_experimental$Node$Associated(
						toFuture(posix));
				},
				$lue_bird$elm_state_interface_experimental$Time$LocalExtra$posixJsonDecoder);
		case 'TimezoneOffsetRequest':
			var toFuture = _interface.a;
			return A2(
				$elm$json$Json$Decode$map,
				function (offset) {
					return $lue_bird$elm_state_interface_experimental$Node$Associated(
						toFuture(offset));
				},
				$elm$json$Json$Decode$int);
		case 'TimePeriodicallyListen':
			var periodicallyListen = _interface.a;
			return A2(
				$elm$json$Json$Decode$map,
				function (posix) {
					return $lue_bird$elm_state_interface_experimental$Node$Associated(
						periodicallyListen.on(posix));
				},
				$lue_bird$elm_state_interface_experimental$Time$LocalExtra$posixJsonDecoder);
		case 'TimeOnce':
			var once = _interface.a;
			return A2(
				$elm$json$Json$Decode$map,
				function (posix) {
					return $lue_bird$elm_state_interface_experimental$Node$Associated(
						once.on(posix));
				},
				$lue_bird$elm_state_interface_experimental$Time$LocalExtra$posixJsonDecoder);
		case 'TimezoneNameRequest':
			var toFuture = _interface.a;
			return A2(
				$elm$json$Json$Decode$map,
				function (zone) {
					return $lue_bird$elm_state_interface_experimental$Node$Associated(
						toFuture(zone));
				},
				$elm$json$Json$Decode$string);
		case 'RandomUnsignedInt32sRequest':
			var request = _interface.a;
			return A2(
				$elm$json$Json$Decode$map,
				function (randomness) {
					return $lue_bird$elm_state_interface_experimental$Node$Associated(
						request.on(randomness));
				},
				$elm$json$Json$Decode$list($elm$json$Json$Decode$int));
		case 'Exit':
			return $lue_bird$elm_state_interface_experimental$Node$jsonDecodeSucceedNotAssociated;
		case 'DirectoryMake':
			var make = _interface.a;
			return A2(
				$elm$json$Json$Decode$map,
				function (result) {
					return $lue_bird$elm_state_interface_experimental$Node$Associated(
						make.on(result));
				},
				$lue_bird$elm_state_interface_experimental$Node$directoryMakeResultJsonDecoder);
		case 'FileRemove':
			return $lue_bird$elm_state_interface_experimental$Node$jsonDecodeSucceedNotAssociated;
		case 'FileWrite':
			var write = _interface.a;
			return A2(
				$elm$json$Json$Decode$map,
				function (result) {
					return $lue_bird$elm_state_interface_experimental$Node$Associated(
						write.on(result));
				},
				$lue_bird$elm_state_interface_experimental$Node$fileWriteResultJsonDecoder);
		case 'FileRequest':
			var request = _interface.a;
			return A2(
				$elm$json$Json$Decode$map,
				function (result) {
					return $lue_bird$elm_state_interface_experimental$Node$Associated(
						request.on(result));
				},
				$lue_bird$elm_state_interface_experimental$Node$fileResultJsonDecoder);
		case 'FileChangeListen':
			var listen = _interface.a;
			return A2(
				$elm$json$Json$Decode$map,
				function (change) {
					return $lue_bird$elm_state_interface_experimental$Node$Associated(
						listen.on(change));
				},
				$lue_bird$elm_state_interface_experimental$Node$fileChangeJsonDecoder);
		case 'FileInfoRequest':
			var request = _interface.a;
			return A2(
				$elm$json$Json$Decode$map,
				function (info) {
					return $lue_bird$elm_state_interface_experimental$Node$Associated(
						request.on(info));
				},
				$lue_bird$elm_state_interface_experimental$Node$fileInfoJsonDecoder);
		case 'DirectorySubPathsRequest':
			var request = _interface.a;
			return A2(
				$elm$json$Json$Decode$map,
				function (subPaths) {
					return $lue_bird$elm_state_interface_experimental$Node$Associated(
						request.on(subPaths));
				},
				$lue_bird$elm_state_interface_experimental$Node$directorySubPathsResultJsonDecoder);
		case 'WorkingDirectoryPathRequest':
			var on = _interface.a;
			return A2(
				$elm$json$Json$Decode$map,
				function (path) {
					return $lue_bird$elm_state_interface_experimental$Node$Associated(
						on(path));
				},
				$elm$json$Json$Decode$string);
		case 'HomeDirectoryPathRequest':
			var on = _interface.a;
			return A2(
				$elm$json$Json$Decode$map,
				function (path) {
					return $lue_bird$elm_state_interface_experimental$Node$Associated(
						on(path));
				},
				$elm$json$Json$Decode$string);
		case 'NullDevicePathRequest':
			var on = _interface.a;
			return A2(
				$elm$json$Json$Decode$map,
				function (path) {
					return $lue_bird$elm_state_interface_experimental$Node$Associated(
						on(path));
				},
				$elm$json$Json$Decode$string);
		case 'LaunchArgumentsRequest':
			var on = _interface.a;
			return A2(
				$elm$json$Json$Decode$map,
				function (launchArguments) {
					return $lue_bird$elm_state_interface_experimental$Node$Associated(
						on(launchArguments));
				},
				$lue_bird$elm_state_interface_experimental$Node$launchArgumentsJsonDecoder);
		case 'EnvironmentVariablesRequest':
			var on = _interface.a;
			return A2(
				$elm$json$Json$Decode$map,
				function (environmentVariables) {
					return $lue_bird$elm_state_interface_experimental$Node$Associated(
						on(environmentVariables));
				},
				$lue_bird$elm_state_interface_experimental$Node$environmentVariablesJsonDecoder);
		case 'TerminalSizeRequest':
			var on = _interface.a;
			return A2(
				$elm$json$Json$Decode$map,
				function (size) {
					return $lue_bird$elm_state_interface_experimental$Node$Associated(
						on(size));
				},
				$lue_bird$elm_state_interface_experimental$Node$terminalSizeJsonDecoder);
		case 'TerminalSizeChangeListen':
			var on = _interface.a;
			return A2(
				$elm$json$Json$Decode$map,
				function (size) {
					return $lue_bird$elm_state_interface_experimental$Node$Associated(
						on(size));
				},
				$lue_bird$elm_state_interface_experimental$Node$terminalSizeJsonDecoder);
		case 'ProcessTitleSet':
			return $lue_bird$elm_state_interface_experimental$Node$jsonDecodeSucceedNotAssociated;
		case 'StandardOutWrite':
			return $lue_bird$elm_state_interface_experimental$Node$jsonDecodeSucceedNotAssociated;
		case 'StandardErrWrite':
			return $lue_bird$elm_state_interface_experimental$Node$jsonDecodeSucceedNotAssociated;
		case 'StandardInListen':
			var on = _interface.a;
			return A2(
				$elm$json$Json$Decode$map,
				function (event) {
					return $lue_bird$elm_state_interface_experimental$Node$Associated(
						on(event));
				},
				$elm$json$Json$Decode$string);
		case 'StandardInRawListen':
			var on = _interface.a;
			return A2(
				$elm$json$Json$Decode$map,
				function (event) {
					return $lue_bird$elm_state_interface_experimental$Node$Associated(
						on(event));
				},
				$lue_bird$elm_state_interface_experimental$Node$streamReadEventOfStringDataJsonDecoder);
		case 'SubProcessSpawn':
			var spawn = _interface.a;
			return A2(
				$elm$json$Json$Decode$map,
				function (event) {
					return $lue_bird$elm_state_interface_experimental$Node$Associated(
						spawn.on(event));
				},
				$lue_bird$elm_state_interface_experimental$Node$subProcessEventJsonDecoder);
		default:
			return $lue_bird$elm_state_interface_experimental$Node$jsonDecodeSucceedNotAssociated;
	}
};
var $lue_bird$elm_state_interface_experimental$Node$jsonDecodeFieldIdString = A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$string);
var $lue_bird$elm_state_interface_experimental$Node$programSubscriptions = F2(
	function (appConfig, _v0) {
		var state = _v0.a;
		return appConfig.ports.fromJs(
			function (interfaceJson) {
				var newStateJsonDecoder = A2(
					$elm$json$Json$Decode$andThen,
					function (originalInterfaceId) {
						var _v3 = A2($miniBill$elm_fast_dict$FastDict$get, originalInterfaceId, state._interface);
						if (_v3.$ === 'Nothing') {
							return $lue_bird$elm_state_interface_experimental$Node$jsonDecodeSucceedNotAssociated;
						} else {
							var interfaceSingleAcceptingFuture = _v3.a;
							return A2(
								$elm$json$Json$Decode$field,
								'eventData',
								$lue_bird$elm_state_interface_experimental$Node$interfaceSingleFutureJsonDecoder(interfaceSingleAcceptingFuture));
						}
					},
					$lue_bird$elm_state_interface_experimental$Node$jsonDecodeFieldIdString);
				var _v1 = A2($elm$json$Json$Decode$decodeValue, newStateJsonDecoder, interfaceJson);
				if (_v1.$ === 'Ok') {
					var result = _v1.a;
					if (result.$ === 'Associated') {
						var associated = result.a;
						return $lue_bird$elm_state_interface_experimental$Node$JsEventEnabledConstructionOfNewAppState(associated);
					} else {
						return $lue_bird$elm_state_interface_experimental$Node$JsEventCouldNotBeAssociated;
					}
				} else {
					var error = _v1.a;
					return $lue_bird$elm_state_interface_experimental$Node$JsEventFailedToDecode(error);
				}
			});
	});
var $lue_bird$elm_state_interface_experimental$Node$Remove = function (a) {
	return {$: 'Remove', a: a};
};
var $lue_bird$elm_state_interface_experimental$Node$remove = $lue_bird$elm_state_interface_experimental$Node$Remove(_Utils_Tuple0);
var $lue_bird$elm_state_interface_experimental$Node$interfacesDiffMap = F2(
	function (idAndDiffCombine, interfaces) {
		return A6(
			$miniBill$elm_fast_dict$FastDict$merge,
			F3(
				function (removedId, _v0, soFar) {
					return A2(
						$elm$core$List$cons,
						A2(idAndDiffCombine, removedId, $lue_bird$elm_state_interface_experimental$Node$remove),
						soFar);
				}),
			F4(
				function (_v1, _v2, _v3, soFar) {
					return soFar;
				}),
			F3(
				function (addedId, onlyNew, soFar) {
					return A2(
						$elm$core$List$cons,
						A2(
							idAndDiffCombine,
							addedId,
							$lue_bird$elm_state_interface_experimental$Node$Add(onlyNew)),
						soFar);
				}),
			interfaces.old,
			interfaces.updated,
			_List_Nil);
	});
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $lue_bird$elm_state_interface_experimental$Node$programUpdate = F3(
	function (appConfig, event, state) {
		switch (event.$) {
			case 'JsEventFailedToDecode':
				var jsonError = event.a;
				return _Utils_Tuple2(
					state,
					function () {
						var notifyOfSkippedEventInterface = $lue_bird$elm_state_interface_experimental$Node$StandardErrWrite(
							'js event skipped because: ' + $elm$json$Json$Decode$errorToString(jsonError));
						return appConfig.ports.toJs(
							A2(
								$lue_bird$elm_state_interface_experimental$Node$idAndDiffToJson,
								$lue_bird$elm_state_interface_experimental$StructuredId$toString(
									$lue_bird$elm_state_interface_experimental$Node$interfaceSingleToStructuredId(notifyOfSkippedEventInterface)),
								$lue_bird$elm_state_interface_experimental$Node$Add(notifyOfSkippedEventInterface)));
					}());
			case 'JsEventCouldNotBeAssociated':
				return _Utils_Tuple2(state, $elm$core$Platform$Cmd$none);
			default:
				var updatedAppState = event.a;
				var updatedInterface = appConfig._interface(updatedAppState);
				var _v1 = state;
				var oldState = _v1.a;
				return _Utils_Tuple2(
					$lue_bird$elm_state_interface_experimental$Node$State(
						{appState: updatedAppState, _interface: updatedInterface}),
					$elm$core$Platform$Cmd$batch(
						A2(
							$lue_bird$elm_state_interface_experimental$Node$interfacesDiffMap,
							F2(
								function (id, diff) {
									return appConfig.ports.toJs(
										A2($lue_bird$elm_state_interface_experimental$Node$idAndDiffToJson, id, diff));
								}),
							{old: oldState._interface, updated: updatedInterface})));
		}
	});
var $elm$core$Platform$worker = _Platform_worker;
var $lue_bird$elm_state_interface_experimental$Node$program = function (appConfig) {
	return $elm$core$Platform$worker(
		{
			init: function (_v0) {
				return $lue_bird$elm_state_interface_experimental$Node$programInit(appConfig);
			},
			subscriptions: function (state) {
				return A2($lue_bird$elm_state_interface_experimental$Node$programSubscriptions, appConfig, state);
			},
			update: F2(
				function (event, state) {
					return A3($lue_bird$elm_state_interface_experimental$Node$programUpdate, appConfig, event, state);
				})
		});
};
var $author$project$Main$toJs = _Platform_outgoingPort('toJs', $elm$core$Basics$identity);
var $author$project$Main$main = $lue_bird$elm_state_interface_experimental$Node$program(
	{
		initialState: $author$project$Main$initialState,
		_interface: $author$project$Main$interface,
		ports: {fromJs: $author$project$Main$fromJs, toJs: $author$project$Main$toJs}
	});
/*
_Platform_export({'Main':{'init':$author$project$Main$main(
	$elm$json$Json$Decode$succeed(_Utils_Tuple0))(0)}});}(this));
*/
export const Elm = {'Main':{'init':$author$project$Main$main(
	$elm$json$Json$Decode$succeed(_Utils_Tuple0))(0)}};
  