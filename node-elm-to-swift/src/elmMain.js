// -- (function (scope) {
// -- "use strict";
function $$Record1(ca, bQ, bv, bw, bR) {
    this.ca = ca;
    this.bQ = bQ;
    this.bv = bv;
    this.bw = bw;
    this.bR = bR;
}
$$Record1.
    prototype.$c = function () {
        return new $$Record1(this.ca, this.bQ, this.bv, this.bw, this.bR);
    };
function F(arity, fun, wrapper) {
    wrapper.a = arity;
    wrapper.f = fun;
    return wrapper;
}
function F2(fun) {
    var curried = function (a) {
        return function (b) {
            return fun(a, b);
        };
    };
    curried.a2 = fun;
    return curried;
}
function F3(fun) {
    var curried = function (a) {
        return function (b) {
            return function (c) {
                return fun(a, b, c);
            };
        };
    };
    curried.a3 =
        fun;
    return curried;
}
function F4(fun) {
    var curried = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return fun(a, b, c, d);
                };
            };
        };
    };
    curried.a4 = fun;
    return curried;
}
function F5(fun) {
    var curried = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return fun(a, b, c, d, e);
                    };
                };
            };
        };
    };
    curried.a5 = fun;
    return curried;
}
function F6(fun) {
    var curried = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return fun(a, b, c, d, e, f);
                        };
                    };
                };
            };
        };
    };
    curried.a6 = fun;
    return curried;
}
function F7(fun) {
    var curried = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) { return fun(a, b, c, d, e, f, g); };
                        };
                    };
                };
            };
        };
    };
    curried.
        a7 = fun;
    return curried;
}
function F8(fun) {
    var curried = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return fun(a, b, c, d, e, f, g, h);
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    curried.a8 = fun;
    return curried;
}
function F9(fun) {
    var curried = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return function (i) {
                                        return fun(a, b, c, d, e, f, g, h, i);
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    curried
        .a9 = fun;
    return curried;
}
function A2(fun, a, b) {
    return fun.a2 ? fun.a2(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
    return fun.a3 ? fun.a3(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
    return fun.a4 ? fun.a4(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
    return fun.a5 ? fun.a5(a, b, c, d, e)
        : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
    return fun.a6 ? fun.a6(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
    return fun.a7 ? fun.a7(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
    return fun.a8 ? fun.a8(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
    return fun.a9 ? fun.a9(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}
var _JsArray_empty = [];
function _JsArray_singleton(value) {
    return [value];
}
function _JsArray_length(array) {
    return array.length;
}
var _JsArray_initialize_fn = function (size, offset, func) {
    var result = new Array(size);
    for (var i = 0; i < size; i++) {
        result[i] = func(offset + i);
    }
    return result;
}, _JsArray_initialize = F3(_JsArray_initialize_fn);
var _JsArray_initializeFromList_fn = function (max, ls) {
    var result = new Array(max);
    for (var i = 0; i < max && ls.b; i++) {
        result[i] = ls.a;
        ls = ls.b;
    }
    result.length = i;
    return _Utils_Tuple2(result, ls);
}, _JsArray_initializeFromList = F2(_JsArray_initializeFromList_fn);
var _JsArray_unsafeGet_fn = function (index, array) {
    return array[index];
}, _JsArray_unsafeGet = F2(_JsArray_unsafeGet_fn);
var _JsArray_unsafeSet_fn = function (index, value, array) {
    var length = array.length;
    var result = new Array(length);
    for (var i = 0; i < length; i++) {
        result[i] = array[i];
    }
    result[index] = value;
    return result;
}, _JsArray_unsafeSet = F3(_JsArray_unsafeSet_fn);
var _JsArray_push_fn = function (value, array) {
    var length = array.length;
    var result = new Array(length + 1);
    for (var i = 0; i < length; i++) {
        result[i] = array[i];
    }
    result[length] = value;
    return result;
}, _JsArray_push = F2(_JsArray_push_fn);
var _JsArray_foldl_fn = function (func, acc, array) {
    var length = array.length;
    for (var i = 0; i < length; i++) {
        acc = A2(func, array[i], acc);
    }
    return acc;
}, _JsArray_foldl_fn_unwrapped = function (func, acc, array) {
    var length = array.length;
    for (var i = 0; i < length; i++) {
        acc = func(array[i], acc);
    }
    return acc;
}, _JsArray_foldl = F3(_JsArray_foldl_fn);
var _JsArray_foldr_fn = function (func, acc, array) {
    for (var i = array.length - 1; i >= 0; i--) {
        acc = A2(func, array[i], acc);
    }
    return acc;
}, _JsArray_foldr_fn_unwrapped = function (func, acc, array) {
    for (var i = array.length - 1; i >= 0; i--) {
        acc = func(array[i], acc);
    }
    return acc;
}, _JsArray_foldr = F3(_JsArray_foldr_fn);
var _JsArray_map_fn = function (func, array) {
    var length = array.length;
    var result = new Array(length);
    for (var i = 0; i < length; i++) {
        result[i] = func(array[i]);
    }
    return result;
}, _JsArray_map = F2(_JsArray_map_fn);
var _JsArray_indexedMap_fn = function (func, offset, array) {
    var length = array.length;
    var result = new Array(length);
    for (var i = 0; i < length; i++) {
        result[i] = A2(func, offset + i, array[i]);
    }
    return result;
}, _JsArray_indexedMap_fn_unwrapped = function (func, offset, array) {
    var length = array.length;
    var result = new Array(length);
    for (var i = 0; i < length; i++) {
        result[i] = func(offset + i, array[i]);
    }
    return result;
}, _JsArray_indexedMap = F3(_JsArray_indexedMap_fn);
var _JsArray_slice_fn = function (from, to, array) {
    return array.slice(from, to);
}, _JsArray_slice = F3(_JsArray_slice_fn);
var _JsArray_appendN_fn = function (n, dest, source) {
    var destLen = dest.length;
    var itemsToCopy = n - destLen;
    if (itemsToCopy > source.length) {
        itemsToCopy = source.length;
    }
    var size = destLen + itemsToCopy;
    var result = new Array(size);
    for (var i = 0; i < destLen; i++) {
        result[i] = dest[i];
    }
    for (var i = 0; i < itemsToCopy; i++) {
        result[i + destLen] = source[i];
    }
    return result;
}, _JsArray_appendN = F3(_JsArray_appendN_fn);
var _Debug_log_fn = function (tag, value) {
    return value;
}, _Debug_log = F2(_Debug_log_fn);
var _Debug_log_UNUSED_fn = function (tag, value) {
    console.log(tag + ": " + _Debug_toString(value));
    return value;
}, _Debug_log_UNUSED = F2(_Debug_log_UNUSED_fn);
function _Debug_todo(moduleName, region) {
    return function (message) {
        _Debug_crash(8, moduleName, region, message);
    };
}
function _Debug_todoCase(moduleName, region, value) {
    return function (message) {
        _Debug_crash(9, moduleName, region, value, message);
    };
}
function _Debug_toString(value) {
    return "<internals>";
}
function _Debug_toString_UNUSED(value) {
    return _Debug_toAnsiString(false, value);
}
function _Debug_toAnsiString(ansi, value) {
    if (typeof value === "function") {
        return _Debug_internalColor(ansi, "<function>");
    }
    if (typeof value === "boolean") {
        return _Debug_ctorColor(ansi, value ? "True" : "False");
    }
    if (typeof value === "number") {
        return _Debug_numberColor(ansi, value + "");
    }
    if (value instanceof String) {
        return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
    }
    if (typeof value === "string") {
        return _Debug_stringColor(ansi, "\"" + _Debug_addSlashes(value, false) + "\"");
    }
    if (typeof value === "object" && "$" in value) {
        var tag = value.$;
        if (typeof tag === "number") {
            return _Debug_internalColor(ansi, "<internals>");
        }
        if (tag[0] === "#") {
            var output = [];
            for (var k in value) {
                if (k === "$")
                    continue;
                output.push(_Debug_toAnsiString(ansi, value[k]));
            }
            return "(" + output.join(",") + ")";
        }
        if (tag === "Set_elm_builtin") {
            return _Debug_ctorColor(ansi, "Set")
                + _Debug_fadeColor(ansi, ".fromList") + " "
                + _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
        }
        if (tag === "RBNode_elm_builtin" || tag === "RBEmpty_elm_builtin") {
            return _Debug_ctorColor(ansi, "Dict")
                + _Debug_fadeColor(ansi, ".fromList") + " "
                + _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
        }
        if (tag === "Array_elm_builtin") {
            return _Debug_ctorColor(ansi, "Array")
                + _Debug_fadeColor(ansi, ".fromList") + " "
                + _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
        }
        if (tag === "::" || tag === "[]") {
            var output = "[";
            value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b);
            for (; value.b; value = value.b) {
                output += "," + _Debug_toAnsiString(ansi, value.a);
            }
            return output + "]";
        }
        var output = "";
        for (var i in value) {
            if (i === "$")
                continue;
            var str = _Debug_toAnsiString(ansi, value[i]);
            var c0 = str[0];
            var parenless = c0 === "{" || c0 === "(" || c0 === "[" || c0 === "<" || c0 === "\"" || str.indexOf(" ") < 0;
            output += " " + (parenless ? str : "(" + str + ")");
        }
        return _Debug_ctorColor(ansi, tag) + output;
    }
    if (typeof DataView === "function" && value instanceof DataView) {
        return _Debug_stringColor(ansi, "<" + value.byteLength + " bytes>");
    }
    if (typeof File !== "undefined" && value instanceof File) {
        return _Debug_internalColor(ansi, "<" + value.name + ">");
    }
    if (typeof value === "object") {
        var output = [];
        for (var key in value) {
            var field = key[0] === "_" ? key.slice(1) : key;
            output.push(_Debug_fadeColor(ansi, field) + " = " + _Debug_toAnsiString(ansi, value[key]));
        }
        if (output.length === 0) {
            return "{}";
        }
        return "{ " + output.join(", ") + " }";
    }
    return _Debug_internalColor(ansi, "<internals>");
}
function _Debug_addSlashes(str, isChar) {
    var s = str
        .replace(/\\/g, "\\\\")
        .replace(/\n/g, "\\n")
        .replace(/\t/g, "\\t")
        .replace(/\r/g, "\\r")
        .replace(/\v/g, "\\v")
        .replace(/\0/g, "\\0");
    if (isChar) {
        return s.replace(/\'/g, "\\'");
    }
    else {
        return s.replace(/\"/g, "\\\"");
    }
}
function _Debug_ctorColor(ansi, string) {
    return ansi ? "\u001B[96m" + string + "\u001B[0m" : string;
}
function _Debug_numberColor(ansi, string) {
    return ansi ? "\u001B[95m" + string + "\u001B[0m" : string;
}
function _Debug_stringColor(ansi, string) {
    return ansi ? "\u001B[93m" + string + "\u001B[0m" : string;
}
function _Debug_charColor(ansi, string) {
    return ansi ? "\u001B[92m" + string + "\u001B[0m" : string;
}
function _Debug_fadeColor(ansi, string) {
    return ansi ? "\u001B[37m" + string + "\u001B[0m" : string;
}
function _Debug_internalColor(ansi, string) {
    return ansi ? "\u001B[36m" + string + "\u001B[0m" : string;
}
function _Debug_toHexDigit(n) {
    return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}
function _Debug_crash(identifier) {
    throw new Error("https://github.com/elm/core/blob/1.0.0/hints/" + identifier + ".md");
}
function _Debug_crash_UNUSED(identifier, fact1, fact2, fact3, fact4) {
    switch (identifier) {
        case 0:
            throw new Error("What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById(\"elm-node\")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.");
        case 1:
            throw new Error("Browser.application programs cannot handle URLs like this:\n\n    " + document.location.href + "\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.");
        case 2:
            var jsonErrorString = fact1;
            throw new Error("Problem with the flags given to your Elm program on initialization.\n\n" + jsonErrorString);
        case 3:
            var portName = fact1;
            throw new Error("There can only be one port named `" + portName + "`, but your program has multiple.");
        case 4:
            var portName = fact1;
            var problem = fact2;
            throw new Error("Trying to send an unexpected type of value through port `" + portName + "`:\n" + problem);
        case 5:
            throw new Error("Trying to use `(==)` on functions.\nThere is no way to know if functions are \"the same\" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.");
        case 6:
            var moduleName = fact1;
            throw new Error("Your page is loading multiple Elm scripts with a module named " + moduleName + ". Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!");
        case 8:
            var moduleName = fact1;
            var region = fact2;
            var message = fact3;
            throw new Error("TODO in module `" + moduleName + "` " + _Debug_regionToString(region) + "\n\n" + message);
        case 9:
            var moduleName = fact1;
            var region = fact2;
            var value = fact3;
            var message = fact4;
            throw new Error("TODO in module `" + moduleName + "` from the `case` expression "
                + _Debug_regionToString(region) + "\n\nIt received the following value:\n\n    "
                + _Debug_toString(value).replace("\n", "\n    ")
                + "\n\nBut the branch that handles it says:\n\n    " + message.replace("\n", "\n    "));
        case 10:
            throw new Error("Bug in https://github.com/elm/virtual-dom/issues");
        case 11:
            throw new Error("Cannot perform mod 0. Division by zero error.");
    }
}
function _Debug_regionToString(region) {
    if (region.cf.cR === region.b_.cR) {
        return "on line " + region.cf.cR;
    }
    return "on lines " + region.cf.cR + " through " + region.b_.cR;
}
function _Utils_eq(x, y) {
    for (var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack); isEqual && (pair = stack.pop()); isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)) { }
    return isEqual;
}
function _Utils_eqHelp(x, y, depth, stack) {
    if (x === y) {
        return true;
    }
    if (typeof x !== "object" || x === null || y === null) {
        typeof x === "function" && _Debug_crash(5);
        return false;
    }
    if (depth > 100) {
        stack.push(_Utils_Tuple2(x, y));
        return true;
    }
    if (x.$ < 0) {
        x = $elm$core$Dict$toList(x);
        y = $elm$core$Dict$toList(y);
    }
    for (var key in x) {
        if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack)) {
            return false;
        }
    }
    return true;
}
var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual_fn = function (a, b) { return !_Utils_eq(a, b); }, _Utils_notEqual = F2(_Utils_notEqual_fn);
function _Utils_cmp(x, y, ord) {
    if (typeof x !== "object") {
        return x === y ? 0 : x < y ? -1 : 1;
    }
    if (typeof x.$ === "undefined") {
        return (ord = _Utils_cmp(x.a, y.a))
            ? ord
            : (ord = _Utils_cmp(x.b, y.b))
                ? ord
                : _Utils_cmp(x.c, y.c);
    }
    for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) { }
    return ord || (x.b ? 1 : y.b ? -1 : 0);
}
var _Utils_lt_fn = function (a, b) { return _Utils_cmp(a, b) < 0; }, _Utils_lt = F2(_Utils_lt_fn);
var _Utils_le_fn = function (a, b) { return _Utils_cmp(a, b) < 1; }, _Utils_le = F2(_Utils_le_fn);
var _Utils_gt_fn = function (a, b) { return _Utils_cmp(a, b) > 0; }, _Utils_gt = F2(_Utils_gt_fn);
var _Utils_ge_fn = function (a, b) { return _Utils_cmp(a, b) >= 0; }, _Utils_ge = F2(_Utils_ge_fn);
var _Utils_compare_fn = function (x, y) {
    var n = _Utils_cmp(x, y);
    return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
}, _Utils_compare = F2(_Utils_compare_fn);
var _Utils_Tuple0 = 0;
var _Utils_Tuple0_UNUSED = { $: "#0" };
function _Utils_Tuple2(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2_UNUSED(a, b) { return { $: "#2", a: a, b: b }; }
function _Utils_Tuple3(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3_UNUSED(a, b, c) { return { $: "#3", a: a, b: b, c: c }; }
function _Utils_chr(c) { return c; }
function _Utils_chr_UNUSED(c) { return new String(c); }
function _Utils_update(oldRecord, updatedFields) {
    var newRecord = {};
    for (var key in oldRecord) {
        newRecord[key] = oldRecord[key];
    }
    for (var key in updatedFields) {
        newRecord[key] = updatedFields[key];
    }
    return newRecord;
}
var _Utils_append = F2(_Utils_ap);
function _Utils_ap(xs, ys) {
    if (typeof xs === "string") {
        return xs + ys;
    }
    if (!xs.b) {
        return ys;
    }
    var root = _List_Cons(xs.a, ys);
    xs = xs.b;
    for (var curr = root; xs.b; xs = xs.b) {
        curr = curr.b = _List_Cons(xs.a, ys);
    }
    return root;
}
var _List_Nil = { $: 0, a: null, b: null };
var _List_Nil_UNUSED = { $: "[]" };
function _List_Cons(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons_UNUSED(hd, tl) { return { $: "::", a: hd, b: tl }; }
var _List_cons = F2(_List_Cons);
function _List_fromArray(arr) {
    var out = _List_Nil;
    for (var i = arr.length; i--;) {
        out = _List_Cons(arr[i], out);
    }
    return out;
}
function _List_toArray(xs) {
    for (var out = []; xs.b; xs = xs.b) {
        out.push(xs.a);
    }
    return out;
}
var _List_map2_fn = function (f, xs, ys) {
    for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) {
        arr.push(A2(f, xs.a, ys.a));
    }
    return _List_fromArray(arr);
}, _List_map2_fn_unwrapped = function (f, xs, ys) {
    for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) {
        arr.push(f(xs.a, ys.a));
    }
    return _List_fromArray(arr);
}, _List_map2 = F3(_List_map2_fn);
var _List_map3_fn = function (f, xs, ys, zs) {
    for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) {
        arr.push(A3(f, xs.a, ys.a, zs.a));
    }
    return _List_fromArray(arr);
}, _List_map3_fn_unwrapped = function (f, xs, ys, zs) {
    for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) {
        arr.push(f(xs.a, ys.a, zs.a));
    }
    return _List_fromArray(arr);
}, _List_map3 = F4(_List_map3_fn);
var _List_map4_fn = function (f, ws, xs, ys, zs) {
    for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) {
        arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
    }
    return _List_fromArray(arr);
}, _List_map4_fn_unwrapped = function (f, ws, xs, ys, zs) {
    for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) {
        arr.push(f(ws.a, xs.a, ys.a, zs.a));
    }
    return _List_fromArray(arr);
}, _List_map4 = F5(_List_map4_fn);
var _List_map5_fn = function (f, vs, ws, xs, ys, zs) {
    for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) {
        arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
    }
    return _List_fromArray(arr);
}, _List_map5_fn_unwrapped = function (f, vs, ws, xs, ys, zs) {
    for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) {
        arr.push(f(vs.a, ws.a, xs.a, ys.a, zs.a));
    }
    return _List_fromArray(arr);
}, _List_map5 = F6(_List_map5_fn);
var _List_sortBy_fn = function (f, xs) {
    return _List_fromArray(_List_toArray(xs).sort(function (a, b) {
        return _Utils_cmp(f(a), f(b));
    }));
}, _List_sortBy = F2(_List_sortBy_fn);
var _List_sortWith_fn = function (f, xs) {
    return _List_fromArray(_List_toArray(xs).sort(function (a, b) {
        var ord = A2(f, a, b);
        return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
    }));
}, _List_sortWith_fn_unwrapped = function (f, xs) {
    return _List_fromArray(_List_toArray(xs).sort(function (a, b) {
        var ord = f(a, b);
        return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
    }));
}, _List_sortWith = F2(_List_sortWith_fn);
var _Basics_add_fn = function (a, b) { return a + b; }, _Basics_add = F2(_Basics_add_fn);
var _Basics_sub_fn = function (a, b) { return a - b; }, _Basics_sub = F2(_Basics_sub_fn);
var _Basics_mul_fn = function (a, b) { return a * b; }, _Basics_mul = F2(_Basics_mul_fn);
var _Basics_fdiv_fn = function (a, b) { return a / b; }, _Basics_fdiv = F2(_Basics_fdiv_fn);
var _Basics_idiv_fn = function (a, b) { return (a / b) | 0; }, _Basics_idiv = F2(_Basics_idiv_fn);
var _Basics_pow_fn = Math.pow, _Basics_pow = F2(_Basics_pow_fn);
var _Basics_remainderBy_fn = function (b, a) { return a % b; }, _Basics_remainderBy = F2(_Basics_remainderBy_fn);
var _Basics_modBy_fn = function (modulus, x) {
    var answer = x % modulus;
    return modulus === 0
        ? _Debug_crash(11)
        :
        ((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
            ? answer + modulus
            : answer;
}, _Basics_modBy = F2(_Basics_modBy_fn);
var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2_fn = Math.atan2, _Basics_atan2 = F2(_Basics_atan2_fn);
function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }
var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;
function _Basics_not(bool) { return !bool; }
var _Basics_and_fn = function (a, b) { return a && b; }, _Basics_and = F2(_Basics_and_fn);
var _Basics_or_fn = function (a, b) { return a || b; }, _Basics_or = F2(_Basics_or_fn);
var _Basics_xor_fn = function (a, b) { return a !== b; }, _Basics_xor = F2(_Basics_xor_fn);
var _String_cons_fn = function (chr, str) {
    return chr + str;
}, _String_cons = F2(_String_cons_fn);
function _String_uncons(string) {
    var word = string.charCodeAt(0);
    return !isNaN(word)
        ? $elm$core$Maybe$Just(55296 <= word && word <= 56319
            ? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
            : _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1)))
        : $elm$core$Maybe$Nothing;
}
var _String_append_fn = function (a, b) {
    return a + b;
}, _String_append = F2(_String_append_fn);
function _String_length(str) {
    return str.length;
}
var _String_map_fn = function (func, string) {
    var len = string.length;
    var array = new Array(len);
    var i = 0;
    while (i < len) {
        var word = string.charCodeAt(i);
        if (55296 <= word && word <= 56319) {
            array[i] = func(_Utils_chr(string[i] + string[i + 1]));
            i += 2;
            continue;
        }
        array[i] = func(_Utils_chr(string[i]));
        i++;
    }
    return array.join("");
}, _String_map = F2(_String_map_fn);
var _String_filter_fn = function (isGood, str) {
    var arr = [];
    var len = str.length;
    var i = 0;
    while (i < len) {
        var char = str[i];
        var word = str.charCodeAt(i);
        i++;
        if (55296 <= word && word <= 56319) {
            char += str[i];
            i++;
        }
        if (isGood(_Utils_chr(char))) {
            arr.push(char);
        }
    }
    return arr.join("");
}, _String_filter = F2(_String_filter_fn);
function _String_reverse(str) {
    var len = str.length;
    var arr = new Array(len);
    var i = 0;
    while (i < len) {
        var word = str.charCodeAt(i);
        if (55296 <= word && word <= 56319) {
            arr[len - i] = str[i + 1];
            i++;
            arr[len - i] = str[i - 1];
            i++;
        }
        else {
            arr[len - i] = str[i];
            i++;
        }
    }
    return arr.join("");
}
var _String_foldl_fn = function (func, state, string) {
    var len = string.length;
    var i = 0;
    while (i < len) {
        var char = string[i];
        var word = string.charCodeAt(i);
        i++;
        if (55296 <= word && word <= 56319) {
            char += string[i];
            i++;
        }
        state = A2(func, _Utils_chr(char), state);
    }
    return state;
}, _String_foldl_fn_unwrapped = function (func, state, string) {
    var len = string.length;
    var i = 0;
    while (i < len) {
        var char = string[i];
        var word = string.charCodeAt(i);
        i++;
        if (55296 <= word && word <= 56319) {
            char += string[i];
            i++;
        }
        state = func(_Utils_chr(char), state);
    }
    return state;
}, _String_foldl = F3(_String_foldl_fn);
var _String_foldr_fn = function (func, state, string) {
    var i = string.length;
    while (i--) {
        var char = string[i];
        var word = string.charCodeAt(i);
        if (56320 <= word && word <= 57343) {
            i--;
            char = string[i] + char;
        }
        state = A2(func, _Utils_chr(char), state);
    }
    return state;
}, _String_foldr_fn_unwrapped = function (func, state, string) {
    var i = string.length;
    while (i--) {
        var char = string[i];
        var word = string.charCodeAt(i);
        if (56320 <= word && word <= 57343) {
            i--;
            char = string[i] + char;
        }
        state = func(_Utils_chr(char), state);
    }
    return state;
}, _String_foldr = F3(_String_foldr_fn);
var _String_split_fn = function (sep, str) {
    return str.split(sep);
}, _String_split = F2(_String_split_fn);
var _String_join_fn = function (sep, strs) {
    return strs.join(sep);
}, _String_join = F2(_String_join_fn);
var _String_slice_fn = function (start, end, str) {
    return str.slice(start, end);
}, _String_slice = F3(_String_slice_fn);
function _String_trim(str) {
    return str.trim();
}
function _String_trimLeft(str) {
    return str.replace(/^\s+/, "");
}
function _String_trimRight(str) {
    return str.replace(/\s+$/, "");
}
function _String_words(str) {
    return _List_fromArray(str.trim().split(/\s+/g));
}
function _String_lines(str) {
    return _List_fromArray(str.split(/\r\n|\r|\n/g));
}
function _String_toUpper(str) {
    return str.toUpperCase();
}
function _String_toLower(str) {
    return str.toLowerCase();
}
var _String_any_fn = function (isGood, string) {
    var i = string.length;
    while (i--) {
        var char = string[i];
        var word = string.charCodeAt(i);
        if (56320 <= word && word <= 57343) {
            i--;
            char = string[i] + char;
        }
        if (isGood(_Utils_chr(char))) {
            return true;
        }
    }
    return false;
}, _String_any = F2(_String_any_fn);
var _String_all_fn = function (isGood, string) {
    var i = string.length;
    while (i--) {
        var char = string[i];
        var word = string.charCodeAt(i);
        if (56320 <= word && word <= 57343) {
            i--;
            char = string[i] + char;
        }
        if (!isGood(_Utils_chr(char))) {
            return false;
        }
    }
    return true;
}, _String_all = F2(_String_all_fn);
var _String_contains_fn = function (sub, str) {
    return str.indexOf(sub) > -1;
}, _String_contains = F2(_String_contains_fn);
var _String_startsWith_fn = function (sub, str) {
    return str.indexOf(sub) === 0;
}, _String_startsWith = F2(_String_startsWith_fn);
var _String_endsWith_fn = function (sub, str) {
    return str.length >= sub.length &&
        str.lastIndexOf(sub) === str.length - sub.length;
}, _String_endsWith = F2(_String_endsWith_fn);
var _String_indexes_fn = function (sub, str) {
    var subLen = sub.length;
    if (subLen < 1) {
        return _List_Nil;
    }
    var i = 0;
    var is = [];
    while ((i = str.indexOf(sub, i)) > -1) {
        is.push(i);
        i = i + subLen;
    }
    return _List_fromArray(is);
}, _String_indexes = F2(_String_indexes_fn);
function _String_fromNumber(number) {
    return number + "";
}
function _String_toInt(str) {
    var total = 0;
    var code0 = str.charCodeAt(0);
    var start = code0 == 43 || code0 == 45 ? 1 : 0;
    for (var i = start; i < str.length; ++i) {
        var code = str.charCodeAt(i);
        if (code < 48 || 57 < code) {
            return $elm$core$Maybe$Nothing;
        }
        total = 10 * total + code - 48;
    }
    return i == start
        ? $elm$core$Maybe$Nothing
        : $elm$core$Maybe$Just(code0 == 45 ? -total : total);
}
function _String_toFloat(s) {
    if (s.length === 0 || /[\sxbo]/.test(s)) {
        return $elm$core$Maybe$Nothing;
    }
    var n = +s;
    return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}
function _String_fromList(chars) {
    return _List_toArray(chars).join("");
}
function _Char_toCode(char) {
    var code = char.charCodeAt(0);
    if (55296 <= code && code <= 56319) {
        return (code - 55296) * 1024 + char.charCodeAt(1) - 56320 + 65536;
    }
    return code;
}
function _Char_fromCode(code) {
    return _Utils_chr((code < 0 || 1114111 < code)
        ? "\uFFFD"
        :
        (code <= 65535)
            ? String.fromCharCode(code)
            :
            (code -= 65536,
                String.fromCharCode(Math.floor(code / 1024) + 55296, code % 1024 + 56320)));
}
function _Char_toUpper(char) {
    return _Utils_chr(char.toUpperCase());
}
function _Char_toLower(char) {
    return _Utils_chr(char.toLowerCase());
}
function _Char_toLocaleUpper(char) {
    return _Utils_chr(char.toLocaleUpperCase());
}
function _Char_toLocaleLower(char) {
    return _Utils_chr(char.toLocaleLowerCase());
}
function _Json_succeed(msg) {
    return {
        $: 0,
        a: msg
    };
}
function _Json_fail(msg) {
    return {
        $: 1,
        a: msg
    };
}
function _Json_decodePrim(decoder) {
    return { $: 2, b: decoder };
}
var _Json_decodeInt = _Json_decodePrim(function (value) {
    return (typeof value !== "number")
        ? _Json_expecting("an INT", value)
        :
        (-2147483647 < value && value < 2147483647 && (value | 0) === value)
            ? $elm$core$Result$Ok(value)
            :
            (isFinite(value) && !(value % 1))
                ? $elm$core$Result$Ok(value)
                : _Json_expecting("an INT", value);
});
var _Json_decodeBool = _Json_decodePrim(function (value) {
    return (typeof value === "boolean")
        ? $elm$core$Result$Ok(value)
        : _Json_expecting("a BOOL", value);
});
var _Json_decodeFloat = _Json_decodePrim(function (value) {
    return (typeof value === "number")
        ? $elm$core$Result$Ok(value)
        : _Json_expecting("a FLOAT", value);
});
var _Json_decodeValue = _Json_decodePrim(function (value) {
    return $elm$core$Result$Ok(_Json_wrap(value));
});
var _Json_decodeString = _Json_decodePrim(function (value) {
    return (typeof value === "string")
        ? $elm$core$Result$Ok(value)
        : (value instanceof String)
            ? $elm$core$Result$Ok(value + "")
            : _Json_expecting("a STRING", value);
});
function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }
function _Json_decodeNull(value) { return { $: 5, c: value }; }
var _Json_decodeField_fn = function (field, decoder) {
    return {
        $: 6,
        d: field,
        b: decoder
    };
}, _Json_decodeField = F2(_Json_decodeField_fn);
var _Json_decodeIndex_fn = function (index, decoder) {
    return {
        $: 7,
        e: index,
        b: decoder
    };
}, _Json_decodeIndex = F2(_Json_decodeIndex_fn);
function _Json_decodeKeyValuePairs(decoder) {
    return {
        $: 8,
        b: decoder
    };
}
function _Json_mapMany(f, decoders) {
    return {
        $: 9,
        f: f,
        g: decoders
    };
}
var _Json_andThen_fn = function (callback, decoder) {
    return {
        $: 10,
        b: decoder,
        h: callback
    };
}, _Json_andThen = F2(_Json_andThen_fn);
function _Json_oneOf(decoders) {
    return {
        $: 11,
        g: decoders
    };
}
var _Json_map1_fn = function (f, d1) {
    return _Json_mapMany(f, [d1]);
}, _Json_map1 = F2(_Json_map1_fn);
var _Json_map2_fn = function (f, d1, d2) {
    return _Json_mapMany(f, [d1, d2]);
}, _Json_map2 = F3(_Json_map2_fn);
var _Json_map3_fn = function (f, d1, d2, d3) {
    return _Json_mapMany(f, [d1, d2, d3]);
}, _Json_map3 = F4(_Json_map3_fn);
var _Json_map4_fn = function (f, d1, d2, d3, d4) {
    return _Json_mapMany(f, [d1, d2, d3, d4]);
}, _Json_map4 = F5(_Json_map4_fn);
var _Json_map5_fn = function (f, d1, d2, d3, d4, d5) {
    return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
}, _Json_map5 = F6(_Json_map5_fn);
var _Json_map6_fn = function (f, d1, d2, d3, d4, d5, d6) {
    return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
}, _Json_map6 = F7(_Json_map6_fn);
var _Json_map7_fn = function (f, d1, d2, d3, d4, d5, d6, d7) {
    return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
}, _Json_map7 = F8(_Json_map7_fn);
var _Json_map8_fn = function (f, d1, d2, d3, d4, d5, d6, d7, d8) {
    return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
}, _Json_map8 = F9(_Json_map8_fn);
var _Json_runOnString_fn = function (decoder, string) {
    try {
        var value = JSON.parse(string);
        return _Json_runHelp(decoder, value);
    }
    catch (e) {
        return $elm$core$Result$Err($elm$json$Json$Decode$Failure_fn("This is not valid JSON! " + e.message, _Json_wrap(string)));
    }
}, _Json_runOnString = F2(_Json_runOnString_fn);
var _Json_run_fn = function (decoder, value) {
    return _Json_runHelp(decoder, _Json_unwrap(value));
}, _Json_run = F2(_Json_run_fn);
function _Json_runHelp(decoder, value) {
    switch (decoder.$) {
        case 2:
            return decoder.b(value);
        case 5:
            return (value === null)
                ? $elm$core$Result$Ok(decoder.c)
                : _Json_expecting("null", value);
        case 3:
            if (!_Json_isArray(value)) {
                return _Json_expecting("a LIST", value);
            }
            return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);
        case 4:
            if (!_Json_isArray(value)) {
                return _Json_expecting("an ARRAY", value);
            }
            return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);
        case 6:
            var field = decoder.d;
            if (typeof value !== "object" || value === null || !(field in value)) {
                return _Json_expecting("an OBJECT with a field named `" + field + "`", value);
            }
            var result = _Json_runHelp(decoder.b, value[field]);
            return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err($elm$json$Json$Decode$Field_fn(field, result.a));
        case 7:
            var index = decoder.e;
            if (!_Json_isArray(value)) {
                return _Json_expecting("an ARRAY", value);
            }
            if (index >= value.length) {
                return _Json_expecting("a LONGER array. Need index " + index + " but only see " + value.length + " entries", value);
            }
            var result = _Json_runHelp(decoder.b, value[index]);
            return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err($elm$json$Json$Decode$Index_fn(index, result.a));
        case 8:
            if (typeof value !== "object" || value === null || _Json_isArray(value)) {
                return _Json_expecting("an OBJECT", value);
            }
            var keyValuePairs = _List_Nil;
            for (var key in value) {
                if (value.hasOwnProperty(key)) {
                    var result = _Json_runHelp(decoder.b, value[key]);
                    if (!$elm$core$Result$isOk(result)) {
                        return $elm$core$Result$Err($elm$json$Json$Decode$Field_fn(key, result.a));
                    }
                    keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
                }
            }
            return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));
        case 9:
            var answer = decoder.f;
            var decoders = decoder.g;
            for (var i = 0; i < decoders.length; i++) {
                var result = _Json_runHelp(decoders[i], value);
                if (!$elm$core$Result$isOk(result)) {
                    return result;
                }
                answer = answer(result.a);
            }
            return $elm$core$Result$Ok(answer);
        case 10:
            var result = _Json_runHelp(decoder.b, value);
            return (!$elm$core$Result$isOk(result))
                ? result
                : _Json_runHelp(decoder.h(result.a), value);
        case 11:
            var errors = _List_Nil;
            for (var temp = decoder.g; temp.b; temp = temp.b) {
                var result = _Json_runHelp(temp.a, value);
                if ($elm$core$Result$isOk(result)) {
                    return result;
                }
                errors = _List_Cons(result.a, errors);
            }
            return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));
        case 1:
            return $elm$core$Result$Err($elm$json$Json$Decode$Failure_fn(decoder.a, _Json_wrap(value)));
        case 0:
            return $elm$core$Result$Ok(decoder.a);
    }
}
function _Json_runArrayDecoder(decoder, value, toElmValue) {
    var len = value.length;
    var array = new Array(len);
    for (var i = 0; i < len; i++) {
        var result = _Json_runHelp(decoder, value[i]);
        if (!$elm$core$Result$isOk(result)) {
            return $elm$core$Result$Err($elm$json$Json$Decode$Index_fn(i, result.a));
        }
        array[i] = result.a;
    }
    return $elm$core$Result$Ok(toElmValue(array));
}
function _Json_isArray(value) {
    return Array.isArray(value) || (typeof FileList !== "undefined" && value instanceof FileList);
}
function _Json_toElmArray(array) {
    return $elm$core$Array$initialize_fn(array.length, function (i) { return array[i]; });
}
function _Json_expecting(type, value) {
    return $elm$core$Result$Err($elm$json$Json$Decode$Failure_fn("Expecting " + type, _Json_wrap(value)));
}
function _Json_equality(x, y) {
    if (x === y) {
        return true;
    }
    if (x.$ !== y.$) {
        return false;
    }
    switch (x.$) {
        case 0:
        case 1:
            return x.a === y.a;
        case 2:
            return x.b === y.b;
        case 5:
            return x.c === y.c;
        case 3:
        case 4:
        case 8:
            return _Json_equality(x.b, y.b);
        case 6:
            return x.d === y.d && _Json_equality(x.b, y.b);
        case 7:
            return x.e === y.e && _Json_equality(x.b, y.b);
        case 9:
            return x.f === y.f && _Json_listEquality(x.g, y.g);
        case 10:
            return x.h === y.h && _Json_equality(x.b, y.b);
        case 11:
            return _Json_listEquality(x.g, y.g);
    }
}
function _Json_listEquality(aDecoders, bDecoders) {
    var len = aDecoders.length;
    if (len !== bDecoders.length) {
        return false;
    }
    for (var i = 0; i < len; i++) {
        if (!_Json_equality(aDecoders[i], bDecoders[i])) {
            return false;
        }
    }
    return true;
}
var _Json_encode_fn = function (indentLevel, value) {
    return JSON.stringify(_Json_unwrap(value), null, indentLevel) + "";
}, _Json_encode = F2(_Json_encode_fn);
function _Json_wrap_UNUSED(value) { return { $: 0, a: value }; }
function _Json_unwrap_UNUSED(value) { return value.a; }
function _Json_wrap(value) { return value; }
function _Json_unwrap(value) { return value; }
function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }
var _Json_addField_fn = function (key, value, object) {
    object[key] = _Json_unwrap(value);
    return object;
}, _Json_addField = F3(_Json_addField_fn);
function _Json_addEntry(func) {
    return F2(function (entry, array) {
        array.push(_Json_unwrap(func(entry)));
        return array;
    });
}
var _Json_encodeNull = _Json_wrap(null);
function _Scheduler_succeed(value) {
    return {
        $: 0,
        a: value
    };
}
function _Scheduler_fail(error) {
    return {
        $: 1,
        a: error
    };
}
function _Scheduler_binding(callback) {
    return {
        $: 2,
        b: callback,
        c: null
    };
}
var _Scheduler_andThen_fn = function (callback, task) {
    return {
        $: 3,
        b: callback,
        d: task
    };
}, _Scheduler_andThen = F2(_Scheduler_andThen_fn);
var _Scheduler_onError_fn = function (callback, task) {
    return {
        $: 4,
        b: callback,
        d: task
    };
}, _Scheduler_onError = F2(_Scheduler_onError_fn);
function _Scheduler_receive(callback) {
    return {
        $: 5,
        b: callback
    };
}
var _Scheduler_guid = 0;
function _Scheduler_rawSpawn(task) {
    var proc = {
        $: 0,
        e: _Scheduler_guid++,
        f: task,
        g: null,
        h: []
    };
    _Scheduler_enqueue(proc);
    return proc;
}
function _Scheduler_spawn(task) {
    return _Scheduler_binding(function (callback) {
        callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
    });
}
function _Scheduler_rawSend(proc, msg) {
    proc.h.push(msg);
    _Scheduler_enqueue(proc);
}
var _Scheduler_send_fn = function (proc, msg) {
    return _Scheduler_binding(function (callback) {
        _Scheduler_rawSend(proc, msg);
        callback(_Scheduler_succeed(_Utils_Tuple0));
    });
}, _Scheduler_send = F2(_Scheduler_send_fn);
function _Scheduler_kill(proc) {
    return _Scheduler_binding(function (callback) {
        var task = proc.f;
        if (task.$ === 2 && task.c) {
            task.c();
        }
        proc.f = null;
        callback(_Scheduler_succeed(_Utils_Tuple0));
    });
}
var _Scheduler_working = false;
var _Scheduler_queue = [];
function _Scheduler_enqueue(proc) {
    _Scheduler_queue.push(proc);
    if (_Scheduler_working) {
        return;
    }
    _Scheduler_working = true;
    while (proc = _Scheduler_queue.shift()) {
        _Scheduler_step(proc);
    }
    _Scheduler_working = false;
}
function _Scheduler_step(proc) {
    while (proc.f) {
        var rootTag = proc.f.$;
        if (rootTag === 0 || rootTag === 1) {
            while (proc.g && proc.g.$ !== rootTag) {
                proc.g = proc.g.i;
            }
            if (!proc.g) {
                return;
            }
            proc.f = proc.g.b(proc.f.a);
            proc.g = proc.g.i;
        }
        else if (rootTag === 2) {
            proc.f.c = proc.f.b(function (newRoot) {
                proc.f = newRoot;
                _Scheduler_enqueue(proc);
            });
            return;
        }
        else if (rootTag === 5) {
            if (proc.h.length === 0) {
                return;
            }
            proc.f = proc.f.b(proc.h.shift());
        }
        else {
            proc.g = {
                $: rootTag === 3 ? 0 : 1,
                b: proc.f.b,
                i: proc.g
            };
            proc.f = proc.f.d;
        }
    }
}
function _Bytes_width(bytes) {
    return bytes.byteLength;
}
var _Bytes_getHostEndianness_fn = function (le, be) {
    return _Scheduler_binding(function (callback) {
        callback(_Scheduler_succeed(new Uint8Array(new Uint32Array([1]))[0] === 1 ? le : be));
    });
}, _Bytes_getHostEndianness = F2(_Bytes_getHostEndianness_fn);
function _Bytes_encode(encoder) {
    var mutableBytes = new DataView(new ArrayBuffer($elm$bytes$Bytes$Encode$getWidth(encoder)));
    $elm$bytes$Bytes$Encode$write(encoder)(mutableBytes)(0);
    return mutableBytes;
}
var _Bytes_write_i8_fn = function (mb, i, n) { mb.setInt8(i, n); return i + 1; }, _Bytes_write_i8 = F3(_Bytes_write_i8_fn);
var _Bytes_write_i16_fn = function (mb, i, n, isLE) { mb.setInt16(i, n, isLE); return i + 2; }, _Bytes_write_i16 = F4(_Bytes_write_i16_fn);
var _Bytes_write_i32_fn = function (mb, i, n, isLE) { mb.setInt32(i, n, isLE); return i + 4; }, _Bytes_write_i32 = F4(_Bytes_write_i32_fn);
var _Bytes_write_u8_fn = function (mb, i, n) { mb.setUint8(i, n); return i + 1; }, _Bytes_write_u8 = F3(_Bytes_write_u8_fn);
var _Bytes_write_u16_fn = function (mb, i, n, isLE) { mb.setUint16(i, n, isLE); return i + 2; }, _Bytes_write_u16 = F4(_Bytes_write_u16_fn);
var _Bytes_write_u32_fn = function (mb, i, n, isLE) { mb.setUint32(i, n, isLE); return i + 4; }, _Bytes_write_u32 = F4(_Bytes_write_u32_fn);
var _Bytes_write_f32_fn = function (mb, i, n, isLE) { mb.setFloat32(i, n, isLE); return i + 4; }, _Bytes_write_f32 = F4(_Bytes_write_f32_fn);
var _Bytes_write_f64_fn = function (mb, i, n, isLE) { mb.setFloat64(i, n, isLE); return i + 8; }, _Bytes_write_f64 = F4(_Bytes_write_f64_fn);
var _Bytes_write_bytes_fn = function (mb, offset, bytes) {
    for (var i = 0, len = bytes.byteLength, limit = len - 4; i <= limit; i += 4) {
        mb.setUint32(offset + i, bytes.getUint32(i));
    }
    for (; i < len; i++) {
        mb.setUint8(offset + i, bytes.getUint8(i));
    }
    return offset + len;
}, _Bytes_write_bytes = F3(_Bytes_write_bytes_fn);
function _Bytes_getStringWidth(string) {
    for (var width = 0, i = 0; i < string.length; i++) {
        var code = string.charCodeAt(i);
        width +=
            (code < 128) ? 1 :
                (code < 2048) ? 2 :
                    (code < 55296 || 56319 < code) ? 3 : (i++, 4);
    }
    return width;
}
var _Bytes_write_string_fn = function (mb, offset, string) {
    for (var i = 0; i < string.length; i++) {
        var code = string.charCodeAt(i);
        offset +=
            (code < 128)
                ? (mb.setUint8(offset, code)
                    , 1)
                :
                (code < 2048)
                    ? (mb.setUint16(offset, 49280
                        | (code >>> 6 & 31) << 8
                        | code & 63)
                        , 2)
                    :
                    (code < 55296 || 56319 < code)
                        ? (mb.setUint16(offset, 57472
                            | (code >>> 12 & 15) << 8
                            | code >>> 6 & 63)
                            , mb.setUint8(offset + 2, 128
                                | code & 63)
                            , 3)
                        :
                        (code = (code - 55296) * 1024 + string.charCodeAt(++i) - 56320 + 65536
                            , mb.setUint32(offset, 4034953344
                                | (code >>> 18 & 7) << 24
                                | (code >>> 12 & 63) << 16
                                | (code >>> 6 & 63) << 8
                                | code & 63)
                            , 4);
    }
    return offset;
}, _Bytes_write_string = F3(_Bytes_write_string_fn);
var _Bytes_decode_fn = function (decoder, bytes) {
    try {
        return $elm$core$Maybe$Just(A2(decoder, bytes, 0).b);
    }
    catch (e) {
        return $elm$core$Maybe$Nothing;
    }
}, _Bytes_decode_fn_unwrapped = function (decoder, bytes) {
    try {
        return $elm$core$Maybe$Just(decoder(bytes, 0).b);
    }
    catch (e) {
        return $elm$core$Maybe$Nothing;
    }
}, _Bytes_decode = F2(_Bytes_decode_fn);
var _Bytes_read_i8_fn = function (bytes, offset) { return _Utils_Tuple2(offset + 1, bytes.getInt8(offset)); }, _Bytes_read_i8 = F2(_Bytes_read_i8_fn);
var _Bytes_read_i16_fn = function (isLE, bytes, offset) { return _Utils_Tuple2(offset + 2, bytes.getInt16(offset, isLE)); }, _Bytes_read_i16 = F3(_Bytes_read_i16_fn);
var _Bytes_read_i32_fn = function (isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getInt32(offset, isLE)); }, _Bytes_read_i32 = F3(_Bytes_read_i32_fn);
var _Bytes_read_u8_fn = function (bytes, offset) { return _Utils_Tuple2(offset + 1, bytes.getUint8(offset)); }, _Bytes_read_u8 = F2(_Bytes_read_u8_fn);
var _Bytes_read_u16_fn = function (isLE, bytes, offset) { return _Utils_Tuple2(offset + 2, bytes.getUint16(offset, isLE)); }, _Bytes_read_u16 = F3(_Bytes_read_u16_fn);
var _Bytes_read_u32_fn = function (isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getUint32(offset, isLE)); }, _Bytes_read_u32 = F3(_Bytes_read_u32_fn);
var _Bytes_read_f32_fn = function (isLE, bytes, offset) { return _Utils_Tuple2(offset + 4, bytes.getFloat32(offset, isLE)); }, _Bytes_read_f32 = F3(_Bytes_read_f32_fn);
var _Bytes_read_f64_fn = function (isLE, bytes, offset) { return _Utils_Tuple2(offset + 8, bytes.getFloat64(offset, isLE)); }, _Bytes_read_f64 = F3(_Bytes_read_f64_fn);
var _Bytes_read_bytes_fn = function (len, bytes, offset) {
    return _Utils_Tuple2(offset + len, new DataView(bytes.buffer, bytes.byteOffset + offset, len));
}, _Bytes_read_bytes = F3(_Bytes_read_bytes_fn);
var _Bytes_read_string_fn = function (len, bytes, offset) {
    var string = "";
    var end = offset + len;
    for (; offset < end;) {
        var byte = bytes.getUint8(offset++);
        string +=
            (byte < 128)
                ? String.fromCharCode(byte)
                :
                ((byte & 224) === 192)
                    ? String.fromCharCode((byte & 31) << 6 | bytes.getUint8(offset++) & 63)
                    :
                    ((byte & 240) === 224)
                        ? String.fromCharCode((byte & 15) << 12
                            | (bytes.getUint8(offset++) & 63) << 6
                            | bytes.getUint8(offset++) & 63)
                        :
                        (byte =
                            ((byte & 7) << 18
                                | (bytes.getUint8(offset++) & 63) << 12
                                | (bytes.getUint8(offset++) & 63) << 6
                                | bytes.getUint8(offset++) & 63) - 65536
                            , String.fromCharCode(Math.floor(byte / 1024) + 55296, byte % 1024 + 56320));
    }
    return _Utils_Tuple2(offset, string);
}, _Bytes_read_string = F3(_Bytes_read_string_fn);
var _Bytes_decodeFailure_fn = function () { throw 0; }, _Bytes_decodeFailure = F2(_Bytes_decodeFailure_fn);
var _Bitwise_and_fn = function (a, b) {
    return a & b;
}, _Bitwise_and = F2(_Bitwise_and_fn);
var _Bitwise_or_fn = function (a, b) {
    return a | b;
}, _Bitwise_or = F2(_Bitwise_or_fn);
var _Bitwise_xor_fn = function (a, b) {
    return a ^ b;
}, _Bitwise_xor = F2(_Bitwise_xor_fn);
function _Bitwise_complement(a) {
    return ~a;
}
;
var _Bitwise_shiftLeftBy_fn = function (offset, a) {
    return a << offset;
}, _Bitwise_shiftLeftBy = F2(_Bitwise_shiftLeftBy_fn);
var _Bitwise_shiftRightBy_fn = function (offset, a) {
    return a >> offset;
}, _Bitwise_shiftRightBy = F2(_Bitwise_shiftRightBy_fn);
var _Bitwise_shiftRightZfBy_fn = function (offset, a) {
    return a >>> offset;
}, _Bitwise_shiftRightZfBy = F2(_Bitwise_shiftRightZfBy_fn);
function _Process_sleep(time) {
    return _Scheduler_binding(function (callback) {
        var id = setTimeout(function () {
            callback(_Scheduler_succeed(_Utils_Tuple0));
        }, time);
        return function () { clearTimeout(id); };
    });
}
var _Platform_worker_fn = function (impl, flagDecoder, debugMetadata, args) {
    return _Platform_initialize(flagDecoder, args, impl.fq, impl.gi, impl.f6, function () { return function () { }; });
}, _Platform_worker = F4(_Platform_worker_fn);
function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder) {
    var result = _Json_run_fn(flagDecoder, _Json_wrap(args ? args["flags"] : undefined));
    $elm$core$Result$isOk(result) || _Debug_crash(2);
    var managers = {};
    var initPair = init(result.a);
    var model = initPair.a;
    var stepper = stepperBuilder(sendToApp, model);
    var ports = _Platform_setupEffects(managers, sendToApp);
    function sendToApp(msg, viewMetadata) {
        var pair = A2(update, msg, model);
        stepper(model = pair.a, viewMetadata);
        _Platform_enqueueEffects(managers, pair.b, subscriptions(model));
    }
    _Platform_enqueueEffects(managers, initPair.b, subscriptions(model));
    return ports ? { ports: ports } : {};
}
var _Platform_preload;
function _Platform_registerPreload(url) {
    _Platform_preload.add(url);
}
var _Platform_effectManagers = {};
function _Platform_setupEffects(managers, sendToApp) {
    var ports;
    for (var key in _Platform_effectManagers) {
        var manager = _Platform_effectManagers[key];
        if (manager.a) {
            ports = ports || {};
            ports[key] = manager.a(key, sendToApp);
        }
        managers[key] = _Platform_instantiateManager(manager, sendToApp);
    }
    return ports;
}
function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap) {
    return {
        b: init,
        c: onEffects,
        d: onSelfMsg,
        e: cmdMap,
        f: subMap
    };
}
function _Platform_instantiateManager(info, sendToApp) {
    var router = {
        g: sendToApp,
        h: undefined
    };
    var onEffects = info.c;
    var onSelfMsg = info.d;
    var cmdMap = info.e;
    var subMap = info.f;
    function loop(state) {
        return _Scheduler_andThen_fn(loop, _Scheduler_receive(function (msg) {
            var value = msg.a;
            if (msg.$ === 0) {
                return A3(onSelfMsg, router, value, state);
            }
            return cmdMap && subMap
                ? A4(onEffects, router, value.i, value.j, state)
                : A3(onEffects, router, cmdMap ? value.i : value.j, state);
        }));
    }
    return router.h = _Scheduler_rawSpawn(_Scheduler_andThen_fn(loop, info.b));
}
var _Platform_sendToApp_fn = function (router, msg) {
    return _Scheduler_binding(function (callback) {
        router.g(msg);
        callback(_Scheduler_succeed(_Utils_Tuple0));
    });
}, _Platform_sendToApp = F2(_Platform_sendToApp_fn);
var _Platform_sendToSelf_fn = function (router, msg) {
    return _Scheduler_send_fn(router.h, {
        $: 0,
        a: msg
    });
}, _Platform_sendToSelf = F2(_Platform_sendToSelf_fn);
function _Platform_leaf(home) {
    return function (value) {
        return {
            $: 1,
            k: home,
            l: value
        };
    };
}
function _Platform_batch(list) {
    return {
        $: 2,
        m: list
    };
}
var _Platform_map_fn = function (tagger, bag) {
    return {
        $: 3,
        n: tagger,
        o: bag
    };
}, _Platform_map = F2(_Platform_map_fn);
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;
function _Platform_enqueueEffects(managers, cmdBag, subBag) {
    _Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });
    if (_Platform_effectsActive)
        return;
    _Platform_effectsActive = true;
    for (var fx; fx = _Platform_effectsQueue.shift();) {
        _Platform_dispatchEffects(fx.p, fx.q, fx.r);
    }
    _Platform_effectsActive = false;
}
function _Platform_dispatchEffects(managers, cmdBag, subBag) {
    var effectsDict = {};
    _Platform_gatherEffects(true, cmdBag, effectsDict, null);
    _Platform_gatherEffects(false, subBag, effectsDict, null);
    for (var home in managers) {
        _Scheduler_rawSend(managers[home], {
            $: "fx",
            a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
        });
    }
}
function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers) {
    switch (bag.$) {
        case 1:
            var home = bag.k;
            var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
            effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
            return;
        case 2:
            for (var list = bag.m; list.b; list = list.b) {
                _Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
            }
            return;
        case 3:
            _Platform_gatherEffects(isCmd, bag.o, effectsDict, {
                s: bag.n,
                t: taggers
            });
            return;
    }
}
function _Platform_toEffect(isCmd, home, taggers, value) {
    function applyTaggers(x) {
        for (var temp = taggers; temp; temp = temp.t) {
            x = temp.s(x);
        }
        return x;
    }
    var map = isCmd
        ? _Platform_effectManagers[home].e
        : _Platform_effectManagers[home].f;
    return A2(map, applyTaggers, value);
}
function _Platform_insert(isCmd, newEffect, effects) {
    effects = effects || { i: _List_Nil, j: _List_Nil };
    isCmd
        ? (effects.i = _List_Cons(newEffect, effects.i))
        : (effects.j = _List_Cons(newEffect, effects.j));
    return effects;
}
function _Platform_checkPortName(name) {
    if (_Platform_effectManagers[name]) {
        _Debug_crash(3, name);
    }
}
function _Platform_outgoingPort(name, converter) {
    _Platform_checkPortName(name);
    _Platform_effectManagers[name] = {
        e: _Platform_outgoingPortMap,
        u: converter,
        a: _Platform_setupOutgoingPort
    };
    return _Platform_leaf(name);
}
var _Platform_outgoingPortMap_fn = function (tagger, value) { return value; }, _Platform_outgoingPortMap = F2(_Platform_outgoingPortMap_fn);
function _Platform_setupOutgoingPort(name) {
    var subs = [];
    var converter = _Platform_effectManagers[name].u;
    var init = _Process_sleep(0);
    _Platform_effectManagers[name].b = init;
    _Platform_effectManagers[name].c = F3(function (router, cmdList, state) {
        for (; cmdList.b; cmdList = cmdList.b) {
            var currentSubs = subs;
            var value = _Json_unwrap(converter(cmdList.a));
            for (var i = 0; i < currentSubs.length; i++) {
                currentSubs[i](value);
            }
        }
        return init;
    });
    function subscribe(callback) {
        subs.push(callback);
    }
    function unsubscribe(callback) {
        subs = subs.slice();
        var index = subs.indexOf(callback);
        if (index >= 0) {
            subs.splice(index, 1);
        }
    }
    return {
        subscribe: subscribe,
        unsubscribe: unsubscribe
    };
}
function _Platform_incomingPort(name, converter) {
    _Platform_checkPortName(name);
    _Platform_effectManagers[name] = {
        f: _Platform_incomingPortMap,
        u: converter,
        a: _Platform_setupIncomingPort
    };
    return _Platform_leaf(name);
}
var _Platform_incomingPortMap_fn = function (tagger, finalTagger) {
    return function (value) {
        return tagger(finalTagger(value));
    };
}, _Platform_incomingPortMap = F2(_Platform_incomingPortMap_fn);
function _Platform_setupIncomingPort(name, sendToApp) {
    var subs = _List_Nil;
    var converter = _Platform_effectManagers[name].u;
    var init = _Scheduler_succeed(null);
    _Platform_effectManagers[name].b = init;
    _Platform_effectManagers[name].c = F3(function (router, subList, state) {
        subs = subList;
        return init;
    });
    function send(incomingValue) {
        var result = _Json_run_fn(converter, _Json_wrap(incomingValue));
        $elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);
        var value = result.a;
        for (var temp = subs; temp.b; temp = temp.b) {
            sendToApp(temp.a(value));
        }
    }
    return { send: send };
}
/*
function _Platform_export(exports) {
    scope["Elm"]
        ? _Platform_mergeExportsProd(scope["Elm"], exports)
        : scope["Elm"] = exports;
}

*/    /*
function _Platform_mergeExportsProd(obj, exports) {
        for (var name in exports) {
            (name in obj)
                ? (name == "init")
                    ? _Debug_crash(6)
                    : _Platform_mergeExportsProd(obj[name], exports[name])
                : (obj[name] = exports[name]);
        }
    }
*/
/*
function _Platform_export_UNUSED(exports) {
    scope["Elm"]
        ? _Platform_mergeExportsDebug("Elm", scope["Elm"], exports)
        : scope["Elm"] = exports;
}

*/    /*
function _Platform_mergeExportsDebug(moduleName, obj, exports) {
        for (var name in exports) {
            (name in obj)
                ? (name == "init")
                    ? _Debug_crash(6, moduleName)
                    : _Platform_mergeExportsDebug(moduleName + "." + name, obj[name], exports[name])
                : (obj[name] = exports[name]);
        }
    }
*/
var $elm$core$List$cons = _List_cons;
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr_fn = function (func, baseCase, _v0) {
    var tree = _v0.c;
    var tail = _v0.d;
    var helper = F2(function (node, acc) {
        if (!node.$) {
            var subTree = node.a;
            return _JsArray_foldr_fn(helper, acc, subTree);
        }
        else {
            var values = node.a;
            return _JsArray_foldr_fn(func, acc, values);
        }
    });
    return _JsArray_foldr_fn(helper, _JsArray_foldr_fn(func, baseCase, tail), tree);
}, $elm$core$Array$foldr = F3($elm$core$Array$foldr_fn);
var $elm$core$Array$toList = function (array) {
    return $elm$core$Array$foldr_fn($elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Dict$foldr_fn = function (func, acc, t) {
    foldr: while (true) {
        if (t.$ === -2) {
            return acc;
        }
        else {
            var key = t.b;
            var value = t.c;
            var left = t.d;
            var right = t.e;
            var $temp$func = func, $temp$acc = A3(func, key, value, $elm$core$Dict$foldr_fn(func, acc, right)), $temp$t = left;
            func = $temp$func;
            acc = $temp$acc;
            t = $temp$t;
            continue foldr;
        }
    }
}, $elm$core$Dict$foldr_fn_unwrapped = function (func, acc, t) {
    foldr: while (true) {
        if (t.$ === -2) {
            return acc;
        }
        else {
            var key = t.b;
            var value = t.c;
            var left = t.d;
            var right = t.e;
            var $temp$func = func, $temp$acc = func(key, value, $elm$core$Dict$foldr_fn_unwrapped(func, acc, right)), $temp$t = left;
            func = $temp$func;
            acc = $temp$acc;
            t = $temp$t;
            continue foldr;
        }
    }
}, $elm$core$Dict$foldr = F3($elm$core$Dict$foldr_fn);
var $elm$core$Dict$toList = function (dict) {
    return $elm$core$Dict$foldr_fn_unwrapped(function (key, value, list) {
        return _List_Cons(_Utils_Tuple2(key, value), list);
    }, _List_Nil, dict);
};
var $elm$core$Dict$keys = function (dict) {
    return $elm$core$Dict$foldr_fn_unwrapped(function (key, value, keyList) {
        return _List_Cons(key, keyList);
    }, _List_Nil, dict);
};
var $elm$core$Set$toList = function (_v0) {
    var dict = _v0;
    return $elm$core$Dict$keys(dict);
};
var $elm$core$Basics$EQ = 1;
var $elm$core$Basics$GT = 2;
var $elm$core$Basics$LT = 0;
var $elm$core$Result$Err = function (a) {
    return { $: 1, a: a };
};
var $elm$json$Json$Decode$Failure_fn = function (a, b) {
    return { $: 3, a: a, b: b };
}, $elm$json$Json$Decode$Failure = F2($elm$json$Json$Decode$Failure_fn);
var $elm$json$Json$Decode$Field_fn = function (a, b) {
    return { $: 0, a: a, b: b };
}, $elm$json$Json$Decode$Field = F2($elm$json$Json$Decode$Field_fn);
var $elm$json$Json$Decode$Index_fn = function (a, b) {
    return { $: 1, a: a, b: b };
}, $elm$json$Json$Decode$Index = F2($elm$json$Json$Decode$Index_fn);
var $elm$core$Result$Ok = function (a) {
    return { $: 0, a: a };
};
var $elm$json$Json$Decode$OneOf = function (a) {
    return { $: 2, a: a };
};
var $elm$core$Basics$False = 1;
var $elm$core$Basics$add = _Basics_add;
var $elm$core$Maybe$Just = function (a) { return { $: 0, a: a }; };
var $elm$core$Maybe$Nothing = { $: 1, a: null };
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join_fn = function (sep, chunks) {
    return _String_join_fn(sep, _List_toArray(chunks));
}, $elm$core$String$join = F2($elm$core$String$join_fn);
var $elm$core$String$split_fn = function (sep, string) {
    return _List_fromArray(_String_split_fn(sep, string));
}, $elm$core$String$split = F2($elm$core$String$split_fn);
var $elm$json$Json$Decode$indent = function (str) {
    return $elm$core$String$join_fn("\n    ", $elm$core$String$split_fn("\n", str));
};
var $elm$core$List$foldl_fn = function (func, acc, list) {
    foldl: while (true) {
        if (!list.b) {
            return acc;
        }
        else {
            var x = list.a;
            var xs = list.b;
            var $temp$func = func, $temp$acc = A2(func, x, acc), $temp$list = xs;
            func = $temp$func;
            acc = $temp$acc;
            list = $temp$list;
            continue foldl;
        }
    }
}, $elm$core$List$foldl_fn_unwrapped = function (func, acc, list) {
    foldl: while (true) {
        if (!list.b) {
            return acc;
        }
        else {
            var x = list.a;
            var xs = list.b;
            var $temp$func = func, $temp$acc = func(x, acc), $temp$list = xs;
            func = $temp$func;
            acc = $temp$acc;
            list = $temp$list;
            continue foldl;
        }
    }
}, $elm$core$List$foldl = F3($elm$core$List$foldl_fn);
var $elm$core$List$length = function (xs) {
    return $elm$core$List$foldl_fn_unwrapped(function (_v0, i) {
        return i + 1;
    }, 0, xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp_fn = function (lo, hi, list) {
    rangeHelp: while (true) {
        if (_Utils_cmp(lo, hi) < 1) {
            var $temp$lo = lo, $temp$hi = hi - 1, $temp$list = _List_Cons(hi, list);
            lo = $temp$lo;
            hi = $temp$hi;
            list = $temp$list;
            continue rangeHelp;
        }
        else {
            return list;
        }
    }
}, $elm$core$List$rangeHelp = F3($elm$core$List$rangeHelp_fn);
var $elm$core$List$range_fn = function (lo, hi) {
    return $elm$core$List$rangeHelp_fn(lo, hi, _List_Nil);
}, $elm$core$List$range = F2($elm$core$List$range_fn);
var $elm$core$List$indexedMap_fn = function (f, xs) {
    var tmp = _List_Cons(undefined, _List_Nil);
    var end = tmp;
    for (var i = 0; xs.b; i++, xs = xs.b) {
        var next = _List_Cons(A2(f, i, xs.a), _List_Nil);
        end.b = next;
        end = next;
    }
    return tmp.b;
}, $elm$core$List$indexedMap_fn_unwrapped = function (f, xs) {
    var tmp = _List_Cons(undefined, _List_Nil);
    var end = tmp;
    for (var i = 0; xs.b; i++, xs = xs.b) {
        var next = _List_Cons(f(i, xs.a), _List_Nil);
        end.b = next;
        end = next;
    }
    return tmp.b;
}, $elm$core$List$indexedMap = F2($elm$core$List$indexedMap_fn);
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
    var code = $elm$core$Char$toCode(_char);
    return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
    var code = $elm$core$Char$toCode(_char);
    return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
    return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
    var code = $elm$core$Char$toCode(_char);
    return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
    return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
    return $elm$core$List$foldl_fn($elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf_fn = function (i, error) {
    return "\n\n(" + ($elm$core$String$fromInt(i + 1) + (") " + $elm$json$Json$Decode$indent($elm$json$Json$Decode$errorToString(error))));
}, $elm$json$Json$Decode$errorOneOf = F2($elm$json$Json$Decode$errorOneOf_fn);
var $elm$json$Json$Decode$errorToString = function (error) {
    return $elm$json$Json$Decode$errorToStringHelp_fn(error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp_fn = function (error, context) {
    errorToStringHelp: while (true) {
        switch (error.$) {
            case 0:
                var f = error.a;
                var err = error.b;
                var isSimple = function () {
                    var _v1 = $elm$core$String$uncons(f);
                    if (_v1.$ === 1) {
                        return false;
                    }
                    else {
                        var _v2 = _v1.a;
                        var _char = _v2.a;
                        var rest = _v2.b;
                        return $elm$core$Char$isAlpha(_char) && _String_all_fn($elm$core$Char$isAlphaNum, rest);
                    }
                }();
                var fieldName = isSimple ? ("." + f) : ("['" + (f + "']"));
                var $temp$error = err, $temp$context = _List_Cons(fieldName, context);
                error = $temp$error;
                context = $temp$context;
                continue errorToStringHelp;
            case 1:
                var i = error.a;
                var err = error.b;
                var indexName = "[" + ($elm$core$String$fromInt(i) + "]");
                var $temp$error = err, $temp$context = _List_Cons(indexName, context);
                error = $temp$error;
                context = $temp$context;
                continue errorToStringHelp;
            case 2:
                var errors = error.a;
                if (!errors.b) {
                    return "Ran into a Json.Decode.oneOf with no possibilities" + function () {
                        if (!context.b) {
                            return "!";
                        }
                        else {
                            return " at json" + $elm$core$String$join_fn("", $elm$core$List$reverse(context));
                        }
                    }();
                }
                else {
                    if (!errors.b.b) {
                        var err = errors.a;
                        var $temp$error = err, $temp$context = context;
                        error = $temp$error;
                        context = $temp$context;
                        continue errorToStringHelp;
                    }
                    else {
                        var starter = function () {
                            if (!context.b) {
                                return "Json.Decode.oneOf";
                            }
                            else {
                                return "The Json.Decode.oneOf at json" + $elm$core$String$join_fn("", $elm$core$List$reverse(context));
                            }
                        }();
                        var introduction = starter + (" failed in the following " + ($elm$core$String$fromInt($elm$core$List$length(errors)) + " ways:"));
                        return $elm$core$String$join_fn("\n\n", _List_Cons(introduction, $elm$core$List$indexedMap_fn($elm$json$Json$Decode$errorOneOf, errors)));
                    }
                }
            default:
                var msg = error.a;
                var json = error.b;
                var introduction = function () {
                    if (!context.b) {
                        return "Problem with the given value:\n\n";
                    }
                    else {
                        return "Problem with the value at json" + ($elm$core$String$join_fn("", $elm$core$List$reverse(context)) + ":\n\n    ");
                    }
                }();
                return introduction + ($elm$json$Json$Decode$indent(_Json_encode_fn(4, json)) + ("\n\n" + msg));
        }
    }
}, $elm$json$Json$Decode$errorToStringHelp = F2($elm$json$Json$Decode$errorToStringHelp_fn);
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin_fn = function (a, b, c, d) {
    return { $: 0, a: a, b: b, c: c, d: d };
}, $elm$core$Array$Array_elm_builtin = F4($elm$core$Array$Array_elm_builtin_fn);
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase_fn = function (base, number) {
    return _Basics_log(number) / _Basics_log(base);
}, $elm$core$Basics$logBase = F2($elm$core$Basics$logBase_fn);
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling($elm$core$Basics$logBase_fn(2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = $elm$core$Array$Array_elm_builtin_fn(0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
    return { $: 1, a: a };
};
var $elm$core$Basics$apL_fn = function (f, x) {
    return f(x);
}, $elm$core$Basics$apL = F2($elm$core$Basics$apL_fn);
var $elm$core$Basics$apR_fn = function (x, f) {
    return f(x);
}, $elm$core$Basics$apR = F2($elm$core$Basics$apR_fn);
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max_fn = function (x, y) {
    return (_Utils_cmp(x, y) > 0) ? x : y;
}, $elm$core$Basics$max = F2($elm$core$Basics$max_fn);
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
    return { $: 0, a: a };
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes_fn = function (nodes, acc) {
    compressNodes: while (true) {
        var _v0 = _JsArray_initializeFromList_fn($elm$core$Array$branchFactor, nodes);
        var node = _v0.a;
        var remainingNodes = _v0.b;
        var newAcc = _List_Cons($elm$core$Array$SubTree(node), acc);
        if (!remainingNodes.b) {
            return $elm$core$List$reverse(newAcc);
        }
        else {
            var $temp$nodes = remainingNodes, $temp$acc = newAcc;
            nodes = $temp$nodes;
            acc = $temp$acc;
            continue compressNodes;
        }
    }
}, $elm$core$Array$compressNodes = F2($elm$core$Array$compressNodes_fn);
var $elm$core$Tuple$first = function (_v0) {
    var x = _v0.a;
    return x;
};
var $elm$core$Array$treeFromBuilder_fn = function (nodeList, nodeListSize) {
    treeFromBuilder: while (true) {
        var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
        if (newNodeSize === 1) {
            return _JsArray_initializeFromList_fn($elm$core$Array$branchFactor, nodeList).a;
        }
        else {
            var $temp$nodeList = $elm$core$Array$compressNodes_fn(nodeList, _List_Nil), $temp$nodeListSize = newNodeSize;
            nodeList = $temp$nodeList;
            nodeListSize = $temp$nodeListSize;
            continue treeFromBuilder;
        }
    }
}, $elm$core$Array$treeFromBuilder = F2($elm$core$Array$treeFromBuilder_fn);
var $elm$core$Array$builderToArray_fn = function (reverseNodeList, builder) {
    if (!builder.ay) {
        return $elm$core$Array$Array_elm_builtin_fn($elm$core$Elm$JsArray$length(builder.cY), $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, builder.cY);
    }
    else {
        var treeLen = builder.ay * $elm$core$Array$branchFactor;
        var depth = $elm$core$Basics$floor($elm$core$Basics$logBase_fn($elm$core$Array$branchFactor, treeLen - 1));
        var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.aH) : builder.aH;
        var tree = $elm$core$Array$treeFromBuilder_fn(correctNodeList, builder.ay);
        return $elm$core$Array$Array_elm_builtin_fn($elm$core$Elm$JsArray$length(builder.cY) + treeLen, $elm$core$Basics$max_fn(5, depth * $elm$core$Array$shiftStep), tree, builder.cY);
    }
}, $elm$core$Array$builderToArray = F2($elm$core$Array$builderToArray_fn);
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp_fn = function (fn, fromIndex, len, nodeList, tail) {
    initializeHelp: while (true) {
        if (fromIndex < 0) {
            return $elm$core$Array$builderToArray_fn(false, { aH: nodeList, ay: (len / $elm$core$Array$branchFactor) | 0, cY: tail });
        }
        else {
            var leaf = $elm$core$Array$Leaf(_JsArray_initialize_fn($elm$core$Array$branchFactor, fromIndex, fn));
            var $temp$fn = fn, $temp$fromIndex = fromIndex - $elm$core$Array$branchFactor, $temp$len = len, $temp$nodeList = _List_Cons(leaf, nodeList), $temp$tail = tail;
            fn = $temp$fn;
            fromIndex = $temp$fromIndex;
            len = $temp$len;
            nodeList = $temp$nodeList;
            tail = $temp$tail;
            continue initializeHelp;
        }
    }
}, $elm$core$Array$initializeHelp = F5($elm$core$Array$initializeHelp_fn);
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize_fn = function (len, fn) {
    if (len <= 0) {
        return $elm$core$Array$empty;
    }
    else {
        var tailLen = len % $elm$core$Array$branchFactor;
        var tail = _JsArray_initialize_fn(tailLen, len - tailLen, fn);
        var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
        return $elm$core$Array$initializeHelp_fn(fn, initialFromIndex, len, _List_Nil, tail);
    }
}, $elm$core$Array$initialize = F2($elm$core$Array$initialize_fn);
var $elm$core$Basics$True = 0;
var $elm$core$Result$isOk = function (result) {
    if (!result.$) {
        return true;
    }
    else {
        return false;
    }
};
var $elm$json$Json$Decode$value = _Json_decodeValue;
var $author$project$Main$fromJs = _Platform_incomingPort("fromJs", $elm$json$Json$Decode$value);
var $author$project$Main$WaitingForElmHomeDirectory = { $: 0 };
var $author$project$Main$initialState = $author$project$Main$WaitingForElmHomeDirectory;
var $author$project$Main$ElmJsonReadFailed = function (a) {
    return { $: 4, a: a };
};
var $author$project$Main$Running = function (a) {
    return { $: 3, a: a };
};
var $author$project$Main$WaitingForElmJson = function (a) {
    return { $: 2, a: a };
};
var $author$project$Main$WaitingForNodeHomeDirectoryBecauseElmHomeIsNotDefined = { $: 1 };
var $elm$core$Basics$identity = function (x) {
    return x;
};
var $miniBill$elm_fast_dict$FastSet$Set = $elm$core$Basics$identity;
var $miniBill$elm_fast_dict$Internal$Dict_fn = function (a, b) {
    return { $: 0, a: a, b: b };
}, $miniBill$elm_fast_dict$Internal$Dict = F2($miniBill$elm_fast_dict$Internal$Dict_fn);
var $miniBill$elm_fast_dict$Internal$Leaf = { $: 1 };
var $miniBill$elm_fast_dict$FastDict$empty = $miniBill$elm_fast_dict$Internal$Dict_fn(0, $miniBill$elm_fast_dict$Internal$Leaf);
var $miniBill$elm_fast_dict$FastSet$empty = $miniBill$elm_fast_dict$FastDict$empty;
var $lue_bird$elm_state_interface_experimental$Node$EnvironmentVariablesRequest = function (a) {
    return { $: 4, a: a };
};
var $elm$core$Dict$foldl_fn = function (func, acc, dict) {
    foldl: while (true) {
        if (dict.$ === -2) {
            return acc;
        }
        else {
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            var $temp$func = func, $temp$acc = A3(func, key, value, $elm$core$Dict$foldl_fn(func, acc, left)), $temp$dict = right;
            func = $temp$func;
            acc = $temp$acc;
            dict = $temp$dict;
            continue foldl;
        }
    }
}, $elm$core$Dict$foldl_fn_unwrapped = function (func, acc, dict) {
    foldl: while (true) {
        if (dict.$ === -2) {
            return acc;
        }
        else {
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            var $temp$func = func, $temp$acc = func(key, value, $elm$core$Dict$foldl_fn_unwrapped(func, acc, left)), $temp$dict = right;
            func = $temp$func;
            acc = $temp$acc;
            dict = $temp$dict;
            continue foldl;
        }
    }
}, $elm$core$Dict$foldl = F3($elm$core$Dict$foldl_fn);
var $elm$json$Json$Encode$dict_fn = function (toKey, toValue, dictionary) {
    return _Json_wrap($elm$core$Dict$foldl_fn_unwrapped(function (key, value, obj) {
        return _Json_addField_fn(toKey(key), toValue(value), obj);
    }, _Json_emptyObject(0), dictionary));
}, $elm$json$Json$Encode$dict = F3($elm$json$Json$Encode$dict_fn);
var $elm$json$Json$Encode$string = _Json_wrap;
var $lue_bird$elm_state_interface_experimental$Node$environmentVariablesToJson = function (environmentVariables) {
    return $elm$json$Json$Encode$dict_fn($elm$core$Basics$identity, $elm$json$Json$Encode$string, environmentVariables);
};
var $elm$json$Json$Encode$object = function (pairs) {
    return _Json_wrap($elm$core$List$foldl_fn_unwrapped(function (_v0, obj) {
        var k = _v0.a;
        var v = _v0.b;
        return _Json_addField_fn(k, v, obj);
    }, _Json_emptyObject(0), pairs));
};
var $elm$json$Json$Encode$int = _Json_wrap;
var $lue_bird$elm_state_interface_experimental$StructuredId$ofInt = $elm$json$Json$Encode$int;
var $elm$json$Json$Encode$list_fn = function (func, entries) {
    return _Json_wrap($elm$core$List$foldl_fn(_Json_addEntry(func), _Json_emptyArray(0), entries));
}, $elm$json$Json$Encode$list = F2($elm$json$Json$Encode$list_fn);
var $lue_bird$elm_state_interface_experimental$StructuredId$ofList_fn = function (elementToStructuredId, structuredIds) {
    return $elm$json$Json$Encode$list_fn(elementToStructuredId, structuredIds);
}, $lue_bird$elm_state_interface_experimental$StructuredId$ofList = F2($lue_bird$elm_state_interface_experimental$StructuredId$ofList_fn);
var $lue_bird$elm_state_interface_experimental$StructuredId$ofParts = function (fieldValueStructureIds) {
    return $elm$json$Json$Encode$list_fn($elm$core$Basics$identity, fieldValueStructureIds);
};
var $lue_bird$elm_state_interface_experimental$StructuredId$ofString = $elm$json$Json$Encode$string;
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit = $elm$json$Json$Encode$null;
var $lue_bird$elm_state_interface_experimental$StructuredId$ofVariant = function (variant) {
    return $lue_bird$elm_state_interface_experimental$StructuredId$ofParts(_List_fromArray([
        $lue_bird$elm_state_interface_experimental$StructuredId$ofString(variant.eL),
        variant.l
    ]));
};
var $elm$time$Time$posixToMillis = function (_v0) {
    var millis = _v0;
    return millis;
};
var $lue_bird$elm_state_interface_experimental$Time$LocalExtra$posixToStructureId = function (timePosix) {
    return $lue_bird$elm_state_interface_experimental$StructuredId$ofInt($elm$time$Time$posixToMillis(timePosix));
};
var $lue_bird$elm_state_interface_experimental$Node$interfaceSingleToStructuredId = function (interfaceSingle) {
    return $lue_bird$elm_state_interface_experimental$StructuredId$ofVariant(function () {
        switch (interfaceSingle.$) {
            case 12:
                var request = interfaceSingle.a;
                return {
                    eL: "HttpRequestSend",
                    l: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(request.cG)
                };
            case 13:
                var listen = interfaceSingle.a;
                return {
                    eL: "HttpRequestListen",
                    l: $lue_bird$elm_state_interface_experimental$StructuredId$ofInt(listen.bf)
                };
            case 14:
                var send = interfaceSingle.a;
                return {
                    eL: "HttpResponseSend",
                    l: $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("port", $lue_bird$elm_state_interface_experimental$StructuredId$ofInt(send.bf)),
                        _Utils_Tuple2("statusCode", $lue_bird$elm_state_interface_experimental$StructuredId$ofInt(send.cg)),
                        _Utils_Tuple2("headers", $lue_bird$elm_state_interface_experimental$StructuredId$ofList_fn(function (header) {
                            return $elm$json$Json$Encode$object(_List_fromArray([
                                _Utils_Tuple2("name", $lue_bird$elm_state_interface_experimental$StructuredId$ofString(header.a)),
                                _Utils_Tuple2("value", $lue_bird$elm_state_interface_experimental$StructuredId$ofString(header.l))
                            ]));
                        }, send.a1)),
                        _Utils_Tuple2("dataAsciiString", $lue_bird$elm_state_interface_experimental$StructuredId$ofString(send.dv))
                    ]))
                };
            case 15:
                return { eL: "TimePosixRequest", l: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit };
            case 16:
                return { eL: "TimezoneOffsetRequest", l: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit };
            case 19:
                return { eL: "TimezoneNameRequest", l: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit };
            case 17:
                var once = interfaceSingle.a;
                return {
                    eL: "TimeOnce",
                    l: $lue_bird$elm_state_interface_experimental$Time$LocalExtra$posixToStructureId(once.cT)
                };
            case 20:
                var request = interfaceSingle.a;
                return {
                    eL: "RandomUnsignedInt32sRequest",
                    l: $lue_bird$elm_state_interface_experimental$StructuredId$ofInt(request.cL)
                };
            case 18:
                var listen = interfaceSingle.a;
                return {
                    eL: "TimePeriodicallyListen",
                    l: $lue_bird$elm_state_interface_experimental$StructuredId$ofInt(listen.cP)
                };
            case 21:
                return { eL: "Exit", l: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit };
            case 22:
                var make = interfaceSingle.a;
                return {
                    eL: "DirectoryMake",
                    l: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(make.q)
                };
            case 23:
                var path = interfaceSingle.a;
                return {
                    eL: "FileRemove",
                    l: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(path)
                };
            case 24:
                var write = interfaceSingle.a;
                return {
                    eL: "FileWrite",
                    l: $lue_bird$elm_state_interface_experimental$StructuredId$ofParts(_List_fromArray([
                        $lue_bird$elm_state_interface_experimental$StructuredId$ofString(write.q),
                        $lue_bird$elm_state_interface_experimental$StructuredId$ofString(write.cK)
                    ]))
                };
            case 25:
                var request = interfaceSingle.a;
                return {
                    eL: "FileRequest",
                    l: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(request.q)
                };
            case 26:
                var listen = interfaceSingle.a;
                return {
                    eL: "FileChangeListen",
                    l: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(listen.q)
                };
            case 27:
                var request = interfaceSingle.a;
                return {
                    eL: "FileInfoRequest",
                    l: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(request.q)
                };
            case 28:
                var request = interfaceSingle.a;
                return {
                    eL: "DirectorySubPathsRequest",
                    l: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(request.q)
                };
            case 0:
                return { eL: "WorkingDirectoryPathRequest", l: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit };
            case 1:
                return { eL: "HomeDirectoryPathRequest", l: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit };
            case 2:
                return { eL: "NullDevicePathRequest", l: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit };
            case 3:
                return { eL: "LaunchArgumentsRequest", l: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit };
            case 4:
                return { eL: "EnvironmentVariablesRequest", l: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit };
            case 10:
                return { eL: "TerminalSizeRequest", l: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit };
            case 11:
                return { eL: "TerminalSizeChangeListen", l: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit };
            case 5:
                var title = interfaceSingle.a;
                return {
                    eL: "ProcessTitleSet",
                    l: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(title)
                };
            case 6:
                var text = interfaceSingle.a;
                return {
                    eL: "StandardOutWrite",
                    l: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(text)
                };
            case 7:
                var text = interfaceSingle.a;
                return {
                    eL: "StandardErrWrite",
                    l: $lue_bird$elm_state_interface_experimental$StructuredId$ofString(text)
                };
            case 8:
                return { eL: "StandardInListen", l: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit };
            case 9:
                return { eL: "StandardInRawListen", l: $lue_bird$elm_state_interface_experimental$StructuredId$ofUnit };
            case 29:
                var spawn = interfaceSingle.a;
                return {
                    eL: "SubProcessSpawn",
                    l: $lue_bird$elm_state_interface_experimental$StructuredId$ofParts(_List_fromArray([
                        $lue_bird$elm_state_interface_experimental$StructuredId$ofString(spawn.bb),
                        $lue_bird$elm_state_interface_experimental$StructuredId$ofList_fn($lue_bird$elm_state_interface_experimental$StructuredId$ofString, spawn.c),
                        $lue_bird$elm_state_interface_experimental$StructuredId$ofString(spawn.bn),
                        $lue_bird$elm_state_interface_experimental$Node$environmentVariablesToJson(spawn.bc)
                    ]))
                };
            default:
                var write = interfaceSingle.a;
                return {
                    eL: "SubProcessStandardInWrite",
                    l: $lue_bird$elm_state_interface_experimental$StructuredId$ofParts(_List_fromArray([
                        $lue_bird$elm_state_interface_experimental$StructuredId$ofString(write.bb),
                        $lue_bird$elm_state_interface_experimental$StructuredId$ofList_fn($lue_bird$elm_state_interface_experimental$StructuredId$ofString, write.c),
                        $lue_bird$elm_state_interface_experimental$StructuredId$ofString(write.bn),
                        $lue_bird$elm_state_interface_experimental$Node$environmentVariablesToJson(write.bc)
                    ]))
                };
        }
    }());
};
var $miniBill$elm_fast_dict$Internal$Black = 1;
var $miniBill$elm_fast_dict$Internal$InnerNode_fn = function (a, b, c, d, e) {
    return { $: 0, a: a, b: b, c: c, d: d, e: e };
}, $miniBill$elm_fast_dict$Internal$InnerNode = F5($miniBill$elm_fast_dict$Internal$InnerNode_fn);
var $miniBill$elm_fast_dict$FastDict$singleton_fn = function (key, value) {
    return $miniBill$elm_fast_dict$Internal$Dict_fn(1, $miniBill$elm_fast_dict$Internal$InnerNode_fn(1, key, value, $miniBill$elm_fast_dict$Internal$Leaf, $miniBill$elm_fast_dict$Internal$Leaf));
}, $miniBill$elm_fast_dict$FastDict$singleton = F2($miniBill$elm_fast_dict$FastDict$singleton_fn);
var $lue_bird$elm_state_interface_experimental$StructuredId$toJson = function (structuredId) {
    return structuredId;
};
var $lue_bird$elm_state_interface_experimental$StructuredId$toString = function (structuredId) {
    return _Json_encode_fn(0, $lue_bird$elm_state_interface_experimental$StructuredId$toJson(structuredId));
};
var $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle = function (interfaceSingle) {
    return $miniBill$elm_fast_dict$FastDict$singleton_fn($lue_bird$elm_state_interface_experimental$StructuredId$toString($lue_bird$elm_state_interface_experimental$Node$interfaceSingleToStructuredId(interfaceSingle)), interfaceSingle);
};
var $lue_bird$elm_state_interface_experimental$Node$environmentVariablesRequest = $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle($lue_bird$elm_state_interface_experimental$Node$EnvironmentVariablesRequest($elm$core$Basics$identity));
var $lue_bird$elm_state_interface_experimental$Node$Exit = function (a) {
    return { $: 21, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$exit = function (code) {
    return $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle($lue_bird$elm_state_interface_experimental$Node$Exit(code));
};
var $miniBill$elm_fast_dict$FastDict$foldlInner_fn = function (func, acc, dict) {
    foldlInner: while (true) {
        if (dict.$ === 1) {
            return acc;
        }
        else {
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            var $temp$func = func, $temp$acc = A3(func, key, value, $miniBill$elm_fast_dict$FastDict$foldlInner_fn(func, acc, left)), $temp$dict = right;
            func = $temp$func;
            acc = $temp$acc;
            dict = $temp$dict;
            continue foldlInner;
        }
    }
}, $miniBill$elm_fast_dict$FastDict$foldlInner_fn_unwrapped = function (func, acc, dict) {
    foldlInner: while (true) {
        if (dict.$ === 1) {
            return acc;
        }
        else {
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            var $temp$func = func, $temp$acc = func(key, value, $miniBill$elm_fast_dict$FastDict$foldlInner_fn_unwrapped(func, acc, left)), $temp$dict = right;
            func = $temp$func;
            acc = $temp$acc;
            dict = $temp$dict;
            continue foldlInner;
        }
    }
}, $miniBill$elm_fast_dict$FastDict$foldlInner = F3($miniBill$elm_fast_dict$FastDict$foldlInner_fn);
var $miniBill$elm_fast_dict$FastDict$foldl_fn = function (func, acc, _v0) {
    var dict = _v0.b;
    return $miniBill$elm_fast_dict$FastDict$foldlInner_fn(func, acc, dict);
}, $miniBill$elm_fast_dict$FastDict$foldl = F3($miniBill$elm_fast_dict$FastDict$foldl_fn);
var $miniBill$elm_fast_dict$Internal$Red = 0;
var $miniBill$elm_fast_dict$Internal$balance_fn = function (color, key, value, left, right) {
    if ((!right.$) && (!right.a)) {
        var _v1 = right.a;
        var rK = right.b;
        var rV = right.c;
        var rLeft = right.d;
        var rRight = right.e;
        if ((!left.$) && (!left.a)) {
            var _v3 = left.a;
            var lK = left.b;
            var lV = left.c;
            var lLeft = left.d;
            var lRight = left.e;
            return $miniBill$elm_fast_dict$Internal$InnerNode_fn(0, key, value, $miniBill$elm_fast_dict$Internal$InnerNode_fn(1, lK, lV, lLeft, lRight), $miniBill$elm_fast_dict$Internal$InnerNode_fn(1, rK, rV, rLeft, rRight));
        }
        else {
            return $miniBill$elm_fast_dict$Internal$InnerNode_fn(color, rK, rV, $miniBill$elm_fast_dict$Internal$InnerNode_fn(0, key, value, left, rLeft), rRight);
        }
    }
    else {
        if ((((!left.$) && (!left.a)) && (!left.d.$)) && (!left.d.a)) {
            var _v5 = left.a;
            var lK = left.b;
            var lV = left.c;
            var _v6 = left.d;
            var _v7 = _v6.a;
            var llK = _v6.b;
            var llV = _v6.c;
            var llLeft = _v6.d;
            var llRight = _v6.e;
            var lRight = left.e;
            return $miniBill$elm_fast_dict$Internal$InnerNode_fn(0, lK, lV, $miniBill$elm_fast_dict$Internal$InnerNode_fn(1, llK, llV, llLeft, llRight), $miniBill$elm_fast_dict$Internal$InnerNode_fn(1, key, value, lRight, right));
        }
        else {
            return $miniBill$elm_fast_dict$Internal$InnerNode_fn(color, key, value, left, right);
        }
    }
}, $miniBill$elm_fast_dict$Internal$balance = F5($miniBill$elm_fast_dict$Internal$balance_fn);
var $elm$core$Basics$compare = _Utils_compare;
var $miniBill$elm_fast_dict$FastDict$insertHelp_fn = function (key, value, dict) {
    if (dict.$ === 1) {
        return _Utils_Tuple2($miniBill$elm_fast_dict$Internal$InnerNode_fn(0, key, value, $miniBill$elm_fast_dict$Internal$Leaf, $miniBill$elm_fast_dict$Internal$Leaf), true);
    }
    else {
        var nColor = dict.a;
        var nKey = dict.b;
        var nValue = dict.c;
        var nLeft = dict.d;
        var nRight = dict.e;
        var _v1 = _Utils_compare_fn(key, nKey);
        switch (_v1) {
            case 0:
                var _v2 = $miniBill$elm_fast_dict$FastDict$insertHelp_fn(key, value, nLeft);
                var newLeft = _v2.a;
                var isNew = _v2.b;
                return _Utils_Tuple2($miniBill$elm_fast_dict$Internal$balance_fn(nColor, nKey, nValue, newLeft, nRight), isNew);
            case 1:
                return _Utils_Tuple2($miniBill$elm_fast_dict$Internal$InnerNode_fn(nColor, nKey, value, nLeft, nRight), false);
            default:
                var _v3 = $miniBill$elm_fast_dict$FastDict$insertHelp_fn(key, value, nRight);
                var newRight = _v3.a;
                var isNew = _v3.b;
                return _Utils_Tuple2($miniBill$elm_fast_dict$Internal$balance_fn(nColor, nKey, nValue, nLeft, newRight), isNew);
        }
    }
}, $miniBill$elm_fast_dict$FastDict$insertHelp = F3($miniBill$elm_fast_dict$FastDict$insertHelp_fn);
var $elm$core$Tuple$mapFirst_fn = function (func, _v0) {
    var x = _v0.a;
    var y = _v0.b;
    return _Utils_Tuple2(func(x), y);
}, $elm$core$Tuple$mapFirst = F2($elm$core$Tuple$mapFirst_fn);
var $miniBill$elm_fast_dict$Internal$setRootBlack = function (dict) {
    if ((!dict.$) && (!dict.a)) {
        var _v1 = dict.a;
        var k = dict.b;
        var v = dict.c;
        var l = dict.d;
        var r = dict.e;
        return $miniBill$elm_fast_dict$Internal$InnerNode_fn(1, k, v, l, r);
    }
    else {
        var x = dict;
        return x;
    }
};
var $miniBill$elm_fast_dict$FastDict$insertInner_fn = function (key, value, dict) {
    return $elm$core$Tuple$mapFirst_fn($miniBill$elm_fast_dict$Internal$setRootBlack, $miniBill$elm_fast_dict$FastDict$insertHelp_fn(key, value, dict));
}, $miniBill$elm_fast_dict$FastDict$insertInner = F3($miniBill$elm_fast_dict$FastDict$insertInner_fn);
var $miniBill$elm_fast_dict$FastDict$insert_fn = function (key, value, _v0) {
    var sz = _v0.a;
    var dict = _v0.b;
    var _v1 = $miniBill$elm_fast_dict$FastDict$insertInner_fn(key, value, dict);
    var result = _v1.a;
    var isNew = _v1.b;
    return isNew ? $miniBill$elm_fast_dict$Internal$Dict_fn(sz + 1, result) : $miniBill$elm_fast_dict$Internal$Dict_fn(sz, result);
}, $miniBill$elm_fast_dict$FastDict$insert = F3($miniBill$elm_fast_dict$FastDict$insert_fn);
var $miniBill$elm_fast_dict$Internal$insertHelpNoReplace_fn = function (key, value, dict) {
    if (dict.$ === 1) {
        return $elm$core$Maybe$Just($miniBill$elm_fast_dict$Internal$InnerNode_fn(0, key, value, $miniBill$elm_fast_dict$Internal$Leaf, $miniBill$elm_fast_dict$Internal$Leaf));
    }
    else {
        var nColor = dict.a;
        var nKey = dict.b;
        var nValue = dict.c;
        var nLeft = dict.d;
        var nRight = dict.e;
        var _v1 = _Utils_compare_fn(key, nKey);
        switch (_v1) {
            case 0:
                var _v2 = $miniBill$elm_fast_dict$Internal$insertHelpNoReplace_fn(key, value, nLeft);
                if (!_v2.$) {
                    var newLeft = _v2.a;
                    return $elm$core$Maybe$Just($miniBill$elm_fast_dict$Internal$balance_fn(nColor, nKey, nValue, newLeft, nRight));
                }
                else {
                    return $elm$core$Maybe$Nothing;
                }
            case 1:
                return $elm$core$Maybe$Nothing;
            default:
                var _v3 = $miniBill$elm_fast_dict$Internal$insertHelpNoReplace_fn(key, value, nRight);
                if (!_v3.$) {
                    var newRight = _v3.a;
                    return $elm$core$Maybe$Just($miniBill$elm_fast_dict$Internal$balance_fn(nColor, nKey, nValue, nLeft, newRight));
                }
                else {
                    return $elm$core$Maybe$Nothing;
                }
        }
    }
}, $miniBill$elm_fast_dict$Internal$insertHelpNoReplace = F3($miniBill$elm_fast_dict$Internal$insertHelpNoReplace_fn);
var $miniBill$elm_fast_dict$Internal$insertNoReplace_fn = function (key, value, orig) {
    var sz = orig.a;
    var dict = orig.b;
    var _v0 = $miniBill$elm_fast_dict$Internal$insertHelpNoReplace_fn(key, value, dict);
    if (!_v0.$) {
        var result = _v0.a;
        return $miniBill$elm_fast_dict$Internal$Dict_fn(sz + 1, $miniBill$elm_fast_dict$Internal$setRootBlack(result));
    }
    else {
        return orig;
    }
}, $miniBill$elm_fast_dict$Internal$insertNoReplace = F3($miniBill$elm_fast_dict$Internal$insertNoReplace_fn);
var $miniBill$elm_fast_dict$FastDict$union_fn = function (t1, t2) {
    var s1 = t1.a;
    var s2 = t2.a;
    return (_Utils_cmp(s1, s2) > 0) ? $miniBill$elm_fast_dict$FastDict$foldl_fn($miniBill$elm_fast_dict$Internal$insertNoReplace, t1, t2) : $miniBill$elm_fast_dict$FastDict$foldl_fn($miniBill$elm_fast_dict$FastDict$insert, t2, t1);
}, $miniBill$elm_fast_dict$FastDict$union = F2($miniBill$elm_fast_dict$FastDict$union_fn);
var $lue_bird$elm_state_interface_experimental$Node$interfaceBatch2 = $miniBill$elm_fast_dict$FastDict$union;
var $lue_bird$elm_state_interface_experimental$Node$interfaceBatch = function (interfaces) {
    return $elm$core$List$foldl_fn($lue_bird$elm_state_interface_experimental$Node$interfaceBatch2, $miniBill$elm_fast_dict$FastDict$empty, interfaces);
};
var $lue_bird$elm_state_interface_experimental$Node$StandardOutWrite = function (a) {
    return { $: 6, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$standardErrWrite = function (text) {
    return $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle($lue_bird$elm_state_interface_experimental$Node$StandardOutWrite(text));
};
var $author$project$Main$errorInterface = function (message) {
    return $lue_bird$elm_state_interface_experimental$Node$interfaceBatch(_List_fromArray([
        $lue_bird$elm_state_interface_experimental$Node$standardErrWrite(message + "\n"),
        $lue_bird$elm_state_interface_experimental$Node$exit(1)
    ]));
};
var $miniBill$elm_fast_dict$FastSet$insert_fn = function (value, _v0) {
    var set = _v0;
    return $miniBill$elm_fast_dict$Internal$insertNoReplace_fn(value, false, set);
}, $miniBill$elm_fast_dict$FastSet$insert = F2($miniBill$elm_fast_dict$FastSet$insert_fn);
var $miniBill$elm_fast_dict$FastSet$fromList = function (list) {
    return $elm$core$List$foldl_fn($miniBill$elm_fast_dict$FastSet$insert, $miniBill$elm_fast_dict$FastSet$empty, list);
};
var $elm$core$Dict$get_fn = function (targetKey, dict) {
    get: while (true) {
        if (dict.$ === -2) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            var _v1 = _Utils_compare_fn(targetKey, key);
            switch (_v1) {
                case 0:
                    var $temp$targetKey = targetKey, $temp$dict = left;
                    targetKey = $temp$targetKey;
                    dict = $temp$dict;
                    continue get;
                case 1:
                    return $elm$core$Maybe$Just(value);
                default:
                    var $temp$targetKey = targetKey, $temp$dict = right;
                    targetKey = $temp$targetKey;
                    dict = $temp$dict;
                    continue get;
            }
        }
    }
}, $elm$core$Dict$get = F2($elm$core$Dict$get_fn);
var $lue_bird$elm_state_interface_experimental$Node$HomeDirectoryPathRequest = function (a) {
    return { $: 1, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$homeDirectoryPathRequest = $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle($lue_bird$elm_state_interface_experimental$Node$HomeDirectoryPathRequest($elm$core$Basics$identity));
var $lue_bird$elm_state_interface_experimental$Node$DirectoryMake = function (a) {
    return { $: 22, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$DirectorySubPathsRequest = function (a) {
    return { $: 28, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$FileChangeListen = function (a) {
    return { $: 26, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$FileInfoRequest = function (a) {
    return { $: 27, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$FileRemove = function (a) {
    return { $: 23, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$FileRequest = function (a) {
    return { $: 25, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$FileWrite = function (a) {
    return { $: 24, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$HttpRequestListen = function (a) {
    return { $: 13, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$HttpRequestSend = function (a) {
    return { $: 12, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$HttpResponseSend = function (a) {
    return { $: 14, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$LaunchArgumentsRequest = function (a) {
    return { $: 3, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$NullDevicePathRequest = function (a) {
    return { $: 2, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$ProcessTitleSet = function (a) {
    return { $: 5, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$RandomUnsignedInt32sRequest = function (a) {
    return { $: 20, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$StandardErrWrite = function (a) {
    return { $: 7, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$StandardInListen = function (a) {
    return { $: 8, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$StandardInRawListen = function (a) {
    return { $: 9, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$SubProcessSpawn = function (a) {
    return { $: 29, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$SubProcessStandardInWrite = function (a) {
    return { $: 30, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$TerminalSizeChangeListen = function (a) {
    return { $: 11, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$TerminalSizeRequest = function (a) {
    return { $: 10, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$TimeOnce = function (a) {
    return { $: 17, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$TimePeriodicallyListen = function (a) {
    return { $: 18, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$TimePosixRequest = function (a) {
    return { $: 15, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$TimezoneNameRequest = function (a) {
    return { $: 19, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$TimezoneOffsetRequest = function (a) {
    return { $: 16, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$WorkingDirectoryPathRequest = function (a) {
    return { $: 0, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$interfaceSingleFutureMap_fn = function (futureChange, interfaceSingle) {
    switch (interfaceSingle.$) {
        case 12:
            var send = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$HttpRequestSend({
                c$: send.c$,
                a1: send.a1,
                cx: send.cx,
                G: function (responseBytes) {
                    return futureChange(send.G(responseBytes));
                },
                cG: send.cG
            });
        case 13:
            var listen = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$HttpRequestListen({
                G: function (request) {
                    return futureChange(listen.G(request));
                },
                bf: listen.bf
            });
        case 14:
            var send = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$HttpResponseSend(send);
        case 15:
            var requestTimeNow = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$TimePosixRequest(function (event) {
                return futureChange(requestTimeNow(event));
            });
        case 16:
            var requestTimezone = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$TimezoneOffsetRequest(function (event) {
                return futureChange(requestTimezone(event));
            });
        case 19:
            var requestTimezoneName = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$TimezoneNameRequest(function (event) {
                return futureChange(requestTimezoneName(event));
            });
        case 17:
            var once = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$TimeOnce({
                G: function (event) {
                    return futureChange(once.G(event));
                },
                cT: once.cT
            });
        case 20:
            var request = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$RandomUnsignedInt32sRequest({
                cL: request.cL,
                G: function (ints) {
                    return futureChange(request.G(ints));
                }
            });
        case 18:
            var periodicallyListen = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$TimePeriodicallyListen({
                cP: periodicallyListen.cP,
                G: function (posix) {
                    return futureChange(periodicallyListen.G(posix));
                }
            });
        case 21:
            var code = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$Exit(code);
        case 22:
            var make = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$DirectoryMake({
                G: function (result) {
                    return futureChange(make.G(result));
                },
                q: make.q
            });
        case 23:
            var path = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$FileRemove(path);
        case 24:
            var write = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$FileWrite({
                cK: write.cK,
                G: function (result) {
                    return futureChange(write.G(result));
                },
                q: write.q
            });
        case 25:
            var request = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$FileRequest({
                G: function (content) {
                    return futureChange(request.G(content));
                },
                q: request.q
            });
        case 26:
            var listen = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$FileChangeListen({
                G: function (fileChange) {
                    return futureChange(listen.G(fileChange));
                },
                q: listen.q
            });
        case 27:
            var request = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$FileInfoRequest({
                G: function (info) {
                    return futureChange(request.G(info));
                },
                q: request.q
            });
        case 28:
            var request = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$DirectorySubPathsRequest({
                G: function (subNames) {
                    return futureChange(request.G(subNames));
                },
                q: request.q
            });
        case 0:
            var on = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$WorkingDirectoryPathRequest(function (path) {
                return futureChange(on(path));
            });
        case 1:
            var on = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$HomeDirectoryPathRequest(function (path) {
                return futureChange(on(path));
            });
        case 2:
            var on = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$NullDevicePathRequest(function (path) {
                return futureChange(on(path));
            });
        case 3:
            var on = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$LaunchArgumentsRequest(function (_arguments) {
                return futureChange(on(_arguments));
            });
        case 4:
            var on = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$EnvironmentVariablesRequest(function (environmentVariables) {
                return futureChange(on(environmentVariables));
            });
        case 10:
            var on = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$TerminalSizeRequest(function (size) {
                return futureChange(on(size));
            });
        case 11:
            var on = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$TerminalSizeChangeListen(function (size) {
                return futureChange(on(size));
            });
        case 5:
            var newTitle = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$ProcessTitleSet(newTitle);
        case 6:
            var text = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$StandardOutWrite(text);
        case 7:
            var text = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$StandardErrWrite(text);
        case 8:
            var on = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$StandardInListen(function (size) {
                return futureChange(on(size));
            });
        case 9:
            var on = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$StandardInRawListen(function (size) {
                return futureChange(on(size));
            });
        case 29:
            var spawn = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$SubProcessSpawn({
                c: spawn.c,
                bb: spawn.bb,
                bc: spawn.bc,
                G: function (event) {
                    return futureChange(spawn.G(event));
                },
                bn: spawn.bn
            });
        default:
            var write = interfaceSingle.a;
            return $lue_bird$elm_state_interface_experimental$Node$SubProcessStandardInWrite(write);
    }
}, $lue_bird$elm_state_interface_experimental$Node$interfaceSingleFutureMap = F2($lue_bird$elm_state_interface_experimental$Node$interfaceSingleFutureMap_fn);
var $miniBill$elm_fast_dict$FastDict$mapInner_fn = function (func, dict) {
    if (dict.$ === 1) {
        return $miniBill$elm_fast_dict$Internal$Leaf;
    }
    else {
        var color = dict.a;
        var key = dict.b;
        var value = dict.c;
        var left = dict.d;
        var right = dict.e;
        return $miniBill$elm_fast_dict$Internal$InnerNode_fn(color, key, A2(func, key, value), $miniBill$elm_fast_dict$FastDict$mapInner_fn(func, left), $miniBill$elm_fast_dict$FastDict$mapInner_fn(func, right));
    }
}, $miniBill$elm_fast_dict$FastDict$mapInner_fn_unwrapped = function (func, dict) {
    if (dict.$ === 1) {
        return $miniBill$elm_fast_dict$Internal$Leaf;
    }
    else {
        var color = dict.a;
        var key = dict.b;
        var value = dict.c;
        var left = dict.d;
        var right = dict.e;
        return $miniBill$elm_fast_dict$Internal$InnerNode_fn(color, key, func(key, value), $miniBill$elm_fast_dict$FastDict$mapInner_fn_unwrapped(func, left), $miniBill$elm_fast_dict$FastDict$mapInner_fn_unwrapped(func, right));
    }
}, $miniBill$elm_fast_dict$FastDict$mapInner = F2($miniBill$elm_fast_dict$FastDict$mapInner_fn);
var $miniBill$elm_fast_dict$FastDict$map_fn = function (func, _v0) {
    var sz = _v0.a;
    var dict = _v0.b;
    return $miniBill$elm_fast_dict$Internal$Dict_fn(sz, $miniBill$elm_fast_dict$FastDict$mapInner_fn(func, dict));
}, $miniBill$elm_fast_dict$FastDict$map = F2($miniBill$elm_fast_dict$FastDict$map_fn);
var $lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap_fn = function (futureChange, _interface) {
    return $miniBill$elm_fast_dict$FastDict$map_fn(F2(function (_v0, interfaceSingle) {
        return $lue_bird$elm_state_interface_experimental$Node$interfaceSingleFutureMap_fn(futureChange, interfaceSingle);
    }), _interface);
}, $lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap = F2($lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap_fn);
var $elm$core$List$foldrHelper_fn = function (fn, acc, ctr, ls) {
    if (!ls.b) {
        return acc;
    }
    else {
        var a = ls.a;
        var r1 = ls.b;
        if (!r1.b) {
            return A2(fn, a, acc);
        }
        else {
            var b = r1.a;
            var r2 = r1.b;
            if (!r2.b) {
                return A2(fn, a, A2(fn, b, acc));
            }
            else {
                var c = r2.a;
                var r3 = r2.b;
                if (!r3.b) {
                    return A2(fn, a, A2(fn, b, A2(fn, c, acc)));
                }
                else {
                    var d = r3.a;
                    var r4 = r3.b;
                    var res = (ctr > 500) ? $elm$core$List$foldl_fn(fn, acc, $elm$core$List$reverse(r4)) : $elm$core$List$foldrHelper_fn(fn, acc, ctr + 1, r4);
                    return A2(fn, a, A2(fn, b, A2(fn, c, A2(fn, d, res))));
                }
            }
        }
    }
}, $elm$core$List$foldrHelper_fn_unwrapped = function (fn, acc, ctr, ls) {
    if (!ls.b) {
        return acc;
    }
    else {
        var a = ls.a;
        var r1 = ls.b;
        if (!r1.b) {
            return fn(a, acc);
        }
        else {
            var b = r1.a;
            var r2 = r1.b;
            if (!r2.b) {
                return fn(a, fn(b, acc));
            }
            else {
                var c = r2.a;
                var r3 = r2.b;
                if (!r3.b) {
                    return fn(a, fn(b, fn(c, acc)));
                }
                else {
                    var d = r3.a;
                    var r4 = r3.b;
                    var res = (ctr > 500) ? $elm$core$List$foldl_fn_unwrapped(fn, acc, $elm$core$List$reverse(r4)) : $elm$core$List$foldrHelper_fn_unwrapped(fn, acc, ctr + 1, r4);
                    return fn(a, fn(b, fn(c, fn(d, res))));
                }
            }
        }
    }
}, $elm$core$List$foldrHelper = F4($elm$core$List$foldrHelper_fn);
var $elm$core$List$foldr_fn = function (fn, acc, ls) {
    return $elm$core$List$foldrHelper_fn(fn, acc, 0, ls);
}, $elm$core$List$foldr = F3($elm$core$List$foldr_fn);
var $elm$core$List$map_fn = function (f, xs) {
    var tmp = _List_Cons(undefined, _List_Nil);
    var end = tmp;
    for (; xs.b; xs
        = xs.b) {
        var next = _List_Cons(f(xs.a), _List_Nil);
        end.b = next;
        end = next;
    }
    return tmp.b;
}, $elm$core$List$map = F2($elm$core$List$map_fn);
var $elm$bytes$Bytes$Encode$getWidth = function (builder) {
    switch (builder.$) {
        case 0:
            return 1;
        case 1:
            return 2;
        case 2:
            return 4;
        case 3:
            return 1;
        case 4:
            return 2;
        case 5:
            return 4;
        case 6:
            return 4;
        case 7:
            return 8;
        case 8:
            var w = builder.a;
            return w;
        case 9:
            var w = builder.a;
            return w;
        default:
            var bs = builder.a;
            return _Bytes_width(bs);
    }
};
var $elm$bytes$Bytes$LE = 0;
var $elm$bytes$Bytes$Encode$write_fn = function (builder, mb, offset) {
    switch (builder.$) {
        case 0:
            var n = builder.a;
            return _Bytes_write_i8_fn(mb, offset, n);
        case 1:
            var e = builder.a;
            var n = builder.b;
            return _Bytes_write_i16_fn(mb, offset, n, !e);
        case 2:
            var e = builder.a;
            var n = builder.b;
            return _Bytes_write_i32_fn(mb, offset, n, !e);
        case 3:
            var n = builder.a;
            return _Bytes_write_u8_fn(mb, offset, n);
        case 4:
            var e = builder.a;
            var n = builder.b;
            return _Bytes_write_u16_fn(mb, offset, n, !e);
        case 5:
            var e = builder.a;
            var n = builder.b;
            return _Bytes_write_u32_fn(mb, offset, n, !e);
        case 6:
            var e = builder.a;
            var n = builder.b;
            return _Bytes_write_f32_fn(mb, offset, n, !e);
        case 7:
            var e = builder.a;
            var n = builder.b;
            return _Bytes_write_f64_fn(mb, offset, n, !e);
        case 8:
            var bs = builder.b;
            return $elm$bytes$Bytes$Encode$writeSequence_fn(bs, mb, offset);
        case 9:
            var s = builder.b;
            return _Bytes_write_string_fn(mb, offset, s);
        default:
            var bs = builder.a;
            return _Bytes_write_bytes_fn(mb, offset, bs);
    }
}, $elm$bytes$Bytes$Encode$write = F3($elm$bytes$Bytes$Encode$write_fn);
var $elm$bytes$Bytes$Encode$writeSequence_fn = function (builders, mb, offset) {
    writeSequence: while (true) {
        if (!builders.b) {
            return offset;
        }
        else {
            var b = builders.a;
            var bs = builders.b;
            var $temp$builders = bs, $temp$mb = mb, $temp$offset = $elm$bytes$Bytes$Encode$write_fn(b, mb, offset);
            builders = $temp$builders;
            mb = $temp$mb;
            offset = $temp$offset;
            continue writeSequence;
        }
    }
}, $elm$bytes$Bytes$Encode$writeSequence = F3($elm$bytes$Bytes$Encode$writeSequence_fn);
var $elm$bytes$Bytes$Decode$decode_fn = function (_v0, bs) {
    var decoder = _v0;
    return _Bytes_decode_fn(decoder, bs);
}, $elm$bytes$Bytes$Decode$decode = F2($elm$bytes$Bytes$Decode$decode_fn);
var $elm$json$Json$Decode$decodeString = _Json_runOnString;
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$project_metadata_utils$Elm$Project$Application = function (a) {
    return { $: 0, a: a };
};
var $elm$project_metadata_utils$Elm$Project$Package = function (a) {
    return { $: 1, a: a };
};
var $elm$project_metadata_utils$Elm$Project$ApplicationInfo_fn = function (elm, dirs, depsDirect, depsIndirect, testDepsDirect, testDepsIndirect) {
    return { ff: depsDirect, fg: depsIndirect, fi: dirs, c6: elm, eP: testDepsDirect, eQ: testDepsIndirect };
}, $elm$project_metadata_utils$Elm$Project$ApplicationInfo = F6($elm$project_metadata_utils$Elm$Project$ApplicationInfo_fn);
var $elm$json$Json$Decode$field = _Json_decodeField;
var $elm$json$Json$Decode$at_fn = function (fields, decoder) {
    return $elm$core$List$foldr_fn($elm$json$Json$Decode$field, decoder, fields);
}, $elm$json$Json$Decode$at = F2($elm$json$Json$Decode$at_fn);
var $elm$json$Json$Decode$fail = _Json_fail;
var $elm$project_metadata_utils$Elm$Version$Version_fn = function (a, b, c) {
    return { $: 0, a: a, b: b, c: c };
}, $elm$project_metadata_utils$Elm$Version$Version = F3($elm$project_metadata_utils$Elm$Version$Version_fn);
var $elm$core$Basics$ge = _Utils_ge;
var $elm$project_metadata_utils$Elm$Version$checkNumbers_fn = function (major, minor, patch) {
    return ((major >= 0) && ((minor >= 0) && (patch >= 0))) ? $elm$core$Maybe$Just($elm$project_metadata_utils$Elm$Version$Version_fn(major, minor, patch)) : $elm$core$Maybe$Nothing;
}, $elm$project_metadata_utils$Elm$Version$checkNumbers = F3($elm$project_metadata_utils$Elm$Version$checkNumbers_fn);
var $elm$core$String$toInt = _String_toInt;
var $elm$project_metadata_utils$Elm$Version$fromString = function (string) {
    var _v0 = $elm$core$List$map_fn($elm$core$String$toInt, $elm$core$String$split_fn(".", string));
    if ((((((_v0.b && (!_v0.a.$)) && _v0.b.b) && (!_v0.b.a.$)) && _v0.b.b.b) && (!_v0.b.b.a.$)) && (!_v0.b.b.b.b)) {
        var major = _v0.a.a;
        var _v1 = _v0.b;
        var minor = _v1.a.a;
        var _v2 = _v1.b;
        var patch = _v2.a.a;
        return $elm$project_metadata_utils$Elm$Version$checkNumbers_fn(major, minor, patch);
    }
    else {
        return $elm$core$Maybe$Nothing;
    }
};
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$project_metadata_utils$Elm$Version$decoderHelp = function (string) {
    var _v0 = $elm$project_metadata_utils$Elm$Version$fromString(string);
    if (!_v0.$) {
        var version = _v0.a;
        return $elm$json$Json$Decode$succeed(version);
    }
    else {
        return $elm$json$Json$Decode$fail("I need a valid version like \"2.0.1\"");
    }
};
var $elm$json$Json$Decode$string = _Json_decodeString;
var $elm$project_metadata_utils$Elm$Version$decoder = _Json_andThen_fn($elm$project_metadata_utils$Elm$Version$decoderHelp, $elm$json$Json$Decode$string);
var $elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
var $elm$project_metadata_utils$Elm$Package$Name_fn = function (a, b) {
    return { $: 0, a: a, b: b };
}, $elm$project_metadata_utils$Elm$Package$Name = F2($elm$project_metadata_utils$Elm$Package$Name_fn);
var $elm$core$String$any = _String_any;
var $elm$core$String$contains = _String_contains;
var $elm$project_metadata_utils$Elm$Package$isBadChar = function (_char) {
    return $elm$core$Char$isUpper(_char) || ((_char === ".") || (_char === "_"));
};
var $elm$core$Basics$not = _Basics_not;
var $elm$core$String$startsWith = _String_startsWith;
var $elm$project_metadata_utils$Elm$Package$isBadProjectName = function (project) {
    var _v0 = $elm$core$String$uncons(project);
    if (_v0.$ === 1) {
        return true;
    }
    else {
        var _v1 = _v0.a;
        var c = _v1.a;
        return _String_contains_fn("--", project) || (_String_any_fn($elm$project_metadata_utils$Elm$Package$isBadChar, project) || (_String_startsWith_fn("-", project) || (!$elm$core$Char$isLower(c))));
    }
};
var $elm$project_metadata_utils$Elm$Package$fromString = function (string) {
    var _v0 = $elm$core$String$split_fn("/", string);
    if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
        var author = _v0.a;
        var _v1 = _v0.b;
        var project = _v1.a;
        return $elm$project_metadata_utils$Elm$Package$isBadProjectName(project) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just($elm$project_metadata_utils$Elm$Package$Name_fn(author, project));
    }
    else {
        return $elm$core$Maybe$Nothing;
    }
};
var $elm$project_metadata_utils$Elm$Project$verifyDepNames_fn = function (revDeps, pairs) {
    verifyDepNames: while (true) {
        if (!pairs.b) {
            return $elm$json$Json$Decode$succeed($elm$core$List$reverse(revDeps));
        }
        else {
            var _v1 = pairs.a;
            var key = _v1.a;
            var con = _v1.b;
            var otherPairs = pairs.b;
            var _v2 = $elm$project_metadata_utils$Elm$Package$fromString(key);
            if (!_v2.$) {
                var pkg = _v2.a;
                var $temp$revDeps = _List_Cons(_Utils_Tuple2(pkg, con), revDeps), $temp$pairs = otherPairs;
                revDeps = $temp$revDeps;
                pairs = $temp$pairs;
                continue verifyDepNames;
            }
            else {
                return $elm$json$Json$Decode$fail("\"" + (key + "\" is not a valid package name."));
            }
        }
    }
}, $elm$project_metadata_utils$Elm$Project$verifyDepNames = F2($elm$project_metadata_utils$Elm$Project$verifyDepNames_fn);
var $elm$project_metadata_utils$Elm$Project$depsDecoder = function (constraintDecoder) {
    return _Json_andThen_fn($elm$project_metadata_utils$Elm$Project$verifyDepNames(_List_Nil), $elm$json$Json$Decode$keyValuePairs(constraintDecoder));
};
var $elm$json$Json$Decode$list = _Json_decodeList;
var $elm$json$Json$Decode$map6 = _Json_map6;
var $elm$project_metadata_utils$Elm$Project$applicationDecoder = _Json_map6_fn($elm$project_metadata_utils$Elm$Project$ApplicationInfo, _Json_decodeField_fn("elm-version", $elm$project_metadata_utils$Elm$Version$decoder), _Json_decodeField_fn("source-directories", $elm$json$Json$Decode$list($elm$json$Json$Decode$string)), $elm$json$Json$Decode$at_fn(_List_fromArray(["dependencies", "direct"]), $elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Version$decoder)), $elm$json$Json$Decode$at_fn(_List_fromArray(["dependencies", "indirect"]), $elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Version$decoder)), $elm$json$Json$Decode$at_fn(_List_fromArray(["test-dependencies", "direct"]), $elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Version$decoder)), $elm$json$Json$Decode$at_fn(_List_fromArray(["test-dependencies", "indirect"]), $elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Version$decoder)));
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$project_metadata_utils$Elm$Project$PackageInfo_fn = function (name, summary, license, version, exposed, deps, testDeps, elm) {
    return { d_: deps, c6: elm, d2: exposed, ej: license, a: name, eK: summary, eO: testDeps, eZ: version };
}, $elm$project_metadata_utils$Elm$Project$PackageInfo = F8($elm$project_metadata_utils$Elm$Project$PackageInfo_fn);
var $elm$project_metadata_utils$Elm$Constraint$Constraint_fn = function (a, b, c, d) {
    return { $: 0, a: a, b: b, c: c, d: d };
}, $elm$project_metadata_utils$Elm$Constraint$Constraint = F4($elm$project_metadata_utils$Elm$Constraint$Constraint_fn);
var $elm$core$Maybe$andThen_fn = function (callback, maybeValue) {
    if (!maybeValue.$) {
        var value = maybeValue.a;
        return callback(value);
    }
    else {
        return $elm$core$Maybe$Nothing;
    }
}, $elm$core$Maybe$andThen = F2($elm$core$Maybe$andThen_fn);
var $elm$project_metadata_utils$Elm$Version$compare_fn = function (_v0, _v1) {
    var major1 = _v0.a;
    var minor1 = _v0.b;
    var patch1 = _v0.c;
    var major2 = _v1.a;
    var minor2 = _v1.b;
    var patch2 = _v1.c;
    var _v2 = _Utils_compare_fn(major1, major2);
    switch (_v2) {
        case 0:
            return 0;
        case 2:
            return 2;
        default:
            var _v3 = _Utils_compare_fn(minor1, minor2);
            switch (_v3) {
                case 0:
                    return 0;
                case 1:
                    return _Utils_compare_fn(patch1, patch2);
                default:
                    return 2;
            }
    }
}, $elm$project_metadata_utils$Elm$Version$compare = F2($elm$project_metadata_utils$Elm$Version$compare_fn);
var $elm$project_metadata_utils$Elm$Constraint$checkConstraint = function (constraint) {
    var lower = constraint.a;
    var upper = constraint.d;
    var _v0 = $elm$project_metadata_utils$Elm$Version$compare_fn(lower, upper);
    switch (_v0) {
        case 0:
            return $elm$core$Maybe$Just(constraint);
        case 1:
            return $elm$core$Maybe$Just(constraint);
        default:
            return $elm$core$Maybe$Nothing;
    }
};
var $elm$core$Maybe$map4_fn = function (func, ma, mb, mc, md) {
    if (ma.$ === 1) {
        return $elm$core$Maybe$Nothing;
    }
    else {
        var a = ma.a;
        if (mb.$ === 1) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var b = mb.a;
            if (mc.$ === 1) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var c = mc.a;
                if (md.$ === 1) {
                    return $elm$core$Maybe$Nothing;
                }
                else {
                    var d = md.a;
                    return $elm$core$Maybe$Just(A4(func, a, b, c, d));
                }
            }
        }
    }
}, $elm$core$Maybe$map4_fn_unwrapped = function (func, ma, mb, mc, md) {
    if (ma.$ === 1) {
        return $elm$core$Maybe$Nothing;
    }
    else {
        var a = ma.a;
        if (mb.$ === 1) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var b = mb.a;
            if (mc.$ === 1) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var c = mc.a;
                if (md.$ === 1) {
                    return $elm$core$Maybe$Nothing;
                }
                else {
                    var d = md.a;
                    return $elm$core$Maybe$Just(func(a, b, c, d));
                }
            }
        }
    }
}, $elm$core$Maybe$map4 = F5($elm$core$Maybe$map4_fn);
var $elm$project_metadata_utils$Elm$Constraint$LessOrEq = 1;
var $elm$project_metadata_utils$Elm$Constraint$LessThan = 0;
var $elm$project_metadata_utils$Elm$Constraint$opFromString = function (op) {
    switch (op) {
        case "<":
            return $elm$core$Maybe$Just(0);
        case "<=":
            return $elm$core$Maybe$Just(1);
        default:
            return $elm$core$Maybe$Nothing;
    }
};
var $elm$project_metadata_utils$Elm$Constraint$fromString = function (string) {
    var _v0 = $elm$core$String$split_fn(" ", string);
    if ((((((_v0.b && _v0.b.b) && _v0.b.b.b) && (_v0.b.b.a === "v")) && _v0.b.b.b.b) && _v0.b.b.b.b.b) && (!_v0.b.b.b.b.b.b)) {
        var lower = _v0.a;
        var _v1 = _v0.b;
        var lop = _v1.a;
        var _v2 = _v1.b;
        var _v3 = _v2.b;
        var uop = _v3.a;
        var _v4 = _v3.b;
        var upper = _v4.a;
        return $elm$core$Maybe$andThen_fn($elm$project_metadata_utils$Elm$Constraint$checkConstraint, $elm$core$Maybe$map4_fn($elm$project_metadata_utils$Elm$Constraint$Constraint, $elm$project_metadata_utils$Elm$Version$fromString(lower), $elm$project_metadata_utils$Elm$Constraint$opFromString(lop), $elm$project_metadata_utils$Elm$Constraint$opFromString(uop), $elm$project_metadata_utils$Elm$Version$fromString(upper)));
    }
    else {
        return $elm$core$Maybe$Nothing;
    }
};
var $elm$project_metadata_utils$Elm$Constraint$decoderHelp = function (string) {
    var _v0 = $elm$project_metadata_utils$Elm$Constraint$fromString(string);
    if (!_v0.$) {
        var constraint = _v0.a;
        return $elm$json$Json$Decode$succeed(constraint);
    }
    else {
        return $elm$json$Json$Decode$fail("I need a valid constraint like \"1.0.0 <= v < 2.0.0\"");
    }
};
var $elm$project_metadata_utils$Elm$Constraint$decoder = _Json_andThen_fn($elm$project_metadata_utils$Elm$Constraint$decoderHelp, $elm$json$Json$Decode$string);
var $elm$core$Dict$RBEmpty_elm_builtin = { $: -2 };
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$core$Dict$Black = 1;
var $elm$core$Dict$RBNode_elm_builtin_fn = function (a, b, c, d, e) {
    return { $: -1, a: a, b: b, c: c, d: d, e: e };
}, $elm$core$Dict$RBNode_elm_builtin = F5($elm$core$Dict$RBNode_elm_builtin_fn);
var $elm$core$Dict$Red = 0;
var $elm$core$Dict$balance_fn = function (color, key, value, left, right) {
    if ((right.$ === -1) && (!right.a)) {
        var _v1 = right.a;
        var rK = right.b;
        var rV = right.c;
        var rLeft = right.d;
        var rRight = right.e;
        if ((left.$ === -1) && (!left.a)) {
            var _v3 = left.a;
            var lK = left.b;
            var lV = left.c;
            var lLeft = left.d;
            var lRight = left.e;
            return $elm$core$Dict$RBNode_elm_builtin_fn(0, key, value, $elm$core$Dict$RBNode_elm_builtin_fn(1, lK, lV, lLeft, lRight), $elm$core$Dict$RBNode_elm_builtin_fn(1, rK, rV, rLeft, rRight));
        }
        else {
            return $elm$core$Dict$RBNode_elm_builtin_fn(color, rK, rV, $elm$core$Dict$RBNode_elm_builtin_fn(0, key, value, left, rLeft), rRight);
        }
    }
    else {
        if ((((left.$ === -1) && (!left.a)) && (left.d.$ === -1)) && (!left.d.a)) {
            var _v5 = left.a;
            var lK = left.b;
            var lV = left.c;
            var _v6 = left.d;
            var _v7 = _v6.a;
            var llK = _v6.b;
            var llV = _v6.c;
            var llLeft = _v6.d;
            var llRight = _v6.e;
            var lRight = left.e;
            return $elm$core$Dict$RBNode_elm_builtin_fn(0, lK, lV, $elm$core$Dict$RBNode_elm_builtin_fn(1, llK, llV, llLeft, llRight), $elm$core$Dict$RBNode_elm_builtin_fn(1, key, value, lRight, right));
        }
        else {
            return $elm$core$Dict$RBNode_elm_builtin_fn(color, key, value, left, right);
        }
    }
}, $elm$core$Dict$balance = F5($elm$core$Dict$balance_fn);
var $elm$core$Dict$insertHelp_fn = function (key, value, dict) {
    if (dict.$ === -2) {
        return $elm$core$Dict$RBNode_elm_builtin_fn(0, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
    }
    else {
        var nColor = dict.a;
        var nKey = dict.b;
        var nValue = dict.c;
        var nLeft = dict.d;
        var nRight = dict.e;
        var _v1 = _Utils_compare_fn(key, nKey);
        switch (_v1) {
            case 0:
                return $elm$core$Dict$balance_fn(nColor, nKey, nValue, $elm$core$Dict$insertHelp_fn(key, value, nLeft), nRight);
            case 1:
                return $elm$core$Dict$RBNode_elm_builtin_fn(nColor, nKey, value, nLeft, nRight);
            default:
                return $elm$core$Dict$balance_fn(nColor, nKey, nValue, nLeft, $elm$core$Dict$insertHelp_fn(key, value, nRight));
        }
    }
}, $elm$core$Dict$insertHelp = F3($elm$core$Dict$insertHelp_fn);
var $elm$core$Dict$insert_fn = function (key, value, dict) {
    var _v0 = $elm$core$Dict$insertHelp_fn(key, value, dict);
    if ((_v0.$ === -1) && (!_v0.a)) {
        var _v1 = _v0.a;
        var k = _v0.b;
        var v = _v0.c;
        var l = _v0.d;
        var r = _v0.e;
        return $elm$core$Dict$RBNode_elm_builtin_fn(1, k, v, l, r);
    }
    else {
        var x = _v0;
        return x;
    }
}, $elm$core$Dict$insert = F3($elm$core$Dict$insert_fn);
var $elm$core$Dict$fromList = function (assocs) {
    return $elm$core$List$foldl_fn_unwrapped(function (_v0, dict) {
        var key = _v0.a;
        var value = _v0.b;
        return $elm$core$Dict$insert_fn(key, value, dict);
    }, $elm$core$Dict$empty, assocs);
};
var $elm$project_metadata_utils$Elm$License$License_fn = function (a, b) {
    return { $: 0, a: a, b: b };
}, $elm$project_metadata_utils$Elm$License$License = F2($elm$project_metadata_utils$Elm$License$License_fn);
var $elm$project_metadata_utils$Elm$License$osiApprovedSpdxLicenses = _List_fromArray([
    $elm$project_metadata_utils$Elm$License$License_fn("AFL-1.1", "Academic Free License v1.1"),
    $elm$project_metadata_utils$Elm$License$License_fn("AFL-1.2", "Academic Free License v1.2"),
    $elm$project_metadata_utils$Elm$License$License_fn("AFL-2.0", "Academic Free License v2.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("AFL-2.1", "Academic Free License v2.1"),
    $elm$project_metadata_utils$Elm$License$License_fn("AFL-3.0", "Academic Free License v3.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("APL-1.0", "Adaptive Public License 1.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("Apache-1.1", "Apache License 1.1"),
    $elm$project_metadata_utils$Elm$License$License_fn("Apache-2.0", "Apache License 2.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("APSL-1.0", "Apple Public Source License 1.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("APSL-1.1", "Apple Public Source License 1.1"),
    $elm$project_metadata_utils$Elm$License$License_fn("APSL-1.2", "Apple Public Source License 1.2"),
    $elm$project_metadata_utils$Elm$License$License_fn("APSL-2.0", "Apple Public Source License 2.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("Artistic-1.0", "Artistic License 1.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("Artistic-1.0-Perl", "Artistic License 1.0 (Perl)"),
    $elm$project_metadata_utils$Elm$License$License_fn("Artistic-1.0-cl8", "Artistic License 1.0 w/clause 8"),
    $elm$project_metadata_utils$Elm$License$License_fn("Artistic-2.0", "Artistic License 2.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("AAL", "Attribution Assurance License"),
    $elm$project_metadata_utils$Elm$License$License_fn("BSL-1.0", "Boost Software License 1.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("BSD-2-Clause", "BSD 2-clause \"Simplified\" License"),
    $elm$project_metadata_utils$Elm$License$License_fn("BSD-3-Clause", "BSD 3-clause \"New\" or \"Revised\" License"),
    $elm$project_metadata_utils$Elm$License$License_fn("0BSD", "BSD Zero Clause License"),
    $elm$project_metadata_utils$Elm$License$License_fn("CECILL-2.1", "CeCILL Free Software License Agreement v2.1"),
    $elm$project_metadata_utils$Elm$License$License_fn("CNRI-Python", "CNRI Python License"),
    $elm$project_metadata_utils$Elm$License$License_fn("CDDL-1.0", "Common Development and Distribution License 1.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("CPAL-1.0", "Common Public Attribution License 1.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("CPL-1.0", "Common Public License 1.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("CATOSL-1.1", "Computer Associates Trusted Open Source License 1.1"),
    $elm$project_metadata_utils$Elm$License$License_fn("CUA-OPL-1.0", "CUA Office Public License v1.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("EPL-1.0", "Eclipse Public License 1.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("ECL-1.0", "Educational Community License v1.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("ECL-2.0", "Educational Community License v2.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("EFL-1.0", "Eiffel Forum License v1.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("EFL-2.0", "Eiffel Forum License v2.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("Entessa", "Entessa Public License v1.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("EUDatagrid", "EU DataGrid Software License"),
    $elm$project_metadata_utils$Elm$License$License_fn("EUPL-1.1", "European Union Public License 1.1"),
    $elm$project_metadata_utils$Elm$License$License_fn("Fair", "Fair License"),
    $elm$project_metadata_utils$Elm$License$License_fn("Frameworx-1.0", "Frameworx Open License 1.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("AGPL-3.0", "GNU Affero General Public License v3.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("GPL-2.0", "GNU General Public License v2.0 only"),
    $elm$project_metadata_utils$Elm$License$License_fn("GPL-3.0", "GNU General Public License v3.0 only"),
    $elm$project_metadata_utils$Elm$License$License_fn("LGPL-2.1", "GNU Lesser General Public License v2.1 only"),
    $elm$project_metadata_utils$Elm$License$License_fn("LGPL-3.0", "GNU Lesser General Public License v3.0 only"),
    $elm$project_metadata_utils$Elm$License$License_fn("LGPL-2.0", "GNU Library General Public License v2 only"),
    $elm$project_metadata_utils$Elm$License$License_fn("HPND", "Historic Permission Notice and Disclaimer"),
    $elm$project_metadata_utils$Elm$License$License_fn("IPL-1.0", "IBM Public License v1.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("Intel", "Intel Open Source License"),
    $elm$project_metadata_utils$Elm$License$License_fn("IPA", "IPA Font License"),
    $elm$project_metadata_utils$Elm$License$License_fn("ISC", "ISC License"),
    $elm$project_metadata_utils$Elm$License$License_fn("LPPL-1.3c", "LaTeX Project Public License v1.3c"),
    $elm$project_metadata_utils$Elm$License$License_fn("LiLiQ-P-1.1", "Licence Libre du Qu\u00E9bec \u2013 Permissive version 1.1"),
    $elm$project_metadata_utils$Elm$License$License_fn("LiLiQ-Rplus-1.1", "Licence Libre du Qu\u00E9bec \u2013 R\u00E9ciprocit\u00E9 forte version 1.1"),
    $elm$project_metadata_utils$Elm$License$License_fn("LiLiQ-R-1.1", "Licence Libre du Qu\u00E9bec \u2013 R\u00E9ciprocit\u00E9 version 1.1"),
    $elm$project_metadata_utils$Elm$License$License_fn("LPL-1.02", "Lucent Public License v1.02"),
    $elm$project_metadata_utils$Elm$License$License_fn("LPL-1.0", "Lucent Public License Version 1.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("MS-PL", "Microsoft Public License"),
    $elm$project_metadata_utils$Elm$License$License_fn("MS-RL", "Microsoft Reciprocal License"),
    $elm$project_metadata_utils$Elm$License$License_fn("MirOS", "MirOS Licence"),
    $elm$project_metadata_utils$Elm$License$License_fn("MIT", "MIT License"),
    $elm$project_metadata_utils$Elm$License$License_fn("Motosoto", "Motosoto License"),
    $elm$project_metadata_utils$Elm$License$License_fn("MPL-1.0", "Mozilla Public License 1.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("MPL-1.1", "Mozilla Public License 1.1"),
    $elm$project_metadata_utils$Elm$License$License_fn("MPL-2.0", "Mozilla Public License 2.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("MPL-2.0-no-copyleft-exception", "Mozilla Public License 2.0 (no copyleft exception)"),
    $elm$project_metadata_utils$Elm$License$License_fn("Multics", "Multics License"),
    $elm$project_metadata_utils$Elm$License$License_fn("NASA-1.3", "NASA Open Source Agreement 1.3"),
    $elm$project_metadata_utils$Elm$License$License_fn("Naumen", "Naumen Public License"),
    $elm$project_metadata_utils$Elm$License$License_fn("NGPL", "Nethack General Public License"),
    $elm$project_metadata_utils$Elm$License$License_fn("Nokia", "Nokia Open Source License"),
    $elm$project_metadata_utils$Elm$License$License_fn("NPOSL-3.0", "Non-Profit Open Software License 3.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("NTP", "NTP License"),
    $elm$project_metadata_utils$Elm$License$License_fn("OCLC-2.0", "OCLC Research Public License 2.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("OGTSL", "Open Group Test Suite License"),
    $elm$project_metadata_utils$Elm$License$License_fn("OSL-1.0", "Open Software License 1.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("OSL-2.0", "Open Software License 2.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("OSL-2.1", "Open Software License 2.1"),
    $elm$project_metadata_utils$Elm$License$License_fn("OSL-3.0", "Open Software License 3.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("OSET-PL-2.1", "OSET Public License version 2.1"),
    $elm$project_metadata_utils$Elm$License$License_fn("PHP-3.0", "PHP License v3.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("PostgreSQL", "PostgreSQL License"),
    $elm$project_metadata_utils$Elm$License$License_fn("Python-2.0", "Python License 2.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("QPL-1.0", "Q Public License 1.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("RPSL-1.0", "RealNetworks Public Source License v1.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("RPL-1.1", "Reciprocal Public License 1.1"),
    $elm$project_metadata_utils$Elm$License$License_fn("RPL-1.5", "Reciprocal Public License 1.5"),
    $elm$project_metadata_utils$Elm$License$License_fn("RSCPL", "Ricoh Source Code Public License"),
    $elm$project_metadata_utils$Elm$License$License_fn("OFL-1.1", "SIL Open Font License 1.1"),
    $elm$project_metadata_utils$Elm$License$License_fn("SimPL-2.0", "Simple Public License 2.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("Sleepycat", "Sleepycat License"),
    $elm$project_metadata_utils$Elm$License$License_fn("SISSL", "Sun Industry Standards Source License v1.1"),
    $elm$project_metadata_utils$Elm$License$License_fn("SPL-1.0", "Sun Public License v1.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("Watcom-1.0", "Sybase Open Watcom Public License 1.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("UPL-1.0", "Universal Permissive License v1.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("NCSA", "University of Illinois/NCSA Open Source License"),
    $elm$project_metadata_utils$Elm$License$License_fn("VSL-1.0", "Vovida Software License v1.0"),
    $elm$project_metadata_utils$Elm$License$License_fn("W3C", "W3C Software Notice and License (2002-12-31)"),
    $elm$project_metadata_utils$Elm$License$License_fn("Xnet", "X.Net License"),
    $elm$project_metadata_utils$Elm$License$License_fn("Zlib", "zlib License"),
    $elm$project_metadata_utils$Elm$License$License_fn("ZPL-2.0", "Zope Public License 2.0")
]);
var $elm$project_metadata_utils$Elm$License$spdxDict = $elm$core$Dict$fromList($elm$core$List$map_fn(function (license) {
    var abbr = license.a;
    return _Utils_Tuple2(abbr, license);
}, $elm$project_metadata_utils$Elm$License$osiApprovedSpdxLicenses));
var $elm$project_metadata_utils$Elm$License$fromString = function (string) {
    return $elm$core$Dict$get_fn(string, $elm$project_metadata_utils$Elm$License$spdxDict);
};
var $elm$project_metadata_utils$Elm$License$decoderHelp = function (string) {
    var _v0 = $elm$project_metadata_utils$Elm$License$fromString(string);
    if (!_v0.$) {
        var license = _v0.a;
        return $elm$json$Json$Decode$succeed(license);
    }
    else {
        return $elm$json$Json$Decode$fail("I need an OSI approved license in SPDX format <https://spdx.org/licenses/>");
    }
};
var $elm$project_metadata_utils$Elm$License$decoder = _Json_andThen_fn($elm$project_metadata_utils$Elm$License$decoderHelp, $elm$json$Json$Decode$string);
var $elm$project_metadata_utils$Elm$Package$decoderHelp = function (string) {
    var _v0 = $elm$project_metadata_utils$Elm$Package$fromString(string);
    if (!_v0.$) {
        var name = _v0.a;
        return $elm$json$Json$Decode$succeed(name);
    }
    else {
        return $elm$json$Json$Decode$fail("I need a valid package name like \"elm/core\"");
    }
};
var $elm$project_metadata_utils$Elm$Package$decoder = _Json_andThen_fn($elm$project_metadata_utils$Elm$Package$decoderHelp, $elm$json$Json$Decode$string);
var $elm$project_metadata_utils$Elm$Project$ExposedDict = function (a) {
    return { $: 1, a: a };
};
var $elm$project_metadata_utils$Elm$Project$ExposedList = function (a) {
    return { $: 0, a: a };
};
var $elm$core$String$length = _String_length;
var $elm$project_metadata_utils$Elm$Project$checkHeaders = function (dict) {
    checkHeaders: while (true) {
        if (!dict.b) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var _v1 = dict.a;
            var header = _v1.a;
            var others = dict.b;
            if ($elm$core$String$length(header) < 20) {
                var $temp$dict = others;
                dict = $temp$dict;
                continue checkHeaders;
            }
            else {
                return $elm$core$Maybe$Just(header);
            }
        }
    }
};
var $elm$project_metadata_utils$Elm$Project$checkExposedDict = function (dict) {
    var _v0 = $elm$project_metadata_utils$Elm$Project$checkHeaders(dict);
    if (_v0.$ === 1) {
        return $elm$json$Json$Decode$succeed(dict);
    }
    else {
        var badHeader = _v0.a;
        return $elm$json$Json$Decode$fail("The \"" + (badHeader + "\" header is too long. Twenty characters max!"));
    }
};
var $elm$project_metadata_utils$Elm$Module$Name = $elm$core$Basics$identity;
var $elm$core$List$any_fn = function (isOkay, list) {
    any: while (true) {
        if (!list.b) {
            return false;
        }
        else {
            var x = list.a;
            var xs = list.b;
            if (isOkay(x)) {
                return true;
            }
            else {
                var $temp$isOkay = isOkay, $temp$list = xs;
                isOkay = $temp$isOkay;
                list = $temp$list;
                continue any;
            }
        }
    }
}, $elm$core$List$any = F2($elm$core$List$any_fn);
var $elm$core$Basics$composeL_fn = function (g, f, x) {
    return g(f(x));
}, $elm$core$Basics$composeL = F3($elm$core$Basics$composeL_fn);
var $elm$core$List$all_fn = function (isOkay, list) {
    all: while (true) {
        if (!list.b) {
            return true;
        }
        else {
            var x = list.a;
            if (!isOkay(x)) {
                return false;
            }
            list = list.b;
            continue all;
        }
    }
}, $elm$core$List$all = F2($elm$core$List$all_fn);
var $elm$project_metadata_utils$Elm$Module$isInner = function (_char) {
    return $elm$core$Char$isAlphaNum(_char) || (_char === "_");
};
var $elm$project_metadata_utils$Elm$Module$isGoodChunk = function (chunk) {
    var _v0 = $elm$core$String$uncons(chunk);
    if (_v0.$ === 1) {
        return false;
    }
    else {
        var _v1 = _v0.a;
        var _char = _v1.a;
        var rest = _v1.b;
        return $elm$core$Char$isUpper(_char) && _String_all_fn($elm$project_metadata_utils$Elm$Module$isInner, rest);
    }
};
var $elm$project_metadata_utils$Elm$Module$fromString = function (string) {
    return $elm$core$List$all_fn($elm$project_metadata_utils$Elm$Module$isGoodChunk, $elm$core$String$split_fn(".", string)) ? $elm$core$Maybe$Just(string) : $elm$core$Maybe$Nothing;
};
var $elm$project_metadata_utils$Elm$Module$decoderHelp = function (string) {
    var _v0 = $elm$project_metadata_utils$Elm$Module$fromString(string);
    if (!_v0.$) {
        var name = _v0.a;
        return $elm$json$Json$Decode$succeed(name);
    }
    else {
        return $elm$json$Json$Decode$fail("I need a valid module name like \"Json.Decode\"");
    }
};
var $elm$project_metadata_utils$Elm$Module$decoder = _Json_andThen_fn($elm$project_metadata_utils$Elm$Module$decoderHelp, $elm$json$Json$Decode$string);
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $elm$project_metadata_utils$Elm$Project$exposedDecoder = $elm$json$Json$Decode$oneOf(_List_fromArray([
    _Json_map1_fn($elm$project_metadata_utils$Elm$Project$ExposedList, $elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Module$decoder)),
    _Json_map1_fn($elm$project_metadata_utils$Elm$Project$ExposedDict, _Json_andThen_fn($elm$project_metadata_utils$Elm$Project$checkExposedDict, $elm$json$Json$Decode$keyValuePairs($elm$json$Json$Decode$list($elm$project_metadata_utils$Elm$Module$decoder))))
]));
var $elm$json$Json$Decode$map8 = _Json_map8;
var $elm$project_metadata_utils$Elm$Project$summaryCheck = function (summary) {
    return ($elm$core$String$length(summary) < 80) ? $elm$json$Json$Decode$succeed(summary) : $elm$json$Json$Decode$fail("The \"summary\" field must have fewer than 80 characters.");
};
var $elm$project_metadata_utils$Elm$Project$summaryDecoder = _Json_andThen_fn($elm$project_metadata_utils$Elm$Project$summaryCheck, $elm$json$Json$Decode$string);
var $elm$project_metadata_utils$Elm$Project$packageDecoder = _Json_map8_fn($elm$project_metadata_utils$Elm$Project$PackageInfo, _Json_decodeField_fn("name", $elm$project_metadata_utils$Elm$Package$decoder), _Json_decodeField_fn("summary", $elm$project_metadata_utils$Elm$Project$summaryDecoder), _Json_decodeField_fn("license", $elm$project_metadata_utils$Elm$License$decoder), _Json_decodeField_fn("version", $elm$project_metadata_utils$Elm$Version$decoder), _Json_decodeField_fn("exposed-modules", $elm$project_metadata_utils$Elm$Project$exposedDecoder), _Json_decodeField_fn("dependencies", $elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Constraint$decoder)), _Json_decodeField_fn("test-dependencies", $elm$project_metadata_utils$Elm$Project$depsDecoder($elm$project_metadata_utils$Elm$Constraint$decoder)), _Json_decodeField_fn("elm-version", $elm$project_metadata_utils$Elm$Constraint$decoder));
var $elm$project_metadata_utils$Elm$Project$decoderHelp = function (tipe) {
    switch (tipe) {
        case "application":
            return _Json_map1_fn($elm$project_metadata_utils$Elm$Project$Application, $elm$project_metadata_utils$Elm$Project$applicationDecoder);
        case "package":
            return _Json_map1_fn($elm$project_metadata_utils$Elm$Project$Package, $elm$project_metadata_utils$Elm$Project$packageDecoder);
        default:
            var other = tipe;
            return $elm$json$Json$Decode$fail("The \"type\" field must be either \"application\" or \"package\", so " + ("\"" + (other + "\" is not acceptable.")));
    }
};
var $elm$project_metadata_utils$Elm$Project$decoder = _Json_andThen_fn($elm$project_metadata_utils$Elm$Project$decoderHelp, _Json_decodeField_fn("type", $elm$json$Json$Decode$string));
var $lue_bird$elm_state_interface_experimental$Node$fileRequest = function (path) {
    return $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle($lue_bird$elm_state_interface_experimental$Node$FileRequest({ G: $elm$core$Basics$identity, q: path }));
};
var $elm$bytes$Bytes$Decode$Decoder = $elm$core$Basics$identity;
var $elm$bytes$Bytes$Decode$string = function (n) {
    return _Bytes_read_string(n);
};
var $elm$bytes$Bytes$width = _Bytes_width;
var $author$project$Main$nodeElmJsonRequest = $lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap_fn(function (elmJsonBytesOrError) {
    if (elmJsonBytesOrError.$ === 1) {
        var fileReadError = elmJsonBytesOrError.a;
        return $elm$core$Result$Err("elm.json couldn't be read because " + fileReadError.b6);
    }
    else {
        var elmJsonBytes = elmJsonBytesOrError.a;
        var _v1 = $elm$bytes$Bytes$Decode$decode_fn($elm$bytes$Bytes$Decode$string($elm$bytes$Bytes$width(elmJsonBytes)), elmJsonBytes);
        if (_v1.$ === 1) {
            return $elm$core$Result$Err("elm.json bytes could not be decoded into UTF-8 String");
        }
        else {
            var elmJsonString = _v1.a;
            var _v2 = _Json_runOnString_fn($elm$project_metadata_utils$Elm$Project$decoder, elmJsonString);
            if (_v2.$ === 1) {
                var jsonDecodeError = _v2.a;
                return $elm$core$Result$Err("elm.json failed to parse due to " + $elm$json$Json$Decode$errorToString(jsonDecodeError));
            }
            else {
                var elmJson = _v2.a;
                return $elm$core$Result$Ok(elmJson);
            }
        }
    }
}, $lue_bird$elm_state_interface_experimental$Node$fileRequest("elm.json"));
var $author$project$Main$packageSourceDirectoryPath = function (info) {
    return info.cN + ("/0.19.1/packages/" + (info.et + ("/" + (info.eu + "/src"))));
};
var $author$project$Main$Finished = function (a) {
    return { $: 5, a: a };
};
var $stil4m$elm_syntax$Rope$empty = $elm$core$Maybe$Nothing;
var $stil4m$elm_syntax$Elm$Syntax$Declaration$AliasDeclaration = function (a) {
    return { $: 1, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Declaration$CustomTypeDeclaration = function (a) {
    return { $: 2, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration = function (a) {
    return { $: 0, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn = function (a, b) {
    return { $: 0, a: a, b: b };
}, $stil4m$elm_syntax$Elm$Syntax$Node$Node = F2($stil4m$elm_syntax$Elm$Syntax$Node$Node_fn);
var $stil4m$elm_syntax$Elm$Syntax$Declaration$PortDeclaration = function (a) {
    return { $: 3, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Signature$Signature_fn = function (name, typeAnnotation) {
    return { a: name, ci: typeAnnotation };
}, $stil4m$elm_syntax$Elm$Syntax$Signature$Signature = F2($stil4m$elm_syntax$Elm$Syntax$Signature$Signature_fn);
var $stil4m$elm_syntax$Elm$Syntax$Node$combine_fn = function (f, a, b) {
    var start = a.a.cf;
    var end = b.a.b_;
    return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: end, cf: start }, A2(f, a, b));
}, $stil4m$elm_syntax$Elm$Syntax$Node$combine_fn_unwrapped = function (f, a, b) {
    var start = a.a.cf;
    var end = b.a.b_;
    return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: end, cf: start }, f(a, b));
}, $stil4m$elm_syntax$Elm$Syntax$Node$combine = F3($stil4m$elm_syntax$Elm$Syntax$Node$combine_fn);
var $stil4m$elm_syntax$ParserFast$Done = function (a) {
    return { $: 1, a: a };
};
var $stil4m$elm_syntax$ParserFast$Loop = function (a) {
    return { $: 0, a: a };
};
var $stil4m$elm_syntax$ParserFast$Bad_fn = function (a, b) {
    return { $: 1, a: a, b: b };
}, $stil4m$elm_syntax$ParserFast$Bad = F2($stil4m$elm_syntax$ParserFast$Bad_fn);
var $stil4m$elm_syntax$ParserFast$ExpectingAnyChar_fn = function (a, b) {
    return { $: 2, a: a, b: b };
}, $stil4m$elm_syntax$ParserFast$ExpectingAnyChar = F2($stil4m$elm_syntax$ParserFast$ExpectingAnyChar_fn);
var $stil4m$elm_syntax$ParserFast$Good_fn = function (a, b) {
    return { $: 0, a: a, b: b };
}, $stil4m$elm_syntax$ParserFast$Good = F2($stil4m$elm_syntax$ParserFast$Good_fn);
var $stil4m$elm_syntax$ParserFast$Parser = $elm$core$Basics$identity;
var $elm$core$Basics$isNaN = _Basics_isNaN;
var $stil4m$elm_syntax$Char$Extra$isUtf16Surrogate = function (c) {
    return $elm$core$Basics$isNaN($elm$core$Char$toCode(c));
};
var $stil4m$elm_syntax$ParserFast$charStringIsUtf16HighSurrogate = function (charString) {
    return _String_any_fn($stil4m$elm_syntax$Char$Extra$isUtf16Surrogate, charString);
};
var $elm$core$Basics$negate = function (n) {
    return -n;
};
var $elm$core$String$slice = _String_slice;
var $stil4m$elm_syntax$ParserFast$charOrEnd_fn = function (offset, string) {
    var actualChar = _String_slice_fn(offset, offset + 1, string);
    switch (actualChar) {
        case "\n":
            return -2;
        case "":
            return -1;
        default:
            return $stil4m$elm_syntax$ParserFast$charStringIsUtf16HighSurrogate(actualChar) ? (offset + 2) : (offset + 1);
    }
}, $stil4m$elm_syntax$ParserFast$charOrEnd = F2($stil4m$elm_syntax$ParserFast$charOrEnd_fn);
var $stil4m$elm_syntax$ParserFast$skipWhileHelp_fn = function (isGood, offset, row, col, src, indent) {
    skipWhileHelp: while (true) {
        var actualChar = _String_slice_fn(offset, offset + 1, src);
        if (_String_any_fn(isGood, actualChar)) {
            if (actualChar === "\n") {
                var $temp$isGood = isGood, $temp$offset = offset + 1, $temp$row = row + 1, $temp$col = 1, $temp$src = src, $temp$indent = indent;
                isGood = $temp$isGood;
                offset = $temp$offset;
                row = $temp$row;
                col = $temp$col;
                src = $temp$src;
                indent = $temp$indent;
                continue skipWhileHelp;
            }
            else {
                var $temp$isGood = isGood, $temp$offset = offset + 1, $temp$row = row, $temp$col = col + 1, $temp$src = src, $temp$indent = indent;
                isGood = $temp$isGood;
                offset = $temp$offset;
                row = $temp$row;
                col = $temp$col;
                src = $temp$src;
                indent = $temp$indent;
                continue skipWhileHelp;
            }
        }
        else {
            if ($stil4m$elm_syntax$ParserFast$charStringIsUtf16HighSurrogate(actualChar) && _String_any_fn(isGood, _String_slice_fn(offset, offset + 2, src))) {
                var $temp$isGood = isGood, $temp$offset = offset + 2, $temp$row = row, $temp$col = col + 1, $temp$src = src, $temp$indent = indent;
                isGood = $temp$isGood;
                offset = $temp$offset;
                row = $temp$row;
                col = $temp$col;
                src = $temp$src;
                indent = $temp$indent;
                continue skipWhileHelp;
            }
            else {
                return { dW: col, ac: indent, J: offset, bu: row, H: src };
            }
        }
    }
}, $stil4m$elm_syntax$ParserFast$skipWhileHelp = F6($stil4m$elm_syntax$ParserFast$skipWhileHelp_fn);
var $stil4m$elm_syntax$ParserFast$anyCharFollowedByWhileMap_fn = function (consumedStringToRes, afterFirstIsOkay) {
    return function (s) {
        var firstOffset = $stil4m$elm_syntax$ParserFast$charOrEnd_fn(s.J, s.H);
        if (firstOffset === -1) {
            return $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingAnyChar_fn(s.bu, s.dW));
        }
        else {
            var s1 = firstOffset === -2 ? $stil4m$elm_syntax$ParserFast$skipWhileHelp_fn(afterFirstIsOkay, s.J + 1, s.bu + 1, 1, s.H, s.ac) : $stil4m$elm_syntax$ParserFast$skipWhileHelp_fn(afterFirstIsOkay, firstOffset, s.bu, s.dW + 1, s.H, s.ac);
            return $stil4m$elm_syntax$ParserFast$Good_fn(consumedStringToRes(_String_slice_fn(s.J, s1.J, s.H)), s1);
        }
    };
}, $stil4m$elm_syntax$ParserFast$anyCharFollowedByWhileMap = F2($stil4m$elm_syntax$ParserFast$anyCharFollowedByWhileMap_fn);
var $elm$core$String$cons = _String_cons;
var $stil4m$elm_syntax$ParserFast$loopHelp_fn = function (committedSoFar, state, element, reduce, s0) {
    loopHelp: while (true) {
        var parseElement = element;
        var _v0 = parseElement(s0);
        if (!_v0.$) {
            var step = _v0.a;
            var s1 = _v0.b;
            var _v1 = A2(reduce, step, state);
            if (!_v1.$) {
                var newState = _v1.a;
                var $temp$committedSoFar = true, $temp$state = newState, $temp$element = element, $temp$reduce = reduce, $temp$s0 = s1;
                committedSoFar = $temp$committedSoFar;
                state = $temp$state;
                element = $temp$element;
                reduce = $temp$reduce;
                s0 = $temp$s0;
                continue loopHelp;
            }
            else {
                var result = _v1.a;
                return $stil4m$elm_syntax$ParserFast$Good_fn(result, s1);
            }
        }
        else {
            var elementCommitted = _v0.a;
            var x = _v0.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committedSoFar || elementCommitted, x);
        }
    }
}, $stil4m$elm_syntax$ParserFast$loopHelp_fn_unwrapped = function (committedSoFar, state, element, reduce, s0) {
    loopHelp: while (true) {
        var parseElement = element;
        var _v0 = parseElement(s0);
        if (!_v0.$) {
            var step = _v0.a;
            var s1 = _v0.b;
            var _v1 = reduce(step, state);
            if (!_v1.$) {
                var newState = _v1.a;
                var $temp$committedSoFar = true, $temp$state = newState, $temp$element = element, $temp$reduce = reduce, $temp$s0 = s1;
                committedSoFar = $temp$committedSoFar;
                state = $temp$state;
                element = $temp$element;
                reduce = $temp$reduce;
                s0 = $temp$s0;
                continue loopHelp;
            }
            else {
                var result = _v1.a;
                return $stil4m$elm_syntax$ParserFast$Good_fn(result, s1);
            }
        }
        else {
            var elementCommitted = _v0.a;
            var x = _v0.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committedSoFar || elementCommitted, x);
        }
    }
}, $stil4m$elm_syntax$ParserFast$loopHelp = F5($stil4m$elm_syntax$ParserFast$loopHelp_fn);
var $stil4m$elm_syntax$ParserFast$loop_fn = function (state, element, reduce) {
    return function (s) {
        return $stil4m$elm_syntax$ParserFast$loopHelp_fn(false, state, element, reduce, s);
    };
}, $stil4m$elm_syntax$ParserFast$loop = F3($stil4m$elm_syntax$ParserFast$loop_fn);
var $stil4m$elm_syntax$ParserFast$map2WithRange_fn = function (func, _v0, _v1) {
    var parseA = _v0;
    var parseB = _v1;
    return function (s0) {
        var _v2 = parseA(s0);
        if (_v2.$ === 1) {
            var committed = _v2.a;
            var x = _v2.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v2.a;
            var s1 = _v2.b;
            var _v3 = parseB(s1);
            if (_v3.$ === 1) {
                var x = _v3.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v3.a;
                var s2 = _v3.b;
                return $stil4m$elm_syntax$ParserFast$Good_fn(A3(func, {
                    b_: { cJ: s2.dW, bu: s2.bu },
                    cf: { cJ: s0.dW, bu: s0.bu }
                }, a, b), s2);
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map2WithRange_fn_unwrapped = function (func, _v0, _v1) {
    var parseA = _v0;
    var parseB = _v1;
    return function (s0) {
        var _v2 = parseA(s0);
        if (_v2.$ === 1) {
            var committed = _v2.a;
            var x = _v2.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v2.a;
            var s1 = _v2.b;
            var _v3 = parseB(s1);
            if (_v3.$ === 1) {
                var x = _v3.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v3.a;
                var s2 = _v3.b;
                return $stil4m$elm_syntax$ParserFast$Good_fn(func({
                    b_: { cJ: s2.dW, bu: s2.bu },
                    cf: { cJ: s0.dW, bu: s0.bu }
                }, a, b), s2);
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map2WithRange = F3($stil4m$elm_syntax$ParserFast$map2WithRange_fn);
var $elm$core$Basics$neq = _Utils_notEqual;
var $stil4m$elm_syntax$ParserFast$ExpectingOneOf_fn = function (a, b, c) {
    return { $: 7, a: a, b: b, c: c };
}, $stil4m$elm_syntax$ParserFast$ExpectingOneOf = F3($stil4m$elm_syntax$ParserFast$ExpectingOneOf_fn);
var $stil4m$elm_syntax$ParserFast$oneOf2_fn = function (_v0, _v1) {
    var attemptFirst = _v0;
    var attemptSecond = _v1;
    return function (s) {
        var _v2 = attemptFirst(s);
        if (!_v2.$) {
            var firstGood = _v2;
            return firstGood;
        }
        else {
            var firstBad = _v2;
            var firstCommitted = firstBad.a;
            var firstX = firstBad.b;
            if (firstCommitted) {
                return firstBad;
            }
            else {
                var _v3 = attemptSecond(s);
                if (!_v3.$) {
                    var secondGood = _v3;
                    return secondGood;
                }
                else {
                    var secondBad = _v3;
                    var secondCommitted = secondBad.a;
                    var secondX = secondBad.b;
                    return secondCommitted ? secondBad : $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingOneOf_fn(firstX, secondX, _List_Nil));
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$oneOf2 = F2($stil4m$elm_syntax$ParserFast$oneOf2_fn);
var $stil4m$elm_syntax$ParserFast$oneOf3_fn = function (_v0, _v1, _v2) {
    var attemptFirst = _v0;
    var attemptSecond = _v1;
    var attemptThird = _v2;
    return function (s) {
        var _v3 = attemptFirst(s);
        if (!_v3.$) {
            var firstGood = _v3;
            return firstGood;
        }
        else {
            var firstBad = _v3;
            var firstCommitted = firstBad.a;
            var firstX = firstBad.b;
            if (firstCommitted) {
                return firstBad;
            }
            else {
                var _v4 = attemptSecond(s);
                if (!_v4.$) {
                    var secondGood = _v4;
                    return secondGood;
                }
                else {
                    var secondBad = _v4;
                    var secondCommitted = secondBad.a;
                    var secondX = secondBad.b;
                    if (secondCommitted) {
                        return secondBad;
                    }
                    else {
                        var _v5 = attemptThird(s);
                        if (!_v5.$) {
                            var thirdGood = _v5;
                            return thirdGood;
                        }
                        else {
                            var thirdBad = _v5;
                            var thirdCommitted = thirdBad.a;
                            var thirdX = thirdBad.b;
                            return thirdCommitted ? thirdBad : $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingOneOf_fn(firstX, secondX, _List_fromArray([thirdX])));
                        }
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$oneOf3 = F3($stil4m$elm_syntax$ParserFast$oneOf3_fn);
var $stil4m$elm_syntax$ParserFast$ExpectingSymbol_fn = function (a, b, c) {
    return { $: 1, a: a, b: b, c: c };
}, $stil4m$elm_syntax$ParserFast$ExpectingSymbol = F3($stil4m$elm_syntax$ParserFast$ExpectingSymbol_fn);
var $stil4m$elm_syntax$ParserFast$symbol_fn = function (str, res) {
    var strLength = $elm$core$String$length(str);
    return function (s) {
        var newOffset = s.J + strLength;
        return _Utils_eq(_String_slice_fn(s.J, newOffset, s.H), str + "") ? $stil4m$elm_syntax$ParserFast$Good_fn(res, { dW: s.dW + strLength, ac: s.ac, J: newOffset, bu: s.bu, H: s.H }) : $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingSymbol_fn(s.bu, s.dW, str));
    };
}, $stil4m$elm_syntax$ParserFast$symbol = F2($stil4m$elm_syntax$ParserFast$symbol_fn);
var $stil4m$elm_syntax$ParserFast$pStepCommit = function (pStep) {
    if (!pStep.$) {
        var good = pStep;
        return good;
    }
    else {
        var x = pStep.b;
        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
    }
};
var $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn = function (str, _v0) {
    var parseNext = _v0;
    var strLength = $elm$core$String$length(str);
    return function (s) {
        var newOffset = s.J + strLength;
        return _Utils_eq(_String_slice_fn(s.J, newOffset, s.H), str + "") ? $stil4m$elm_syntax$ParserFast$pStepCommit(parseNext({ dW: s.dW + strLength, ac: s.ac, J: newOffset, bu: s.bu, H: s.H })) : $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingSymbol_fn(s.bu, s.dW, str));
    };
}, $stil4m$elm_syntax$ParserFast$symbolFollowedBy = F2($stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn);
var $stil4m$elm_syntax$ParserFast$while = function (isGood) {
    return function (s0) {
        var s1 = $stil4m$elm_syntax$ParserFast$skipWhileHelp_fn(isGood, s0.J, s0.bu, s0.dW, s0.H, s0.ac);
        return $stil4m$elm_syntax$ParserFast$Good_fn(_String_slice_fn(s0.J, s1.J, s0.H), s1);
    };
};
var $stil4m$elm_syntax$ParserFast$nestableMultiCommentMapWithRange_fn = function (rangeContentToRes, _v0, _v1) {
    var openChar = _v0.a;
    var openTail = _v0.b;
    var closeChar = _v1.a;
    var closeTail = _v1.b;
    var open = _String_cons_fn(openChar, openTail);
    var isNotRelevant = function (_char) {
        return (!_Utils_eq(_char, openChar)) && ((!_Utils_eq(_char, closeChar)) && (!$stil4m$elm_syntax$Char$Extra$isUtf16Surrogate(_char)));
    };
    var close = _String_cons_fn(closeChar, closeTail);
    return $stil4m$elm_syntax$ParserFast$map2WithRange_fn_unwrapped(function (range, afterOpen, contentAfterAfterOpen) {
        return A2(rangeContentToRes, range, _Utils_ap(open, _Utils_ap(afterOpen, _Utils_ap(contentAfterAfterOpen, close))));
    }, $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(open, $stil4m$elm_syntax$ParserFast$while(isNotRelevant)), $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$ParserFast$symbol_fn(close, ""), $stil4m$elm_syntax$ParserFast$loop_fn(_Utils_Tuple2("", 1), $stil4m$elm_syntax$ParserFast$oneOf3_fn($stil4m$elm_syntax$ParserFast$symbol_fn(close, _Utils_Tuple2(close, -1)), $stil4m$elm_syntax$ParserFast$symbol_fn(open, _Utils_Tuple2(open, 1)), $stil4m$elm_syntax$ParserFast$anyCharFollowedByWhileMap_fn(function (consumed) {
        return _Utils_Tuple2(consumed, 0);
    }, isNotRelevant)), F2(function (_v2, _v3) {
        var toAppend = _v2.a;
        var nestingChange = _v2.b;
        var soFarContent = _v3.a;
        var soFarNesting = _v3.b;
        var newNesting = soFarNesting + nestingChange;
        return (!newNesting) ? $stil4m$elm_syntax$ParserFast$Done(soFarContent) : $stil4m$elm_syntax$ParserFast$Loop(_Utils_Tuple2(soFarContent + (toAppend + ""), newNesting));
    }))));
}, $stil4m$elm_syntax$ParserFast$nestableMultiCommentMapWithRange_fn_unwrapped = function (rangeContentToRes, _v0, _v1) {
    var openChar = _v0.a;
    var openTail = _v0.b;
    var closeChar = _v1.a;
    var closeTail = _v1.b;
    var open = _String_cons_fn(openChar, openTail);
    var isNotRelevant = function (_char) {
        return (!_Utils_eq(_char, openChar)) && ((!_Utils_eq(_char, closeChar)) && (!$stil4m$elm_syntax$Char$Extra$isUtf16Surrogate(_char)));
    };
    var close = _String_cons_fn(closeChar, closeTail);
    return $stil4m$elm_syntax$ParserFast$map2WithRange_fn_unwrapped(function (range, afterOpen, contentAfterAfterOpen) {
        return rangeContentToRes(range, _Utils_ap(open, _Utils_ap(afterOpen, _Utils_ap(contentAfterAfterOpen, close))));
    }, $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(open, $stil4m$elm_syntax$ParserFast$while(isNotRelevant)), $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$ParserFast$symbol_fn(close, ""), $stil4m$elm_syntax$ParserFast$loop_fn(_Utils_Tuple2("", 1), $stil4m$elm_syntax$ParserFast$oneOf3_fn($stil4m$elm_syntax$ParserFast$symbol_fn(close, _Utils_Tuple2(close, -1)), $stil4m$elm_syntax$ParserFast$symbol_fn(open, _Utils_Tuple2(open, 1)), $stil4m$elm_syntax$ParserFast$anyCharFollowedByWhileMap_fn(function (consumed) {
        return _Utils_Tuple2(consumed, 0);
    }, isNotRelevant)), F2(function (_v2, _v3) {
        var toAppend = _v2.a;
        var nestingChange = _v2.b;
        var soFarContent = _v3.a;
        var soFarNesting = _v3.b;
        var newNesting = soFarNesting + nestingChange;
        return (!newNesting) ? $stil4m$elm_syntax$ParserFast$Done(soFarContent) : $stil4m$elm_syntax$ParserFast$Loop(_Utils_Tuple2(soFarContent + (toAppend + ""), newNesting));
    }))));
}, $stil4m$elm_syntax$ParserFast$nestableMultiCommentMapWithRange = F3($stil4m$elm_syntax$ParserFast$nestableMultiCommentMapWithRange_fn);
var $stil4m$elm_syntax$Elm$Parser$Comments$multiLineCommentNoCheck = $stil4m$elm_syntax$ParserFast$nestableMultiCommentMapWithRange_fn($stil4m$elm_syntax$Elm$Syntax$Node$Node, _Utils_Tuple2("{", "-"), _Utils_Tuple2("-", "}"));
var $stil4m$elm_syntax$Elm$Parser$Comments$declarationDocumentation = $stil4m$elm_syntax$Elm$Parser$Comments$multiLineCommentNoCheck;
var $stil4m$elm_syntax$Rope$Branch2_fn = function (a, b) {
    return { $: 1, a: a, b: b };
}, $stil4m$elm_syntax$Rope$Branch2 = F2($stil4m$elm_syntax$Rope$Branch2_fn);
var $stil4m$elm_syntax$Rope$filledPrependTo_fn = function (right, leftLikelyFilled) {
    if (right.$ === 1) {
        return $elm$core$Maybe$Just(leftLikelyFilled);
    }
    else {
        var rightLikelyFilled = right.a;
        return $elm$core$Maybe$Just($stil4m$elm_syntax$Rope$Branch2_fn(leftLikelyFilled, rightLikelyFilled));
    }
}, $stil4m$elm_syntax$Rope$filledPrependTo = F2($stil4m$elm_syntax$Rope$filledPrependTo_fn);
var $stil4m$elm_syntax$Elm$Parser$Declarations$FunctionDeclarationAfterDocumentation = function (a) {
    return { $: 0, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Application = function (a) {
    return { $: 1, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$CaseExpression = function (a) {
    return { $: 16, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$Expression$ExtendRightByOperation = $elm$core$Basics$identity;
var $stil4m$elm_syntax$Elm$Parser$Expression$FieldsFirstValue = function (a) {
    return { $: 1, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$IfBlock_fn = function (a, b, c) {
    return { $: 4, a: a, b: b, c: c };
}, $stil4m$elm_syntax$Elm$Syntax$Expression$IfBlock = F3($stil4m$elm_syntax$Elm$Syntax$Expression$IfBlock_fn);
var $stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression = function (a) {
    return { $: 17, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Infix$Left = 0;
var $stil4m$elm_syntax$Elm$Syntax$Expression$LetDestructuring_fn = function (a, b) {
    return { $: 1, a: a, b: b };
}, $stil4m$elm_syntax$Elm$Syntax$Expression$LetDestructuring = F2($stil4m$elm_syntax$Elm$Syntax$Expression$LetDestructuring_fn);
var $stil4m$elm_syntax$Elm$Syntax$Expression$LetExpression = function (a) {
    return { $: 15, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$LetFunction = function (a) {
    return { $: 0, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr = function (a) {
    return { $: 19, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Negation = function (a) {
    return { $: 10, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Infix$Non = 2;
var $stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression = function (a) {
    return { $: 14, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess_fn = function (a, b) {
    return { $: 20, a: a, b: b };
}, $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess = F2($stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess_fn);
var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr = function (a) {
    return { $: 18, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordUpdateExpression_fn = function (a, b) {
    return { $: 22, a: a, b: b };
}, $stil4m$elm_syntax$Elm$Syntax$Expression$RecordUpdateExpression = F2($stil4m$elm_syntax$Elm$Syntax$Expression$RecordUpdateExpression_fn);
var $stil4m$elm_syntax$Elm$Parser$Expression$RecordUpdateFirstSetter = function (a) {
    return { $: 0, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Infix$Right = 1;
var $stil4m$elm_syntax$Elm$Syntax$Expression$TupledExpression = function (a) {
    return { $: 13, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$Expression$TupledParenthesizedFollowedByRecordAccesses = function (a) {
    return { $: 0, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$Expression$TupledTwoOrThree = function (a) {
    return { $: 1, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$UnitExpr = { $: 0 };
var $stil4m$elm_syntax$Elm$Syntax$Expression$PrefixOperator = function (a) {
    return { $: 5, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$isAllowedOperatorToken = function (operatorCandidateToValidate) {
    switch (operatorCandidateToValidate) {
        case "==":
            return true;
        case "/=":
            return true;
        case "::":
            return true;
        case "++":
            return true;
        case "+":
            return true;
        case "*":
            return true;
        case "<|":
            return true;
        case "|>":
            return true;
        case "||":
            return true;
        case "<=":
            return true;
        case ">=":
            return true;
        case "|=":
            return true;
        case "|.":
            return true;
        case "//":
            return true;
        case "</>":
            return true;
        case "<?>":
            return true;
        case "^":
            return true;
        case "<<":
            return true;
        case ">>":
            return true;
        case "<":
            return true;
        case ">":
            return true;
        case "/":
            return true;
        case "&&":
            return true;
        case "-":
            return true;
        default:
            return false;
    }
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$isOperatorSymbolChar = function (c) {
    switch (c) {
        case "+":
            return true;
        case "-":
            return true;
        case "/":
            return true;
        case "*":
            return true;
        case "=":
            return true;
        case ".":
            return true;
        case "<":
            return true;
        case ">":
            return true;
        case ":":
            return true;
        case "&":
            return true;
        case "|":
            return true;
        case "^":
            return true;
        case "?":
            return true;
        default:
            return false;
    }
};
var $stil4m$elm_syntax$ParserFast$ExpectingStringSatisfyingPredicate_fn = function (a, b) {
    return { $: 5, a: a, b: b };
}, $stil4m$elm_syntax$ParserFast$ExpectingStringSatisfyingPredicate = F2($stil4m$elm_syntax$ParserFast$ExpectingStringSatisfyingPredicate_fn);
var $stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakAnd2PartUtf16Help_fn = function (isGood, offset, src) {
    skipWhileWithoutLinebreakAnd2PartUtf16Help: while (true) {
        if (_String_any_fn(isGood, _String_slice_fn(offset, offset + 1, src))) {
            var $temp$isGood = isGood, $temp$offset = offset + 1, $temp$src = src;
            isGood = $temp$isGood;
            offset = $temp$offset;
            src = $temp$src;
            continue skipWhileWithoutLinebreakAnd2PartUtf16Help;
        }
        else {
            return offset;
        }
    }
}, $stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakAnd2PartUtf16Help = F3($stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakAnd2PartUtf16Help_fn);
var $stil4m$elm_syntax$ParserFast$whileWithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol_fn = function (whileRangeAndContentToRes, whileCharIsOkay, whileResultIsOkay, mandatoryFinalSymbol) {
    var mandatoryFinalSymbolLength = $elm$core$String$length(mandatoryFinalSymbol);
    return function (s0) {
        var s1Offset = $stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakAnd2PartUtf16Help_fn(whileCharIsOkay, s0.J, s0.H);
        var whileContent = _String_slice_fn(s0.J, s1Offset, s0.H);
        if (_Utils_eq(_String_slice_fn(s1Offset, s1Offset + mandatoryFinalSymbolLength, s0.H), mandatoryFinalSymbol + "") && whileResultIsOkay(whileContent)) {
            var s1Column = s0.dW + (s1Offset - s0.J);
            return $stil4m$elm_syntax$ParserFast$Good_fn(A2(whileRangeAndContentToRes, {
                b_: { cJ: s1Column, bu: s0.bu },
                cf: { cJ: s0.dW, bu: s0.bu }
            }, whileContent), { dW: s1Column + mandatoryFinalSymbolLength, ac: s0.ac, J: s1Offset + mandatoryFinalSymbolLength, bu: s0.bu, H: s0.H });
        }
        else {
            return $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingStringSatisfyingPredicate_fn(s0.bu, s0.dW + 1));
        }
    };
}, $stil4m$elm_syntax$ParserFast$whileWithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol_fn_unwrapped = function (whileRangeAndContentToRes, whileCharIsOkay, whileResultIsOkay, mandatoryFinalSymbol) {
    var mandatoryFinalSymbolLength = $elm$core$String$length(mandatoryFinalSymbol);
    return function (s0) {
        var s1Offset = $stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakAnd2PartUtf16Help_fn(whileCharIsOkay, s0.J, s0.H);
        var whileContent = _String_slice_fn(s0.J, s1Offset, s0.H);
        if (_Utils_eq(_String_slice_fn(s1Offset, s1Offset + mandatoryFinalSymbolLength, s0.H), mandatoryFinalSymbol + "") && whileResultIsOkay(whileContent)) {
            var s1Column = s0.dW + (s1Offset - s0.J);
            return $stil4m$elm_syntax$ParserFast$Good_fn(whileRangeAndContentToRes({
                b_: { cJ: s1Column, bu: s0.bu },
                cf: { cJ: s0.dW, bu: s0.bu }
            }, whileContent), { dW: s1Column + mandatoryFinalSymbolLength, ac: s0.ac, J: s1Offset + mandatoryFinalSymbolLength, bu: s0.bu, H: s0.H });
        }
        else {
            return $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingStringSatisfyingPredicate_fn(s0.bu, s0.dW + 1));
        }
    };
}, $stil4m$elm_syntax$ParserFast$whileWithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol = F4($stil4m$elm_syntax$ParserFast$whileWithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol_fn);
var $stil4m$elm_syntax$Elm$Parser$Expression$allowedPrefixOperatorFollowedByClosingParensOneOf = $stil4m$elm_syntax$ParserFast$whileWithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol_fn_unwrapped(function (operatorRange, operator) {
    return {
        C: $stil4m$elm_syntax$Rope$empty,
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({
            b_: { cJ: operatorRange.b_.cJ + 1, bu: operatorRange.b_.bu },
            cf: { cJ: operatorRange.cf.cJ - 1, bu: operatorRange.cf.bu }
        }, $stil4m$elm_syntax$Elm$Syntax$Expression$PrefixOperator(operator))
    };
}, $stil4m$elm_syntax$Elm$Parser$Tokens$isOperatorSymbolChar, $stil4m$elm_syntax$Elm$Parser$Tokens$isAllowedOperatorToken, ")");
var $stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication_fn = function (a, b, c, d) {
    return { $: 2, a: a, b: b, c: c, d: d };
}, $stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication = F4($stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication_fn);
var $stil4m$elm_syntax$Elm$Parser$Expression$applyExtensionRight_fn = function (_v0, leftNode) {
    var operation = _v0;
    var leftRange = leftNode.a;
    var rightExpressionNode = operation.O;
    var rightExpressionRange = rightExpressionNode.a;
    return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: rightExpressionRange.b_, cf: leftRange.cf }, $stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication_fn(operation.cX, operation.fh, leftNode, rightExpressionNode));
}, $stil4m$elm_syntax$Elm$Parser$Expression$applyExtensionRight = F2($stil4m$elm_syntax$Elm$Parser$Expression$applyExtensionRight_fn);
var $stil4m$elm_syntax$Elm$Syntax$Expression$CharLiteral = function (a) {
    return { $: 12, a: a };
};
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
    return _String_foldr_fn($elm$core$List$cons, _List_Nil, string);
};
var $stil4m$elm_syntax$ParserFast$anyChar = function (s) {
    var newOffset = $stil4m$elm_syntax$ParserFast$charOrEnd_fn(s.J, s.H);
    if (newOffset === -1) {
        return $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingAnyChar_fn(s.bu, s.dW));
    }
    else {
        if (newOffset === -2) {
            return $stil4m$elm_syntax$ParserFast$Good_fn("\n", { dW: 1, ac: s.ac, J: s.J + 1, bu: s.bu + 1, H: s.H });
        }
        else {
            var _v0 = $elm$core$String$toList(_String_slice_fn(s.J, newOffset, s.H));
            if (!_v0.b) {
                return $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingAnyChar_fn(s.bu, s.dW));
            }
            else {
                var c = _v0.a;
                return $stil4m$elm_syntax$ParserFast$Good_fn(c, { dW: s.dW + 1, ac: s.ac, J: newOffset, bu: s.bu, H: s.H });
            }
        }
    }
};
var $stil4m$elm_syntax$ParserFast$followedBySymbol_fn = function (str, _v0) {
    var parsePrevious = _v0;
    var strLength = $elm$core$String$length(str);
    return function (s0) {
        var _v1 = parsePrevious(s0);
        if (!_v1.$) {
            var res = _v1.a;
            var s1 = _v1.b;
            var newOffset = s1.J + strLength;
            return _Utils_eq(_String_slice_fn(s1.J, newOffset, s1.H), str + "") ? $stil4m$elm_syntax$ParserFast$Good_fn(res, { dW: s1.dW + strLength, ac: s1.ac, J: newOffset, bu: s1.bu, H: s1.H }) : $stil4m$elm_syntax$ParserFast$Bad_fn(true, $stil4m$elm_syntax$ParserFast$ExpectingSymbol_fn(s1.bu, s1.dW, str));
        }
        else {
            var bad = _v1;
            return bad;
        }
    };
}, $stil4m$elm_syntax$ParserFast$followedBySymbol = F2($stil4m$elm_syntax$ParserFast$followedBySymbol_fn);
var $elm$core$Char$fromCode = _Char_fromCode;
var $stil4m$elm_syntax$Elm$Parser$Tokens$charToHex = function (c) {
    switch (c) {
        case "0":
            return 0;
        case "1":
            return 1;
        case "2":
            return 2;
        case "3":
            return 3;
        case "4":
            return 4;
        case "5":
            return 5;
        case "6":
            return 6;
        case "7":
            return 7;
        case "8":
            return 8;
        case "9":
            return 9;
        case "a":
            return 10;
        case "b":
            return 11;
        case "c":
            return 12;
        case "d":
            return 13;
        case "e":
            return 14;
        case "f":
            return 15;
        case "A":
            return 10;
        case "B":
            return 11;
        case "C":
            return 12;
        case "D":
            return 13;
        case "E":
            return 14;
        default:
            return 15;
    }
};
var $elm$core$Basics$pow = _Basics_pow;
var $stil4m$elm_syntax$Elm$Parser$Tokens$hexStringToInt = function (string) {
    return _String_foldr_fn_unwrapped(function (c, soFar) {
        return {
            c7: soFar.c7 + 1,
            h: soFar.h + (_Basics_pow_fn(16, soFar.c7) * $stil4m$elm_syntax$Elm$Parser$Tokens$charToHex(c))
        };
    }, { c7: 0, h: 0 }, string).h;
};
var $stil4m$elm_syntax$ParserFast$ExpectingCharSatisfyingPredicate_fn = function (a, b) {
    return { $: 4, a: a, b: b };
}, $stil4m$elm_syntax$ParserFast$ExpectingCharSatisfyingPredicate = F2($stil4m$elm_syntax$ParserFast$ExpectingCharSatisfyingPredicate_fn);
var $stil4m$elm_syntax$ParserFast$isSubCharWithoutLinebreak_fn = function (predicate, offset, string) {
    var actualChar = _String_slice_fn(offset, offset + 1, string);
    return _String_any_fn(predicate, actualChar) ? (offset + 1) : (($stil4m$elm_syntax$ParserFast$charStringIsUtf16HighSurrogate(actualChar) && _String_any_fn(predicate, _String_slice_fn(offset, offset + 2, string))) ? (offset + 2) : (-1));
}, $stil4m$elm_syntax$ParserFast$isSubCharWithoutLinebreak = F3($stil4m$elm_syntax$ParserFast$isSubCharWithoutLinebreak_fn);
var $stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp_fn = function (isGood, offset, row, col, src, indent) {
    skipWhileWithoutLinebreakHelp: while (true) {
        var actualChar = _String_slice_fn(offset, offset + 1, src);
        if (_String_any_fn(isGood, actualChar)) {
            var $temp$isGood = isGood, $temp$offset = offset + 1, $temp$row = row, $temp$col = col + 1, $temp$src = src, $temp$indent = indent;
            isGood = $temp$isGood;
            offset = $temp$offset;
            row = $temp$row;
            col = $temp$col;
            src = $temp$src;
            indent = $temp$indent;
            continue skipWhileWithoutLinebreakHelp;
        }
        else {
            if ($stil4m$elm_syntax$ParserFast$charStringIsUtf16HighSurrogate(actualChar) && _String_any_fn(isGood, _String_slice_fn(offset, offset + 2, src))) {
                var $temp$isGood = isGood, $temp$offset = offset + 2, $temp$row = row, $temp$col = col + 1, $temp$src = src, $temp$indent = indent;
                isGood = $temp$isGood;
                offset = $temp$offset;
                row = $temp$row;
                col = $temp$col;
                src = $temp$src;
                indent = $temp$indent;
                continue skipWhileWithoutLinebreakHelp;
            }
            else {
                return { dW: col, ac: indent, J: offset, bu: row, H: src };
            }
        }
    }
}, $stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp = F6($stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp_fn);
var $stil4m$elm_syntax$ParserFast$ifFollowedByWhileMapWithoutLinebreak_fn = function (consumedStringToRes, firstIsOkay, afterFirstIsOkay) {
    return function (s0) {
        var firstOffset = $stil4m$elm_syntax$ParserFast$isSubCharWithoutLinebreak_fn(firstIsOkay, s0.J, s0.H);
        if (firstOffset === -1) {
            return $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingCharSatisfyingPredicate_fn(s0.bu, s0.dW));
        }
        else {
            var s1 = $stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp_fn(afterFirstIsOkay, firstOffset, s0.bu, s0.dW + 1, s0.H, s0.ac);
            return $stil4m$elm_syntax$ParserFast$Good_fn(consumedStringToRes(_String_slice_fn(s0.J, s1.J, s0.H)), s1);
        }
    };
}, $stil4m$elm_syntax$ParserFast$ifFollowedByWhileMapWithoutLinebreak = F3($stil4m$elm_syntax$ParserFast$ifFollowedByWhileMapWithoutLinebreak_fn);
var $elm$core$Char$isHexDigit = function (_char) {
    var code = $elm$core$Char$toCode(_char);
    return ((48 <= code) && (code <= 57)) || (((65 <= code) && (code <= 70)) || ((97 <= code) && (code <= 102)));
};
var $stil4m$elm_syntax$ParserFast$oneOf7_fn = function (_v0, _v1, _v2, _v3, _v4, _v5, _v6) {
    var attempt0 = _v0;
    var attempt1 = _v1;
    var attempt2 = _v2;
    var attempt3 = _v3;
    var attempt4 = _v4;
    var attempt5 = _v5;
    var attempt6 = _v6;
    return function (s) {
        var _v7 = attempt0(s);
        if (!_v7.$) {
            var good = _v7;
            return good;
        }
        else {
            var bad0 = _v7;
            var committed0 = bad0.a;
            var x0 = bad0.b;
            if (committed0) {
                return bad0;
            }
            else {
                var _v8 = attempt1(s);
                if (!_v8.$) {
                    var good = _v8;
                    return good;
                }
                else {
                    var bad1 = _v8;
                    var committed1 = bad1.a;
                    var x1 = bad1.b;
                    if (committed1) {
                        return bad1;
                    }
                    else {
                        var _v9 = attempt2(s);
                        if (!_v9.$) {
                            var good = _v9;
                            return good;
                        }
                        else {
                            var bad2 = _v9;
                            var committed2 = bad2.a;
                            var x2 = bad2.b;
                            if (committed2) {
                                return bad2;
                            }
                            else {
                                var _v10 = attempt3(s);
                                if (!_v10.$) {
                                    var good = _v10;
                                    return good;
                                }
                                else {
                                    var bad3 = _v10;
                                    var committed3 = bad3.a;
                                    var x3 = bad3.b;
                                    if (committed3) {
                                        return bad3;
                                    }
                                    else {
                                        var _v11 = attempt4(s);
                                        if (!_v11.$) {
                                            var good = _v11;
                                            return good;
                                        }
                                        else {
                                            var bad4 = _v11;
                                            var committed4 = bad4.a;
                                            var x4 = bad4.b;
                                            if (committed4) {
                                                return bad4;
                                            }
                                            else {
                                                var _v12 = attempt5(s);
                                                if (!_v12.$) {
                                                    var good = _v12;
                                                    return good;
                                                }
                                                else {
                                                    var bad5 = _v12;
                                                    var committed5 = bad5.a;
                                                    var x5 = bad5.b;
                                                    if (committed5) {
                                                        return bad5;
                                                    }
                                                    else {
                                                        var _v13 = attempt6(s);
                                                        if (!_v13.$) {
                                                            var good = _v13;
                                                            return good;
                                                        }
                                                        else {
                                                            var bad6 = _v13;
                                                            var committed6 = bad6.a;
                                                            var x6 = bad6.b;
                                                            return committed6 ? bad6 : $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingOneOf_fn(x0, x1, _List_fromArray([x2, x3, x4, x5, x6])));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$oneOf7 = F7($stil4m$elm_syntax$ParserFast$oneOf7_fn);
var $stil4m$elm_syntax$Elm$Parser$Tokens$escapedCharValueMap = function (charToRes) {
    return $stil4m$elm_syntax$ParserFast$oneOf7_fn($stil4m$elm_syntax$ParserFast$symbol_fn("'", charToRes("'")), $stil4m$elm_syntax$ParserFast$symbol_fn("\"", charToRes("\"")), $stil4m$elm_syntax$ParserFast$symbol_fn("n", charToRes("\n")), $stil4m$elm_syntax$ParserFast$symbol_fn("t", charToRes("\t")), $stil4m$elm_syntax$ParserFast$symbol_fn("r", charToRes("\r")), $stil4m$elm_syntax$ParserFast$symbol_fn("\\", charToRes("\\")), $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("u{", $stil4m$elm_syntax$ParserFast$followedBySymbol_fn("}", $stil4m$elm_syntax$ParserFast$ifFollowedByWhileMapWithoutLinebreak_fn(function (hex) {
        return charToRes($elm$core$Char$fromCode($stil4m$elm_syntax$Elm$Parser$Tokens$hexStringToInt(hex)));
    }, $elm$core$Char$isHexDigit, $elm$core$Char$isHexDigit))));
};
var $stil4m$elm_syntax$ParserFast$oneOf2MapWithStartRowColumnAndEndRowColumn_fn = function (firstToChoice, _v0, secondToChoice, _v1) {
    var attemptFirst = _v0;
    var attemptSecond = _v1;
    return function (s) {
        var _v2 = attemptFirst(s);
        if (!_v2.$) {
            var first = _v2.a;
            var s1 = _v2.b;
            return $stil4m$elm_syntax$ParserFast$Good_fn(A5(firstToChoice, s.bu, s.dW, first, s1.bu, s1.dW), s1);
        }
        else {
            var firstCommitted = _v2.a;
            var firstX = _v2.b;
            if (firstCommitted) {
                return $stil4m$elm_syntax$ParserFast$Bad_fn(firstCommitted, firstX);
            }
            else {
                var _v3 = attemptSecond(s);
                if (!_v3.$) {
                    var second = _v3.a;
                    var s1 = _v3.b;
                    return $stil4m$elm_syntax$ParserFast$Good_fn(A5(secondToChoice, s.bu, s.dW, second, s1.bu, s1.dW), s1);
                }
                else {
                    var secondCommitted = _v3.a;
                    var secondX = _v3.b;
                    return secondCommitted ? $stil4m$elm_syntax$ParserFast$Bad_fn(secondCommitted, secondX) : $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingOneOf_fn(firstX, secondX, _List_Nil));
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$oneOf2MapWithStartRowColumnAndEndRowColumn = F4($stil4m$elm_syntax$ParserFast$oneOf2MapWithStartRowColumnAndEndRowColumn_fn);
var $stil4m$elm_syntax$Elm$Parser$Tokens$characterLiteralMapWithRange = function (rangeAndCharToRes) {
    return $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("'", $stil4m$elm_syntax$ParserFast$followedBySymbol_fn("'", $stil4m$elm_syntax$ParserFast$oneOf2MapWithStartRowColumnAndEndRowColumn_fn(F5(function (startRow, startColumn, _char, endRow, endColumn) {
        return A2(rangeAndCharToRes, {
            b_: { cJ: endColumn + 1, bu: endRow },
            cf: { cJ: startColumn - 1, bu: startRow }
        }, _char);
    }), $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("\\", $stil4m$elm_syntax$Elm$Parser$Tokens$escapedCharValueMap($elm$core$Basics$identity)), F5(function (startRow, startColumn, _char, endRow, endColumn) {
        return A2(rangeAndCharToRes, {
            b_: { cJ: endColumn + 1, bu: endRow },
            cf: { cJ: startColumn - 1, bu: startRow }
        }, _char);
    }), $stil4m$elm_syntax$ParserFast$anyChar)));
}, $stil4m$elm_syntax$Elm$Parser$Tokens$characterLiteralMapWithRange_unwrapped = function (rangeAndCharToRes) {
    return $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("'", $stil4m$elm_syntax$ParserFast$followedBySymbol_fn("'", $stil4m$elm_syntax$ParserFast$oneOf2MapWithStartRowColumnAndEndRowColumn_fn(F5(function (startRow, startColumn, _char, endRow, endColumn) {
        return rangeAndCharToRes({
            b_: { cJ: endColumn + 1, bu: endRow },
            cf: { cJ: startColumn - 1, bu: startRow }
        }, _char);
    }), $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("\\", $stil4m$elm_syntax$Elm$Parser$Tokens$escapedCharValueMap($elm$core$Basics$identity)), F5(function (startRow, startColumn, _char, endRow, endColumn) {
        return rangeAndCharToRes({
            b_: { cJ: endColumn + 1, bu: endRow },
            cf: { cJ: startColumn - 1, bu: startRow }
        }, _char);
    }), $stil4m$elm_syntax$ParserFast$anyChar)));
};
var $stil4m$elm_syntax$Elm$Parser$Expression$charLiteralExpression = $stil4m$elm_syntax$Elm$Parser$Tokens$characterLiteralMapWithRange_unwrapped(function (range, _char) {
    return {
        C: $stil4m$elm_syntax$Rope$empty,
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Expression$CharLiteral(_char))
    };
});
var $stil4m$elm_syntax$Elm$Parser$Expression$errUnknownInfixOperator = $elm$core$Result$Err("unknown infix operator");
var $stil4m$elm_syntax$ParserFast$ifFollowedByWhileValidateMapWithRangeWithoutLinebreak_fn = function (toResult, firstIsOkay, afterFirstIsOkay, resultIsOkay) {
    return function (s0) {
        var firstOffset = $stil4m$elm_syntax$ParserFast$isSubCharWithoutLinebreak_fn(firstIsOkay, s0.J, s0.H);
        if (firstOffset === -1) {
            return $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingCharSatisfyingPredicate_fn(s0.bu, s0.dW));
        }
        else {
            var s1 = $stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp_fn(afterFirstIsOkay, firstOffset, s0.bu, s0.dW + 1, s0.H, s0.ac);
            var name = _String_slice_fn(s0.J, s1.J, s0.H);
            return resultIsOkay(name) ? $stil4m$elm_syntax$ParserFast$Good_fn(A2(toResult, {
                b_: { cJ: s1.dW, bu: s1.bu },
                cf: { cJ: s0.dW, bu: s0.bu }
            }, name), s1) : $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingStringSatisfyingPredicate_fn(s0.bu, s0.dW + 1));
        }
    };
}, $stil4m$elm_syntax$ParserFast$ifFollowedByWhileValidateMapWithRangeWithoutLinebreak_fn_unwrapped = function (toResult, firstIsOkay, afterFirstIsOkay, resultIsOkay) {
    return function (s0) {
        var firstOffset = $stil4m$elm_syntax$ParserFast$isSubCharWithoutLinebreak_fn(firstIsOkay, s0.J, s0.H);
        if (firstOffset === -1) {
            return $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingCharSatisfyingPredicate_fn(s0.bu, s0.dW));
        }
        else {
            var s1 = $stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp_fn(afterFirstIsOkay, firstOffset, s0.bu, s0.dW + 1, s0.H, s0.ac);
            var name = _String_slice_fn(s0.J, s1.J, s0.H);
            return resultIsOkay(name) ? $stil4m$elm_syntax$ParserFast$Good_fn(toResult({
                b_: { cJ: s1.dW, bu: s1.bu },
                cf: { cJ: s0.dW, bu: s0.bu }
            }, name), s1) : $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingStringSatisfyingPredicate_fn(s0.bu, s0.dW + 1));
        }
    };
}, $stil4m$elm_syntax$ParserFast$ifFollowedByWhileValidateMapWithRangeWithoutLinebreak = F4($stil4m$elm_syntax$ParserFast$ifFollowedByWhileValidateMapWithRangeWithoutLinebreak_fn);
var $stil4m$elm_syntax$Elm$Parser$Tokens$isNotReserved = function (name) {
    switch (name) {
        case "module":
            return false;
        case "exposing":
            return false;
        case "import":
            return false;
        case "as":
            return false;
        case "if":
            return false;
        case "then":
            return false;
        case "else":
            return false;
        case "let":
            return false;
        case "in":
            return false;
        case "case":
            return false;
        case "of":
            return false;
        case "port":
            return false;
        case "type":
            return false;
        case "where":
            return false;
        default:
            return true;
    }
};
var $stil4m$elm_syntax$Char$Extra$charCodeIsDigit = function (code) {
    return (code <= 57) && (48 <= code);
};
var $stil4m$elm_syntax$Char$Extra$charCodeIsLower = function (code) {
    return (97 <= code) && (code <= 122);
};
var $stil4m$elm_syntax$Char$Extra$charCodeIsUpper = function (code) {
    return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$modBy = _Basics_modBy;
var $stil4m$elm_syntax$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast = function (c) {
    var code = $elm$core$Char$toCode(c);
    return $stil4m$elm_syntax$Char$Extra$charCodeIsLower(code) || ($stil4m$elm_syntax$Char$Extra$charCodeIsUpper(code) || ($stil4m$elm_syntax$Char$Extra$charCodeIsDigit(code) || ((code === 95) || (((code !== 32) && (code !== 10)) && ((code < 256) ? (((48 <= code) && (code <= 57)) || (((65 <= code) && (code <= 90)) || (((97 <= code) && (code <= 122)) || ((code === 170) || (((178 <= code) && (code <= 179)) || ((code === 181) || (((185 <= code) && (code <= 186)) || (((188 <= code) && (code <= 190)) || (((192 <= code) && (code <= 214)) || (((216 <= code) && (code <= 246)) || ((248 <= code) && (code <= 255)))))))))))) : ((code < 43700) ? ((code < 4347) ? ((code < 2868) ? ((code < 2364) ? ((code < 1648) ? ((code < 930) ? (((256 <= code) && (code <= 705)) || (((710 <= code) && (code <= 721)) || (((736 <= code) && (code <= 740)) || (((880 <= code) && (code <= 884)) || (((886 <= code) && (code <= 887)) || (((890 <= code) && (code <= 893)) || ((code === 895) || ((code === 902) || (((904 <= code) && (code <= 906)) || ((code === 908) || (((910 <= code) && (code <= 929)) || ((!_Basics_modBy_fn(2, code)) && ((748 <= code) && (code <= 750)))))))))))))) : (((931 <= code) && (code <= 1013)) || (((1015 <= code) && (code <= 1153)) || (((1162 <= code) && (code <= 1327)) || (((1329 <= code) && (code <= 1366)) || ((code === 1369) || (((1376 <= code) && (code <= 1416)) || (((1488 <= code) && (code <= 1514)) || (((1519 <= code) && (code <= 1522)) || (((1568 <= code) && (code <= 1610)) || (((1632 <= code) && (code <= 1641)) || ((1646 <= code) && (code <= 1647))))))))))))) : ((code < 2041) ? (((1649 <= code) && (code <= 1747)) || ((code === 1749) || (((1765 <= code) && (code <= 1766)) || (((1774 <= code) && (code <= 1788)) || ((code === 1791) || ((code === 1808) || (((1810 <= code) && (code <= 1839)) || (((1869 <= code) && (code <= 1957)) || ((code === 1969) || (((1984 <= code) && (code <= 2026)) || ((2036 <= code) && (code <= 2037)))))))))))) : ((code === 2042) || (((2048 <= code) && (code <= 2069)) || ((code === 2074) || ((code === 2084) || ((code === 2088) || (((2112 <= code) && (code <= 2136)) || (((2144 <= code) && (code <= 2154)) || (((2160 <= code) && (code <= 2183)) || (((2185 <= code) && (code <= 2190)) || (((2208 <= code) && (code <= 2249)) || ((2308 <= code) && (code <= 2361)))))))))))))) : ((code < 2609) ? ((code < 2492) ? ((code === 2365) || ((code === 2384) || (((2392 <= code) && (code <= 2401)) || (((2406 <= code) && (code <= 2415)) || (((2417 <= code) && (code <= 2432)) || (((2437 <= code) && (code <= 2444)) || (((2447 <= code) && (code <= 2448)) || (((2451 <= code) && (code <= 2472)) || (((2474 <= code) && (code <= 2480)) || ((code === 2482) || ((2486 <= code) && (code <= 2489)))))))))))) : ((code === 2493) || ((code === 2510) || (((2524 <= code) && (code <= 2525)) || (((2527 <= code) && (code <= 2529)) || (((2534 <= code) && (code <= 2545)) || (((2548 <= code) && (code <= 2553)) || ((code === 2556) || (((2565 <= code) && (code <= 2570)) || (((2575 <= code) && (code <= 2576)) || (((2579 <= code) && (code <= 2600)) || ((2602 <= code) && (code <= 2608))))))))))))) : ((code < 2737) ? (((2610 <= code) && (code <= 2611)) || (((2613 <= code) && (code <= 2614)) || (((2616 <= code) && (code <= 2617)) || (((2649 <= code) && (code <= 2652)) || ((code === 2654) || (((2662 <= code) && (code <= 2671)) || (((2674 <= code) && (code <= 2676)) || (((2693 <= code) && (code <= 2701)) || (((2703 <= code) && (code <= 2705)) || (((2707 <= code) && (code <= 2728)) || ((2730 <= code) && (code <= 2736)))))))))))) : (((2738 <= code) && (code <= 2739)) || (((2741 <= code) && (code <= 2745)) || ((code === 2749) || ((code === 2768) || (((2784 <= code) && (code <= 2785)) || (((2790 <= code) && (code <= 2799)) || ((code === 2809) || (((2821 <= code) && (code <= 2828)) || (((2831 <= code) && (code <= 2832)) || (((2835 <= code) && (code <= 2856)) || (((2858 <= code) && (code <= 2864)) || ((2866 <= code) && (code <= 2867)))))))))))))))) : ((code < 3411) ? ((code < 3132) ? ((code < 2971) ? (((2869 <= code) && (code <= 2873)) || ((code === 2877) || (((2908 <= code) && (code <= 2909)) || (((2911 <= code) && (code <= 2913)) || (((2918 <= code) && (code <= 2927)) || (((2929 <= code) && (code <= 2935)) || ((code === 2947) || (((2949 <= code) && (code <= 2954)) || (((2958 <= code) && (code <= 2960)) || (((2962 <= code) && (code <= 2965)) || ((2969 <= code) && (code <= 2970)))))))))))) : ((code === 2972) || (((2974 <= code) && (code <= 2975)) || (((2979 <= code) && (code <= 2980)) || (((2984 <= code) && (code <= 2986)) || (((2990 <= code) && (code <= 3001)) || ((code === 3024) || (((3046 <= code) && (code <= 3058)) || (((3077 <= code) && (code <= 3084)) || (((3086 <= code) && (code <= 3088)) || (((3090 <= code) && (code <= 3112)) || ((3114 <= code) && (code <= 3129))))))))))))) : ((code < 3252) ? ((code === 3133) || (((3160 <= code) && (code <= 3162)) || ((code === 3165) || (((3168 <= code) && (code <= 3169)) || (((3174 <= code) && (code <= 3183)) || (((3192 <= code) && (code <= 3198)) || ((code === 3200) || (((3205 <= code) && (code <= 3212)) || (((3214 <= code) && (code <= 3216)) || (((3218 <= code) && (code <= 3240)) || ((3242 <= code) && (code <= 3251)))))))))))) : (((3253 <= code) && (code <= 3257)) || ((code === 3261) || (((3293 <= code) && (code <= 3294)) || (((3296 <= code) && (code <= 3297)) || (((3302 <= code) && (code <= 3311)) || (((3313 <= code) && (code <= 3314)) || (((3332 <= code) && (code <= 3340)) || (((3342 <= code) && (code <= 3344)) || (((3346 <= code) && (code <= 3386)) || ((code === 3389) || (code === 3406))))))))))))) : ((code < 3775) ? ((code < 3633) ? (((3412 <= code) && (code <= 3414)) || (((3416 <= code) && (code <= 3425)) || (((3430 <= code) && (code <= 3448)) || (((3450 <= code) && (code <= 3455)) || (((3461 <= code) && (code <= 3478)) || (((3482 <= code) && (code <= 3505)) || (((3507 <= code) && (code <= 3515)) || ((code === 3517) || (((3520 <= code) && (code <= 3526)) || (((3558 <= code) && (code <= 3567)) || ((3585 <= code) && (code <= 3632)))))))))))) : (((3634 <= code) && (code <= 3635)) || (((3648 <= code) && (code <= 3654)) || (((3664 <= code) && (code <= 3673)) || (((3713 <= code) && (code <= 3714)) || ((code === 3716) || (((3718 <= code) && (code <= 3722)) || (((3724 <= code) && (code <= 3747)) || ((code === 3749) || (((3751 <= code) && (code <= 3760)) || (((3762 <= code) && (code <= 3763)) || (code === 3773)))))))))))) : ((code < 4175) ? (((3776 <= code) && (code <= 3780)) || ((code === 3782) || (((3792 <= code) && (code <= 3801)) || (((3804 <= code) && (code <= 3807)) || ((code === 3840) || (((3872 <= code) && (code <= 3891)) || (((3904 <= code) && (code <= 3911)) || (((3913 <= code) && (code <= 3948)) || (((3976 <= code) && (code <= 3980)) || (((4096 <= code) && (code <= 4138)) || ((4159 <= code) && (code <= 4169)))))))))))) : (((4176 <= code) && (code <= 4181)) || (((4186 <= code) && (code <= 4189)) || ((code === 4193) || (((4197 <= code) && (code <= 4198)) || (((4206 <= code) && (code <= 4208)) || (((4213 <= code) && (code <= 4225)) || ((code === 4238) || (((4240 <= code) && (code <= 4249)) || (((4256 <= code) && (code <= 4293)) || ((code === 4295) || ((code === 4301) || ((4304 <= code) && (code <= 4346))))))))))))))))) : ((code < 8454) ? ((code < 6527) ? ((code < 5760) ? ((code < 4801) ? (((4348 <= code) && (code <= 4680)) || (((4682 <= code) && (code <= 4685)) || (((4688 <= code) && (code <= 4694)) || ((code === 4696) || (((4698 <= code) && (code <= 4701)) || (((4704 <= code) && (code <= 4744)) || (((4746 <= code) && (code <= 4749)) || (((4752 <= code) && (code <= 4784)) || (((4786 <= code) && (code <= 4789)) || (((4792 <= code) && (code <= 4798)) || (code === 4800))))))))))) : (((4802 <= code) && (code <= 4805)) || (((4808 <= code) && (code <= 4822)) || (((4824 <= code) && (code <= 4880)) || (((4882 <= code) && (code <= 4885)) || (((4888 <= code) && (code <= 4954)) || (((4969 <= code) && (code <= 4988)) || (((4992 <= code) && (code <= 5007)) || (((5024 <= code) && (code <= 5109)) || (((5112 <= code) && (code <= 5117)) || (((5121 <= code) && (code <= 5740)) || ((5743 <= code) && (code <= 5759))))))))))))) : ((code < 6111) ? (((5761 <= code) && (code <= 5786)) || (((5792 <= code) && (code <= 5866)) || (((5870 <= code) && (code <= 5880)) || (((5888 <= code) && (code <= 5905)) || (((5919 <= code) && (code <= 5937)) || (((5952 <= code) && (code <= 5969)) || (((5984 <= code) && (code <= 5996)) || (((5998 <= code) && (code <= 6000)) || (((6016 <= code) && (code <= 6067)) || ((code === 6103) || (code === 6108))))))))))) : (((6112 <= code) && (code <= 6121)) || (((6128 <= code) && (code <= 6137)) || (((6160 <= code) && (code <= 6169)) || (((6176 <= code) && (code <= 6264)) || (((6272 <= code) && (code <= 6276)) || (((6279 <= code) && (code <= 6312)) || ((code === 6314) || (((6320 <= code) && (code <= 6389)) || (((6400 <= code) && (code <= 6430)) || (((6470 <= code) && (code <= 6509)) || ((6512 <= code) && (code <= 6516)))))))))))))) : ((code < 7417) ? ((code < 7042) ? (((6528 <= code) && (code <= 6571)) || (((6576 <= code) && (code <= 6601)) || (((6608 <= code) && (code <= 6618)) || (((6656 <= code) && (code <= 6678)) || (((6688 <= code) && (code <= 6740)) || (((6784 <= code) && (code <= 6793)) || (((6800 <= code) && (code <= 6809)) || ((code === 6823) || (((6917 <= code) && (code <= 6963)) || (((6981 <= code) && (code <= 6988)) || ((6992 <= code) && (code <= 7001)))))))))))) : (((7043 <= code) && (code <= 7072)) || (((7086 <= code) && (code <= 7141)) || (((7168 <= code) && (code <= 7203)) || (((7232 <= code) && (code <= 7241)) || (((7245 <= code) && (code <= 7293)) || (((7296 <= code) && (code <= 7304)) || (((7312 <= code) && (code <= 7354)) || (((7357 <= code) && (code <= 7359)) || (((7401 <= code) && (code <= 7404)) || (((7406 <= code) && (code <= 7411)) || ((7413 <= code) && (code <= 7414))))))))))))) : ((code < 8129) ? ((code === 7418) || (((7424 <= code) && (code <= 7615)) || (((7680 <= code) && (code <= 7957)) || (((7960 <= code) && (code <= 7965)) || (((7968 <= code) && (code <= 8005)) || (((8008 <= code) && (code <= 8013)) || (((8016 <= code) && (code <= 8023)) || (((8032 <= code) && (code <= 8061)) || (((8064 <= code) && (code <= 8116)) || (((8118 <= code) && (code <= 8124)) || ((code === 8126) || ((_Basics_modBy_fn(2, code) === 1) && ((8025 <= code) && (code <= 8031)))))))))))))) : (((8130 <= code) && (code <= 8132)) || (((8134 <= code) && (code <= 8140)) || (((8144 <= code) && (code <= 8147)) || (((8150 <= code) && (code <= 8155)) || (((8160 <= code) && (code <= 8172)) || (((8178 <= code) && (code <= 8180)) || (((8182 <= code) && (code <= 8188)) || (((8304 <= code) && (code <= 8305)) || (((8308 <= code) && (code <= 8313)) || (((8319 <= code) && (code <= 8329)) || (((8336 <= code) && (code <= 8348)) || (code === 8450))))))))))))))) : ((code < 12783) ? ((code < 11647) ? ((code < 9449) ? ((code === 8455) || (((8458 <= code) && (code <= 8467)) || ((code === 8469) || (((8473 <= code) && (code <= 8477)) || (((8490 <= code) && (code <= 8493)) || (((8495 <= code) && (code <= 8505)) || (((8508 <= code) && (code <= 8511)) || (((8517 <= code) && (code <= 8521)) || ((code === 8526) || (((8528 <= code) && (code <= 8585)) || (((9312 <= code) && (code <= 9371)) || ((!_Basics_modBy_fn(2, code)) && ((8484 <= code) && (code <= 8488)))))))))))))) : (((9450 <= code) && (code <= 9471)) || (((10102 <= code) && (code <= 10131)) || (((11264 <= code) && (code <= 11492)) || (((11499 <= code) && (code <= 11502)) || (((11506 <= code) && (code <= 11507)) || ((code === 11517) || (((11520 <= code) && (code <= 11557)) || ((code === 11559) || ((code === 11565) || (((11568 <= code) && (code <= 11623)) || (code === 11631)))))))))))) : ((code < 12320) ? (((11648 <= code) && (code <= 11670)) || (((11680 <= code) && (code <= 11686)) || (((11688 <= code) && (code <= 11694)) || (((11696 <= code) && (code <= 11702)) || (((11704 <= code) && (code <= 11710)) || (((11712 <= code) && (code <= 11718)) || (((11720 <= code) && (code <= 11726)) || (((11728 <= code) && (code <= 11734)) || (((11736 <= code) && (code <= 11742)) || ((code === 11823) || ((12293 <= code) && (code <= 12295)))))))))))) : (((12321 <= code) && (code <= 12329)) || (((12337 <= code) && (code <= 12341)) || (((12344 <= code) && (code <= 12348)) || (((12353 <= code) && (code <= 12438)) || (((12445 <= code) && (code <= 12447)) || (((12449 <= code) && (code <= 12538)) || (((12540 <= code) && (code <= 12543)) || (((12549 <= code) && (code <= 12591)) || (((12593 <= code) && (code <= 12686)) || (((12690 <= code) && (code <= 12693)) || ((12704 <= code) && (code <= 12735)))))))))))))) : ((code < 43019) ? ((code < 42559) ? (((12784 <= code) && (code <= 12799)) || (((12832 <= code) && (code <= 12841)) || (((12872 <= code) && (code <= 12879)) || (((12881 <= code) && (code <= 12895)) || (((12928 <= code) && (code <= 12937)) || (((12977 <= code) && (code <= 12991)) || (((13312 <= code) && (code <= 19903)) || (((19968 <= code) && (code <= 42124)) || (((42192 <= code) && (code <= 42237)) || (((42240 <= code) && (code <= 42508)) || ((42512 <= code) && (code <= 42539)))))))))))) : (((42560 <= code) && (code <= 42606)) || (((42623 <= code) && (code <= 42653)) || (((42656 <= code) && (code <= 42735)) || (((42775 <= code) && (code <= 42783)) || (((42786 <= code) && (code <= 42888)) || (((42891 <= code) && (code <= 42954)) || (((42960 <= code) && (code <= 42961)) || (((42966 <= code) && (code <= 42969)) || (((42994 <= code) && (code <= 43009)) || (((43011 <= code) && (code <= 43013)) || (((43015 <= code) && (code <= 43018)) || ((_Basics_modBy_fn(2, code) === 1) && ((42963 <= code) && (code <= 42965))))))))))))))) : ((code < 43395) ? (((43020 <= code) && (code <= 43042)) || (((43056 <= code) && (code <= 43061)) || (((43072 <= code) && (code <= 43123)) || (((43138 <= code) && (code <= 43187)) || (((43216 <= code) && (code <= 43225)) || (((43250 <= code) && (code <= 43255)) || ((code === 43259) || (((43261 <= code) && (code <= 43262)) || (((43264 <= code) && (code <= 43301)) || (((43312 <= code) && (code <= 43334)) || ((43360 <= code) && (code <= 43388)))))))))))) : (((43396 <= code) && (code <= 43442)) || (((43471 <= code) && (code <= 43481)) || (((43488 <= code) && (code <= 43492)) || (((43494 <= code) && (code <= 43518)) || (((43520 <= code) && (code <= 43560)) || (((43584 <= code) && (code <= 43586)) || (((43588 <= code) && (code <= 43595)) || (((43600 <= code) && (code <= 43609)) || (((43616 <= code) && (code <= 43638)) || ((code === 43642) || (((43646 <= code) && (code <= 43695)) || (code === 43697))))))))))))))))) : ((code < 71351) ? ((code < 67671) ? ((code < 65548) ? ((code < 64286) ? ((code < 43867) ? (((43701 <= code) && (code <= 43702)) || (((43705 <= code) && (code <= 43709)) || (((43739 <= code) && (code <= 43741)) || (((43744 <= code) && (code <= 43754)) || (((43762 <= code) && (code <= 43764)) || (((43777 <= code) && (code <= 43782)) || (((43785 <= code) && (code <= 43790)) || (((43793 <= code) && (code <= 43798)) || (((43808 <= code) && (code <= 43814)) || (((43816 <= code) && (code <= 43822)) || (((43824 <= code) && (code <= 43866)) || ((!_Basics_modBy_fn(2, code)) && ((43712 <= code) && (code <= 43714)))))))))))))) : (((43868 <= code) && (code <= 43881)) || (((43888 <= code) && (code <= 44002)) || (((44016 <= code) && (code <= 44025)) || (((44032 <= code) && (code <= 55203)) || (((55216 <= code) && (code <= 55238)) || (((55243 <= code) && (code <= 55291)) || (((63744 <= code) && (code <= 64109)) || (((64112 <= code) && (code <= 64217)) || (((64256 <= code) && (code <= 64262)) || (((64275 <= code) && (code <= 64279)) || (code === 64285)))))))))))) : ((code < 65135) ? (((64287 <= code) && (code <= 64296)) || (((64298 <= code) && (code <= 64310)) || (((64312 <= code) && (code <= 64316)) || ((code === 64318) || (((64320 <= code) && (code <= 64321)) || (((64323 <= code) && (code <= 64324)) || (((64326 <= code) && (code <= 64433)) || (((64467 <= code) && (code <= 64829)) || (((64848 <= code) && (code <= 64911)) || (((64914 <= code) && (code <= 64967)) || ((65008 <= code) && (code <= 65019)))))))))))) : (((65136 <= code) && (code <= 65140)) || (((65142 <= code) && (code <= 65276)) || (((65296 <= code) && (code <= 65305)) || (((65313 <= code) && (code <= 65338)) || (((65345 <= code) && (code <= 65370)) || (((65382 <= code) && (code <= 65470)) || (((65474 <= code) && (code <= 65479)) || (((65482 <= code) && (code <= 65487)) || (((65490 <= code) && (code <= 65495)) || (((65498 <= code) && (code <= 65500)) || ((65536 <= code) && (code <= 65547)))))))))))))) : ((code < 66775) ? ((code < 66272) ? (((65549 <= code) && (code <= 65574)) || (((65576 <= code) && (code <= 65594)) || (((65596 <= code) && (code <= 65597)) || (((65599 <= code) && (code <= 65613)) || (((65616 <= code) && (code <= 65629)) || (((65664 <= code) && (code <= 65786)) || (((65799 <= code) && (code <= 65843)) || (((65856 <= code) && (code <= 65912)) || (((65930 <= code) && (code <= 65931)) || (((66176 <= code) && (code <= 66204)) || ((66208 <= code) && (code <= 66256)))))))))))) : (((66273 <= code) && (code <= 66299)) || (((66304 <= code) && (code <= 66339)) || (((66349 <= code) && (code <= 66378)) || (((66384 <= code) && (code <= 66421)) || (((66432 <= code) && (code <= 66461)) || (((66464 <= code) && (code <= 66499)) || (((66504 <= code) && (code <= 66511)) || (((66513 <= code) && (code <= 66517)) || (((66560 <= code) && (code <= 66717)) || (((66720 <= code) && (code <= 66729)) || ((66736 <= code) && (code <= 66771))))))))))))) : ((code < 67071) ? (((66776 <= code) && (code <= 66811)) || (((66816 <= code) && (code <= 66855)) || (((66864 <= code) && (code <= 66915)) || (((66928 <= code) && (code <= 66938)) || (((66940 <= code) && (code <= 66954)) || (((66956 <= code) && (code <= 66962)) || (((66964 <= code) && (code <= 66965)) || (((66967 <= code) && (code <= 66977)) || (((66979 <= code) && (code <= 66993)) || (((66995 <= code) && (code <= 67001)) || ((67003 <= code) && (code <= 67004)))))))))))) : (((67072 <= code) && (code <= 67382)) || (((67392 <= code) && (code <= 67413)) || (((67424 <= code) && (code <= 67431)) || (((67456 <= code) && (code <= 67461)) || (((67463 <= code) && (code <= 67504)) || (((67506 <= code) && (code <= 67514)) || (((67584 <= code) && (code <= 67589)) || ((code === 67592) || (((67594 <= code) && (code <= 67637)) || (((67639 <= code) && (code <= 67640)) || ((code === 67644) || ((67647 <= code) && (code <= 67669)))))))))))))))) : ((code < 69871) ? ((code < 68471) ? ((code < 68116) ? (((67672 <= code) && (code <= 67702)) || (((67705 <= code) && (code <= 67742)) || (((67751 <= code) && (code <= 67759)) || (((67808 <= code) && (code <= 67826)) || (((67828 <= code) && (code <= 67829)) || (((67835 <= code) && (code <= 67867)) || (((67872 <= code) && (code <= 67897)) || (((67968 <= code) && (code <= 68023)) || (((68028 <= code) && (code <= 68047)) || (((68050 <= code) && (code <= 68096)) || ((68112 <= code) && (code <= 68115)))))))))))) : (((68117 <= code) && (code <= 68119)) || (((68121 <= code) && (code <= 68149)) || (((68160 <= code) && (code <= 68168)) || (((68192 <= code) && (code <= 68222)) || (((68224 <= code) && (code <= 68255)) || (((68288 <= code) && (code <= 68295)) || (((68297 <= code) && (code <= 68324)) || (((68331 <= code) && (code <= 68335)) || (((68352 <= code) && (code <= 68405)) || (((68416 <= code) && (code <= 68437)) || ((68440 <= code) && (code <= 68466))))))))))))) : ((code < 69423) ? (((68472 <= code) && (code <= 68497)) || (((68521 <= code) && (code <= 68527)) || (((68608 <= code) && (code <= 68680)) || (((68736 <= code) && (code <= 68786)) || (((68800 <= code) && (code <= 68850)) || (((68858 <= code) && (code <= 68899)) || (((68912 <= code) && (code <= 68921)) || (((69216 <= code) && (code <= 69246)) || (((69248 <= code) && (code <= 69289)) || (((69296 <= code) && (code <= 69297)) || ((69376 <= code) && (code <= 69415)))))))))))) : (((69424 <= code) && (code <= 69445)) || (((69457 <= code) && (code <= 69460)) || (((69488 <= code) && (code <= 69505)) || (((69552 <= code) && (code <= 69579)) || (((69600 <= code) && (code <= 69622)) || (((69635 <= code) && (code <= 69687)) || (((69714 <= code) && (code <= 69743)) || (((69745 <= code) && (code <= 69746)) || ((code === 69749) || (((69763 <= code) && (code <= 69807)) || ((69840 <= code) && (code <= 69864)))))))))))))) : ((code < 70404) ? ((code < 70112) ? (((69872 <= code) && (code <= 69881)) || (((69891 <= code) && (code <= 69926)) || (((69942 <= code) && (code <= 69951)) || ((code === 69956) || ((code === 69959) || (((69968 <= code) && (code <= 70002)) || ((code === 70006) || (((70019 <= code) && (code <= 70066)) || (((70081 <= code) && (code <= 70084)) || (((70096 <= code) && (code <= 70106)) || (code === 70108))))))))))) : (((70113 <= code) && (code <= 70132)) || (((70144 <= code) && (code <= 70161)) || (((70163 <= code) && (code <= 70187)) || (((70207 <= code) && (code <= 70208)) || (((70272 <= code) && (code <= 70278)) || ((code === 70280) || (((70282 <= code) && (code <= 70285)) || (((70287 <= code) && (code <= 70301)) || (((70303 <= code) && (code <= 70312)) || (((70320 <= code) && (code <= 70366)) || ((70384 <= code) && (code <= 70393))))))))))))) : ((code < 70735) ? (((70405 <= code) && (code <= 70412)) || (((70415 <= code) && (code <= 70416)) || (((70419 <= code) && (code <= 70440)) || (((70442 <= code) && (code <= 70448)) || (((70450 <= code) && (code <= 70451)) || (((70453 <= code) && (code <= 70457)) || ((code === 70461) || ((code === 70480) || (((70493 <= code) && (code <= 70497)) || (((70656 <= code) && (code <= 70708)) || ((70727 <= code) && (code <= 70730)))))))))))) : (((70736 <= code) && (code <= 70745)) || (((70751 <= code) && (code <= 70753)) || (((70784 <= code) && (code <= 70831)) || (((70852 <= code) && (code <= 70853)) || ((code === 70855) || (((70864 <= code) && (code <= 70873)) || (((71040 <= code) && (code <= 71086)) || (((71128 <= code) && (code <= 71131)) || (((71168 <= code) && (code <= 71215)) || ((code === 71236) || (((71248 <= code) && (code <= 71257)) || ((71296 <= code) && (code <= 71338))))))))))))))))) : ((code < 119893) ? ((code < 73727) ? ((code < 72703) ? ((code < 71959) ? ((code === 71352) || (((71360 <= code) && (code <= 71369)) || (((71424 <= code) && (code <= 71450)) || (((71472 <= code) && (code <= 71483)) || (((71488 <= code) && (code <= 71494)) || (((71680 <= code) && (code <= 71723)) || (((71840 <= code) && (code <= 71922)) || (((71935 <= code) && (code <= 71942)) || ((code === 71945) || (((71948 <= code) && (code <= 71955)) || ((71957 <= code) && (code <= 71958)))))))))))) : (((71960 <= code) && (code <= 71983)) || (((72016 <= code) && (code <= 72025)) || (((72096 <= code) && (code <= 72103)) || (((72106 <= code) && (code <= 72144)) || ((code === 72192) || (((72203 <= code) && (code <= 72242)) || ((code === 72250) || ((code === 72272) || (((72284 <= code) && (code <= 72329)) || ((code === 72349) || (((72368 <= code) && (code <= 72440)) || ((_Basics_modBy_fn(2, code) === 1) && (((71999 <= code) && (code <= 72001)) || ((72161 <= code) && (code <= 72163)))))))))))))))) : ((code < 73062) ? (((72704 <= code) && (code <= 72712)) || (((72714 <= code) && (code <= 72750)) || ((code === 72768) || (((72784 <= code) && (code <= 72812)) || (((72818 <= code) && (code <= 72847)) || (((72960 <= code) && (code <= 72966)) || (((72968 <= code) && (code <= 72969)) || (((72971 <= code) && (code <= 73008)) || ((code === 73030) || (((73040 <= code) && (code <= 73049)) || ((73056 <= code) && (code <= 73061)))))))))))) : (((73063 <= code) && (code <= 73064)) || (((73066 <= code) && (code <= 73097)) || ((code === 73112) || (((73120 <= code) && (code <= 73129)) || (((73440 <= code) && (code <= 73458)) || ((code === 73474) || (((73476 <= code) && (code <= 73488)) || (((73490 <= code) && (code <= 73523)) || (((73552 <= code) && (code <= 73561)) || ((code === 73648) || ((73664 <= code) && (code <= 73684)))))))))))))) : ((code < 94098) ? ((code < 92863) ? (((73728 <= code) && (code <= 74649)) || (((74752 <= code) && (code <= 74862)) || (((74880 <= code) && (code <= 75075)) || (((77712 <= code) && (code <= 77808)) || (((77824 <= code) && (code <= 78895)) || (((78913 <= code) && (code <= 78918)) || (((82944 <= code) && (code <= 83526)) || (((92160 <= code) && (code <= 92728)) || (((92736 <= code) && (code <= 92766)) || (((92768 <= code) && (code <= 92777)) || ((92784 <= code) && (code <= 92862)))))))))))) : (((92864 <= code) && (code <= 92873)) || (((92880 <= code) && (code <= 92909)) || (((92928 <= code) && (code <= 92975)) || (((92992 <= code) && (code <= 92995)) || (((93008 <= code) && (code <= 93017)) || (((93019 <= code) && (code <= 93025)) || (((93027 <= code) && (code <= 93047)) || (((93053 <= code) && (code <= 93071)) || (((93760 <= code) && (code <= 93846)) || (((93952 <= code) && (code <= 94026)) || (code === 94032)))))))))))) : ((code < 110927) ? (((94099 <= code) && (code <= 94111)) || (((94176 <= code) && (code <= 94177)) || ((code === 94179) || (((94208 <= code) && (code <= 100343)) || (((100352 <= code) && (code <= 101589)) || (((101632 <= code) && (code <= 101640)) || (((110576 <= code) && (code <= 110579)) || (((110581 <= code) && (code <= 110587)) || (((110589 <= code) && (code <= 110590)) || (((110592 <= code) && (code <= 110882)) || (code === 110898))))))))))) : (((110928 <= code) && (code <= 110930)) || ((code === 110933) || (((110948 <= code) && (code <= 110951)) || (((110960 <= code) && (code <= 111355)) || (((113664 <= code) && (code <= 113770)) || (((113776 <= code) && (code <= 113788)) || (((113792 <= code) && (code <= 113800)) || (((113808 <= code) && (code <= 113817)) || (((119488 <= code) && (code <= 119507)) || (((119520 <= code) && (code <= 119539)) || (((119648 <= code) && (code <= 119672)) || ((119808 <= code) && (code <= 119892)))))))))))))))) : ((code < 124911) ? ((code < 120597) ? ((code < 120085) ? (((119894 <= code) && (code <= 119964)) || (((119966 <= code) && (code <= 119967)) || ((code === 119970) || (((119973 <= code) && (code <= 119974)) || (((119977 <= code) && (code <= 119980)) || (((119982 <= code) && (code <= 119993)) || ((code === 119995) || (((119997 <= code) && (code <= 120003)) || (((120005 <= code) && (code <= 120069)) || (((120071 <= code) && (code <= 120074)) || ((120077 <= code) && (code <= 120084)))))))))))) : (((120086 <= code) && (code <= 120092)) || (((120094 <= code) && (code <= 120121)) || (((120123 <= code) && (code <= 120126)) || (((120128 <= code) && (code <= 120132)) || ((code === 120134) || (((120138 <= code) && (code <= 120144)) || (((120146 <= code) && (code <= 120485)) || (((120488 <= code) && (code <= 120512)) || (((120514 <= code) && (code <= 120538)) || (((120540 <= code) && (code <= 120570)) || ((120572 <= code) && (code <= 120596))))))))))))) : ((code < 123135) ? (((120598 <= code) && (code <= 120628)) || (((120630 <= code) && (code <= 120654)) || (((120656 <= code) && (code <= 120686)) || (((120688 <= code) && (code <= 120712)) || (((120714 <= code) && (code <= 120744)) || (((120746 <= code) && (code <= 120770)) || (((120772 <= code) && (code <= 120779)) || (((120782 <= code) && (code <= 120831)) || (((122624 <= code) && (code <= 122654)) || (((122661 <= code) && (code <= 122666)) || ((122928 <= code) && (code <= 122989)))))))))))) : (((123136 <= code) && (code <= 123180)) || (((123191 <= code) && (code <= 123197)) || (((123200 <= code) && (code <= 123209)) || ((code === 123214) || (((123536 <= code) && (code <= 123565)) || (((123584 <= code) && (code <= 123627)) || (((123632 <= code) && (code <= 123641)) || (((124112 <= code) && (code <= 124139)) || (((124144 <= code) && (code <= 124153)) || (((124896 <= code) && (code <= 124902)) || (((124904 <= code) && (code <= 124907)) || ((124909 <= code) && (code <= 124910))))))))))))))) : ((code < 126560) ? ((code < 126463) ? (((124912 <= code) && (code <= 124926)) || (((124928 <= code) && (code <= 125124)) || (((125127 <= code) && (code <= 125135)) || (((125184 <= code) && (code <= 125251)) || ((code === 125259) || (((125264 <= code) && (code <= 125273)) || (((126065 <= code) && (code <= 126123)) || (((126125 <= code) && (code <= 126127)) || (((126129 <= code) && (code <= 126132)) || (((126209 <= code) && (code <= 126253)) || ((126255 <= code) && (code <= 126269)))))))))))) : (((126464 <= code) && (code <= 126467)) || (((126469 <= code) && (code <= 126495)) || (((126497 <= code) && (code <= 126498)) || ((code === 126500) || ((code === 126503) || (((126505 <= code) && (code <= 126514)) || (((126516 <= code) && (code <= 126519)) || ((code === 126530) || (((126541 <= code) && (code <= 126543)) || (((126545 <= code) && (code <= 126546)) || ((code === 126548) || ((_Basics_modBy_fn(2, code) === 1) && (((126521 <= code) && (code <= 126523)) || (((126535 <= code) && (code <= 126539)) || ((126551 <= code) && (code <= 126559))))))))))))))))) : ((code < 126634) ? (((126561 <= code) && (code <= 126562)) || ((code === 126564) || (((126567 <= code) && (code <= 126570)) || (((126572 <= code) && (code <= 126578)) || (((126580 <= code) && (code <= 126583)) || (((126585 <= code) && (code <= 126588)) || ((code === 126590) || (((126592 <= code) && (code <= 126601)) || (((126603 <= code) && (code <= 126619)) || (((126625 <= code) && (code <= 126627)) || ((126629 <= code) && (code <= 126633)))))))))))) : (((126635 <= code) && (code <= 126651)) || (((127232 <= code) && (code <= 127244)) || (((130032 <= code) && (code <= 130041)) || (((131072 <= code) && (code <= 173791)) || (((173824 <= code) && (code <= 177977)) || (((177984 <= code) && (code <= 178205)) || (((178208 <= code) && (code <= 183969)) || (((183984 <= code) && (code <= 191456)) || (((191472 <= code) && (code <= 192093)) || (((194560 <= code) && (code <= 195101)) || (((196608 <= code) && (code <= 201546)) || ((201552 <= code) && (code <= 205743))))))))))))))))))))))));
};
var $elm$core$String$fromChar = function (_char) {
    return _String_cons_fn(_char, "");
};
var $elm$core$String$toLower = _String_toLower;
var $elm$core$String$toUpper = _String_toUpper;
var $stil4m$elm_syntax$Char$Extra$unicodeIsLowerFast = function (c) {
    var code = $elm$core$Char$toCode(c);
    var cString = $elm$core$String$fromChar(c);
    return $stil4m$elm_syntax$Char$Extra$charCodeIsLower(code) || ((_Utils_eq($elm$core$String$toLower(cString), cString + "") && (!_Utils_eq($elm$core$String$toUpper(cString), cString + ""))) ? ((code <= 836) || (((838 <= code) && (code <= 8559)) || (((8576 <= code) && (code <= 9423)) || ((9450 <= code) && (code <= 983040))))) : ((code < 43001) ? ((code < 8457) ? ((code < 590) ? (((311 <= code) && (code <= 312)) || (((396 <= code) && (code <= 397)) || (((409 <= code) && (code <= 411)) || (((426 <= code) && (code <= 427)) || (((441 <= code) && (code <= 442)) || (((445 <= code) && (code <= 447)) || ((code === 545) || ((563 <= code) && (code <= 569))))))))) : (((591 <= code) && (code <= 659)) || (((661 <= code) && (code <= 687)) || (((1019 <= code) && (code <= 1020)) || (((1376 <= code) && (code <= 1416)) || (((7424 <= code) && (code <= 7467)) || (((7531 <= code) && (code <= 7543)) || (((7545 <= code) && (code <= 7578)) || (((7829 <= code) && (code <= 7837)) || (code === 7839)))))))))) : ((code < 11376) ? ((code === 8458) || (((8462 <= code) && (code <= 8463)) || ((code === 8467) || ((code === 8495) || ((code === 8500) || ((code === 8505) || (((8508 <= code) && (code <= 8509)) || ((8518 <= code) && (code <= 8521))))))))) : ((code === 11377) || (((11379 <= code) && (code <= 11380)) || (((11382 <= code) && (code <= 11387)) || (((11491 <= code) && (code <= 11492)) || (((42799 <= code) && (code <= 42801)) || (((42865 <= code) && (code <= 42872)) || ((code === 42894) || (((42899 <= code) && (code <= 42901)) || ((code === 42927) || ((_Basics_modBy_fn(2, code) === 1) && ((42963 <= code) && (code <= 42965)))))))))))))) : ((code < 120353) ? ((code < 119994) ? ((code === 43002) || (((43824 <= code) && (code <= 43866)) || (((43872 <= code) && (code <= 43880)) || (((119834 <= code) && (code <= 119859)) || (((119886 <= code) && (code <= 119892)) || (((119894 <= code) && (code <= 119911)) || (((119938 <= code) && (code <= 119963)) || ((119990 <= code) && (code <= 119993))))))))) : ((code === 119995) || (((119997 <= code) && (code <= 120003)) || (((120005 <= code) && (code <= 120015)) || (((120042 <= code) && (code <= 120067)) || (((120094 <= code) && (code <= 120119)) || (((120146 <= code) && (code <= 120171)) || (((120198 <= code) && (code <= 120223)) || (((120250 <= code) && (code <= 120275)) || ((120302 <= code) && (code <= 120327))))))))))) : ((code < 120655) ? (((120354 <= code) && (code <= 120379)) || (((120406 <= code) && (code <= 120431)) || (((120458 <= code) && (code <= 120485)) || (((120514 <= code) && (code <= 120538)) || (((120540 <= code) && (code <= 120545)) || (((120572 <= code) && (code <= 120596)) || (((120598 <= code) && (code <= 120603)) || ((120630 <= code) && (code <= 120654))))))))) : (((120656 <= code) && (code <= 120661)) || (((120688 <= code) && (code <= 120712)) || (((120714 <= code) && (code <= 120719)) || (((120746 <= code) && (code <= 120770)) || (((120772 <= code) && (code <= 120777)) || ((code === 120779) || (((122624 <= code) && (code <= 122633)) || (((122635 <= code) && (code <= 122654)) || ((122661 <= code) && (code <= 122666))))))))))))));
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode = $stil4m$elm_syntax$ParserFast$ifFollowedByWhileValidateMapWithRangeWithoutLinebreak_fn($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Char$Extra$unicodeIsLowerFast, $stil4m$elm_syntax$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast, $stil4m$elm_syntax$Elm$Parser$Tokens$isNotReserved);
var $stil4m$elm_syntax$Elm$Syntax$Expression$GLSLExpression = function (a) {
    return { $: 23, a: a };
};
var $stil4m$elm_syntax$ParserFast$atLeastOneWhile = function (isGood) {
    return function (s0) {
        var s1 = $stil4m$elm_syntax$ParserFast$skipWhileHelp_fn(isGood, s0.J, s0.bu, s0.dW, s0.H, s0.ac);
        return (!(s0.J - s1.J)) ? $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingAnyChar_fn(s0.bu, s0.dW)) : $stil4m$elm_syntax$ParserFast$Good_fn(_String_slice_fn(s0.J, s1.J, s0.H), s1);
    };
};
var $stil4m$elm_syntax$ParserFast$loopUntilHelp_fn = function (committedSoFar, endParser, element, soFar, reduce, foldedToRes, s0) {
    loopUntilHelp: while (true) {
        var parseEnd = endParser;
        var parseElement = element;
        var _v0 = parseEnd(s0);
        if (!_v0.$) {
            var s1 = _v0.b;
            return $stil4m$elm_syntax$ParserFast$Good_fn(foldedToRes(soFar), s1);
        }
        else {
            var endCommitted = _v0.a;
            var endX = _v0.b;
            if (endCommitted) {
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, endX);
            }
            else {
                var _v1 = parseElement(s0);
                if (!_v1.$) {
                    var elementResult = _v1.a;
                    var s1 = _v1.b;
                    var $temp$committedSoFar = true, $temp$endParser = endParser, $temp$element = element, $temp$soFar = A2(reduce, elementResult, soFar), $temp$reduce = reduce, $temp$foldedToRes = foldedToRes, $temp$s0 = s1;
                    committedSoFar = $temp$committedSoFar;
                    endParser = $temp$endParser;
                    element = $temp$element;
                    soFar = $temp$soFar;
                    reduce = $temp$reduce;
                    foldedToRes = $temp$foldedToRes;
                    s0 = $temp$s0;
                    continue loopUntilHelp;
                }
                else {
                    var elementCommitted = _v1.a;
                    var x = _v1.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(committedSoFar || elementCommitted, x);
                }
            }
        }
    }
}, $stil4m$elm_syntax$ParserFast$loopUntilHelp_fn_unwrapped = function (committedSoFar, endParser, element, soFar, reduce, foldedToRes, s0) {
    loopUntilHelp: while (true) {
        var parseEnd = endParser;
        var parseElement = element;
        var _v0 = parseEnd(s0);
        if (!_v0.$) {
            var s1 = _v0.b;
            return $stil4m$elm_syntax$ParserFast$Good_fn(foldedToRes(soFar), s1);
        }
        else {
            var endCommitted = _v0.a;
            var endX = _v0.b;
            if (endCommitted) {
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, endX);
            }
            else {
                var _v1 = parseElement(s0);
                if (!_v1.$) {
                    var elementResult = _v1.a;
                    var s1 = _v1.b;
                    var $temp$committedSoFar = true, $temp$endParser = endParser, $temp$element = element, $temp$soFar = reduce(elementResult, soFar), $temp$reduce = reduce, $temp$foldedToRes = foldedToRes, $temp$s0 = s1;
                    committedSoFar = $temp$committedSoFar;
                    endParser = $temp$endParser;
                    element = $temp$element;
                    soFar = $temp$soFar;
                    reduce = $temp$reduce;
                    foldedToRes = $temp$foldedToRes;
                    s0 = $temp$s0;
                    continue loopUntilHelp;
                }
                else {
                    var elementCommitted = _v1.a;
                    var x = _v1.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(committedSoFar || elementCommitted, x);
                }
            }
        }
    }
}, $stil4m$elm_syntax$ParserFast$loopUntilHelp = F7($stil4m$elm_syntax$ParserFast$loopUntilHelp_fn);
var $stil4m$elm_syntax$ParserFast$loopUntil_fn = function (endParser, element, initialFolded, reduce, foldedToRes) {
    return function (s) {
        return $stil4m$elm_syntax$ParserFast$loopUntilHelp_fn(false, endParser, element, initialFolded, reduce, foldedToRes, s);
    };
}, $stil4m$elm_syntax$ParserFast$loopUntil = F5($stil4m$elm_syntax$ParserFast$loopUntil_fn);
var $stil4m$elm_syntax$ParserFast$mapWithRange_fn = function (combineStartAndResult, _v0) {
    var parse = _v0;
    return function (s0) {
        var _v1 = parse(s0);
        if (!_v1.$) {
            var a = _v1.a;
            var s1 = _v1.b;
            return $stil4m$elm_syntax$ParserFast$Good_fn(A2(combineStartAndResult, {
                b_: { cJ: s1.dW, bu: s1.bu },
                cf: { cJ: s0.dW, bu: s0.bu }
            }, a), s1);
        }
        else {
            var committed = _v1.a;
            var x = _v1.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
    };
}, $stil4m$elm_syntax$ParserFast$mapWithRange_fn_unwrapped = function (combineStartAndResult, _v0) {
    var parse = _v0;
    return function (s0) {
        var _v1 = parse(s0);
        if (!_v1.$) {
            var a = _v1.a;
            var s1 = _v1.b;
            return $stil4m$elm_syntax$ParserFast$Good_fn(combineStartAndResult({
                b_: { cJ: s1.dW, bu: s1.bu },
                cf: { cJ: s0.dW, bu: s0.bu }
            }, a), s1);
        }
        else {
            var committed = _v1.a;
            var x = _v1.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
    };
}, $stil4m$elm_syntax$ParserFast$mapWithRange = F2($stil4m$elm_syntax$ParserFast$mapWithRange_fn);
var $stil4m$elm_syntax$Elm$Parser$Expression$glslExpressionAfterOpeningSquareBracket = $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("glsl|", $stil4m$elm_syntax$ParserFast$mapWithRange_fn_unwrapped(function (range, s) {
    return {
        C: $stil4m$elm_syntax$Rope$empty,
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({
            b_: { cJ: range.b_.cJ + 2, bu: range.b_.bu },
            cf: { cJ: range.cf.cJ - 6, bu: range.cf.bu }
        }, $stil4m$elm_syntax$Elm$Syntax$Expression$GLSLExpression(s))
    };
}, $stil4m$elm_syntax$ParserFast$loopUntil_fn($stil4m$elm_syntax$ParserFast$symbol_fn("|]", 0), $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$ParserFast$symbol_fn("|", "|"), $stil4m$elm_syntax$ParserFast$atLeastOneWhile(function (c) {
    return c !== "|";
})), "", F2(function (extension, soFar) {
    return soFar + (extension + "");
}), $elm$core$Basics$identity)));
var $stil4m$elm_syntax$ParserFast$ExpectingKeyword_fn = function (a, b, c) {
    return { $: 3, a: a, b: b, c: c };
}, $stil4m$elm_syntax$ParserFast$ExpectingKeyword = F3($stil4m$elm_syntax$ParserFast$ExpectingKeyword_fn);
var $stil4m$elm_syntax$Char$Extra$isLatinAlphaNumOrUnderscoreFast = function (c) {
    var code = $elm$core$Char$toCode(c);
    return $stil4m$elm_syntax$Char$Extra$charCodeIsLower(code) || ($stil4m$elm_syntax$Char$Extra$charCodeIsUpper(code) || ($stil4m$elm_syntax$Char$Extra$charCodeIsDigit(code) || (code === 95)));
};
var $stil4m$elm_syntax$ParserFast$isSubCharAlphaNumOrUnderscore_fn = function (offset, string) {
    return _String_any_fn($stil4m$elm_syntax$Char$Extra$isLatinAlphaNumOrUnderscoreFast, _String_slice_fn(offset, offset + 1, string));
}, $stil4m$elm_syntax$ParserFast$isSubCharAlphaNumOrUnderscore = F2($stil4m$elm_syntax$ParserFast$isSubCharAlphaNumOrUnderscore_fn);
var $stil4m$elm_syntax$ParserFast$keyword_fn = function (kwd, res) {
    var kwdLength = $elm$core$String$length(kwd);
    return function (s) {
        var newOffset = s.J + kwdLength;
        return (_Utils_eq(_String_slice_fn(s.J, newOffset, s.H), kwd + "") && (!$stil4m$elm_syntax$ParserFast$isSubCharAlphaNumOrUnderscore_fn(newOffset, s.H))) ? $stil4m$elm_syntax$ParserFast$Good_fn(res, { dW: s.dW + kwdLength, ac: s.ac, J: newOffset, bu: s.bu, H: s.H }) : $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingKeyword_fn(s.bu, s.dW, kwd));
    };
}, $stil4m$elm_syntax$ParserFast$keyword = F2($stil4m$elm_syntax$ParserFast$keyword_fn);
var $stil4m$elm_syntax$Elm$Parser$Tokens$inToken = $stil4m$elm_syntax$ParserFast$keyword_fn("in", 0);
var $stil4m$elm_syntax$ParserFast$keywordFollowedBy_fn = function (kwd, _v0) {
    var parseNext = _v0;
    var kwdLength = $elm$core$String$length(kwd);
    return function (s) {
        var newOffset = s.J + kwdLength;
        return (_Utils_eq(_String_slice_fn(s.J, newOffset, s.H), kwd + "") && (!$stil4m$elm_syntax$ParserFast$isSubCharAlphaNumOrUnderscore_fn(newOffset, s.H))) ? $stil4m$elm_syntax$ParserFast$pStepCommit(parseNext({ dW: s.dW + kwdLength, ac: s.ac, J: newOffset, bu: s.bu, H: s.H })) : $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingKeyword_fn(s.bu, s.dW, kwd));
    };
}, $stil4m$elm_syntax$ParserFast$keywordFollowedBy = F2($stil4m$elm_syntax$ParserFast$keywordFollowedBy_fn);
var $stil4m$elm_syntax$ParserFast$map2_fn = function (func, _v0, _v1) {
    var parseA = _v0;
    var parseB = _v1;
    return function (s0) {
        var _v2 = parseA(s0);
        if (_v2.$ === 1) {
            var committed = _v2.a;
            var x = _v2.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v2.a;
            var s1 = _v2.b;
            var _v3 = parseB(s1);
            if (_v3.$ === 1) {
                var x = _v3.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v3.a;
                var s2 = _v3.b;
                return $stil4m$elm_syntax$ParserFast$Good_fn(A2(func, a, b), s2);
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped = function (func, _v0, _v1) {
    var parseA = _v0;
    var parseB = _v1;
    return function (s0) {
        var _v2 = parseA(s0);
        if (_v2.$ === 1) {
            var committed = _v2.a;
            var x = _v2.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v2.a;
            var s1 = _v2.b;
            var _v3 = parseB(s1);
            if (_v3.$ === 1) {
                var x = _v3.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v3.a;
                var s2 = _v3.b;
                return $stil4m$elm_syntax$ParserFast$Good_fn(func(a, b), s2);
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map2 = F3($stil4m$elm_syntax$ParserFast$map2_fn);
var $stil4m$elm_syntax$ParserFast$columnIndentAndThen = function (callback) {
    return function (s) {
        var _v0 = A2(callback, s.dW, s.ac);
        var parse = _v0;
        return parse(s);
    };
}, $stil4m$elm_syntax$ParserFast$columnIndentAndThen_unwrapped = function (callback) {
    return function (s) {
        var _v0 = callback(s.dW, s.ac);
        var parse = _v0;
        return parse(s);
    };
};
var $stil4m$elm_syntax$ParserFast$ExpectingCustom_fn = function (a, b, c) {
    return { $: 6, a: a, b: b, c: c };
}, $stil4m$elm_syntax$ParserFast$ExpectingCustom = F3($stil4m$elm_syntax$ParserFast$ExpectingCustom_fn);
var $stil4m$elm_syntax$ParserFast$problem = function (msg) {
    return function (s) {
        return $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingCustom_fn(s.bu, s.dW, msg));
    };
};
var $stil4m$elm_syntax$Elm$Parser$Layout$problemTopIndentation = $stil4m$elm_syntax$ParserFast$problem("must be on top indentation");
var $stil4m$elm_syntax$Elm$Parser$Layout$onTopIndentationFollowedBy = function (nextParser) {
    return $stil4m$elm_syntax$ParserFast$columnIndentAndThen_unwrapped(function (column, indent) {
        return (!(column - indent)) ? nextParser : $stil4m$elm_syntax$Elm$Parser$Layout$problemTopIndentation;
    });
};
var $stil4m$elm_syntax$ParserFast$skipWhileWhitespaceHelp_fn = function (offset, row, col, src, indent) {
    skipWhileWhitespaceHelp: while (true) {
        var _v0 = _String_slice_fn(offset, offset + 1, src);
        switch (_v0) {
            case " ":
                var $temp$offset = offset + 1, $temp$row = row, $temp$col = col + 1, $temp$src = src, $temp$indent = indent;
                offset = $temp$offset;
                row = $temp$row;
                col = $temp$col;
                src = $temp$src;
                indent = $temp$indent;
                continue skipWhileWhitespaceHelp;
            case "\n":
                var $temp$offset = offset + 1, $temp$row = row + 1, $temp$col = 1, $temp$src = src, $temp$indent = indent;
                offset = $temp$offset;
                row = $temp$row;
                col = $temp$col;
                src = $temp$src;
                indent = $temp$indent;
                continue skipWhileWhitespaceHelp;
            case "\r":
                var $temp$offset = offset + 1, $temp$row = row, $temp$col = col + 1, $temp$src = src, $temp$indent = indent;
                offset = $temp$offset;
                row = $temp$row;
                col = $temp$col;
                src = $temp$src;
                indent = $temp$indent;
                continue skipWhileWhitespaceHelp;
            default:
                return { dW: col, ac: indent, J: offset, bu: row, H: src };
        }
    }
}, $stil4m$elm_syntax$ParserFast$skipWhileWhitespaceHelp = F5($stil4m$elm_syntax$ParserFast$skipWhileWhitespaceHelp_fn);
var $stil4m$elm_syntax$ParserFast$followedBySkipWhileWhitespace = function (_v0) {
    var parseBefore = _v0;
    return function (s0) {
        var _v1 = parseBefore(s0);
        if (!_v1.$) {
            var res = _v1.a;
            var s1 = _v1.b;
            var s2 = $stil4m$elm_syntax$ParserFast$skipWhileWhitespaceHelp_fn(s1.J, s1.bu, s1.dW, s1.H, s1.ac);
            return $stil4m$elm_syntax$ParserFast$Good_fn(res, s2);
        }
        else {
            var bad = _v1;
            return bad;
        }
    };
};
var $stil4m$elm_syntax$ParserFast$map2OrSucceed_fn = function (func, _v0, _v1, fallback) {
    var parseA = _v0;
    var parseB = _v1;
    return function (s0) {
        var _v2 = parseA(s0);
        if (_v2.$ === 1) {
            var c1 = _v2.a;
            var x = _v2.b;
            return c1 ? $stil4m$elm_syntax$ParserFast$Bad_fn(true, x) : $stil4m$elm_syntax$ParserFast$Good_fn(fallback, s0);
        }
        else {
            var a = _v2.a;
            var s1 = _v2.b;
            var _v3 = parseB(s1);
            if (_v3.$ === 1) {
                var x = _v3.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v3.a;
                var s2 = _v3.b;
                return $stil4m$elm_syntax$ParserFast$Good_fn(A2(func, a, b), s2);
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map2OrSucceed_fn_unwrapped = function (func, _v0, _v1, fallback) {
    var parseA = _v0;
    var parseB = _v1;
    return function (s0) {
        var _v2 = parseA(s0);
        if (_v2.$ === 1) {
            var c1 = _v2.a;
            var x = _v2.b;
            return c1 ? $stil4m$elm_syntax$ParserFast$Bad_fn(true, x) : $stil4m$elm_syntax$ParserFast$Good_fn(fallback, s0);
        }
        else {
            var a = _v2.a;
            var s1 = _v2.b;
            var _v3 = parseB(s1);
            if (_v3.$ === 1) {
                var x = _v3.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v3.a;
                var s2 = _v3.b;
                return $stil4m$elm_syntax$ParserFast$Good_fn(func(a, b), s2);
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map2OrSucceed = F4($stil4m$elm_syntax$ParserFast$map2OrSucceed_fn);
var $stil4m$elm_syntax$ParserFast$offsetSourceAndThen = function (callback) {
    return function (s) {
        var _v0 = A2(callback, s.J, s.H);
        var parse = _v0;
        return parse(s);
    };
}, $stil4m$elm_syntax$ParserFast$offsetSourceAndThen_unwrapped = function (callback) {
    return function (s) {
        var _v0 = callback(s.J, s.H);
        var parse = _v0;
        return parse(s);
    };
};
var $stil4m$elm_syntax$Elm$Parser$Comments$problemUnexpectedDocumentation = $stil4m$elm_syntax$ParserFast$problem("unexpected documentation comment");
var $stil4m$elm_syntax$Elm$Parser$Comments$multilineComment = $stil4m$elm_syntax$ParserFast$offsetSourceAndThen_unwrapped(function (offset, source) {
    var _v0 = _String_slice_fn(offset + 2, offset + 3, source);
    if (_v0 === "|") {
        return $stil4m$elm_syntax$Elm$Parser$Comments$problemUnexpectedDocumentation;
    }
    else {
        return $stil4m$elm_syntax$Elm$Parser$Comments$multiLineCommentNoCheck;
    }
});
var $stil4m$elm_syntax$Rope$Leaf_fn = function (a, b) {
    return { $: 0, a: a, b: b };
}, $stil4m$elm_syntax$Rope$Leaf = F2($stil4m$elm_syntax$Rope$Leaf_fn);
var $stil4m$elm_syntax$Rope$one = function (onlyElement) {
    return $stil4m$elm_syntax$Rope$Leaf_fn(onlyElement, 0);
};
var $stil4m$elm_syntax$ParserFast$loopWhileSucceedsHelp_fn = function (element, soFar, reduce, foldedToRes, s0) {
    loopWhileSucceedsHelp: while (true) {
        var parseElement = element;
        var _v0 = parseElement(s0);
        if (!_v0.$) {
            var elementResult = _v0.a;
            var s1 = _v0.b;
            var $temp$element = element, $temp$soFar = A2(reduce, elementResult, soFar), $temp$reduce = reduce, $temp$foldedToRes = foldedToRes, $temp$s0 = s1;
            element = $temp$element;
            soFar = $temp$soFar;
            reduce = $temp$reduce;
            foldedToRes = $temp$foldedToRes;
            s0 = $temp$s0;
            continue loopWhileSucceedsHelp;
        }
        else {
            var elementCommitted = _v0.a;
            var x = _v0.b;
            return elementCommitted ? $stil4m$elm_syntax$ParserFast$Bad_fn(true, x) : $stil4m$elm_syntax$ParserFast$Good_fn(foldedToRes(soFar), s0);
        }
    }
}, $stil4m$elm_syntax$ParserFast$loopWhileSucceedsHelp_fn_unwrapped = function (element, soFar, reduce, foldedToRes, s0) {
    loopWhileSucceedsHelp: while (true) {
        var parseElement = element;
        var _v0 = parseElement(s0);
        if (!_v0.$) {
            var elementResult = _v0.a;
            var s1 = _v0.b;
            var $temp$element = element, $temp$soFar = reduce(elementResult, soFar), $temp$reduce = reduce, $temp$foldedToRes = foldedToRes, $temp$s0 = s1;
            element = $temp$element;
            soFar = $temp$soFar;
            reduce = $temp$reduce;
            foldedToRes = $temp$foldedToRes;
            s0 = $temp$s0;
            continue loopWhileSucceedsHelp;
        }
        else {
            var elementCommitted = _v0.a;
            var x = _v0.b;
            return elementCommitted ? $stil4m$elm_syntax$ParserFast$Bad_fn(true, x) : $stil4m$elm_syntax$ParserFast$Good_fn(foldedToRes(soFar), s0);
        }
    }
}, $stil4m$elm_syntax$ParserFast$loopWhileSucceedsHelp = F5($stil4m$elm_syntax$ParserFast$loopWhileSucceedsHelp_fn);
var $stil4m$elm_syntax$ParserFast$loopWhileSucceeds_fn = function (element, initialFolded, reduce, foldedToRes) {
    return function (s) {
        return $stil4m$elm_syntax$ParserFast$loopWhileSucceedsHelp_fn(element, initialFolded, reduce, foldedToRes, s);
    };
}, $stil4m$elm_syntax$ParserFast$loopWhileSucceeds = F4($stil4m$elm_syntax$ParserFast$loopWhileSucceeds_fn);
var $stil4m$elm_syntax$Rope$prependToFilled_fn = function (rightLikelyFilled, left) {
    if (left.$ === 1) {
        return $elm$core$Maybe$Just(rightLikelyFilled);
    }
    else {
        var leftLikelyFilled = left.a;
        return $elm$core$Maybe$Just($stil4m$elm_syntax$Rope$Branch2_fn(leftLikelyFilled, rightLikelyFilled));
    }
}, $stil4m$elm_syntax$Rope$prependToFilled = F2($stil4m$elm_syntax$Rope$prependToFilled_fn);
var $stil4m$elm_syntax$ParserFast$whileMapWithRange_fn = function (isGood, rangeAndConsumedStringToRes) {
    return function (s0) {
        var s1 = $stil4m$elm_syntax$ParserFast$skipWhileHelp_fn(isGood, s0.J, s0.bu, s0.dW, s0.H, s0.ac);
        return $stil4m$elm_syntax$ParserFast$Good_fn(A2(rangeAndConsumedStringToRes, {
            b_: { cJ: s1.dW, bu: s1.bu },
            cf: { cJ: s0.dW, bu: s0.bu }
        }, _String_slice_fn(s0.J, s1.J, s0.H)), s1);
    };
}, $stil4m$elm_syntax$ParserFast$whileMapWithRange_fn_unwrapped = function (isGood, rangeAndConsumedStringToRes) {
    return function (s0) {
        var s1 = $stil4m$elm_syntax$ParserFast$skipWhileHelp_fn(isGood, s0.J, s0.bu, s0.dW, s0.H, s0.ac);
        return $stil4m$elm_syntax$ParserFast$Good_fn(rangeAndConsumedStringToRes({
            b_: { cJ: s1.dW, bu: s1.bu },
            cf: { cJ: s0.dW, bu: s0.bu }
        }, _String_slice_fn(s0.J, s1.J, s0.H)), s1);
    };
}, $stil4m$elm_syntax$ParserFast$whileMapWithRange = F2($stil4m$elm_syntax$ParserFast$whileMapWithRange_fn);
var $stil4m$elm_syntax$Elm$Parser$Comments$singleLineComment = $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("--", $stil4m$elm_syntax$ParserFast$whileMapWithRange_fn_unwrapped(function (c) {
    switch (c) {
        case "\r":
            return false;
        case "\n":
            return false;
        default:
            return !$stil4m$elm_syntax$Char$Extra$isUtf16Surrogate(c);
    }
}, function (range, content) {
    return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({
        b_: { cJ: range.b_.cJ, bu: range.cf.bu },
        cf: { cJ: range.cf.cJ - 2, bu: range.cf.bu }
    }, "--" + content);
}));
var $stil4m$elm_syntax$Elm$Parser$Layout$whitespaceAndCommentsOrEmptyLoop = $stil4m$elm_syntax$ParserFast$loopWhileSucceeds_fn($stil4m$elm_syntax$ParserFast$followedBySkipWhileWhitespace($stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$Elm$Parser$Comments$singleLineComment, $stil4m$elm_syntax$Elm$Parser$Comments$multilineComment)), $stil4m$elm_syntax$Rope$empty, F2(function (right, soFar) {
    return $stil4m$elm_syntax$Rope$prependToFilled_fn($stil4m$elm_syntax$Rope$one(right), soFar);
}), $elm$core$Basics$identity);
var $stil4m$elm_syntax$Elm$Parser$Layout$fromMultilineCommentNodeOrEmptyOnProblem = $stil4m$elm_syntax$ParserFast$map2OrSucceed_fn_unwrapped(function (comment, commentsAfter) {
    return $stil4m$elm_syntax$Rope$filledPrependTo_fn(commentsAfter, $stil4m$elm_syntax$Rope$one(comment));
}, $stil4m$elm_syntax$ParserFast$followedBySkipWhileWhitespace($stil4m$elm_syntax$Elm$Parser$Comments$multilineComment), $stil4m$elm_syntax$Elm$Parser$Layout$whitespaceAndCommentsOrEmptyLoop, $stil4m$elm_syntax$Rope$empty);
var $stil4m$elm_syntax$Elm$Parser$Layout$fromSingleLineCommentNode = $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (content, commentsAfter) {
    return $stil4m$elm_syntax$Rope$filledPrependTo_fn(commentsAfter, $stil4m$elm_syntax$Rope$one(content));
}, $stil4m$elm_syntax$ParserFast$followedBySkipWhileWhitespace($stil4m$elm_syntax$Elm$Parser$Comments$singleLineComment), $stil4m$elm_syntax$Elm$Parser$Layout$whitespaceAndCommentsOrEmptyLoop);
var $stil4m$elm_syntax$ParserFast$offsetSourceAndThenOrSucceed_fn = function (callback, fallback) {
    return function (s) {
        var _v0 = A2(callback, s.J, s.H);
        if (_v0.$ === 1) {
            return $stil4m$elm_syntax$ParserFast$Good_fn(fallback, s);
        }
        else {
            var parse = _v0.a;
            return parse(s);
        }
    };
}, $stil4m$elm_syntax$ParserFast$offsetSourceAndThenOrSucceed_fn_unwrapped = function (callback, fallback) {
    return function (s) {
        var _v0 = callback(s.J, s.H);
        if (_v0.$ === 1) {
            return $stil4m$elm_syntax$ParserFast$Good_fn(fallback, s);
        }
        else {
            var parse = _v0.a;
            return parse(s);
        }
    };
}, $stil4m$elm_syntax$ParserFast$offsetSourceAndThenOrSucceed = F2($stil4m$elm_syntax$ParserFast$offsetSourceAndThenOrSucceed_fn);
var $stil4m$elm_syntax$ParserFast$skipWhileWhitespaceFollowedBy = function (_v0) {
    var parseNext = _v0;
    return function (s0) {
        var s1 = $stil4m$elm_syntax$ParserFast$skipWhileWhitespaceHelp_fn(s0.J, s0.bu, s0.dW, s0.H, s0.ac);
        return $stil4m$elm_syntax$ParserFast$pStepCommit(parseNext(s1));
    };
};
var $stil4m$elm_syntax$Elm$Parser$Layout$whitespaceAndCommentsOrEmpty = $stil4m$elm_syntax$ParserFast$skipWhileWhitespaceFollowedBy($stil4m$elm_syntax$ParserFast$offsetSourceAndThenOrSucceed_fn_unwrapped(function (offset, source) {
    var _v0 = _String_slice_fn(offset, offset + 2, source);
    switch (_v0) {
        case "--":
            return $elm$core$Maybe$Just($stil4m$elm_syntax$Elm$Parser$Layout$fromSingleLineCommentNode);
        case "{-":
            return $elm$core$Maybe$Just($stil4m$elm_syntax$Elm$Parser$Layout$fromMultilineCommentNodeOrEmptyOnProblem);
        default:
            return $elm$core$Maybe$Nothing;
    }
}, $stil4m$elm_syntax$Rope$empty));
var $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout = $stil4m$elm_syntax$Elm$Parser$Layout$whitespaceAndCommentsOrEmpty;
var $stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedBy = function (nextParser) {
    return $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (commentsBefore, after) {
        return { C: commentsBefore, cC: after };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout, $stil4m$elm_syntax$Elm$Parser$Layout$onTopIndentationFollowedBy(nextParser));
};
var $stil4m$elm_syntax$ParserFast$lazy = function (thunk) {
    return function (s) {
        var _v0 = thunk(0);
        var parse = _v0;
        return parse(s);
    };
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Literal = function (a) {
    return { $: 11, a: a };
};
var $stil4m$elm_syntax$ParserFast$atLeastOneWhileWithoutLinebreak = function (isGood) {
    return function (s0) {
        var s1 = $stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp_fn(isGood, s0.J, s0.bu, s0.dW, s0.H, s0.ac);
        return (!(s0.J - s1.J)) ? $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingAnyChar_fn(s0.bu, s0.dW)) : $stil4m$elm_syntax$ParserFast$Good_fn(_String_slice_fn(s0.J, s1.J, s0.H), s1);
    };
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$singleQuotedStringLiteralAfterDoubleQuote = $stil4m$elm_syntax$ParserFast$loopUntil_fn($stil4m$elm_syntax$ParserFast$symbol_fn("\"", 0), $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("\\", $stil4m$elm_syntax$Elm$Parser$Tokens$escapedCharValueMap($elm$core$String$fromChar)), $stil4m$elm_syntax$ParserFast$atLeastOneWhileWithoutLinebreak(function (c) {
    switch (c) {
        case "\"":
            return false;
        case "\\":
            return false;
        default:
            return !$stil4m$elm_syntax$Char$Extra$isUtf16Surrogate(c);
    }
})), "", F2(function (extension, soFar) {
    return soFar + (extension + "");
}), $elm$core$Basics$identity);
var $stil4m$elm_syntax$Elm$Parser$Tokens$tripleQuotedStringLiteralOfterTripleDoubleQuote = $stil4m$elm_syntax$ParserFast$loopUntil_fn($stil4m$elm_syntax$ParserFast$symbol_fn("\"\"\"", 0), $stil4m$elm_syntax$ParserFast$oneOf3_fn($stil4m$elm_syntax$ParserFast$symbol_fn("\"", "\""), $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("\\", $stil4m$elm_syntax$Elm$Parser$Tokens$escapedCharValueMap($elm$core$String$fromChar)), $stil4m$elm_syntax$ParserFast$atLeastOneWhile(function (c) {
    switch (c) {
        case "\"":
            return false;
        case "\\":
            return false;
        default:
            return !$stil4m$elm_syntax$Char$Extra$isUtf16Surrogate(c);
    }
})), "", F2(function (extension, soFar) {
    return soFar + (extension + "");
}), $elm$core$Basics$identity);
var $stil4m$elm_syntax$Elm$Parser$Tokens$singleOrTripleQuotedStringLiteralMapWithRange = function (rangeAndStringToRes) {
    return $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("\"", $stil4m$elm_syntax$ParserFast$oneOf2MapWithStartRowColumnAndEndRowColumn_fn(F5(function (startRow, startColumn, string, endRow, endColumn) {
        return A2(rangeAndStringToRes, {
            b_: { cJ: endColumn, bu: endRow },
            cf: { cJ: startColumn - 1, bu: startRow }
        }, string);
    }), $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("\"\"", $stil4m$elm_syntax$Elm$Parser$Tokens$tripleQuotedStringLiteralOfterTripleDoubleQuote), F5(function (startRow, startColumn, string, endRow, endColumn) {
        return A2(rangeAndStringToRes, {
            b_: { cJ: endColumn, bu: endRow },
            cf: { cJ: startColumn - 1, bu: startRow }
        }, string);
    }), $stil4m$elm_syntax$Elm$Parser$Tokens$singleQuotedStringLiteralAfterDoubleQuote));
}, $stil4m$elm_syntax$Elm$Parser$Tokens$singleOrTripleQuotedStringLiteralMapWithRange_unwrapped = function (rangeAndStringToRes) {
    return $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("\"", $stil4m$elm_syntax$ParserFast$oneOf2MapWithStartRowColumnAndEndRowColumn_fn(F5(function (startRow, startColumn, string, endRow, endColumn) {
        return rangeAndStringToRes({
            b_: { cJ: endColumn, bu: endRow },
            cf: { cJ: startColumn - 1, bu: startRow }
        }, string);
    }), $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("\"\"", $stil4m$elm_syntax$Elm$Parser$Tokens$tripleQuotedStringLiteralOfterTripleDoubleQuote), F5(function (startRow, startColumn, string, endRow, endColumn) {
        return rangeAndStringToRes({
            b_: { cJ: endColumn, bu: endRow },
            cf: { cJ: startColumn - 1, bu: startRow }
        }, string);
    }), $stil4m$elm_syntax$Elm$Parser$Tokens$singleQuotedStringLiteralAfterDoubleQuote));
};
var $stil4m$elm_syntax$Elm$Parser$Expression$literalExpression = $stil4m$elm_syntax$Elm$Parser$Tokens$singleOrTripleQuotedStringLiteralMapWithRange_unwrapped(function (range, string) {
    return {
        C: $stil4m$elm_syntax$Rope$empty,
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Expression$Literal(string))
    };
});
var $stil4m$elm_syntax$ParserFast$loopWhileSucceedsOntoResultFromParser_fn = function (element, _v0, reduce, foldedToRes) {
    var parseInitialFolded = _v0;
    return function (s0) {
        var _v1 = parseInitialFolded(s0);
        if (!_v1.$) {
            var initialFolded = _v1.a;
            var s1 = _v1.b;
            return $stil4m$elm_syntax$ParserFast$loopWhileSucceedsHelp_fn(element, initialFolded, reduce, foldedToRes, s1);
        }
        else {
            var committed = _v1.a;
            var x = _v1.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
    };
}, $stil4m$elm_syntax$ParserFast$loopWhileSucceedsOntoResultFromParser = F4($stil4m$elm_syntax$ParserFast$loopWhileSucceedsOntoResultFromParser_fn);
var $stil4m$elm_syntax$Rope$prependTo_fn = function (right, left) {
    if (left.$ === 1) {
        return right;
    }
    else {
        var leftLikelyFilled = left.a;
        if (right.$ === 1) {
            return left;
        }
        else {
            var rightLikelyFilled = right.a;
            return $elm$core$Maybe$Just($stil4m$elm_syntax$Rope$Branch2_fn(leftLikelyFilled, rightLikelyFilled));
        }
    }
}, $stil4m$elm_syntax$Rope$prependTo = F2($stil4m$elm_syntax$Rope$prependTo_fn);
var $stil4m$elm_syntax$ParserWithComments$many = function (p) {
    return $stil4m$elm_syntax$ParserFast$loopWhileSucceeds_fn(p, _Utils_Tuple2($stil4m$elm_syntax$Rope$empty, _List_Nil), F2(function (pResult, _v0) {
        var commentsSoFar = _v0.a;
        var itemsSoFar = _v0.b;
        return _Utils_Tuple2($stil4m$elm_syntax$Rope$prependTo_fn(pResult.C, commentsSoFar), _List_Cons(pResult.cC, itemsSoFar));
    }), function (_v1) {
        var commentsSoFar = _v1.a;
        var itemsSoFar = _v1.b;
        return {
            C: commentsSoFar,
            cC: $elm$core$List$reverse(itemsSoFar)
        };
    });
};
var $stil4m$elm_syntax$ParserWithComments$manyWithoutReverse = function (p) {
    return $stil4m$elm_syntax$ParserFast$loopWhileSucceeds_fn(p, _Utils_Tuple2($stil4m$elm_syntax$Rope$empty, _List_Nil), F2(function (pResult, _v0) {
        var commentsSoFar = _v0.a;
        var itemsSoFar = _v0.b;
        return _Utils_Tuple2($stil4m$elm_syntax$Rope$prependTo_fn(pResult.C, commentsSoFar), _List_Cons(pResult.cC, itemsSoFar));
    }), function (_v1) {
        var commentsSoFar = _v1.a;
        var itemsSoFar = _v1.b;
        return { C: commentsSoFar, cC: itemsSoFar };
    });
};
var $stil4m$elm_syntax$ParserFast$map_fn = function (func, _v0) {
    var parse = _v0;
    return function (s0) {
        var _v1 = parse(s0);
        if (!_v1.$) {
            var a = _v1.a;
            var s1 = _v1.b;
            return $stil4m$elm_syntax$ParserFast$Good_fn(func(a), s1);
        }
        else {
            var committed = _v1.a;
            var x = _v1.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
    };
}, $stil4m$elm_syntax$ParserFast$map = F2($stil4m$elm_syntax$ParserFast$map_fn);
var $stil4m$elm_syntax$ParserFast$map3_fn = function (func, _v0, _v1, _v2) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    return function (s0) {
        var _v3 = parseA(s0);
        if (_v3.$ === 1) {
            var committed = _v3.a;
            var x = _v3.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v3.a;
            var s1 = _v3.b;
            var _v4 = parseB(s1);
            if (_v4.$ === 1) {
                var x = _v4.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v4.a;
                var s2 = _v4.b;
                var _v5 = parseC(s2);
                if (_v5.$ === 1) {
                    var x = _v5.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v5.a;
                    var s3 = _v5.b;
                    return $stil4m$elm_syntax$ParserFast$Good_fn(A3(func, a, b, c), s3);
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map3_fn_unwrapped = function (func, _v0, _v1, _v2) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    return function (s0) {
        var _v3 = parseA(s0);
        if (_v3.$ === 1) {
            var committed = _v3.a;
            var x = _v3.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v3.a;
            var s1 = _v3.b;
            var _v4 = parseB(s1);
            if (_v4.$ === 1) {
                var x = _v4.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v4.a;
                var s2 = _v4.b;
                var _v5 = parseC(s2);
                if (_v5.$ === 1) {
                    var x = _v5.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v5.a;
                    var s3 = _v5.b;
                    return $stil4m$elm_syntax$ParserFast$Good_fn(func(a, b, c), s3);
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map3 = F4($stil4m$elm_syntax$ParserFast$map3_fn);
var $stil4m$elm_syntax$ParserFast$map3WithStartLocation_fn = function (func, _v0, _v1, _v2) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    return function (s0) {
        var _v3 = parseA(s0);
        if (_v3.$ === 1) {
            var committed = _v3.a;
            var x = _v3.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v3.a;
            var s1 = _v3.b;
            var _v4 = parseB(s1);
            if (_v4.$ === 1) {
                var x = _v4.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v4.a;
                var s2 = _v4.b;
                var _v5 = parseC(s2);
                if (_v5.$ === 1) {
                    var x = _v5.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v5.a;
                    var s3 = _v5.b;
                    return $stil4m$elm_syntax$ParserFast$Good_fn(A4(func, { cJ: s0.dW, bu: s0.bu }, a, b, c), s3);
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map3WithStartLocation_fn_unwrapped = function (func, _v0, _v1, _v2) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    return function (s0) {
        var _v3 = parseA(s0);
        if (_v3.$ === 1) {
            var committed = _v3.a;
            var x = _v3.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v3.a;
            var s1 = _v3.b;
            var _v4 = parseB(s1);
            if (_v4.$ === 1) {
                var x = _v4.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v4.a;
                var s2 = _v4.b;
                var _v5 = parseC(s2);
                if (_v5.$ === 1) {
                    var x = _v5.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v5.a;
                    var s3 = _v5.b;
                    return $stil4m$elm_syntax$ParserFast$Good_fn(func({ cJ: s0.dW, bu: s0.bu }, a, b, c), s3);
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map3WithStartLocation = F4($stil4m$elm_syntax$ParserFast$map3WithStartLocation_fn);
var $stil4m$elm_syntax$ParserFast$map4_fn = function (func, _v0, _v1, _v2, _v3) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    var parseD = _v3;
    return function (s0) {
        var _v4 = parseA(s0);
        if (_v4.$ === 1) {
            var committed = _v4.a;
            var x = _v4.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v4.a;
            var s1 = _v4.b;
            var _v5 = parseB(s1);
            if (_v5.$ === 1) {
                var x = _v5.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v5.a;
                var s2 = _v5.b;
                var _v6 = parseC(s2);
                if (_v6.$ === 1) {
                    var x = _v6.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v6.a;
                    var s3 = _v6.b;
                    var _v7 = parseD(s3);
                    if (_v7.$ === 1) {
                        var x = _v7.b;
                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var d = _v7.a;
                        var s4 = _v7.b;
                        return $stil4m$elm_syntax$ParserFast$Good_fn(A4(func, a, b, c, d), s4);
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map4_fn_unwrapped = function (func, _v0, _v1, _v2, _v3) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    var parseD = _v3;
    return function (s0) {
        var _v4 = parseA(s0);
        if (_v4.$ === 1) {
            var committed = _v4.a;
            var x = _v4.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v4.a;
            var s1 = _v4.b;
            var _v5 = parseB(s1);
            if (_v5.$ === 1) {
                var x = _v5.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v5.a;
                var s2 = _v5.b;
                var _v6 = parseC(s2);
                if (_v6.$ === 1) {
                    var x = _v6.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v6.a;
                    var s3 = _v6.b;
                    var _v7 = parseD(s3);
                    if (_v7.$ === 1) {
                        var x = _v7.b;
                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var d = _v7.a;
                        var s4 = _v7.b;
                        return $stil4m$elm_syntax$ParserFast$Good_fn(func(a, b, c, d), s4);
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map4 = F5($stil4m$elm_syntax$ParserFast$map4_fn);
var $stil4m$elm_syntax$ParserFast$map4OrSucceed_fn = function (func, _v0, _v1, _v2, _v3, fallback) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    var parseD = _v3;
    return function (s0) {
        var _v4 = parseA(s0);
        if (_v4.$ === 1) {
            var c1 = _v4.a;
            var x = _v4.b;
            return c1 ? $stil4m$elm_syntax$ParserFast$Bad_fn(true, x) : $stil4m$elm_syntax$ParserFast$Good_fn(fallback, s0);
        }
        else {
            var a = _v4.a;
            var s1 = _v4.b;
            var _v5 = parseB(s1);
            if (_v5.$ === 1) {
                var x = _v5.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v5.a;
                var s2 = _v5.b;
                var _v6 = parseC(s2);
                if (_v6.$ === 1) {
                    var x = _v6.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v6.a;
                    var s3 = _v6.b;
                    var _v7 = parseD(s3);
                    if (_v7.$ === 1) {
                        var x = _v7.b;
                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var d = _v7.a;
                        var s4 = _v7.b;
                        return $stil4m$elm_syntax$ParserFast$Good_fn(A4(func, a, b, c, d), s4);
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map4OrSucceed_fn_unwrapped = function (func, _v0, _v1, _v2, _v3, fallback) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    var parseD = _v3;
    return function (s0) {
        var _v4 = parseA(s0);
        if (_v4.$ === 1) {
            var c1 = _v4.a;
            var x = _v4.b;
            return c1 ? $stil4m$elm_syntax$ParserFast$Bad_fn(true, x) : $stil4m$elm_syntax$ParserFast$Good_fn(fallback, s0);
        }
        else {
            var a = _v4.a;
            var s1 = _v4.b;
            var _v5 = parseB(s1);
            if (_v5.$ === 1) {
                var x = _v5.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v5.a;
                var s2 = _v5.b;
                var _v6 = parseC(s2);
                if (_v6.$ === 1) {
                    var x = _v6.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v6.a;
                    var s3 = _v6.b;
                    var _v7 = parseD(s3);
                    if (_v7.$ === 1) {
                        var x = _v7.b;
                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var d = _v7.a;
                        var s4 = _v7.b;
                        return $stil4m$elm_syntax$ParserFast$Good_fn(func(a, b, c, d), s4);
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map4OrSucceed = F6($stil4m$elm_syntax$ParserFast$map4OrSucceed_fn);
var $stil4m$elm_syntax$ParserFast$map4WithRange_fn = function (func, _v0, _v1, _v2, _v3) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    var parseD = _v3;
    return function (s0) {
        var _v4 = parseA(s0);
        if (_v4.$ === 1) {
            var committed = _v4.a;
            var x = _v4.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v4.a;
            var s1 = _v4.b;
            var _v5 = parseB(s1);
            if (_v5.$ === 1) {
                var x = _v5.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v5.a;
                var s2 = _v5.b;
                var _v6 = parseC(s2);
                if (_v6.$ === 1) {
                    var x = _v6.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v6.a;
                    var s3 = _v6.b;
                    var _v7 = parseD(s3);
                    if (_v7.$ === 1) {
                        var x = _v7.b;
                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var d = _v7.a;
                        var s4 = _v7.b;
                        return $stil4m$elm_syntax$ParserFast$Good_fn(A5(func, {
                            b_: { cJ: s4.dW, bu: s4.bu },
                            cf: { cJ: s0.dW, bu: s0.bu }
                        }, a, b, c, d), s4);
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map4WithRange_fn_unwrapped = function (func, _v0, _v1, _v2, _v3) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    var parseD = _v3;
    return function (s0) {
        var _v4 = parseA(s0);
        if (_v4.$ === 1) {
            var committed = _v4.a;
            var x = _v4.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v4.a;
            var s1 = _v4.b;
            var _v5 = parseB(s1);
            if (_v5.$ === 1) {
                var x = _v5.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v5.a;
                var s2 = _v5.b;
                var _v6 = parseC(s2);
                if (_v6.$ === 1) {
                    var x = _v6.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v6.a;
                    var s3 = _v6.b;
                    var _v7 = parseD(s3);
                    if (_v7.$ === 1) {
                        var x = _v7.b;
                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var d = _v7.a;
                        var s4 = _v7.b;
                        return $stil4m$elm_syntax$ParserFast$Good_fn(func({
                            b_: { cJ: s4.dW, bu: s4.bu },
                            cf: { cJ: s0.dW, bu: s0.bu }
                        }, a, b, c, d), s4);
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map4WithRange = F5($stil4m$elm_syntax$ParserFast$map4WithRange_fn);
var $stil4m$elm_syntax$ParserFast$map5_fn = function (func, _v0, _v1, _v2, _v3, _v4) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    var parseD = _v3;
    var parseE = _v4;
    return function (s0) {
        var _v5 = parseA(s0);
        if (_v5.$ === 1) {
            var committed = _v5.a;
            var x = _v5.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v5.a;
            var s1 = _v5.b;
            var _v6 = parseB(s1);
            if (_v6.$ === 1) {
                var x = _v6.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v6.a;
                var s2 = _v6.b;
                var _v7 = parseC(s2);
                if (_v7.$ === 1) {
                    var x = _v7.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v7.a;
                    var s3 = _v7.b;
                    var _v8 = parseD(s3);
                    if (_v8.$ === 1) {
                        var x = _v8.b;
                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var d = _v8.a;
                        var s4 = _v8.b;
                        var _v9 = parseE(s4);
                        if (_v9.$ === 1) {
                            var x = _v9.b;
                            return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var e = _v9.a;
                            var s5 = _v9.b;
                            return $stil4m$elm_syntax$ParserFast$Good_fn(A5(func, a, b, c, d, e), s5);
                        }
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map5_fn_unwrapped = function (func, _v0, _v1, _v2, _v3, _v4) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    var parseD = _v3;
    var parseE = _v4;
    return function (s0) {
        var _v5 = parseA(s0);
        if (_v5.$ === 1) {
            var committed = _v5.a;
            var x = _v5.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v5.a;
            var s1 = _v5.b;
            var _v6 = parseB(s1);
            if (_v6.$ === 1) {
                var x = _v6.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v6.a;
                var s2 = _v6.b;
                var _v7 = parseC(s2);
                if (_v7.$ === 1) {
                    var x = _v7.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v7.a;
                    var s3 = _v7.b;
                    var _v8 = parseD(s3);
                    if (_v8.$ === 1) {
                        var x = _v8.b;
                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var d = _v8.a;
                        var s4 = _v8.b;
                        var _v9 = parseE(s4);
                        if (_v9.$ === 1) {
                            var x = _v9.b;
                            return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var e = _v9.a;
                            var s5 = _v9.b;
                            return $stil4m$elm_syntax$ParserFast$Good_fn(func(a, b, c, d, e), s5);
                        }
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map5 = F6($stil4m$elm_syntax$ParserFast$map5_fn);
var $stil4m$elm_syntax$ParserFast$map5WithRange_fn = function (func, _v0, _v1, _v2, _v3, _v4) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    var parseD = _v3;
    var parseE = _v4;
    return function (s0) {
        var _v5 = parseA(s0);
        if (_v5.$ === 1) {
            var committed = _v5.a;
            var x = _v5.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v5.a;
            var s1 = _v5.b;
            var _v6 = parseB(s1);
            if (_v6.$ === 1) {
                var x = _v6.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v6.a;
                var s2 = _v6.b;
                var _v7 = parseC(s2);
                if (_v7.$ === 1) {
                    var x = _v7.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v7.a;
                    var s3 = _v7.b;
                    var _v8 = parseD(s3);
                    if (_v8.$ === 1) {
                        var x = _v8.b;
                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var d = _v8.a;
                        var s4 = _v8.b;
                        var _v9 = parseE(s4);
                        if (_v9.$ === 1) {
                            var x = _v9.b;
                            return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var e = _v9.a;
                            var s5 = _v9.b;
                            return $stil4m$elm_syntax$ParserFast$Good_fn(A6(func, {
                                b_: { cJ: s5.dW, bu: s5.bu },
                                cf: { cJ: s0.dW, bu: s0.bu }
                            }, a, b, c, d, e), s5);
                        }
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map5WithRange_fn_unwrapped = function (func, _v0, _v1, _v2, _v3, _v4) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    var parseD = _v3;
    var parseE = _v4;
    return function (s0) {
        var _v5 = parseA(s0);
        if (_v5.$ === 1) {
            var committed = _v5.a;
            var x = _v5.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v5.a;
            var s1 = _v5.b;
            var _v6 = parseB(s1);
            if (_v6.$ === 1) {
                var x = _v6.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v6.a;
                var s2 = _v6.b;
                var _v7 = parseC(s2);
                if (_v7.$ === 1) {
                    var x = _v7.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v7.a;
                    var s3 = _v7.b;
                    var _v8 = parseD(s3);
                    if (_v8.$ === 1) {
                        var x = _v8.b;
                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var d = _v8.a;
                        var s4 = _v8.b;
                        var _v9 = parseE(s4);
                        if (_v9.$ === 1) {
                            var x = _v9.b;
                            return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var e = _v9.a;
                            var s5 = _v9.b;
                            return $stil4m$elm_syntax$ParserFast$Good_fn(func({
                                b_: { cJ: s5.dW, bu: s5.bu },
                                cf: { cJ: s0.dW, bu: s0.bu }
                            }, a, b, c, d, e), s5);
                        }
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map5WithRange = F6($stil4m$elm_syntax$ParserFast$map5WithRange_fn);
var $stil4m$elm_syntax$ParserFast$map5WithStartLocation_fn = function (func, _v0, _v1, _v2, _v3, _v4) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    var parseD = _v3;
    var parseE = _v4;
    return function (s0) {
        var _v5 = parseA(s0);
        if (_v5.$ === 1) {
            var committed = _v5.a;
            var x = _v5.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v5.a;
            var s1 = _v5.b;
            var _v6 = parseB(s1);
            if (_v6.$ === 1) {
                var x = _v6.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v6.a;
                var s2 = _v6.b;
                var _v7 = parseC(s2);
                if (_v7.$ === 1) {
                    var x = _v7.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v7.a;
                    var s3 = _v7.b;
                    var _v8 = parseD(s3);
                    if (_v8.$ === 1) {
                        var x = _v8.b;
                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var d = _v8.a;
                        var s4 = _v8.b;
                        var _v9 = parseE(s4);
                        if (_v9.$ === 1) {
                            var x = _v9.b;
                            return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var e = _v9.a;
                            var s5 = _v9.b;
                            return $stil4m$elm_syntax$ParserFast$Good_fn(A6(func, { cJ: s0.dW, bu: s0.bu }, a, b, c, d, e), s5);
                        }
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map5WithStartLocation_fn_unwrapped = function (func, _v0, _v1, _v2, _v3, _v4) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    var parseD = _v3;
    var parseE = _v4;
    return function (s0) {
        var _v5 = parseA(s0);
        if (_v5.$ === 1) {
            var committed = _v5.a;
            var x = _v5.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v5.a;
            var s1 = _v5.b;
            var _v6 = parseB(s1);
            if (_v6.$ === 1) {
                var x = _v6.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v6.a;
                var s2 = _v6.b;
                var _v7 = parseC(s2);
                if (_v7.$ === 1) {
                    var x = _v7.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v7.a;
                    var s3 = _v7.b;
                    var _v8 = parseD(s3);
                    if (_v8.$ === 1) {
                        var x = _v8.b;
                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var d = _v8.a;
                        var s4 = _v8.b;
                        var _v9 = parseE(s4);
                        if (_v9.$ === 1) {
                            var x = _v9.b;
                            return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var e = _v9.a;
                            var s5 = _v9.b;
                            return $stil4m$elm_syntax$ParserFast$Good_fn(func({ cJ: s0.dW, bu: s0.bu }, a, b, c, d, e), s5);
                        }
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map5WithStartLocation = F6($stil4m$elm_syntax$ParserFast$map5WithStartLocation_fn);
var $stil4m$elm_syntax$ParserFast$map6WithStartLocation_fn = function (func, _v0, _v1, _v2, _v3, _v4, _v5) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    var parseD = _v3;
    var parseE = _v4;
    var parseF = _v5;
    return function (s0) {
        var _v6 = parseA(s0);
        if (_v6.$ === 1) {
            var committed = _v6.a;
            var x = _v6.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v6.a;
            var s1 = _v6.b;
            var _v7 = parseB(s1);
            if (_v7.$ === 1) {
                var x = _v7.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v7.a;
                var s2 = _v7.b;
                var _v8 = parseC(s2);
                if (_v8.$ === 1) {
                    var x = _v8.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v8.a;
                    var s3 = _v8.b;
                    var _v9 = parseD(s3);
                    if (_v9.$ === 1) {
                        var x = _v9.b;
                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var d = _v9.a;
                        var s4 = _v9.b;
                        var _v10 = parseE(s4);
                        if (_v10.$ === 1) {
                            var x = _v10.b;
                            return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var e = _v10.a;
                            var s5 = _v10.b;
                            var _v11 = parseF(s5);
                            if (_v11.$ === 1) {
                                var x = _v11.b;
                                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var f = _v11.a;
                                var s6 = _v11.b;
                                return $stil4m$elm_syntax$ParserFast$Good_fn(A7(func, { cJ: s0.dW, bu: s0.bu }, a, b, c, d, e, f), s6);
                            }
                        }
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map6WithStartLocation_fn_unwrapped = function (func, _v0, _v1, _v2, _v3, _v4, _v5) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    var parseD = _v3;
    var parseE = _v4;
    var parseF = _v5;
    return function (s0) {
        var _v6 = parseA(s0);
        if (_v6.$ === 1) {
            var committed = _v6.a;
            var x = _v6.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v6.a;
            var s1 = _v6.b;
            var _v7 = parseB(s1);
            if (_v7.$ === 1) {
                var x = _v7.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v7.a;
                var s2 = _v7.b;
                var _v8 = parseC(s2);
                if (_v8.$ === 1) {
                    var x = _v8.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v8.a;
                    var s3 = _v8.b;
                    var _v9 = parseD(s3);
                    if (_v9.$ === 1) {
                        var x = _v9.b;
                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var d = _v9.a;
                        var s4 = _v9.b;
                        var _v10 = parseE(s4);
                        if (_v10.$ === 1) {
                            var x = _v10.b;
                            return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var e = _v10.a;
                            var s5 = _v10.b;
                            var _v11 = parseF(s5);
                            if (_v11.$ === 1) {
                                var x = _v11.b;
                                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var f = _v11.a;
                                var s6 = _v11.b;
                                return $stil4m$elm_syntax$ParserFast$Good_fn(func({ cJ: s0.dW, bu: s0.bu }, a, b, c, d, e, f), s6);
                            }
                        }
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map6WithStartLocation = F7($stil4m$elm_syntax$ParserFast$map6WithStartLocation_fn);
var $stil4m$elm_syntax$ParserFast$map8WithStartLocation_fn = function (func, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    var parseD = _v3;
    var parseE = _v4;
    var parseF = _v5;
    var parseG = _v6;
    var parseH = _v7;
    return function (s0) {
        var _v8 = parseA(s0);
        if (_v8.$ === 1) {
            var committed = _v8.a;
            var x = _v8.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v8.a;
            var s1 = _v8.b;
            var _v9 = parseB(s1);
            if (_v9.$ === 1) {
                var x = _v9.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v9.a;
                var s2 = _v9.b;
                var _v10 = parseC(s2);
                if (_v10.$ === 1) {
                    var x = _v10.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v10.a;
                    var s3 = _v10.b;
                    var _v11 = parseD(s3);
                    if (_v11.$ === 1) {
                        var x = _v11.b;
                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var d = _v11.a;
                        var s4 = _v11.b;
                        var _v12 = parseE(s4);
                        if (_v12.$ === 1) {
                            var x = _v12.b;
                            return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var e = _v12.a;
                            var s5 = _v12.b;
                            var _v13 = parseF(s5);
                            if (_v13.$ === 1) {
                                var x = _v13.b;
                                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var f = _v13.a;
                                var s6 = _v13.b;
                                var _v14 = parseG(s6);
                                if (_v14.$ === 1) {
                                    var x = _v14.b;
                                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                                }
                                else {
                                    var g = _v14.a;
                                    var s7 = _v14.b;
                                    var _v15 = parseH(s7);
                                    if (_v15.$ === 1) {
                                        var x = _v15.b;
                                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                                    }
                                    else {
                                        var h = _v15.a;
                                        var s8 = _v15.b;
                                        return $stil4m$elm_syntax$ParserFast$Good_fn(A9(func, { cJ: s0.dW, bu: s0.bu }, a, b, c, d, e, f, g, h), s8);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map8WithStartLocation_fn_unwrapped = function (func, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    var parseD = _v3;
    var parseE = _v4;
    var parseF = _v5;
    var parseG = _v6;
    var parseH = _v7;
    return function (s0) {
        var _v8 = parseA(s0);
        if (_v8.$ === 1) {
            var committed = _v8.a;
            var x = _v8.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v8.a;
            var s1 = _v8.b;
            var _v9 = parseB(s1);
            if (_v9.$ === 1) {
                var x = _v9.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v9.a;
                var s2 = _v9.b;
                var _v10 = parseC(s2);
                if (_v10.$ === 1) {
                    var x = _v10.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v10.a;
                    var s3 = _v10.b;
                    var _v11 = parseD(s3);
                    if (_v11.$ === 1) {
                        var x = _v11.b;
                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var d = _v11.a;
                        var s4 = _v11.b;
                        var _v12 = parseE(s4);
                        if (_v12.$ === 1) {
                            var x = _v12.b;
                            return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var e = _v12.a;
                            var s5 = _v12.b;
                            var _v13 = parseF(s5);
                            if (_v13.$ === 1) {
                                var x = _v13.b;
                                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var f = _v13.a;
                                var s6 = _v13.b;
                                var _v14 = parseG(s6);
                                if (_v14.$ === 1) {
                                    var x = _v14.b;
                                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                                }
                                else {
                                    var g = _v14.a;
                                    var s7 = _v14.b;
                                    var _v15 = parseH(s7);
                                    if (_v15.$ === 1) {
                                        var x = _v15.b;
                                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                                    }
                                    else {
                                        var h = _v15.a;
                                        var s8 = _v15.b;
                                        return $stil4m$elm_syntax$ParserFast$Good_fn(func({ cJ: s0.dW, bu: s0.bu }, a, b, c, d, e, f, g, h), s8);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map8WithStartLocation = F9($stil4m$elm_syntax$ParserFast$map8WithStartLocation_fn);
var $stil4m$elm_syntax$ParserFast$validateEndColumnIndentation_fn = function (isOkay, problemOnIsNotOkay, _v0) {
    var parse = _v0;
    return function (s0) {
        var _v1 = parse(s0);
        if (!_v1.$) {
            var good = _v1;
            var s1 = good.b;
            return A2(isOkay, s1.dW, s1.ac) ? good : $stil4m$elm_syntax$ParserFast$Bad_fn(true, $stil4m$elm_syntax$ParserFast$ExpectingCustom_fn(s1.bu, s1.dW, problemOnIsNotOkay));
        }
        else {
            var bad = _v1;
            return bad;
        }
    };
}, $stil4m$elm_syntax$ParserFast$validateEndColumnIndentation_fn_unwrapped = function (isOkay, problemOnIsNotOkay, _v0) {
    var parse = _v0;
    return function (s0) {
        var _v1 = parse(s0);
        if (!_v1.$) {
            var good = _v1;
            var s1 = good.b;
            return isOkay(s1.dW, s1.ac) ? good : $stil4m$elm_syntax$ParserFast$Bad_fn(true, $stil4m$elm_syntax$ParserFast$ExpectingCustom_fn(s1.bu, s1.dW, problemOnIsNotOkay));
        }
        else {
            var bad = _v1;
            return bad;
        }
    };
}, $stil4m$elm_syntax$ParserFast$validateEndColumnIndentation = F3($stil4m$elm_syntax$ParserFast$validateEndColumnIndentation_fn);
var $stil4m$elm_syntax$Elm$Parser$Layout$endsPositivelyIndented = function (parser) {
    return $stil4m$elm_syntax$ParserFast$validateEndColumnIndentation_fn_unwrapped(function (column, indent) {
        return _Utils_cmp(column, indent) > 0;
    }, "must be positively indented", parser);
};
var $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout = $stil4m$elm_syntax$Elm$Parser$Layout$endsPositivelyIndented($stil4m$elm_syntax$Elm$Parser$Layout$whitespaceAndCommentsOrEmpty);
var $stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides = function (x) {
    return $stil4m$elm_syntax$ParserFast$map3_fn_unwrapped(function (before, v, after) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(after, $stil4m$elm_syntax$Rope$prependTo_fn(v.C, before)),
            cC: v.cC
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, x, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout);
};
var $stil4m$elm_syntax$Elm$Parser$Expression$multiRecordAccess = $stil4m$elm_syntax$ParserFast$loopWhileSucceeds_fn($stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(".", $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode), _List_Nil, $elm$core$List$cons, $elm$core$List$reverse);
var $stil4m$elm_syntax$Elm$Parser$Expression$multiRecordAccessMap = function (fieldsToRes) {
    return $stil4m$elm_syntax$ParserFast$loopWhileSucceeds_fn($stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(".", $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode), _List_Nil, $elm$core$List$cons, function (reversed) {
        return fieldsToRes($elm$core$List$reverse(reversed));
    });
};
var $stil4m$elm_syntax$Elm$Parser$Expression$negationWhitespaceProblem = $stil4m$elm_syntax$ParserFast$problem("if a negation sign is not preceded by whitespace, it's considered subtraction");
var $elm$core$Tuple$pair_fn = function (a, b) {
    return _Utils_Tuple2(a, b);
}, $elm$core$Tuple$pair = F2($elm$core$Tuple$pair_fn);
var $stil4m$elm_syntax$Elm$Parser$Tokens$equal = $stil4m$elm_syntax$ParserFast$symbol_fn("=", 0);
var $stil4m$elm_syntax$Elm$Syntax$Pattern$AsPattern_fn = function (a, b) {
    return { $: 13, a: a, b: b };
}, $stil4m$elm_syntax$Elm$Syntax$Pattern$AsPattern = F2($stil4m$elm_syntax$Elm$Syntax$Pattern$AsPattern_fn);
var $stil4m$elm_syntax$Elm$Syntax$Pattern$ListPattern = function (a) {
    return { $: 10, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern_fn = function (a, b) {
    return { $: 12, a: a, b: b };
}, $stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern = F2($stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern_fn);
var $stil4m$elm_syntax$Elm$Syntax$Pattern$ParenthesizedPattern = function (a) {
    return { $: 14, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$PatternComposedWithAs = function (a) {
    return { $: 1, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$PatternComposedWithCons = function (a) {
    return { $: 2, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$PatternComposedWithNothing = function (a) {
    return { $: 0, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$TuplePattern = function (a) {
    return { $: 7, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$UnConsPattern_fn = function (a, b) {
    return { $: 9, a: a, b: b };
}, $stil4m$elm_syntax$Elm$Syntax$Pattern$UnConsPattern = F2($stil4m$elm_syntax$Elm$Syntax$Pattern$UnConsPattern_fn);
var $stil4m$elm_syntax$Elm$Syntax$Pattern$UnitPattern = { $: 1 };
var $stil4m$elm_syntax$Elm$Syntax$Pattern$AllPattern = { $: 0 };
var $stil4m$elm_syntax$ParserFast$symbolWithRange_fn = function (str, startAndEndLocationToRes) {
    var strLength = $elm$core$String$length(str);
    return function (s) {
        var newOffset = s.J + strLength;
        if (_Utils_eq(_String_slice_fn(s.J, newOffset, s.H), str + "")) {
            var newCol = s.dW + strLength;
            return $stil4m$elm_syntax$ParserFast$Good_fn(startAndEndLocationToRes({
                b_: { cJ: newCol, bu: s.bu },
                cf: { cJ: s.dW, bu: s.bu }
            }), { dW: newCol, ac: s.ac, J: newOffset, bu: s.bu, H: s.H });
        }
        else {
            return $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingSymbol_fn(s.bu, s.dW, str));
        }
    };
}, $stil4m$elm_syntax$ParserFast$symbolWithRange = F2($stil4m$elm_syntax$ParserFast$symbolWithRange_fn);
var $stil4m$elm_syntax$Elm$Parser$Patterns$allPattern = $stil4m$elm_syntax$ParserFast$symbolWithRange_fn("_", function (range) {
    return {
        C: $stil4m$elm_syntax$Rope$empty,
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Pattern$AllPattern)
    };
});
var $stil4m$elm_syntax$Elm$Syntax$Pattern$CharPattern = function (a) {
    return { $: 2, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$charPattern = $stil4m$elm_syntax$Elm$Parser$Tokens$characterLiteralMapWithRange_unwrapped(function (range, _char) {
    return {
        C: $stil4m$elm_syntax$Rope$empty,
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Pattern$CharPattern(_char))
    };
});
var $stil4m$elm_syntax$Elm$Syntax$Pattern$HexPattern = function (a) {
    return { $: 5, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Pattern$IntPattern = function (a) {
    return { $: 4, a: a };
};
var $stil4m$elm_syntax$ParserFast$ExpectingNumber_fn = function (a, b) {
    return { $: 0, a: a, b: b };
}, $stil4m$elm_syntax$ParserFast$ExpectingNumber = F2($stil4m$elm_syntax$ParserFast$ExpectingNumber_fn);
var $stil4m$elm_syntax$ParserFast$Decimal = 0;
var $stil4m$elm_syntax$ParserFast$Hexadecimal = 1;
var $stil4m$elm_syntax$ParserFast$convert0OrMore0To9s_fn = function (soFar, offset, src) {
    convert0OrMore0To9s: while (true) {
        var _v0 = _String_slice_fn(offset, offset + 1, src);
        switch (_v0) {
            case "0":
                var $temp$soFar = soFar * 10, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMore0To9s;
            case "1":
                var $temp$soFar = (soFar * 10) + 1, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMore0To9s;
            case "2":
                var $temp$soFar = (soFar * 10) + 2, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMore0To9s;
            case "3":
                var $temp$soFar = (soFar * 10) + 3, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMore0To9s;
            case "4":
                var $temp$soFar = (soFar * 10) + 4, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMore0To9s;
            case "5":
                var $temp$soFar = (soFar * 10) + 5, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMore0To9s;
            case "6":
                var $temp$soFar = (soFar * 10) + 6, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMore0To9s;
            case "7":
                var $temp$soFar = (soFar * 10) + 7, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMore0To9s;
            case "8":
                var $temp$soFar = (soFar * 10) + 8, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMore0To9s;
            case "9":
                var $temp$soFar = (soFar * 10) + 9, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMore0To9s;
            default:
                return { eg: soFar, J: offset };
        }
    }
}, $stil4m$elm_syntax$ParserFast$convert0OrMore0To9s = F3($stil4m$elm_syntax$ParserFast$convert0OrMore0To9s_fn);
var $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal_fn = function (soFar, offset, src) {
    convert0OrMoreHexadecimal: while (true) {
        var _v0 = _String_slice_fn(offset, offset + 1, src);
        switch (_v0) {
            case "0":
                var $temp$soFar = soFar * 16, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMoreHexadecimal;
            case "1":
                var $temp$soFar = (soFar * 16) + 1, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMoreHexadecimal;
            case "2":
                var $temp$soFar = (soFar * 16) + 2, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMoreHexadecimal;
            case "3":
                var $temp$soFar = (soFar * 16) + 3, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMoreHexadecimal;
            case "4":
                var $temp$soFar = (soFar * 16) + 4, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMoreHexadecimal;
            case "5":
                var $temp$soFar = (soFar * 16) + 5, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMoreHexadecimal;
            case "6":
                var $temp$soFar = (soFar * 16) + 6, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMoreHexadecimal;
            case "7":
                var $temp$soFar = (soFar * 16) + 7, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMoreHexadecimal;
            case "8":
                var $temp$soFar = (soFar * 16) + 8, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMoreHexadecimal;
            case "9":
                var $temp$soFar = (soFar * 16) + 9, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMoreHexadecimal;
            case "a":
                var $temp$soFar = (soFar * 16) + 10, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMoreHexadecimal;
            case "A":
                var $temp$soFar = (soFar * 16) + 10, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMoreHexadecimal;
            case "b":
                var $temp$soFar = (soFar * 16) + 11, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMoreHexadecimal;
            case "B":
                var $temp$soFar = (soFar * 16) + 11, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMoreHexadecimal;
            case "c":
                var $temp$soFar = (soFar * 16) + 12, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMoreHexadecimal;
            case "C":
                var $temp$soFar = (soFar * 16) + 12, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMoreHexadecimal;
            case "d":
                var $temp$soFar = (soFar * 16) + 13, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMoreHexadecimal;
            case "D":
                var $temp$soFar = (soFar * 16) + 13, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMoreHexadecimal;
            case "e":
                var $temp$soFar = (soFar * 16) + 14, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMoreHexadecimal;
            case "E":
                var $temp$soFar = (soFar * 16) + 14, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMoreHexadecimal;
            case "f":
                var $temp$soFar = (soFar * 16) + 15, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMoreHexadecimal;
            case "F":
                var $temp$soFar = (soFar * 16) + 15, $temp$offset = offset + 1, $temp$src = src;
                soFar = $temp$soFar;
                offset = $temp$offset;
                src = $temp$src;
                continue convert0OrMoreHexadecimal;
            default:
                return { eg: soFar, J: offset };
        }
    }
}, $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal = F3($stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal_fn);
var $stil4m$elm_syntax$ParserFast$convert1OrMoreHexadecimal_fn = function (offset, src) {
    var _v0 = _String_slice_fn(offset, offset + 1, src);
    switch (_v0) {
        case "0":
            return $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal_fn(0, offset + 1, src);
        case "1":
            return $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal_fn(1, offset + 1, src);
        case "2":
            return $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal_fn(2, offset + 1, src);
        case "3":
            return $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal_fn(3, offset + 1, src);
        case "4":
            return $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal_fn(4, offset + 1, src);
        case "5":
            return $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal_fn(5, offset + 1, src);
        case "6":
            return $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal_fn(6, offset + 1, src);
        case "7":
            return $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal_fn(7, offset + 1, src);
        case "8":
            return $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal_fn(8, offset + 1, src);
        case "9":
            return $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal_fn(9, offset + 1, src);
        case "a":
            return $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal_fn(10, offset + 1, src);
        case "A":
            return $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal_fn(10, offset + 1, src);
        case "b":
            return $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal_fn(11, offset + 1, src);
        case "B":
            return $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal_fn(11, offset + 1, src);
        case "c":
            return $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal_fn(12, offset + 1, src);
        case "C":
            return $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal_fn(12, offset + 1, src);
        case "d":
            return $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal_fn(13, offset + 1, src);
        case "D":
            return $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal_fn(13, offset + 1, src);
        case "e":
            return $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal_fn(14, offset + 1, src);
        case "E":
            return $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal_fn(14, offset + 1, src);
        case "f":
            return $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal_fn(15, offset + 1, src);
        case "F":
            return $stil4m$elm_syntax$ParserFast$convert0OrMoreHexadecimal_fn(15, offset + 1, src);
        default:
            return { eg: 0, J: -1 };
    }
}, $stil4m$elm_syntax$ParserFast$convert1OrMoreHexadecimal = F2($stil4m$elm_syntax$ParserFast$convert1OrMoreHexadecimal_fn);
var $stil4m$elm_syntax$ParserFast$errorAsBaseOffsetAndInt = {
    c_: 0,
    al: { eg: 0, J: -1 }
};
var $stil4m$elm_syntax$ParserFast$convertIntegerDecimalOrHexadecimal_fn = function (offset, src) {
    var _v0 = _String_slice_fn(offset, offset + 1, src);
    switch (_v0) {
        case "0":
            var _v1 = _String_slice_fn(offset + 1, offset + 2, src);
            if (_v1 === "x") {
                var hex = $stil4m$elm_syntax$ParserFast$convert1OrMoreHexadecimal_fn(offset + 2, src);
                return {
                    c_: 1,
                    al: { eg: hex.eg, J: hex.J }
                };
            }
            else {
                return {
                    c_: 0,
                    al: { eg: 0, J: offset + 1 }
                };
            }
        case "1":
            return {
                c_: 0,
                al: $stil4m$elm_syntax$ParserFast$convert0OrMore0To9s_fn(1, offset + 1, src)
            };
        case "2":
            return {
                c_: 0,
                al: $stil4m$elm_syntax$ParserFast$convert0OrMore0To9s_fn(2, offset + 1, src)
            };
        case "3":
            return {
                c_: 0,
                al: $stil4m$elm_syntax$ParserFast$convert0OrMore0To9s_fn(3, offset + 1, src)
            };
        case "4":
            return {
                c_: 0,
                al: $stil4m$elm_syntax$ParserFast$convert0OrMore0To9s_fn(4, offset + 1, src)
            };
        case "5":
            return {
                c_: 0,
                al: $stil4m$elm_syntax$ParserFast$convert0OrMore0To9s_fn(5, offset + 1, src)
            };
        case "6":
            return {
                c_: 0,
                al: $stil4m$elm_syntax$ParserFast$convert0OrMore0To9s_fn(6, offset + 1, src)
            };
        case "7":
            return {
                c_: 0,
                al: $stil4m$elm_syntax$ParserFast$convert0OrMore0To9s_fn(7, offset + 1, src)
            };
        case "8":
            return {
                c_: 0,
                al: $stil4m$elm_syntax$ParserFast$convert0OrMore0To9s_fn(8, offset + 1, src)
            };
        case "9":
            return {
                c_: 0,
                al: $stil4m$elm_syntax$ParserFast$convert0OrMore0To9s_fn(9, offset + 1, src)
            };
        default:
            return $stil4m$elm_syntax$ParserFast$errorAsBaseOffsetAndInt;
    }
}, $stil4m$elm_syntax$ParserFast$convertIntegerDecimalOrHexadecimal = F2($stil4m$elm_syntax$ParserFast$convertIntegerDecimalOrHexadecimal_fn);
var $stil4m$elm_syntax$ParserFast$integerDecimalOrHexadecimalMapWithRange_fn = function (rangeAndIntDecimalToRes, rangeAndIntHexadecimalToRes) {
    return function (s0) {
        var s1 = $stil4m$elm_syntax$ParserFast$convertIntegerDecimalOrHexadecimal_fn(s0.J, s0.H);
        if (s1.al.J === -1) {
            return $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingNumber_fn(s0.bu, s0.dW));
        }
        else {
            var newColumn = s0.dW + (s1.al.J - s0.J);
            var range = {
                b_: { cJ: newColumn, bu: s0.bu },
                cf: { cJ: s0.dW, bu: s0.bu }
            };
            return $stil4m$elm_syntax$ParserFast$Good_fn(function () {
                var _v0 = s1.c_;
                if (!_v0) {
                    return A2(rangeAndIntDecimalToRes, range, s1.al.eg);
                }
                else {
                    return A2(rangeAndIntHexadecimalToRes, range, s1.al.eg);
                }
            }(), { dW: newColumn, ac: s0.ac, J: s1.al.J, bu: s0.bu, H: s0.H });
        }
    };
}, $stil4m$elm_syntax$ParserFast$integerDecimalOrHexadecimalMapWithRange = F2($stil4m$elm_syntax$ParserFast$integerDecimalOrHexadecimalMapWithRange_fn);
var $stil4m$elm_syntax$Elm$Parser$Patterns$numberPart = $stil4m$elm_syntax$ParserFast$integerDecimalOrHexadecimalMapWithRange_fn(F2(function (range, n) {
    return {
        C: $stil4m$elm_syntax$Rope$empty,
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Pattern$IntPattern(n))
    };
}), F2(function (range, n) {
    return {
        C: $stil4m$elm_syntax$Rope$empty,
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Pattern$HexPattern(n))
    };
}));
var $stil4m$elm_syntax$ParserFast$oneOf2OrSucceed_fn = function (_v0, _v1, thirdRes) {
    var attemptFirst = _v0;
    var attemptSecond = _v1;
    return function (s) {
        var _v2 = attemptFirst(s);
        if (!_v2.$) {
            var firstGood = _v2;
            return firstGood;
        }
        else {
            var firstBad = _v2;
            var firstCommitted = firstBad.a;
            if (firstCommitted) {
                return firstBad;
            }
            else {
                var _v3 = attemptSecond(s);
                if (!_v3.$) {
                    var secondGood = _v3;
                    return secondGood;
                }
                else {
                    var secondBad = _v3;
                    var secondCommitted = secondBad.a;
                    return secondCommitted ? secondBad : $stil4m$elm_syntax$ParserFast$Good_fn(thirdRes, s);
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$oneOf2OrSucceed = F3($stil4m$elm_syntax$ParserFast$oneOf2OrSucceed_fn);
var $stil4m$elm_syntax$ParserFast$oneOf9_fn = function (_v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7, _v8) {
    var attempt0 = _v0;
    var attempt1 = _v1;
    var attempt2 = _v2;
    var attempt3 = _v3;
    var attempt4 = _v4;
    var attempt5 = _v5;
    var attempt6 = _v6;
    var attempt7 = _v7;
    var attempt8 = _v8;
    return function (s) {
        var _v9 = attempt0(s);
        if (!_v9.$) {
            var good = _v9;
            return good;
        }
        else {
            var bad0 = _v9;
            var committed0 = bad0.a;
            var x0 = bad0.b;
            if (committed0) {
                return bad0;
            }
            else {
                var _v10 = attempt1(s);
                if (!_v10.$) {
                    var good = _v10;
                    return good;
                }
                else {
                    var bad1 = _v10;
                    var committed1 = bad1.a;
                    var x1 = bad1.b;
                    if (committed1) {
                        return bad1;
                    }
                    else {
                        var _v11 = attempt2(s);
                        if (!_v11.$) {
                            var good = _v11;
                            return good;
                        }
                        else {
                            var bad2 = _v11;
                            var committed2 = bad2.a;
                            var x2 = bad2.b;
                            if (committed2) {
                                return bad2;
                            }
                            else {
                                var _v12 = attempt3(s);
                                if (!_v12.$) {
                                    var good = _v12;
                                    return good;
                                }
                                else {
                                    var bad3 = _v12;
                                    var committed3 = bad3.a;
                                    var x3 = bad3.b;
                                    if (committed3) {
                                        return bad3;
                                    }
                                    else {
                                        var _v13 = attempt4(s);
                                        if (!_v13.$) {
                                            var good = _v13;
                                            return good;
                                        }
                                        else {
                                            var bad4 = _v13;
                                            var committed4 = bad4.a;
                                            var x4 = bad4.b;
                                            if (committed4) {
                                                return bad4;
                                            }
                                            else {
                                                var _v14 = attempt5(s);
                                                if (!_v14.$) {
                                                    var good = _v14;
                                                    return good;
                                                }
                                                else {
                                                    var bad5 = _v14;
                                                    var committed5 = bad5.a;
                                                    var x5 = bad5.b;
                                                    if (committed5) {
                                                        return bad5;
                                                    }
                                                    else {
                                                        var _v15 = attempt6(s);
                                                        if (!_v15.$) {
                                                            var good = _v15;
                                                            return good;
                                                        }
                                                        else {
                                                            var bad6 = _v15;
                                                            var committed6 = bad6.a;
                                                            var x6 = bad6.b;
                                                            if (committed6) {
                                                                return bad6;
                                                            }
                                                            else {
                                                                var _v16 = attempt7(s);
                                                                if (!_v16.$) {
                                                                    var good = _v16;
                                                                    return good;
                                                                }
                                                                else {
                                                                    var bad7 = _v16;
                                                                    var committed7 = bad7.a;
                                                                    var x7 = bad7.b;
                                                                    if (committed7) {
                                                                        return bad7;
                                                                    }
                                                                    else {
                                                                        var _v17 = attempt8(s);
                                                                        if (!_v17.$) {
                                                                            var good = _v17;
                                                                            return good;
                                                                        }
                                                                        else {
                                                                            var bad8 = _v17;
                                                                            var committed8 = bad8.a;
                                                                            var x8 = bad8.b;
                                                                            return committed8 ? bad8 : $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingOneOf_fn(x0, x1, _List_fromArray([x2, x3, x4, x5, x6, x7, x8])));
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$oneOf9 = F9($stil4m$elm_syntax$ParserFast$oneOf9_fn);
var $stil4m$elm_syntax$Elm$Parser$Patterns$patternListEmpty = $stil4m$elm_syntax$Elm$Syntax$Pattern$ListPattern(_List_Nil);
var $stil4m$elm_syntax$Elm$Parser$Layout$problemPositivelyIndented = $stil4m$elm_syntax$ParserFast$problem("must be positively indented");
var $stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedFollowedBy = function (nextParser) {
    return $stil4m$elm_syntax$ParserFast$columnIndentAndThen_unwrapped(function (column, indent) {
        return (_Utils_cmp(column, indent) > 0) ? nextParser : $stil4m$elm_syntax$Elm$Parser$Layout$problemPositivelyIndented;
    });
};
var $stil4m$elm_syntax$ParserFast$ifFollowedByWhileWithoutLinebreak_fn = function (firstIsOkay, afterFirstIsOkay) {
    return function (s) {
        var firstOffset = $stil4m$elm_syntax$ParserFast$isSubCharWithoutLinebreak_fn(firstIsOkay, s.J, s.H);
        if (firstOffset === -1) {
            return $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingCharSatisfyingPredicate_fn(s.bu, s.dW));
        }
        else {
            var s1 = $stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp_fn(afterFirstIsOkay, firstOffset, s.bu, s.dW + 1, s.H, s.ac);
            return $stil4m$elm_syntax$ParserFast$Good_fn(_String_slice_fn(s.J, s1.J, s.H), s1);
        }
    };
}, $stil4m$elm_syntax$ParserFast$ifFollowedByWhileWithoutLinebreak = F2($stil4m$elm_syntax$ParserFast$ifFollowedByWhileWithoutLinebreak_fn);
var $stil4m$elm_syntax$Char$Extra$unicodeIsUpperFast = function (c) {
    var code = $elm$core$Char$toCode(c);
    return $stil4m$elm_syntax$Char$Extra$charCodeIsUpper(code) || function () {
        var cString = $elm$core$String$fromChar(c);
        return (_Utils_eq($elm$core$String$toUpper(cString), cString + "") && (!_Utils_eq($elm$core$String$toLower(cString), cString + ""))) ? ((code <= 8543) || (((8560 <= code) && (code <= 9397)) || ((9424 <= code) && (code <= 983040)))) : ((code < 120015) ? ((code < 8509) ? (((978 <= code) && (code <= 980)) || ((code === 8450) || ((code === 8455) || (((8459 <= code) && (code <= 8461)) || (((8464 <= code) && (code <= 8466)) || ((code === 8469) || (((8473 <= code) && (code <= 8477)) || ((code === 8484) || ((code === 8488) || (((8490 <= code) && (code <= 8493)) || ((8496 <= code) && (code <= 8499)))))))))))) : (((8510 <= code) && (code <= 8511)) || ((code === 8517) || (((119808 <= code) && (code <= 119833)) || (((119860 <= code) && (code <= 119885)) || (((119912 <= code) && (code <= 119937)) || ((code === 119964) || (((119966 <= code) && (code <= 119967)) || ((code === 119970) || (((119973 <= code) && (code <= 119974)) || (((119977 <= code) && (code <= 119980)) || ((119982 <= code) && (code <= 119989))))))))))))) : ((code < 120223) ? (((120016 <= code) && (code <= 120041)) || (((120068 <= code) && (code <= 120069)) || (((120071 <= code) && (code <= 120074)) || (((120077 <= code) && (code <= 120084)) || (((120086 <= code) && (code <= 120092)) || (((120120 <= code) && (code <= 120121)) || (((120123 <= code) && (code <= 120126)) || (((120128 <= code) && (code <= 120132)) || ((code === 120134) || (((120138 <= code) && (code <= 120144)) || ((120172 <= code) && (code <= 120197)))))))))))) : (((120224 <= code) && (code <= 120249)) || (((120276 <= code) && (code <= 120301)) || (((120328 <= code) && (code <= 120353)) || (((120380 <= code) && (code <= 120405)) || (((120432 <= code) && (code <= 120457)) || (((120488 <= code) && (code <= 120512)) || (((120546 <= code) && (code <= 120570)) || (((120604 <= code) && (code <= 120628)) || (((120662 <= code) && (code <= 120686)) || (((120720 <= code) && (code <= 120744)) || (code === 120778)))))))))))));
    }();
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$typeName = $stil4m$elm_syntax$ParserFast$ifFollowedByWhileWithoutLinebreak_fn($stil4m$elm_syntax$Char$Extra$unicodeIsUpperFast, $stil4m$elm_syntax$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast);
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$maybeDotTypeNamesTuple() {
    return $stil4m$elm_syntax$ParserFast$map2OrSucceed_fn_unwrapped(function (startName, afterStartName) {
        if (afterStartName.$ === 1) {
            return $elm$core$Maybe$Just(_Utils_Tuple2(_List_Nil, startName));
        }
        else {
            var _v1 = afterStartName.a;
            var qualificationAfter = _v1.a;
            var unqualified = _v1.b;
            return $elm$core$Maybe$Just(_Utils_Tuple2(_List_Cons(startName, qualificationAfter), unqualified));
        }
    }, $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(".", $stil4m$elm_syntax$Elm$Parser$Tokens$typeName), $stil4m$elm_syntax$ParserFast$lazy(function (_v2) {
        return $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$maybeDotTypeNamesTuple();
    }), $elm$core$Maybe$Nothing);
}
var $stil4m$elm_syntax$Elm$Parser$Patterns$maybeDotTypeNamesTuple = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$maybeDotTypeNamesTuple();
$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$maybeDotTypeNamesTuple = function () {
    return $stil4m$elm_syntax$Elm$Parser$Patterns$maybeDotTypeNamesTuple;
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedNameRefNode = $stil4m$elm_syntax$ParserFast$map2WithRange_fn_unwrapped(function (range, firstName, after) {
    return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, function () {
        if (after.$ === 1) {
            return { bN: _List_Nil, a: firstName };
        }
        else {
            var _v1 = after.a;
            var qualificationAfter = _v1.a;
            var unqualified = _v1.b;
            return {
                bN: _List_Cons(firstName, qualificationAfter),
                a: unqualified
            };
        }
    }());
}, $stil4m$elm_syntax$Elm$Parser$Tokens$typeName, $stil4m$elm_syntax$Elm$Parser$Patterns$maybeDotTypeNamesTuple);
var $stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedPatternWithoutConsumeArgs = $stil4m$elm_syntax$ParserFast$map2WithRange_fn_unwrapped(function (range, firstName, after) {
    return {
        C: $stil4m$elm_syntax$Rope$empty,
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern_fn(function () {
            if (after.$ === 1) {
                return { bN: _List_Nil, a: firstName };
            }
            else {
                var _v1 = after.a;
                var qualificationAfter = _v1.a;
                var unqualified = _v1.b;
                return {
                    bN: _List_Cons(firstName, qualificationAfter),
                    a: unqualified
                };
            }
        }(), _List_Nil))
    };
}, $stil4m$elm_syntax$Elm$Parser$Tokens$typeName, $stil4m$elm_syntax$Elm$Parser$Patterns$maybeDotTypeNamesTuple);
var $stil4m$elm_syntax$Elm$Syntax$Pattern$RecordPattern = function (a) {
    return { $: 8, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$recordPattern = $stil4m$elm_syntax$ParserFast$map2WithRange_fn_unwrapped(function (range, commentsBeforeElements, elements) {
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(elements.C, commentsBeforeElements),
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Pattern$RecordPattern(elements.cC))
    };
}, $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("{", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$ParserFast$followedBySymbol_fn("}", $stil4m$elm_syntax$ParserFast$map3_fn_unwrapped(function (head, commentsAfterHead, tail) {
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(tail.C, commentsAfterHead),
        cC: _List_Cons(head, tail.cC)
    };
}, $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserWithComments$many($stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(",", $stil4m$elm_syntax$ParserFast$map3_fn_unwrapped(function (beforeName, name, afterName) {
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(afterName, beforeName),
        cC: name
    };
}, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout))))), $stil4m$elm_syntax$ParserFast$symbol_fn("}", { C: $stil4m$elm_syntax$Rope$empty, cC: _List_Nil })));
var $stil4m$elm_syntax$Elm$Syntax$Pattern$StringPattern = function (a) {
    return { $: 3, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$stringPattern = $stil4m$elm_syntax$Elm$Parser$Tokens$singleOrTripleQuotedStringLiteralMapWithRange_unwrapped(function (range, string) {
    return {
        C: $stil4m$elm_syntax$Rope$empty,
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Pattern$StringPattern(string))
    };
});
var $stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern = function (a) {
    return { $: 11, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameMapWithRange = function (rangeAndNameToResult) {
    return $stil4m$elm_syntax$ParserFast$ifFollowedByWhileValidateMapWithRangeWithoutLinebreak_fn(rangeAndNameToResult, $stil4m$elm_syntax$Char$Extra$unicodeIsLowerFast, $stil4m$elm_syntax$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast, $stil4m$elm_syntax$Elm$Parser$Tokens$isNotReserved);
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$varPattern = $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameMapWithRange(F2(function (range, _var) {
    return {
        C: $stil4m$elm_syntax$Rope$empty,
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern(_var))
    };
}));
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePatternTryToCompose() {
    return $stil4m$elm_syntax$ParserFast$map3_fn_unwrapped(function (x, commentsAfterLeft, maybeComposedWithResult) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(maybeComposedWithResult.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterLeft, x.C)),
            cC: function () {
                var _v7 = maybeComposedWithResult.cC;
                switch (_v7.$) {
                    case 0:
                        return x.cC;
                    case 1:
                        var anotherName = _v7.a;
                        return $stil4m$elm_syntax$Elm$Syntax$Node$combine_fn($stil4m$elm_syntax$Elm$Syntax$Pattern$AsPattern, x.cC, anotherName);
                    default:
                        var y = _v7.a;
                        return $stil4m$elm_syntax$Elm$Syntax$Node$combine_fn($stil4m$elm_syntax$Elm$Syntax$Pattern$UnConsPattern, x.cC, y);
                }
            }()
        };
    }, $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePattern(), $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$maybeComposedWith());
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePattern() {
    return $stil4m$elm_syntax$ParserFast$oneOf9_fn($stil4m$elm_syntax$Elm$Parser$Patterns$varPattern, $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$qualifiedPatternWithConsumeArgs(), $stil4m$elm_syntax$Elm$Parser$Patterns$allPattern, $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern(), $stil4m$elm_syntax$Elm$Parser$Patterns$recordPattern, $stil4m$elm_syntax$Elm$Parser$Patterns$stringPattern, $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern(), $stil4m$elm_syntax$Elm$Parser$Patterns$numberPart, $stil4m$elm_syntax$Elm$Parser$Patterns$charPattern);
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$qualifiedPatternWithConsumeArgs() {
    return $stil4m$elm_syntax$ParserFast$map3_fn_unwrapped(function (_v4, afterStartName, argsReverse) {
        var nameRange = _v4.a;
        var name = _v4.b;
        var range = function () {
            var _v5 = argsReverse.cC;
            if (!_v5.b) {
                return nameRange;
            }
            else {
                var _v6 = _v5.a;
                var lastArgRange = _v6.a;
                return { b_: lastArgRange.b_, cf: nameRange.cf };
            }
        }();
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(argsReverse.C, afterStartName),
            cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern_fn(name, $elm$core$List$reverse(argsReverse.cC)))
        };
    }, $stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedNameRefNode, $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout, $stil4m$elm_syntax$ParserWithComments$manyWithoutReverse($stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedFollowedBy($stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (arg, commentsAfterArg) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterArg, arg.C),
            cC: arg.cC
        };
    }, $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$patternNotDirectlyComposing(), $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout))));
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$patternNotDirectlyComposing() {
    return $stil4m$elm_syntax$ParserFast$oneOf9_fn($stil4m$elm_syntax$Elm$Parser$Patterns$varPattern, $stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedPatternWithoutConsumeArgs, $stil4m$elm_syntax$Elm$Parser$Patterns$allPattern, $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern(), $stil4m$elm_syntax$Elm$Parser$Patterns$recordPattern, $stil4m$elm_syntax$Elm$Parser$Patterns$stringPattern, $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern(), $stil4m$elm_syntax$Elm$Parser$Patterns$numberPart, $stil4m$elm_syntax$Elm$Parser$Patterns$charPattern);
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern() {
    return $stil4m$elm_syntax$ParserFast$map2WithRange_fn_unwrapped(function (range, commentsBeforeElements, maybeElements) {
        if (maybeElements.$ === 1) {
            return {
                C: commentsBeforeElements,
                cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Parser$Patterns$patternListEmpty)
            };
        }
        else {
            var elements = maybeElements.a;
            return {
                C: $stil4m$elm_syntax$Rope$prependTo_fn(elements.C, commentsBeforeElements),
                cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Pattern$ListPattern(elements.cC))
            };
        }
    }, $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("[", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$ParserFast$symbol_fn("]", $elm$core$Maybe$Nothing), $stil4m$elm_syntax$ParserFast$followedBySymbol_fn("]", $stil4m$elm_syntax$ParserFast$map3_fn_unwrapped(function (head, commentsAfterHead, tail) {
        return $elm$core$Maybe$Just({
            C: $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterHead, $stil4m$elm_syntax$Rope$prependTo_fn(tail.C, head.C)),
            cC: _List_Cons(head.cC, tail.cC)
        });
    }, $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern(), $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserWithComments$many($stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(",", $stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides($stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern())))))));
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$maybeComposedWith() {
    return $stil4m$elm_syntax$ParserFast$oneOf2OrSucceed_fn($stil4m$elm_syntax$ParserFast$keywordFollowedBy_fn("as", $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (commentsAfterAs, name) {
        return {
            C: commentsAfterAs,
            cC: $stil4m$elm_syntax$Elm$Parser$Patterns$PatternComposedWithAs(name)
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode)), $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("::", $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (commentsAfterCons, patternResult) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(patternResult.C, commentsAfterCons),
            cC: $stil4m$elm_syntax$Elm$Parser$Patterns$PatternComposedWithCons(patternResult.cC)
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern())), {
        C: $stil4m$elm_syntax$Rope$empty,
        cC: $stil4m$elm_syntax$Elm$Parser$Patterns$PatternComposedWithNothing(0)
    });
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern() {
    return $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("(", $stil4m$elm_syntax$ParserFast$map2WithRange_fn_unwrapped(function (range, commentsBeforeHead, contentResult) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(contentResult.C, commentsBeforeHead),
            cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({
                b_: range.b_,
                cf: { cJ: range.cf.cJ - 1, bu: range.cf.bu }
            }, contentResult.cC)
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$ParserFast$symbol_fn(")", { C: $stil4m$elm_syntax$Rope$empty, cC: $stil4m$elm_syntax$Elm$Syntax$Pattern$UnitPattern }), $stil4m$elm_syntax$ParserFast$map3_fn_unwrapped(function (headResult, commentsAfterHead, tailResult) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(tailResult.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterHead, headResult.C)),
            cC: function () {
                var _v1 = tailResult.cC;
                if (_v1.$ === 1) {
                    return $stil4m$elm_syntax$Elm$Syntax$Pattern$ParenthesizedPattern(headResult.cC);
                }
                else {
                    var secondAndMaybeThirdPart = _v1.a;
                    var _v2 = secondAndMaybeThirdPart.el;
                    if (_v2.$ === 1) {
                        return $stil4m$elm_syntax$Elm$Syntax$Pattern$TuplePattern(_List_fromArray([headResult.cC, secondAndMaybeThirdPart.dE]));
                    }
                    else {
                        var thirdPart = _v2.a;
                        return $stil4m$elm_syntax$Elm$Syntax$Pattern$TuplePattern(_List_fromArray([headResult.cC, secondAndMaybeThirdPart.dE, thirdPart]));
                    }
                }
            }()
        };
    }, $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern(), $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$ParserFast$symbol_fn(")", { C: $stil4m$elm_syntax$Rope$empty, cC: $elm$core$Maybe$Nothing }), $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(",", $stil4m$elm_syntax$ParserFast$map4_fn_unwrapped(function (commentsBefore, secondPart, commentsAfter, maybeThirdPart) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(maybeThirdPart.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfter, $stil4m$elm_syntax$Rope$prependTo_fn(secondPart.C, commentsBefore))),
            cC: $elm$core$Maybe$Just({ el: maybeThirdPart.cC, dE: secondPart.cC })
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern(), $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$ParserFast$symbol_fn(")", { C: $stil4m$elm_syntax$Rope$empty, cC: $elm$core$Maybe$Nothing }), $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(",", $stil4m$elm_syntax$ParserFast$followedBySymbol_fn(")", $stil4m$elm_syntax$ParserFast$map3_fn_unwrapped(function (commentsBefore, thirdPart, commentsAfter) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfter, $stil4m$elm_syntax$Rope$prependTo_fn(thirdPart.C, commentsBefore)),
            cC: $elm$core$Maybe$Just(thirdPart.cC)
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern(), $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)))))))))));
}
function $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern() {
    return $stil4m$elm_syntax$ParserFast$lazy(function (_v0) {
        return $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePatternTryToCompose();
    });
}
var $stil4m$elm_syntax$Elm$Parser$Patterns$composablePatternTryToCompose = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePatternTryToCompose();
$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePatternTryToCompose = function () {
    return $stil4m$elm_syntax$Elm$Parser$Patterns$composablePatternTryToCompose;
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$composablePattern = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePattern();
$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$composablePattern = function () {
    return $stil4m$elm_syntax$Elm$Parser$Patterns$composablePattern;
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedPatternWithConsumeArgs = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$qualifiedPatternWithConsumeArgs();
$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$qualifiedPatternWithConsumeArgs = function () {
    return $stil4m$elm_syntax$Elm$Parser$Patterns$qualifiedPatternWithConsumeArgs;
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$patternNotDirectlyComposing = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$patternNotDirectlyComposing();
$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$patternNotDirectlyComposing = function () {
    return $stil4m$elm_syntax$Elm$Parser$Patterns$patternNotDirectlyComposing;
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$listPattern = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern();
$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$listPattern = function () {
    return $stil4m$elm_syntax$Elm$Parser$Patterns$listPattern;
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$maybeComposedWith = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$maybeComposedWith();
$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$maybeComposedWith = function () {
    return $stil4m$elm_syntax$Elm$Parser$Patterns$maybeComposedWith;
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$parensPattern = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern();
$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$parensPattern = function () {
    return $stil4m$elm_syntax$Elm$Parser$Patterns$parensPattern;
};
var $stil4m$elm_syntax$Elm$Parser$Patterns$pattern = $stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern();
$stil4m$elm_syntax$Elm$Parser$Patterns$cyclic$pattern = function () {
    return $stil4m$elm_syntax$Elm$Parser$Patterns$pattern;
};
var $stil4m$elm_syntax$ParserWithComments$until_fn = function (end, element) {
    return $stil4m$elm_syntax$ParserFast$loopUntil_fn(end, element, _Utils_Tuple2($stil4m$elm_syntax$Rope$empty, _List_Nil), F2(function (pResult, _v0) {
        var commentsSoFar = _v0.a;
        var itemsSoFar = _v0.b;
        return _Utils_Tuple2($stil4m$elm_syntax$Rope$prependTo_fn(pResult.C, commentsSoFar), _List_Cons(pResult.cC, itemsSoFar));
    }), function (_v1) {
        var commentsSoFar = _v1.a;
        var itemsSoFar = _v1.b;
        return {
            C: commentsSoFar,
            cC: $elm$core$List$reverse(itemsSoFar)
        };
    });
}, $stil4m$elm_syntax$ParserWithComments$until = F2($stil4m$elm_syntax$ParserWithComments$until_fn);
var $stil4m$elm_syntax$Elm$Parser$Expression$parameterPatternsEqual = $stil4m$elm_syntax$ParserWithComments$until_fn($stil4m$elm_syntax$Elm$Parser$Tokens$equal, $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (patternResult, commentsAfterPattern) {
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterPattern, patternResult.C),
        cC: patternResult.cC
    };
}, $stil4m$elm_syntax$Elm$Parser$Patterns$patternNotDirectlyComposing, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout));
var $stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedPlusFollowedBy_fn = function (extraIndent, nextParser) {
    return $stil4m$elm_syntax$ParserFast$columnIndentAndThen_unwrapped(function (column, indent) {
        return (_Utils_cmp(column, indent + extraIndent) > 0) ? nextParser : $stil4m$elm_syntax$Elm$Parser$Layout$problemPositivelyIndented;
    });
}, $stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedPlusFollowedBy = F2($stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedPlusFollowedBy_fn);
var $stil4m$elm_syntax$Elm$Parser$Expression$problemCannotMixNonAssociativeInfixOperators = $stil4m$elm_syntax$ParserFast$problem("cannot mix non-associative infix operators without parenthesis");
var $stil4m$elm_syntax$Elm$Parser$Expression$rangeMoveStartLeftByOneColumn = function (range) {
    return {
        b_: range.b_,
        cf: { cJ: range.cf.cJ - 1, bu: range.cf.bu }
    };
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccessFunction = function (a) {
    return { $: 21, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$Expression$recordAccessFunctionExpression = $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(".", $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameMapWithRange(F2(function (range, field) {
    return {
        C: $stil4m$elm_syntax$Rope$empty,
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn($stil4m$elm_syntax$Elm$Parser$Expression$rangeMoveStartLeftByOneColumn(range), $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccessFunction("." + field))
    };
})));
var $stil4m$elm_syntax$Elm$Syntax$Expression$Floatable = function (a) {
    return { $: 9, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Hex = function (a) {
    return { $: 8, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Expression$Integer = function (a) {
    return { $: 7, a: a };
};
var $stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9_fn = function (offset, src) {
    skip0OrMoreDigits0To9: while (true) {
        var _v0 = _String_slice_fn(offset, offset + 1, src);
        switch (_v0) {
            case "0":
                var $temp$offset = offset + 1, $temp$src = src;
                offset = $temp$offset;
                src = $temp$src;
                continue skip0OrMoreDigits0To9;
            case "1":
                var $temp$offset = offset + 1, $temp$src = src;
                offset = $temp$offset;
                src = $temp$src;
                continue skip0OrMoreDigits0To9;
            case "2":
                var $temp$offset = offset + 1, $temp$src = src;
                offset = $temp$offset;
                src = $temp$src;
                continue skip0OrMoreDigits0To9;
            case "3":
                var $temp$offset = offset + 1, $temp$src = src;
                offset = $temp$offset;
                src = $temp$src;
                continue skip0OrMoreDigits0To9;
            case "4":
                var $temp$offset = offset + 1, $temp$src = src;
                offset = $temp$offset;
                src = $temp$src;
                continue skip0OrMoreDigits0To9;
            case "5":
                var $temp$offset = offset + 1, $temp$src = src;
                offset = $temp$offset;
                src = $temp$src;
                continue skip0OrMoreDigits0To9;
            case "6":
                var $temp$offset = offset + 1, $temp$src = src;
                offset = $temp$offset;
                src = $temp$src;
                continue skip0OrMoreDigits0To9;
            case "7":
                var $temp$offset = offset + 1, $temp$src = src;
                offset = $temp$offset;
                src = $temp$src;
                continue skip0OrMoreDigits0To9;
            case "8":
                var $temp$offset = offset + 1, $temp$src = src;
                offset = $temp$offset;
                src = $temp$src;
                continue skip0OrMoreDigits0To9;
            case "9":
                var $temp$offset = offset + 1, $temp$src = src;
                offset = $temp$offset;
                src = $temp$src;
                continue skip0OrMoreDigits0To9;
            default:
                return offset;
        }
    }
}, $stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9 = F2($stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9_fn);
var $stil4m$elm_syntax$ParserFast$skip1OrMoreDigits0To9_fn = function (offset, src) {
    var _v0 = _String_slice_fn(offset, offset + 1, src);
    switch (_v0) {
        case "0":
            return $stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9_fn(offset + 1, src);
        case "1":
            return $stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9_fn(offset + 1, src);
        case "2":
            return $stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9_fn(offset + 1, src);
        case "3":
            return $stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9_fn(offset + 1, src);
        case "4":
            return $stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9_fn(offset + 1, src);
        case "5":
            return $stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9_fn(offset + 1, src);
        case "6":
            return $stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9_fn(offset + 1, src);
        case "7":
            return $stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9_fn(offset + 1, src);
        case "8":
            return $stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9_fn(offset + 1, src);
        case "9":
            return $stil4m$elm_syntax$ParserFast$skip0OrMoreDigits0To9_fn(offset + 1, src);
        default:
            return -1;
    }
}, $stil4m$elm_syntax$ParserFast$skip1OrMoreDigits0To9 = F2($stil4m$elm_syntax$ParserFast$skip1OrMoreDigits0To9_fn);
var $stil4m$elm_syntax$ParserFast$skipAfterFloatExponentMark_fn = function (offset, src) {
    var _v0 = _String_slice_fn(offset, offset + 1, src);
    switch (_v0) {
        case "+":
            return $stil4m$elm_syntax$ParserFast$skip1OrMoreDigits0To9_fn(offset + 1, src);
        case "-":
            return $stil4m$elm_syntax$ParserFast$skip1OrMoreDigits0To9_fn(offset + 1, src);
        default:
            return $stil4m$elm_syntax$ParserFast$skip1OrMoreDigits0To9_fn(offset, src);
    }
}, $stil4m$elm_syntax$ParserFast$skipAfterFloatExponentMark = F2($stil4m$elm_syntax$ParserFast$skipAfterFloatExponentMark_fn);
var $stil4m$elm_syntax$ParserFast$skipFloatAfterIntegerDecimal_fn = function (offset, src) {
    var _v0 = _String_slice_fn(offset, offset + 1, src);
    switch (_v0) {
        case ".":
            var offsetAfterDigits = $stil4m$elm_syntax$ParserFast$skip1OrMoreDigits0To9_fn(offset + 1, src);
            if (offsetAfterDigits === -1) {
                return -1;
            }
            else {
                var _v1 = _String_slice_fn(offsetAfterDigits, offsetAfterDigits + 1, src);
                switch (_v1) {
                    case "e":
                        return $stil4m$elm_syntax$ParserFast$skipAfterFloatExponentMark_fn(offsetAfterDigits + 1, src);
                    case "E":
                        return $stil4m$elm_syntax$ParserFast$skipAfterFloatExponentMark_fn(offsetAfterDigits + 1, src);
                    default:
                        return offsetAfterDigits;
                }
            }
        case "e":
            return $stil4m$elm_syntax$ParserFast$skipAfterFloatExponentMark_fn(offset + 1, src);
        case "E":
            return $stil4m$elm_syntax$ParserFast$skipAfterFloatExponentMark_fn(offset + 1, src);
        default:
            return -1;
    }
}, $stil4m$elm_syntax$ParserFast$skipFloatAfterIntegerDecimal = F2($stil4m$elm_syntax$ParserFast$skipFloatAfterIntegerDecimal_fn);
var $elm$core$String$toFloat = _String_toFloat;
var $stil4m$elm_syntax$ParserFast$floatOrIntegerDecimalOrHexadecimalMapWithRange_fn = function (rangeAndFloatToRes, rangeAndIntDecimalToRes, rangeAndIntHexadecimalToRes) {
    return function (s0) {
        var s1 = $stil4m$elm_syntax$ParserFast$convertIntegerDecimalOrHexadecimal_fn(s0.J, s0.H);
        if (s1.al.J === -1) {
            return $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingNumber_fn(s0.bu, s0.dW));
        }
        else {
            var offsetAfterFloat = $stil4m$elm_syntax$ParserFast$skipFloatAfterIntegerDecimal_fn(s1.al.J, s0.H);
            if (offsetAfterFloat === -1) {
                var newColumn = s0.dW + (s1.al.J - s0.J);
                var range = {
                    b_: { cJ: newColumn, bu: s0.bu },
                    cf: { cJ: s0.dW, bu: s0.bu }
                };
                return $stil4m$elm_syntax$ParserFast$Good_fn(function () {
                    var _v0 = s1.c_;
                    if (!_v0) {
                        return A2(rangeAndIntDecimalToRes, range, s1.al.eg);
                    }
                    else {
                        return A2(rangeAndIntHexadecimalToRes, range, s1.al.eg);
                    }
                }(), { dW: newColumn, ac: s0.ac, J: s1.al.J, bu: s0.bu, H: s0.H });
            }
            else {
                var _v1 = $elm$core$String$toFloat(_String_slice_fn(s0.J, offsetAfterFloat, s0.H));
                if (!_v1.$) {
                    var _float = _v1.a;
                    var newColumn = s0.dW + (offsetAfterFloat - s0.J);
                    return $stil4m$elm_syntax$ParserFast$Good_fn(A2(rangeAndFloatToRes, {
                        b_: { cJ: newColumn, bu: s0.bu },
                        cf: { cJ: s0.dW, bu: s0.bu }
                    }, _float), { dW: newColumn, ac: s0.ac, J: offsetAfterFloat, bu: s0.bu, H: s0.H });
                }
                else {
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingNumber_fn(s0.bu, s0.dW));
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$floatOrIntegerDecimalOrHexadecimalMapWithRange = F3($stil4m$elm_syntax$ParserFast$floatOrIntegerDecimalOrHexadecimalMapWithRange_fn);
var $stil4m$elm_syntax$Elm$Parser$Expression$numberExpression = $stil4m$elm_syntax$ParserFast$floatOrIntegerDecimalOrHexadecimalMapWithRange_fn(F2(function (range, n) {
    return {
        C: $stil4m$elm_syntax$Rope$empty,
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Expression$Floatable(n))
    };
}), F2(function (range, n) {
    return {
        C: $stil4m$elm_syntax$Rope$empty,
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Expression$Integer(n))
    };
}), F2(function (range, n) {
    return {
        C: $stil4m$elm_syntax$Rope$empty,
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Expression$Hex(n))
    };
}));
var $stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue_fn = function (a, b) {
    return { $: 3, a: a, b: b };
}, $stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue = F2($stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue_fn);
var $stil4m$elm_syntax$ParserFast$ifFollowedByWhileValidateWithoutLinebreak_fn = function (firstIsOkay, afterFirstIsOkay, resultIsOkay) {
    return function (s) {
        var firstOffset = $stil4m$elm_syntax$ParserFast$isSubCharWithoutLinebreak_fn(firstIsOkay, s.J, s.H);
        if (firstOffset === -1) {
            return $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingCharSatisfyingPredicate_fn(s.bu, s.dW));
        }
        else {
            var s1 = $stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp_fn(afterFirstIsOkay, firstOffset, s.bu, s.dW + 1, s.H, s.ac);
            var name = _String_slice_fn(s.J, s1.J, s.H);
            return resultIsOkay(name) ? $stil4m$elm_syntax$ParserFast$Good_fn(name, s1) : $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingStringSatisfyingPredicate_fn(s.bu, s.dW + 1));
        }
    };
}, $stil4m$elm_syntax$ParserFast$ifFollowedByWhileValidateWithoutLinebreak = F3($stil4m$elm_syntax$ParserFast$ifFollowedByWhileValidateWithoutLinebreak_fn);
var $stil4m$elm_syntax$Elm$Parser$Tokens$functionName = $stil4m$elm_syntax$ParserFast$ifFollowedByWhileValidateWithoutLinebreak_fn($stil4m$elm_syntax$Char$Extra$unicodeIsLowerFast, $stil4m$elm_syntax$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast, $stil4m$elm_syntax$Elm$Parser$Tokens$isNotReserved);
var $stil4m$elm_syntax$ParserFast$oneOf2Map_fn = function (firstToChoice, _v0, secondToChoice, _v1) {
    var attemptFirst = _v0;
    var attemptSecond = _v1;
    return function (s) {
        var _v2 = attemptFirst(s);
        if (!_v2.$) {
            var first = _v2.a;
            var s1 = _v2.b;
            return $stil4m$elm_syntax$ParserFast$Good_fn(firstToChoice(first), s1);
        }
        else {
            var firstCommitted = _v2.a;
            var firstX = _v2.b;
            if (firstCommitted) {
                return $stil4m$elm_syntax$ParserFast$Bad_fn(firstCommitted, firstX);
            }
            else {
                var _v3 = attemptSecond(s);
                if (!_v3.$) {
                    var second = _v3.a;
                    var s1 = _v3.b;
                    return $stil4m$elm_syntax$ParserFast$Good_fn(secondToChoice(second), s1);
                }
                else {
                    var secondCommitted = _v3.a;
                    var secondX = _v3.b;
                    return secondCommitted ? $stil4m$elm_syntax$ParserFast$Bad_fn(secondCommitted, secondX) : $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingOneOf_fn(firstX, secondX, _List_Nil));
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$oneOf2Map = F4($stil4m$elm_syntax$ParserFast$oneOf2Map_fn);
var $stil4m$elm_syntax$ParserFast$orSucceed_fn = function (_v0, secondRes) {
    var attemptFirst = _v0;
    return function (s) {
        var _v1 = attemptFirst(s);
        if (!_v1.$) {
            var firstGood = _v1;
            return firstGood;
        }
        else {
            var firstBad = _v1;
            var firstCommitted = firstBad.a;
            return firstCommitted ? firstBad : $stil4m$elm_syntax$ParserFast$Good_fn(secondRes, s);
        }
    };
}, $stil4m$elm_syntax$ParserFast$orSucceed = F2($stil4m$elm_syntax$ParserFast$orSucceed_fn);
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$maybeDotReferenceExpressionTuple() {
    return $stil4m$elm_syntax$ParserFast$orSucceed_fn($stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(".", $stil4m$elm_syntax$ParserFast$oneOf2Map_fn($elm$core$Maybe$Just, $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (firstName, after) {
        if (after.$ === 1) {
            return _Utils_Tuple3(_List_Nil, firstName, _List_Nil);
        }
        else {
            var _v1 = after.a;
            var qualificationAfter = _v1.a;
            var unqualified = _v1.b;
            var recordAccess = _v1.c;
            return _Utils_Tuple3(_List_Cons(firstName, qualificationAfter), unqualified, recordAccess);
        }
    }, $stil4m$elm_syntax$Elm$Parser$Tokens$typeName, $stil4m$elm_syntax$ParserFast$lazy(function (_v2) {
        return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$maybeDotReferenceExpressionTuple();
    })), $elm$core$Basics$identity, $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (name, recordAccesses) {
        return $elm$core$Maybe$Just(_Utils_Tuple3(_List_Nil, name, recordAccesses));
    }, $stil4m$elm_syntax$Elm$Parser$Tokens$functionName, $stil4m$elm_syntax$Elm$Parser$Expression$multiRecordAccess))), $elm$core$Maybe$Nothing);
}
var $stil4m$elm_syntax$Elm$Parser$Expression$maybeDotReferenceExpressionTuple = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$maybeDotReferenceExpressionTuple();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$maybeDotReferenceExpressionTuple = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$maybeDotReferenceExpressionTuple;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$qualifiedOrVariantOrRecordConstructorReferenceExpressionFollowedByRecordAccess = $stil4m$elm_syntax$ParserFast$map2WithRange_fn_unwrapped(function (range, firstName, after) {
    return {
        C: $stil4m$elm_syntax$Rope$empty,
        cC: function () {
            if (after.$ === 1) {
                return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue_fn(_List_Nil, firstName));
            }
            else {
                var _v1 = after.a;
                var qualificationAfter = _v1.a;
                var unqualified = _v1.b;
                var recordAccesses = _v1.c;
                if (!recordAccesses.b) {
                    return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue_fn(_List_Cons(firstName, qualificationAfter), unqualified));
                }
                else {
                    var _v3 = recordAccesses.a;
                    var firstRecordAccessRange = _v3.a;
                    var referenceNode = $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({
                        b_: { cJ: firstRecordAccessRange.cf.cJ - 1, bu: firstRecordAccessRange.cf.bu },
                        cf: range.cf
                    }, $stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue_fn(_List_Cons(firstName, qualificationAfter), unqualified));
                    return $elm$core$List$foldl_fn_unwrapped(function (fieldNode, leftNode) {
                        var fieldRange = fieldNode.a;
                        var leftRange = leftNode.a;
                        return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: fieldRange.b_, cf: leftRange.cf }, $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess_fn(leftNode, fieldNode));
                    }, referenceNode, recordAccesses);
                }
            }
        }()
    };
}, $stil4m$elm_syntax$Elm$Parser$Tokens$typeName, $stil4m$elm_syntax$Elm$Parser$Expression$maybeDotReferenceExpressionTuple);
var $stil4m$elm_syntax$Elm$Parser$Expression$unqualifiedFunctionReferenceExpressionFollowedByRecordAccess = $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (leftestResult, recordAccesses) {
    if (!recordAccesses.b) {
        return leftestResult;
    }
    else {
        return {
            C: leftestResult.C,
            cC: $elm$core$List$foldl_fn_unwrapped(function (fieldNode, leftNode) {
                var fieldRange = fieldNode.a;
                var leftRange = leftNode.a;
                return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: fieldRange.b_, cf: leftRange.cf }, $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess_fn(leftNode, fieldNode));
            }, leftestResult.cC, recordAccesses)
        };
    }
}, $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameMapWithRange(F2(function (range, unqualified) {
    return {
        C: $stil4m$elm_syntax$Rope$empty,
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue_fn(_List_Nil, unqualified))
    };
})), $stil4m$elm_syntax$Elm$Parser$Expression$multiRecordAccess);
var $stil4m$elm_syntax$Elm$Parser$Expression$referenceOrNumberExpression = $stil4m$elm_syntax$ParserFast$oneOf3_fn($stil4m$elm_syntax$Elm$Parser$Expression$qualifiedOrVariantOrRecordConstructorReferenceExpressionFollowedByRecordAccess, $stil4m$elm_syntax$Elm$Parser$Expression$unqualifiedFunctionReferenceExpressionFollowedByRecordAccess, $stil4m$elm_syntax$Elm$Parser$Expression$numberExpression);
var $stil4m$elm_syntax$ParserFast$symbolBacktrackableFollowedBy_fn = function (str, _v0) {
    var parseNext = _v0;
    var strLength = $elm$core$String$length(str);
    return function (s) {
        var newOffset = s.J + strLength;
        return _Utils_eq(_String_slice_fn(s.J, newOffset, s.H), str + "") ? parseNext({ dW: s.dW + strLength, ac: s.ac, J: newOffset, bu: s.bu, H: s.H }) : $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingSymbol_fn(s.bu, s.dW, str));
    };
}, $stil4m$elm_syntax$ParserFast$symbolBacktrackableFollowedBy = F2($stil4m$elm_syntax$ParserFast$symbolBacktrackableFollowedBy_fn);
var $stil4m$elm_syntax$ParserFast$symbolWithEndLocation_fn = function (str, endLocationToRes) {
    var strLength = $elm$core$String$length(str);
    return function (s) {
        var newOffset = s.J + strLength;
        if (_Utils_eq(_String_slice_fn(s.J, newOffset, s.H), str + "")) {
            var newCol = s.dW + strLength;
            return $stil4m$elm_syntax$ParserFast$Good_fn(endLocationToRes({ cJ: newCol, bu: s.bu }), { dW: newCol, ac: s.ac, J: newOffset, bu: s.bu, H: s.H });
        }
        else {
            return $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingSymbol_fn(s.bu, s.dW, str));
        }
    };
}, $stil4m$elm_syntax$ParserFast$symbolWithEndLocation = F2($stil4m$elm_syntax$ParserFast$symbolWithEndLocation_fn);
var $stil4m$elm_syntax$Elm$Parser$Expression$temporaryErrPrecedenceTooHigh = $elm$core$Result$Err("infix operator precedence too high");
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$FieldsAfterName = function (a) {
    return { $: 1, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation_fn = function (a, b) {
    return { $: 6, a: a, b: b };
}, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation = F2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation_fn);
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord_fn = function (a, b) {
    return { $: 5, a: a, b: b };
}, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord = F2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord_fn);
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record = function (a) {
    return { $: 4, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$RecordExtensionExpressionAfterName = function (a) {
    return { $: 0, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled = function (a) {
    return { $: 3, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed_fn = function (a, b) {
    return { $: 1, a: a, b: b };
}, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed = F2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed_fn);
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit = { $: 2 };
var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType = function (a) {
    return { $: 0, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$genericTypeAnnotation = $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameMapWithRange(F2(function (range, _var) {
    return {
        C: $stil4m$elm_syntax$Rope$empty,
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(_var))
    };
}));
var $stil4m$elm_syntax$ParserFast$map3WithRange_fn = function (func, _v0, _v1, _v2) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    return function (s0) {
        var _v3 = parseA(s0);
        if (_v3.$ === 1) {
            var committed = _v3.a;
            var x = _v3.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v3.a;
            var s1 = _v3.b;
            var _v4 = parseB(s1);
            if (_v4.$ === 1) {
                var x = _v4.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v4.a;
                var s2 = _v4.b;
                var _v5 = parseC(s2);
                if (_v5.$ === 1) {
                    var x = _v5.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v5.a;
                    var s3 = _v5.b;
                    return $stil4m$elm_syntax$ParserFast$Good_fn(A4(func, {
                        b_: { cJ: s3.dW, bu: s3.bu },
                        cf: { cJ: s0.dW, bu: s0.bu }
                    }, a, b, c), s3);
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map3WithRange_fn_unwrapped = function (func, _v0, _v1, _v2) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    return function (s0) {
        var _v3 = parseA(s0);
        if (_v3.$ === 1) {
            var committed = _v3.a;
            var x = _v3.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v3.a;
            var s1 = _v3.b;
            var _v4 = parseB(s1);
            if (_v4.$ === 1) {
                var x = _v4.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v4.a;
                var s2 = _v4.b;
                var _v5 = parseC(s2);
                if (_v5.$ === 1) {
                    var x = _v5.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v5.a;
                    var s3 = _v5.b;
                    return $stil4m$elm_syntax$ParserFast$Good_fn(func({
                        b_: { cJ: s3.dW, bu: s3.bu },
                        cf: { cJ: s0.dW, bu: s0.bu }
                    }, a, b, c), s3);
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map3WithRange = F4($stil4m$elm_syntax$ParserFast$map3WithRange_fn);
var $stil4m$elm_syntax$ParserFast$map6WithRange_fn = function (func, _v0, _v1, _v2, _v3, _v4, _v5) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    var parseD = _v3;
    var parseE = _v4;
    var parseF = _v5;
    return function (s0) {
        var _v6 = parseA(s0);
        if (_v6.$ === 1) {
            var committed = _v6.a;
            var x = _v6.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v6.a;
            var s1 = _v6.b;
            var _v7 = parseB(s1);
            if (_v7.$ === 1) {
                var x = _v7.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v7.a;
                var s2 = _v7.b;
                var _v8 = parseC(s2);
                if (_v8.$ === 1) {
                    var x = _v8.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v8.a;
                    var s3 = _v8.b;
                    var _v9 = parseD(s3);
                    if (_v9.$ === 1) {
                        var x = _v9.b;
                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var d = _v9.a;
                        var s4 = _v9.b;
                        var _v10 = parseE(s4);
                        if (_v10.$ === 1) {
                            var x = _v10.b;
                            return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var e = _v10.a;
                            var s5 = _v10.b;
                            var _v11 = parseF(s5);
                            if (_v11.$ === 1) {
                                var x = _v11.b;
                                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var f = _v11.a;
                                var s6 = _v11.b;
                                return $stil4m$elm_syntax$ParserFast$Good_fn(A7(func, {
                                    b_: { cJ: s6.dW, bu: s6.bu },
                                    cf: { cJ: s0.dW, bu: s0.bu }
                                }, a, b, c, d, e, f), s6);
                            }
                        }
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map6WithRange_fn_unwrapped = function (func, _v0, _v1, _v2, _v3, _v4, _v5) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    var parseD = _v3;
    var parseE = _v4;
    var parseF = _v5;
    return function (s0) {
        var _v6 = parseA(s0);
        if (_v6.$ === 1) {
            var committed = _v6.a;
            var x = _v6.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v6.a;
            var s1 = _v6.b;
            var _v7 = parseB(s1);
            if (_v7.$ === 1) {
                var x = _v7.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v7.a;
                var s2 = _v7.b;
                var _v8 = parseC(s2);
                if (_v8.$ === 1) {
                    var x = _v8.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v8.a;
                    var s3 = _v8.b;
                    var _v9 = parseD(s3);
                    if (_v9.$ === 1) {
                        var x = _v9.b;
                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var d = _v9.a;
                        var s4 = _v9.b;
                        var _v10 = parseE(s4);
                        if (_v10.$ === 1) {
                            var x = _v10.b;
                            return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var e = _v10.a;
                            var s5 = _v10.b;
                            var _v11 = parseF(s5);
                            if (_v11.$ === 1) {
                                var x = _v11.b;
                                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var f = _v11.a;
                                var s6 = _v11.b;
                                return $stil4m$elm_syntax$ParserFast$Good_fn(func({
                                    b_: { cJ: s6.dW, bu: s6.bu },
                                    cf: { cJ: s0.dW, bu: s0.bu }
                                }, a, b, c, d, e, f), s6);
                            }
                        }
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map6WithRange = F7($stil4m$elm_syntax$ParserFast$map6WithRange_fn);
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$maybeDotTypeNamesTuple() {
    return $stil4m$elm_syntax$ParserFast$map2OrSucceed_fn_unwrapped(function (firstName, afterFirstName) {
        if (afterFirstName.$ === 1) {
            return $elm$core$Maybe$Just(_Utils_Tuple2(_List_Nil, firstName));
        }
        else {
            var _v1 = afterFirstName.a;
            var qualificationAfter = _v1.a;
            var unqualified = _v1.b;
            return $elm$core$Maybe$Just(_Utils_Tuple2(_List_Cons(firstName, qualificationAfter), unqualified));
        }
    }, $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(".", $stil4m$elm_syntax$Elm$Parser$Tokens$typeName), $stil4m$elm_syntax$ParserFast$lazy(function (_v2) {
        return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$maybeDotTypeNamesTuple();
    }), $elm$core$Maybe$Nothing);
}
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$maybeDotTypeNamesTuple = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$maybeDotTypeNamesTuple();
$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$maybeDotTypeNamesTuple = function () {
    return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$maybeDotTypeNamesTuple;
};
var $stil4m$elm_syntax$ParserFast$oneOf4_fn = function (_v0, _v1, _v2, _v3) {
    var attemptFirst = _v0;
    var attemptSecond = _v1;
    var attemptThird = _v2;
    var attemptFourth = _v3;
    return function (s) {
        var _v4 = attemptFirst(s);
        if (!_v4.$) {
            var firstGood = _v4;
            return firstGood;
        }
        else {
            var firstBad = _v4;
            var firstCommitted = firstBad.a;
            var firstX = firstBad.b;
            if (firstCommitted) {
                return firstBad;
            }
            else {
                var _v5 = attemptSecond(s);
                if (!_v5.$) {
                    var secondGood = _v5;
                    return secondGood;
                }
                else {
                    var secondBad = _v5;
                    var secondCommitted = secondBad.a;
                    var secondX = secondBad.b;
                    if (secondCommitted) {
                        return secondBad;
                    }
                    else {
                        var _v6 = attemptThird(s);
                        if (!_v6.$) {
                            var thirdGood = _v6;
                            return thirdGood;
                        }
                        else {
                            var thirdBad = _v6;
                            var thirdCommitted = thirdBad.a;
                            var thirdX = thirdBad.b;
                            if (thirdCommitted) {
                                return thirdBad;
                            }
                            else {
                                var _v7 = attemptFourth(s);
                                if (!_v7.$) {
                                    var fourthGood = _v7;
                                    return fourthGood;
                                }
                                else {
                                    var fourthBad = _v7;
                                    var fourthCommitted = fourthBad.a;
                                    var fourthX = fourthBad.b;
                                    return fourthCommitted ? fourthBad : $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingOneOf_fn(firstX, secondX, _List_fromArray([thirdX, fourthX])));
                                }
                            }
                        }
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$oneOf4 = F4($stil4m$elm_syntax$ParserFast$oneOf4_fn);
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationRecordEmpty = $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(_List_Nil);
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typedTypeAnnotationWithoutArguments = $stil4m$elm_syntax$ParserFast$map2WithRange_fn_unwrapped(function (range, startName, afterStartName) {
    var name = function () {
        if (afterStartName.$ === 1) {
            return _Utils_Tuple2(_List_Nil, startName);
        }
        else {
            var _v1 = afterStartName.a;
            var qualificationAfterStartName = _v1.a;
            var unqualified = _v1.b;
            return _Utils_Tuple2(_List_Cons(startName, qualificationAfterStartName), unqualified);
        }
    }();
    return {
        C: $stil4m$elm_syntax$Rope$empty,
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed_fn($stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, name), _List_Nil))
    };
}, $stil4m$elm_syntax$Elm$Parser$Tokens$typeName, $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$maybeDotTypeNamesTuple);
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotationNoFnIncludingTypedWithArguments() {
    return $stil4m$elm_syntax$ParserFast$oneOf4_fn($stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$parensTypeAnnotation(), $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typedTypeAnnotationWithArgumentsOptimisticLayout(), $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$genericTypeAnnotation, $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordTypeAnnotation());
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typedTypeAnnotationWithArgumentsOptimisticLayout() {
    return $stil4m$elm_syntax$ParserFast$map3_fn_unwrapped(function (nameNode, commentsAfterName, argsReverse) {
        var nameRange = nameNode.a;
        var range = function () {
            var _v8 = argsReverse.cC;
            if (!_v8.b) {
                return nameRange;
            }
            else {
                var _v9 = _v8.a;
                var lastArgRange = _v9.a;
                return { b_: lastArgRange.b_, cf: nameRange.cf };
            }
        }();
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(argsReverse.C, commentsAfterName),
            cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed_fn(nameNode, $elm$core$List$reverse(argsReverse.cC)))
        };
    }, $stil4m$elm_syntax$ParserFast$map2WithRange_fn_unwrapped(function (range, startName, afterStartName) {
        var name = function () {
            if (afterStartName.$ === 1) {
                return _Utils_Tuple2(_List_Nil, startName);
            }
            else {
                var _v11 = afterStartName.a;
                var qualificationAfterStartName = _v11.a;
                var unqualified = _v11.b;
                return _Utils_Tuple2(_List_Cons(startName, qualificationAfterStartName), unqualified);
            }
        }();
        return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, name);
    }, $stil4m$elm_syntax$Elm$Parser$Tokens$typeName, $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$maybeDotTypeNamesTuple), $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout, $stil4m$elm_syntax$ParserWithComments$manyWithoutReverse($stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedFollowedBy($stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (typeAnnotationResult, commentsAfter) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfter, typeAnnotationResult.C),
            cC: typeAnnotationResult.cC
        };
    }, $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotationNoFnExcludingTypedWithArguments(), $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout))));
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotationNoFnExcludingTypedWithArguments() {
    return $stil4m$elm_syntax$ParserFast$oneOf4_fn($stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$parensTypeAnnotation(), $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typedTypeAnnotationWithoutArguments, $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$genericTypeAnnotation, $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordTypeAnnotation());
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$parensTypeAnnotation() {
    return $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("(", $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$ParserFast$symbolWithEndLocation_fn(")", function (end) {
        return {
            C: $stil4m$elm_syntax$Rope$empty,
            cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({
                b_: end,
                cf: { cJ: end.cJ - 2, bu: end.bu }
            }, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit)
        };
    }), $stil4m$elm_syntax$ParserFast$map4WithRange_fn_unwrapped(function (rangeAfterOpeningParens, commentsBeforeFirstPart, firstPart, commentsAfterFirstPart, lastToSecondPart) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(lastToSecondPart.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterFirstPart, $stil4m$elm_syntax$Rope$prependTo_fn(firstPart.C, commentsBeforeFirstPart))),
            cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({
                b_: rangeAfterOpeningParens.b_,
                cf: { cJ: rangeAfterOpeningParens.cf.cJ - 1, bu: rangeAfterOpeningParens.cf.bu }
            }, function () {
                var _v5 = lastToSecondPart.cC;
                if (_v5.$ === 1) {
                    var _v6 = firstPart.cC;
                    var firstPartType = _v6.b;
                    return firstPartType;
                }
                else {
                    var firstAndMaybeThirdPart = _v5.a;
                    var _v7 = firstAndMaybeThirdPart.el;
                    if (_v7.$ === 1) {
                        return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled(_List_fromArray([firstPart.cC, firstAndMaybeThirdPart.dE]));
                    }
                    else {
                        var thirdPart = _v7.a;
                        return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled(_List_fromArray([firstPart.cC, firstAndMaybeThirdPart.dE, thirdPart]));
                    }
                }
            }())
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(), $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$ParserFast$symbol_fn(")", { C: $stil4m$elm_syntax$Rope$empty, cC: $elm$core$Maybe$Nothing }), $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(",", $stil4m$elm_syntax$ParserFast$map4_fn_unwrapped(function (commentsBefore, secondPartResult, commentsAfter, maybeThirdPartResult) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfter, $stil4m$elm_syntax$Rope$prependTo_fn(secondPartResult.C, commentsBefore)),
            cC: $elm$core$Maybe$Just({ el: maybeThirdPartResult.cC, dE: secondPartResult.cC })
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(), $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$ParserFast$symbol_fn(")", { C: $stil4m$elm_syntax$Rope$empty, cC: $elm$core$Maybe$Nothing }), $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(",", $stil4m$elm_syntax$ParserFast$followedBySymbol_fn(")", $stil4m$elm_syntax$ParserFast$map3_fn_unwrapped(function (commentsBefore, thirdPartResult, commentsAfter) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfter, $stil4m$elm_syntax$Rope$prependTo_fn(thirdPartResult.C, commentsBefore)),
            cC: $elm$core$Maybe$Just(thirdPartResult.cC)
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(), $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout))))))))));
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordTypeAnnotation() {
    return $stil4m$elm_syntax$ParserFast$map2WithRange_fn_unwrapped(function (range, commentsBefore, afterCurly) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(afterCurly.C, commentsBefore),
            cC: function () {
                var _v3 = afterCurly.cC;
                if (_v3.$ === 1) {
                    return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationRecordEmpty);
                }
                else {
                    var afterCurlyResult = _v3.a;
                    return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, afterCurlyResult);
                }
            }()
        };
    }, $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("{", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$ParserFast$followedBySymbol_fn("}", $stil4m$elm_syntax$ParserFast$map3_fn_unwrapped(function (firstNameNode, commentsAfterFirstName, afterFirstName) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(afterFirstName.C, commentsAfterFirstName),
            cC: $elm$core$Maybe$Just(function () {
                var _v4 = afterFirstName.cC;
                if (!_v4.$) {
                    var fields = _v4.a;
                    return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord_fn(firstNameNode, fields);
                }
                else {
                    var fieldsAfterName = _v4.a;
                    return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(_List_Cons($stil4m$elm_syntax$Elm$Syntax$Node$combine_fn($elm$core$Tuple$pair, firstNameNode, fieldsAfterName.d6), fieldsAfterName.eN));
                }
            }())
        };
    }, $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("|", $stil4m$elm_syntax$ParserFast$map3WithRange_fn_unwrapped(function (range, commentsBefore, head, tail) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(tail.C, $stil4m$elm_syntax$Rope$prependTo_fn(head.C, commentsBefore)),
            cC: $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$RecordExtensionExpressionAfterName($stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, _List_Cons(head.cC, tail.cC)))
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition(), $stil4m$elm_syntax$ParserWithComments$many($stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(",", $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (commentsBefore, field) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(field.C, commentsBefore),
            cC: field.cC
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition()))))), $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(":", $stil4m$elm_syntax$ParserFast$map4_fn_unwrapped(function (commentsBeforeFirstFieldValue, firstFieldValue, commentsAfterFirstFieldValue, tailFields) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(tailFields.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterFirstFieldValue, $stil4m$elm_syntax$Rope$prependTo_fn(firstFieldValue.C, commentsBeforeFirstFieldValue))),
            cC: $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$FieldsAfterName({ d6: firstFieldValue.cC, eN: tailFields.cC })
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(), $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$orSucceed_fn($stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(",", $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldsTypeAnnotation()), { C: $stil4m$elm_syntax$Rope$empty, cC: _List_Nil })))))), $stil4m$elm_syntax$ParserFast$symbol_fn("}", { C: $stil4m$elm_syntax$Rope$empty, cC: $elm$core$Maybe$Nothing })));
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldsTypeAnnotation() {
    return $stil4m$elm_syntax$ParserFast$map3_fn_unwrapped(function (commentsBefore, head, tail) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(tail.C, $stil4m$elm_syntax$Rope$prependTo_fn(head.C, commentsBefore)),
            cC: _List_Cons(head.cC, tail.cC)
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition(), $stil4m$elm_syntax$ParserWithComments$many($stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(",", $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (commentsBefore, field) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(field.C, commentsBefore),
            cC: field.cC
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition()))));
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition() {
    return $stil4m$elm_syntax$ParserFast$map6WithRange_fn_unwrapped(function (range, commentsBeforeFunctionName, name, commentsAfterFunctionName, commentsAfterColon, value, commentsAfterValue) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterValue, $stil4m$elm_syntax$Rope$prependTo_fn(value.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterColon, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterFunctionName, commentsBeforeFunctionName)))),
            cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, _Utils_Tuple2(name, value.cC))
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(":", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation(), $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout);
}
function $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation() {
    return $stil4m$elm_syntax$ParserFast$map3_fn_unwrapped(function (inType, commentsAfterIn, maybeOut) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(maybeOut.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterIn, inType.C)),
            cC: function () {
                var _v0 = maybeOut.cC;
                if (_v0.$ === 1) {
                    return inType.cC;
                }
                else {
                    var out = _v0.a;
                    return $stil4m$elm_syntax$Elm$Syntax$Node$combine_fn($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation, inType.cC, out);
                }
            }()
        };
    }, $stil4m$elm_syntax$ParserFast$lazy(function (_v1) {
        return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotationNoFnIncludingTypedWithArguments();
    }), $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout, $stil4m$elm_syntax$ParserFast$map2OrSucceed_fn_unwrapped(function (commentsAfterArrow, typeAnnotationResult) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(typeAnnotationResult.C, commentsAfterArrow),
            cC: $elm$core$Maybe$Just(typeAnnotationResult.cC)
        };
    }, $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("->", $stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedPlusFollowedBy_fn(2, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)), $stil4m$elm_syntax$ParserFast$lazy(function (_v2) {
        return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation();
    }), { C: $stil4m$elm_syntax$Rope$empty, cC: $elm$core$Maybe$Nothing }));
}
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNoFnIncludingTypedWithArguments = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotationNoFnIncludingTypedWithArguments();
$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotationNoFnIncludingTypedWithArguments = function () {
    return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNoFnIncludingTypedWithArguments;
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typedTypeAnnotationWithArgumentsOptimisticLayout = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typedTypeAnnotationWithArgumentsOptimisticLayout();
$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typedTypeAnnotationWithArgumentsOptimisticLayout = function () {
    return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typedTypeAnnotationWithArgumentsOptimisticLayout;
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNoFnExcludingTypedWithArguments = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotationNoFnExcludingTypedWithArguments();
$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotationNoFnExcludingTypedWithArguments = function () {
    return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNoFnExcludingTypedWithArguments;
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$parensTypeAnnotation = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$parensTypeAnnotation();
$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$parensTypeAnnotation = function () {
    return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$parensTypeAnnotation;
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordTypeAnnotation = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordTypeAnnotation();
$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordTypeAnnotation = function () {
    return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordTypeAnnotation;
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordFieldsTypeAnnotation = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldsTypeAnnotation();
$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldsTypeAnnotation = function () {
    return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordFieldsTypeAnnotation;
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordFieldDefinition = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition();
$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$recordFieldDefinition = function () {
    return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$recordFieldDefinition;
};
var $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation = $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation();
$stil4m$elm_syntax$Elm$Parser$TypeAnnotation$cyclic$typeAnnotation = function () {
    return $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation;
};
var $stil4m$elm_syntax$ParserFast$validate_fn = function (isOkay, problemOnNotOkay, _v0) {
    var parseA = _v0;
    return function (s0) {
        var _v1 = parseA(s0);
        if (_v1.$ === 1) {
            var committed = _v1.a;
            var x = _v1.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var good = _v1;
            var a = good.a;
            var s1 = good.b;
            return isOkay(a) ? good : $stil4m$elm_syntax$ParserFast$Bad_fn(true, $stil4m$elm_syntax$ParserFast$ExpectingCustom_fn(s1.bu, s1.dW, problemOnNotOkay));
        }
    };
}, $stil4m$elm_syntax$ParserFast$validate = F3($stil4m$elm_syntax$ParserFast$validate_fn);
var $stil4m$elm_syntax$ParserFast$whileWithoutLinebreakAnd2PartUtf16ToResultAndThen_fn = function (whileCharIsOkay, consumedStringToIntermediateOrErr, intermediateToFollowupParser) {
    return function (s0) {
        var s1Offset = $stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakAnd2PartUtf16Help_fn(whileCharIsOkay, s0.J, s0.H);
        var whileContent = _String_slice_fn(s0.J, s1Offset, s0.H);
        var _v0 = consumedStringToIntermediateOrErr(whileContent);
        if (_v0.$ === 1) {
            var problemMessage = _v0.a;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingCustom_fn(s0.bu, s0.dW, problemMessage));
        }
        else {
            var intermediate = _v0.a;
            var s1Column = s0.dW + (s1Offset - s0.J);
            var _v1 = intermediateToFollowupParser(intermediate);
            var parseFollowup = _v1;
            return $stil4m$elm_syntax$ParserFast$pStepCommit(parseFollowup({ dW: s1Column, ac: s0.ac, J: s1Offset, bu: s0.bu, H: s0.H }));
        }
    };
}, $stil4m$elm_syntax$ParserFast$whileWithoutLinebreakAnd2PartUtf16ToResultAndThen = F3($stil4m$elm_syntax$ParserFast$whileWithoutLinebreakAnd2PartUtf16ToResultAndThen_fn);
var $stil4m$elm_syntax$ParserFast$changeIndent_fn = function (newIndent, s) {
    return { dW: s.dW, ac: newIndent, J: s.J, bu: s.bu, H: s.H };
}, $stil4m$elm_syntax$ParserFast$changeIndent = F2($stil4m$elm_syntax$ParserFast$changeIndent_fn);
var $stil4m$elm_syntax$ParserFast$withIndentSetToColumn = function (_v0) {
    var parse = _v0;
    return function (s0) {
        var _v1 = parse($stil4m$elm_syntax$ParserFast$changeIndent_fn(s0.dW, s0));
        if (!_v1.$) {
            var a = _v1.a;
            var s1 = _v1.b;
            return $stil4m$elm_syntax$ParserFast$Good_fn(a, $stil4m$elm_syntax$ParserFast$changeIndent_fn(s0.ac, s1));
        }
        else {
            var bad = _v1;
            return bad;
        }
    };
};
var $stil4m$elm_syntax$ParserFast$withIndentSetToColumnMinus_fn = function (columnToMoveIndentationBaseBackBy, _v0) {
    var parse = _v0;
    return function (s0) {
        var _v1 = parse($stil4m$elm_syntax$ParserFast$changeIndent_fn(s0.dW - columnToMoveIndentationBaseBackBy, s0));
        if (!_v1.$) {
            var a = _v1.a;
            var s1 = _v1.b;
            return $stil4m$elm_syntax$ParserFast$Good_fn(a, $stil4m$elm_syntax$ParserFast$changeIndent_fn(s0.ac, s1));
        }
        else {
            var bad = _v1;
            return bad;
        }
    };
}, $stil4m$elm_syntax$ParserFast$withIndentSetToColumnMinus = F2($stil4m$elm_syntax$ParserFast$withIndentSetToColumnMinus_fn);
var $stil4m$elm_syntax$Elm$Parser$Expression$extendedSubExpressionOptimisticLayout_fn = function (toResult, afterCommitting) {
    return $stil4m$elm_syntax$ParserFast$loopWhileSucceedsOntoResultFromParser_fn($stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedFollowedBy($stil4m$elm_syntax$Elm$Parser$Expression$infixOperatorAndThen_fn(toResult, afterCommitting)), $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpressionMaybeAppliedOptimisticLayout(), F2(function (extensionRightResult, leftNodeWithComments) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(extensionRightResult.C, leftNodeWithComments.C),
            cC: $stil4m$elm_syntax$Elm$Parser$Expression$applyExtensionRight_fn(extensionRightResult.cC, leftNodeWithComments.cC)
        };
    }), $elm$core$Basics$identity);
}, $stil4m$elm_syntax$Elm$Parser$Expression$extendedSubExpressionOptimisticLayout = F2($stil4m$elm_syntax$Elm$Parser$Expression$extendedSubExpressionOptimisticLayout_fn);
var $stil4m$elm_syntax$Elm$Parser$Expression$infixLeft_fn = function (leftPrecedence, symbol) {
    return {
        bH: $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (commentsBeforeFirst, first) {
            return {
                C: $stil4m$elm_syntax$Rope$prependTo_fn(first.C, commentsBeforeFirst),
                cC: { fh: 0, O: first.cC, cX: symbol }
            };
        }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Expression$extendedSubExpressionOptimisticLayout_fn(function (info) {
            return (_Utils_cmp(info.bK, leftPrecedence) > 0) ? $elm$core$Result$Ok(info) : $stil4m$elm_syntax$Elm$Parser$Expression$temporaryErrPrecedenceTooHigh;
        }, function ($) {
            return $.bH;
        })),
        bK: leftPrecedence,
        cX: symbol
    };
}, $stil4m$elm_syntax$Elm$Parser$Expression$infixLeft = F2($stil4m$elm_syntax$Elm$Parser$Expression$infixLeft_fn);
var $stil4m$elm_syntax$Elm$Parser$Expression$infixNonAssociative_fn = function (leftPrecedence, symbol) {
    return {
        bH: $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (commentsBefore, right) {
            return {
                C: $stil4m$elm_syntax$Rope$prependTo_fn(right.C, commentsBefore),
                cC: { fh: 2, O: right.cC, cX: symbol }
            };
        }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Expression$extendedSubExpressionOptimisticLayout_fn(function (info) {
            return (_Utils_cmp(info.bK, leftPrecedence) > -1) ? $elm$core$Result$Ok(info) : $stil4m$elm_syntax$Elm$Parser$Expression$temporaryErrPrecedenceTooHigh;
        }, function (info) {
            return _Utils_eq(info.bK, leftPrecedence) ? $stil4m$elm_syntax$Elm$Parser$Expression$problemCannotMixNonAssociativeInfixOperators : info.bH;
        })),
        bK: leftPrecedence,
        cX: symbol
    };
}, $stil4m$elm_syntax$Elm$Parser$Expression$infixNonAssociative = F2($stil4m$elm_syntax$Elm$Parser$Expression$infixNonAssociative_fn);
var $stil4m$elm_syntax$Elm$Parser$Expression$infixOperatorAndThen_fn = function (toResult, afterCommitting) {
    return $stil4m$elm_syntax$ParserFast$whileWithoutLinebreakAnd2PartUtf16ToResultAndThen_fn($stil4m$elm_syntax$Elm$Parser$Tokens$isOperatorSymbolChar, function (operator) {
        switch (operator) {
            case "|>":
                return toResult($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence1ApR());
            case "++":
                return toResult($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5append());
            case "<|":
                return toResult($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence1ApL());
            case ">>":
                return toResult($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence9ComposeR());
            case "==":
                return toResult($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Eq());
            case "*":
                return toResult($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Mul());
            case "::":
                return toResult($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5Cons());
            case "+":
                return toResult($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Add());
            case "-":
                return toResult($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Sub());
            case "|.":
                return toResult($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Ignore());
            case "&&":
                return toResult($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence3And());
            case "|=":
                return toResult($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5Keep());
            case "<<":
                return toResult($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence9ComposeL());
            case "/=":
                return toResult($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Neq());
            case "//":
                return toResult($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Idiv());
            case "/":
                return toResult($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Fdiv());
            case "</>":
                return toResult($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Slash());
            case "||":
                return toResult($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence2Or());
            case "<=":
                return toResult($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Le());
            case ">=":
                return toResult($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Ge());
            case ">":
                return toResult($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Gt());
            case "<?>":
                return toResult($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence8QuestionMark());
            case "<":
                return toResult($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Lt());
            case "^":
                return toResult($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence8Pow());
            default:
                return $stil4m$elm_syntax$Elm$Parser$Expression$errUnknownInfixOperator;
        }
    }, afterCommitting);
}, $stil4m$elm_syntax$Elm$Parser$Expression$infixOperatorAndThen = F2($stil4m$elm_syntax$Elm$Parser$Expression$infixOperatorAndThen_fn);
var $stil4m$elm_syntax$Elm$Parser$Expression$infixRight_fn = function (leftPrecedence, symbol) {
    return {
        bH: $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (commentsBeforeFirst, first) {
            return {
                C: $stil4m$elm_syntax$Rope$prependTo_fn(first.C, commentsBeforeFirst),
                cC: { fh: 1, O: first.cC, cX: symbol }
            };
        }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Expression$extendedSubExpressionOptimisticLayout_fn(function (info) {
            return (_Utils_cmp(info.bK, leftPrecedence) > -1) ? $elm$core$Result$Ok(info) : $stil4m$elm_syntax$Elm$Parser$Expression$temporaryErrPrecedenceTooHigh;
        }, function ($) {
            return $.bH;
        })),
        bK: leftPrecedence,
        cX: symbol
    };
}, $stil4m$elm_syntax$Elm$Parser$Expression$infixRight = F2($stil4m$elm_syntax$Elm$Parser$Expression$infixRight_fn);
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letOrUnqualifiedReferenceExpression() {
    return $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letExpression(), $stil4m$elm_syntax$Elm$Parser$Expression$unqualifiedFunctionReferenceExpressionFollowedByRecordAccess);
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letExpression() {
    return $stil4m$elm_syntax$ParserFast$keywordFollowedBy_fn("let", $stil4m$elm_syntax$ParserFast$map3WithStartLocation_fn_unwrapped(function (start, declarations, commentsAfterIn, expressionResult) {
        var _v38 = expressionResult.cC;
        var expressionRange = _v38.a;
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(expressionResult.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterIn, declarations.C)),
            cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({
                b_: expressionRange.b_,
                cf: { cJ: start.cJ - 3, bu: start.bu }
            }, $stil4m$elm_syntax$Elm$Syntax$Expression$LetExpression({ M: declarations.M, O: expressionResult.cC }))
        };
    }, $stil4m$elm_syntax$ParserFast$withIndentSetToColumnMinus_fn(3, $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (commentsAfterLet, declarations) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(declarations.C, commentsAfterLet),
            M: declarations.cC
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$withIndentSetToColumn($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDeclarationsIn()))), $stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedPlusFollowedBy_fn(2, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression()));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDeclarationsIn() {
    return $stil4m$elm_syntax$Elm$Parser$Layout$onTopIndentationFollowedBy($stil4m$elm_syntax$ParserFast$map3_fn_unwrapped(function (headLetResult, commentsAfter, tailLetResult) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(tailLetResult.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfter, headLetResult.C)),
            cC: _List_Cons(headLetResult.cC, tailLetResult.cC)
        };
    }, $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letFunction(), $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDestructuringDeclaration()), $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout, $stil4m$elm_syntax$ParserWithComments$until_fn($stil4m$elm_syntax$Elm$Parser$Tokens$inToken, $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$blockElement())));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$blockElement() {
    return $stil4m$elm_syntax$Elm$Parser$Layout$onTopIndentationFollowedBy($stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (letDeclarationResult, commentsAfter) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfter, letDeclarationResult.C),
            cC: letDeclarationResult.cC
        };
    }, $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letFunction(), $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDestructuringDeclaration()), $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseOrUnqualifiedReferenceExpression() {
    return $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseExpression(), $stil4m$elm_syntax$Elm$Parser$Expression$unqualifiedFunctionReferenceExpressionFollowedByRecordAccess);
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseExpression() {
    return $stil4m$elm_syntax$ParserFast$keywordFollowedBy_fn("case", $stil4m$elm_syntax$ParserFast$map5WithStartLocation_fn_unwrapped(function (start, commentsAfterCase, casedExpressionResult, commentsBeforeOf, commentsAfterOf, casesResult) {
        var _v32 = casesResult.cC;
        var firstCase = _v32.a;
        var lastToSecondCase = _v32.b;
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(casesResult.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterOf, $stil4m$elm_syntax$Rope$prependTo_fn(commentsBeforeOf, $stil4m$elm_syntax$Rope$prependTo_fn(casedExpressionResult.C, commentsAfterCase)))),
            cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({
                b_: function () {
                    if (lastToSecondCase.b) {
                        var _v34 = lastToSecondCase.a;
                        var _v35 = _v34.b;
                        var lastCaseExpressionRange = _v35.a;
                        return lastCaseExpressionRange.b_;
                    }
                    else {
                        var _v36 = firstCase;
                        var _v37 = _v36.b;
                        var firstCaseExpressionRange = _v37.a;
                        return firstCaseExpressionRange.b_;
                    }
                }(),
                cf: { cJ: start.cJ - 4, bu: start.bu }
            }, $stil4m$elm_syntax$Elm$Syntax$Expression$CaseExpression({
                aL: _List_Cons(firstCase, $elm$core$List$reverse(lastToSecondCase)),
                O: casedExpressionResult.cC
            }))
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(), $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$keywordFollowedBy_fn("of", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$ParserFast$withIndentSetToColumn($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseStatements())));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseStatements() {
    return $stil4m$elm_syntax$ParserFast$map5_fn_unwrapped(function (firstCasePatternResult, commentsAfterFirstCasePattern, commentsAfterFirstCaseArrowRight, firstCaseExpressionResult, lastToSecondCase) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(lastToSecondCase.C, $stil4m$elm_syntax$Rope$prependTo_fn(firstCaseExpressionResult.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterFirstCaseArrowRight, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterFirstCasePattern, firstCasePatternResult.C)))),
            cC: _Utils_Tuple2(_Utils_Tuple2(firstCasePatternResult.cC, firstCaseExpressionResult.cC), lastToSecondCase.cC)
        };
    }, $stil4m$elm_syntax$Elm$Parser$Patterns$pattern, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("->", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(), $stil4m$elm_syntax$ParserWithComments$manyWithoutReverse($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseStatement()));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseStatement() {
    return $stil4m$elm_syntax$Elm$Parser$Layout$onTopIndentationFollowedBy($stil4m$elm_syntax$ParserFast$map4_fn_unwrapped(function (pattern, commentsBeforeArrowRight, commentsAfterArrowRight, expr) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(expr.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterArrowRight, $stil4m$elm_syntax$Rope$prependTo_fn(commentsBeforeArrowRight, pattern.C))),
            cC: _Utils_Tuple2(pattern.cC, expr.cC)
        };
    }, $stil4m$elm_syntax$Elm$Parser$Patterns$pattern, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("->", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression()));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$tupledExpressionIfNecessaryFollowedByRecordAccess() {
    return $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("(", $stil4m$elm_syntax$ParserFast$oneOf3_fn($stil4m$elm_syntax$ParserFast$symbolWithEndLocation_fn(")", function (end) {
        return {
            C: $stil4m$elm_syntax$Rope$empty,
            cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({
                b_: end,
                cf: { cJ: end.cJ - 2, bu: end.bu }
            }, $stil4m$elm_syntax$Elm$Syntax$Expression$UnitExpr)
        };
    }), $stil4m$elm_syntax$Elm$Parser$Expression$allowedPrefixOperatorFollowedByClosingParensOneOf, $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$tupledExpressionInnerAfterOpeningParens()));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$tupledExpressionInnerAfterOpeningParens() {
    return $stil4m$elm_syntax$ParserFast$map4WithRange_fn_unwrapped(function (rangeAfterOpeningParens, commentsBeforeFirstPart, firstPart, commentsAfterFirstPart, tailParts) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(tailParts.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterFirstPart, $stil4m$elm_syntax$Rope$prependTo_fn(firstPart.C, commentsBeforeFirstPart))),
            cC: function () {
                var _v27 = tailParts.cC;
                if (!_v27.$) {
                    var recordAccesses = _v27.a;
                    if (!recordAccesses.b) {
                        return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({
                            b_: rangeAfterOpeningParens.b_,
                            cf: { cJ: rangeAfterOpeningParens.cf.cJ - 1, bu: rangeAfterOpeningParens.cf.bu }
                        }, $stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression(firstPart.cC));
                    }
                    else {
                        var _v29 = recordAccesses.a;
                        var firstRecordAccessRange = _v29.a;
                        var range = {
                            b_: { cJ: firstRecordAccessRange.cf.cJ - 1, bu: firstRecordAccessRange.cf.bu },
                            cf: { cJ: rangeAfterOpeningParens.cf.cJ - 1, bu: rangeAfterOpeningParens.cf.bu }
                        };
                        var parenthesizedNode = $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression(firstPart.cC));
                        return $elm$core$List$foldl_fn_unwrapped(function (fieldNode, leftNode) {
                            var fieldRange = fieldNode.a;
                            var leftRange = leftNode.a;
                            return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: fieldRange.b_, cf: leftRange.cf }, $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess_fn(leftNode, fieldNode));
                        }, parenthesizedNode, recordAccesses);
                    }
                }
                else {
                    var _v30 = _v27.a;
                    var secondPart = _v30.a;
                    var maybeThirdPart = _v30.b;
                    return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({
                        b_: rangeAfterOpeningParens.b_,
                        cf: { cJ: rangeAfterOpeningParens.cf.cJ - 1, bu: rangeAfterOpeningParens.cf.bu }
                    }, function () {
                        if (maybeThirdPart.$ === 1) {
                            return $stil4m$elm_syntax$Elm$Syntax$Expression$TupledExpression(_List_fromArray([firstPart.cC, secondPart]));
                        }
                        else {
                            var thirdPart = maybeThirdPart.a;
                            return $stil4m$elm_syntax$Elm$Syntax$Expression$TupledExpression(_List_fromArray([firstPart.cC, secondPart, thirdPart]));
                        }
                    }());
                }
            }()
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(), $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(")", $stil4m$elm_syntax$Elm$Parser$Expression$multiRecordAccessMap(function (recordAccesses) {
        return {
            C: $stil4m$elm_syntax$Rope$empty,
            cC: $stil4m$elm_syntax$Elm$Parser$Expression$TupledParenthesizedFollowedByRecordAccesses(recordAccesses)
        };
    })), $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(",", $stil4m$elm_syntax$ParserFast$map4_fn_unwrapped(function (commentsBefore, partResult, commentsAfter, maybeThirdPart) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(maybeThirdPart.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfter, $stil4m$elm_syntax$Rope$prependTo_fn(partResult.C, commentsBefore))),
            cC: $stil4m$elm_syntax$Elm$Parser$Expression$TupledTwoOrThree(_Utils_Tuple2(partResult.cC, maybeThirdPart.cC))
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(), $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$ParserFast$symbol_fn(")", { C: $stil4m$elm_syntax$Rope$empty, cC: $elm$core$Maybe$Nothing }), $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(",", $stil4m$elm_syntax$ParserFast$followedBySymbol_fn(")", $stil4m$elm_syntax$ParserFast$map3_fn_unwrapped(function (commentsBefore, partResult, commentsAfter) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfter, $stil4m$elm_syntax$Rope$prependTo_fn(partResult.C, commentsBefore)),
            cC: $elm$core$Maybe$Just(partResult.cC)
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(), $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout))))))));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordExpressionFollowedByRecordAccess() {
    return $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("{", $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (leftestResult, recordAccesses) {
        if (!recordAccesses.b) {
            return leftestResult;
        }
        else {
            return {
                C: leftestResult.C,
                cC: $elm$core$List$foldl_fn_unwrapped(function (fieldNode, leftNode) {
                    var fieldRange = fieldNode.a;
                    var leftRange = leftNode.a;
                    return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: fieldRange.b_, cf: leftRange.cf }, $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess_fn(leftNode, fieldNode));
                }, leftestResult.cC, recordAccesses)
            };
        }
    }, $stil4m$elm_syntax$ParserFast$map2WithRange_fn_unwrapped(function (range, commentsBefore, afterCurly) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(afterCurly.C, commentsBefore),
            cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn($stil4m$elm_syntax$Elm$Parser$Expression$rangeMoveStartLeftByOneColumn(range), afterCurly.cC)
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordContentsCurlyEnd()), $stil4m$elm_syntax$Elm$Parser$Expression$multiRecordAccess));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordContentsCurlyEnd() {
    return $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$ParserFast$map5_fn_unwrapped(function (nameNode, commentsAfterFunctionName, afterNameBeforeFields, tailFields, commentsBeforeClosingCurly) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(commentsBeforeClosingCurly, $stil4m$elm_syntax$Rope$prependTo_fn(tailFields.C, $stil4m$elm_syntax$Rope$prependTo_fn(afterNameBeforeFields.C, commentsAfterFunctionName))),
            cC: function () {
                var _v25 = afterNameBeforeFields.cC;
                if (!_v25.$) {
                    var firstField = _v25.a;
                    return $stil4m$elm_syntax$Elm$Syntax$Expression$RecordUpdateExpression_fn(nameNode, _List_Cons(firstField, tailFields.cC));
                }
                else {
                    var firstFieldValue = _v25.a;
                    return $stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr(_List_Cons($stil4m$elm_syntax$Elm$Syntax$Node$combine_fn($elm$core$Tuple$pair, nameNode, firstFieldValue), tailFields.cC));
                }
            }()
        };
    }, $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("|", $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (commentsBefore, setterResult) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(setterResult.C, commentsBefore),
            cC: $stil4m$elm_syntax$Elm$Parser$Expression$RecordUpdateFirstSetter(setterResult.cC)
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordSetterNodeWithLayout())), $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("=", $stil4m$elm_syntax$ParserFast$map3_fn_unwrapped(function (commentsBefore, expressionResult, commentsAfter) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfter, $stil4m$elm_syntax$Rope$prependTo_fn(expressionResult.C, commentsBefore)),
            cC: $stil4m$elm_syntax$Elm$Parser$Expression$FieldsFirstValue(expressionResult.cC)
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(), $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout))), $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordFields(), $stil4m$elm_syntax$ParserFast$followedBySymbol_fn("}", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)), $stil4m$elm_syntax$ParserFast$symbol_fn("}", {
        C: $stil4m$elm_syntax$Rope$empty,
        cC: $stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr(_List_Nil)
    }));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordFields() {
    return $stil4m$elm_syntax$ParserWithComments$many($stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(",", $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (commentsBefore, setterResult) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(setterResult.C, commentsBefore),
            cC: setterResult.cC
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordSetterNodeWithLayout())));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordSetterNodeWithLayout() {
    return $stil4m$elm_syntax$ParserFast$map5WithRange_fn_unwrapped(function (range, name, commentsAfterFunctionName, commentsAfterEquals, expressionResult, commentsAfterExpression) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterExpression, $stil4m$elm_syntax$Rope$prependTo_fn(expressionResult.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterEquals, commentsAfterFunctionName))),
            cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, _Utils_Tuple2(name, expressionResult.cC))
        };
    }, $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("=", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(), $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout);
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letFunction() {
    return $stil4m$elm_syntax$ParserFast$validate_fn(function (result) {
        var _v18 = result.cC;
        var letDeclaration = _v18.b;
        if (letDeclaration.$ === 1) {
            return true;
        }
        else {
            var letFunctionDeclaration = letDeclaration.a;
            var _v20 = letFunctionDeclaration.cW;
            if (_v20.$ === 1) {
                return true;
            }
            else {
                var _v21 = _v20.a;
                var signature = _v21.b;
                var _v22 = signature.a;
                var signatureName = _v22.b;
                var _v23 = letFunctionDeclaration.L;
                var implementation = _v23.b;
                var _v24 = implementation.a;
                var implementationName = _v24.b;
                return _Utils_eq(implementationName, signatureName + "");
            }
        }
    }, "Expected to find the same name for declaration and signature", $stil4m$elm_syntax$ParserFast$map6WithStartLocation_fn_unwrapped(function (startNameStart, startNameNode, commentsAfterStartName, maybeSignature, _arguments, commentsAfterEqual, expressionResult) {
        var allComments = $stil4m$elm_syntax$Rope$prependTo_fn(expressionResult.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterEqual, $stil4m$elm_syntax$Rope$prependTo_fn(_arguments.C, function () {
            if (maybeSignature.$ === 1) {
                return commentsAfterStartName;
            }
            else {
                var signature = maybeSignature.a;
                return $stil4m$elm_syntax$Rope$prependTo_fn(signature.C, commentsAfterStartName);
            }
        }())));
        if (maybeSignature.$ === 1) {
            var _v14 = expressionResult.cC;
            var expressionRange = _v14.a;
            return {
                C: allComments,
                cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: expressionRange.b_, cf: startNameStart }, $stil4m$elm_syntax$Elm$Syntax$Expression$LetFunction({
                    L: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: expressionRange.b_, cf: startNameStart }, { c: _arguments.cC, O: expressionResult.cC, a: startNameNode }),
                    cM: $elm$core$Maybe$Nothing,
                    cW: $elm$core$Maybe$Nothing
                }))
            };
        }
        else {
            var signature = maybeSignature.a;
            var _v15 = signature.cu;
            var implementationNameRange = _v15.a;
            var _v16 = expressionResult.cC;
            var expressionRange = _v16.a;
            return {
                C: allComments,
                cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: expressionRange.b_, cf: startNameStart }, $stil4m$elm_syntax$Elm$Syntax$Expression$LetFunction({
                    L: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: expressionRange.b_, cf: implementationNameRange.cf }, { c: _arguments.cC, O: expressionResult.cC, a: signature.cu }),
                    cM: $elm$core$Maybe$Nothing,
                    cW: $elm$core$Maybe$Just($stil4m$elm_syntax$Elm$Syntax$Node$combine_fn($stil4m$elm_syntax$Elm$Syntax$Signature$Signature, startNameNode, signature.ci))
                }))
            };
        }
    }, $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$map4OrSucceed_fn_unwrapped(function (commentsBeforeTypeAnnotation, typeAnnotationResult, implementationName, afterImplementationName) {
        return $elm$core$Maybe$Just({
            C: $stil4m$elm_syntax$Rope$prependTo_fn(afterImplementationName, $stil4m$elm_syntax$Rope$prependTo_fn(implementationName.C, $stil4m$elm_syntax$Rope$prependTo_fn(typeAnnotationResult.C, commentsBeforeTypeAnnotation))),
            cu: implementationName.cC,
            ci: typeAnnotationResult.cC
        });
    }, $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(":", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation, $stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedBy($stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode), $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $elm$core$Maybe$Nothing), $stil4m$elm_syntax$Elm$Parser$Expression$parameterPatternsEqual, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression()));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDestructuringDeclaration() {
    return $stil4m$elm_syntax$ParserFast$map4_fn_unwrapped(function (pattern, commentsAfterPattern, commentsAfterEquals, expressionResult) {
        var _v11 = pattern.cC;
        var start = _v11.a.cf;
        var _v12 = expressionResult.cC;
        var end = _v12.a.b_;
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(expressionResult.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterEquals, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterPattern, pattern.C))),
            cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: end, cf: start }, $stil4m$elm_syntax$Elm$Syntax$Expression$LetDestructuring_fn(pattern.cC, expressionResult.cC))
        };
    }, $stil4m$elm_syntax$Elm$Parser$Patterns$patternNotDirectlyComposing, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("=", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression());
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$lambdaExpression() {
    return $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("\\", $stil4m$elm_syntax$ParserFast$map6WithStartLocation_fn_unwrapped(function (start, commentsAfterBackslash, firstArg, commentsAfterFirstArg, secondUpArgs, commentsAfterArrow, expressionResult) {
        var _v10 = expressionResult.cC;
        var expressionRange = _v10.a;
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(expressionResult.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterArrow, $stil4m$elm_syntax$Rope$prependTo_fn(secondUpArgs.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterFirstArg, $stil4m$elm_syntax$Rope$prependTo_fn(firstArg.C, commentsAfterBackslash))))),
            cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({
                b_: expressionRange.b_,
                cf: { cJ: start.cJ - 1, bu: start.bu }
            }, $stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression({
                dQ: _List_Cons(firstArg.cC, secondUpArgs.cC),
                O: expressionResult.cC
            }))
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Patterns$patternNotDirectlyComposing, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserWithComments$until_fn($stil4m$elm_syntax$ParserFast$symbol_fn("->", 0), $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (patternResult, commentsAfter) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfter, patternResult.C),
            cC: patternResult.cC
        };
    }, $stil4m$elm_syntax$Elm$Parser$Patterns$patternNotDirectlyComposing, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)), $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression()));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$ifOrUnqualifiedReferenceExpression() {
    return $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$ifBlockExpression(), $stil4m$elm_syntax$Elm$Parser$Expression$unqualifiedFunctionReferenceExpressionFollowedByRecordAccess);
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$ifBlockExpression() {
    return $stil4m$elm_syntax$ParserFast$keywordFollowedBy_fn("if", $stil4m$elm_syntax$ParserFast$map8WithStartLocation_fn_unwrapped(function (start, commentsAfterIf, condition, commentsBeforeThen, commentsAfterThen, ifTrue, commentsBeforeElse, commentsAfterElse, ifFalse) {
        var _v9 = ifFalse.cC;
        var ifFalseRange = _v9.a;
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(ifFalse.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterElse, $stil4m$elm_syntax$Rope$prependTo_fn(commentsBeforeElse, $stil4m$elm_syntax$Rope$prependTo_fn(ifTrue.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterThen, $stil4m$elm_syntax$Rope$prependTo_fn(commentsBeforeThen, $stil4m$elm_syntax$Rope$prependTo_fn(condition.C, commentsAfterIf))))))),
            cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({
                b_: ifFalseRange.b_,
                cf: { cJ: start.cJ - 2, bu: start.bu }
            }, $stil4m$elm_syntax$Elm$Syntax$Expression$IfBlock_fn(condition.cC, ifTrue.cC, ifFalse.cC))
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(), $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$keywordFollowedBy_fn("then", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(), $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$keywordFollowedBy_fn("else", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression()));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$listOrGlslExpression() {
    return $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("[", $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expressionAfterOpeningSquareBracket());
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expressionAfterOpeningSquareBracket() {
    return $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$Elm$Parser$Expression$glslExpressionAfterOpeningSquareBracket, $stil4m$elm_syntax$ParserFast$map2WithRange_fn_unwrapped(function (range, commentsBefore, elements) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(elements.C, commentsBefore),
            cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({
                b_: range.b_,
                cf: { cJ: range.cf.cJ - 1, bu: range.cf.bu }
            }, elements.cC)
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$ParserFast$symbol_fn("]", {
        C: $stil4m$elm_syntax$Rope$empty,
        cC: $stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr(_List_Nil)
    }), $stil4m$elm_syntax$ParserFast$followedBySymbol_fn("]", $stil4m$elm_syntax$ParserFast$map3_fn_unwrapped(function (head, commentsAfterHead, tail) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(tail.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterHead, head.C)),
            cC: $stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr(_List_Cons(head.cC, tail.cC))
        };
    }, $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression(), $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserWithComments$many($stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(",", $stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides($stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression()))))))));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$extendedSubExpressionOptimisticLayout_fn($elm$core$Result$Ok, function ($) {
        return $.bH;
    });
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence9ComposeL() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$infixLeft_fn(9, "<<");
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence8QuestionMark() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$infixLeft_fn(8, "<?>");
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Mul() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$infixLeft_fn(7, "*");
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Idiv() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$infixLeft_fn(7, "//");
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Fdiv() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$infixLeft_fn(7, "/");
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Sub() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$infixLeft_fn(6, "-");
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Ignore() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$infixLeft_fn(6, "|.");
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Add() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$infixLeft_fn(6, "+");
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5Keep() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$infixLeft_fn(5, "|=");
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence1ApR() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$infixLeft_fn(1, "|>");
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Neq() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$infixNonAssociative_fn(4, "/=");
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Lt() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$infixNonAssociative_fn(4, "<");
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Le() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$infixNonAssociative_fn(4, "<=");
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Gt() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$infixNonAssociative_fn(4, ">");
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Ge() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$infixNonAssociative_fn(4, ">=");
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Eq() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$infixNonAssociative_fn(4, "==");
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence9ComposeR() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$infixRight_fn(9, ">>");
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence8Pow() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$infixRight_fn(8, "^");
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Slash() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$infixRight_fn(7, "</>");
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5append() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$infixRight_fn(5, "++");
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5Cons() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$infixRight_fn(5, "::");
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence3And() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$infixRight_fn(3, "&&");
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence2Or() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$infixRight_fn(2, "||");
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence1ApL() {
    return $stil4m$elm_syntax$Elm$Parser$Expression$infixRight_fn(1, "<|");
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus() {
    return $stil4m$elm_syntax$ParserFast$map_fn(function (subExpressionResult) {
        var _v6 = subExpressionResult.cC;
        var subExpressionRange = _v6.a;
        return {
            C: subExpressionResult.C,
            cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({
                b_: subExpressionRange.b_,
                cf: { cJ: subExpressionRange.cf.cJ - 1, bu: subExpressionRange.cf.bu }
            }, $stil4m$elm_syntax$Elm$Syntax$Expression$Negation(subExpressionResult.cC))
        };
    }, $stil4m$elm_syntax$ParserFast$lazy(function (_v7) {
        return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpression();
    }));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationOperation() {
    return $stil4m$elm_syntax$ParserFast$symbolBacktrackableFollowedBy_fn("-", $stil4m$elm_syntax$ParserFast$offsetSourceAndThen_unwrapped(function (offset, source) {
        var _v5 = _String_slice_fn(offset - 2, offset - 1, source);
        switch (_v5) {
            case " ":
                return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus();
            case "(":
                return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus();
            case ")":
                return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus();
            case "}":
                return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus();
            case ",":
                return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus();
            case "":
                return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus();
            default:
                return $stil4m$elm_syntax$Elm$Parser$Expression$negationWhitespaceProblem;
        }
    }));
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpression() {
    return $stil4m$elm_syntax$ParserFast$offsetSourceAndThen_unwrapped(function (offset, source) {
        var _v4 = _String_slice_fn(offset, offset + 1, source);
        switch (_v4) {
            case "\"":
                return $stil4m$elm_syntax$Elm$Parser$Expression$literalExpression;
            case "(":
                return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$tupledExpressionIfNecessaryFollowedByRecordAccess();
            case "[":
                return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$listOrGlslExpression();
            case "{":
                return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordExpressionFollowedByRecordAccess();
            case "c":
                return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseOrUnqualifiedReferenceExpression();
            case "\\":
                return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$lambdaExpression();
            case "l":
                return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letOrUnqualifiedReferenceExpression();
            case "i":
                return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$ifOrUnqualifiedReferenceExpression();
            case ".":
                return $stil4m$elm_syntax$Elm$Parser$Expression$recordAccessFunctionExpression;
            case "-":
                return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationOperation();
            case "'":
                return $stil4m$elm_syntax$Elm$Parser$Expression$charLiteralExpression;
            default:
                return $stil4m$elm_syntax$Elm$Parser$Expression$referenceOrNumberExpression;
        }
    });
}
function $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpressionMaybeAppliedOptimisticLayout() {
    return $stil4m$elm_syntax$ParserFast$map3_fn_unwrapped(function (leftExpressionResult, commentsBeforeExtension, maybeArgsReverse) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(maybeArgsReverse.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsBeforeExtension, leftExpressionResult.C)),
            cC: function () {
                var _v0 = maybeArgsReverse.cC;
                if (!_v0.b) {
                    return leftExpressionResult.cC;
                }
                else {
                    var argsReverse = _v0;
                    var _v1 = argsReverse.a;
                    var lastArgRange = _v1.a;
                    var leftNode = leftExpressionResult.cC;
                    var leftRange = leftNode.a;
                    return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: lastArgRange.b_, cf: leftRange.cf }, $stil4m$elm_syntax$Elm$Syntax$Expression$Application(_List_Cons(leftNode, $elm$core$List$reverse(argsReverse))));
                }
            }()
        };
    }, $stil4m$elm_syntax$ParserFast$lazy(function (_v2) {
        return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpression();
    }), $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout, $stil4m$elm_syntax$ParserWithComments$manyWithoutReverse($stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (arg, commentsAfter) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfter, arg.C),
            cC: arg.cC
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedFollowedBy($stil4m$elm_syntax$ParserFast$lazy(function (_v3) {
        return $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpression();
    })), $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout)));
}
var $stil4m$elm_syntax$Elm$Parser$Expression$letOrUnqualifiedReferenceExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letOrUnqualifiedReferenceExpression();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letOrUnqualifiedReferenceExpression = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$letOrUnqualifiedReferenceExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$letExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letExpression();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letExpression = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$letExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$letDeclarationsIn = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDeclarationsIn();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDeclarationsIn = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$letDeclarationsIn;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$blockElement = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$blockElement();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$blockElement = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$blockElement;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$caseOrUnqualifiedReferenceExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseOrUnqualifiedReferenceExpression();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseOrUnqualifiedReferenceExpression = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$caseOrUnqualifiedReferenceExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$caseExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseExpression();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseExpression = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$caseExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$caseStatements = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseStatements();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseStatements = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$caseStatements;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$caseStatement = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseStatement();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$caseStatement = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$caseStatement;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$tupledExpressionIfNecessaryFollowedByRecordAccess = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$tupledExpressionIfNecessaryFollowedByRecordAccess();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$tupledExpressionIfNecessaryFollowedByRecordAccess = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$tupledExpressionIfNecessaryFollowedByRecordAccess;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$tupledExpressionInnerAfterOpeningParens = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$tupledExpressionInnerAfterOpeningParens();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$tupledExpressionInnerAfterOpeningParens = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$tupledExpressionInnerAfterOpeningParens;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$recordExpressionFollowedByRecordAccess = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordExpressionFollowedByRecordAccess();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordExpressionFollowedByRecordAccess = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$recordExpressionFollowedByRecordAccess;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$recordContentsCurlyEnd = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordContentsCurlyEnd();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordContentsCurlyEnd = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$recordContentsCurlyEnd;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$recordFields = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordFields();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordFields = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$recordFields;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$recordSetterNodeWithLayout = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordSetterNodeWithLayout();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$recordSetterNodeWithLayout = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$recordSetterNodeWithLayout;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$letFunction = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letFunction();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letFunction = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$letFunction;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$letDestructuringDeclaration = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDestructuringDeclaration();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$letDestructuringDeclaration = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$letDestructuringDeclaration;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$lambdaExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$lambdaExpression();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$lambdaExpression = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$lambdaExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$ifOrUnqualifiedReferenceExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$ifOrUnqualifiedReferenceExpression();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$ifOrUnqualifiedReferenceExpression = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$ifOrUnqualifiedReferenceExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$ifBlockExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$ifBlockExpression();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$ifBlockExpression = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$ifBlockExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$listOrGlslExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$listOrGlslExpression();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$listOrGlslExpression = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$listOrGlslExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$expressionAfterOpeningSquareBracket = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expressionAfterOpeningSquareBracket();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expressionAfterOpeningSquareBracket = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$expressionAfterOpeningSquareBracket;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$expression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$expression = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$expression;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence9ComposeL = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence9ComposeL();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence9ComposeL = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$precedence9ComposeL;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence8QuestionMark = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence8QuestionMark();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence8QuestionMark = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$precedence8QuestionMark;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence7Mul = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Mul();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Mul = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$precedence7Mul;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence7Idiv = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Idiv();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Idiv = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$precedence7Idiv;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence7Fdiv = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Fdiv();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Fdiv = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$precedence7Fdiv;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence6Sub = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Sub();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Sub = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$precedence6Sub;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence6Ignore = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Ignore();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Ignore = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$precedence6Ignore;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence6Add = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Add();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence6Add = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$precedence6Add;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence5Keep = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5Keep();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5Keep = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$precedence5Keep;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence1ApR = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence1ApR();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence1ApR = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$precedence1ApR;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Neq = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Neq();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Neq = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Neq;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Lt = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Lt();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Lt = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Lt;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Le = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Le();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Le = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Le;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Gt = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Gt();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Gt = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Gt;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Ge = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Ge();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Ge = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Ge;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Eq = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Eq();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence4Eq = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$precedence4Eq;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence9ComposeR = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence9ComposeR();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence9ComposeR = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$precedence9ComposeR;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence8Pow = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence8Pow();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence8Pow = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$precedence8Pow;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence7Slash = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Slash();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence7Slash = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$precedence7Slash;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence5append = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5append();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5append = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$precedence5append;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence5Cons = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5Cons();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence5Cons = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$precedence5Cons;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence3And = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence3And();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence3And = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$precedence3And;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence2Or = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence2Or();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence2Or = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$precedence2Or;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$precedence1ApL = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence1ApL();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$precedence1ApL = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$precedence1ApL;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$negationAfterMinus = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationAfterMinus = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$negationAfterMinus;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$negationOperation = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationOperation();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$negationOperation = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$negationOperation;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$subExpression = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpression();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpression = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$subExpression;
};
var $stil4m$elm_syntax$Elm$Parser$Expression$subExpressionMaybeAppliedOptimisticLayout = $stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpressionMaybeAppliedOptimisticLayout();
$stil4m$elm_syntax$Elm$Parser$Expression$cyclic$subExpressionMaybeAppliedOptimisticLayout = function () {
    return $stil4m$elm_syntax$Elm$Parser$Expression$subExpressionMaybeAppliedOptimisticLayout;
};
var $elm$core$Maybe$map_fn = function (f, maybe) {
    if (!maybe.$) {
        var value = maybe.a;
        return $elm$core$Maybe$Just(f(value));
    }
    else {
        return $elm$core$Maybe$Nothing;
    }
}, $elm$core$Maybe$map = F2($elm$core$Maybe$map_fn);
var $stil4m$elm_syntax$ParserFast$map6_fn = function (func, _v0, _v1, _v2, _v3, _v4, _v5) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    var parseD = _v3;
    var parseE = _v4;
    var parseF = _v5;
    return function (s0) {
        var _v6 = parseA(s0);
        if (_v6.$ === 1) {
            var committed = _v6.a;
            var x = _v6.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v6.a;
            var s1 = _v6.b;
            var _v7 = parseB(s1);
            if (_v7.$ === 1) {
                var x = _v7.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v7.a;
                var s2 = _v7.b;
                var _v8 = parseC(s2);
                if (_v8.$ === 1) {
                    var x = _v8.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v8.a;
                    var s3 = _v8.b;
                    var _v9 = parseD(s3);
                    if (_v9.$ === 1) {
                        var x = _v9.b;
                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var d = _v9.a;
                        var s4 = _v9.b;
                        var _v10 = parseE(s4);
                        if (_v10.$ === 1) {
                            var x = _v10.b;
                            return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var e = _v10.a;
                            var s5 = _v10.b;
                            var _v11 = parseF(s5);
                            if (_v11.$ === 1) {
                                var x = _v11.b;
                                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var f = _v11.a;
                                var s6 = _v11.b;
                                return $stil4m$elm_syntax$ParserFast$Good_fn(A6(func, a, b, c, d, e, f), s6);
                            }
                        }
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map6_fn_unwrapped = function (func, _v0, _v1, _v2, _v3, _v4, _v5) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    var parseD = _v3;
    var parseE = _v4;
    var parseF = _v5;
    return function (s0) {
        var _v6 = parseA(s0);
        if (_v6.$ === 1) {
            var committed = _v6.a;
            var x = _v6.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v6.a;
            var s1 = _v6.b;
            var _v7 = parseB(s1);
            if (_v7.$ === 1) {
                var x = _v7.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v7.a;
                var s2 = _v7.b;
                var _v8 = parseC(s2);
                if (_v8.$ === 1) {
                    var x = _v8.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v8.a;
                    var s3 = _v8.b;
                    var _v9 = parseD(s3);
                    if (_v9.$ === 1) {
                        var x = _v9.b;
                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var d = _v9.a;
                        var s4 = _v9.b;
                        var _v10 = parseE(s4);
                        if (_v10.$ === 1) {
                            var x = _v10.b;
                            return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var e = _v10.a;
                            var s5 = _v10.b;
                            var _v11 = parseF(s5);
                            if (_v11.$ === 1) {
                                var x = _v11.b;
                                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var f = _v11.a;
                                var s6 = _v11.b;
                                return $stil4m$elm_syntax$ParserFast$Good_fn(func(a, b, c, d, e, f), s6);
                            }
                        }
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map6 = F7($stil4m$elm_syntax$ParserFast$map6_fn);
var $stil4m$elm_syntax$Elm$Parser$Declarations$parameterPatternsEqual = $stil4m$elm_syntax$ParserWithComments$until_fn($stil4m$elm_syntax$Elm$Parser$Tokens$equal, $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (patternResult, commentsAfterPattern) {
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterPattern, patternResult.C),
        cC: patternResult.cC
    };
}, $stil4m$elm_syntax$Elm$Parser$Patterns$patternNotDirectlyComposing, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout));
var $stil4m$elm_syntax$Elm$Parser$Declarations$functionAfterDocumentation = $stil4m$elm_syntax$ParserFast$map6_fn_unwrapped(function (startName, commentsAfterStartName, maybeSignature, _arguments, commentsAfterEqual, result) {
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(result.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterEqual, $stil4m$elm_syntax$Rope$prependTo_fn(_arguments.C, function () {
            if (maybeSignature.$ === 1) {
                return commentsAfterStartName;
            }
            else {
                var signature = maybeSignature.a;
                return $stil4m$elm_syntax$Rope$prependTo_fn(signature.C, commentsAfterStartName);
            }
        }()))),
        cC: $stil4m$elm_syntax$Elm$Parser$Declarations$FunctionDeclarationAfterDocumentation({
            c: _arguments.cC,
            O: result.cC,
            cW: $elm$core$Maybe$map_fn(function ($) {
                return $.cC;
            }, maybeSignature),
            dq: startName
        })
    };
}, $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$map4OrSucceed_fn_unwrapped(function (commentsBeforeTypeAnnotation, typeAnnotationResult, implementationName, afterImplementationName) {
    return $elm$core$Maybe$Just({
        C: $stil4m$elm_syntax$Rope$prependTo_fn(afterImplementationName, $stil4m$elm_syntax$Rope$prependTo_fn(implementationName.C, $stil4m$elm_syntax$Rope$prependTo_fn(typeAnnotationResult.C, commentsBeforeTypeAnnotation))),
        cC: { cu: implementationName.cC, ci: typeAnnotationResult.cC }
    });
}, $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(":", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation, $stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedBy($stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode), $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $elm$core$Maybe$Nothing), $stil4m$elm_syntax$Elm$Parser$Declarations$parameterPatternsEqual, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Expression$expression);
var $stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedByWithComments = function (nextParser) {
    return $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (commentsBefore, after) {
        return {
            C: $stil4m$elm_syntax$Rope$prependTo_fn(after.C, commentsBefore),
            cC: after.cC
        };
    }, $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout, $stil4m$elm_syntax$Elm$Parser$Layout$onTopIndentationFollowedBy(nextParser));
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$PortDeclarationAfterDocumentation = function (a) {
    return { $: 3, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$portDeclarationAfterDocumentation = $stil4m$elm_syntax$ParserFast$map5_fn_unwrapped(function (commentsAfterPort, name, commentsAfterName, commentsAfterColon, typeAnnotationResult) {
    var nameRange = name.a;
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterColon, $stil4m$elm_syntax$Rope$prependTo_fn(typeAnnotationResult.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterName, commentsAfterPort))),
        cC: $stil4m$elm_syntax$Elm$Parser$Declarations$PortDeclarationAfterDocumentation({
            a: name,
            eJ: { cJ: 1, bu: nameRange.cf.bu },
            ci: typeAnnotationResult.cC
        })
    };
}, $stil4m$elm_syntax$ParserFast$keywordFollowedBy_fn("port", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(":", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation);
var $stil4m$elm_syntax$Elm$Syntax$Node$range = function (_v0) {
    var r = _v0.a;
    return r;
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$TypeDeclarationAfterDocumentation = function (a) {
    return { $: 1, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$typeGenericListEquals = $stil4m$elm_syntax$ParserWithComments$until_fn($stil4m$elm_syntax$Elm$Parser$Tokens$equal, $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (name, commentsAfterName) {
    return { C: commentsAfterName, cC: name };
}, $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout));
var $stil4m$elm_syntax$ParserFast$ifFollowedByWhileMapWithRangeWithoutLinebreak_fn = function (rangeAndConsumedStringToRes, firstIsOkay, afterFirstIsOkay) {
    return function (s0) {
        var firstOffset = $stil4m$elm_syntax$ParserFast$isSubCharWithoutLinebreak_fn(firstIsOkay, s0.J, s0.H);
        if (firstOffset === -1) {
            return $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingCharSatisfyingPredicate_fn(s0.bu, s0.dW));
        }
        else {
            var s1 = $stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp_fn(afterFirstIsOkay, firstOffset, s0.bu, s0.dW + 1, s0.H, s0.ac);
            return $stil4m$elm_syntax$ParserFast$Good_fn(A2(rangeAndConsumedStringToRes, {
                b_: { cJ: s1.dW, bu: s1.bu },
                cf: { cJ: s0.dW, bu: s0.bu }
            }, _String_slice_fn(s0.J, s1.J, s0.H)), s1);
        }
    };
}, $stil4m$elm_syntax$ParserFast$ifFollowedByWhileMapWithRangeWithoutLinebreak_fn_unwrapped = function (rangeAndConsumedStringToRes, firstIsOkay, afterFirstIsOkay) {
    return function (s0) {
        var firstOffset = $stil4m$elm_syntax$ParserFast$isSubCharWithoutLinebreak_fn(firstIsOkay, s0.J, s0.H);
        if (firstOffset === -1) {
            return $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingCharSatisfyingPredicate_fn(s0.bu, s0.dW));
        }
        else {
            var s1 = $stil4m$elm_syntax$ParserFast$skipWhileWithoutLinebreakHelp_fn(afterFirstIsOkay, firstOffset, s0.bu, s0.dW + 1, s0.H, s0.ac);
            return $stil4m$elm_syntax$ParserFast$Good_fn(rangeAndConsumedStringToRes({
                b_: { cJ: s1.dW, bu: s1.bu },
                cf: { cJ: s0.dW, bu: s0.bu }
            }, _String_slice_fn(s0.J, s1.J, s0.H)), s1);
        }
    };
}, $stil4m$elm_syntax$ParserFast$ifFollowedByWhileMapWithRangeWithoutLinebreak = F3($stil4m$elm_syntax$ParserFast$ifFollowedByWhileMapWithRangeWithoutLinebreak_fn);
var $stil4m$elm_syntax$Elm$Parser$Tokens$typeNameNode = $stil4m$elm_syntax$ParserFast$ifFollowedByWhileMapWithRangeWithoutLinebreak_fn($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Char$Extra$unicodeIsUpperFast, $stil4m$elm_syntax$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast);
var $stil4m$elm_syntax$Elm$Parser$Declarations$valueConstructorOptimisticLayout = $stil4m$elm_syntax$ParserFast$map3_fn_unwrapped(function (name, commentsAfterName, argumentsReverse) {
    var nameRange = name.a;
    var fullRange = function () {
        var _v0 = argumentsReverse.cC;
        if (_v0.b) {
            var _v1 = _v0.a;
            var lastArgRange = _v1.a;
            return { b_: lastArgRange.b_, cf: nameRange.cf };
        }
        else {
            return nameRange;
        }
    }();
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(argumentsReverse.C, commentsAfterName),
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(fullRange, {
            c: $elm$core$List$reverse(argumentsReverse.cC),
            a: name
        })
    };
}, $stil4m$elm_syntax$Elm$Parser$Tokens$typeNameNode, $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout, $stil4m$elm_syntax$ParserWithComments$manyWithoutReverse($stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedFollowedBy($stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (typeAnnotationResult, commentsAfter) {
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfter, typeAnnotationResult.C),
        cC: typeAnnotationResult.cC
    };
}, $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotationNoFnExcludingTypedWithArguments, $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout))));
var $stil4m$elm_syntax$Elm$Parser$Declarations$customTypeDefinitionAfterDocumentationAfterTypePrefix = $stil4m$elm_syntax$ParserFast$map6_fn_unwrapped(function (name, commentsAfterName, parameters, commentsAfterEqual, headVariant, tailVariantsReverse) {
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(tailVariantsReverse.C, $stil4m$elm_syntax$Rope$prependTo_fn(headVariant.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterEqual, $stil4m$elm_syntax$Rope$prependTo_fn(parameters.C, commentsAfterName)))),
        cC: $stil4m$elm_syntax$Elm$Parser$Declarations$TypeDeclarationAfterDocumentation({ ct: headVariant.cC, a: name, o: parameters.cC, cD: tailVariantsReverse.cC })
    };
}, $stil4m$elm_syntax$Elm$Parser$Tokens$typeNameNode, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Declarations$typeGenericListEquals, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Declarations$valueConstructorOptimisticLayout, $stil4m$elm_syntax$ParserWithComments$manyWithoutReverse($stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("|", $stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedPlusFollowedBy_fn(1, $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (commentsBeforePipe, variantResult) {
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(variantResult.C, commentsBeforePipe),
        cC: variantResult.cC
    };
}, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Declarations$valueConstructorOptimisticLayout)))));
var $stil4m$elm_syntax$Elm$Parser$Declarations$TypeAliasDeclarationAfterDocumentation = function (a) {
    return { $: 2, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$typeAliasDefinitionAfterDocumentationAfterTypePrefix = $stil4m$elm_syntax$ParserFast$map6_fn_unwrapped(function (commentsAfterAlias, name, commentsAfterName, parameters, commentsAfterEquals, typeAnnotationResult) {
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(typeAnnotationResult.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterEquals, $stil4m$elm_syntax$Rope$prependTo_fn(parameters.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterName, commentsAfterAlias)))),
        cC: $stil4m$elm_syntax$Elm$Parser$Declarations$TypeAliasDeclarationAfterDocumentation({ a: name, o: parameters.cC, ci: typeAnnotationResult.cC })
    };
}, $stil4m$elm_syntax$ParserFast$keywordFollowedBy_fn("alias", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$Elm$Parser$Tokens$typeNameNode, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Declarations$typeGenericListEquals, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation);
var $stil4m$elm_syntax$Elm$Parser$Declarations$typeOrTypeAliasDefinitionAfterDocumentation = $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (commentsAfterType, declarationAfterDocumentation) {
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(declarationAfterDocumentation.C, commentsAfterType),
        cC: declarationAfterDocumentation.cC
    };
}, $stil4m$elm_syntax$ParserFast$keywordFollowedBy_fn("type", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$Elm$Parser$Declarations$typeAliasDefinitionAfterDocumentationAfterTypePrefix, $stil4m$elm_syntax$Elm$Parser$Declarations$customTypeDefinitionAfterDocumentationAfterTypePrefix));
var $stil4m$elm_syntax$Elm$Parser$Declarations$declarationWithDocumentation = $stil4m$elm_syntax$ParserFast$validate_fn(function (result) {
    var _v11 = result.cC;
    var decl = _v11.b;
    if (!decl.$) {
        var letFunctionDeclaration = decl.a;
        var _v13 = letFunctionDeclaration.cW;
        if (_v13.$ === 1) {
            return true;
        }
        else {
            var _v14 = _v13.a;
            var signature = _v14.b;
            var _v15 = signature.a;
            var signatureName = _v15.b;
            var _v16 = letFunctionDeclaration.L;
            var implementation = _v16.b;
            var _v17 = implementation.a;
            var implementationName = _v17.b;
            return _Utils_eq(implementationName, signatureName + "");
        }
    }
    else {
        return true;
    }
}, "Expected to find the same name for declaration and signature", $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (documentation, afterDocumentation) {
    var start = $stil4m$elm_syntax$Elm$Syntax$Node$range(documentation).cf;
    var _v0 = afterDocumentation.cC;
    switch (_v0.$) {
        case 0:
            var functionDeclarationAfterDocumentation = _v0.a;
            var _v1 = functionDeclarationAfterDocumentation.cW;
            if (!_v1.$) {
                var signature = _v1.a;
                var _v2 = signature.cu;
                var implementationNameRange = _v2.a;
                var _v3 = functionDeclarationAfterDocumentation.O;
                var expressionRange = _v3.a;
                return {
                    C: afterDocumentation.C,
                    cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: expressionRange.b_, cf: start }, $stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration({
                        L: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: expressionRange.b_, cf: implementationNameRange.cf }, { c: functionDeclarationAfterDocumentation.c, O: functionDeclarationAfterDocumentation.O, a: signature.cu }),
                        cM: $elm$core$Maybe$Just(documentation),
                        cW: $elm$core$Maybe$Just($stil4m$elm_syntax$Elm$Syntax$Node$combine_fn($stil4m$elm_syntax$Elm$Syntax$Signature$Signature, functionDeclarationAfterDocumentation.dq, signature.ci))
                    }))
                };
            }
            else {
                var _v4 = functionDeclarationAfterDocumentation.dq;
                var startNameRange = _v4.a;
                var _v5 = functionDeclarationAfterDocumentation.O;
                var expressionRange = _v5.a;
                return {
                    C: afterDocumentation.C,
                    cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: expressionRange.b_, cf: start }, $stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration({
                        L: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: expressionRange.b_, cf: startNameRange.cf }, { c: functionDeclarationAfterDocumentation.c, O: functionDeclarationAfterDocumentation.O, a: functionDeclarationAfterDocumentation.dq }),
                        cM: $elm$core$Maybe$Just(documentation),
                        cW: $elm$core$Maybe$Nothing
                    }))
                };
            }
        case 1:
            var typeDeclarationAfterDocumentation = _v0.a;
            var end = function () {
                var _v6 = typeDeclarationAfterDocumentation.cD;
                if (_v6.b) {
                    var _v7 = _v6.a;
                    var range = _v7.a;
                    return range.b_;
                }
                else {
                    var _v8 = typeDeclarationAfterDocumentation.ct;
                    var headVariantRange = _v8.a;
                    return headVariantRange.b_;
                }
            }();
            return {
                C: afterDocumentation.C,
                cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: end, cf: start }, $stil4m$elm_syntax$Elm$Syntax$Declaration$CustomTypeDeclaration({
                    fa: _List_Cons(typeDeclarationAfterDocumentation.ct, $elm$core$List$reverse(typeDeclarationAfterDocumentation.cD)),
                    cM: $elm$core$Maybe$Just(documentation),
                    d9: typeDeclarationAfterDocumentation.o,
                    a: typeDeclarationAfterDocumentation.a
                }))
            };
        case 2:
            var typeAliasDeclarationAfterDocumentation = _v0.a;
            var _v9 = typeAliasDeclarationAfterDocumentation.ci;
            var typeAnnotationRange = _v9.a;
            return {
                C: afterDocumentation.C,
                cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: typeAnnotationRange.b_, cf: start }, $stil4m$elm_syntax$Elm$Syntax$Declaration$AliasDeclaration({
                    cM: $elm$core$Maybe$Just(documentation),
                    d9: typeAliasDeclarationAfterDocumentation.o,
                    a: typeAliasDeclarationAfterDocumentation.a,
                    ci: typeAliasDeclarationAfterDocumentation.ci
                }))
            };
        default:
            var portDeclarationAfterName = _v0.a;
            var _v10 = portDeclarationAfterName.ci;
            var typeAnnotationRange = _v10.a;
            return {
                C: $stil4m$elm_syntax$Rope$filledPrependTo_fn(afterDocumentation.C, $stil4m$elm_syntax$Rope$one(documentation)),
                cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: typeAnnotationRange.b_, cf: portDeclarationAfterName.eJ }, $stil4m$elm_syntax$Elm$Syntax$Declaration$PortDeclaration({ a: portDeclarationAfterName.a, ci: portDeclarationAfterName.ci }))
            };
    }
}, $stil4m$elm_syntax$Elm$Parser$Comments$declarationDocumentation, $stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedByWithComments($stil4m$elm_syntax$ParserFast$oneOf3_fn($stil4m$elm_syntax$Elm$Parser$Declarations$functionAfterDocumentation, $stil4m$elm_syntax$Elm$Parser$Declarations$typeOrTypeAliasDefinitionAfterDocumentation, $stil4m$elm_syntax$Elm$Parser$Declarations$portDeclarationAfterDocumentation))));
var $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNotInfixNode = $stil4m$elm_syntax$ParserFast$ifFollowedByWhileValidateMapWithRangeWithoutLinebreak_fn($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$Char$Extra$unicodeIsLowerFast, $stil4m$elm_syntax$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast, function (name) {
    return (name !== "infix") && $stil4m$elm_syntax$Elm$Parser$Tokens$isNotReserved(name);
});
var $stil4m$elm_syntax$Elm$Parser$Declarations$functionDeclarationWithoutDocumentation = $stil4m$elm_syntax$ParserFast$validate_fn(function (result) {
    var _v5 = result.cC;
    var decl = _v5.b;
    if (!decl.$) {
        var letFunctionDeclaration = decl.a;
        var _v7 = letFunctionDeclaration.cW;
        if (_v7.$ === 1) {
            return true;
        }
        else {
            var _v8 = _v7.a;
            var signature = _v8.b;
            var _v9 = signature.a;
            var signatureName = _v9.b;
            var _v10 = letFunctionDeclaration.L;
            var implementation = _v10.b;
            var _v11 = implementation.a;
            var implementationName = _v11.b;
            return _Utils_eq(implementationName, signatureName + "");
        }
    }
    else {
        return true;
    }
}, "Expected to find the same name for declaration and signature", $stil4m$elm_syntax$ParserFast$map6WithStartLocation_fn_unwrapped(function (startNameStart, startNameNode, commentsAfterStartName, maybeSignature, _arguments, commentsAfterEqual, result) {
    var allComments = $stil4m$elm_syntax$Rope$prependTo_fn(result.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterEqual, $stil4m$elm_syntax$Rope$prependTo_fn(_arguments.C, function () {
        if (maybeSignature.$ === 1) {
            return commentsAfterStartName;
        }
        else {
            var signature = maybeSignature.a;
            return $stil4m$elm_syntax$Rope$prependTo_fn(signature.C, commentsAfterStartName);
        }
    }())));
    if (maybeSignature.$ === 1) {
        var _v1 = result.cC;
        var expressionRange = _v1.a;
        return {
            C: allComments,
            cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: expressionRange.b_, cf: startNameStart }, $stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration({
                L: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: expressionRange.b_, cf: startNameStart }, { c: _arguments.cC, O: result.cC, a: startNameNode }),
                cM: $elm$core$Maybe$Nothing,
                cW: $elm$core$Maybe$Nothing
            }))
        };
    }
    else {
        var signature = maybeSignature.a;
        var _v2 = signature.cu;
        var implementationNameRange = _v2.a;
        var _v3 = result.cC;
        var expressionRange = _v3.a;
        return {
            C: allComments,
            cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: expressionRange.b_, cf: startNameStart }, $stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration({
                L: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: expressionRange.b_, cf: implementationNameRange.cf }, { c: _arguments.cC, O: result.cC, a: signature.cu }),
                cM: $elm$core$Maybe$Nothing,
                cW: $elm$core$Maybe$Just($stil4m$elm_syntax$Elm$Syntax$Node$combine_fn($stil4m$elm_syntax$Elm$Syntax$Signature$Signature, startNameNode, signature.ci))
            }))
        };
    }
}, $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNotInfixNode, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$map4OrSucceed_fn_unwrapped(function (commentsBeforeTypeAnnotation, typeAnnotationResult, implementationName, afterImplementationName) {
    return $elm$core$Maybe$Just({
        C: $stil4m$elm_syntax$Rope$prependTo_fn(afterImplementationName, $stil4m$elm_syntax$Rope$prependTo_fn(implementationName.C, $stil4m$elm_syntax$Rope$prependTo_fn(typeAnnotationResult.C, commentsBeforeTypeAnnotation))),
        cu: implementationName.cC,
        ci: typeAnnotationResult.cC
    });
}, $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(":", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation, $stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedBy($stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode), $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $elm$core$Maybe$Nothing), $stil4m$elm_syntax$Elm$Parser$Declarations$parameterPatternsEqual, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Expression$expression));
var $stil4m$elm_syntax$Elm$Syntax$Declaration$InfixDeclaration = function (a) {
    return { $: 4, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$infixDirection = $stil4m$elm_syntax$ParserFast$oneOf3_fn($stil4m$elm_syntax$ParserFast$mapWithRange_fn($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$ParserFast$keyword_fn("right", 1)), $stil4m$elm_syntax$ParserFast$mapWithRange_fn($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$ParserFast$keyword_fn("left", 0)), $stil4m$elm_syntax$ParserFast$mapWithRange_fn($stil4m$elm_syntax$Elm$Syntax$Node$Node, $stil4m$elm_syntax$ParserFast$keyword_fn("non", 2)));
var $stil4m$elm_syntax$ParserFast$errorAsOffsetAndInt = { eg: 0, J: -1 };
var $stil4m$elm_syntax$ParserFast$convertIntegerDecimal_fn = function (offset, src) {
    var _v0 = _String_slice_fn(offset, offset + 1, src);
    switch (_v0) {
        case "0":
            return { eg: 0, J: offset + 1 };
        case "1":
            return $stil4m$elm_syntax$ParserFast$convert0OrMore0To9s_fn(1, offset + 1, src);
        case "2":
            return $stil4m$elm_syntax$ParserFast$convert0OrMore0To9s_fn(2, offset + 1, src);
        case "3":
            return $stil4m$elm_syntax$ParserFast$convert0OrMore0To9s_fn(3, offset + 1, src);
        case "4":
            return $stil4m$elm_syntax$ParserFast$convert0OrMore0To9s_fn(4, offset + 1, src);
        case "5":
            return $stil4m$elm_syntax$ParserFast$convert0OrMore0To9s_fn(5, offset + 1, src);
        case "6":
            return $stil4m$elm_syntax$ParserFast$convert0OrMore0To9s_fn(6, offset + 1, src);
        case "7":
            return $stil4m$elm_syntax$ParserFast$convert0OrMore0To9s_fn(7, offset + 1, src);
        case "8":
            return $stil4m$elm_syntax$ParserFast$convert0OrMore0To9s_fn(8, offset + 1, src);
        case "9":
            return $stil4m$elm_syntax$ParserFast$convert0OrMore0To9s_fn(9, offset + 1, src);
        default:
            return $stil4m$elm_syntax$ParserFast$errorAsOffsetAndInt;
    }
}, $stil4m$elm_syntax$ParserFast$convertIntegerDecimal = F2($stil4m$elm_syntax$ParserFast$convertIntegerDecimal_fn);
var $stil4m$elm_syntax$ParserFast$integerDecimalMapWithRange = function (rangeAndIntToRes) {
    return function (s0) {
        var s1 = $stil4m$elm_syntax$ParserFast$convertIntegerDecimal_fn(s0.J, s0.H);
        if (s1.J === -1) {
            return $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingNumber_fn(s0.bu, s0.dW));
        }
        else {
            var newColumn = s0.dW + (s1.J - s0.J);
            return $stil4m$elm_syntax$ParserFast$Good_fn(A2(rangeAndIntToRes, {
                b_: { cJ: newColumn, bu: s0.bu },
                cf: { cJ: s0.dW, bu: s0.bu }
            }, s1.eg), { dW: newColumn, ac: s0.ac, J: s1.J, bu: s0.bu, H: s0.H });
        }
    };
}, $stil4m$elm_syntax$ParserFast$integerDecimalMapWithRange_unwrapped = function (rangeAndIntToRes) {
    return function (s0) {
        var s1 = $stil4m$elm_syntax$ParserFast$convertIntegerDecimal_fn(s0.J, s0.H);
        if (s1.J === -1) {
            return $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingNumber_fn(s0.bu, s0.dW));
        }
        else {
            var newColumn = s0.dW + (s1.J - s0.J);
            return $stil4m$elm_syntax$ParserFast$Good_fn(rangeAndIntToRes({
                b_: { cJ: newColumn, bu: s0.bu },
                cf: { cJ: s0.dW, bu: s0.bu }
            }, s1.eg), { dW: newColumn, ac: s0.ac, J: s1.J, bu: s0.bu, H: s0.H });
        }
    };
};
var $stil4m$elm_syntax$ParserFast$map9WithRange = function (func) {
    return function (_v0) {
        return function (_v1) {
            return function (_v2) {
                return function (_v3) {
                    return function (_v4) {
                        return function (_v5) {
                            return function (_v6) {
                                return function (_v7) {
                                    return function (_v8) {
                                        var parseA = _v0;
                                        var parseB = _v1;
                                        var parseC = _v2;
                                        var parseD = _v3;
                                        var parseE = _v4;
                                        var parseF = _v5;
                                        var parseG = _v6;
                                        var parseH = _v7;
                                        var parseI = _v8;
                                        return function (s0) {
                                            var _v9 = parseA(s0);
                                            if (_v9.$ === 1) {
                                                var committed = _v9.a;
                                                var x = _v9.b;
                                                return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
                                            }
                                            else {
                                                var a = _v9.a;
                                                var s1 = _v9.b;
                                                var _v10 = parseB(s1);
                                                if (_v10.$ === 1) {
                                                    var x = _v10.b;
                                                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                                                }
                                                else {
                                                    var b = _v10.a;
                                                    var s2 = _v10.b;
                                                    var _v11 = parseC(s2);
                                                    if (_v11.$ === 1) {
                                                        var x = _v11.b;
                                                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                                                    }
                                                    else {
                                                        var c = _v11.a;
                                                        var s3 = _v11.b;
                                                        var _v12 = parseD(s3);
                                                        if (_v12.$ === 1) {
                                                            var x = _v12.b;
                                                            return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                                                        }
                                                        else {
                                                            var d = _v12.a;
                                                            var s4 = _v12.b;
                                                            var _v13 = parseE(s4);
                                                            if (_v13.$ === 1) {
                                                                var x = _v13.b;
                                                                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                                                            }
                                                            else {
                                                                var e = _v13.a;
                                                                var s5 = _v13.b;
                                                                var _v14 = parseF(s5);
                                                                if (_v14.$ === 1) {
                                                                    var x = _v14.b;
                                                                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                                                                }
                                                                else {
                                                                    var f = _v14.a;
                                                                    var s6 = _v14.b;
                                                                    var _v15 = parseG(s6);
                                                                    if (_v15.$ === 1) {
                                                                        var x = _v15.b;
                                                                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                                                                    }
                                                                    else {
                                                                        var g = _v15.a;
                                                                        var s7 = _v15.b;
                                                                        var _v16 = parseH(s7);
                                                                        if (_v16.$ === 1) {
                                                                            var x = _v16.b;
                                                                            return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                                                                        }
                                                                        else {
                                                                            var h = _v16.a;
                                                                            var s8 = _v16.b;
                                                                            var _v17 = parseI(s8);
                                                                            if (_v17.$ === 1) {
                                                                                var x = _v17.b;
                                                                                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                                                                            }
                                                                            else {
                                                                                var i = _v17.a;
                                                                                var s9 = _v17.b;
                                                                                return $stil4m$elm_syntax$ParserFast$Good_fn(func({
                                                                                    b_: { cJ: s9.dW, bu: s9.bu },
                                                                                    cf: { cJ: s0.dW, bu: s0.bu }
                                                                                })(a)(b)(c)(d)(e)(f)(g)(h)(i), s9);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$infixDeclaration = $stil4m$elm_syntax$ParserFast$map9WithRange(function (range) {
    return function (commentsAfterInfix) {
        return function (direction) {
            return function (commentsAfterDirection) {
                return function (precedence) {
                    return function (commentsAfterPrecedence) {
                        return function (operator) {
                            return function (commentsAfterOperator) {
                                return function (commentsAfterEqual) {
                                    return function (fn) {
                                        return {
                                            C: $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterEqual, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterOperator, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterPrecedence, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterDirection, commentsAfterInfix)))),
                                            cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Declaration$InfixDeclaration({ fh: direction, fn: fn, er: operator, fO: precedence }))
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
})($stil4m$elm_syntax$ParserFast$keywordFollowedBy_fn("infix", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout))($stil4m$elm_syntax$Elm$Parser$Declarations$infixDirection)($stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)($stil4m$elm_syntax$ParserFast$integerDecimalMapWithRange($stil4m$elm_syntax$Elm$Syntax$Node$Node))($stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)($stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("(", $stil4m$elm_syntax$ParserFast$whileWithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol_fn_unwrapped(function (operatorRange, operator) {
    return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({
        b_: { cJ: operatorRange.b_.cJ + 1, bu: operatorRange.b_.bu },
        cf: { cJ: operatorRange.cf.cJ - 1, bu: operatorRange.cf.bu }
    }, operator);
}, $stil4m$elm_syntax$Elm$Parser$Tokens$isOperatorSymbolChar, $stil4m$elm_syntax$Elm$Parser$Tokens$isAllowedOperatorToken, ")")))($stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)($stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("=", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout))($stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode);
var $stil4m$elm_syntax$ParserFast$oneOf5_fn = function (_v0, _v1, _v2, _v3, _v4) {
    var attemptFirst = _v0;
    var attemptSecond = _v1;
    var attemptThird = _v2;
    var attemptFourth = _v3;
    var attemptFifth = _v4;
    return function (s) {
        var _v5 = attemptFirst(s);
        if (!_v5.$) {
            var firstGood = _v5;
            return firstGood;
        }
        else {
            var firstBad = _v5;
            var firstCommitted = firstBad.a;
            var firstX = firstBad.b;
            if (firstCommitted) {
                return firstBad;
            }
            else {
                var _v6 = attemptSecond(s);
                if (!_v6.$) {
                    var secondGood = _v6;
                    return secondGood;
                }
                else {
                    var secondBad = _v6;
                    var secondCommitted = secondBad.a;
                    var secondX = secondBad.b;
                    if (secondCommitted) {
                        return secondBad;
                    }
                    else {
                        var _v7 = attemptThird(s);
                        if (!_v7.$) {
                            var thirdGood = _v7;
                            return thirdGood;
                        }
                        else {
                            var thirdBad = _v7;
                            var thirdCommitted = thirdBad.a;
                            var thirdX = thirdBad.b;
                            if (thirdCommitted) {
                                return thirdBad;
                            }
                            else {
                                var _v8 = attemptFourth(s);
                                if (!_v8.$) {
                                    var fourthGood = _v8;
                                    return fourthGood;
                                }
                                else {
                                    var fourthBad = _v8;
                                    var fourthCommitted = fourthBad.a;
                                    var fourthX = fourthBad.b;
                                    if (fourthCommitted) {
                                        return fourthBad;
                                    }
                                    else {
                                        var _v9 = attemptFifth(s);
                                        if (!_v9.$) {
                                            var fifthGood = _v9;
                                            return fifthGood;
                                        }
                                        else {
                                            var fifthBad = _v9;
                                            var fifthCommitted = fifthBad.a;
                                            var fifthX = fifthBad.b;
                                            return fifthCommitted ? fifthBad : $stil4m$elm_syntax$ParserFast$Bad_fn(false, $stil4m$elm_syntax$ParserFast$ExpectingOneOf_fn(firstX, secondX, _List_fromArray([thirdX, fourthX, fifthX])));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$oneOf5 = F5($stil4m$elm_syntax$ParserFast$oneOf5_fn);
var $stil4m$elm_syntax$Elm$Parser$Declarations$portDeclarationWithoutDocumentation = $stil4m$elm_syntax$ParserFast$map5_fn_unwrapped(function (commentsAfterPort, name, commentsAfterName, commentsAfterColon, typeAnnotationResult) {
    var nameRange = name.a;
    var _v0 = typeAnnotationResult.cC;
    var end = _v0.a.b_;
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(typeAnnotationResult.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterColon, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterName, commentsAfterPort))),
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({
            b_: end,
            cf: { cJ: 1, bu: nameRange.cf.bu }
        }, $stil4m$elm_syntax$Elm$Syntax$Declaration$PortDeclaration({ a: name, ci: typeAnnotationResult.cC }))
    };
}, $stil4m$elm_syntax$ParserFast$keywordFollowedBy_fn("port", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameNode, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(":", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation);
var $stil4m$elm_syntax$Elm$Parser$Declarations$TypeDeclarationWithoutDocumentation = function (a) {
    return { $: 0, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$customTypeDefinitionWithoutDocumentationAfterTypePrefix = $stil4m$elm_syntax$ParserFast$map6_fn_unwrapped(function (name, commentsAfterName, parameters, commentsAfterEqual, headVariant, tailVariantsReverse) {
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(tailVariantsReverse.C, $stil4m$elm_syntax$Rope$prependTo_fn(headVariant.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterEqual, $stil4m$elm_syntax$Rope$prependTo_fn(parameters.C, commentsAfterName)))),
        cC: $stil4m$elm_syntax$Elm$Parser$Declarations$TypeDeclarationWithoutDocumentation({ ct: headVariant.cC, a: name, o: parameters.cC, cD: tailVariantsReverse.cC })
    };
}, $stil4m$elm_syntax$Elm$Parser$Tokens$typeNameNode, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Declarations$typeGenericListEquals, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Declarations$valueConstructorOptimisticLayout, $stil4m$elm_syntax$ParserWithComments$manyWithoutReverse($stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("|", $stil4m$elm_syntax$Elm$Parser$Layout$positivelyIndentedPlusFollowedBy_fn(1, $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (commentsBeforePipe, variantResult) {
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(variantResult.C, commentsBeforePipe),
        cC: variantResult.cC
    };
}, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Declarations$valueConstructorOptimisticLayout)))));
var $stil4m$elm_syntax$ParserFast$map2WithStartLocation_fn = function (func, _v0, _v1) {
    var parseA = _v0;
    var parseB = _v1;
    return function (s0) {
        var _v2 = parseA(s0);
        if (_v2.$ === 1) {
            var committed = _v2.a;
            var x = _v2.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v2.a;
            var s1 = _v2.b;
            var _v3 = parseB(s1);
            if (_v3.$ === 1) {
                var x = _v3.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v3.a;
                var s2 = _v3.b;
                return $stil4m$elm_syntax$ParserFast$Good_fn(A3(func, { cJ: s0.dW, bu: s0.bu }, a, b), s2);
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map2WithStartLocation_fn_unwrapped = function (func, _v0, _v1) {
    var parseA = _v0;
    var parseB = _v1;
    return function (s0) {
        var _v2 = parseA(s0);
        if (_v2.$ === 1) {
            var committed = _v2.a;
            var x = _v2.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v2.a;
            var s1 = _v2.b;
            var _v3 = parseB(s1);
            if (_v3.$ === 1) {
                var x = _v3.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v3.a;
                var s2 = _v3.b;
                return $stil4m$elm_syntax$ParserFast$Good_fn(func({ cJ: s0.dW, bu: s0.bu }, a, b), s2);
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map2WithStartLocation = F3($stil4m$elm_syntax$ParserFast$map2WithStartLocation_fn);
var $stil4m$elm_syntax$Elm$Parser$Declarations$TypeAliasDeclarationWithoutDocumentation = function (a) {
    return { $: 1, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$Declarations$typeAliasDefinitionWithoutDocumentationAfterTypePrefix = $stil4m$elm_syntax$ParserFast$map6_fn_unwrapped(function (commentsAfterAlias, name, commentsAfterName, parameters, commentsAfterEqual, typeAnnotationResult) {
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(typeAnnotationResult.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterEqual, $stil4m$elm_syntax$Rope$prependTo_fn(parameters.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterName, commentsAfterAlias)))),
        cC: $stil4m$elm_syntax$Elm$Parser$Declarations$TypeAliasDeclarationWithoutDocumentation({ a: name, o: parameters.cC, ci: typeAnnotationResult.cC })
    };
}, $stil4m$elm_syntax$ParserFast$keywordFollowedBy_fn("alias", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$Elm$Parser$Tokens$typeNameNode, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Declarations$typeGenericListEquals, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$TypeAnnotation$typeAnnotation);
var $stil4m$elm_syntax$Elm$Parser$Declarations$typeOrTypeAliasDefinitionWithoutDocumentation = $stil4m$elm_syntax$ParserFast$map2WithStartLocation_fn_unwrapped(function (start, commentsAfterType, afterStart) {
    var allComments = $stil4m$elm_syntax$Rope$prependTo_fn(afterStart.C, commentsAfterType);
    var _v0 = afterStart.cC;
    if (!_v0.$) {
        var typeDeclarationAfterDocumentation = _v0.a;
        var end = function () {
            var _v1 = typeDeclarationAfterDocumentation.cD;
            if (_v1.b) {
                var _v2 = _v1.a;
                var range = _v2.a;
                return range.b_;
            }
            else {
                var _v3 = typeDeclarationAfterDocumentation.ct;
                var headVariantRange = _v3.a;
                return headVariantRange.b_;
            }
        }();
        return {
            C: allComments,
            cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: end, cf: start }, $stil4m$elm_syntax$Elm$Syntax$Declaration$CustomTypeDeclaration({
                fa: _List_Cons(typeDeclarationAfterDocumentation.ct, $elm$core$List$reverse(typeDeclarationAfterDocumentation.cD)),
                cM: $elm$core$Maybe$Nothing,
                d9: typeDeclarationAfterDocumentation.o,
                a: typeDeclarationAfterDocumentation.a
            }))
        };
    }
    else {
        var typeAliasDeclarationAfterDocumentation = _v0.a;
        var _v4 = typeAliasDeclarationAfterDocumentation.ci;
        var typeAnnotationRange = _v4.a;
        return {
            C: allComments,
            cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: typeAnnotationRange.b_, cf: start }, $stil4m$elm_syntax$Elm$Syntax$Declaration$AliasDeclaration({ cM: $elm$core$Maybe$Nothing, d9: typeAliasDeclarationAfterDocumentation.o, a: typeAliasDeclarationAfterDocumentation.a, ci: typeAliasDeclarationAfterDocumentation.ci }))
        };
    }
}, $stil4m$elm_syntax$ParserFast$keywordFollowedBy_fn("type", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$Elm$Parser$Declarations$typeAliasDefinitionWithoutDocumentationAfterTypePrefix, $stil4m$elm_syntax$Elm$Parser$Declarations$customTypeDefinitionWithoutDocumentationAfterTypePrefix));
var $stil4m$elm_syntax$Elm$Parser$Declarations$declaration = $stil4m$elm_syntax$ParserFast$oneOf5_fn($stil4m$elm_syntax$Elm$Parser$Declarations$functionDeclarationWithoutDocumentation, $stil4m$elm_syntax$Elm$Parser$Declarations$declarationWithDocumentation, $stil4m$elm_syntax$Elm$Parser$Declarations$typeOrTypeAliasDefinitionWithoutDocumentation, $stil4m$elm_syntax$Elm$Parser$Declarations$portDeclarationWithoutDocumentation, $stil4m$elm_syntax$Elm$Parser$Declarations$infixDeclaration);
var $stil4m$elm_syntax$ParserFast$columnAndThen = function (callback) {
    return function (s) {
        var _v0 = callback(s.dW);
        var parse = _v0;
        return parse(s);
    };
};
var $stil4m$elm_syntax$Elm$Parser$Layout$problemModuleLevelIndentation = $stil4m$elm_syntax$ParserFast$problem("must be on module-level indentation");
var $stil4m$elm_syntax$Elm$Parser$Layout$moduleLevelIndentationFollowedBy = function (nextParser) {
    return $stil4m$elm_syntax$ParserFast$columnAndThen(function (column) {
        return (column === 1) ? nextParser : $stil4m$elm_syntax$Elm$Parser$Layout$problemModuleLevelIndentation;
    });
};
var $stil4m$elm_syntax$Elm$Parser$File$fileDeclarations = $stil4m$elm_syntax$ParserWithComments$many($stil4m$elm_syntax$Elm$Parser$Layout$moduleLevelIndentationFollowedBy($stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (declarationParsed, commentsAfter) {
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfter, declarationParsed.C),
        cC: declarationParsed.cC
    };
}, $stil4m$elm_syntax$Elm$Parser$Declarations$declaration, $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout)));
var $stil4m$elm_syntax$Elm$Syntax$Exposing$All = function (a) {
    return { $: 0, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit = function (a) {
    return { $: 1, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Exposing$FunctionExpose = function (a) {
    return { $: 1, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$Expose$functionExpose = $stil4m$elm_syntax$Elm$Parser$Tokens$functionNameMapWithRange(F2(function (range, name) {
    return {
        C: $stil4m$elm_syntax$Rope$empty,
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Exposing$FunctionExpose(name))
    };
}));
var $stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose = function (a) {
    return { $: 0, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$Tokens$parensEnd = $stil4m$elm_syntax$ParserFast$symbol_fn(")", 0);
var $stil4m$elm_syntax$Elm$Parser$Expose$infixExpose = $stil4m$elm_syntax$ParserFast$map2WithRange_fn_unwrapped(function (range, infixName, _v0) {
    return {
        C: $stil4m$elm_syntax$Rope$empty,
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose(infixName))
    };
}, $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("(", $stil4m$elm_syntax$ParserFast$ifFollowedByWhileWithoutLinebreak_fn(function (c) {
    switch (c) {
        case ")":
            return false;
        case "\n":
            return false;
        case " ":
            return false;
        default:
            return true;
    }
}, function (c) {
    switch (c) {
        case ")":
            return false;
        case "\n":
            return false;
        case " ":
            return false;
        default:
            return true;
    }
})), $stil4m$elm_syntax$Elm$Parser$Tokens$parensEnd);
var $stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose = function (a) {
    return { $: 3, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose = function (a) {
    return { $: 2, a: a };
};
var $stil4m$elm_syntax$ParserFast$map2WithRangeOrSucceed_fn = function (func, _v0, _v1, fallback) {
    var parseA = _v0;
    var parseB = _v1;
    return function (s0) {
        var _v2 = parseA(s0);
        if (_v2.$ === 1) {
            var c1 = _v2.a;
            var x = _v2.b;
            return c1 ? $stil4m$elm_syntax$ParserFast$Bad_fn(true, x) : $stil4m$elm_syntax$ParserFast$Good_fn(fallback, s0);
        }
        else {
            var a = _v2.a;
            var s1 = _v2.b;
            var _v3 = parseB(s1);
            if (_v3.$ === 1) {
                var x = _v3.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v3.a;
                var s2 = _v3.b;
                return $stil4m$elm_syntax$ParserFast$Good_fn(A3(func, {
                    b_: { cJ: s2.dW, bu: s2.bu },
                    cf: { cJ: s0.dW, bu: s0.bu }
                }, a, b), s2);
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map2WithRangeOrSucceed_fn_unwrapped = function (func, _v0, _v1, fallback) {
    var parseA = _v0;
    var parseB = _v1;
    return function (s0) {
        var _v2 = parseA(s0);
        if (_v2.$ === 1) {
            var c1 = _v2.a;
            var x = _v2.b;
            return c1 ? $stil4m$elm_syntax$ParserFast$Bad_fn(true, x) : $stil4m$elm_syntax$ParserFast$Good_fn(fallback, s0);
        }
        else {
            var a = _v2.a;
            var s1 = _v2.b;
            var _v3 = parseB(s1);
            if (_v3.$ === 1) {
                var x = _v3.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v3.a;
                var s2 = _v3.b;
                return $stil4m$elm_syntax$ParserFast$Good_fn(func({
                    b_: { cJ: s2.dW, bu: s2.bu },
                    cf: { cJ: s0.dW, bu: s0.bu }
                }, a, b), s2);
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map2WithRangeOrSucceed = F4($stil4m$elm_syntax$ParserFast$map2WithRangeOrSucceed_fn);
var $stil4m$elm_syntax$Elm$Parser$Expose$typeExpose = $stil4m$elm_syntax$ParserFast$map3_fn_unwrapped(function (_v0, commentsBeforeMaybeOpen, maybeOpen) {
    var typeNameRange = _v0.a;
    var typeName = _v0.b;
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(maybeOpen.C, commentsBeforeMaybeOpen),
        cC: function () {
            var _v1 = maybeOpen.cC;
            if (_v1.$ === 1) {
                return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(typeNameRange, $stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose(typeName));
            }
            else {
                var openRange = _v1.a;
                return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: openRange.b_, cf: typeNameRange.cf }, $stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose({ a: typeName, fN: maybeOpen.cC }));
            }
        }()
    };
}, $stil4m$elm_syntax$Elm$Parser$Tokens$typeNameNode, $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout, $stil4m$elm_syntax$ParserFast$map2WithRangeOrSucceed_fn_unwrapped(function (range, left, right) {
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(right, left),
        cC: $elm$core$Maybe$Just(range)
    };
}, $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("(", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$ParserFast$followedBySymbol_fn(")", $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("..", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)), { C: $stil4m$elm_syntax$Rope$empty, cC: $elm$core$Maybe$Nothing }));
var $stil4m$elm_syntax$Elm$Parser$Expose$exposable = $stil4m$elm_syntax$ParserFast$oneOf3_fn($stil4m$elm_syntax$Elm$Parser$Expose$functionExpose, $stil4m$elm_syntax$Elm$Parser$Expose$typeExpose, $stil4m$elm_syntax$Elm$Parser$Expose$infixExpose);
var $stil4m$elm_syntax$Elm$Parser$Expose$exposingListInner = $stil4m$elm_syntax$ParserFast$oneOf2_fn($stil4m$elm_syntax$ParserFast$map3_fn_unwrapped(function (headElement, commentsAfterHeadElement, tailElements) {
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(tailElements.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterHeadElement, headElement.C)),
        cC: $stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit(_List_Cons(headElement.cC, tailElements.cC))
    };
}, $stil4m$elm_syntax$Elm$Parser$Expose$exposable, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserWithComments$many($stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(",", $stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides($stil4m$elm_syntax$Elm$Parser$Expose$exposable)))), $stil4m$elm_syntax$ParserFast$mapWithRange_fn_unwrapped(function (range, commentsAfterDotDot) {
    return {
        C: commentsAfterDotDot,
        cC: $stil4m$elm_syntax$Elm$Syntax$Exposing$All(range)
    };
}, $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("..", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout)));
var $stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition = $stil4m$elm_syntax$ParserFast$map3WithRange_fn_unwrapped(function (range, commentsAfterExposing, commentsBefore, exposingListInnerResult) {
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(exposingListInnerResult.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsBefore, commentsAfterExposing)),
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, exposingListInnerResult.cC)
    };
}, $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("exposing", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("(", $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout), $stil4m$elm_syntax$ParserFast$followedBySymbol_fn(")", $stil4m$elm_syntax$Elm$Parser$Expose$exposingListInner));
var $stil4m$elm_syntax$ParserFast$map3OrSucceed_fn = function (func, _v0, _v1, _v2, fallback) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    return function (s0) {
        var _v3 = parseA(s0);
        if (_v3.$ === 1) {
            var c1 = _v3.a;
            var x = _v3.b;
            return c1 ? $stil4m$elm_syntax$ParserFast$Bad_fn(true, x) : $stil4m$elm_syntax$ParserFast$Good_fn(fallback, s0);
        }
        else {
            var a = _v3.a;
            var s1 = _v3.b;
            var _v4 = parseB(s1);
            if (_v4.$ === 1) {
                var x = _v4.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v4.a;
                var s2 = _v4.b;
                var _v5 = parseC(s2);
                if (_v5.$ === 1) {
                    var x = _v5.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v5.a;
                    var s3 = _v5.b;
                    return $stil4m$elm_syntax$ParserFast$Good_fn(A3(func, a, b, c), s3);
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map3OrSucceed_fn_unwrapped = function (func, _v0, _v1, _v2, fallback) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    return function (s0) {
        var _v3 = parseA(s0);
        if (_v3.$ === 1) {
            var c1 = _v3.a;
            var x = _v3.b;
            return c1 ? $stil4m$elm_syntax$ParserFast$Bad_fn(true, x) : $stil4m$elm_syntax$ParserFast$Good_fn(fallback, s0);
        }
        else {
            var a = _v3.a;
            var s1 = _v3.b;
            var _v4 = parseB(s1);
            if (_v4.$ === 1) {
                var x = _v4.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v4.a;
                var s2 = _v4.b;
                var _v5 = parseC(s2);
                if (_v5.$ === 1) {
                    var x = _v5.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v5.a;
                    var s3 = _v5.b;
                    return $stil4m$elm_syntax$ParserFast$Good_fn(func(a, b, c), s3);
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map3OrSucceed = F5($stil4m$elm_syntax$ParserFast$map3OrSucceed_fn);
function $stil4m$elm_syntax$Elm$Parser$Base$cyclic$moduleNameOrEmpty() {
    return $stil4m$elm_syntax$ParserFast$map2OrSucceed_fn_unwrapped(function (head, tail) {
        return _List_Cons(head, tail);
    }, $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(".", $stil4m$elm_syntax$Elm$Parser$Tokens$typeName), $stil4m$elm_syntax$ParserFast$lazy(function (_v0) {
        return $stil4m$elm_syntax$Elm$Parser$Base$cyclic$moduleNameOrEmpty();
    }), _List_Nil);
}
var $stil4m$elm_syntax$Elm$Parser$Base$moduleNameOrEmpty = $stil4m$elm_syntax$Elm$Parser$Base$cyclic$moduleNameOrEmpty();
$stil4m$elm_syntax$Elm$Parser$Base$cyclic$moduleNameOrEmpty = function () {
    return $stil4m$elm_syntax$Elm$Parser$Base$moduleNameOrEmpty;
};
var $stil4m$elm_syntax$Elm$Parser$Base$moduleName = $stil4m$elm_syntax$ParserFast$map2WithRange_fn_unwrapped(function (range, head, tail) {
    return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, _List_Cons(head, tail));
}, $stil4m$elm_syntax$Elm$Parser$Tokens$typeName, $stil4m$elm_syntax$Elm$Parser$Base$moduleNameOrEmpty);
var $stil4m$elm_syntax$Elm$Parser$Tokens$typeNameMapWithRange = function (rangeAndNameToRes) {
    return $stil4m$elm_syntax$ParserFast$ifFollowedByWhileMapWithRangeWithoutLinebreak_fn(rangeAndNameToRes, $stil4m$elm_syntax$Char$Extra$unicodeIsUpperFast, $stil4m$elm_syntax$Char$Extra$unicodeIsAlphaNumOrUnderscoreFast);
};
var $stil4m$elm_syntax$Elm$Parser$Imports$importDefinition = $stil4m$elm_syntax$ParserFast$map5WithStartLocation_fn_unwrapped(function (start, commentsAfterImport, mod, commentsAfterModuleName, maybeModuleAlias, maybeExposingList) {
    var commentsBeforeAlias = $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterModuleName, commentsAfterImport);
    if (maybeModuleAlias.$ === 1) {
        if (maybeExposingList.$ === 1) {
            var _v2 = mod;
            var modRange = _v2.a;
            return {
                C: commentsBeforeAlias,
                cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: modRange.b_, cf: start }, { d3: $elm$core$Maybe$Nothing, fH: $elm$core$Maybe$Nothing, bN: mod })
            };
        }
        else {
            var exposingListValue = maybeExposingList.a;
            var _v3 = exposingListValue.cC;
            var exposingRange = _v3.a;
            return {
                C: $stil4m$elm_syntax$Rope$prependTo_fn(exposingListValue.C, commentsBeforeAlias),
                cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: exposingRange.b_, cf: start }, {
                    d3: $elm$core$Maybe$Just(exposingListValue.cC),
                    fH: $elm$core$Maybe$Nothing,
                    bN: mod
                })
            };
        }
    }
    else {
        var moduleAliasResult = maybeModuleAlias.a;
        if (maybeExposingList.$ === 1) {
            var _v5 = moduleAliasResult.cC;
            var aliasRange = _v5.a;
            return {
                C: $stil4m$elm_syntax$Rope$prependTo_fn(moduleAliasResult.C, commentsBeforeAlias),
                cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: aliasRange.b_, cf: start }, {
                    d3: $elm$core$Maybe$Nothing,
                    fH: $elm$core$Maybe$Just(moduleAliasResult.cC),
                    bN: mod
                })
            };
        }
        else {
            var exposingListValue = maybeExposingList.a;
            var _v6 = exposingListValue.cC;
            var exposingRange = _v6.a;
            return {
                C: $stil4m$elm_syntax$Rope$prependTo_fn(exposingListValue.C, $stil4m$elm_syntax$Rope$prependTo_fn(moduleAliasResult.C, commentsBeforeAlias)),
                cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn({ b_: exposingRange.b_, cf: start }, {
                    d3: $elm$core$Maybe$Just(exposingListValue.cC),
                    fH: $elm$core$Maybe$Just(moduleAliasResult.cC),
                    bN: mod
                })
            };
        }
    }
}, $stil4m$elm_syntax$ParserFast$keywordFollowedBy_fn("import", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$Elm$Parser$Base$moduleName, $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout, $stil4m$elm_syntax$ParserFast$map3OrSucceed_fn_unwrapped(function (commentsBefore, moduleAliasNode, commentsAfter) {
    return $elm$core$Maybe$Just({
        C: $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfter, commentsBefore),
        cC: moduleAliasNode
    });
}, $stil4m$elm_syntax$ParserFast$keywordFollowedBy_fn("as", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$Elm$Parser$Tokens$typeNameMapWithRange(F2(function (range, moduleAlias) {
    return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, _List_fromArray([moduleAlias]));
})), $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout, $elm$core$Maybe$Nothing), $stil4m$elm_syntax$ParserFast$map2OrSucceed_fn_unwrapped(function (exposingResult, commentsAfter) {
    return $elm$core$Maybe$Just({
        C: $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfter, exposingResult.C),
        cC: exposingResult.cC
    });
}, $stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition, $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout, $elm$core$Maybe$Nothing));
var $stil4m$elm_syntax$Elm$Parser$Layout$endsTopIndented = function (parser) {
    return $stil4m$elm_syntax$ParserFast$validateEndColumnIndentation_fn_unwrapped(function (column, indent) {
        return !(column - indent);
    }, "must be on top indentation", parser);
};
var $stil4m$elm_syntax$Elm$Parser$Layout$layoutStrict = $stil4m$elm_syntax$Elm$Parser$Layout$endsTopIndented($stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout);
var $stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedByComments = function (nextParser) {
    return $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (commentsBefore, afterComments) {
        return $stil4m$elm_syntax$Rope$prependTo_fn(afterComments, commentsBefore);
    }, $stil4m$elm_syntax$Elm$Parser$Layout$optimisticLayout, $stil4m$elm_syntax$Elm$Parser$Layout$onTopIndentationFollowedBy(nextParser));
};
var $stil4m$elm_syntax$Elm$Syntax$Module$EffectModule = function (a) {
    return { $: 2, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$Modules$effectWhereClause = $stil4m$elm_syntax$ParserFast$map4_fn_unwrapped(function (fnName, commentsAfterFnName, commentsAfterEqual, typeName_) {
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterEqual, commentsAfterFnName),
        cC: _Utils_Tuple2(fnName, typeName_)
    };
}, $stil4m$elm_syntax$Elm$Parser$Tokens$functionName, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("=", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$Elm$Parser$Tokens$typeNameNode);
var $stil4m$elm_syntax$List$Extra$find_fn = function (predicate, list) {
    find: while (true) {
        if (!list.b) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var x = list.a;
            var xs = list.b;
            if (predicate(x)) {
                return $elm$core$Maybe$Just(x);
            }
            else {
                var $temp$predicate = predicate, $temp$list = xs;
                predicate = $temp$predicate;
                list = $temp$list;
                continue find;
            }
        }
    }
}, $stil4m$elm_syntax$List$Extra$find = F2($stil4m$elm_syntax$List$Extra$find_fn);
var $elm$core$Tuple$second = function (_v0) {
    var y = _v0.b;
    return y;
};
var $stil4m$elm_syntax$Elm$Parser$Modules$whereBlock = $stil4m$elm_syntax$ParserFast$followedBySymbol_fn("}", $stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn("{", $stil4m$elm_syntax$ParserFast$map4_fn_unwrapped(function (commentsBeforeHead, head, commentsAfterHead, tail) {
    var pairs = _List_Cons(head.cC, tail.cC);
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(tail.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterHead, $stil4m$elm_syntax$Rope$prependTo_fn(head.C, commentsBeforeHead))),
        cC: {
            bb: $elm$core$Maybe$map_fn($elm$core$Tuple$second, $stil4m$elm_syntax$List$Extra$find_fn(function (_v0) {
                var fnName = _v0.a;
                return fnName === "command";
            }, pairs)),
            dF: $elm$core$Maybe$map_fn($elm$core$Tuple$second, $stil4m$elm_syntax$List$Extra$find_fn(function (_v1) {
                var fnName = _v1.a;
                return fnName === "subscription";
            }, pairs))
        }
    };
}, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Modules$effectWhereClause, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$ParserWithComments$many($stil4m$elm_syntax$ParserFast$symbolFollowedBy_fn(",", $stil4m$elm_syntax$Elm$Parser$Layout$maybeAroundBothSides($stil4m$elm_syntax$Elm$Parser$Modules$effectWhereClause))))));
var $stil4m$elm_syntax$Elm$Parser$Modules$effectWhereClauses = $stil4m$elm_syntax$ParserFast$map2_fn_unwrapped(function (commentsBefore, whereResult) {
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(whereResult.C, commentsBefore),
        cC: whereResult.cC
    };
}, $stil4m$elm_syntax$ParserFast$keywordFollowedBy_fn("where", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$Elm$Parser$Modules$whereBlock);
var $stil4m$elm_syntax$ParserFast$map7WithRange_fn = function (func, _v0, _v1, _v2, _v3, _v4, _v5, _v6) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    var parseD = _v3;
    var parseE = _v4;
    var parseF = _v5;
    var parseG = _v6;
    return function (s0) {
        var _v7 = parseA(s0);
        if (_v7.$ === 1) {
            var committed = _v7.a;
            var x = _v7.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v7.a;
            var s1 = _v7.b;
            var _v8 = parseB(s1);
            if (_v8.$ === 1) {
                var x = _v8.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v8.a;
                var s2 = _v8.b;
                var _v9 = parseC(s2);
                if (_v9.$ === 1) {
                    var x = _v9.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v9.a;
                    var s3 = _v9.b;
                    var _v10 = parseD(s3);
                    if (_v10.$ === 1) {
                        var x = _v10.b;
                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var d = _v10.a;
                        var s4 = _v10.b;
                        var _v11 = parseE(s4);
                        if (_v11.$ === 1) {
                            var x = _v11.b;
                            return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var e = _v11.a;
                            var s5 = _v11.b;
                            var _v12 = parseF(s5);
                            if (_v12.$ === 1) {
                                var x = _v12.b;
                                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var f = _v12.a;
                                var s6 = _v12.b;
                                var _v13 = parseG(s6);
                                if (_v13.$ === 1) {
                                    var x = _v13.b;
                                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                                }
                                else {
                                    var g = _v13.a;
                                    var s7 = _v13.b;
                                    return $stil4m$elm_syntax$ParserFast$Good_fn(A8(func, {
                                        b_: { cJ: s7.dW, bu: s7.bu },
                                        cf: { cJ: s0.dW, bu: s0.bu }
                                    }, a, b, c, d, e, f, g), s7);
                                }
                            }
                        }
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map7WithRange_fn_unwrapped = function (func, _v0, _v1, _v2, _v3, _v4, _v5, _v6) {
    var parseA = _v0;
    var parseB = _v1;
    var parseC = _v2;
    var parseD = _v3;
    var parseE = _v4;
    var parseF = _v5;
    var parseG = _v6;
    return function (s0) {
        var _v7 = parseA(s0);
        if (_v7.$ === 1) {
            var committed = _v7.a;
            var x = _v7.b;
            return $stil4m$elm_syntax$ParserFast$Bad_fn(committed, x);
        }
        else {
            var a = _v7.a;
            var s1 = _v7.b;
            var _v8 = parseB(s1);
            if (_v8.$ === 1) {
                var x = _v8.b;
                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
            }
            else {
                var b = _v8.a;
                var s2 = _v8.b;
                var _v9 = parseC(s2);
                if (_v9.$ === 1) {
                    var x = _v9.b;
                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                }
                else {
                    var c = _v9.a;
                    var s3 = _v9.b;
                    var _v10 = parseD(s3);
                    if (_v10.$ === 1) {
                        var x = _v10.b;
                        return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                    }
                    else {
                        var d = _v10.a;
                        var s4 = _v10.b;
                        var _v11 = parseE(s4);
                        if (_v11.$ === 1) {
                            var x = _v11.b;
                            return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                        }
                        else {
                            var e = _v11.a;
                            var s5 = _v11.b;
                            var _v12 = parseF(s5);
                            if (_v12.$ === 1) {
                                var x = _v12.b;
                                return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                            }
                            else {
                                var f = _v12.a;
                                var s6 = _v12.b;
                                var _v13 = parseG(s6);
                                if (_v13.$ === 1) {
                                    var x = _v13.b;
                                    return $stil4m$elm_syntax$ParserFast$Bad_fn(true, x);
                                }
                                else {
                                    var g = _v13.a;
                                    var s7 = _v13.b;
                                    return $stil4m$elm_syntax$ParserFast$Good_fn(func({
                                        b_: { cJ: s7.dW, bu: s7.bu },
                                        cf: { cJ: s0.dW, bu: s0.bu }
                                    }, a, b, c, d, e, f, g), s7);
                                }
                            }
                        }
                    }
                }
            }
        }
    };
}, $stil4m$elm_syntax$ParserFast$map7WithRange = F8($stil4m$elm_syntax$ParserFast$map7WithRange_fn);
var $stil4m$elm_syntax$Elm$Parser$Modules$effectModuleDefinition = $stil4m$elm_syntax$ParserFast$map7WithRange_fn_unwrapped(function (range, commentsAfterEffect, commentsAfterModule, name, commentsAfterName, whereClauses, commentsAfterWhereClauses, exp) {
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(exp.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterWhereClauses, $stil4m$elm_syntax$Rope$prependTo_fn(whereClauses.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterName, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterModule, commentsAfterEffect))))),
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Module$EffectModule({ bb: whereClauses.cC.bb, d3: exp.cC, bN: name, dF: whereClauses.cC.dF }))
    };
}, $stil4m$elm_syntax$ParserFast$keywordFollowedBy_fn("effect", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$ParserFast$keywordFollowedBy_fn("module", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$Elm$Parser$Base$moduleName, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Modules$effectWhereClauses, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition);
var $stil4m$elm_syntax$Elm$Syntax$Module$NormalModule = function (a) {
    return { $: 0, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$Modules$normalModuleDefinition = $stil4m$elm_syntax$ParserFast$map4WithRange_fn_unwrapped(function (range, commentsAfterModule, moduleName, commentsAfterModuleName, exposingList) {
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(exposingList.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterModuleName, commentsAfterModule)),
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Module$NormalModule({ d3: exposingList.cC, bN: moduleName }))
    };
}, $stil4m$elm_syntax$ParserFast$keywordFollowedBy_fn("module", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$Elm$Parser$Base$moduleName, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition);
var $stil4m$elm_syntax$Elm$Syntax$Module$PortModule = function (a) {
    return { $: 1, a: a };
};
var $stil4m$elm_syntax$Elm$Parser$Modules$portModuleDefinition = $stil4m$elm_syntax$ParserFast$map5WithRange_fn_unwrapped(function (range, commentsAfterPort, commentsAfterModule, moduleName, commentsAfterModuleName, exposingList) {
    return {
        C: $stil4m$elm_syntax$Rope$prependTo_fn(exposingList.C, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterModuleName, $stil4m$elm_syntax$Rope$prependTo_fn(commentsAfterModule, commentsAfterPort))),
        cC: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $stil4m$elm_syntax$Elm$Syntax$Module$PortModule({ d3: exposingList.cC, bN: moduleName }))
    };
}, $stil4m$elm_syntax$ParserFast$keywordFollowedBy_fn("port", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$ParserFast$keywordFollowedBy_fn("module", $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout), $stil4m$elm_syntax$Elm$Parser$Base$moduleName, $stil4m$elm_syntax$Elm$Parser$Layout$maybeLayout, $stil4m$elm_syntax$Elm$Parser$Expose$exposeDefinition);
var $stil4m$elm_syntax$Elm$Parser$Modules$moduleDefinition = $stil4m$elm_syntax$ParserFast$oneOf3_fn($stil4m$elm_syntax$Elm$Parser$Modules$normalModuleDefinition, $stil4m$elm_syntax$Elm$Parser$Modules$portModuleDefinition, $stil4m$elm_syntax$Elm$Parser$Modules$effectModuleDefinition);
var $stil4m$elm_syntax$Elm$Parser$Comments$moduleDocumentation = $stil4m$elm_syntax$Elm$Parser$Comments$declarationDocumentation;
var $stil4m$elm_syntax$Rope$ropeLikelyFilledToListInto_fn = function (initialAcc, ropeLikelyFilled) {
    ropeLikelyFilledToListInto: while (true) {
        if (!ropeLikelyFilled.$) {
            var onlyElement = ropeLikelyFilled.a;
            return _List_Cons(onlyElement, initialAcc);
        }
        else {
            var left = ropeLikelyFilled.a;
            var right = ropeLikelyFilled.b;
            var $temp$initialAcc = $stil4m$elm_syntax$Rope$ropeLikelyFilledToListInto_fn(initialAcc, right), $temp$ropeLikelyFilled = left;
            initialAcc = $temp$initialAcc;
            ropeLikelyFilled = $temp$ropeLikelyFilled;
            continue ropeLikelyFilledToListInto;
        }
    }
}, $stil4m$elm_syntax$Rope$ropeLikelyFilledToListInto = F2($stil4m$elm_syntax$Rope$ropeLikelyFilledToListInto_fn);
var $stil4m$elm_syntax$Rope$toList = function (rope) {
    if (rope.$ === 1) {
        return _List_Nil;
    }
    else {
        var ropeLikelyFilled = rope.a;
        return $stil4m$elm_syntax$Rope$ropeLikelyFilledToListInto_fn(_List_Nil, ropeLikelyFilled);
    }
};
var $stil4m$elm_syntax$Elm$Parser$File$file = $stil4m$elm_syntax$ParserFast$map4_fn_unwrapped(function (moduleDefinition, moduleComments, imports, declarations) {
    return {
        C: $stil4m$elm_syntax$Rope$toList($stil4m$elm_syntax$Rope$prependTo_fn(declarations.C, $stil4m$elm_syntax$Rope$prependTo_fn(imports.C, $stil4m$elm_syntax$Rope$prependTo_fn(moduleComments, moduleDefinition.C)))),
        M: declarations.cC,
        dz: imports.cC,
        cy: moduleDefinition.cC
    };
}, $stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedByWithComments($stil4m$elm_syntax$Elm$Parser$Modules$moduleDefinition), $stil4m$elm_syntax$Elm$Parser$Layout$layoutStrictFollowedByComments($stil4m$elm_syntax$ParserFast$map2OrSucceed_fn_unwrapped(function (moduleDocumentation, commentsAfter) {
    return $stil4m$elm_syntax$Rope$filledPrependTo_fn(commentsAfter, $stil4m$elm_syntax$Rope$one(moduleDocumentation));
}, $stil4m$elm_syntax$Elm$Parser$Comments$moduleDocumentation, $stil4m$elm_syntax$Elm$Parser$Layout$layoutStrict, $stil4m$elm_syntax$Rope$empty)), $stil4m$elm_syntax$ParserWithComments$many($stil4m$elm_syntax$Elm$Parser$Imports$importDefinition), $stil4m$elm_syntax$Elm$Parser$File$fileDeclarations);
var $elm$parser$Parser$ExpectingEnd = { $: 10 };
var $elm$parser$Parser$ExpectingKeyword = function (a) {
    return { $: 9, a: a };
};
var $elm$parser$Parser$ExpectingNumber = { $: 6 };
var $elm$parser$Parser$ExpectingSymbol = function (a) {
    return { $: 8, a: a };
};
var $elm$parser$Parser$Problem = function (a) {
    return { $: 12, a: a };
};
var $elm$parser$Parser$UnexpectedChar = { $: 11 };
var $stil4m$elm_syntax$ParserFast$ropeFilledToList_fn = function (problemToConvert, soFar) {
    switch (problemToConvert.$) {
        case 7:
            var firstTry = problemToConvert.a;
            var secondTry = problemToConvert.b;
            var thirdTryUp = problemToConvert.c;
            return $stil4m$elm_syntax$ParserFast$ropeFilledToList_fn(firstTry, $stil4m$elm_syntax$ParserFast$ropeFilledToList_fn(secondTry, $elm$core$List$foldr_fn($stil4m$elm_syntax$ParserFast$ropeFilledToList, soFar, thirdTryUp)));
        case 0:
            var row = problemToConvert.a;
            var col = problemToConvert.b;
            return _List_Cons({ dW: col, ey: $elm$parser$Parser$ExpectingNumber, bu: row }, soFar);
        case 1:
            var row = problemToConvert.a;
            var col = problemToConvert.b;
            var symbolString = problemToConvert.c;
            return _List_Cons({
                dW: col,
                ey: $elm$parser$Parser$ExpectingSymbol(symbolString),
                bu: row
            }, soFar);
        case 2:
            var row = problemToConvert.a;
            var col = problemToConvert.b;
            return _List_Cons({
                dW: col,
                ey: $elm$parser$Parser$Problem("expecting any char"),
                bu: row
            }, soFar);
        case 3:
            var row = problemToConvert.a;
            var col = problemToConvert.b;
            var keywordString = problemToConvert.c;
            return _List_Cons({
                dW: col,
                ey: $elm$parser$Parser$ExpectingKeyword(keywordString),
                bu: row
            }, soFar);
        case 4:
            var row = problemToConvert.a;
            var col = problemToConvert.b;
            return _List_Cons({ dW: col, ey: $elm$parser$Parser$UnexpectedChar, bu: row }, soFar);
        case 5:
            var row = problemToConvert.a;
            var col = problemToConvert.b;
            return _List_Cons({
                dW: col,
                ey: $elm$parser$Parser$Problem("expected string to pass validation"),
                bu: row
            }, soFar);
        default:
            var row = problemToConvert.a;
            var col = problemToConvert.b;
            var customMessage = problemToConvert.c;
            return _List_Cons({
                dW: col,
                ey: $elm$parser$Parser$Problem(customMessage),
                bu: row
            }, soFar);
    }
}, $stil4m$elm_syntax$ParserFast$ropeFilledToList = F2($stil4m$elm_syntax$ParserFast$ropeFilledToList_fn);
var $stil4m$elm_syntax$ParserFast$run_fn = function (_v0, src) {
    var parse = _v0;
    var _v1 = parse({ dW: 1, ac: 1, J: 0, bu: 1, H: src });
    if (!_v1.$) {
        var value = _v1.a;
        var finalState = _v1.b;
        return (!(finalState.J - $elm$core$String$length(finalState.H))) ? $elm$core$Result$Ok(value) : $elm$core$Result$Err(_List_fromArray([
            { dW: finalState.dW, ey: $elm$parser$Parser$ExpectingEnd, bu: finalState.bu }
        ]));
    }
    else {
        var deadEnds = _v1.b;
        return $elm$core$Result$Err($stil4m$elm_syntax$ParserFast$ropeFilledToList_fn(deadEnds, _List_Nil));
    }
}, $stil4m$elm_syntax$ParserFast$run = F2($stil4m$elm_syntax$ParserFast$run_fn);
var $stil4m$elm_syntax$Elm$Parser$parseToFile = function (input) {
    return $stil4m$elm_syntax$ParserFast$run_fn($stil4m$elm_syntax$Elm$Parser$File$file, input);
};
var $author$project$Main$bytesToElmSyntaxModule = function (sourceBytes) {
    var _v0 = $elm$bytes$Bytes$Decode$decode_fn($elm$bytes$Bytes$Decode$string($elm$bytes$Bytes$width(sourceBytes)), sourceBytes);
    if (_v0.$ === 1) {
        return $elm$core$Result$Err("source bytes couldn't be decoded into UTF-8");
    }
    else {
        var source = _v0.a;
        var _v1 = $stil4m$elm_syntax$Elm$Parser$parseToFile(source);
        if (_v1.$ === 1) {
            return $elm$core$Result$Err("source couldn't be parsed. Check for compiler errors.");
        }
        else {
            var syntax = _v1.a;
            return $elm$core$Result$Ok(syntax);
        }
    }
};
var $lue_bird$elm_state_interface_experimental$Node$directorySubPathsRequest = function (path) {
    return $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle($lue_bird$elm_state_interface_experimental$Node$DirectorySubPathsRequest({ G: $elm$core$Basics$identity, q: path }));
};
var $elm$bytes$Bytes$Encode$encode = _Bytes_encode;
var $elm$core$String$endsWith = _String_endsWith;
var $miniBill$elm_fast_dict$FastDict$foldrInner_fn = function (func, acc, t) {
    foldrInner: while (true) {
        if (t.$ === 1) {
            return acc;
        }
        else {
            var key = t.b;
            var value = t.c;
            var left = t.d;
            var right = t.e;
            var $temp$func = func, $temp$acc = A3(func, key, value, $miniBill$elm_fast_dict$FastDict$foldrInner_fn(func, acc, right)), $temp$t = left;
            func = $temp$func;
            acc = $temp$acc;
            t = $temp$t;
            continue foldrInner;
        }
    }
}, $miniBill$elm_fast_dict$FastDict$foldrInner_fn_unwrapped = function (func, acc, t) {
    foldrInner: while (true) {
        if (t.$ === 1) {
            return acc;
        }
        else {
            var key = t.b;
            var value = t.c;
            var left = t.d;
            var right = t.e;
            var $temp$func = func, $temp$acc = func(key, value, $miniBill$elm_fast_dict$FastDict$foldrInner_fn_unwrapped(func, acc, right)), $temp$t = left;
            func = $temp$func;
            acc = $temp$acc;
            t = $temp$t;
            continue foldrInner;
        }
    }
}, $miniBill$elm_fast_dict$FastDict$foldrInner = F3($miniBill$elm_fast_dict$FastDict$foldrInner_fn);
var $miniBill$elm_fast_dict$FastDict$foldr_fn = function (func, acc, _v0) {
    var dict = _v0.b;
    return $miniBill$elm_fast_dict$FastDict$foldrInner_fn(func, acc, dict);
}, $miniBill$elm_fast_dict$FastDict$foldr = F3($miniBill$elm_fast_dict$FastDict$foldr_fn);
var $miniBill$elm_fast_dict$FastSet$foldr_fn = function (func, acc, _v0) {
    var set = _v0;
    return $miniBill$elm_fast_dict$FastDict$foldr_fn(F3(function (v, _v1, iacc) {
        return A2(func, v, iacc);
    }), acc, set);
}, $miniBill$elm_fast_dict$FastSet$foldr_fn_unwrapped = function (func, acc, _v0) {
    var set = _v0;
    return $miniBill$elm_fast_dict$FastDict$foldr_fn(F3(function (v, _v1, iacc) {
        return func(v, iacc);
    }), acc, set);
}, $miniBill$elm_fast_dict$FastSet$foldr = F3($miniBill$elm_fast_dict$FastSet$foldr_fn);
var $author$project$Main$fastSetToListAndMap_fn = function (keyToElement, fastDict) {
    return $miniBill$elm_fast_dict$FastSet$foldr_fn_unwrapped(function (key, soFar) {
        return _List_Cons(keyToElement(key), soFar);
    }, _List_Nil, fastDict);
}, $author$project$Main$fastSetToListAndMap = F2($author$project$Main$fastSetToListAndMap_fn);
var $elm$bytes$Bytes$Decode$loopHelp_fn = function (state, callback, bites, offset) {
    loopHelp: while (true) {
        var _v0 = callback(state);
        var decoder = _v0;
        var _v1 = A2(decoder, bites, offset);
        var newOffset = _v1.a;
        var step = _v1.b;
        if (!step.$) {
            var newState = step.a;
            var $temp$state = newState, $temp$callback = callback, $temp$bites = bites, $temp$offset = newOffset;
            state = $temp$state;
            callback = $temp$callback;
            bites = $temp$bites;
            offset = $temp$offset;
            continue loopHelp;
        }
        else {
            var result = step.a;
            return _Utils_Tuple2(newOffset, result);
        }
    }
}, $elm$bytes$Bytes$Decode$loopHelp = F4($elm$bytes$Bytes$Decode$loopHelp_fn);
var $elm$bytes$Bytes$Decode$loop_fn = function (state, callback) {
    return A2($elm$bytes$Bytes$Decode$loopHelp, state, callback);
}, $elm$bytes$Bytes$Decode$loop = F2($elm$bytes$Bytes$Decode$loop_fn);
var $elm$bytes$Bytes$Decode$Done = function (a) {
    return { $: 1, a: a };
};
var $elm$bytes$Bytes$Decode$Loop = function (a) {
    return { $: 0, a: a };
};
var $elm$bytes$Bytes$BE = 1;
var $elm$bytes$Bytes$Decode$unsignedInt32 = function (endianness) {
    return _Bytes_read_u32(!endianness);
};
var $lue_bird$elm_state_interface_experimental$AsciiString$decodeUnsignedInt32BE = $elm$bytes$Bytes$Decode$unsignedInt32(1);
var $elm$bytes$Bytes$Decode$map_fn = function (func, _v0) {
    var decodeA = _v0;
    return F2(function (bites, offset) {
        var _v1 = A2(decodeA, bites, offset);
        var aOffset = _v1.a;
        var a = _v1.b;
        return _Utils_Tuple2(aOffset, func(a));
    });
}, $elm$bytes$Bytes$Decode$map = F2($elm$bytes$Bytes$Decode$map_fn);
var $elm$bytes$Bytes$Decode$succeed = function (a) {
    return F2(function (_v0, offset) {
        return _Utils_Tuple2(offset, a);
    });
};
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $lue_bird$elm_state_interface_experimental$AsciiString$unsignedInt8ToAsciiString = function (bits) {
    return $elm$core$String$fromChar($elm$core$Char$fromCode(bits));
};
var $lue_bird$elm_state_interface_experimental$AsciiString$unsignedInt32ToAsciiString = function (bits) {
    return _Utils_ap($lue_bird$elm_state_interface_experimental$AsciiString$unsignedInt8ToAsciiString((bits >>> 24) & 255), _Utils_ap($lue_bird$elm_state_interface_experimental$AsciiString$unsignedInt8ToAsciiString((bits >>> 16) & 255), _Utils_ap($lue_bird$elm_state_interface_experimental$AsciiString$unsignedInt8ToAsciiString((bits >>> 8) & 255), $lue_bird$elm_state_interface_experimental$AsciiString$unsignedInt8ToAsciiString(bits & 255))));
};
var $elm$bytes$Bytes$Decode$unsignedInt8 = _Bytes_read_u8;
var $lue_bird$elm_state_interface_experimental$AsciiString$loopHelp = function (soFar) {
    return (soFar.cc >= 4) ? $elm$bytes$Bytes$Decode$map_fn(function (chunk) {
        return $elm$bytes$Bytes$Decode$Loop({
            cc: soFar.cc - 4,
            cB: _Utils_ap(soFar.cB, $lue_bird$elm_state_interface_experimental$AsciiString$unsignedInt32ToAsciiString(chunk))
        });
    }, $lue_bird$elm_state_interface_experimental$AsciiString$decodeUnsignedInt32BE) : ((!soFar.cc) ? $elm$bytes$Bytes$Decode$succeed($elm$bytes$Bytes$Decode$Done(soFar.cB)) : $elm$bytes$Bytes$Decode$map_fn(function (a) {
        return $elm$bytes$Bytes$Decode$Loop({
            cc: soFar.cc - 1,
            cB: _Utils_ap(soFar.cB, $lue_bird$elm_state_interface_experimental$AsciiString$unsignedInt8ToAsciiString(a))
        });
    }, $elm$bytes$Bytes$Decode$unsignedInt8));
};
var $lue_bird$elm_state_interface_experimental$AsciiString$decoder = function (width) {
    return $elm$bytes$Bytes$Decode$loop_fn({ cc: width, cB: "" }, $lue_bird$elm_state_interface_experimental$AsciiString$loopHelp);
};
var $elm$core$Maybe$withDefault_fn = function (_default, maybe) {
    if (!maybe.$) {
        var value = maybe.a;
        return value;
    }
    else {
        return _default;
    }
}, $elm$core$Maybe$withDefault = F2($elm$core$Maybe$withDefault_fn);
var $lue_bird$elm_state_interface_experimental$AsciiString$fromBytes = function (bytes) {
    return $elm$core$Maybe$withDefault_fn("", $elm$bytes$Bytes$Decode$decode_fn($lue_bird$elm_state_interface_experimental$AsciiString$decoder($elm$bytes$Bytes$width(bytes)), bytes));
};
var $lue_bird$elm_state_interface_experimental$Node$fileWrite = function (write) {
    return $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle($lue_bird$elm_state_interface_experimental$Node$FileWrite({
        cK: $lue_bird$elm_state_interface_experimental$AsciiString$fromBytes(write.fb),
        G: $elm$core$Basics$identity,
        q: write.q
    }));
};
var $elm$core$List$maybeCons_fn = function (f, mx, xs) {
    var _v0 = f(mx);
    if (!_v0.$) {
        var x = _v0.a;
        return _List_Cons(x, xs);
    }
    else {
        return xs;
    }
}, $elm$core$List$maybeCons = F3($elm$core$List$maybeCons_fn);
var $elm$core$List$filterMap_fn = function (f, xs) {
    return $elm$core$List$foldr_fn($elm$core$List$maybeCons(f), _List_Nil, xs);
}, $elm$core$List$filterMap = F2($elm$core$List$filterMap_fn);
var $lue_bird$elm_state_interface_experimental$Node$interfaceNone = $miniBill$elm_fast_dict$FastDict$empty;
var $miniBill$elm_fast_dict$FastDict$isEmpty = function (_v0) {
    var dict = _v0.b;
    if (dict.$ === 1) {
        return true;
    }
    else {
        return false;
    }
};
var $miniBill$elm_fast_dict$FastSet$isEmpty = function (_v0) {
    var set = _v0;
    return $miniBill$elm_fast_dict$FastDict$isEmpty(set);
};
var $author$project$ElmSyntaxToRust$RustExpressionCall = function (a) {
    return { $: 11, a: a };
};
var $author$project$ElmSyntaxToRust$RustExpressionLambda = function (a) {
    return { $: 12, a: a };
};
var $author$project$ElmSyntaxToRust$RustExpressionReference = function (a) {
    return { $: 4, a: a };
};
var $author$project$ElmSyntaxToRust$RustExpressionSelf = { $: 3 };
var $author$project$ElmSyntaxToRust$RustExpressionSwitch = function (a) {
    return { $: 14, a: a };
};
var $author$project$ElmSyntaxToRust$RustPatternIgnore = { $: 0 };
var $author$project$ElmSyntaxToRust$RustPatternVariable = function (a) {
    return { $: 5, a: a };
};
var $author$project$ElmSyntaxToRust$RustPatternVariant = function (a) {
    return { $: 7, a: a };
};
var $author$project$ElmSyntaxToRust$RustTypeVariable = function (a) {
    return { $: 3, a: a };
};
var $elm$core$Result$andThen_fn = function (callback, result) {
    if (!result.$) {
        var value = result.a;
        return callback(value);
    }
    else {
        var msg = result.a;
        return $elm$core$Result$Err(msg);
    }
}, $elm$core$Result$andThen = F2($elm$core$Result$andThen_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct = function (a) {
    return { $: 1, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction = function (a) {
    return { $: 6, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable = function (a) {
    return { $: 1, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable = function (a) {
    return { $: 0, a: a };
};
var $stil4m$elm_syntax$Elm$Syntax$Range$empty = {
    b_: { cJ: 0, bu: 0 },
    cf: { cJ: 0, bu: 0 }
};
var $miniBill$elm_fast_dict$FastDict$fromList = function (assocs) {
    return $elm$core$List$foldl_fn_unwrapped(function (_v0, dict) {
        var key = _v0.a;
        var value = _v0.b;
        return $miniBill$elm_fast_dict$FastDict$insert_fn(key, value, dict);
    }, $miniBill$elm_fast_dict$FastDict$empty, assocs);
};
var $author$project$ElmSyntaxToRust$elmBytesTypes = $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
    _Utils_Tuple2("Bytes", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Bytes", {
                o: _List_Nil,
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            }),
            _Utils_Tuple2("Endianness", {
                o: _List_Nil,
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
                    _Utils_Tuple2("LE", _List_Nil),
                    _Utils_Tuple2("BE", _List_Nil)
                ]))
            })
        ])),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("getHostEndianness", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                c: _List_fromArray([
                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes", a: "Endianness" }))
                ]),
                b: "Task",
                a: "Task"
            }))),
            _Utils_Tuple2("width", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes", a: "Bytes" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    }),
    _Utils_Tuple2("Bytes.Decode", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Decoder", {
                o: _List_fromArray(["a"]),
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            }),
            _Utils_Tuple2("Step", {
                o: _List_fromArray(["state", "a"]),
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
                    _Utils_Tuple2("Loop", _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "state", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ])),
                    _Utils_Tuple2("Done", _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]))
                ]))
            })
        ])),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("andThen", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Bytes.Decode",
                        a: "Decoder"
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Bytes.Decode",
                        a: "Decoder"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Bytes.Decode",
                        a: "Decoder"
                    }))
                }))
            }))),
            _Utils_Tuple2("bytes", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes", a: "Bytes" }))
                    ]),
                    b: "Bytes.Decode",
                    a: "Decoder"
                }))
            }))),
            _Utils_Tuple2("decode", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Bytes.Decode",
                    a: "Decoder"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes", a: "Bytes" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Maybe",
                        a: "Maybe"
                    }))
                }))
            }))),
            _Utils_Tuple2("fail", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                c: _List_fromArray([
                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                ]),
                b: "Bytes.Decode",
                a: "Decoder"
            }))),
            _Utils_Tuple2("float32", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes", a: "Endianness" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
                    ]),
                    b: "Bytes.Decode",
                    a: "Decoder"
                }))
            }))),
            _Utils_Tuple2("float64", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes", a: "Endianness" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
                    ]),
                    b: "Bytes.Decode",
                    a: "Decoder"
                }))
            }))),
            _Utils_Tuple2("loop", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "state", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "state", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "state", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "Bytes.Decode",
                                    a: "Step"
                                }))
                            ]),
                            b: "Bytes.Decode",
                            a: "Decoder"
                        }))
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Bytes.Decode",
                        a: "Decoder"
                    }))
                }))
            }))),
            _Utils_Tuple2("map", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Bytes.Decode",
                        a: "Decoder"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Bytes.Decode",
                        a: "Decoder"
                    }))
                }))
            }))),
            _Utils_Tuple2("map2", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Bytes.Decode",
                        a: "Decoder"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Bytes.Decode",
                            a: "Decoder"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Bytes.Decode",
                            a: "Decoder"
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map3", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Bytes.Decode",
                        a: "Decoder"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Bytes.Decode",
                            a: "Decoder"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Bytes.Decode",
                                a: "Decoder"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Bytes.Decode",
                                a: "Decoder"
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map4", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            }))
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Bytes.Decode",
                        a: "Decoder"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Bytes.Decode",
                            a: "Decoder"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Bytes.Decode",
                                a: "Decoder"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "Bytes.Decode",
                                    a: "Decoder"
                                })),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "Bytes.Decode",
                                    a: "Decoder"
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map5", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                }))
                            }))
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Bytes.Decode",
                        a: "Decoder"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Bytes.Decode",
                            a: "Decoder"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Bytes.Decode",
                                a: "Decoder"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "Bytes.Decode",
                                    a: "Decoder"
                                })),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                        c: _List_fromArray([
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                        ]),
                                        b: "Bytes.Decode",
                                        a: "Decoder"
                                    })),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                        c: _List_fromArray([
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                        ]),
                                        b: "Bytes.Decode",
                                        a: "Decoder"
                                    }))
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("signedInt16", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes", a: "Endianness" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                    ]),
                    b: "Bytes.Decode",
                    a: "Decoder"
                }))
            }))),
            _Utils_Tuple2("signedInt32", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes", a: "Endianness" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                    ]),
                    b: "Bytes.Decode",
                    a: "Decoder"
                }))
            }))),
            _Utils_Tuple2("signedInt8", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                c: _List_fromArray([
                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                ]),
                b: "Bytes.Decode",
                a: "Decoder"
            }))),
            _Utils_Tuple2("string", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                    ]),
                    b: "Bytes.Decode",
                    a: "Decoder"
                }))
            }))),
            _Utils_Tuple2("succeed", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Bytes.Decode",
                    a: "Decoder"
                }))
            }))),
            _Utils_Tuple2("unsignedInt16", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes", a: "Endianness" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                    ]),
                    b: "Bytes.Decode",
                    a: "Decoder"
                }))
            }))),
            _Utils_Tuple2("unsignedInt32", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes", a: "Endianness" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                    ]),
                    b: "Bytes.Decode",
                    a: "Decoder"
                }))
            }))),
            _Utils_Tuple2("unsignedInt8", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                c: _List_fromArray([
                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                ]),
                b: "Bytes.Decode",
                a: "Decoder"
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    }),
    _Utils_Tuple2("Bytes.Encode", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Encoder", {
                o: _List_Nil,
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            })
        ])),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("bytes", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes", a: "Bytes" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes.Encode", a: "Encoder" }))
            }))),
            _Utils_Tuple2("encode", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes.Encode", a: "Encoder" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes", a: "Bytes" }))
            }))),
            _Utils_Tuple2("float32", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes", a: "Endianness" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes.Encode", a: "Encoder" }))
                }))
            }))),
            _Utils_Tuple2("float64", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes", a: "Endianness" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes.Encode", a: "Encoder" }))
                }))
            }))),
            _Utils_Tuple2("getStringWidth", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
            }))),
            _Utils_Tuple2("sequence", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes.Encode", a: "Encoder" }))
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes.Encode", a: "Encoder" }))
            }))),
            _Utils_Tuple2("signedInt16", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes", a: "Endianness" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes.Encode", a: "Encoder" }))
                }))
            }))),
            _Utils_Tuple2("signedInt32", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes", a: "Endianness" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes.Encode", a: "Encoder" }))
                }))
            }))),
            _Utils_Tuple2("signedInt8", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes.Encode", a: "Encoder" }))
            }))),
            _Utils_Tuple2("string", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes.Encode", a: "Encoder" }))
            }))),
            _Utils_Tuple2("unsignedInt16", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes", a: "Endianness" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes.Encode", a: "Encoder" }))
                }))
            }))),
            _Utils_Tuple2("unsignedInt32", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes", a: "Endianness" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes.Encode", a: "Encoder" }))
                }))
            }))),
            _Utils_Tuple2("unsignedInt8", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Bytes.Encode", a: "Encoder" }))
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    })
]));
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord = function (a) {
    return { $: 4, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple = function (a) {
    return { $: 2, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit = { $: 0 };
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$elmCoreTypesGeneratedFromDocsJson = $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
    _Utils_Tuple2("Array", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Array", {
                o: _List_fromArray(["a"]),
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            })
        ])),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("append", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Array",
                    a: "Array"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Array",
                        a: "Array"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Array",
                        a: "Array"
                    }))
                }))
            }))),
            _Utils_Tuple2("empty", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                c: _List_fromArray([
                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                ]),
                b: "Array",
                a: "Array"
            }))),
            _Utils_Tuple2("filter", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Array",
                        a: "Array"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Array",
                        a: "Array"
                    }))
                }))
            }))),
            _Utils_Tuple2("foldl", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Array",
                            a: "Array"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                }))
            }))),
            _Utils_Tuple2("foldr", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Array",
                            a: "Array"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                }))
            }))),
            _Utils_Tuple2("fromList", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Array",
                    a: "Array"
                }))
            }))),
            _Utils_Tuple2("get", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Array",
                        a: "Array"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Maybe",
                        a: "Maybe"
                    }))
                }))
            }))),
            _Utils_Tuple2("indexedMap", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Array",
                        a: "Array"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Array",
                        a: "Array"
                    }))
                }))
            }))),
            _Utils_Tuple2("initialize", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Array",
                        a: "Array"
                    }))
                }))
            }))),
            _Utils_Tuple2("isEmpty", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Array",
                    a: "Array"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
            }))),
            _Utils_Tuple2("length", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Array",
                    a: "Array"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
            }))),
            _Utils_Tuple2("map", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Array",
                        a: "Array"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Array",
                        a: "Array"
                    }))
                }))
            }))),
            _Utils_Tuple2("push", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Array",
                        a: "Array"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Array",
                        a: "Array"
                    }))
                }))
            }))),
            _Utils_Tuple2("repeat", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Array",
                        a: "Array"
                    }))
                }))
            }))),
            _Utils_Tuple2("set", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Array",
                            a: "Array"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Array",
                            a: "Array"
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("slice", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Array",
                            a: "Array"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Array",
                            a: "Array"
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("toIndexedList", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Array",
                    a: "Array"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                            s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                            t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        }))
                    ]),
                    b: "List",
                    a: "List"
                }))
            }))),
            _Utils_Tuple2("toList", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Array",
                    a: "Array"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "List",
                    a: "List"
                }))
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    }),
    _Utils_Tuple2("Basics", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Bool", {
                o: _List_Nil,
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
                    _Utils_Tuple2("True", _List_Nil),
                    _Utils_Tuple2("False", _List_Nil)
                ]))
            }),
            _Utils_Tuple2("Float", {
                o: _List_Nil,
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            }),
            _Utils_Tuple2("Int", {
                o: _List_Nil,
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            }),
            _Utils_Tuple2("Never", {
                o: _List_Nil,
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            }),
            _Utils_Tuple2("Order", {
                o: _List_Nil,
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
                    _Utils_Tuple2("LT", _List_Nil),
                    _Utils_Tuple2("EQ", _List_Nil),
                    _Utils_Tuple2("GT", _List_Nil)
                ]))
            })
        ])),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("abs", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "number", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "number", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
            }))),
            _Utils_Tuple2("acos", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("always", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                }))
            }))),
            _Utils_Tuple2("asin", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("atan", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("atan2", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
                }))
            }))),
            _Utils_Tuple2("ceiling", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
            }))),
            _Utils_Tuple2("clamp", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "number", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "number", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "number", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "number", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                }))
            }))),
            _Utils_Tuple2("compare", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Order" }))
                }))
            }))),
            _Utils_Tuple2("cos", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("degrees", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("e", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
            _Utils_Tuple2("floor", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
            }))),
            _Utils_Tuple2("fromPolar", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                    s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                    t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                    s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                    t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
                }))
            }))),
            _Utils_Tuple2("identity", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
            }))),
            _Utils_Tuple2("isInfinite", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
            }))),
            _Utils_Tuple2("isNaN", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
            }))),
            _Utils_Tuple2("logBase", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
                }))
            }))),
            _Utils_Tuple2("max", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                }))
            }))),
            _Utils_Tuple2("min", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                }))
            }))),
            _Utils_Tuple2("modBy", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                }))
            }))),
            _Utils_Tuple2("negate", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "number", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "number", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
            }))),
            _Utils_Tuple2("never", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Never" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
            }))),
            _Utils_Tuple2("not", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
            }))),
            _Utils_Tuple2("pi", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
            _Utils_Tuple2("radians", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("remainderBy", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                }))
            }))),
            _Utils_Tuple2("round", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
            }))),
            _Utils_Tuple2("sin", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("sqrt", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("tan", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("toFloat", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("toPolar", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                    s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                    t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                    s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                    t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
                }))
            }))),
            _Utils_Tuple2("truncate", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
            }))),
            _Utils_Tuple2("turns", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("xor", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                }))
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    }),
    _Utils_Tuple2("Bitwise", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("and", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                }))
            }))),
            _Utils_Tuple2("complement", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
            }))),
            _Utils_Tuple2("or", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                }))
            }))),
            _Utils_Tuple2("shiftLeftBy", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                }))
            }))),
            _Utils_Tuple2("shiftRightBy", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                }))
            }))),
            _Utils_Tuple2("shiftRightZfBy", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                }))
            }))),
            _Utils_Tuple2("xor", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                }))
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    }),
    _Utils_Tuple2("Char", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Char", {
                o: _List_Nil,
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            })
        ])),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("fromCode", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" }))
            }))),
            _Utils_Tuple2("isAlpha", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
            }))),
            _Utils_Tuple2("isAlphaNum", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
            }))),
            _Utils_Tuple2("isDigit", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
            }))),
            _Utils_Tuple2("isHexDigit", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
            }))),
            _Utils_Tuple2("isLower", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
            }))),
            _Utils_Tuple2("isOctDigit", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
            }))),
            _Utils_Tuple2("isUpper", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
            }))),
            _Utils_Tuple2("toCode", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
            }))),
            _Utils_Tuple2("toLocaleLower", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" }))
            }))),
            _Utils_Tuple2("toLocaleUpper", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" }))
            }))),
            _Utils_Tuple2("toLower", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" }))
            }))),
            _Utils_Tuple2("toUpper", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" }))
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    }),
    _Utils_Tuple2("Debug", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("log", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                }))
            }))),
            _Utils_Tuple2("toString", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
            }))),
            _Utils_Tuple2("todo", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    }),
    _Utils_Tuple2("Dict", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Dict", {
                o: _List_fromArray(["k", "v"]),
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            })
        ])),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("diff", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Dict",
                    a: "Dict"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Dict",
                        a: "Dict"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Dict",
                        a: "Dict"
                    }))
                }))
            }))),
            _Utils_Tuple2("empty", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                c: _List_fromArray([
                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "k", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                ]),
                b: "Dict",
                a: "Dict"
            }))),
            _Utils_Tuple2("filter", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Dict",
                        a: "Dict"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Dict",
                        a: "Dict"
                    }))
                }))
            }))),
            _Utils_Tuple2("foldl", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "k", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "k", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Dict",
                            a: "Dict"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                }))
            }))),
            _Utils_Tuple2("foldr", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "k", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "k", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Dict",
                            a: "Dict"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                }))
            }))),
            _Utils_Tuple2("fromList", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                            s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        }))
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Dict",
                    a: "Dict"
                }))
            }))),
            _Utils_Tuple2("get", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Dict",
                        a: "Dict"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Maybe",
                        a: "Maybe"
                    }))
                }))
            }))),
            _Utils_Tuple2("insert", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Dict",
                            a: "Dict"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Dict",
                            a: "Dict"
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("intersect", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Dict",
                    a: "Dict"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Dict",
                        a: "Dict"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Dict",
                        a: "Dict"
                    }))
                }))
            }))),
            _Utils_Tuple2("isEmpty", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "k", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Dict",
                    a: "Dict"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
            }))),
            _Utils_Tuple2("keys", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "k", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Dict",
                    a: "Dict"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "k", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "List",
                    a: "List"
                }))
            }))),
            _Utils_Tuple2("map", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "k", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "k", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Dict",
                        a: "Dict"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "k", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Dict",
                        a: "Dict"
                    }))
                }))
            }))),
            _Utils_Tuple2("member", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Dict",
                        a: "Dict"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                }))
            }))),
            _Utils_Tuple2("merge", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                }))
                            }))
                        }))
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                }))
                            }))
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Dict",
                                a: "Dict"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "Dict",
                                    a: "Dict"
                                })),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("partition", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Dict",
                        a: "Dict"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                        s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Dict",
                            a: "Dict"
                        })),
                        t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Dict",
                            a: "Dict"
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("remove", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Dict",
                        a: "Dict"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Dict",
                        a: "Dict"
                    }))
                }))
            }))),
            _Utils_Tuple2("singleton", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Dict",
                        a: "Dict"
                    }))
                }))
            }))),
            _Utils_Tuple2("size", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "k", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Dict",
                    a: "Dict"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
            }))),
            _Utils_Tuple2("toList", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "k", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Dict",
                    a: "Dict"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                            s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "k", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        }))
                    ]),
                    b: "List",
                    a: "List"
                }))
            }))),
            _Utils_Tuple2("union", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Dict",
                    a: "Dict"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Dict",
                        a: "Dict"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Dict",
                        a: "Dict"
                    }))
                }))
            }))),
            _Utils_Tuple2("update", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Maybe",
                            a: "Maybe"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Maybe",
                            a: "Maybe"
                        }))
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Dict",
                            a: "Dict"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Dict",
                            a: "Dict"
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("values", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "k", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Dict",
                    a: "Dict"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "List",
                    a: "List"
                }))
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    }),
    _Utils_Tuple2("List", {
        aw: $miniBill$elm_fast_dict$FastDict$singleton_fn("List", {
            o: _List_fromArray(["a"]),
            Y: $miniBill$elm_fast_dict$FastDict$empty
        }),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("all", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                }))
            }))),
            _Utils_Tuple2("any", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                }))
            }))),
            _Utils_Tuple2("append", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    }))
                }))
            }))),
            _Utils_Tuple2("concat", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "List",
                            a: "List"
                        }))
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "List",
                    a: "List"
                }))
            }))),
            _Utils_Tuple2("concatMap", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    }))
                }))
            }))),
            _Utils_Tuple2("drop", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    }))
                }))
            }))),
            _Utils_Tuple2("filter", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    }))
                }))
            }))),
            _Utils_Tuple2("filterMap", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Maybe",
                        a: "Maybe"
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    }))
                }))
            }))),
            _Utils_Tuple2("foldl", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "List",
                            a: "List"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                }))
            }))),
            _Utils_Tuple2("foldr", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "List",
                            a: "List"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                }))
            }))),
            _Utils_Tuple2("head", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Maybe",
                    a: "Maybe"
                }))
            }))),
            _Utils_Tuple2("indexedMap", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    }))
                }))
            }))),
            _Utils_Tuple2("intersperse", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    }))
                }))
            }))),
            _Utils_Tuple2("isEmpty", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
            }))),
            _Utils_Tuple2("length", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
            }))),
            _Utils_Tuple2("map", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    }))
                }))
            }))),
            _Utils_Tuple2("map2", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "List",
                            a: "List"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "List",
                            a: "List"
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map3", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "List",
                            a: "List"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "List",
                                a: "List"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "List",
                                a: "List"
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map4", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            }))
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "List",
                            a: "List"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "List",
                                a: "List"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "List",
                                    a: "List"
                                })),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "List",
                                    a: "List"
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map5", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                }))
                            }))
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "List",
                            a: "List"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "List",
                                a: "List"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "List",
                                    a: "List"
                                })),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                        c: _List_fromArray([
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                        ]),
                                        b: "List",
                                        a: "List"
                                    })),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                        c: _List_fromArray([
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                        ]),
                                        b: "List",
                                        a: "List"
                                    }))
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("maximum", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Maybe",
                    a: "Maybe"
                }))
            }))),
            _Utils_Tuple2("member", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                }))
            }))),
            _Utils_Tuple2("minimum", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Maybe",
                    a: "Maybe"
                }))
            }))),
            _Utils_Tuple2("partition", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                        s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "List",
                            a: "List"
                        })),
                        t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "List",
                            a: "List"
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("product", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "number", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "number", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
            }))),
            _Utils_Tuple2("range", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                        ]),
                        b: "List",
                        a: "List"
                    }))
                }))
            }))),
            _Utils_Tuple2("repeat", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    }))
                }))
            }))),
            _Utils_Tuple2("reverse", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "List",
                    a: "List"
                }))
            }))),
            _Utils_Tuple2("singleton", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "List",
                    a: "List"
                }))
            }))),
            _Utils_Tuple2("sort", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "List",
                    a: "List"
                }))
            }))),
            _Utils_Tuple2("sortBy", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    }))
                }))
            }))),
            _Utils_Tuple2("sortWith", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Order" }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    }))
                }))
            }))),
            _Utils_Tuple2("sum", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "number", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "number", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
            }))),
            _Utils_Tuple2("tail", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "List",
                            a: "List"
                        }))
                    ]),
                    b: "Maybe",
                    a: "Maybe"
                }))
            }))),
            _Utils_Tuple2("take", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    }))
                }))
            }))),
            _Utils_Tuple2("unzip", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                            s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        }))
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                    s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    }))
                }))
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    }),
    _Utils_Tuple2("Maybe", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Maybe", {
                o: _List_fromArray(["a"]),
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
                    _Utils_Tuple2("Just", _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ])),
                    _Utils_Tuple2("Nothing", _List_Nil)
                ]))
            })
        ])),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("andThen", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Maybe",
                        a: "Maybe"
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Maybe",
                        a: "Maybe"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Maybe",
                        a: "Maybe"
                    }))
                }))
            }))),
            _Utils_Tuple2("map", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Maybe",
                        a: "Maybe"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Maybe",
                        a: "Maybe"
                    }))
                }))
            }))),
            _Utils_Tuple2("map2", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Maybe",
                        a: "Maybe"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Maybe",
                            a: "Maybe"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Maybe",
                            a: "Maybe"
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map3", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Maybe",
                        a: "Maybe"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Maybe",
                            a: "Maybe"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Maybe",
                                a: "Maybe"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Maybe",
                                a: "Maybe"
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map4", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            }))
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Maybe",
                        a: "Maybe"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Maybe",
                            a: "Maybe"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Maybe",
                                a: "Maybe"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "Maybe",
                                    a: "Maybe"
                                })),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "Maybe",
                                    a: "Maybe"
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map5", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                }))
                            }))
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Maybe",
                        a: "Maybe"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Maybe",
                            a: "Maybe"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Maybe",
                                a: "Maybe"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "Maybe",
                                    a: "Maybe"
                                })),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                        c: _List_fromArray([
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                        ]),
                                        b: "Maybe",
                                        a: "Maybe"
                                    })),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                        c: _List_fromArray([
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                        ]),
                                        b: "Maybe",
                                        a: "Maybe"
                                    }))
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("withDefault", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Maybe",
                        a: "Maybe"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                }))
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    }),
    _Utils_Tuple2("Platform", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("ProcessId", {
                o: _List_Nil,
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            }),
            _Utils_Tuple2("Program", {
                o: _List_fromArray(["flags", "model", "msg"]),
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            }),
            _Utils_Tuple2("Router", {
                o: _List_fromArray(["appMsg", "selfMsg"]),
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            }),
            _Utils_Tuple2("Task", {
                o: _List_fromArray(["err", "ok"]),
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            })
        ])),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("sendToApp", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Platform",
                    a: "Router"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit)
                        ]),
                        b: "Platform",
                        a: "Task"
                    }))
                }))
            }))),
            _Utils_Tuple2("sendToSelf", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Platform",
                    a: "Router"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit)
                        ]),
                        b: "Platform",
                        a: "Task"
                    }))
                }))
            }))),
            _Utils_Tuple2("worker", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord($miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
                    _Utils_Tuple2("init", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "flags", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                            s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "model", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Platform.Cmd",
                                a: "Cmd"
                            }))
                        }))
                    }))),
                    _Utils_Tuple2("subscriptions", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "model", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Platform.Sub",
                            a: "Sub"
                        }))
                    }))),
                    _Utils_Tuple2("update", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "model", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                                s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "model", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "Platform.Cmd",
                                    a: "Cmd"
                                }))
                            }))
                        }))
                    })))
                ])))),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "flags", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "model", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Platform",
                    a: "Program"
                }))
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    }),
    _Utils_Tuple2("Platform.Cmd", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Cmd", {
                o: _List_fromArray(["msg"]),
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            })
        ])),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("batch", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Platform.Cmd",
                            a: "Cmd"
                        }))
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Platform.Cmd",
                    a: "Cmd"
                }))
            }))),
            _Utils_Tuple2("map", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Platform.Cmd",
                        a: "Cmd"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Platform.Cmd",
                        a: "Cmd"
                    }))
                }))
            }))),
            _Utils_Tuple2("none", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                c: _List_fromArray([
                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                ]),
                b: "Platform.Cmd",
                a: "Cmd"
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    }),
    _Utils_Tuple2("Platform.Sub", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Sub", {
                o: _List_fromArray(["msg"]),
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            })
        ])),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("batch", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Platform.Sub",
                            a: "Sub"
                        }))
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Platform.Sub",
                    a: "Sub"
                }))
            }))),
            _Utils_Tuple2("map", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Platform.Sub",
                        a: "Sub"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Platform.Sub",
                        a: "Sub"
                    }))
                }))
            }))),
            _Utils_Tuple2("none", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                c: _List_fromArray([
                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                ]),
                b: "Platform.Sub",
                a: "Sub"
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    }),
    _Utils_Tuple2("Process", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("kill", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Process", a: "Id" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit)
                    ]),
                    b: "Task",
                    a: "Task"
                }))
            }))),
            _Utils_Tuple2("sleep", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit)
                    ]),
                    b: "Task",
                    a: "Task"
                }))
            }))),
            _Utils_Tuple2("spawn", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Task",
                    a: "Task"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "y", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Process", a: "Id" }))
                    ]),
                    b: "Task",
                    a: "Task"
                }))
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Id", {
                o: _List_Nil,
                $7: $elm$core$Maybe$Nothing,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Platform", a: "ProcessId" }))
            })
        ]))
    }),
    _Utils_Tuple2("Result", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Result", {
                o: _List_fromArray(["error", "value"]),
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
                    _Utils_Tuple2("Ok", _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ])),
                    _Utils_Tuple2("Err", _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "error", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]))
                ]))
            })
        ])),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("andThen", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Result",
                        a: "Result"
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Result",
                        a: "Result"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Result",
                        a: "Result"
                    }))
                }))
            }))),
            _Utils_Tuple2("fromMaybe", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Maybe",
                        a: "Maybe"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Result",
                        a: "Result"
                    }))
                }))
            }))),
            _Utils_Tuple2("map", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Result",
                        a: "Result"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Result",
                        a: "Result"
                    }))
                }))
            }))),
            _Utils_Tuple2("map2", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Result",
                        a: "Result"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Result",
                            a: "Result"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Result",
                            a: "Result"
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map3", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Result",
                        a: "Result"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Result",
                            a: "Result"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Result",
                                a: "Result"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Result",
                                a: "Result"
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map4", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            }))
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Result",
                        a: "Result"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Result",
                            a: "Result"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Result",
                                a: "Result"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "Result",
                                    a: "Result"
                                })),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "Result",
                                    a: "Result"
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map5", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                }))
                            }))
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Result",
                        a: "Result"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Result",
                            a: "Result"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Result",
                                a: "Result"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "Result",
                                    a: "Result"
                                })),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                        c: _List_fromArray([
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                        ]),
                                        b: "Result",
                                        a: "Result"
                                    })),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                        c: _List_fromArray([
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                        ]),
                                        b: "Result",
                                        a: "Result"
                                    }))
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("mapError", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "y", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Result",
                        a: "Result"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "y", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Result",
                        a: "Result"
                    }))
                }))
            }))),
            _Utils_Tuple2("toMaybe", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Result",
                    a: "Result"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Maybe",
                    a: "Maybe"
                }))
            }))),
            _Utils_Tuple2("withDefault", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Result",
                        a: "Result"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                }))
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    }),
    _Utils_Tuple2("Set", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Set", {
                o: _List_fromArray(["t"]),
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            })
        ])),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("diff", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Set",
                    a: "Set"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Set",
                        a: "Set"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Set",
                        a: "Set"
                    }))
                }))
            }))),
            _Utils_Tuple2("empty", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                c: _List_fromArray([
                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                ]),
                b: "Set",
                a: "Set"
            }))),
            _Utils_Tuple2("filter", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Set",
                        a: "Set"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Set",
                        a: "Set"
                    }))
                }))
            }))),
            _Utils_Tuple2("foldl", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Set",
                            a: "Set"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                }))
            }))),
            _Utils_Tuple2("foldr", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Set",
                            a: "Set"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                }))
            }))),
            _Utils_Tuple2("fromList", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Set",
                    a: "Set"
                }))
            }))),
            _Utils_Tuple2("insert", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Set",
                        a: "Set"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Set",
                        a: "Set"
                    }))
                }))
            }))),
            _Utils_Tuple2("intersect", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Set",
                    a: "Set"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Set",
                        a: "Set"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Set",
                        a: "Set"
                    }))
                }))
            }))),
            _Utils_Tuple2("isEmpty", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Set",
                    a: "Set"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
            }))),
            _Utils_Tuple2("map", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable2", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Set",
                        a: "Set"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable2", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Set",
                        a: "Set"
                    }))
                }))
            }))),
            _Utils_Tuple2("member", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Set",
                        a: "Set"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                }))
            }))),
            _Utils_Tuple2("partition", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Set",
                        a: "Set"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                        s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Set",
                            a: "Set"
                        })),
                        t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Set",
                            a: "Set"
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("remove", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Set",
                        a: "Set"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Set",
                        a: "Set"
                    }))
                }))
            }))),
            _Utils_Tuple2("singleton", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Set",
                    a: "Set"
                }))
            }))),
            _Utils_Tuple2("size", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Set",
                    a: "Set"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
            }))),
            _Utils_Tuple2("toList", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Set",
                    a: "Set"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "List",
                    a: "List"
                }))
            }))),
            _Utils_Tuple2("union", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Set",
                    a: "Set"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Set",
                        a: "Set"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Set",
                        a: "Set"
                    }))
                }))
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    }),
    _Utils_Tuple2("String", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("String", {
                o: _List_Nil,
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            })
        ])),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("all", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                }))
            }))),
            _Utils_Tuple2("any", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                }))
            }))),
            _Utils_Tuple2("append", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                }))
            }))),
            _Utils_Tuple2("concat", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
            }))),
            _Utils_Tuple2("cons", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                }))
            }))),
            _Utils_Tuple2("contains", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                }))
            }))),
            _Utils_Tuple2("dropLeft", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                }))
            }))),
            _Utils_Tuple2("dropRight", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                }))
            }))),
            _Utils_Tuple2("endsWith", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                }))
            }))),
            _Utils_Tuple2("filter", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                }))
            }))),
            _Utils_Tuple2("foldl", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                }))
            }))),
            _Utils_Tuple2("foldr", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                }))
            }))),
            _Utils_Tuple2("fromChar", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
            }))),
            _Utils_Tuple2("fromFloat", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
            }))),
            _Utils_Tuple2("fromInt", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
            }))),
            _Utils_Tuple2("fromList", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" }))
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
            }))),
            _Utils_Tuple2("indexes", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                        ]),
                        b: "List",
                        a: "List"
                    }))
                }))
            }))),
            _Utils_Tuple2("indices", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                        ]),
                        b: "List",
                        a: "List"
                    }))
                }))
            }))),
            _Utils_Tuple2("isEmpty", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
            }))),
            _Utils_Tuple2("join", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                }))
            }))),
            _Utils_Tuple2("left", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                }))
            }))),
            _Utils_Tuple2("length", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
            }))),
            _Utils_Tuple2("lines", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                    ]),
                    b: "List",
                    a: "List"
                }))
            }))),
            _Utils_Tuple2("map", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                }))
            }))),
            _Utils_Tuple2("pad", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                    }))
                }))
            }))),
            _Utils_Tuple2("padLeft", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                    }))
                }))
            }))),
            _Utils_Tuple2("padRight", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                    }))
                }))
            }))),
            _Utils_Tuple2("repeat", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                }))
            }))),
            _Utils_Tuple2("replace", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                    }))
                }))
            }))),
            _Utils_Tuple2("reverse", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
            }))),
            _Utils_Tuple2("right", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                }))
            }))),
            _Utils_Tuple2("slice", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                    }))
                }))
            }))),
            _Utils_Tuple2("split", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                        ]),
                        b: "List",
                        a: "List"
                    }))
                }))
            }))),
            _Utils_Tuple2("startsWith", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                }))
            }))),
            _Utils_Tuple2("toFloat", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
                    ]),
                    b: "Maybe",
                    a: "Maybe"
                }))
            }))),
            _Utils_Tuple2("toInt", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                    ]),
                    b: "Maybe",
                    a: "Maybe"
                }))
            }))),
            _Utils_Tuple2("toList", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" }))
                    ]),
                    b: "List",
                    a: "List"
                }))
            }))),
            _Utils_Tuple2("toLower", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
            }))),
            _Utils_Tuple2("toUpper", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
            }))),
            _Utils_Tuple2("trim", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
            }))),
            _Utils_Tuple2("trimLeft", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
            }))),
            _Utils_Tuple2("trimRight", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
            }))),
            _Utils_Tuple2("uncons", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                            s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" })),
                            t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                        }))
                    ]),
                    b: "Maybe",
                    a: "Maybe"
                }))
            }))),
            _Utils_Tuple2("words", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                    ]),
                    b: "List",
                    a: "List"
                }))
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    }),
    _Utils_Tuple2("Task", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("andThen", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Task",
                        a: "Task"
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Task",
                        a: "Task"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Task",
                        a: "Task"
                    }))
                }))
            }))),
            _Utils_Tuple2("attempt", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Result",
                        a: "Result"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Task",
                        a: "Task"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Platform.Cmd",
                        a: "Cmd"
                    }))
                }))
            }))),
            _Utils_Tuple2("fail", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Task",
                    a: "Task"
                }))
            }))),
            _Utils_Tuple2("map", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Task",
                        a: "Task"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Task",
                        a: "Task"
                    }))
                }))
            }))),
            _Utils_Tuple2("map2", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Task",
                        a: "Task"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Task",
                            a: "Task"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Task",
                            a: "Task"
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map3", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Task",
                        a: "Task"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Task",
                            a: "Task"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Task",
                                a: "Task"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Task",
                                a: "Task"
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map4", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            }))
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Task",
                        a: "Task"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Task",
                            a: "Task"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Task",
                                a: "Task"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "Task",
                                    a: "Task"
                                })),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "Task",
                                    a: "Task"
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map5", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                }))
                            }))
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Task",
                        a: "Task"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Task",
                            a: "Task"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Task",
                                a: "Task"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "Task",
                                    a: "Task"
                                })),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                        c: _List_fromArray([
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                        ]),
                                        b: "Task",
                                        a: "Task"
                                    })),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                        c: _List_fromArray([
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "result", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                        ]),
                                        b: "Task",
                                        a: "Task"
                                    }))
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("mapError", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "y", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Task",
                        a: "Task"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "y", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Task",
                        a: "Task"
                    }))
                }))
            }))),
            _Utils_Tuple2("onError", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "y", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Task",
                        a: "Task"
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Task",
                        a: "Task"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "y", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Task",
                        a: "Task"
                    }))
                }))
            }))),
            _Utils_Tuple2("perform", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Never" })),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Task",
                        a: "Task"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Platform.Cmd",
                        a: "Cmd"
                    }))
                }))
            }))),
            _Utils_Tuple2("sequence", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Task",
                            a: "Task"
                        }))
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "List",
                            a: "List"
                        }))
                    ]),
                    b: "Task",
                    a: "Task"
                }))
            }))),
            _Utils_Tuple2("succeed", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Task",
                    a: "Task"
                }))
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Task", {
                o: _List_fromArray(["x", "a"]),
                $7: $elm$core$Maybe$Nothing,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Platform",
                    a: "Task"
                }))
            })
        ]))
    }),
    _Utils_Tuple2("Tuple", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("first", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                    s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
            }))),
            _Utils_Tuple2("mapBoth", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "y", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                            s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                            s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "y", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("mapFirst", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                        s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                        s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                }))
            }))),
            _Utils_Tuple2("mapSecond", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "y", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                        s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                        s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "y", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                }))
            }))),
            _Utils_Tuple2("pair", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                        s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                }))
            }))),
            _Utils_Tuple2("second", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                    s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    })
]));
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$elmCoreTypes = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$elmCoreTypesGeneratedFromDocsJson;
var $author$project$ElmSyntaxToRust$elmExplorationsLinearAlgebraTypes = $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
    _Utils_Tuple2("Math.Matrix4", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Mat4", {
                o: _List_Nil,
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            })
        ])),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("fromRecord", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord($miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
                    _Utils_Tuple2("m11", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m12", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m13", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m14", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m21", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m22", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m23", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m24", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m31", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m32", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m33", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m34", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m41", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m42", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m43", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m44", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })))
                ])))),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" }))
            }))),
            _Utils_Tuple2("identity", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" }))),
            _Utils_Tuple2("inverse", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" }))
                    ]),
                    b: "Maybe",
                    a: "Maybe"
                }))
            }))),
            _Utils_Tuple2("inverseOrthonormal", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" }))
            }))),
            _Utils_Tuple2("makeBasis", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" }))
                    }))
                }))
            }))),
            _Utils_Tuple2("makeFrustum", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" }))
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("makeLookAt", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" }))
                    }))
                }))
            }))),
            _Utils_Tuple2("makeOrtho", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" }))
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("makeOrtho2D", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("makePerspective", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("makeRotate", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" }))
                }))
            }))),
            _Utils_Tuple2("makeScale", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" }))
            }))),
            _Utils_Tuple2("makeScale3", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" }))
                    }))
                }))
            }))),
            _Utils_Tuple2("makeTranslate", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" }))
            }))),
            _Utils_Tuple2("makeTranslate3", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" }))
                    }))
                }))
            }))),
            _Utils_Tuple2("mul", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" }))
                }))
            }))),
            _Utils_Tuple2("mulAffine", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" }))
                }))
            }))),
            _Utils_Tuple2("rotate", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" }))
                    }))
                }))
            }))),
            _Utils_Tuple2("scale", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" }))
                }))
            }))),
            _Utils_Tuple2("scale3", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("toRecord", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord($miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
                    _Utils_Tuple2("m11", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m12", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m13", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m14", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m21", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m22", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m23", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m24", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m31", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m32", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m33", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m34", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m41", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m42", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m43", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("m44", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })))
                ]))))
            }))),
            _Utils_Tuple2("transform", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" }))
                }))
            }))),
            _Utils_Tuple2("translate", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" }))
                }))
            }))),
            _Utils_Tuple2("translate3", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("transpose", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Matrix4", a: "Mat4" }))
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    }),
    _Utils_Tuple2("Math.Vector2", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Vec2", {
                o: _List_Nil,
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            })
        ])),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("add", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" }))
                }))
            }))),
            _Utils_Tuple2("direction", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" }))
                }))
            }))),
            _Utils_Tuple2("distance", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
                }))
            }))),
            _Utils_Tuple2("distanceSquared", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
                }))
            }))),
            _Utils_Tuple2("dot", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
                }))
            }))),
            _Utils_Tuple2("fromRecord", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord($miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
                    _Utils_Tuple2("x", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("y", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })))
                ])))),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" }))
            }))),
            _Utils_Tuple2("getX", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("getY", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("length", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("lengthSquared", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("negate", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" }))
            }))),
            _Utils_Tuple2("normalize", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" }))
            }))),
            _Utils_Tuple2("scale", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" }))
                }))
            }))),
            _Utils_Tuple2("setX", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" }))
                }))
            }))),
            _Utils_Tuple2("setY", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" }))
                }))
            }))),
            _Utils_Tuple2("sub", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" }))
                }))
            }))),
            _Utils_Tuple2("toRecord", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord($miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
                    _Utils_Tuple2("x", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("y", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })))
                ]))))
            }))),
            _Utils_Tuple2("vec2", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector2", a: "Vec2" }))
                }))
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    }),
    _Utils_Tuple2("Math.Vector3", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Vec3", {
                o: _List_Nil,
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            })
        ])),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("add", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" }))
                }))
            }))),
            _Utils_Tuple2("cross", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" }))
                }))
            }))),
            _Utils_Tuple2("direction", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" }))
                }))
            }))),
            _Utils_Tuple2("distance", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
                }))
            }))),
            _Utils_Tuple2("distanceSquared", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
                }))
            }))),
            _Utils_Tuple2("dot", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
                }))
            }))),
            _Utils_Tuple2("fromRecord", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord($miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
                    _Utils_Tuple2("x", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("y", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("z", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })))
                ])))),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" }))
            }))),
            _Utils_Tuple2("getX", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("getY", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("getZ", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("i", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" }))),
            _Utils_Tuple2("j", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" }))),
            _Utils_Tuple2("k", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" }))),
            _Utils_Tuple2("length", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("lengthSquared", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("negate", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" }))
            }))),
            _Utils_Tuple2("normalize", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" }))
            }))),
            _Utils_Tuple2("scale", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" }))
                }))
            }))),
            _Utils_Tuple2("setX", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" }))
                }))
            }))),
            _Utils_Tuple2("setY", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" }))
                }))
            }))),
            _Utils_Tuple2("setZ", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" }))
                }))
            }))),
            _Utils_Tuple2("sub", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" }))
                }))
            }))),
            _Utils_Tuple2("toRecord", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord($miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
                    _Utils_Tuple2("x", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("y", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("z", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })))
                ]))))
            }))),
            _Utils_Tuple2("vec3", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector3", a: "Vec3" }))
                    }))
                }))
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    }),
    _Utils_Tuple2("Math.Vector4", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Vec4", {
                o: _List_Nil,
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            })
        ])),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("add", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" }))
                }))
            }))),
            _Utils_Tuple2("direction", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" }))
                }))
            }))),
            _Utils_Tuple2("distance", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
                }))
            }))),
            _Utils_Tuple2("distanceSquared", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
                }))
            }))),
            _Utils_Tuple2("dot", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
                }))
            }))),
            _Utils_Tuple2("fromRecord", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord($miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
                    _Utils_Tuple2("w", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("x", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("y", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("z", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })))
                ])))),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" }))
            }))),
            _Utils_Tuple2("getW", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("getX", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("getY", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("getZ", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("length", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("lengthSquared", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
            }))),
            _Utils_Tuple2("negate", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" }))
            }))),
            _Utils_Tuple2("normalize", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" }))
            }))),
            _Utils_Tuple2("scale", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" }))
                }))
            }))),
            _Utils_Tuple2("setW", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" }))
                }))
            }))),
            _Utils_Tuple2("setX", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" }))
                }))
            }))),
            _Utils_Tuple2("setY", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" }))
                }))
            }))),
            _Utils_Tuple2("setZ", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" }))
                }))
            }))),
            _Utils_Tuple2("sub", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" }))
                }))
            }))),
            _Utils_Tuple2("toRecord", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord($miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
                    _Utils_Tuple2("w", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("x", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("y", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))),
                    _Utils_Tuple2("z", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })))
                ]))))
            }))),
            _Utils_Tuple2("vec4", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Math.Vector4", a: "Vec4" }))
                        }))
                    }))
                }))
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    })
]));
var $author$project$ElmSyntaxToRust$elmJsonTypes = $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
    _Utils_Tuple2("Json.Decode", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Decoder", {
                o: _List_fromArray(["a"]),
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            }),
            _Utils_Tuple2("Error", {
                o: _List_Nil,
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
                    _Utils_Tuple2("Field", _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Decode", a: "Error" }))
                    ])),
                    _Utils_Tuple2("Index", _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Decode", a: "Error" }))
                    ])),
                    _Utils_Tuple2("OneOf", _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Decode", a: "Error" }))
                            ]),
                            b: "List",
                            a: "List"
                        }))
                    ])),
                    _Utils_Tuple2("Failure", _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Decode", a: "Value" }))
                    ]))
                ]))
            })
        ])),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("andThen", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Json.Decode",
                        a: "Decoder"
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Json.Decode",
                        a: "Decoder"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Json.Decode",
                        a: "Decoder"
                    }))
                }))
            }))),
            _Utils_Tuple2("array", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Json.Decode",
                    a: "Decoder"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Array",
                            a: "Array"
                        }))
                    ]),
                    b: "Json.Decode",
                    a: "Decoder"
                }))
            }))),
            _Utils_Tuple2("at", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Json.Decode",
                        a: "Decoder"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Json.Decode",
                        a: "Decoder"
                    }))
                }))
            }))),
            _Utils_Tuple2("bool", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                c: _List_fromArray([
                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                ]),
                b: "Json.Decode",
                a: "Decoder"
            }))),
            _Utils_Tuple2("decodeString", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Json.Decode",
                    a: "Decoder"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Decode", a: "Error" })),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Result",
                        a: "Result"
                    }))
                }))
            }))),
            _Utils_Tuple2("decodeValue", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Json.Decode",
                    a: "Decoder"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Decode", a: "Value" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Decode", a: "Error" })),
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Result",
                        a: "Result"
                    }))
                }))
            }))),
            _Utils_Tuple2("dict", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Json.Decode",
                    a: "Decoder"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Dict",
                            a: "Dict"
                        }))
                    ]),
                    b: "Json.Decode",
                    a: "Decoder"
                }))
            }))),
            _Utils_Tuple2("errorToString", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Decode", a: "Error" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
            }))),
            _Utils_Tuple2("fail", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Json.Decode",
                    a: "Decoder"
                }))
            }))),
            _Utils_Tuple2("field", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Json.Decode",
                        a: "Decoder"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Json.Decode",
                        a: "Decoder"
                    }))
                }))
            }))),
            _Utils_Tuple2("float", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                c: _List_fromArray([
                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
                ]),
                b: "Json.Decode",
                a: "Decoder"
            }))),
            _Utils_Tuple2("index", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Json.Decode",
                        a: "Decoder"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Json.Decode",
                        a: "Decoder"
                    }))
                }))
            }))),
            _Utils_Tuple2("int", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                c: _List_fromArray([
                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                ]),
                b: "Json.Decode",
                a: "Decoder"
            }))),
            _Utils_Tuple2("keyValuePairs", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Json.Decode",
                    a: "Decoder"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                                    s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                                    t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                }))
                            ]),
                            b: "List",
                            a: "List"
                        }))
                    ]),
                    b: "Json.Decode",
                    a: "Decoder"
                }))
            }))),
            _Utils_Tuple2("lazy", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Json.Decode",
                        a: "Decoder"
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Json.Decode",
                    a: "Decoder"
                }))
            }))),
            _Utils_Tuple2("list", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Json.Decode",
                    a: "Decoder"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "List",
                            a: "List"
                        }))
                    ]),
                    b: "Json.Decode",
                    a: "Decoder"
                }))
            }))),
            _Utils_Tuple2("map", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Json.Decode",
                        a: "Decoder"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Json.Decode",
                        a: "Decoder"
                    }))
                }))
            }))),
            _Utils_Tuple2("map2", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Json.Decode",
                        a: "Decoder"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Json.Decode",
                            a: "Decoder"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Json.Decode",
                            a: "Decoder"
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map3", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Json.Decode",
                        a: "Decoder"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Json.Decode",
                            a: "Decoder"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Json.Decode",
                                a: "Decoder"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Json.Decode",
                                a: "Decoder"
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map4", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            }))
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Json.Decode",
                        a: "Decoder"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Json.Decode",
                            a: "Decoder"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Json.Decode",
                                a: "Decoder"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "Json.Decode",
                                    a: "Decoder"
                                })),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "Json.Decode",
                                    a: "Decoder"
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map5", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                }))
                            }))
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Json.Decode",
                        a: "Decoder"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Json.Decode",
                            a: "Decoder"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Json.Decode",
                                a: "Decoder"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "Json.Decode",
                                    a: "Decoder"
                                })),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                        c: _List_fromArray([
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                        ]),
                                        b: "Json.Decode",
                                        a: "Decoder"
                                    })),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                        c: _List_fromArray([
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                        ]),
                                        b: "Json.Decode",
                                        a: "Decoder"
                                    }))
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map6", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "f", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    }))
                                }))
                            }))
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Json.Decode",
                        a: "Decoder"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Json.Decode",
                            a: "Decoder"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Json.Decode",
                                a: "Decoder"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "Json.Decode",
                                    a: "Decoder"
                                })),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                        c: _List_fromArray([
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                        ]),
                                        b: "Json.Decode",
                                        a: "Decoder"
                                    })),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                            c: _List_fromArray([
                                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "f", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                            ]),
                                            b: "Json.Decode",
                                            a: "Decoder"
                                        })),
                                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                            c: _List_fromArray([
                                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                            ]),
                                            b: "Json.Decode",
                                            a: "Decoder"
                                        }))
                                    }))
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map7", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "f", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "g", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                        }))
                                    }))
                                }))
                            }))
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Json.Decode",
                        a: "Decoder"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Json.Decode",
                            a: "Decoder"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Json.Decode",
                                a: "Decoder"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "Json.Decode",
                                    a: "Decoder"
                                })),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                        c: _List_fromArray([
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                        ]),
                                        b: "Json.Decode",
                                        a: "Decoder"
                                    })),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                            c: _List_fromArray([
                                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "f", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                            ]),
                                            b: "Json.Decode",
                                            a: "Decoder"
                                        })),
                                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                                c: _List_fromArray([
                                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "g", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                                ]),
                                                b: "Json.Decode",
                                                a: "Decoder"
                                            })),
                                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                                c: _List_fromArray([
                                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                                ]),
                                                b: "Json.Decode",
                                                a: "Decoder"
                                            }))
                                        }))
                                    }))
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map8", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "f", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "g", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "h", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                            }))
                                        }))
                                    }))
                                }))
                            }))
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Json.Decode",
                        a: "Decoder"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Json.Decode",
                            a: "Decoder"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Json.Decode",
                                a: "Decoder"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "Json.Decode",
                                    a: "Decoder"
                                })),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                        c: _List_fromArray([
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                        ]),
                                        b: "Json.Decode",
                                        a: "Decoder"
                                    })),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                            c: _List_fromArray([
                                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "f", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                            ]),
                                            b: "Json.Decode",
                                            a: "Decoder"
                                        })),
                                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                                c: _List_fromArray([
                                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "g", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                                ]),
                                                b: "Json.Decode",
                                                a: "Decoder"
                                            })),
                                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                                    c: _List_fromArray([
                                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "h", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                                    ]),
                                                    b: "Json.Decode",
                                                    a: "Decoder"
                                                })),
                                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                                    c: _List_fromArray([
                                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                                    ]),
                                                    b: "Json.Decode",
                                                    a: "Decoder"
                                                }))
                                            }))
                                        }))
                                    }))
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("maybe", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Json.Decode",
                    a: "Decoder"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Maybe",
                            a: "Maybe"
                        }))
                    ]),
                    b: "Json.Decode",
                    a: "Decoder"
                }))
            }))),
            _Utils_Tuple2("null", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Json.Decode",
                    a: "Decoder"
                }))
            }))),
            _Utils_Tuple2("nullable", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Json.Decode",
                    a: "Decoder"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Maybe",
                            a: "Maybe"
                        }))
                    ]),
                    b: "Json.Decode",
                    a: "Decoder"
                }))
            }))),
            _Utils_Tuple2("oneOf", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Json.Decode",
                            a: "Decoder"
                        }))
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Json.Decode",
                    a: "Decoder"
                }))
            }))),
            _Utils_Tuple2("oneOrMore", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "List",
                            a: "List"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Json.Decode",
                        a: "Decoder"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "value", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Json.Decode",
                        a: "Decoder"
                    }))
                }))
            }))),
            _Utils_Tuple2("string", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                c: _List_fromArray([
                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                ]),
                b: "Json.Decode",
                a: "Decoder"
            }))),
            _Utils_Tuple2("succeed", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Json.Decode",
                    a: "Decoder"
                }))
            }))),
            _Utils_Tuple2("value", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                c: _List_fromArray([
                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Decode", a: "Value" }))
                ]),
                b: "Json.Decode",
                a: "Decoder"
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Value", {
                o: _List_Nil,
                $7: $elm$core$Maybe$Nothing,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Encode", a: "Value" }))
            })
        ]))
    }),
    _Utils_Tuple2("Json.Encode", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Value", {
                o: _List_Nil,
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            })
        ])),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("array", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Encode", a: "Value" }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Array",
                        a: "Array"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Encode", a: "Value" }))
                }))
            }))),
            _Utils_Tuple2("bool", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Encode", a: "Value" }))
            }))),
            _Utils_Tuple2("dict", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "k", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Encode", a: "Value" }))
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "k", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "v", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Dict",
                            a: "Dict"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Encode", a: "Value" }))
                    }))
                }))
            }))),
            _Utils_Tuple2("encode", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Encode", a: "Value" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                }))
            }))),
            _Utils_Tuple2("float", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Encode", a: "Value" }))
            }))),
            _Utils_Tuple2("int", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Encode", a: "Value" }))
            }))),
            _Utils_Tuple2("list", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Encode", a: "Value" }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Encode", a: "Value" }))
                }))
            }))),
            _Utils_Tuple2("null", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Encode", a: "Value" }))),
            _Utils_Tuple2("object", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                            s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                            t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Encode", a: "Value" }))
                        }))
                    ]),
                    b: "List",
                    a: "List"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Encode", a: "Value" }))
            }))),
            _Utils_Tuple2("set", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Encode", a: "Value" }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Set",
                        a: "Set"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Encode", a: "Value" }))
                }))
            }))),
            _Utils_Tuple2("string", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Encode", a: "Value" }))
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    })
]));
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple = function (a) {
    return { $: 3, a: a };
};
var $author$project$ElmSyntaxToRust$typeNotVariableBasicsInt = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" });
var $author$project$ElmSyntaxToRust$inferredTypeBasicsInt = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($author$project$ElmSyntaxToRust$typeNotVariableBasicsInt);
var $author$project$ElmSyntaxToRust$inferredTypeFunctionCreate_fn = function (inputs, output) {
    if (!inputs.b) {
        return output;
    }
    else {
        var input = inputs.a;
        var remainingInputs = inputs.b;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
            e: input,
            d: $author$project$ElmSyntaxToRust$inferredTypeFunctionCreate_fn(remainingInputs, output)
        }));
    }
}, $author$project$ElmSyntaxToRust$inferredTypeFunctionCreate = F2($author$project$ElmSyntaxToRust$inferredTypeFunctionCreate_fn);
var $author$project$ElmSyntaxToRust$typeBool = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }));
var $author$project$ElmSyntaxToRust$typeChar = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" }));
var $author$project$ElmSyntaxToRust$typeString = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }));
var $author$project$ElmSyntaxToRust$elmKernelParserTypes = $miniBill$elm_fast_dict$FastDict$singleton_fn("Elm.Kernel.Parser", {
    aw: $miniBill$elm_fast_dict$FastDict$empty,
    az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
        _Utils_Tuple2("isSubString", $author$project$ElmSyntaxToRust$inferredTypeFunctionCreate_fn(_List_fromArray([$author$project$ElmSyntaxToRust$typeString, $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$typeString]), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple({ s: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, t: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, ak: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt })))),
        _Utils_Tuple2("isSubChar", $author$project$ElmSyntaxToRust$inferredTypeFunctionCreate_fn(_List_fromArray([
            $author$project$ElmSyntaxToRust$inferredTypeFunctionCreate_fn(_List_fromArray([$author$project$ElmSyntaxToRust$typeChar]), $author$project$ElmSyntaxToRust$typeBool),
            $author$project$ElmSyntaxToRust$inferredTypeBasicsInt,
            $author$project$ElmSyntaxToRust$typeString
        ]), $author$project$ElmSyntaxToRust$inferredTypeBasicsInt)),
        _Utils_Tuple2("isAsciiCode", $author$project$ElmSyntaxToRust$inferredTypeFunctionCreate_fn(_List_fromArray([$author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$typeString]), $author$project$ElmSyntaxToRust$typeBool)),
        _Utils_Tuple2("chompBase10", $author$project$ElmSyntaxToRust$inferredTypeFunctionCreate_fn(_List_fromArray([$author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$typeString]), $author$project$ElmSyntaxToRust$inferredTypeBasicsInt)),
        _Utils_Tuple2("consumeBase", $author$project$ElmSyntaxToRust$inferredTypeFunctionCreate_fn(_List_fromArray([$author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$typeString]), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({ s: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, t: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt })))),
        _Utils_Tuple2("consumeBase16", $author$project$ElmSyntaxToRust$inferredTypeFunctionCreate_fn(_List_fromArray([$author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$typeString]), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({ s: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, t: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt })))),
        _Utils_Tuple2("findSubString", $author$project$ElmSyntaxToRust$inferredTypeFunctionCreate_fn(_List_fromArray([$author$project$ElmSyntaxToRust$typeString, $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$typeString]), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple({ s: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, t: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, ak: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt }))))
    ])),
    B: $miniBill$elm_fast_dict$FastDict$empty
});
var $author$project$ElmSyntaxToRust$elmKernelUrlTypes = $miniBill$elm_fast_dict$FastDict$singleton_fn("Elm.Kernel.Url", {
    aw: $miniBill$elm_fast_dict$FastDict$empty,
    az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
        _Utils_Tuple2("percentEncode", $author$project$ElmSyntaxToRust$inferredTypeFunctionCreate_fn(_List_fromArray([$author$project$ElmSyntaxToRust$typeString]), $author$project$ElmSyntaxToRust$typeString)),
        _Utils_Tuple2("percentDecode", $author$project$ElmSyntaxToRust$inferredTypeFunctionCreate_fn(_List_fromArray([$author$project$ElmSyntaxToRust$typeString]), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
            c: _List_fromArray([$author$project$ElmSyntaxToRust$typeString]),
            b: "Maybe",
            a: "Maybe"
        })))),
        _Utils_Tuple2("findSubString", $author$project$ElmSyntaxToRust$inferredTypeFunctionCreate_fn(_List_fromArray([$author$project$ElmSyntaxToRust$typeString, $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, $author$project$ElmSyntaxToRust$typeString]), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple({ s: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, t: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt, ak: $author$project$ElmSyntaxToRust$inferredTypeBasicsInt }))))
    ])),
    B: $miniBill$elm_fast_dict$FastDict$empty
});
var $author$project$ElmSyntaxToRust$typeList = function (elementType) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
        c: _List_fromArray([elementType]),
        b: "List",
        a: "List"
    }));
};
var $author$project$ElmSyntaxToRust$elmKernelVirtualDomTypes = $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
    _Utils_Tuple2("Elm.Kernel.VirtualDom", {
        aw: $miniBill$elm_fast_dict$FastDict$empty,
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("noJavaScriptOrHtmlUri", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: $author$project$ElmSyntaxToRust$typeString, d: $author$project$ElmSyntaxToRust$typeString }))),
            _Utils_Tuple2("noJavaScriptUri", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: $author$project$ElmSyntaxToRust$typeString, d: $author$project$ElmSyntaxToRust$typeString }))),
            _Utils_Tuple2("attribute", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $author$project$ElmSyntaxToRust$typeString,
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $author$project$ElmSyntaxToRust$typeString,
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "VirtualDom",
                        a: "Attribute"
                    }))
                }))
            }))),
            _Utils_Tuple2("attributeNS", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $author$project$ElmSyntaxToRust$typeString,
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $author$project$ElmSyntaxToRust$typeString,
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $author$project$ElmSyntaxToRust$typeString,
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "VirtualDom",
                            a: "Attribute"
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("property", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $author$project$ElmSyntaxToRust$typeString,
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Decode", a: "Value" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "VirtualDom",
                        a: "Attribute"
                    }))
                }))
            }))),
            _Utils_Tuple2("node", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $author$project$ElmSyntaxToRust$typeString,
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $author$project$ElmSyntaxToRust$typeList($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "VirtualDom",
                        a: "Attribute"
                    }))),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $author$project$ElmSyntaxToRust$typeList($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "VirtualDom",
                            a: "Node"
                        }))),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "VirtualDom",
                            a: "Node"
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("nodeNS", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $author$project$ElmSyntaxToRust$typeString,
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $author$project$ElmSyntaxToRust$typeString,
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $author$project$ElmSyntaxToRust$typeList($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "VirtualDom",
                            a: "Attribute"
                        }))),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $author$project$ElmSyntaxToRust$typeList($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "VirtualDom",
                                a: "Node"
                            }))),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "VirtualDom",
                                a: "Node"
                            }))
                        }))
                    }))
                }))
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$empty
    })
]));
var $author$project$ElmSyntaxToRust$elmRandomTypes = $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
    _Utils_Tuple2("Random", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Generator", {
                o: _List_fromArray(["a"]),
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            }),
            _Utils_Tuple2("Seed", {
                o: _List_Nil,
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            })
        ])),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("andThen", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Random",
                        a: "Generator"
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Random",
                        a: "Generator"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Random",
                        a: "Generator"
                    }))
                }))
            }))),
            _Utils_Tuple2("constant", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Random",
                    a: "Generator"
                }))
            }))),
            _Utils_Tuple2("float", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }))
                        ]),
                        b: "Random",
                        a: "Generator"
                    }))
                }))
            }))),
            _Utils_Tuple2("generate", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Random",
                        a: "Generator"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Platform.Cmd",
                        a: "Cmd"
                    }))
                }))
            }))),
            _Utils_Tuple2("independentSeed", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                c: _List_fromArray([
                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Random", a: "Seed" }))
                ]),
                b: "Random",
                a: "Generator"
            }))),
            _Utils_Tuple2("initialSeed", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Random", a: "Seed" }))
            }))),
            _Utils_Tuple2("int", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                        ]),
                        b: "Random",
                        a: "Generator"
                    }))
                }))
            }))),
            _Utils_Tuple2("lazy", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Random",
                        a: "Generator"
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Random",
                    a: "Generator"
                }))
            }))),
            _Utils_Tuple2("list", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Random",
                        a: "Generator"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "List",
                                a: "List"
                            }))
                        ]),
                        b: "Random",
                        a: "Generator"
                    }))
                }))
            }))),
            _Utils_Tuple2("map", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Random",
                        a: "Generator"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Random",
                        a: "Generator"
                    }))
                }))
            }))),
            _Utils_Tuple2("map2", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Random",
                        a: "Generator"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Random",
                            a: "Generator"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Random",
                            a: "Generator"
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map3", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Random",
                        a: "Generator"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Random",
                            a: "Generator"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Random",
                                a: "Generator"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Random",
                                a: "Generator"
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map4", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            }))
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Random",
                        a: "Generator"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Random",
                            a: "Generator"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Random",
                                a: "Generator"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "Random",
                                    a: "Generator"
                                })),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "Random",
                                    a: "Generator"
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map5", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "f", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                }))
                            }))
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Random",
                        a: "Generator"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Random",
                            a: "Generator"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "Random",
                                a: "Generator"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "Random",
                                    a: "Generator"
                                })),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                        c: _List_fromArray([
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                        ]),
                                        b: "Random",
                                        a: "Generator"
                                    })),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                        c: _List_fromArray([
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "f", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                        ]),
                                        b: "Random",
                                        a: "Generator"
                                    }))
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("maxInt", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))),
            _Utils_Tuple2("minInt", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))),
            _Utils_Tuple2("pair", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Random",
                    a: "Generator"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Random",
                        a: "Generator"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                                s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            }))
                        ]),
                        b: "Random",
                        a: "Generator"
                    }))
                }))
            }))),
            _Utils_Tuple2("step", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "Random",
                    a: "Generator"
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Random", a: "Seed" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                        s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Random", a: "Seed" }))
                    }))
                }))
            }))),
            _Utils_Tuple2("uniform", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Random",
                        a: "Generator"
                    }))
                }))
            }))),
            _Utils_Tuple2("weighted", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                    s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                    t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                                s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                                t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            }))
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Random",
                        a: "Generator"
                    }))
                }))
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    })
]));
var $author$project$ElmSyntaxToRust$elmRegexTypes = $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
    _Utils_Tuple2("Regex", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Regex", {
                o: _List_Nil,
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            })
        ])),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("contains", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Regex", a: "Regex" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                }))
            }))),
            _Utils_Tuple2("find", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Regex", a: "Regex" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Regex", a: "Match" }))
                        ]),
                        b: "List",
                        a: "List"
                    }))
                }))
            }))),
            _Utils_Tuple2("findAtMost", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Regex", a: "Regex" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Regex", a: "Match" }))
                            ]),
                            b: "List",
                            a: "List"
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("fromString", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Regex", a: "Regex" }))
                    ]),
                    b: "Maybe",
                    a: "Maybe"
                }))
            }))),
            _Utils_Tuple2("fromStringWith", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Regex", a: "Options" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Regex", a: "Regex" }))
                        ]),
                        b: "Maybe",
                        a: "Maybe"
                    }))
                }))
            }))),
            _Utils_Tuple2("never", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Regex", a: "Regex" }))),
            _Utils_Tuple2("replace", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Regex", a: "Regex" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Regex", a: "Match" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                    }))
                }))
            }))),
            _Utils_Tuple2("replaceAtMost", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Regex", a: "Regex" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Regex", a: "Match" })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("split", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Regex", a: "Regex" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                        ]),
                        b: "List",
                        a: "List"
                    }))
                }))
            }))),
            _Utils_Tuple2("splitAtMost", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Regex", a: "Regex" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                            ]),
                            b: "List",
                            a: "List"
                        }))
                    }))
                }))
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Match", {
                o: _List_Nil,
                $7: $elm$core$Maybe$Just(_List_fromArray(["match", "index", "number", "submatches"])),
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord($miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
                    _Utils_Tuple2("index", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))),
                    _Utils_Tuple2("match", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))),
                    _Utils_Tuple2("number", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))),
                    _Utils_Tuple2("submatches", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                                ]),
                                b: "Maybe",
                                a: "Maybe"
                            }))
                        ]),
                        b: "List",
                        a: "List"
                    })))
                ]))))
            }),
            _Utils_Tuple2("Options", {
                o: _List_Nil,
                $7: $elm$core$Maybe$Just(_List_fromArray(["caseInsensitive", "multiline"])),
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord($miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
                    _Utils_Tuple2("caseInsensitive", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))),
                    _Utils_Tuple2("multiline", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" })))
                ]))))
            })
        ]))
    })
]));
var $author$project$ElmSyntaxToRust$elmTimeTypes = $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
    _Utils_Tuple2("Time", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Month", {
                o: _List_Nil,
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
                    _Utils_Tuple2("Jan", _List_Nil),
                    _Utils_Tuple2("Feb", _List_Nil),
                    _Utils_Tuple2("Mar", _List_Nil),
                    _Utils_Tuple2("Apr", _List_Nil),
                    _Utils_Tuple2("May", _List_Nil),
                    _Utils_Tuple2("Jun", _List_Nil),
                    _Utils_Tuple2("Jul", _List_Nil),
                    _Utils_Tuple2("Aug", _List_Nil),
                    _Utils_Tuple2("Sep", _List_Nil),
                    _Utils_Tuple2("Oct", _List_Nil),
                    _Utils_Tuple2("Nov", _List_Nil),
                    _Utils_Tuple2("Dec", _List_Nil)
                ]))
            }),
            _Utils_Tuple2("Posix", {
                o: _List_Nil,
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            }),
            _Utils_Tuple2("Weekday", {
                o: _List_Nil,
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
                    _Utils_Tuple2("Mon", _List_Nil),
                    _Utils_Tuple2("Tue", _List_Nil),
                    _Utils_Tuple2("Wed", _List_Nil),
                    _Utils_Tuple2("Thu", _List_Nil),
                    _Utils_Tuple2("Fri", _List_Nil),
                    _Utils_Tuple2("Sat", _List_Nil),
                    _Utils_Tuple2("Sun", _List_Nil)
                ]))
            }),
            _Utils_Tuple2("Zone", {
                o: _List_Nil,
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            }),
            _Utils_Tuple2("ZoneName", {
                o: _List_Nil,
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
                    _Utils_Tuple2("Name", _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }))
                    ])),
                    _Utils_Tuple2("Offset", _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                    ]))
                ]))
            })
        ])),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("customZone", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord($miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
                                _Utils_Tuple2("offset", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))),
                                _Utils_Tuple2("start", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })))
                            ]))))
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Zone" }))
                }))
            }))),
            _Utils_Tuple2("every", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Posix" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "Platform.Sub",
                        a: "Sub"
                    }))
                }))
            }))),
            _Utils_Tuple2("getZoneName", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                c: _List_fromArray([
                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "ZoneName" }))
                ]),
                b: "Task",
                a: "Task"
            }))),
            _Utils_Tuple2("here", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                c: _List_fromArray([
                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Zone" }))
                ]),
                b: "Task",
                a: "Task"
            }))),
            _Utils_Tuple2("millisToPosix", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Posix" }))
            }))),
            _Utils_Tuple2("now", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                c: _List_fromArray([
                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "x", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Posix" }))
                ]),
                b: "Task",
                a: "Task"
            }))),
            _Utils_Tuple2("posixToMillis", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Posix" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
            }))),
            _Utils_Tuple2("toDay", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Zone" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Posix" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                }))
            }))),
            _Utils_Tuple2("toHour", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Zone" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Posix" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                }))
            }))),
            _Utils_Tuple2("toMillis", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Zone" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Posix" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                }))
            }))),
            _Utils_Tuple2("toMinute", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Zone" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Posix" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                }))
            }))),
            _Utils_Tuple2("toMonth", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Zone" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Posix" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Month" }))
                }))
            }))),
            _Utils_Tuple2("toSecond", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Zone" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Posix" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                }))
            }))),
            _Utils_Tuple2("toWeekday", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Zone" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Posix" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Weekday" }))
                }))
            }))),
            _Utils_Tuple2("toYear", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Zone" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Posix" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }))
                }))
            }))),
            _Utils_Tuple2("utc", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Time", a: "Zone" })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    })
]));
var $author$project$ElmSyntaxToRust$elmVirtualDomTypes = $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
    _Utils_Tuple2("VirtualDom", {
        aw: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("Attribute", {
                o: _List_fromArray(["msg"]),
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            }),
            _Utils_Tuple2("Handler", {
                o: _List_fromArray(["msg"]),
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
                    _Utils_Tuple2("Normal", _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "Json.Decode",
                            a: "Decoder"
                        }))
                    ])),
                    _Utils_Tuple2("MayStopPropagation", _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                                    s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                                }))
                            ]),
                            b: "Json.Decode",
                            a: "Decoder"
                        }))
                    ])),
                    _Utils_Tuple2("MayPreventDefault", _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                                    s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))
                                }))
                            ]),
                            b: "Json.Decode",
                            a: "Decoder"
                        }))
                    ])),
                    _Utils_Tuple2("Custom", _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord($miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
                                    _Utils_Tuple2("message", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })),
                                    _Utils_Tuple2("preventDefault", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" }))),
                                    _Utils_Tuple2("stopPropagation", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Bool" })))
                                ]))))
                            ]),
                            b: "Json.Decode",
                            a: "Decoder"
                        }))
                    ]))
                ]))
            }),
            _Utils_Tuple2("Node", {
                o: _List_fromArray(["msg"]),
                Y: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
            })
        ])),
        az: $miniBill$elm_fast_dict$FastDict$fromList(_List_fromArray([
            _Utils_Tuple2("attribute", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "VirtualDom",
                        a: "Attribute"
                    }))
                }))
            }))),
            _Utils_Tuple2("attributeNS", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "VirtualDom",
                            a: "Attribute"
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("keyedNode", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "VirtualDom",
                                a: "Attribute"
                            }))
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                                    s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                                    t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                        c: _List_fromArray([
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                        ]),
                                        b: "VirtualDom",
                                        a: "Node"
                                    }))
                                }))
                            ]),
                            b: "List",
                            a: "List"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "VirtualDom",
                            a: "Node"
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("keyedNodeNS", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "VirtualDom",
                                    a: "Attribute"
                                }))
                            ]),
                            b: "List",
                            a: "List"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                                        s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                                        t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                            c: _List_fromArray([
                                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                            ]),
                                            b: "VirtualDom",
                                            a: "Node"
                                        }))
                                    }))
                                ]),
                                b: "List",
                                a: "List"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "VirtualDom",
                                a: "Node"
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("lazy", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "VirtualDom",
                        a: "Node"
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "VirtualDom",
                        a: "Node"
                    }))
                }))
            }))),
            _Utils_Tuple2("lazy2", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "VirtualDom",
                            a: "Node"
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "VirtualDom",
                            a: "Node"
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("lazy3", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "VirtualDom",
                                a: "Node"
                            }))
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "VirtualDom",
                                a: "Node"
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("lazy4", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "VirtualDom",
                                    a: "Node"
                                }))
                            }))
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "VirtualDom",
                                    a: "Node"
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("lazy5", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                        c: _List_fromArray([
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                        ]),
                                        b: "VirtualDom",
                                        a: "Node"
                                    }))
                                }))
                            }))
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                        c: _List_fromArray([
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                        ]),
                                        b: "VirtualDom",
                                        a: "Node"
                                    }))
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("lazy6", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "f", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                            c: _List_fromArray([
                                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                            ]),
                                            b: "VirtualDom",
                                            a: "Node"
                                        }))
                                    }))
                                }))
                            }))
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "f", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                            c: _List_fromArray([
                                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                            ]),
                                            b: "VirtualDom",
                                            a: "Node"
                                        }))
                                    }))
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("lazy7", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "f", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "g", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                                c: _List_fromArray([
                                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                                ]),
                                                b: "VirtualDom",
                                                a: "Node"
                                            }))
                                        }))
                                    }))
                                }))
                            }))
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "f", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "g", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                                c: _List_fromArray([
                                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                                ]),
                                                b: "VirtualDom",
                                                a: "Node"
                                            }))
                                        }))
                                    }))
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("lazy8", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "f", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "g", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "h", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                                    c: _List_fromArray([
                                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                                    ]),
                                                    b: "VirtualDom",
                                                    a: "Node"
                                                }))
                                            }))
                                        }))
                                    }))
                                }))
                            }))
                        }))
                    }))
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "d", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "e", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "f", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "g", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "h", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                                    c: _List_fromArray([
                                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                                    ]),
                                                    b: "VirtualDom",
                                                    a: "Node"
                                                }))
                                            }))
                                        }))
                                    }))
                                }))
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("map", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "VirtualDom",
                        a: "Node"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "VirtualDom",
                        a: "Node"
                    }))
                }))
            }))),
            _Utils_Tuple2("mapAttribute", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "VirtualDom",
                        a: "Attribute"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "VirtualDom",
                        a: "Attribute"
                    }))
                }))
            }))),
            _Utils_Tuple2("node", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "VirtualDom",
                                a: "Attribute"
                            }))
                        ]),
                        b: "List",
                        a: "List"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "VirtualDom",
                                    a: "Node"
                                }))
                            ]),
                            b: "List",
                            a: "List"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                            ]),
                            b: "VirtualDom",
                            a: "Node"
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("nodeNS", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                            c: _List_fromArray([
                                $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                    c: _List_fromArray([
                                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                    ]),
                                    b: "VirtualDom",
                                    a: "Attribute"
                                }))
                            ]),
                            b: "List",
                            a: "List"
                        })),
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                        c: _List_fromArray([
                                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                        ]),
                                        b: "VirtualDom",
                                        a: "Node"
                                    }))
                                ]),
                                b: "List",
                                a: "List"
                            })),
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: _List_fromArray([
                                    $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                                ]),
                                b: "VirtualDom",
                                a: "Node"
                            }))
                        }))
                    }))
                }))
            }))),
            _Utils_Tuple2("on", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "VirtualDom",
                        a: "Handler"
                    })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "VirtualDom",
                        a: "Attribute"
                    }))
                }))
            }))),
            _Utils_Tuple2("property", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Json.Decode", a: "Value" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "VirtualDom",
                        a: "Attribute"
                    }))
                }))
            }))),
            _Utils_Tuple2("style", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                    d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                        c: _List_fromArray([
                            $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                        ]),
                        b: "VirtualDom",
                        a: "Attribute"
                    }))
                }))
            }))),
            _Utils_Tuple2("text", $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" })),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                    c: _List_fromArray([
                        $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "msg", f: $stil4m$elm_syntax$Elm$Syntax$Range$empty })
                    ]),
                    b: "VirtualDom",
                    a: "Node"
                }))
            })))
        ])),
        B: $miniBill$elm_fast_dict$FastDict$fromList(_List_Nil)
    })
]));
var $author$project$ElmSyntaxToRust$baseElmDeclarationTypes = $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$elmKernelUrlTypes, $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$elmKernelParserTypes, $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$elmExplorationsLinearAlgebraTypes, $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$elmTimeTypes, $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$elmRegexTypes, $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$elmRandomTypes, $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$elmKernelVirtualDomTypes, $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$elmVirtualDomTypes, $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$elmBytesTypes, $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$elmJsonTypes, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$elmCoreTypes))))))))));
var $author$project$ElmSyntaxToRust$RustTypeConstruct = function (a) {
    return { $: 0, a: a };
};
var $author$project$ElmSyntaxToRust$RustTypeFunction = function (a) {
    return { $: 4, a: a };
};
var $author$project$ElmSyntaxToRust$generatedRecordTypeName = function (rustFieldNames) {
    return "Generated_" + $elm$core$String$join_fn("_", rustFieldNames);
};
var $miniBill$elm_fast_dict$FastDict$getInner_fn = function (targetKey, dict) {
    getInner: while (true) {
        if (dict.$ === 1) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            var _v1 = _Utils_compare_fn(targetKey, key);
            switch (_v1) {
                case 0:
                    var $temp$targetKey = targetKey, $temp$dict = left;
                    targetKey = $temp$targetKey;
                    dict = $temp$dict;
                    continue getInner;
                case 1:
                    return $elm$core$Maybe$Just(value);
                default:
                    var $temp$targetKey = targetKey, $temp$dict = right;
                    targetKey = $temp$targetKey;
                    dict = $temp$dict;
                    continue getInner;
            }
        }
    }
}, $miniBill$elm_fast_dict$FastDict$getInner = F2($miniBill$elm_fast_dict$FastDict$getInner_fn);
var $miniBill$elm_fast_dict$FastDict$get_fn = function (targetKey, _v0) {
    var dict = _v0.b;
    return $miniBill$elm_fast_dict$FastDict$getInner_fn(targetKey, dict);
}, $miniBill$elm_fast_dict$FastDict$get = F2($miniBill$elm_fast_dict$FastDict$get_fn);
var $author$project$ElmSyntaxToRust$inferredTypeConstructToFunction_fn = function (typeAliasesInModule, inferredTypeConstruct) {
    var _v2 = $elm$core$Maybe$andThen_fn(function (byName) {
        return $miniBill$elm_fast_dict$FastDict$get_fn(inferredTypeConstruct.a, byName);
    }, typeAliasesInModule(inferredTypeConstruct.b));
    if (_v2.$ === 1) {
        return $elm$core$Maybe$Nothing;
    }
    else {
        var referencedTypeAlias = _v2.a;
        var _v3 = referencedTypeAlias.n;
        if (!_v3.$) {
            var _v4 = inferredTypeConstruct.c;
            if (!_v4.b) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var typeAliasArgument = _v4.a;
                return $author$project$ElmSyntaxToRust$inferredTypeToFunction_fn(typeAliasesInModule, typeAliasArgument);
            }
        }
        else {
            var aliasTypeNotVariable = _v3.a;
            return $author$project$ElmSyntaxToRust$inferredTypeNotVariableToFunction_fn(typeAliasesInModule, aliasTypeNotVariable);
        }
    }
}, $author$project$ElmSyntaxToRust$inferredTypeConstructToFunction = F2($author$project$ElmSyntaxToRust$inferredTypeConstructToFunction_fn);
var $author$project$ElmSyntaxToRust$inferredTypeNotVariableToFunction_fn = function (typeAliasesInModule, inferredTypeNotFunction) {
    switch (inferredTypeNotFunction.$) {
        case 0:
            return $elm$core$Maybe$Nothing;
        case 2:
            return $elm$core$Maybe$Nothing;
        case 3:
            return $elm$core$Maybe$Nothing;
        case 4:
            return $elm$core$Maybe$Nothing;
        case 5:
            return $elm$core$Maybe$Nothing;
        case 6:
            var inferredTypeFunction = inferredTypeNotFunction.a;
            return $elm$core$Maybe$Just(inferredTypeFunction);
        default:
            var inferredTypeConstruct = inferredTypeNotFunction.a;
            return $author$project$ElmSyntaxToRust$inferredTypeConstructToFunction_fn(typeAliasesInModule, inferredTypeConstruct);
    }
}, $author$project$ElmSyntaxToRust$inferredTypeNotVariableToFunction = F2($author$project$ElmSyntaxToRust$inferredTypeNotVariableToFunction_fn);
var $author$project$ElmSyntaxToRust$inferredTypeToFunction_fn = function (typeAliasesInModule, inferredType) {
    if (!inferredType.$) {
        return $elm$core$Maybe$Nothing;
    }
    else {
        var aliasTypeNotVariable = inferredType.a;
        return $author$project$ElmSyntaxToRust$inferredTypeNotVariableToFunction_fn(typeAliasesInModule, aliasTypeNotVariable);
    }
}, $author$project$ElmSyntaxToRust$inferredTypeToFunction = F2($author$project$ElmSyntaxToRust$inferredTypeToFunction_fn);
var $miniBill$elm_fast_dict$FastDict$keys = function (dict) {
    return $miniBill$elm_fast_dict$FastDict$foldr_fn(F3(function (key, _v0, keyList) {
        return _List_Cons(key, keyList);
    }), _List_Nil, dict);
};
var $elm$core$String$replace_fn = function (before, after, string) {
    return $elm$core$String$join_fn(after, $elm$core$String$split_fn(before, string));
}, $elm$core$String$replace = F3($elm$core$String$replace_fn);
var $author$project$ElmSyntaxToRust$referenceToRustName = function (reference) {
    var _v0 = $elm$core$String$replace_fn(".", "", reference.b);
    if (_v0 === "") {
        return reference.a;
    }
    else {
        var moduleOriginNotEmpty = _v0;
        return moduleOriginNotEmpty + ("_" + reference.a);
    }
};
var $author$project$ElmSyntaxToRust$rustReferenceDouble = { b: $elm$core$Maybe$Nothing, a: "Double" };
var $author$project$ElmSyntaxToRust$rustTypeDouble = $author$project$ElmSyntaxToRust$RustTypeConstruct({ c: _List_Nil, a2: false, b: $author$project$ElmSyntaxToRust$rustReferenceDouble.b, a: $author$project$ElmSyntaxToRust$rustReferenceDouble.a });
var $author$project$ElmSyntaxToRust$rustTypeUnit = $author$project$ElmSyntaxToRust$RustTypeConstruct({ c: _List_Nil, a2: false, b: $elm$core$Maybe$Nothing, a: "Unit" });
var $author$project$ElmSyntaxToRust$justRustReferenceDouble = $elm$core$Maybe$Just($author$project$ElmSyntaxToRust$rustReferenceDouble);
var $author$project$ElmSyntaxToRust$justRustReferenceListList = $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_List" });
var $author$project$ElmSyntaxToRust$justRustReferenceMaybeMaybe = $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Maybe_Maybe" });
var $author$project$ElmSyntaxToRust$justRustReferenceResultResult = $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Result_Result" });
var $author$project$ElmSyntaxToRust$justRustReferenceString = $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String" });
var $author$project$ElmSyntaxToRust$justRustReferenceUnicodeScalar = $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "UnicodeScalar" });
var $author$project$ElmSyntaxToRust$typeConstructReferenceToCoreRust = function (reference) {
    var _v0 = reference.b;
    switch (_v0) {
        case "Basics":
            var _v1 = reference.a;
            switch (_v1) {
                case "Order":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_Order" });
                case "Bool":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Bool" });
                case "Int":
                    return $author$project$ElmSyntaxToRust$justRustReferenceDouble;
                case "Float":
                    return $author$project$ElmSyntaxToRust$justRustReferenceDouble;
                case "Never":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Never" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "String":
            return $author$project$ElmSyntaxToRust$justRustReferenceString;
        case "Char":
            return $author$project$ElmSyntaxToRust$justRustReferenceUnicodeScalar;
        case "List":
            return $author$project$ElmSyntaxToRust$justRustReferenceListList;
        case "Dict":
            return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Dictionary" });
        case "Set":
            return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Set" });
        case "Array":
            return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Array" });
        case "Maybe":
            return $author$project$ElmSyntaxToRust$justRustReferenceMaybeMaybe;
        case "Result":
            return $author$project$ElmSyntaxToRust$justRustReferenceResultResult;
        case "Json.Encode":
            return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonEncode_Value" });
        case "Json.Decode":
            var _v2 = reference.a;
            switch (_v2) {
                case "Value":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_Value" });
                case "Decoder":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_Decoder" });
                case "Error":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_Error" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Regex":
            var _v3 = reference.a;
            switch (_v3) {
                case "Regex":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Regex_Regex" });
                case "Options":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Regex_Options" });
                case "Match":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Regex_Match" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Random":
            var _v4 = reference.a;
            switch (_v4) {
                case "Seed":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Random_Seed" });
                case "Generator":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Random_Generator" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Time":
            var _v5 = reference.a;
            switch (_v5) {
                case "Posix":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Time_Posix" });
                case "Zone":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Time_Zone" });
                case "Month":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Time_Month" });
                case "Weekday":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Time_Weekday" });
                case "Time_ZoneName":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Time_ZoneName" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Bytes":
            var _v6 = reference.a;
            switch (_v6) {
                case "Endianness":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Bytes_Endianness" });
                case "Bytes":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Bytes_Bytes" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Bytes.Decode":
            var _v7 = reference.a;
            switch (_v7) {
                case "Decoder":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesDecode_Decoder" });
                case "Step":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesDecode_Step" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Bytes.Encode":
            return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesEncode_Encoder" });
        case "VirtualDom":
            var _v8 = reference.a;
            switch (_v8) {
                case "Node":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_Node" });
                case "Attribute":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_Attribute" });
                case "Handler":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_Handler" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Math.Vector2":
            var _v9 = reference.a;
            if (_v9 === "Vec2") {
                return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector2_Vec2" });
            }
            else {
                return $elm$core$Maybe$Nothing;
            }
        case "Math.Vector3":
            var _v10 = reference.a;
            if (_v10 === "Vec3") {
                return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_Vec3" });
            }
            else {
                return $elm$core$Maybe$Nothing;
            }
        case "Math.Vector4":
            var _v11 = reference.a;
            if (_v11 === "Vec4") {
                return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector4_Vec4" });
            }
            else {
                return $elm$core$Maybe$Nothing;
            }
        case "Math.Matrix4":
            return $elm$core$Maybe$Nothing;
        case "Platform":
            var _v12 = reference.a;
            if (_v12 === "Program") {
                return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Platform_Program" });
            }
            else {
                return $elm$core$Maybe$Nothing;
            }
        case "Platform.Cmd":
            return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "PlatformCmd_Cmd" });
        case "Platform.Sub":
            return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "PlatformSub_Sub" });
        default:
            return $elm$core$Maybe$Nothing;
    }
};
var $miniBill$elm_fast_dict$FastDict$values = function (dict) {
    return $miniBill$elm_fast_dict$FastDict$foldr_fn(F3(function (_v0, value, valueList) {
        return _List_Cons(value, valueList);
    }), _List_Nil, dict);
};
var $miniBill$elm_fast_dict$FastSet$member_fn = function (key, _v0) {
    var dict = _v0;
    var _v1 = $miniBill$elm_fast_dict$FastDict$get_fn(key, dict);
    if (!_v1.$) {
        return true;
    }
    else {
        return false;
    }
}, $miniBill$elm_fast_dict$FastSet$member = F2($miniBill$elm_fast_dict$FastSet$member_fn);
var $author$project$ElmSyntaxToRust$rustKeywords = $miniBill$elm_fast_dict$FastSet$fromList(_List_fromArray(["associatedtype", "borrowing", "class", "consuming", "deinit", "enum", "extension", "fileprivate", "func", "import", "init", "inout", "internal", "let", "nonisolated", "open", "operator", "private", "precedencegroup", "protocol", "public", "rethrows", "static", "struct", "subscript", "typealias", "var", "break", "case", "catch", "continue", "default", "defer", "do", "else", "fallthrough", "for", "guard", "if", "in", "repeat", "return", "throw", "switch", "where", "while", "Any", "as", "await", "catch", "false", "is", "nil", "rethrows", "self", "Self", "super", "throw", "throws", "true", "try"]));
var $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords = function (variableName) {
    return (_String_endsWith_fn("_", variableName) || $miniBill$elm_fast_dict$FastSet$member_fn(variableName, $author$project$ElmSyntaxToRust$rustKeywords)) ? (variableName + "_") : variableName;
};
var $author$project$ElmSyntaxToRust$typeNotVariable_fn = function (typeAliasesInModule, inferredTypeNotVariable) {
    switch (inferredTypeNotVariable.$) {
        case 0:
            return $author$project$ElmSyntaxToRust$rustTypeUnit;
        case 1:
            var typeConstruct = inferredTypeNotVariable.a;
            var rustArguments = $elm$core$List$map_fn(function (argument) {
                return $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, argument);
            }, typeConstruct.c);
            var _v2 = $author$project$ElmSyntaxToRust$typeConstructReferenceToCoreRust({ b: typeConstruct.b, a: typeConstruct.a });
            if (!_v2.$) {
                var coreRust = _v2.a;
                return $author$project$ElmSyntaxToRust$RustTypeConstruct({ c: rustArguments, a2: false, b: coreRust.b, a: coreRust.a });
            }
            else {
                return $author$project$ElmSyntaxToRust$RustTypeConstruct({
                    c: rustArguments,
                    a2: function () {
                        var _v3 = $author$project$ElmSyntaxToRust$inferredTypeConstructToFunction_fn(typeAliasesInModule, typeConstruct);
                        if (_v3.$ === 1) {
                            return false;
                        }
                        else {
                            return true;
                        }
                    }(),
                    b: $elm$core$Maybe$Nothing,
                    a: $author$project$ElmSyntaxToRust$referenceToRustName({ b: typeConstruct.b, a: typeConstruct.a })
                });
            }
        case 2:
            var typeTuple = inferredTypeNotVariable.a;
            return $author$project$ElmSyntaxToRust$RustTypeConstruct({
                c: _List_fromArray([
                    $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, typeTuple.s),
                    $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, typeTuple.t)
                ]),
                a2: false,
                b: $elm$core$Maybe$Nothing,
                a: "Tuple"
            });
        case 3:
            var typeTriple = inferredTypeNotVariable.a;
            return $author$project$ElmSyntaxToRust$RustTypeConstruct({
                c: _List_fromArray([
                    $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, typeTriple.s),
                    $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, typeTriple.t),
                    $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, typeTriple.ak)
                ]),
                a2: false,
                b: $elm$core$Maybe$Nothing,
                a: "Triple"
            });
        case 4:
            var recordFields = inferredTypeNotVariable.a;
            var rustFields = $miniBill$elm_fast_dict$FastDict$foldr_fn(F3(function (name, valueType, soFar) {
                return $miniBill$elm_fast_dict$FastDict$insert_fn($author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(name), $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, valueType), soFar);
            }), $miniBill$elm_fast_dict$FastDict$empty, recordFields);
            return $author$project$ElmSyntaxToRust$RustTypeConstruct({
                c: $miniBill$elm_fast_dict$FastDict$values(rustFields),
                a2: false,
                b: $elm$core$Maybe$Nothing,
                a: $author$project$ElmSyntaxToRust$generatedRecordTypeName($miniBill$elm_fast_dict$FastDict$keys(rustFields))
            });
        case 6:
            var typeFunction = inferredTypeNotVariable.a;
            return $author$project$ElmSyntaxToRust$RustTypeFunction({
                e: _List_fromArray([
                    $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, typeFunction.e)
                ]),
                d: $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, typeFunction.d)
            });
        default:
            var typeRecordExtension = inferredTypeNotVariable.a;
            var rustFields = $miniBill$elm_fast_dict$FastDict$foldr_fn(F3(function (name, valueType, soFar) {
                return $miniBill$elm_fast_dict$FastDict$insert_fn($author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(name), $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, valueType), soFar);
            }), $miniBill$elm_fast_dict$FastDict$empty, typeRecordExtension.F);
            return $author$project$ElmSyntaxToRust$RustTypeConstruct({
                c: $miniBill$elm_fast_dict$FastDict$values(rustFields),
                a2: false,
                b: $elm$core$Maybe$Nothing,
                a: $author$project$ElmSyntaxToRust$generatedRecordTypeName($miniBill$elm_fast_dict$FastDict$keys(rustFields))
            });
    }
}, $author$project$ElmSyntaxToRust$typeNotVariable = F2($author$project$ElmSyntaxToRust$typeNotVariable_fn);
var $author$project$ElmSyntaxToRust$type__fn = function (typeAliasesInModule, inferredType) {
    if (!inferredType.$) {
        var variable = inferredType.a;
        return _String_startsWith_fn("number", variable.a) ? $author$project$ElmSyntaxToRust$rustTypeDouble : $author$project$ElmSyntaxToRust$RustTypeVariable($author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(variable.a));
    }
    else {
        var inferredTypeNotVariable = inferredType.a;
        return $author$project$ElmSyntaxToRust$typeNotVariable_fn(typeAliasesInModule, inferredTypeNotVariable);
    }
}, $author$project$ElmSyntaxToRust$type_ = F2($author$project$ElmSyntaxToRust$type__fn);
var $author$project$ElmSyntaxToRust$choiceTypeDeclaration_fn = function (typeAliasesInModule, syntaxChoiceType) {
    return {
        a: syntaxChoiceType.a,
        o: $elm$core$List$map_fn($author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords, syntaxChoiceType.o),
        Y: $miniBill$elm_fast_dict$FastDict$map_fn(F2(function (_v0, variantValues) {
            return $elm$core$List$map_fn(function (value) {
                return $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, value);
            }, variantValues);
        }), syntaxChoiceType.Y)
    };
}, $author$project$ElmSyntaxToRust$choiceTypeDeclaration = F2($author$project$ElmSyntaxToRust$choiceTypeDeclaration_fn);
var $author$project$ElmSyntaxToRust$listFoldl2From_fn = function (initialState, aList, bList, reduce) {
    listFoldl2From: while (true) {
        if (!aList.b) {
            return initialState;
        }
        else {
            var aHead = aList.a;
            var aTail = aList.b;
            if (!bList.b) {
                return initialState;
            }
            else {
                var bHead = bList.a;
                var bTail = bList.b;
                var $temp$initialState = A3(reduce, aHead, bHead, initialState), $temp$aList = aTail, $temp$bList = bTail, $temp$reduce = reduce;
                initialState = $temp$initialState;
                aList = $temp$aList;
                bList = $temp$bList;
                reduce = $temp$reduce;
                continue listFoldl2From;
            }
        }
    }
}, $author$project$ElmSyntaxToRust$listFoldl2From_fn_unwrapped = function (initialState, aList, bList, reduce) {
    listFoldl2From: while (true) {
        if (!aList.b) {
            return initialState;
        }
        else {
            var aHead = aList.a;
            var aTail = aList.b;
            if (!bList.b) {
                return initialState;
            }
            else {
                var bHead = bList.a;
                var bTail = bList.b;
                var $temp$initialState = reduce(aHead, bHead, initialState), $temp$aList = aTail, $temp$bList = bTail, $temp$reduce = reduce;
                initialState = $temp$initialState;
                aList = $temp$aList;
                bList = $temp$bList;
                reduce = $temp$reduce;
                continue listFoldl2From;
            }
        }
    }
}, $author$project$ElmSyntaxToRust$listFoldl2From = F4($author$project$ElmSyntaxToRust$listFoldl2From_fn);
var $miniBill$elm_fast_dict$FastDict$toList = function (dict) {
    return $miniBill$elm_fast_dict$FastDict$foldr_fn(F3(function (key, value, list) {
        return _List_Cons(_Utils_Tuple2(key, value), list);
    }), _List_Nil, dict);
};
var $miniBill$elm_fast_dict$FastDict$merge_fn = function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
    var stepState = F3(function (rKey, rValue, _v0) {
        stepState: while (true) {
            var list = _v0.a;
            var result = _v0.b;
            if (!list.b) {
                return _Utils_Tuple2(list, A3(rightStep, rKey, rValue, result));
            }
            else {
                var _v2 = list.a;
                var lKey = _v2.a;
                var lValue = _v2.b;
                var rest = list.b;
                if (_Utils_cmp(lKey, rKey) < 0) {
                    var $temp$rKey = rKey, $temp$rValue = rValue, $temp$_v0 = _Utils_Tuple2(rest, A3(leftStep, lKey, lValue, result));
                    rKey = $temp$rKey;
                    rValue = $temp$rValue;
                    _v0 = $temp$_v0;
                    continue stepState;
                }
                else {
                    if (_Utils_cmp(lKey, rKey) > 0) {
                        return _Utils_Tuple2(list, A3(rightStep, rKey, rValue, result));
                    }
                    else {
                        return _Utils_Tuple2(rest, A4(bothStep, lKey, lValue, rValue, result));
                    }
                }
            }
        }
    });
    var _v3 = $miniBill$elm_fast_dict$FastDict$foldl_fn(stepState, _Utils_Tuple2($miniBill$elm_fast_dict$FastDict$toList(leftDict), initialResult), rightDict);
    var leftovers = _v3.a;
    var intermediateResult = _v3.b;
    return $elm$core$List$foldl_fn_unwrapped(function (_v4, result) {
        var k = _v4.a;
        var v = _v4.b;
        return A3(leftStep, k, v, result);
    }, intermediateResult, leftovers);
}, $miniBill$elm_fast_dict$FastDict$merge = F6($miniBill$elm_fast_dict$FastDict$merge_fn);
var $author$project$ElmSyntaxToRust$syntaxTypeToNotParenthesized = function (syntaxType) {
    syntaxTypeToNotParenthesized: while (true) {
        switch (syntaxType.$) {
            case 2:
                return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit;
            case 0:
                return syntaxType;
            case 5:
                return syntaxType;
            case 1:
                return syntaxType;
            case 4:
                return syntaxType;
            case 6:
                return syntaxType;
            default:
                var tupleParts = syntaxType.a;
                if (!tupleParts.b) {
                    return syntaxType;
                }
                else {
                    if (!tupleParts.b.b) {
                        var _v2 = tupleParts.a;
                        var inParens = _v2.b;
                        var $temp$syntaxType = inParens;
                        syntaxType = $temp$syntaxType;
                        continue syntaxTypeToNotParenthesized;
                    }
                    else {
                        var _v3 = tupleParts.b;
                        return syntaxType;
                    }
                }
        }
    }
};
var $author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeNotVariableVariableToSyntaxTypeVariable_fn = function (inferredTypeNotVariable, syntaxType) {
    switch (inferredTypeNotVariable.$) {
        case 0:
            return $miniBill$elm_fast_dict$FastDict$empty;
        case 6:
            var inferredTypeFunction = inferredTypeNotVariable.a;
            switch (syntaxType.$) {
                case 6:
                    var syntaxInput = syntaxType.a;
                    var syntaxOutput = syntaxType.b;
                    return $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable_fn(inferredTypeFunction.e, syntaxInput), $author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable_fn(inferredTypeFunction.d, syntaxOutput));
                case 1:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                case 3:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                case 4:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                case 2:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                case 0:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                default:
                    return $miniBill$elm_fast_dict$FastDict$empty;
            }
        case 2:
            var inferredParts = inferredTypeNotVariable.a;
            switch (syntaxType.$) {
                case 3:
                    var syntaxParts = syntaxType.a;
                    if (!syntaxParts.b) {
                        return $miniBill$elm_fast_dict$FastDict$empty;
                    }
                    else {
                        if (!syntaxParts.b.b) {
                            return $miniBill$elm_fast_dict$FastDict$empty;
                        }
                        else {
                            if (!syntaxParts.b.b.b) {
                                var syntaxPart0 = syntaxParts.a;
                                var _v8 = syntaxParts.b;
                                var syntaxPart1 = _v8.a;
                                return $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable_fn(inferredParts.t, syntaxPart1), $author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable_fn(inferredParts.s, syntaxPart0));
                            }
                            else {
                                var _v9 = syntaxParts.b;
                                var _v10 = _v9.b;
                                return $miniBill$elm_fast_dict$FastDict$empty;
                            }
                        }
                    }
                case 1:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                case 4:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                case 6:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                case 2:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                case 0:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                default:
                    return $miniBill$elm_fast_dict$FastDict$empty;
            }
        case 3:
            var inferredParts = inferredTypeNotVariable.a;
            switch (syntaxType.$) {
                case 3:
                    var syntaxParts = syntaxType.a;
                    if (!syntaxParts.b) {
                        return $miniBill$elm_fast_dict$FastDict$empty;
                    }
                    else {
                        if (!syntaxParts.b.b) {
                            return $miniBill$elm_fast_dict$FastDict$empty;
                        }
                        else {
                            if (!syntaxParts.b.b.b) {
                                var _v15 = syntaxParts.b;
                                return $miniBill$elm_fast_dict$FastDict$empty;
                            }
                            else {
                                if (!syntaxParts.b.b.b.b) {
                                    var syntaxPart0 = syntaxParts.a;
                                    var _v13 = syntaxParts.b;
                                    var syntaxPart1 = _v13.a;
                                    var _v14 = _v13.b;
                                    var syntaxPart2 = _v14.a;
                                    return $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable_fn(inferredParts.ak, syntaxPart2), $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable_fn(inferredParts.t, syntaxPart1), $author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable_fn(inferredParts.s, syntaxPart0)));
                                }
                                else {
                                    var _v16 = syntaxParts.b;
                                    var _v17 = _v16.b;
                                    var _v18 = _v17.b;
                                    return $miniBill$elm_fast_dict$FastDict$empty;
                                }
                            }
                        }
                    }
                case 1:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                case 4:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                case 6:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                case 2:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                case 0:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                default:
                    return $miniBill$elm_fast_dict$FastDict$empty;
            }
        case 1:
            var inferredTypeConstruct = inferredTypeNotVariable.a;
            switch (syntaxType.$) {
                case 1:
                    var syntaxArguments = syntaxType.b;
                    return $author$project$ElmSyntaxToRust$listFoldl2From_fn_unwrapped($miniBill$elm_fast_dict$FastDict$empty, inferredTypeConstruct.c, syntaxArguments, function (inferredArgument, syntaxArgument, soFar) {
                        return $miniBill$elm_fast_dict$FastDict$union_fn(soFar, $author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable_fn(inferredArgument, syntaxArgument));
                    });
                case 3:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                case 4:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                case 6:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                case 2:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                case 0:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                default:
                    return $miniBill$elm_fast_dict$FastDict$empty;
            }
        case 4:
            var inferredFields = inferredTypeNotVariable.a;
            switch (syntaxType.$) {
                case 4:
                    var syntaxFields = syntaxType.a;
                    return $miniBill$elm_fast_dict$FastDict$merge_fn(F3(function (_v21, _v22, soFar) {
                        return soFar;
                    }), F4(function (_v23, inferredFieldValue, syntaxFieldValue, soFar) {
                        return $miniBill$elm_fast_dict$FastDict$union_fn(soFar, $author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable_fn(inferredFieldValue, syntaxFieldValue));
                    }), F3(function (_v24, _v25, soFar) {
                        return soFar;
                    }), inferredFields, $elm$core$List$foldl_fn_unwrapped(function (_v26, soFar) {
                        var _v27 = _v26.b;
                        var _v28 = _v27.a;
                        var fieldName = _v28.b;
                        var fieldValue = _v27.b;
                        return $miniBill$elm_fast_dict$FastDict$insert_fn(fieldName, fieldValue, soFar);
                    }, $miniBill$elm_fast_dict$FastDict$empty, syntaxFields), $miniBill$elm_fast_dict$FastDict$empty);
                case 5:
                    var _v29 = syntaxType.b;
                    var syntaxFields = _v29.b;
                    return $miniBill$elm_fast_dict$FastDict$merge_fn(F3(function (_v30, _v31, soFar) {
                        return soFar;
                    }), F4(function (_v32, inferredFieldValue, syntaxFieldValue, soFar) {
                        return $miniBill$elm_fast_dict$FastDict$union_fn(soFar, $author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable_fn(inferredFieldValue, syntaxFieldValue));
                    }), F3(function (_v33, _v34, soFar) {
                        return soFar;
                    }), inferredFields, $elm$core$List$foldl_fn_unwrapped(function (_v35, soFar) {
                        var _v36 = _v35.b;
                        var _v37 = _v36.a;
                        var fieldName = _v37.b;
                        var fieldValue = _v36.b;
                        return $miniBill$elm_fast_dict$FastDict$insert_fn(fieldName, fieldValue, soFar);
                    }, $miniBill$elm_fast_dict$FastDict$empty, syntaxFields), $miniBill$elm_fast_dict$FastDict$empty);
                case 1:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                case 3:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                case 6:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                case 2:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                default:
                    return $miniBill$elm_fast_dict$FastDict$empty;
            }
        default:
            var inferredTypeRecordExtension = inferredTypeNotVariable.a;
            switch (syntaxType.$) {
                case 5:
                    var _v39 = syntaxType.a;
                    var syntaxRecordVariable = _v39.b;
                    var _v40 = syntaxType.b;
                    var syntaxFields = _v40.b;
                    return $miniBill$elm_fast_dict$FastDict$merge_fn(F3(function (_v41, _v42, soFar) {
                        return soFar;
                    }), F4(function (_v43, inferredFieldValue, syntaxFieldValue, soFar) {
                        return $miniBill$elm_fast_dict$FastDict$union_fn(soFar, $author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable_fn(inferredFieldValue, syntaxFieldValue));
                    }), F3(function (_v44, _v45, soFar) {
                        return soFar;
                    }), inferredTypeRecordExtension.F, $elm$core$List$foldl_fn_unwrapped(function (_v46, soFar) {
                        var _v47 = _v46.b;
                        var _v48 = _v47.a;
                        var fieldName = _v48.b;
                        var fieldValue = _v47.b;
                        return $miniBill$elm_fast_dict$FastDict$insert_fn(fieldName, fieldValue, soFar);
                    }, $miniBill$elm_fast_dict$FastDict$empty, syntaxFields), $miniBill$elm_fast_dict$FastDict$singleton_fn(inferredTypeRecordExtension.V.a, syntaxRecordVariable));
                case 4:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                case 1:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                case 3:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                case 6:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                case 2:
                    return $miniBill$elm_fast_dict$FastDict$empty;
                default:
                    return $miniBill$elm_fast_dict$FastDict$empty;
            }
    }
}, $author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeNotVariableVariableToSyntaxTypeVariable = F2($author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeNotVariableVariableToSyntaxTypeVariable_fn);
var $author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable_fn = function (inferredType, _v0) {
    var syntaxTypePotentiallyParenthesized = _v0.b;
    var syntaxType = $author$project$ElmSyntaxToRust$syntaxTypeToNotParenthesized(syntaxTypePotentiallyParenthesized);
    if (!inferredType.$) {
        var inferredVariable = inferredType.a;
        switch (syntaxType.$) {
            case 2:
                return $miniBill$elm_fast_dict$FastDict$empty;
            case 0:
                var syntaxVariable = syntaxType.a;
                return $miniBill$elm_fast_dict$FastDict$singleton_fn(inferredVariable.a, syntaxVariable);
            case 5:
                var _v3 = syntaxType.a;
                var syntaxRecordVariable = _v3.b;
                return $miniBill$elm_fast_dict$FastDict$singleton_fn(inferredVariable.a, syntaxRecordVariable);
            case 1:
                return $miniBill$elm_fast_dict$FastDict$empty;
            case 3:
                return $miniBill$elm_fast_dict$FastDict$empty;
            case 4:
                return $miniBill$elm_fast_dict$FastDict$empty;
            default:
                return $miniBill$elm_fast_dict$FastDict$empty;
        }
    }
    else {
        var inferredTypeNotVariable = inferredType.a;
        return $author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeNotVariableVariableToSyntaxTypeVariable_fn(inferredTypeNotVariable, syntaxType);
    }
}, $author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable = F2($author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable_fn);
var $elm$core$List$append_fn = function (xs, ys) {
    var tmp = _List_Cons(undefined, _List_Nil);
    var end = tmp;
    for (; xs.b; xs = xs.b) {
        var next = _List_Cons(xs.a, _List_Nil);
        end.b = next;
        end = next;
    }
    end.b = ys;
    return tmp.b;
}, $elm$core$List$append = F2($elm$core$List$append_fn);
var $elm$core$List$concat = function (lists) {
    if (!lists.b) {
        return _List_Nil;
    }
    var tmp = _List_Cons(undefined, _List_Nil);
    var end = tmp;
    for (; lists.b.b; lists = lists.b) {
        var xs = lists.a;
        for (; xs.b; xs = xs.b) {
            var next = _List_Cons(xs.a, _List_Nil);
            end.b = next;
            end = next;
        }
    }
    end.b = lists.a;
    return tmp.b;
};
var $elm$core$List$concatMap_fn = function (f, lists) {
    if (!lists.b) {
        return _List_Nil;
    }
    var tmp = _List_Cons(undefined, _List_Nil);
    var end = tmp;
    for (; lists.b.
        b; lists = lists.b) {
        var xs = f(lists.a);
        for (; xs.b; xs = xs.b) {
            var next = _List_Cons(xs.a, _List_Nil);
            end.b = next;
            end = next;
        }
    }
    end.b = f(lists.a);
    return tmp.b;
}, $elm$core$List$concatMap = F2($elm$core$List$concatMap_fn);
var $author$project$ElmSyntaxToRust$listSingletonFastDictEmpty = _List_fromArray([$miniBill$elm_fast_dict$FastDict$empty]);
var $author$project$ElmSyntaxToRust$fastDictPermutations = function (specializations) {
    return $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (variable, variableSpecializations, soFar) {
        return $elm$core$List$concatMap_fn(function (variableSpecialization) {
            return $elm$core$List$map_fn(function (permutationSoFar) {
                return $miniBill$elm_fast_dict$FastDict$insert_fn(variable, variableSpecialization, permutationSoFar);
            }, soFar);
        }, variableSpecializations);
    }), $author$project$ElmSyntaxToRust$listSingletonFastDictEmpty, specializations);
};
var $elm$core$List$filter_fn = function (f, xs) {
    var tmp = _List_Cons(undefined, _List_Nil);
    var end = tmp;
    for (; xs.b; xs = xs.b) {
        if (f(xs.a)) {
            var next = _List_Cons(xs.a, _List_Nil);
            end.b = next;
            end = next;
        }
    }
    return tmp.
        b;
}, $elm$core$List$filter = F2($elm$core$List$filter_fn);
var $miniBill$elm_fast_dict$FastSet$foldl_fn = function (func, acc, _v0) {
    var set = _v0;
    return $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (v, _v1, iacc) {
        return A2(func, v, iacc);
    }), acc, set);
}, $miniBill$elm_fast_dict$FastSet$foldl_fn_unwrapped = function (func, acc, _v0) {
    var set = _v0;
    return $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (v, _v1, iacc) {
        return func(v, iacc);
    }), acc, set);
}, $miniBill$elm_fast_dict$FastSet$foldl = F3($miniBill$elm_fast_dict$FastSet$foldl_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$implicitImports = _List_fromArray([
    {
        aK: $elm$core$Maybe$Nothing,
        bN: "Basics",
        aI: _List_fromArray(["(+)", "(-)", "(*)", "(/)", "(//)", "(^)", "toFloat", "round", "floor", "ceiling", "truncate", "(==)", "(/=)", "(<)", "(>)", "(<=)", "(>=)", "max", "min", "compare", "LT", "EQ", "GT", "True", "False", "not", "(&&)", "(||)", "xor", "(++)", "modBy", "remainderBy", "negate", "abs", "clamp", "sqrt", "logBase", "e", "pi", "cos", "sin", "tan", "acos", "asin", "atan", "atan2", "degrees", "radians", "turns", "toPolar", "fromPolar", "isNaN", "isInfinite", "identity", "always", "(<|)", "(|>)", "(<<)", "(>>)", "never"]),
        aM: _List_fromArray(["Int", "Float", "Order", "Bool", "Never"])
    },
    {
        aK: $elm$core$Maybe$Nothing,
        bN: "List",
        aI: _List_fromArray(["(::)"]),
        aM: _List_fromArray(["List"])
    },
    {
        aK: $elm$core$Maybe$Nothing,
        bN: "Maybe",
        aI: _List_fromArray(["Just", "Nothing"]),
        aM: _List_fromArray(["Maybe"])
    },
    {
        aK: $elm$core$Maybe$Nothing,
        bN: "Result",
        aI: _List_fromArray(["Ok", "Err"]),
        aM: _List_fromArray(["Result"])
    },
    {
        aK: $elm$core$Maybe$Nothing,
        bN: "String",
        aI: _List_Nil,
        aM: _List_fromArray(["String"])
    },
    {
        aK: $elm$core$Maybe$Nothing,
        bN: "Char",
        aI: _List_Nil,
        aM: _List_fromArray(["Char"])
    },
    { aK: $elm$core$Maybe$Nothing, bN: "Tuple", aI: _List_Nil, aM: _List_Nil },
    { aK: $elm$core$Maybe$Nothing, bN: "Debug", aI: _List_Nil, aM: _List_Nil },
    {
        aK: $elm$core$Maybe$Nothing,
        bN: "Platform",
        aI: _List_Nil,
        aM: _List_fromArray(["Program"])
    },
    {
        aK: $elm$core$Maybe$Just("Cmd"),
        bN: "Platform.Cmd",
        aI: _List_Nil,
        aM: _List_fromArray(["Cmd"])
    },
    {
        aK: $elm$core$Maybe$Just("Sub"),
        bN: "Platform.Sub",
        aI: _List_Nil,
        aM: _List_fromArray(["Sub"])
    }
]);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$moduleNameToString = function (moduleName) {
    return $elm$core$String$join_fn(".", moduleName);
};
var $stil4m$elm_syntax$Elm$Syntax$Node$value = function (_v0) {
    var v = _v0.b;
    return v;
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importToNormal_fn = function (modulesTypes, syntaxImport) {
    var importModuleName = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$moduleNameToString($stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxImport.bN));
    return {
        aK: $elm$core$Maybe$map_fn(function (_v0) {
            var syntaxAlias = _v0.b;
            return $elm$core$String$join_fn(".", syntaxAlias);
        }, syntaxImport.fH),
        bN: importModuleName,
        aI: function () {
            var _v1 = syntaxImport.d3;
            if (_v1.$ === 1) {
                return _List_Nil;
            }
            else {
                var _v2 = _v1.a;
                var syntaxExposing = _v2.b;
                var _v3 = $miniBill$elm_fast_dict$FastDict$get_fn(importModuleName, modulesTypes);
                if (_v3.$ === 1) {
                    return _List_Nil;
                }
                else {
                    var moduleTypes = _v3.a;
                    if (!syntaxExposing.$) {
                        return $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (typeAliasName, info, soFar) {
                            var _v5 = info.$7;
                            if (_v5.$ === 1) {
                                return soFar;
                            }
                            else {
                                return _List_Cons(typeAliasName, soFar);
                            }
                        }), $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (_v6, choiceTypeInfo, soFar) {
                            return $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (variantName, _v7, soFarWithVariants) {
                                return _List_Cons(variantName, soFarWithVariants);
                            }), soFar, choiceTypeInfo.Y);
                        }), $miniBill$elm_fast_dict$FastDict$keys(moduleTypes.az), moduleTypes.aw), moduleTypes.B);
                    }
                    else {
                        var exposes = syntaxExposing.a;
                        return $elm$core$List$foldl_fn_unwrapped(function (_v8, namesSoFar) {
                            var expose = _v8.b;
                            switch (expose.$) {
                                case 2:
                                    var opaqueTypeOrTypeAliasName = expose.a;
                                    var _v10 = $miniBill$elm_fast_dict$FastDict$get_fn(opaqueTypeOrTypeAliasName, moduleTypes.B);
                                    if (_v10.$ === 1) {
                                        return namesSoFar;
                                    }
                                    else {
                                        var typeAlias = _v10.a;
                                        var _v11 = typeAlias.$7;
                                        if (_v11.$ === 1) {
                                            return namesSoFar;
                                        }
                                        else {
                                            return _List_Cons(opaqueTypeOrTypeAliasName, namesSoFar);
                                        }
                                    }
                                case 0:
                                    var operator = expose.a;
                                    return _List_Cons(operator, namesSoFar);
                                case 1:
                                    var name = expose.a;
                                    return _List_Cons(name, namesSoFar);
                                default:
                                    var choiceTypeExpose = expose.a;
                                    var _v12 = choiceTypeExpose.fN;
                                    if (_v12.$ === 1) {
                                        return namesSoFar;
                                    }
                                    else {
                                        var _v13 = $miniBill$elm_fast_dict$FastDict$get_fn(choiceTypeExpose.a, moduleTypes.aw);
                                        if (_v13.$ === 1) {
                                            return namesSoFar;
                                        }
                                        else {
                                            var choiceTypeDeclared = _v13.a;
                                            return $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (name, _v14, namesSoFarWithVariantNames) {
                                                return _List_Cons(name, namesSoFarWithVariantNames);
                                            }), namesSoFar, choiceTypeDeclared.Y);
                                        }
                                    }
                            }
                        }, _List_Nil, exposes);
                    }
                }
            }
        }(),
        aM: function () {
            var _v15 = syntaxImport.d3;
            if (_v15.$ === 1) {
                return _List_Nil;
            }
            else {
                var _v16 = _v15.a;
                var syntaxExposing = _v16.b;
                var _v17 = $miniBill$elm_fast_dict$FastDict$get_fn(importModuleName, modulesTypes);
                if (_v17.$ === 1) {
                    return _List_Nil;
                }
                else {
                    var moduleTypes = _v17.a;
                    if (!syntaxExposing.$) {
                        return $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (choiceTypeName, _v19, soFar) {
                            return _List_Cons(choiceTypeName, soFar);
                        }), $miniBill$elm_fast_dict$FastDict$keys(moduleTypes.B), moduleTypes.aw);
                    }
                    else {
                        var exposes = syntaxExposing.a;
                        return $elm$core$List$filterMap_fn(function (_v20) {
                            var expose = _v20.b;
                            switch (expose.$) {
                                case 0:
                                    return $elm$core$Maybe$Nothing;
                                case 1:
                                    return $elm$core$Maybe$Nothing;
                                case 2:
                                    var name = expose.a;
                                    return $elm$core$Maybe$Just(name);
                                default:
                                    var choiceTypeExpose = expose.a;
                                    return $elm$core$Maybe$Just(choiceTypeExpose.a);
                            }
                        }, exposes);
                    }
                }
            }
        }()
    };
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importToNormal = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importToNormal_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$exposesCombineFrom_fn = function (soFar, syntaxExposes) {
    exposesCombineFrom: while (true) {
        if (!syntaxExposes.b) {
            return soFar;
        }
        else {
            if (!syntaxExposes.b.b) {
                var onlyExpose = syntaxExposes.a;
                return _List_Cons(onlyExpose, soFar);
            }
            else {
                var expose0 = syntaxExposes.a;
                var _v1 = syntaxExposes.b;
                var expose1 = _v1.a;
                var expose2Up = _v1.b;
                var _v2 = _Utils_compare_fn(expose0, expose1);
                switch (_v2) {
                    case 1:
                        var $temp$soFar = soFar, $temp$syntaxExposes = _List_Cons(expose0, expose2Up);
                        soFar = $temp$soFar;
                        syntaxExposes = $temp$syntaxExposes;
                        continue exposesCombineFrom;
                    case 0:
                        var $temp$soFar = _List_Cons(expose0, soFar), $temp$syntaxExposes = _List_Cons(expose1, expose2Up);
                        soFar = $temp$soFar;
                        syntaxExposes = $temp$syntaxExposes;
                        continue exposesCombineFrom;
                    default:
                        var $temp$soFar = _List_Cons(expose0, soFar), $temp$syntaxExposes = _List_Cons(expose1, expose2Up);
                        soFar = $temp$soFar;
                        syntaxExposes = $temp$syntaxExposes;
                        continue exposesCombineFrom;
                }
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$exposesCombineFrom = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$exposesCombineFrom_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$exposesCombine = function (syntaxExposes) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$exposesCombineFrom_fn(_List_Nil, syntaxExposes);
};
var $elm$core$List$sortBy = _List_sortBy;
var $elm$core$List$sort = function (xs) {
    return _List_sortBy_fn($elm$core$Basics$identity, xs);
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$exposeListToNormal = function (syntaxExposeList) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$exposesCombine($elm$core$List$sort(syntaxExposeList));
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listAppendFastButInReverseOrder_fn = function (aList, bList) {
    listAppendFastButInReverseOrder: while (true) {
        if (!aList.b) {
            return bList;
        }
        else {
            var aHead = aList.a;
            var aTail = aList.b;
            var $temp$aList = aTail, $temp$bList = _List_Cons(aHead, bList);
            aList = $temp$aList;
            bList = $temp$bList;
            continue listAppendFastButInReverseOrder;
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listAppendFastButInReverseOrder = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listAppendFastButInReverseOrder_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$exposingCombine_fn = function (a, b) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$exposeListToNormal($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listAppendFastButInReverseOrder_fn(a, b));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$exposingCombine = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$exposingCombine_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importsMerge_fn = function (earlier, later) {
    return {
        aK: function () {
            var _v0 = earlier.aK;
            if (!_v0.$) {
                var alias = _v0.a;
                return $elm$core$Maybe$Just(alias);
            }
            else {
                return later.aK;
            }
        }(),
        bN: earlier.bN,
        aI: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$exposingCombine_fn(earlier.aI, later.aI),
        aM: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$exposingCombine_fn(earlier.aM, later.aM)
    };
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importsMerge = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importsMerge_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importsCombineFrom_fn = function (soFar, syntaxImports) {
    importsCombineFrom: while (true) {
        if (!syntaxImports.b) {
            return soFar;
        }
        else {
            if (!syntaxImports.b.b) {
                var onlyImport = syntaxImports.a;
                return _List_Cons(onlyImport, soFar);
            }
            else {
                var import0 = syntaxImports.a;
                var _v1 = syntaxImports.b;
                var import1 = _v1.a;
                var import2Up = _v1.b;
                if (_Utils_eq(import0.bN, import1.bN)) {
                    var $temp$soFar = soFar, $temp$syntaxImports = _List_Cons($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importsMerge_fn(import0, import1), import2Up);
                    soFar = $temp$soFar;
                    syntaxImports = $temp$syntaxImports;
                    continue importsCombineFrom;
                }
                else {
                    var $temp$soFar = _List_Cons(import0, soFar), $temp$syntaxImports = _List_Cons(import1, import2Up);
                    soFar = $temp$soFar;
                    syntaxImports = $temp$syntaxImports;
                    continue importsCombineFrom;
                }
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importsCombineFrom = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importsCombineFrom_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importsCombine = function (syntaxImports) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importsCombineFrom_fn(_List_Nil, syntaxImports);
};
var $miniBill$elm_fast_dict$FastDict$getMinInner = function (n) {
    getMinInner: while (true) {
        if (n.$ === 1) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            if (n.d.$ === 1) {
                var k = n.b;
                var v = n.c;
                var _v1 = n.d;
                return $elm$core$Maybe$Just(_Utils_Tuple2(k, v));
            }
            else {
                var l = n.d;
                var $temp$n = l;
                n = $temp$n;
                continue getMinInner;
            }
        }
    }
};
var $miniBill$elm_fast_dict$FastDict$moveRedLeft_fn = function (clr, k, v, left, right) {
    if (!left.$) {
        var lK = left.b;
        var lV = left.c;
        var lLeft = left.d;
        var lRight = left.e;
        if (!right.$) {
            if ((!right.d.$) && (!right.d.a)) {
                var rK = right.b;
                var rV = right.c;
                var _v2 = right.d;
                var _v3 = _v2.a;
                var rlK = _v2.b;
                var rlV = _v2.c;
                var rlL = _v2.d;
                var rlR = _v2.e;
                var rRight = right.e;
                return {
                    e8: 0,
                    cv: rlK,
                    cw: $miniBill$elm_fast_dict$Internal$InnerNode_fn(1, k, v, $miniBill$elm_fast_dict$Internal$InnerNode_fn(0, lK, lV, lLeft, lRight), rlL),
                    cV: $miniBill$elm_fast_dict$Internal$InnerNode_fn(1, rK, rV, rlR, rRight),
                    cH: rlV
                };
            }
            else {
                var rK = right.b;
                var rV = right.c;
                var rLeft = right.d;
                var rRight = right.e;
                return {
                    e8: 1,
                    cv: k,
                    cw: $miniBill$elm_fast_dict$Internal$InnerNode_fn(0, lK, lV, lLeft, lRight),
                    cV: $miniBill$elm_fast_dict$Internal$InnerNode_fn(0, rK, rV, rLeft, rRight),
                    cH: v
                };
            }
        }
        else {
            return { e8: clr, cv: k, cw: left, cV: right, cH: v };
        }
    }
    else {
        return { e8: clr, cv: k, cw: left, cV: right, cH: v };
    }
}, $miniBill$elm_fast_dict$FastDict$moveRedLeft = F5($miniBill$elm_fast_dict$FastDict$moveRedLeft_fn);
var $miniBill$elm_fast_dict$FastDict$moveRedRight = function (key) {
    return function (value) {
        return function (lK) {
            return function (lV) {
                return function (lLeft) {
                    return function (lRight) {
                        return function (rK) {
                            return function (rV) {
                                return function (rLeft) {
                                    return function (rRight) {
                                        if ((!lLeft.$) && (!lLeft.a)) {
                                            var _v1 = lLeft.a;
                                            var llK = lLeft.b;
                                            var llV = lLeft.c;
                                            var llLeft = lLeft.d;
                                            var llRight = lLeft.e;
                                            return $miniBill$elm_fast_dict$Internal$InnerNode_fn(0, lK, lV, $miniBill$elm_fast_dict$Internal$InnerNode_fn(1, llK, llV, llLeft, llRight), $miniBill$elm_fast_dict$Internal$InnerNode_fn(1, key, value, lRight, $miniBill$elm_fast_dict$Internal$InnerNode_fn(0, rK, rV, rLeft, rRight)));
                                        }
                                        else {
                                            return $miniBill$elm_fast_dict$Internal$InnerNode_fn(1, key, value, $miniBill$elm_fast_dict$Internal$InnerNode_fn(0, lK, lV, lLeft, lRight), $miniBill$elm_fast_dict$Internal$InnerNode_fn(0, rK, rV, rLeft, rRight));
                                        }
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var $miniBill$elm_fast_dict$FastDict$removeHelpPrepEQGT_fn = function (dict, color, key, value, left, right) {
    if (!left.$) {
        if (!left.a) {
            var _v1 = left.a;
            var lK = left.b;
            var lV = left.c;
            var lLeft = left.d;
            var lRight = left.e;
            return $miniBill$elm_fast_dict$Internal$InnerNode_fn(color, lK, lV, lLeft, $miniBill$elm_fast_dict$Internal$InnerNode_fn(0, key, value, lRight, right));
        }
        else {
            var _v2 = left.a;
            var lK = left.b;
            var lV = left.c;
            var lLeft = left.d;
            var lRight = left.e;
            _v3$2: while (true) {
                if ((!right.$) && (right.a === 1)) {
                    if (!right.d.$) {
                        if (right.d.a === 1) {
                            var _v4 = right.a;
                            var rK = right.b;
                            var rV = right.c;
                            var rLeft = right.d;
                            var _v5 = rLeft.a;
                            var rRight = right.e;
                            return $miniBill$elm_fast_dict$FastDict$moveRedRight(key)(value)(lK)(lV)(lLeft)(lRight)(rK)(rV)(rLeft)(rRight);
                        }
                        else {
                            break _v3$2;
                        }
                    }
                    else {
                        var _v6 = right.a;
                        var rK = right.b;
                        var rV = right.c;
                        var _v7 = right.d;
                        var rRight = right.e;
                        return $miniBill$elm_fast_dict$FastDict$moveRedRight(key)(value)(lK)(lV)(lLeft)(lRight)(rK)(rV)($miniBill$elm_fast_dict$Internal$Leaf)(rRight);
                    }
                }
                else {
                    break _v3$2;
                }
            }
            return dict;
        }
    }
    else {
        return dict;
    }
}, $miniBill$elm_fast_dict$FastDict$removeHelpPrepEQGT = F6($miniBill$elm_fast_dict$FastDict$removeHelpPrepEQGT_fn);
var $miniBill$elm_fast_dict$FastDict$removeMin = function (dict) {
    if ((!dict.$) && (!dict.d.$)) {
        var color = dict.a;
        var key = dict.b;
        var value = dict.c;
        var left = dict.d;
        var lColor = left.a;
        var lLeft = left.d;
        var right = dict.e;
        if (lColor === 1) {
            if ((!lLeft.$) && (!lLeft.a)) {
                var _v3 = lLeft.a;
                return $miniBill$elm_fast_dict$Internal$InnerNode_fn(color, key, value, $miniBill$elm_fast_dict$FastDict$removeMin(left), right);
            }
            else {
                var res = $miniBill$elm_fast_dict$FastDict$moveRedLeft_fn(color, key, value, left, right);
                return $miniBill$elm_fast_dict$Internal$balance_fn(res.e8, res.cv, res.cH, $miniBill$elm_fast_dict$FastDict$removeMin(res.cw), res.cV);
            }
        }
        else {
            return $miniBill$elm_fast_dict$Internal$InnerNode_fn(color, key, value, $miniBill$elm_fast_dict$FastDict$removeMin(left), right);
        }
    }
    else {
        return $miniBill$elm_fast_dict$Internal$Leaf;
    }
};
var $miniBill$elm_fast_dict$FastDict$removeHelp_fn = function (targetKey, dict) {
    if (dict.$ === 1) {
        return $elm$core$Maybe$Nothing;
    }
    else {
        var color = dict.a;
        var key = dict.b;
        var value = dict.c;
        var left = dict.d;
        var right = dict.e;
        if (_Utils_cmp(targetKey, key) < 0) {
            if ((!left.$) && (left.a === 1)) {
                var _v6 = left.a;
                var lLeft = left.d;
                if ((!lLeft.$) && (!lLeft.a)) {
                    var _v8 = lLeft.a;
                    var _v9 = $miniBill$elm_fast_dict$FastDict$removeHelp_fn(targetKey, left);
                    if (!_v9.$) {
                        var newLeft = _v9.a;
                        return $elm$core$Maybe$Just($miniBill$elm_fast_dict$Internal$InnerNode_fn(color, key, value, newLeft, right));
                    }
                    else {
                        return $elm$core$Maybe$Nothing;
                    }
                }
                else {
                    var res = $miniBill$elm_fast_dict$FastDict$moveRedLeft_fn(color, key, value, left, right);
                    var _v10 = $miniBill$elm_fast_dict$FastDict$removeHelp_fn(targetKey, res.cw);
                    if (!_v10.$) {
                        var newLeft = _v10.a;
                        return $elm$core$Maybe$Just($miniBill$elm_fast_dict$Internal$balance_fn(res.e8, res.cv, res.cH, newLeft, res.cV));
                    }
                    else {
                        return $elm$core$Maybe$Nothing;
                    }
                }
            }
            else {
                var _v11 = $miniBill$elm_fast_dict$FastDict$removeHelp_fn(targetKey, left);
                if (!_v11.$) {
                    var newLeft = _v11.a;
                    return $elm$core$Maybe$Just($miniBill$elm_fast_dict$Internal$InnerNode_fn(color, key, value, newLeft, right));
                }
                else {
                    return $elm$core$Maybe$Nothing;
                }
            }
        }
        else {
            return $miniBill$elm_fast_dict$FastDict$removeHelpEQGT_fn(targetKey, $miniBill$elm_fast_dict$FastDict$removeHelpPrepEQGT_fn(dict, color, key, value, left, right));
        }
    }
}, $miniBill$elm_fast_dict$FastDict$removeHelp = F2($miniBill$elm_fast_dict$FastDict$removeHelp_fn);
var $miniBill$elm_fast_dict$FastDict$removeHelpEQGT_fn = function (targetKey, dict) {
    if (!dict.$) {
        var color = dict.a;
        var key = dict.b;
        var value = dict.c;
        var left = dict.d;
        var right = dict.e;
        if (_Utils_eq(targetKey, key)) {
            var _v1 = $miniBill$elm_fast_dict$FastDict$getMinInner(right);
            if (!_v1.$) {
                var _v2 = _v1.a;
                var minKey = _v2.a;
                var minValue = _v2.b;
                return $elm$core$Maybe$Just($miniBill$elm_fast_dict$Internal$balance_fn(color, minKey, minValue, left, $miniBill$elm_fast_dict$FastDict$removeMin(right)));
            }
            else {
                return $elm$core$Maybe$Just($miniBill$elm_fast_dict$Internal$Leaf);
            }
        }
        else {
            var _v3 = $miniBill$elm_fast_dict$FastDict$removeHelp_fn(targetKey, right);
            if (!_v3.$) {
                var newRight = _v3.a;
                return $elm$core$Maybe$Just($miniBill$elm_fast_dict$Internal$balance_fn(color, key, value, left, newRight));
            }
            else {
                return $elm$core$Maybe$Nothing;
            }
        }
    }
    else {
        return $elm$core$Maybe$Nothing;
    }
}, $miniBill$elm_fast_dict$FastDict$removeHelpEQGT = F2($miniBill$elm_fast_dict$FastDict$removeHelpEQGT_fn);
var $miniBill$elm_fast_dict$FastDict$remove_fn = function (key, orig) {
    var sz = orig.a;
    var dict = orig.b;
    var _v0 = $miniBill$elm_fast_dict$FastDict$removeHelp_fn(key, dict);
    if (!_v0.$) {
        var result = _v0.a;
        return $miniBill$elm_fast_dict$Internal$Dict_fn(sz - 1, $miniBill$elm_fast_dict$Internal$setRootBlack(result));
    }
    else {
        return orig;
    }
}, $miniBill$elm_fast_dict$FastDict$remove = F2($miniBill$elm_fast_dict$FastDict$remove_fn);
var $miniBill$elm_fast_dict$FastDict$update_fn = function (targetKey, alter, dictionary) {
    var _v0 = alter($miniBill$elm_fast_dict$FastDict$get_fn(targetKey, dictionary));
    if (!_v0.$) {
        var value = _v0.a;
        return $miniBill$elm_fast_dict$FastDict$insert_fn(targetKey, value, dictionary);
    }
    else {
        return $miniBill$elm_fast_dict$FastDict$remove_fn(targetKey, dictionary);
    }
}, $miniBill$elm_fast_dict$FastDict$update = F3($miniBill$elm_fast_dict$FastDict$update_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importsToModuleOriginLookup_fn = function (modulesTypes, imports) {
    var importsNormal = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importsCombine($elm$core$List$foldl_fn_unwrapped(function (_v9, importNormalsSoFar) {
        var syntaxImport = _v9.b;
        return _List_Cons($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importToNormal_fn(modulesTypes, syntaxImport), importNormalsSoFar);
    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$implicitImports, imports));
    var operatorIsExposedFromParserAdvanced = function (operator) {
        return $elm$core$List$any_fn(function (syntaxImport) {
            var _v8 = syntaxImport.bN;
            if (_v8 === "Parser.Advanced") {
                return $elm$core$List$any_fn(function (syntaxExpose) {
                    return _Utils_eq(syntaxExpose, operator) || _Utils_eq(syntaxExpose, "(" + (operator + ")"));
                }, syntaxImport.aI);
            }
            else {
                return false;
            }
        }, importsNormal);
    };
    return $elm$core$List$foldl_fn_unwrapped(function (syntaxImport, soFar) {
        var _v0 = $miniBill$elm_fast_dict$FastDict$get_fn(syntaxImport.bN, modulesTypes);
        if (_v0.$ === 1) {
            return soFar;
        }
        else {
            var moduleTypes = _v0.a;
            var moduleAliasOrFullName = function () {
                var _v7 = syntaxImport.aK;
                if (_v7.$ === 1) {
                    return syntaxImport.bN;
                }
                else {
                    var importAlias = _v7.a;
                    return importAlias;
                }
            }();
            return {
                b1: soFar.b1,
                b3: soFar.b3,
                bO: $miniBill$elm_fast_dict$FastDict$update_fn(moduleAliasOrFullName, function (soFarReferencesWithSameModuleNameOrAlias) {
                    return $elm$core$Maybe$Just($miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (_v1, choiceType, variantNamesSoFar) {
                        return $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (variantName, _v2, soFarAndVariantNamesOfCurrentChoiceType) {
                            return $miniBill$elm_fast_dict$FastDict$insert_fn(variantName, syntaxImport.bN, soFarAndVariantNamesOfCurrentChoiceType);
                        }), variantNamesSoFar, choiceType.Y);
                    }), $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (reference, _v3, referenceNamesSoFar) {
                        return $miniBill$elm_fast_dict$FastDict$insert_fn(reference, syntaxImport.bN, referenceNamesSoFar);
                    }), $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (typeAliasName, typeAliasInfo, recordTypeALiasNamesSoFar) {
                        var _v4 = typeAliasInfo.$7;
                        if (_v4.$ === 1) {
                            return recordTypeALiasNamesSoFar;
                        }
                        else {
                            return $miniBill$elm_fast_dict$FastDict$insert_fn(typeAliasName, syntaxImport.bN, recordTypeALiasNamesSoFar);
                        }
                    }), $elm$core$Maybe$withDefault_fn($miniBill$elm_fast_dict$FastDict$empty, soFarReferencesWithSameModuleNameOrAlias), moduleTypes.B), moduleTypes.az), moduleTypes.aw));
                }, $miniBill$elm_fast_dict$FastDict$update_fn("", function (exposedReferencesSoFar) {
                    return $elm$core$Maybe$Just($elm$core$List$foldl_fn_unwrapped(function (expose, referencesSoFarAndImportExposed) {
                        return $miniBill$elm_fast_dict$FastDict$insert_fn(expose, syntaxImport.bN, referencesSoFarAndImportExposed);
                    }, $elm$core$Maybe$withDefault_fn($miniBill$elm_fast_dict$FastDict$empty, exposedReferencesSoFar), syntaxImport.aI));
                }, soFar.bO)),
                bl: $miniBill$elm_fast_dict$FastDict$update_fn(moduleAliasOrFullName, function (soFarTypeConstructsWithSameModuleNameOrAlias) {
                    return $elm$core$Maybe$Just($miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (choiceTypeName, _v5, variantNamesSoFar) {
                        return $miniBill$elm_fast_dict$FastDict$insert_fn(choiceTypeName, syntaxImport.bN, variantNamesSoFar);
                    }), $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (typeAliasName, _v6, referenceNamesSoFar) {
                        return $miniBill$elm_fast_dict$FastDict$insert_fn(typeAliasName, syntaxImport.bN, referenceNamesSoFar);
                    }), $elm$core$Maybe$withDefault_fn($miniBill$elm_fast_dict$FastDict$empty, soFarTypeConstructsWithSameModuleNameOrAlias), moduleTypes.B), moduleTypes.aw));
                }, $miniBill$elm_fast_dict$FastDict$update_fn("", function (typeConstructsExposedSoFar) {
                    return $elm$core$Maybe$Just($elm$core$List$foldl_fn_unwrapped(function (expose, typeConstructsSoFarAndImportExposed) {
                        return $miniBill$elm_fast_dict$FastDict$insert_fn(expose, syntaxImport.bN, typeConstructsSoFarAndImportExposed);
                    }, $elm$core$Maybe$withDefault_fn($miniBill$elm_fast_dict$FastDict$empty, typeConstructsExposedSoFar), syntaxImport.aM));
                }, soFar.bl))
            };
        }
    }, {
        b1: operatorIsExposedFromParserAdvanced("|="),
        b3: operatorIsExposedFromParserAdvanced("|."),
        bO: $miniBill$elm_fast_dict$FastDict$empty,
        bl: $miniBill$elm_fast_dict$FastDict$empty
    }, importsNormal);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importsToModuleOriginLookup = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importsToModuleOriginLookup_fn);
var $author$project$ElmSyntaxToRust$fastDictAny_fn = function (keyValueToIsUsual, fastDict) {
    return $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (key, value, soFar) {
        return soFar || A2(keyValueToIsUsual, key, value);
    }), false, fastDict);
}, $author$project$ElmSyntaxToRust$fastDictAny_fn_unwrapped = function (keyValueToIsUsual, fastDict) {
    return $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (key, value, soFar) {
        return soFar || keyValueToIsUsual(key, value);
    }), false, fastDict);
}, $author$project$ElmSyntaxToRust$fastDictAny = F2($author$project$ElmSyntaxToRust$fastDictAny_fn);
var $author$project$ElmSyntaxToRust$inferredTypeContainsExtensibleRecord = function (inferredType) {
    if (!inferredType.$) {
        return false;
    }
    else {
        var inferredTypeNotVariable = inferredType.a;
        return $author$project$ElmSyntaxToRust$inferredTypeNotVariableContainsExtensibleRecord(inferredTypeNotVariable);
    }
};
var $author$project$ElmSyntaxToRust$inferredTypeNotVariableContainsExtensibleRecord = function (inferredTypeNotVariable) {
    switch (inferredTypeNotVariable.$) {
        case 0:
            return false;
        case 5:
            return true;
        case 6:
            var typeFunction = inferredTypeNotVariable.a;
            return $author$project$ElmSyntaxToRust$inferredTypeContainsExtensibleRecord(typeFunction.e) || $author$project$ElmSyntaxToRust$inferredTypeContainsExtensibleRecord(typeFunction.d);
        case 2:
            var parts = inferredTypeNotVariable.a;
            return $author$project$ElmSyntaxToRust$inferredTypeContainsExtensibleRecord(parts.s) || $author$project$ElmSyntaxToRust$inferredTypeContainsExtensibleRecord(parts.t);
        case 3:
            var parts = inferredTypeNotVariable.a;
            return $author$project$ElmSyntaxToRust$inferredTypeContainsExtensibleRecord(parts.s) || ($author$project$ElmSyntaxToRust$inferredTypeContainsExtensibleRecord(parts.t) || $author$project$ElmSyntaxToRust$inferredTypeContainsExtensibleRecord(parts.ak));
        case 1:
            var typeConstruct = inferredTypeNotVariable.a;
            return $elm$core$List$any_fn($author$project$ElmSyntaxToRust$inferredTypeContainsExtensibleRecord, typeConstruct.c);
        default:
            var fields = inferredTypeNotVariable.a;
            return $author$project$ElmSyntaxToRust$fastDictAny_fn_unwrapped(function (_v1, fieldValue) {
                return $author$project$ElmSyntaxToRust$inferredTypeContainsExtensibleRecord(fieldValue);
            }, fields);
    }
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension = function (a) {
    return { $: 5, a: a };
};
var $author$project$ElmSyntaxToRust$inferredTypeExpand_fn = function (expansions, inferredType) {
    if (!inferredType.$) {
        var variable = inferredType.a;
        var _v7 = $miniBill$elm_fast_dict$FastDict$get_fn(variable.a, expansions);
        if (_v7.$ === 1) {
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(variable);
        }
        else {
            var expanded = _v7.a;
            return expanded;
        }
    }
    else {
        var inferredTypeNotVariable = inferredType.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($author$project$ElmSyntaxToRust$inferredTypeNotVariableExpand_fn(expansions, inferredTypeNotVariable));
    }
}, $author$project$ElmSyntaxToRust$inferredTypeExpand = F2($author$project$ElmSyntaxToRust$inferredTypeExpand_fn);
var $author$project$ElmSyntaxToRust$inferredTypeNotVariableExpand_fn = function (expansions, syntaxType) {
    switch (syntaxType.$) {
        case 0:
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit;
        case 6:
            var typeFunction = syntaxType.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $author$project$ElmSyntaxToRust$inferredTypeExpand_fn(expansions, typeFunction.e),
                d: $author$project$ElmSyntaxToRust$inferredTypeExpand_fn(expansions, typeFunction.d)
            });
        case 2:
            var parts = syntaxType.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                s: $author$project$ElmSyntaxToRust$inferredTypeExpand_fn(expansions, parts.s),
                t: $author$project$ElmSyntaxToRust$inferredTypeExpand_fn(expansions, parts.t)
            });
        case 3:
            var parts = syntaxType.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple({
                s: $author$project$ElmSyntaxToRust$inferredTypeExpand_fn(expansions, parts.s),
                t: $author$project$ElmSyntaxToRust$inferredTypeExpand_fn(expansions, parts.t),
                ak: $author$project$ElmSyntaxToRust$inferredTypeExpand_fn(expansions, parts.ak)
            });
        case 1:
            var typeConstruct = syntaxType.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                c: $elm$core$List$map_fn(function (value) {
                    return $author$project$ElmSyntaxToRust$inferredTypeExpand_fn(expansions, value);
                }, typeConstruct.c),
                b: typeConstruct.b,
                a: typeConstruct.a
            });
        case 4:
            var fields = syntaxType.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord($miniBill$elm_fast_dict$FastDict$map_fn(F2(function (_v1, value) {
                return $author$project$ElmSyntaxToRust$inferredTypeExpand_fn(expansions, value);
            }), fields));
        default:
            var typeRecordExtension = syntaxType.a;
            var fieldsExpanded = $miniBill$elm_fast_dict$FastDict$map_fn(F2(function (_v5, value) {
                return $author$project$ElmSyntaxToRust$inferredTypeExpand_fn(expansions, value);
            }), typeRecordExtension.F);
            var _v2 = $miniBill$elm_fast_dict$FastDict$get_fn(typeRecordExtension.V.a, expansions);
            if (_v2.$ === 1) {
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension({ F: fieldsExpanded, V: typeRecordExtension.V });
            }
            else {
                var expanded = _v2.a;
                if (!expanded.$) {
                    var expandedRecordVariable = expanded.a;
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension({ F: fieldsExpanded, V: expandedRecordVariable });
                }
                else {
                    var expandedTypeNotVariable = expanded.a;
                    switch (expandedTypeNotVariable.$) {
                        case 0:
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension({ F: fieldsExpanded, V: typeRecordExtension.V });
                        case 6:
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension({ F: fieldsExpanded, V: typeRecordExtension.V });
                        case 2:
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension({ F: fieldsExpanded, V: typeRecordExtension.V });
                        case 3:
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension({ F: fieldsExpanded, V: typeRecordExtension.V });
                        case 4:
                            var expandedFields = expandedTypeNotVariable.a;
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord($miniBill$elm_fast_dict$FastDict$union_fn(typeRecordExtension.F, expandedFields));
                        case 1:
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension({ F: fieldsExpanded, V: typeRecordExtension.V });
                        default:
                            var expandedRecordExtension = expandedTypeNotVariable.a;
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension({
                                F: $miniBill$elm_fast_dict$FastDict$union_fn(typeRecordExtension.F, expandedRecordExtension.F),
                                V: expandedRecordExtension.V
                            });
                    }
                }
            }
    }
}, $author$project$ElmSyntaxToRust$inferredTypeNotVariableExpand = F2($author$project$ElmSyntaxToRust$inferredTypeNotVariableExpand_fn);
var $author$project$ElmSyntaxToRust$inferredTypeUnit = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit);
var $author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases_fn = function (typeAliasesInModule, syntaxType) {
    if (!syntaxType.$) {
        return syntaxType;
    }
    else {
        var inferredTypeNotVariable = syntaxType.a;
        return $author$project$ElmSyntaxToRust$inferredTypeNotVariableExpandInnerAliases_fn(typeAliasesInModule, inferredTypeNotVariable);
    }
}, $author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases = F2($author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases_fn);
var $author$project$ElmSyntaxToRust$inferredTypeNotVariableExpandInnerAliases_fn = function (typeAliasesInModule, syntaxType) {
    switch (syntaxType.$) {
        case 0:
            return $author$project$ElmSyntaxToRust$inferredTypeUnit;
        case 6:
            var typeFunction = syntaxType.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases_fn(typeAliasesInModule, typeFunction.e),
                d: $author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases_fn(typeAliasesInModule, typeFunction.d)
            }));
        case 2:
            var parts = syntaxType.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                s: $author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases_fn(typeAliasesInModule, parts.s),
                t: $author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases_fn(typeAliasesInModule, parts.t)
            }));
        case 3:
            var parts = syntaxType.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple({
                s: $author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases_fn(typeAliasesInModule, parts.s),
                t: $author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases_fn(typeAliasesInModule, parts.t),
                ak: $author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases_fn(typeAliasesInModule, parts.ak)
            }));
        case 4:
            var fields = syntaxType.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord($miniBill$elm_fast_dict$FastDict$map_fn(F2(function (_v1, value) {
                return $author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases_fn(typeAliasesInModule, value);
            }), fields)));
        case 5:
            var typeRecordExtension = syntaxType.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension({
                F: $miniBill$elm_fast_dict$FastDict$map_fn(F2(function (_v2, value) {
                    return $author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases_fn(typeAliasesInModule, value);
                }), typeRecordExtension.F),
                V: typeRecordExtension.V
            }));
        default:
            var typeConstruct = syntaxType.a;
            var argumentsExpanded = $elm$core$List$map_fn(function (argument) {
                return $author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases_fn(typeAliasesInModule, argument);
            }, typeConstruct.c);
            var _v3 = $elm$core$Maybe$andThen_fn(function (byName) {
                return $miniBill$elm_fast_dict$FastDict$get_fn(typeConstruct.a, byName);
            }, typeAliasesInModule(typeConstruct.b));
            if (!_v3.$) {
                var aliasedType = _v3.a;
                return $author$project$ElmSyntaxToRust$inferredTypeExpand_fn($author$project$ElmSyntaxToRust$listFoldl2From_fn_unwrapped($miniBill$elm_fast_dict$FastDict$empty, aliasedType.o, argumentsExpanded, function (parameter, argument, soFar) {
                    return $miniBill$elm_fast_dict$FastDict$insert_fn(parameter, argument, soFar);
                }), aliasedType.n);
            }
            else {
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: argumentsExpanded, b: typeConstruct.b, a: typeConstruct.a }));
            }
    }
}, $author$project$ElmSyntaxToRust$inferredTypeNotVariableExpandInnerAliases = F2($author$project$ElmSyntaxToRust$inferredTypeNotVariableExpandInnerAliases_fn);
var $author$project$ElmSyntaxToRust$RustTypeVariableSpecializationToRecord = $elm$core$Basics$identity;
var $author$project$ElmSyntaxToRust$fastDictAll_fn = function (keyValueToIsUsual, fastDict) {
    return $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (key, value, soFar) {
        return soFar && A2(keyValueToIsUsual, key, value);
    }), true, fastDict);
}, $author$project$ElmSyntaxToRust$fastDictAll_fn_unwrapped = function (keyValueToIsUsual, fastDict) {
    return $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (key, value, soFar) {
        return soFar && keyValueToIsUsual(key, value);
    }), true, fastDict);
}, $author$project$ElmSyntaxToRust$fastDictAll = F2($author$project$ElmSyntaxToRust$fastDictAll_fn);
var $author$project$ElmSyntaxToRust$listMapToFastDictsAndUnify_fn = function (elementToFastDict, list) {
    return $elm$core$List$foldl_fn_unwrapped(function (element, soFar) {
        return $miniBill$elm_fast_dict$FastDict$union_fn(soFar, elementToFastDict(element));
    }, $miniBill$elm_fast_dict$FastDict$empty, list);
}, $author$project$ElmSyntaxToRust$listMapToFastDictsAndUnify = F2($author$project$ElmSyntaxToRust$listMapToFastDictsAndUnify_fn);
var $elm$core$List$member_fn = function (x, xs) {
    return $elm$core$List$any_fn(function (a) {
        return _Utils_eq(a, x);
    }, xs);
}, $elm$core$List$member = F2($elm$core$List$member_fn);
var $author$project$ElmSyntaxToRust$inferredTypeNotVariableWithExpandedInnerAliasesSplitIntoSpecializedRustTypes_fn = function (context, inferredTypeNotVariable) {
    switch (inferredTypeNotVariable.$) {
        case 0:
            return $miniBill$elm_fast_dict$FastDict$empty;
        case 6:
            var typeFunction = inferredTypeNotVariable.a;
            return $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes_fn(context, typeFunction.d), $author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes_fn(context, typeFunction.e));
        case 2:
            var parts = inferredTypeNotVariable.a;
            return $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes_fn(context, parts.t), $author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes_fn(context, parts.s));
        case 3:
            var parts = inferredTypeNotVariable.a;
            return $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes_fn(context, parts.ak), $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes_fn(context, parts.t), $author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes_fn(context, parts.s)));
        case 1:
            var typeConstruct = inferredTypeNotVariable.a;
            return $author$project$ElmSyntaxToRust$listMapToFastDictsAndUnify_fn(function (argument) {
                return $author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes_fn(context, argument);
            }, typeConstruct.c);
        case 4:
            var fields = inferredTypeNotVariable.a;
            return $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (_v2, value, soFar) {
                return $miniBill$elm_fast_dict$FastDict$union_fn(soFar, $author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes_fn(context, value));
            }), $miniBill$elm_fast_dict$FastDict$empty, fields);
        default:
            var typeRecordExtension = inferredTypeNotVariable.a;
            return $miniBill$elm_fast_dict$FastDict$insert_fn(typeRecordExtension.V.a, $miniBill$elm_fast_dict$FastSet$foldl_fn_unwrapped(function (elmRecord, rustRecordsThatContainAllSyntaxFieldsSoFar) {
                return $author$project$ElmSyntaxToRust$fastDictAll_fn_unwrapped(function (fieldName, _v4) {
                    return $elm$core$List$member_fn(fieldName, elmRecord);
                }, typeRecordExtension.F) ? _List_Cons(elmRecord, rustRecordsThatContainAllSyntaxFieldsSoFar) : rustRecordsThatContainAllSyntaxFieldsSoFar;
            }, _List_Nil, context.dM), $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (_v3, value, soFar) {
                return $miniBill$elm_fast_dict$FastDict$union_fn(soFar, $author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes_fn(context, value));
            }), $miniBill$elm_fast_dict$FastDict$empty, typeRecordExtension.F));
    }
}, $author$project$ElmSyntaxToRust$inferredTypeNotVariableWithExpandedInnerAliasesSplitIntoSpecializedRustTypes = F2($author$project$ElmSyntaxToRust$inferredTypeNotVariableWithExpandedInnerAliasesSplitIntoSpecializedRustTypes_fn);
var $author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes_fn = function (context, inferredType) {
    if (!inferredType.$) {
        return $miniBill$elm_fast_dict$FastDict$empty;
    }
    else {
        var inferredTypeNotVariable = inferredType.a;
        return $author$project$ElmSyntaxToRust$inferredTypeNotVariableWithExpandedInnerAliasesSplitIntoSpecializedRustTypes_fn(context, inferredTypeNotVariable);
    }
}, $author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes = F2($author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes_fn);
var $author$project$ElmSyntaxToRust$listFoldlWhileOkFrom_fn = function (initialOkFolded, reduceOnOk, list) {
    listFoldlWhileOkFrom: while (true) {
        if (!list.b) {
            return $elm$core$Result$Ok(initialOkFolded);
        }
        else {
            var head = list.a;
            var tail = list.b;
            var _v1 = A2(reduceOnOk, head, initialOkFolded);
            if (_v1.$ === 1) {
                var error = _v1.a;
                return $elm$core$Result$Err(error);
            }
            else {
                var okFoldedWithHead = _v1.a;
                var $temp$initialOkFolded = okFoldedWithHead, $temp$reduceOnOk = reduceOnOk, $temp$list = tail;
                initialOkFolded = $temp$initialOkFolded;
                reduceOnOk = $temp$reduceOnOk;
                list = $temp$list;
                continue listFoldlWhileOkFrom;
            }
        }
    }
}, $author$project$ElmSyntaxToRust$listFoldlWhileOkFrom_fn_unwrapped = function (initialOkFolded, reduceOnOk, list) {
    listFoldlWhileOkFrom: while (true) {
        if (!list.b) {
            return $elm$core$Result$Ok(initialOkFolded);
        }
        else {
            var head = list.a;
            var tail = list.b;
            var _v1 = reduceOnOk(head, initialOkFolded);
            if (_v1.$ === 1) {
                var error = _v1.a;
                return $elm$core$Result$Err(error);
            }
            else {
                var okFoldedWithHead = _v1.a;
                var $temp$initialOkFolded = okFoldedWithHead, $temp$reduceOnOk = reduceOnOk, $temp$list = tail;
                initialOkFolded = $temp$initialOkFolded;
                reduceOnOk = $temp$reduceOnOk;
                list = $temp$list;
                continue listFoldlWhileOkFrom;
            }
        }
    }
}, $author$project$ElmSyntaxToRust$listFoldlWhileOkFrom = F3($author$project$ElmSyntaxToRust$listFoldlWhileOkFrom_fn);
var $author$project$ElmSyntaxToRust$listMapAndFirstJust_fn = function (elementToMaybeFound, list) {
    listMapAndFirstJust: while (true) {
        if (!list.b) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var head = list.a;
            var tail = list.b;
            var _v1 = elementToMaybeFound(head);
            if (!_v1.$) {
                var found = _v1.a;
                return $elm$core$Maybe$Just(found);
            }
            else {
                var $temp$elementToMaybeFound = elementToMaybeFound, $temp$list = tail;
                elementToMaybeFound = $temp$elementToMaybeFound;
                list = $temp$list;
                continue listMapAndFirstJust;
            }
        }
    }
}, $author$project$ElmSyntaxToRust$listMapAndFirstJust = F2($author$project$ElmSyntaxToRust$listMapAndFirstJust_fn);
var $miniBill$elm_fast_dict$FastSet$union_fn = function (_v0, _v1) {
    var l = _v0;
    var r = _v1;
    return $miniBill$elm_fast_dict$FastDict$union_fn(l, r);
}, $miniBill$elm_fast_dict$FastSet$union = F2($miniBill$elm_fast_dict$FastSet$union_fn);
var $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn = function (elementToSet, list) {
    return $elm$core$List$foldl_fn_unwrapped(function (element, soFar) {
        return $miniBill$elm_fast_dict$FastSet$union_fn(elementToSet(element), soFar);
    }, $miniBill$elm_fast_dict$FastSet$empty, list);
}, $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify = F2($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn);
var $elm$core$Result$map_fn = function (func, ra) {
    if (!ra.$) {
        var a = ra.a;
        return $elm$core$Result$Ok(func(a));
    }
    else {
        var e = ra.a;
        return $elm$core$Result$Err(e);
    }
}, $elm$core$Result$map = F2($elm$core$Result$map_fn);
var $elm$core$Result$mapError_fn = function (f, result) {
    if (!result.$) {
        var v = result.a;
        return $elm$core$Result$Ok(v);
    }
    else {
        var e = result.a;
        return $elm$core$Result$Err(f(e));
    }
}, $elm$core$Result$mapError = F2($elm$core$Result$mapError_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom_fn = function (initialOkFolded, reduceOnOk, list) {
    listFoldlWhileOkFrom: while (true) {
        if (!list.b) {
            return $elm$core$Result$Ok(initialOkFolded);
        }
        else {
            var head = list.a;
            var tail = list.b;
            var _v1 = A2(reduceOnOk, head, initialOkFolded);
            if (_v1.$ === 1) {
                var error = _v1.a;
                return $elm$core$Result$Err(error);
            }
            else {
                var okFoldedWithHead = _v1.a;
                var $temp$initialOkFolded = okFoldedWithHead, $temp$reduceOnOk = reduceOnOk, $temp$list = tail;
                initialOkFolded = $temp$initialOkFolded;
                reduceOnOk = $temp$reduceOnOk;
                list = $temp$list;
                continue listFoldlWhileOkFrom;
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom_fn_unwrapped = function (initialOkFolded, reduceOnOk, list) {
    listFoldlWhileOkFrom: while (true) {
        if (!list.b) {
            return $elm$core$Result$Ok(initialOkFolded);
        }
        else {
            var head = list.a;
            var tail = list.b;
            var _v1 = reduceOnOk(head, initialOkFolded);
            if (_v1.$ === 1) {
                var error = _v1.a;
                return $elm$core$Result$Err(error);
            }
            else {
                var okFoldedWithHead = _v1.a;
                var $temp$initialOkFolded = okFoldedWithHead, $temp$reduceOnOk = reduceOnOk, $temp$list = tail;
                initialOkFolded = $temp$initialOkFolded;
                reduceOnOk = $temp$reduceOnOk;
                list = $temp$list;
                continue listFoldlWhileOkFrom;
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndCombineOkFrom_fn = function (soFar, elementToResult, list) {
    listMapAndCombineOkFrom: while (true) {
        if (!list.b) {
            return $elm$core$Result$Ok($elm$core$List$reverse(soFar));
        }
        else {
            var head = list.a;
            var tail = list.b;
            var _v1 = elementToResult(head);
            if (_v1.$ === 1) {
                var headErr = _v1.a;
                return $elm$core$Result$Err(headErr);
            }
            else {
                var headOk = _v1.a;
                var $temp$soFar = _List_Cons(headOk, soFar), $temp$elementToResult = elementToResult, $temp$list = tail;
                soFar = $temp$soFar;
                elementToResult = $temp$elementToResult;
                list = $temp$list;
                continue listMapAndCombineOkFrom;
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndCombineOkFrom = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndCombineOkFrom_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndCombineOk_fn = function (elementToResult, list) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndCombineOkFrom_fn(_List_Nil, elementToResult, list);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndCombineOk = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndCombineOk_fn);
var $elm$core$Result$map2_fn = function (func, ra, rb) {
    if (ra.$ === 1) {
        var x = ra.a;
        return $elm$core$Result$Err(x);
    }
    else {
        var a = ra.a;
        if (rb.$ === 1) {
            var x = rb.a;
            return $elm$core$Result$Err(x);
        }
        else {
            var b = rb.a;
            return $elm$core$Result$Ok(A2(func, a, b));
        }
    }
}, $elm$core$Result$map2_fn_unwrapped = function (func, ra, rb) {
    if (ra.$ === 1) {
        var x = ra.a;
        return $elm$core$Result$Err(x);
    }
    else {
        var a = ra.a;
        if (rb.$ === 1) {
            var x = rb.a;
            return $elm$core$Result$Err(x);
        }
        else {
            var b = rb.a;
            return $elm$core$Result$Ok(func(a, b));
        }
    }
}, $elm$core$Result$map2 = F3($elm$core$Result$map2_fn);
var $elm$core$Result$map3_fn = function (func, ra, rb, rc) {
    if (ra.$ === 1) {
        var x = ra.a;
        return $elm$core$Result$Err(x);
    }
    else {
        var a = ra.a;
        if (rb.$ === 1) {
            var x = rb.a;
            return $elm$core$Result$Err(x);
        }
        else {
            var b = rb.a;
            if (rc.$ === 1) {
                var x = rc.a;
                return $elm$core$Result$Err(x);
            }
            else {
                var c = rc.a;
                return $elm$core$Result$Ok(A3(func, a, b, c));
            }
        }
    }
}, $elm$core$Result$map3_fn_unwrapped = function (func, ra, rb, rc) {
    if (ra.$ === 1) {
        var x = ra.a;
        return $elm$core$Result$Err(x);
    }
    else {
        var a = ra.a;
        if (rb.$ === 1) {
            var x = rb.a;
            return $elm$core$Result$Err(x);
        }
        else {
            var b = rb.a;
            if (rc.$ === 1) {
                var x = rc.a;
                return $elm$core$Result$Err(x);
            }
            else {
                var c = rc.a;
                return $elm$core$Result$Ok(func(a, b, c));
            }
        }
    }
}, $elm$core$Result$map3 = F4($elm$core$Result$map3_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeUnit = $elm$core$Result$Ok($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit));
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString = function (reference) {
    var _v0 = reference.K;
    if (_v0 === "") {
        return reference.a;
    }
    else {
        var qualificationAliasOrModuleName = _v0;
        return qualificationAliasOrModuleName + ("." + reference.a);
    }
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange_fn = function (typeConstructModuleOriginLookup, rootRange, syntaxTypeNode) {
    var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxTypeNode);
    switch (_v0.$) {
        case 2:
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeUnit;
        case 0:
            var variableName = _v0.a;
            return $elm$core$Result$Ok($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: variableName, f: rootRange }));
        case 1:
            var _v1 = _v0.a;
            var _v2 = _v1.b;
            var qualificationAsDotSeparated = _v2.a;
            var unqualifiedName = _v2.b;
            var argumentNodes = _v0.b;
            var qualification = $elm$core$String$join_fn(".", qualificationAsDotSeparated);
            var _v3 = $elm$core$Maybe$andThen_fn(function (lookupInModule) {
                return $miniBill$elm_fast_dict$FastDict$get_fn(unqualifiedName, lookupInModule);
            }, $miniBill$elm_fast_dict$FastDict$get_fn(qualification, typeConstructModuleOriginLookup));
            if (_v3.$ === 1) {
                return $elm$core$Result$Err(function () {
                    if (!qualificationAsDotSeparated.b) {
                        return "could not find imported/local declaration for " + unqualifiedName;
                    }
                    else {
                        return "could not find imported declaration for " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString({ a: unqualifiedName, K: qualification });
                    }
                }());
            }
            else {
                var originModule = _v3.a;
                return $elm$core$Result$map_fn(function (_arguments) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _arguments, b: originModule, a: unqualifiedName }));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndCombineOk_fn(function (argument) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange_fn(typeConstructModuleOriginLookup, rootRange, argument);
                }, argumentNodes));
            }
        case 3:
            var tupleParts = _v0.a;
            if (!tupleParts.b) {
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeUnit;
            }
            else {
                if (!tupleParts.b.b) {
                    var inParens = tupleParts.a;
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange_fn(typeConstructModuleOriginLookup, rootRange, inParens);
                }
                else {
                    if (!tupleParts.b.b.b) {
                        var syntaxPart0 = tupleParts.a;
                        var _v6 = tupleParts.b;
                        var syntaxPart1 = _v6.a;
                        return $elm$core$Result$map2_fn_unwrapped(function (part0, part1) {
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({ s: part0, t: part1 }));
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange_fn(typeConstructModuleOriginLookup, rootRange, syntaxPart0), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange_fn(typeConstructModuleOriginLookup, rootRange, syntaxPart1));
                    }
                    else {
                        if (!tupleParts.b.b.b.b) {
                            var syntaxPart0 = tupleParts.a;
                            var _v7 = tupleParts.b;
                            var syntaxPart1 = _v7.a;
                            var _v8 = _v7.b;
                            var syntaxPart2 = _v8.a;
                            return $elm$core$Result$map3_fn_unwrapped(function (part0, part1, part2) {
                                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple({ s: part0, t: part1, ak: part2 }));
                            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange_fn(typeConstructModuleOriginLookup, rootRange, syntaxPart0), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange_fn(typeConstructModuleOriginLookup, rootRange, syntaxPart1), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange_fn(typeConstructModuleOriginLookup, rootRange, syntaxPart2));
                        }
                        else {
                            var _v9 = tupleParts.b;
                            var _v10 = _v9.b;
                            var _v11 = _v10.b;
                            return $elm$core$Result$Err("too many tuple parts");
                        }
                    }
                }
            }
        case 4:
            var recordFields = _v0.a;
            return $elm$core$Result$map_fn(function (fields) {
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(fields));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom_fn_unwrapped($miniBill$elm_fast_dict$FastDict$empty, function (_v12, soFar) {
                var _v13 = _v12.b;
                var _v14 = _v13.a;
                var fieldName = _v14.b;
                var fieldValue = _v13.b;
                return $elm$core$Result$map_fn(function (fieldValueType) {
                    return $miniBill$elm_fast_dict$FastDict$insert_fn(fieldName, fieldValueType, soFar);
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange_fn(typeConstructModuleOriginLookup, rootRange, fieldValue));
            }, recordFields));
        case 5:
            var _v15 = _v0.a;
            var recordVariableName = _v15.b;
            var _v16 = _v0.b;
            var recordExtensionFields = _v16.b;
            if (!recordExtensionFields.b) {
                return $elm$core$Result$Err("record extension by 0 fields is invalid syntax");
            }
            else {
                var field0 = recordExtensionFields.a;
                var field1Up = recordExtensionFields.b;
                return $elm$core$Result$map_fn(function (fields) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension({
                        F: fields,
                        V: { a: recordVariableName, f: rootRange }
                    }));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom_fn_unwrapped($miniBill$elm_fast_dict$FastDict$empty, function (_v18, soFar) {
                    var _v19 = _v18.b;
                    var _v20 = _v19.a;
                    var fieldName = _v20.b;
                    var fieldValue = _v19.b;
                    return $elm$core$Result$map_fn(function (fieldValueType) {
                        return $miniBill$elm_fast_dict$FastDict$insert_fn(fieldName, fieldValueType, soFar);
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange_fn(typeConstructModuleOriginLookup, rootRange, fieldValue));
                }, _List_Cons(field0, field1Up)));
            }
        default:
            var syntaxInput = _v0.a;
            var syntaxOutput = _v0.b;
            return $elm$core$Result$map2_fn_unwrapped(function (input, output) {
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: input, d: output }));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange_fn(typeConstructModuleOriginLookup, rootRange, syntaxInput), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange_fn(typeConstructModuleOriginLookup, rootRange, syntaxOutput));
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToType_fn = function (typeConstructModuleOriginLookup, syntaxTypeNode) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToTypeInRootRange_fn(typeConstructModuleOriginLookup, $stil4m$elm_syntax$Elm$Syntax$Node$range(syntaxTypeNode), syntaxTypeNode);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToType = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToType_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$moduleTypesEmpty = { aw: $miniBill$elm_fast_dict$FastDict$empty, az: $miniBill$elm_fast_dict$FastDict$empty, B: $miniBill$elm_fast_dict$FastDict$empty };
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typesEmptyAndErrorsEmpty = { ap: _List_Nil, au: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$moduleTypesEmpty };
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$moduleDeclarationsToTypes_fn = function (context, declarations) {
    var typeConstructModuleOriginLookup = $miniBill$elm_fast_dict$FastDict$update_fn("", function (contextExposedTypeConstructsOrNothing) {
        return $elm$core$Maybe$Just($elm$core$List$foldl_fn_unwrapped(function (_v13, soFar) {
            var declaration = _v13.b;
            switch (declaration.$) {
                case 4:
                    return soFar;
                case 5:
                    return soFar;
                case 0:
                    return soFar;
                case 3:
                    return soFar;
                case 1:
                    var declarationTypeAlias = declaration.a;
                    return $miniBill$elm_fast_dict$FastDict$insert_fn($stil4m$elm_syntax$Elm$Syntax$Node$value(declarationTypeAlias.a), context.bN, soFar);
                default:
                    var declarationChoiceType = declaration.a;
                    return $miniBill$elm_fast_dict$FastDict$insert_fn($stil4m$elm_syntax$Elm$Syntax$Node$value(declarationChoiceType.a), context.bN, soFar);
            }
        }, $elm$core$Maybe$withDefault_fn($miniBill$elm_fast_dict$FastDict$empty, contextExposedTypeConstructsOrNothing), declarations));
    }, context.di.bl);
    return $elm$core$List$foldl_fn_unwrapped(function (_v0, soFar) {
        var declaration = _v0.b;
        switch (declaration.$) {
            case 4:
                return soFar;
            case 5:
                return {
                    ap: _List_Cons("destructuring at the module level is invalid syntax", soFar.ap),
                    au: soFar.au
                };
            case 0:
                var declarationValueOrFunction = declaration.a;
                var _v2 = declarationValueOrFunction.cW;
                if (_v2.$ === 1) {
                    return soFar;
                }
                else {
                    var _v3 = _v2.a;
                    var declarationValueOrFunctionSignature = _v3.b;
                    var _v4 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToType_fn(typeConstructModuleOriginLookup, declarationValueOrFunctionSignature.ci);
                    if (_v4.$ === 1) {
                        var error = _v4.a;
                        return {
                            ap: _List_Cons(error, soFar.ap),
                            au: soFar.au
                        };
                    }
                    else {
                        var type_ = _v4.a;
                        return {
                            ap: soFar.ap,
                            au: {
                                aw: soFar.au.aw,
                                az: $miniBill$elm_fast_dict$FastDict$insert_fn($stil4m$elm_syntax$Elm$Syntax$Node$value(declarationValueOrFunctionSignature.a), type_, soFar.au.az),
                                B: soFar.au.B
                            }
                        };
                    }
                }
            case 1:
                var declarationTypeAlias = declaration.a;
                var _v5 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToType_fn(typeConstructModuleOriginLookup, declarationTypeAlias.ci);
                if (_v5.$ === 1) {
                    var error = _v5.a;
                    return {
                        ap: _List_Cons(error, soFar.ap),
                        au: soFar.au
                    };
                }
                else {
                    var type_ = _v5.a;
                    return {
                        ap: soFar.ap,
                        au: {
                            aw: soFar.au.aw,
                            az: soFar.au.az,
                            B: $miniBill$elm_fast_dict$FastDict$insert_fn($stil4m$elm_syntax$Elm$Syntax$Node$value(declarationTypeAlias.a), {
                                o: $elm$core$List$map_fn($stil4m$elm_syntax$Elm$Syntax$Node$value, declarationTypeAlias.d9),
                                $7: function () {
                                    var _v6 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declarationTypeAlias.ci);
                                    switch (_v6.$) {
                                        case 4:
                                            var fields = _v6.a;
                                            return $elm$core$Maybe$Just($elm$core$List$map_fn(function (_v7) {
                                                var _v8 = _v7.b;
                                                var _v9 = _v8.a;
                                                var name = _v9.b;
                                                return name;
                                            }, fields));
                                        case 0:
                                            return $elm$core$Maybe$Nothing;
                                        case 1:
                                            return $elm$core$Maybe$Nothing;
                                        case 2:
                                            return $elm$core$Maybe$Nothing;
                                        case 3:
                                            return $elm$core$Maybe$Nothing;
                                        case 5:
                                            return $elm$core$Maybe$Nothing;
                                        default:
                                            return $elm$core$Maybe$Nothing;
                                    }
                                }(),
                                n: type_
                            }, soFar.au.B)
                        }
                    };
                }
            case 2:
                var declarationChoiceType = declaration.a;
                var _v10 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom_fn_unwrapped($miniBill$elm_fast_dict$FastDict$empty, function (_v11, variantsSoFar) {
                    var variant = _v11.b;
                    return $elm$core$Result$map_fn(function (variantValues) {
                        return $miniBill$elm_fast_dict$FastDict$insert_fn($stil4m$elm_syntax$Elm$Syntax$Node$value(variant.a), variantValues, variantsSoFar);
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndCombineOk_fn(function (variantValue) {
                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToType_fn(typeConstructModuleOriginLookup, variantValue);
                    }, variant.c));
                }, declarationChoiceType.fa);
                if (_v10.$ === 1) {
                    var error = _v10.a;
                    return {
                        ap: _List_Cons(error, soFar.ap),
                        au: soFar.au
                    };
                }
                else {
                    var variants = _v10.a;
                    return {
                        ap: soFar.ap,
                        au: {
                            aw: $miniBill$elm_fast_dict$FastDict$insert_fn($stil4m$elm_syntax$Elm$Syntax$Node$value(declarationChoiceType.a), {
                                o: $elm$core$List$map_fn($stil4m$elm_syntax$Elm$Syntax$Node$value, declarationChoiceType.d9),
                                Y: variants
                            }, soFar.au.aw),
                            az: soFar.au.az,
                            B: soFar.au.B
                        }
                    };
                }
            default:
                var declarationPortSignature = declaration.a;
                var _v12 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToType_fn(typeConstructModuleOriginLookup, declarationPortSignature.ci);
                if (_v12.$ === 1) {
                    var error = _v12.a;
                    return {
                        ap: _List_Cons(error, soFar.ap),
                        au: soFar.au
                    };
                }
                else {
                    var type_ = _v12.a;
                    return {
                        ap: soFar.ap,
                        au: {
                            aw: soFar.au.aw,
                            az: $miniBill$elm_fast_dict$FastDict$insert_fn($stil4m$elm_syntax$Elm$Syntax$Node$value(declarationPortSignature.a), type_, soFar.au.az),
                            B: soFar.au.B
                        }
                    };
                }
        }
    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typesEmptyAndErrorsEmpty, declarations);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$moduleDeclarationsToTypes = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$moduleDeclarationsToTypes_fn);
var $author$project$ElmSyntaxToRust$moduleHeaderName = function (moduleHeader) {
    return $elm$core$String$join_fn(".", $stil4m$elm_syntax$Elm$Syntax$Node$value(function () {
        switch (moduleHeader.$) {
            case 0:
                var header = moduleHeader.a;
                return header.bN;
            case 1:
                var header = moduleHeader.a;
                return header.bN;
            default:
                var header = moduleHeader.a;
                return header.bN;
        }
    }()));
};
var $author$project$ElmSyntaxToRust$implicitlyImportedModules = _List_fromArray(["Basics", "List", "Maybe", "Result", "String", "Char", "Tuple", "Debug", "Platform", "Platform.Cmd", "Platform.Sub"]);
var $author$project$ElmSyntaxToRust$portsOutgoingDictEmptyPortsIncomingDictEmpty = { bg: $miniBill$elm_fast_dict$FastSet$empty, bh: $miniBill$elm_fast_dict$FastSet$empty };
var $author$project$ElmSyntaxToRust$modulesPlusImplicitlyImportedToModuleContext_fn = function (context, moduleNames) {
    return $elm$core$List$foldl_fn_unwrapped(function (moduleName, soFar) {
        var moduleDeclaredPorts = function () {
            var _v3 = $miniBill$elm_fast_dict$FastDict$get_fn(moduleName, context.ex);
            if (_v3.$ === 1) {
                return $author$project$ElmSyntaxToRust$portsOutgoingDictEmptyPortsIncomingDictEmpty;
            }
            else {
                var moduleExposedNames = _v3.a;
                return { bg: moduleExposedNames.bg, bh: moduleExposedNames.bh };
            }
        }();
        return $miniBill$elm_fast_dict$FastDict$insert_fn(moduleName, {
            bg: moduleDeclaredPorts.bg,
            bh: moduleDeclaredPorts.bh,
            B: function () {
                var _v0 = $miniBill$elm_fast_dict$FastDict$get_fn(moduleName, context.au);
                if (_v0.$ === 1) {
                    return $miniBill$elm_fast_dict$FastDict$empty;
                }
                else {
                    var moduleTypes = _v0.a;
                    return moduleTypes.B;
                }
            }(),
            bX: function () {
                var _v1 = $miniBill$elm_fast_dict$FastDict$get_fn(moduleName, context.bX);
                if (_v1.$ === 1) {
                    var _v2 = $miniBill$elm_fast_dict$FastDict$get_fn(moduleName, context.au);
                    if (_v2.$ === 1) {
                        return $miniBill$elm_fast_dict$FastDict$empty;
                    }
                    else {
                        var moduleTypes = _v2.a;
                        return moduleTypes.az;
                    }
                }
                else {
                    var moduleDeclaredValueAndFunctionAnnotations = _v1.a;
                    return moduleDeclaredValueAndFunctionAnnotations;
                }
            }()
        }, soFar);
    }, $miniBill$elm_fast_dict$FastDict$empty, _Utils_ap($author$project$ElmSyntaxToRust$implicitlyImportedModules, moduleNames));
}, $author$project$ElmSyntaxToRust$modulesPlusImplicitlyImportedToModuleContext = F2($author$project$ElmSyntaxToRust$modulesPlusImplicitlyImportedToModuleContext_fn);
var $author$project$ElmSyntaxToRust$portTypeSignifiesOutgoing = function (_v0) {
    var syntaxType = _v0.b;
    switch (syntaxType.$) {
        case 6:
            var _v2 = syntaxType.b;
            var output = _v2.b;
            switch (output.$) {
                case 1:
                    var _v4 = output.a;
                    var _v5 = _v4.b;
                    var name = _v5.b;
                    return _String_contains_fn("cmd", $elm$core$String$toLower(name));
                case 0:
                    return false;
                case 2:
                    return false;
                case 3:
                    return false;
                case 4:
                    return false;
                case 5:
                    return false;
                default:
                    return false;
            }
        case 1:
            var _v6 = syntaxType.a;
            var _v7 = _v6.b;
            var name = _v7.b;
            return _String_contains_fn("cmd", $elm$core$String$toLower(name));
        case 0:
            return false;
        case 2:
            return false;
        case 3:
            return false;
        case 4:
            return false;
        default:
            return false;
    }
};
var $author$project$Graph$AcyclicSCC = function (a) {
    return { $: 0, a: a };
};
var $author$project$Graph$CyclicSCC = function (a) {
    return { $: 1, a: a };
};
var $author$project$Graph$arrayFind_fn = function (i, arr) {
    return $miniBill$elm_fast_dict$FastDict$get_fn(i, arr.co);
}, $author$project$Graph$arrayFind = F2($author$project$Graph$arrayFind_fn);
var $author$project$Graph$arrayFindBetween_fn = function (lo, hi, k, keyMap) {
    arrayFindBetween: while (true) {
        if (_Utils_cmp(lo, hi) > 0) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var mid = lo + (((hi - lo) / 2) | 0);
            var _v0 = $author$project$Graph$arrayFind_fn(mid, keyMap);
            if (_v0.$ === 1) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var v = _v0.a;
                var _v1 = _Utils_compare_fn(k, v);
                switch (_v1) {
                    case 0:
                        var $temp$lo = lo, $temp$hi = mid - 1, $temp$k = k, $temp$keyMap = keyMap;
                        lo = $temp$lo;
                        hi = $temp$hi;
                        k = $temp$k;
                        keyMap = $temp$keyMap;
                        continue arrayFindBetween;
                    case 1:
                        return $elm$core$Maybe$Just(mid);
                    default:
                        var $temp$lo = mid + 1, $temp$hi = hi, $temp$k = k, $temp$keyMap = keyMap;
                        lo = $temp$lo;
                        hi = $temp$hi;
                        k = $temp$k;
                        keyMap = $temp$keyMap;
                        continue arrayFindBetween;
                }
            }
        }
    }
}, $author$project$Graph$arrayFindBetween = F4($author$project$Graph$arrayFindBetween_fn);
var $author$project$Graph$keyToVertexInArray_fn = function (keyMap, k) {
    return $author$project$Graph$arrayFindBetween_fn(0, keyMap.bM, k, keyMap);
}, $author$project$Graph$keyToVertexInArray = F2($author$project$Graph$keyToVertexInArray_fn);
var $elm$core$List$sortWith = _List_sortWith;
var $author$project$Graph$graphFromEdges = function (edgesUnsorted) {
    var maxVertexIndex = $elm$core$List$length(edgesUnsorted) - 1;
    var edgesSortedIndexed = $elm$core$List$foldr_fn(F2(function (edge, soFar) {
        return {
            ee: soFar.ee - 1,
            dc: _List_Cons(_Utils_Tuple2(soFar.ee, edge), soFar.dc)
        };
    }), { ee: maxVertexIndex, dc: _List_Nil }, _List_sortWith_fn_unwrapped(function (_v4, _v5) {
        var k1 = _v4.b;
        var k2 = _v5.b;
        return _Utils_compare_fn(k1, k2);
    }, edgesUnsorted)).dc;
    var keyMap = {
        co: $elm$core$List$foldl_fn_unwrapped(function (_v2, soFar) {
            var v = _v2.a;
            var _v3 = _v2.b;
            var k = _v3.b;
            return $miniBill$elm_fast_dict$FastDict$insert_fn(v, k, soFar);
        }, $miniBill$elm_fast_dict$FastDict$empty, edgesSortedIndexed),
        bM: maxVertexIndex
    };
    return _Utils_Tuple2({
        co: $elm$core$List$foldl_fn_unwrapped(function (_v0, soFar) {
            var v = _v0.a;
            var _v1 = _v0.b;
            var ks = _v1.c;
            return $miniBill$elm_fast_dict$FastDict$insert_fn(v, $elm$core$List$filterMap_fn(function (k) {
                return $author$project$Graph$keyToVertexInArray_fn(keyMap, k);
            }, ks), soFar);
        }, $miniBill$elm_fast_dict$FastDict$empty, edgesSortedIndexed),
        bM: maxVertexIndex
    }, {
        co: $miniBill$elm_fast_dict$FastDict$fromList(edgesSortedIndexed),
        bM: maxVertexIndex
    });
};
var $author$project$Graph$Tree_fn = function (a, b) {
    return { $: 0, a: a, b: b };
}, $author$project$Graph$Tree = F2($author$project$Graph$Tree_fn);
var $author$project$Graph$treeAddAsLastSub_fn = function (newLastSub, _v0) {
    var innerElement = _v0.a;
    var innerSubs = _v0.b;
    return $author$project$Graph$Tree_fn(innerElement, _Utils_ap(innerSubs, _List_fromArray([newLastSub])));
}, $author$project$Graph$treeAddAsLastSub = F2($author$project$Graph$treeAddAsLastSub_fn);
var $author$project$Graph$treeOne = function (onlyElement) {
    return $author$project$Graph$Tree_fn(onlyElement, _List_Nil);
};
var $author$project$Graph$depthFirstSpanningTreeFromVerticesStep_fn = function (graph, fromVertices, visited, stack, soFar) {
    depthFirstSpanningTreeFromVerticesStep: while (true) {
        if (!fromVertices.b) {
            if (!stack.b) {
                return $elm$core$List$reverse(soFar);
            }
            else {
                if (stack.b.b) {
                    var _v2 = stack.a;
                    var firstTree = _v2.a;
                    var firstVs = _v2.b;
                    var _v3 = stack.b;
                    var _v4 = _v3.a;
                    var secondTree = _v4.a;
                    var secondVs = _v4.b;
                    var rest = _v3.b;
                    var $temp$graph = graph, $temp$fromVertices = firstVs, $temp$visited = visited, $temp$stack = _List_Cons(_Utils_Tuple2($author$project$Graph$treeAddAsLastSub_fn(firstTree, secondTree), secondVs), rest), $temp$soFar = soFar;
                    graph = $temp$graph;
                    fromVertices = $temp$fromVertices;
                    visited = $temp$visited;
                    stack = $temp$stack;
                    soFar = $temp$soFar;
                    continue depthFirstSpanningTreeFromVerticesStep;
                }
                else {
                    var _v5 = stack.a;
                    var firstTree = _v5.a;
                    var firstVs = _v5.b;
                    var $temp$graph = graph, $temp$fromVertices = firstVs, $temp$visited = visited, $temp$stack = _List_Nil, $temp$soFar = _List_Cons(firstTree, soFar);
                    graph = $temp$graph;
                    fromVertices = $temp$fromVertices;
                    visited = $temp$visited;
                    stack = $temp$stack;
                    soFar = $temp$soFar;
                    continue depthFirstSpanningTreeFromVerticesStep;
                }
            }
        }
        else {
            var fromVerticesHead = fromVertices.a;
            var fromVerticesTail = fromVertices.b;
            if ($miniBill$elm_fast_dict$FastSet$member_fn(fromVerticesHead, visited)) {
                var $temp$graph = graph, $temp$fromVertices = fromVerticesTail, $temp$visited = visited, $temp$stack = stack, $temp$soFar = soFar;
                graph = $temp$graph;
                fromVertices = $temp$fromVertices;
                visited = $temp$visited;
                stack = $temp$stack;
                soFar = $temp$soFar;
                continue depthFirstSpanningTreeFromVerticesStep;
            }
            else {
                var $temp$graph = graph, $temp$fromVertices = $elm$core$Maybe$withDefault_fn(_List_Nil, $author$project$Graph$arrayFind_fn(fromVerticesHead, graph)), $temp$visited = $miniBill$elm_fast_dict$FastSet$insert_fn(fromVerticesHead, visited), $temp$stack = _List_Cons(_Utils_Tuple2($author$project$Graph$treeOne(fromVerticesHead), fromVerticesTail), stack), $temp$soFar = soFar;
                graph = $temp$graph;
                fromVertices = $temp$fromVertices;
                visited = $temp$visited;
                stack = $temp$stack;
                soFar = $temp$soFar;
                continue depthFirstSpanningTreeFromVerticesStep;
            }
        }
    }
}, $author$project$Graph$depthFirstSpanningTreeFromVerticesStep = F5($author$project$Graph$depthFirstSpanningTreeFromVerticesStep_fn);
var $author$project$Graph$depthFirstSpanningTreeFromVertices_fn = function (graph, fromVertices) {
    return $author$project$Graph$depthFirstSpanningTreeFromVerticesStep_fn(graph, fromVertices, $miniBill$elm_fast_dict$FastSet$empty, _List_Nil, _List_Nil);
}, $author$project$Graph$depthFirstSpanningTreeFromVertices = F2($author$project$Graph$depthFirstSpanningTreeFromVertices_fn);
var $author$project$Graph$vertices = function (graph) {
    return $elm$core$List$range_fn(0, graph.bM);
};
var $author$project$Graph$depthFirstSpanningTree = function (g) {
    return $author$project$Graph$depthFirstSpanningTreeFromVertices_fn(g, $author$project$Graph$vertices(g));
};
var $author$project$Graph$treeElement = function (_v0) {
    var innerElement = _v0.a;
    return innerElement;
};
var $author$project$Graph$treeSubs = function (_v0) {
    var innerSubs = _v0.b;
    return innerSubs;
};
var $author$project$Graph$postorderHelp_fn = function (remaining, soFar) {
    return $elm$core$List$foldr_fn(F2(function (node, withRemainingSoFar) {
        return $author$project$Graph$postorderHelp_fn($author$project$Graph$treeSubs(node), _List_Cons($author$project$Graph$treeElement(node), withRemainingSoFar));
    }), soFar, remaining);
}, $author$project$Graph$postorderHelp = F2($author$project$Graph$postorderHelp_fn);
var $author$project$Graph$postorder = function (graph) {
    return $author$project$Graph$postorderHelp_fn($author$project$Graph$depthFirstSpanningTree(graph), _List_Nil);
};
var $author$project$Graph$fastDictRangeToConstantInto_fn = function (list, startInclusive, endInclusive, constantValue) {
    fastDictRangeToConstantInto: while (true) {
        if (_Utils_cmp(startInclusive, endInclusive) < 1) {
            var $temp$list = $miniBill$elm_fast_dict$FastDict$insert_fn(endInclusive, constantValue, list), $temp$startInclusive = startInclusive, $temp$endInclusive = endInclusive - 1, $temp$constantValue = constantValue;
            list = $temp$list;
            startInclusive = $temp$startInclusive;
            endInclusive = $temp$endInclusive;
            constantValue = $temp$constantValue;
            continue fastDictRangeToConstantInto;
        }
        else {
            return list;
        }
    }
}, $author$project$Graph$fastDictRangeToConstantInto = F4($author$project$Graph$fastDictRangeToConstantInto_fn);
var $author$project$Graph$fastDictRangeToConstant_fn = function (startInclusive, endInclusive, constantValue) {
    return $author$project$Graph$fastDictRangeToConstantInto_fn($miniBill$elm_fast_dict$FastDict$empty, startInclusive, endInclusive, constantValue);
}, $author$project$Graph$fastDictRangeToConstant = F3($author$project$Graph$fastDictRangeToConstant_fn);
var $author$project$Graph$arrayAccum_fn = function (reduce, initial, max, ies) {
    return {
        co: $elm$core$List$foldl_fn_unwrapped(function (_v0, soFar) {
            var index = _v0.a;
            var foldedForIndexSoFar = _v0.b;
            return $miniBill$elm_fast_dict$FastDict$update_fn(index, function (atIndexOrNothing) {
                return $elm$core$Maybe$Just(A2(reduce, $elm$core$Maybe$withDefault_fn(initial, atIndexOrNothing), foldedForIndexSoFar));
            }, soFar);
        }, $author$project$Graph$fastDictRangeToConstant_fn(0, max, initial), ies),
        bM: max
    };
}, $author$project$Graph$arrayAccum_fn_unwrapped = function (reduce, initial, max, ies) {
    return {
        co: $elm$core$List$foldl_fn_unwrapped(function (_v0, soFar) {
            var index = _v0.a;
            var foldedForIndexSoFar = _v0.b;
            return $miniBill$elm_fast_dict$FastDict$update_fn(index, function (atIndexOrNothing) {
                return $elm$core$Maybe$Just(reduce($elm$core$Maybe$withDefault_fn(initial, atIndexOrNothing), foldedForIndexSoFar));
            }, soFar);
        }, $author$project$Graph$fastDictRangeToConstant_fn(0, max, initial), ies),
        bM: max
    };
}, $author$project$Graph$arrayAccum = F4($author$project$Graph$arrayAccum_fn);
var $author$project$Graph$buildG_fn = function (max, edgesToBuildFrom) {
    return $author$project$Graph$arrayAccum_fn_unwrapped(function (soFar, vertex) {
        return _List_Cons(vertex, soFar);
    }, _List_Nil, max, edgesToBuildFrom);
}, $author$project$Graph$buildG = F2($author$project$Graph$buildG_fn);
var $author$project$Graph$reverseEdges = function (g) {
    return $elm$core$List$foldr_fn(F2(function (from, soFar) {
        var _v0 = $author$project$Graph$arrayFind_fn(from, g);
        if (_v0.$ === 1) {
            return soFar;
        }
        else {
            var tos = _v0.a;
            return $elm$core$List$foldr_fn(F2(function (to, soFarWithTos) {
                return _List_Cons(_Utils_Tuple2(to, from), soFarWithTos);
            }), soFar, tos);
        }
    }), _List_Nil, $author$project$Graph$vertices(g));
};
var $author$project$Graph$transposeG = function (g) {
    return $author$project$Graph$buildG_fn(g.bM, $author$project$Graph$reverseEdges(g));
};
var $author$project$Graph$scc = function (graph) {
    return $author$project$Graph$depthFirstSpanningTreeFromVertices_fn(graph, $elm$core$List$reverse($author$project$Graph$postorder($author$project$Graph$transposeG(graph))));
};
var $author$project$Graph$stronglyConnComponents = function (edges0) {
    if (!edges0.b) {
        return _List_Nil;
    }
    else {
        var _v1 = $author$project$Graph$graphFromEdges(edges0);
        var graph = _v1.a;
        var vertexMap = _v1.b;
        var mentionsItself = function (from) {
            var _v9 = $author$project$Graph$arrayFind_fn(from, graph);
            if (_v9.$ === 1) {
                return false;
            }
            else {
                var tos = _v9.a;
                return $elm$core$List$member_fn(from, tos);
            }
        };
        var dec = F2(function (node, vs) {
            var treeSubsSCC = $elm$core$List$foldr_fn(dec, vs, $author$project$Graph$treeSubs(node));
            var _v2 = $author$project$Graph$arrayFind_fn($author$project$Graph$treeElement(node), vertexMap);
            if (_v2.$ === 1) {
                return treeSubsSCC;
            }
            else {
                var _v3 = _v2.a;
                var elementKeyNode = _v3.a;
                return _List_Cons(elementKeyNode, treeSubsSCC);
            }
        });
        var decode = function (tree) {
            var v = $author$project$Graph$treeElement(tree);
            var _v4 = $author$project$Graph$treeSubs(tree);
            if (!_v4.b) {
                var _v5 = $author$project$Graph$arrayFind_fn(v, vertexMap);
                if (_v5.$ === 1) {
                    return $author$project$Graph$CyclicSCC(_List_Nil);
                }
                else {
                    var _v6 = _v5.a;
                    var vertexKeyNode = _v6.a;
                    return mentionsItself(v) ? $author$project$Graph$CyclicSCC(_List_fromArray([vertexKeyNode])) : $author$project$Graph$AcyclicSCC(vertexKeyNode);
                }
            }
            else {
                var treeSubsNotEmpty = _v4;
                var treeSubsSCC = $elm$core$List$foldr_fn(dec, _List_Nil, treeSubsNotEmpty);
                return $author$project$Graph$CyclicSCC(function () {
                    var _v7 = $author$project$Graph$arrayFind_fn(v, vertexMap);
                    if (_v7.$ === 1) {
                        return treeSubsSCC;
                    }
                    else {
                        var _v8 = _v7.a;
                        var vKeyNode = _v8.a;
                        return _List_Cons(vKeyNode, treeSubsSCC);
                    }
                }());
            }
        };
        return $elm$core$List$map_fn(decode, $author$project$Graph$scc(graph));
    }
};
var $author$project$ElmSyntaxToRust$listFilledMapAndStringJoinWith_fn = function (separator, elementChange, head, tail) {
    return $elm$core$List$foldl_fn_unwrapped(function (element, leftSoFar) {
        return leftSoFar + (separator + (elementChange(element) + ""));
    }, elementChange(head), tail);
}, $author$project$ElmSyntaxToRust$listFilledMapAndStringJoinWith = F4($author$project$ElmSyntaxToRust$listFilledMapAndStringJoinWith_fn);
var $author$project$ElmSyntaxToRust$rustNameWithSpecializedTypes_fn = function (specializedTypes, name) {
    return $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (variable, specializedType, nameSoFar) {
        return nameSoFar + ("__" + (variable + ("_" + function () {
            var specializedTypeRecordFields = specializedType;
            if (!specializedTypeRecordFields.b) {
                return "";
            }
            else {
                var specializedTypeRecordField0 = specializedTypeRecordFields.a;
                var specializedTypeRecordField1Up = specializedTypeRecordFields.b;
                return $author$project$ElmSyntaxToRust$listFilledMapAndStringJoinWith_fn("_", $elm$core$Basics$identity, specializedTypeRecordField0, specializedTypeRecordField1Up);
            }
        }())));
    }), name, specializedTypes);
}, $author$project$ElmSyntaxToRust$rustNameWithSpecializedTypes = F2($author$project$ElmSyntaxToRust$rustNameWithSpecializedTypes_fn);
var $author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords = function (syntaxExpressionNode) {
    syntaxExpressionContainedConstructedRecords: while (true) {
        var _v0 = $stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxExpressionNode);
        switch (_v0.$) {
            case 18:
                var fields = _v0.a;
                return $miniBill$elm_fast_dict$FastSet$insert_fn($elm$core$List$sort($elm$core$List$map_fn(function (_v1) {
                    var _v2 = _v1.b;
                    var _v3 = _v2.a;
                    var name = _v3.b;
                    return name;
                }, fields)), $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn(function (_v4) {
                    var _v5 = _v4.b;
                    var fieldValue = _v5.b;
                    return $author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords(fieldValue);
                }, fields));
            case 0:
                return $miniBill$elm_fast_dict$FastSet$empty;
            case 9:
                return $miniBill$elm_fast_dict$FastSet$empty;
            case 7:
                return $miniBill$elm_fast_dict$FastSet$empty;
            case 8:
                return $miniBill$elm_fast_dict$FastSet$empty;
            case 12:
                return $miniBill$elm_fast_dict$FastSet$empty;
            case 11:
                return $miniBill$elm_fast_dict$FastSet$empty;
            case 3:
                return $miniBill$elm_fast_dict$FastSet$empty;
            case 5:
                return $miniBill$elm_fast_dict$FastSet$empty;
            case 21:
                return $miniBill$elm_fast_dict$FastSet$empty;
            case 6:
                return $miniBill$elm_fast_dict$FastSet$empty;
            case 23:
                return $miniBill$elm_fast_dict$FastSet$empty;
            case 14:
                var inParens = _v0.a;
                var $temp$syntaxExpressionNode = inParens;
                syntaxExpressionNode = $temp$syntaxExpressionNode;
                continue syntaxExpressionContainedConstructedRecords;
            case 20:
                var record = _v0.a;
                var $temp$syntaxExpressionNode = record;
                syntaxExpressionNode = $temp$syntaxExpressionNode;
                continue syntaxExpressionContainedConstructedRecords;
            case 10:
                var inNegation = _v0.a;
                var $temp$syntaxExpressionNode = inNegation;
                syntaxExpressionNode = $temp$syntaxExpressionNode;
                continue syntaxExpressionContainedConstructedRecords;
            case 17:
                var lambda = _v0.a;
                var $temp$syntaxExpressionNode = lambda.O;
                syntaxExpressionNode = $temp$syntaxExpressionNode;
                continue syntaxExpressionContainedConstructedRecords;
            case 2:
                var left = _v0.c;
                var right = _v0.d;
                return $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords(left), $author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords(right));
            case 4:
                var condition = _v0.a;
                var onTrue = _v0.b;
                var onFalse = _v0.c;
                return $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords(onFalse), $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords(onTrue), $author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords(condition)));
            case 13:
                var parts = _v0.a;
                return $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn($author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords, parts);
            case 19:
                var elements = _v0.a;
                return $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn($author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords, elements);
            case 1:
                var applicationParts = _v0.a;
                return $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn($author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords, applicationParts);
            case 22:
                var fields = _v0.b;
                return $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn(function (_v6) {
                    var _v7 = _v6.b;
                    var fieldValue = _v7.b;
                    return $author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords(fieldValue);
                }, fields);
            case 16:
                var caseOf = _v0.a;
                return $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn(function (_v8) {
                    var fieldValue = _v8.b;
                    return $author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords(fieldValue);
                }, caseOf.aL), $author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords(caseOf.O));
            default:
                var letIn = _v0.a;
                return $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn(function (declaration) {
                    var _v9 = $stil4m$elm_syntax$Elm$Syntax$Node$value(declaration);
                    if (!_v9.$) {
                        var _function = _v9.a;
                        return $author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords($stil4m$elm_syntax$Elm$Syntax$Node$value(_function.L).O);
                    }
                    else {
                        var destructuredExpression = _v9.b;
                        return $author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords(destructuredExpression);
                    }
                }, letIn.M), $author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords(letIn.O));
        }
    }
};
var $stil4m$elm_syntax$Elm$Syntax$Node$empty = function (a) {
    return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn($stil4m$elm_syntax$Elm$Syntax$Range$empty, a);
};
var $stil4m$elm_syntax$Elm$Syntax$Node$map_fn = function (f, _v0) {
    var r = _v0.a;
    var a = _v0.b;
    return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(r, f(a));
}, $stil4m$elm_syntax$Elm$Syntax$Node$map = F2($stil4m$elm_syntax$Elm$Syntax$Node$map_fn);
var $author$project$ElmSyntaxToRust$syntaxTypeApplySpecialization_fn = function (specialization, syntaxType) {
    switch (syntaxType.$) {
        case 2:
            return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit;
        case 0:
            var variable = syntaxType.a;
            var _v1 = $miniBill$elm_fast_dict$FastDict$get_fn(variable, specialization);
            if (_v1.$ === 1) {
                return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(variable);
            }
            else {
                var specificSpecialization = _v1.a;
                var fields = specificSpecialization;
                return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record($elm$core$List$map_fn(function (fieldName) {
                    return $stil4m$elm_syntax$Elm$Syntax$Node$empty(_Utils_Tuple2($stil4m$elm_syntax$Elm$Syntax$Node$empty(fieldName), $stil4m$elm_syntax$Elm$Syntax$Node$empty($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(variable + ("_" + $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(fieldName))))));
                }, fields));
            }
        case 1:
            var reference = syntaxType.a;
            var _arguments = syntaxType.b;
            return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed_fn(reference, $elm$core$List$map_fn(function (argument) {
                return $author$project$ElmSyntaxToRust$syntaxTypeNodeApplySpecialization_fn(specialization, argument);
            }, _arguments));
        case 3:
            var parts = syntaxType.a;
            return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled($elm$core$List$map_fn(function (part) {
                return $author$project$ElmSyntaxToRust$syntaxTypeNodeApplySpecialization_fn(specialization, part);
            }, parts));
        case 4:
            var fields = syntaxType.a;
            return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record($elm$core$List$map_fn(function (fieldNode) {
                return $stil4m$elm_syntax$Elm$Syntax$Node$map_fn(function (_v3) {
                    var nameNode = _v3.a;
                    var valueNode = _v3.b;
                    return _Utils_Tuple2(nameNode, $author$project$ElmSyntaxToRust$syntaxTypeNodeApplySpecialization_fn(specialization, valueNode));
                }, fieldNode);
            }, fields));
        case 5:
            var _v4 = syntaxType.a;
            var recordVariableRange = _v4.a;
            var recordVariableName = _v4.b;
            var _v5 = syntaxType.b;
            var fieldsRange = _v5.a;
            var fields = _v5.b;
            var fieldsSpecialized = $elm$core$List$map_fn(function (fieldNode) {
                return $stil4m$elm_syntax$Elm$Syntax$Node$map_fn(function (_v11) {
                    var nameNode = _v11.a;
                    var valueNode = _v11.b;
                    return _Utils_Tuple2(nameNode, $author$project$ElmSyntaxToRust$syntaxTypeNodeApplySpecialization_fn(specialization, valueNode));
                }, fieldNode);
            }, fields);
            var _v6 = $miniBill$elm_fast_dict$FastDict$get_fn(recordVariableName, specialization);
            if (_v6.$ === 1) {
                return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord_fn($stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(recordVariableRange, recordVariableName), $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(fieldsRange, fieldsSpecialized));
            }
            else {
                var specificSpecialization = _v6.a;
                var allFields = specificSpecialization;
                var additionalFields = $elm$core$List$filterMap_fn(function (specializationFieldName) {
                    return $elm$core$List$any_fn(function (_v8) {
                        var _v9 = _v8.b;
                        var _v10 = _v9.a;
                        var fieldName = _v10.b;
                        return _Utils_eq(fieldName, specializationFieldName);
                    }, fields) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just($stil4m$elm_syntax$Elm$Syntax$Node$empty(_Utils_Tuple2($stil4m$elm_syntax$Elm$Syntax$Node$empty(specializationFieldName), $stil4m$elm_syntax$Elm$Syntax$Node$empty($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(recordVariableName + ("_" + $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(specializationFieldName)))))));
                }, allFields);
                return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(_Utils_ap(fieldsSpecialized, additionalFields));
            }
        default:
            var inType = syntaxType.a;
            var outType = syntaxType.b;
            return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation_fn($author$project$ElmSyntaxToRust$syntaxTypeNodeApplySpecialization_fn(specialization, inType), $author$project$ElmSyntaxToRust$syntaxTypeNodeApplySpecialization_fn(specialization, outType));
    }
}, $author$project$ElmSyntaxToRust$syntaxTypeApplySpecialization = F2($author$project$ElmSyntaxToRust$syntaxTypeApplySpecialization_fn);
var $author$project$ElmSyntaxToRust$syntaxTypeNodeApplySpecialization_fn = function (specialization, syntaxTypeNode) {
    return $stil4m$elm_syntax$Elm$Syntax$Node$map_fn(function (syntaxType) {
        return $author$project$ElmSyntaxToRust$syntaxTypeApplySpecialization_fn(specialization, syntaxType);
    }, syntaxTypeNode);
}, $author$project$ElmSyntaxToRust$syntaxTypeNodeApplySpecialization = F2($author$project$ElmSyntaxToRust$syntaxTypeNodeApplySpecialization_fn);
var $author$project$ElmSyntaxToRust$typeAliasDeclaration_fn = function (typeAliasesInModule, inferredTypeAlias) {
    return {
        a: inferredTypeAlias.a,
        o: $elm$core$List$map_fn($author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords, inferredTypeAlias.o),
        n: $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, inferredTypeAlias.n)
    };
}, $author$project$ElmSyntaxToRust$typeAliasDeclaration = F2($author$project$ElmSyntaxToRust$typeAliasDeclaration_fn);
var $author$project$ElmSyntaxToRust$typeContainedRecords = function (_v0) {
    var syntaxType = _v0.b;
    switch (syntaxType.$) {
        case 2:
            return $miniBill$elm_fast_dict$FastSet$empty;
        case 0:
            return $miniBill$elm_fast_dict$FastSet$empty;
        case 6:
            var inType = syntaxType.a;
            var outType = syntaxType.b;
            return $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$typeContainedRecords(inType), $author$project$ElmSyntaxToRust$typeContainedRecords(outType));
        case 3:
            var typeTupleParts = syntaxType.a;
            return $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn($author$project$ElmSyntaxToRust$typeContainedRecords, typeTupleParts);
        case 1:
            var _arguments = syntaxType.b;
            return $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn($author$project$ElmSyntaxToRust$typeContainedRecords, _arguments);
        case 4:
            var fields = syntaxType.a;
            return $miniBill$elm_fast_dict$FastSet$insert_fn($elm$core$List$sort($elm$core$List$map_fn(function (_v2) {
                var _v3 = _v2.b;
                var _v4 = _v3.a;
                var name = _v4.b;
                return name;
            }, fields)), $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn(function (_v5) {
                var _v6 = _v5.b;
                var value = _v6.b;
                return $author$project$ElmSyntaxToRust$typeContainedRecords(value);
            }, fields));
        default:
            var _v7 = syntaxType.b;
            var fields = _v7.b;
            return $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn(function (_v8) {
                var _v9 = _v8.b;
                var value = _v9.b;
                return $author$project$ElmSyntaxToRust$typeContainedRecords(value);
            }, fields);
    }
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionCall = function (a) {
    return { $: 18, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionCaseOf = function (a) {
    return { $: 22, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionIfThenElse = function (a) {
    return { $: 16, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionInfixOperation = function (a) {
    return { $: 15, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionLambda = function (a) {
    return { $: 21, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionLetIn = function (a) {
    return { $: 23, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionList = function (a) {
    return { $: 17, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionNegation = function (a) {
    return { $: 10, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionParenthesized = function (a) {
    return { $: 11, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecord = function (a) {
    return { $: 19, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecordAccess = function (a) {
    return { $: 14, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecordUpdate = function (a) {
    return { $: 20, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionTriple = function (a) {
    return { $: 13, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionTuple = function (a) {
    return { $: 12, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetDestructuring = function (a) {
    return { $: 0, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetValueOrFunctionDeclaration = function (a) {
    return { $: 1, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionListEmpty = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionList(_List_Nil);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternAs = function (a) {
    return { $: 3, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternIgnored = { $: 0 };
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternListCons = function (a) {
    return { $: 11, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternListExact = function (a) {
    return { $: 12, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternParenthesized = function (a) {
    return { $: 2, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternRecord = function (a) {
    return { $: 10, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternTriple = function (a) {
    return { $: 9, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternTuple = function (a) {
    return { $: 8, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternVariant = function (a) {
    return { $: 13, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternListExactEmpty = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternListExact(_List_Nil);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeListList = function (a) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
        c: _List_fromArray([a]),
        b: "List",
        a: "List"
    }));
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes_fn = function (typeChange, patternTypedNode) {
    var _v0 = patternTypedNode.l;
    switch (_v0.$) {
        case 4:
            return patternTypedNode;
        case 5:
            return patternTypedNode;
        case 6:
            return patternTypedNode;
        case 7:
            return patternTypedNode;
        case 0:
            return {
                aN: patternTypedNode.aN,
                n: typeChange(patternTypedNode.n),
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternIgnored
            };
        case 1:
            return {
                aN: patternTypedNode.aN,
                n: typeChange(patternTypedNode.n),
                l: patternTypedNode.l
            };
        case 2:
            var inParens = _v0.a;
            var inParensMapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes_fn(typeChange, inParens);
            return {
                aN: patternTypedNode.aN,
                n: inParensMapped.n,
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternParenthesized(inParensMapped)
            };
        case 3:
            var patternAs = _v0.a;
            var aliasedPatternMapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes_fn(typeChange, patternAs.m);
            return {
                aN: patternTypedNode.aN,
                n: aliasedPatternMapped.n,
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternAs({
                    m: aliasedPatternMapped,
                    bm: { aN: patternAs.bm.aN, n: aliasedPatternMapped.n, l: patternAs.bm.l }
                })
            };
        case 11:
            var patternListCons = _v0.a;
            var headMapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes_fn(typeChange, patternListCons.b0);
            return {
                aN: patternTypedNode.aN,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeListList(headMapped.n),
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternListCons({
                    b0: headMapped,
                    cY: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes_fn(typeChange, patternListCons.cY)
                })
            };
        case 8:
            var patternTuple = _v0.a;
            var part1Mapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes_fn(typeChange, patternTuple.t);
            var part0Mapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes_fn(typeChange, patternTuple.s);
            return {
                aN: patternTypedNode.aN,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({ s: part0Mapped.n, t: part1Mapped.n })),
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternTuple({ s: part0Mapped, t: part1Mapped })
            };
        case 9:
            var patternTriple = _v0.a;
            var part2Mapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes_fn(typeChange, patternTriple.ak);
            var part1Mapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes_fn(typeChange, patternTriple.t);
            var part0Mapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes_fn(typeChange, patternTriple.s);
            return {
                aN: patternTypedNode.aN,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple({ s: part0Mapped.n, t: part1Mapped.n, ak: part2Mapped.n })),
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternTriple({ s: part0Mapped, t: part1Mapped, ak: part2Mapped })
            };
        case 10:
            var patternRecordFields = _v0.a;
            return {
                aN: patternTypedNode.aN,
                n: typeChange(patternTypedNode.n),
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternRecord($elm$core$List$map_fn(function (field) {
                    return {
                        aN: field.aN,
                        n: typeChange(field.n),
                        l: field.l
                    };
                }, patternRecordFields))
            };
        case 12:
            var patternListElements = _v0.a;
            if (!patternListElements.b) {
                return {
                    aN: patternTypedNode.aN,
                    n: typeChange(patternTypedNode.n),
                    l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternListExactEmpty
                };
            }
            else {
                var head = patternListElements.a;
                var tail = patternListElements.b;
                var headMapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes_fn(typeChange, head);
                return {
                    aN: patternTypedNode.aN,
                    n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeListList(headMapped.n),
                    l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternListExact(_List_Cons(headMapped, $elm$core$List$map_fn(function (element) {
                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes_fn(typeChange, element);
                    }, tail)))
                };
            }
        default:
            var patternVariant = _v0.a;
            return {
                aN: patternTypedNode.aN,
                n: typeChange(patternTypedNode.n),
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternVariant({
                    c0: patternVariant.c0,
                    b: patternVariant.b,
                    a: patternVariant.a,
                    K: patternVariant.K,
                    X: $elm$core$List$map_fn(function (argument) {
                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes_fn(typeChange, argument);
                    }, patternVariant.X)
                })
            };
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn = function (typeChange, expressionTypedNode) {
    var _v1 = expressionTypedNode.l;
    switch (_v1.$) {
        case 0:
            return expressionTypedNode;
        case 2:
            return expressionTypedNode;
        case 4:
            return expressionTypedNode;
        case 3:
            return expressionTypedNode;
        case 1:
            return {
                aN: expressionTypedNode.aN,
                n: typeChange(expressionTypedNode.n),
                l: expressionTypedNode.l
            };
        case 6:
            return {
                aN: expressionTypedNode.aN,
                n: typeChange(expressionTypedNode.n),
                l: expressionTypedNode.l
            };
        case 7:
            return {
                aN: expressionTypedNode.aN,
                n: typeChange(expressionTypedNode.n),
                l: expressionTypedNode.l
            };
        case 5:
            return {
                aN: expressionTypedNode.aN,
                n: typeChange(expressionTypedNode.n),
                l: expressionTypedNode.l
            };
        case 8:
            return {
                aN: expressionTypedNode.aN,
                n: typeChange(expressionTypedNode.n),
                l: expressionTypedNode.l
            };
        case 9:
            return {
                aN: expressionTypedNode.aN,
                n: typeChange(expressionTypedNode.n),
                l: expressionTypedNode.l
            };
        case 10:
            var inNegation = _v1.a;
            var inNegationMapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, inNegation);
            return {
                aN: expressionTypedNode.aN,
                n: inNegationMapped.n,
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionNegation(inNegationMapped)
            };
        case 11:
            var inParens = _v1.a;
            var inParensMapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, inParens);
            return {
                aN: expressionTypedNode.aN,
                n: inParensMapped.n,
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionParenthesized(inParensMapped)
            };
        case 14:
            var expressionRecordAccess = _v1.a;
            return {
                aN: expressionTypedNode.aN,
                n: typeChange(expressionTypedNode.n),
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecordAccess({
                    cs: expressionRecordAccess.cs,
                    cO: expressionRecordAccess.cO,
                    aY: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, expressionRecordAccess.aY)
                })
            };
        case 15:
            var expressionInfixOperation = _v1.a;
            var rightMapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, expressionInfixOperation.cV);
            var leftMapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, expressionInfixOperation.cw);
            var fullTypeMapped = typeChange(expressionTypedNode.n);
            return {
                aN: expressionTypedNode.aN,
                n: fullTypeMapped,
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionInfixOperation({
                    cw: leftMapped,
                    er: {
                        b: expressionInfixOperation.er.b,
                        cX: expressionInfixOperation.er.cX,
                        n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                            e: leftMapped.n,
                            d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: rightMapped.n, d: fullTypeMapped }))
                        }))
                    },
                    cV: rightMapped
                })
            };
        case 12:
            var expressionTuple = _v1.a;
            var part1Mapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, expressionTuple.t);
            var part0Mapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, expressionTuple.s);
            return {
                aN: expressionTypedNode.aN,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({ s: part0Mapped.n, t: part1Mapped.n })),
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionTuple({ s: part0Mapped, t: part1Mapped })
            };
        case 13:
            var expressionTriple = _v1.a;
            var part2Mapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, expressionTriple.ak);
            var part1Mapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, expressionTriple.t);
            var part0Mapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, expressionTriple.s);
            return {
                aN: expressionTypedNode.aN,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple({ s: part0Mapped.n, t: part1Mapped.n, ak: part2Mapped.n })),
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionTriple({ s: part0Mapped, t: part1Mapped, ak: part2Mapped })
            };
        case 16:
            var expressionIfThenElse = _v1.a;
            var onTrueMapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, expressionIfThenElse.aC);
            return {
                aN: expressionTypedNode.aN,
                n: onTrueMapped.n,
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionIfThenElse({
                    aA: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, expressionIfThenElse.aA),
                    aB: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, expressionIfThenElse.aB),
                    aC: onTrueMapped
                })
            };
        case 17:
            var expressionListElements = _v1.a;
            if (!expressionListElements.b) {
                return {
                    aN: expressionTypedNode.aN,
                    n: typeChange(expressionTypedNode.n),
                    l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionListEmpty
                };
            }
            else {
                var head = expressionListElements.a;
                var tail = expressionListElements.b;
                var headMapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, head);
                return {
                    aN: expressionTypedNode.aN,
                    n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeListList(headMapped.n),
                    l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionList(_List_Cons(headMapped, $elm$core$List$map_fn(function (element) {
                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, element);
                    }, tail)))
                };
            }
        case 18:
            var expressionCall = _v1.a;
            return {
                aN: expressionTypedNode.aN,
                n: typeChange(expressionTypedNode.n),
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionCall({
                    dR: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, expressionCall.dR),
                    dS: $elm$core$List$map_fn(function (argument) {
                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, argument);
                    }, expressionCall.dS),
                    w: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, expressionCall.w)
                })
            };
        case 19:
            var expressionRecordFields = _v1.a;
            return {
                aN: expressionTypedNode.aN,
                n: typeChange(expressionTypedNode.n),
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecord($elm$core$List$map_fn(function (field) {
                    return {
                        a: field.a,
                        fJ: field.fJ,
                        aN: field.aN,
                        l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, field.l)
                    };
                }, expressionRecordFields))
            };
        case 20:
            var expressionRecordUpdate = _v1.a;
            var recordVariableTypeMapped = typeChange(expressionRecordUpdate.V.n);
            return {
                aN: expressionTypedNode.aN,
                n: recordVariableTypeMapped,
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecordUpdate({
                    d4: {
                        a: expressionRecordUpdate.d4.a,
                        fJ: expressionRecordUpdate.d4.fJ,
                        aN: expressionRecordUpdate.d4.aN,
                        l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, expressionRecordUpdate.d4.l)
                    },
                    d5: $elm$core$List$map_fn(function (field) {
                        return {
                            a: field.a,
                            fJ: field.fJ,
                            aN: field.aN,
                            l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, field.l)
                        };
                    }, expressionRecordUpdate.d5),
                    V: { aN: expressionRecordUpdate.V.aN, n: recordVariableTypeMapped, l: expressionRecordUpdate.V.l }
                })
            };
        case 21:
            var expressionLambda = _v1.a;
            var resultMapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, expressionLambda.h);
            var withParameter1UpMapped = $elm$core$List$foldr_fn(F2(function (argument, soFar) {
                var parameterMapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes_fn(typeChange, argument);
                return {
                    db: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: parameterMapped.n, d: soFar.db })),
                    dn: _List_Cons(parameterMapped, soFar.dn)
                };
            }), { db: resultMapped.n, dn: _List_Nil }, expressionLambda.dC);
            var parameter0Mapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes_fn(typeChange, expressionLambda.dm);
            return {
                aN: expressionTypedNode.aN,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: parameter0Mapped.n, d: withParameter1UpMapped.db })),
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionLambda({ dm: parameter0Mapped, dC: withParameter1UpMapped.dn, h: resultMapped })
            };
        case 22:
            var expressionCaseOf = _v1.a;
            var case0ResultMapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, expressionCaseOf.ar.h);
            return {
                aN: expressionTypedNode.aN,
                n: case0ResultMapped.n,
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionCaseOf({
                    ar: {
                        m: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes_fn(typeChange, expressionCaseOf.ar.m),
                        h: case0ResultMapped
                    },
                    as: $elm$core$List$map_fn(function (case_) {
                        return {
                            m: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes_fn(typeChange, case_.m),
                            h: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, case_.h)
                        };
                    }, expressionCaseOf.as),
                    at: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, expressionCaseOf.at)
                })
            };
        default:
            var expressionLetIn = _v1.a;
            var resultMapped = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, expressionLetIn.h);
            return {
                aN: expressionTypedNode.aN,
                n: resultMapped.n,
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionLetIn({
                    c4: {
                        L: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationMapTypes_fn(typeChange, expressionLetIn.c4.L),
                        aN: expressionLetIn.c4.aN
                    },
                    c5: $elm$core$List$map_fn(function (letDeclarationAndRange) {
                        return {
                            L: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationMapTypes_fn(typeChange, letDeclarationAndRange.L),
                            aN: letDeclarationAndRange.aN
                        };
                    }, expressionLetIn.c5),
                    h: resultMapped
                })
            };
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationMapTypes_fn = function (typeChange, expressionLetDeclaration) {
    if (!expressionLetDeclaration.$) {
        var letDestructuring = expressionLetDeclaration.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetDestructuring({
            O: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, letDestructuring.O),
            m: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes_fn(typeChange, letDestructuring.m)
        });
    }
    else {
        var letValueOrFunction = expressionLetDeclaration.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetValueOrFunctionDeclaration({
            a: letValueOrFunction.a,
            fJ: letValueOrFunction.fJ,
            o: $elm$core$List$map_fn(function (argument) {
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes_fn(typeChange, argument);
            }, letValueOrFunction.o),
            h: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(typeChange, letValueOrFunction.h),
            cW: letValueOrFunction.cW,
            n: typeChange(letValueOrFunction.n)
        });
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationMapTypes = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationMapTypes_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn = function (variableMap, type_) {
    if (!type_.$) {
        var variable = type_.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(variableMap(variable));
    }
    else {
        var typeNotVariable = type_.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableMapVariables_fn(variableMap, typeNotVariable));
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableMapVariables_fn = function (variableMap, typeNotVariable) {
    switch (typeNotVariable.$) {
        case 0:
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit;
        case 6:
            var typeFunction = typeNotVariable.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(variableMap, typeFunction.e),
                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(variableMap, typeFunction.d)
            });
        case 2:
            var typeTuple = typeNotVariable.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({
                s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(variableMap, typeTuple.s),
                t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(variableMap, typeTuple.t)
            });
        case 3:
            var typeTriple = typeNotVariable.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple({
                s: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(variableMap, typeTriple.s),
                t: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(variableMap, typeTriple.t),
                ak: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(variableMap, typeTriple.ak)
            });
        case 1:
            var typeConstruct = typeNotVariable.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                c: $elm$core$List$map_fn(function (argument) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(variableMap, argument);
                }, typeConstruct.c),
                b: typeConstruct.b,
                a: typeConstruct.a
            });
        case 4:
            var typeRecordFields = typeNotVariable.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord($miniBill$elm_fast_dict$FastDict$map_fn(F2(function (_v1, fieldValue) {
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(variableMap, fieldValue);
            }), typeRecordFields));
        default:
            var typeRecordExtension = typeNotVariable.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension({
                F: $miniBill$elm_fast_dict$FastDict$map_fn(F2(function (_v2, fieldValue) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(variableMap, fieldValue);
                }), typeRecordExtension.F),
                V: variableMap(typeRecordExtension.V)
            });
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableMapVariables = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableMapVariables_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypeVariables_fn = function (typeVariableChange, expressionTypedNode) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypes_fn(function (type_) {
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(typeVariableChange, type_);
    }, expressionTypedNode);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypeVariables = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypeVariables_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypeVariables_fn = function (typeVariableChange, patternTypedNode) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypes_fn(function (type_) {
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(typeVariableChange, type_);
    }, patternTypedNode);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypeVariables = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypeVariables_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$declarationValueOrFunctionInfoMapTypeVariables_fn = function (variableChange, valueOrFunctionDeclaration) {
    return {
        cM: valueOrFunctionDeclaration.cM,
        a: valueOrFunctionDeclaration.a,
        fJ: valueOrFunctionDeclaration.fJ,
        o: $elm$core$List$map_fn(function (argument) {
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeMapTypeVariables_fn(variableChange, argument);
        }, valueOrFunctionDeclaration.o),
        h: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeMapTypeVariables_fn(variableChange, valueOrFunctionDeclaration.h),
        cW: valueOrFunctionDeclaration.cW,
        n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(variableChange, valueOrFunctionDeclaration.n)
    };
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$declarationValueOrFunctionInfoMapTypeVariables = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$declarationValueOrFunctionInfoMapTypeVariables_fn);
var $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$compare_fn = function (a, b) {
    return ((a.f.cf.bu - b.f.cf.bu) < 0) ? 0 : (((a.f.cf.bu - b.f.cf.bu) > 0) ? 2 : (((a.f.cf.cJ - b.f.cf.cJ) < 0) ? 0 : (((a.f.cf.cJ - b.f.cf.cJ) > 0) ? 2 : (((a.f.b_.bu - b.f.b_.bu) < 0) ? 0 : (((a.f.b_.bu - b.f.b_.bu) > 0) ? 2 : (((a.f.b_.cJ - b.f.b_.cJ) < 0) ? 0 : (((a.f.b_.cJ - b.f.b_.cJ) > 0) ? 2 : _Utils_compare_fn(a.a, b.a))))))));
}, $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$compare = F2($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$compare_fn);
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$getInner_fn = function (targetKey, dict) {
    getInner: while (true) {
        if (dict.$ === 1) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            var _v1 = $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$compare_fn(targetKey, key);
            switch (_v1) {
                case 0:
                    var $temp$targetKey = targetKey, $temp$dict = left;
                    targetKey = $temp$targetKey;
                    dict = $temp$dict;
                    continue getInner;
                case 1:
                    return $elm$core$Maybe$Just(value);
                default:
                    var $temp$targetKey = targetKey, $temp$dict = right;
                    targetKey = $temp$targetKey;
                    dict = $temp$dict;
                    continue getInner;
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$getInner = F2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$getInner_fn);
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get_fn = function (targetKey, _v0) {
    var dict = _v0.b;
    return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$getInner_fn(targetKey, dict);
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get = F2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get_fn);
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$anyInner_fn = function (isNeedle, dict) {
    anyInner: while (true) {
        if (dict.$ === 1) {
            return false;
        }
        else {
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            if (A2(isNeedle, key, value) || $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$anyInner_fn(isNeedle, left)) {
                return true;
            }
            else {
                var $temp$isNeedle = isNeedle, $temp$dict = right;
                isNeedle = $temp$isNeedle;
                dict = $temp$dict;
                continue anyInner;
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$anyInner_fn_unwrapped = function (isNeedle, dict) {
    anyInner: while (true) {
        if (dict.$ === 1) {
            return false;
        }
        else {
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            if (isNeedle(key, value) || $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$anyInner_fn_unwrapped(isNeedle, left)) {
                return true;
            }
            else {
                var $temp$isNeedle = isNeedle, $temp$dict = right;
                isNeedle = $temp$isNeedle;
                dict = $temp$dict;
                continue anyInner;
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$anyInner = F2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$anyInner_fn);
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$any_fn = function (isNeedle, _v0) {
    var dict = _v0.b;
    return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$anyInner_fn(isNeedle, dict);
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$any = F2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$any_fn);
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$DictByTypeVariableFromContext_fn = function (a, b) {
    return { $: 0, a: a, b: b };
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$DictByTypeVariableFromContext = F2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$DictByTypeVariableFromContext_fn);
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$Leaf = { $: 1 };
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty = $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$DictByTypeVariableFromContext_fn(0, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$Leaf);
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlInner_fn = function (func, acc, dict) {
    foldlInner: while (true) {
        if (dict.$ === 1) {
            return acc;
        }
        else {
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            var $temp$func = func, $temp$acc = A3(func, key, value, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlInner_fn(func, acc, left)), $temp$dict = right;
            func = $temp$func;
            acc = $temp$acc;
            dict = $temp$dict;
            continue foldlInner;
        }
    }
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlInner_fn_unwrapped = function (func, acc, dict) {
    foldlInner: while (true) {
        if (dict.$ === 1) {
            return acc;
        }
        else {
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            var $temp$func = func, $temp$acc = func(key, value, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlInner_fn_unwrapped(func, acc, left)), $temp$dict = right;
            func = $temp$func;
            acc = $temp$acc;
            dict = $temp$dict;
            continue foldlInner;
        }
    }
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlInner = F3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlInner_fn);
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldl_fn = function (func, acc, _v0) {
    var dict = _v0.b;
    return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlInner_fn(func, acc, dict);
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldl = F3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldl_fn);
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode_fn = function (a, b, c, d, e) {
    return { $: 0, a: a, b: b, c: c, d: d, e: e };
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode = F5($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode_fn);
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$balance_fn = function (color, key, value, left, right) {
    if ((!right.$) && right.a) {
        var rK = right.b;
        var rV = right.c;
        var rLeft = right.d;
        var rRight = right.e;
        if ((!left.$) && left.a) {
            var lK = left.b;
            var lV = left.c;
            var lLeft = left.d;
            var lRight = left.e;
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode_fn(true, key, value, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode_fn(false, lK, lV, lLeft, lRight), $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode_fn(false, rK, rV, rLeft, rRight));
        }
        else {
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode_fn(color, rK, rV, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode_fn(true, key, value, left, rLeft), rRight);
        }
    }
    else {
        if ((((!left.$) && left.a) && (!left.d.$)) && left.d.a) {
            var lK = left.b;
            var lV = left.c;
            var _v3 = left.d;
            var llK = _v3.b;
            var llV = _v3.c;
            var llLeft = _v3.d;
            var llRight = _v3.e;
            var lRight = left.e;
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode_fn(true, lK, lV, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode_fn(false, llK, llV, llLeft, llRight), $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode_fn(false, key, value, lRight, right));
        }
        else {
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode_fn(color, key, value, left, right);
        }
    }
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$balance = F5($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$balance_fn);
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertHelpNoReplace_fn = function (key, value, dict) {
    if (dict.$ === 1) {
        return $elm$core$Maybe$Just($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode_fn(true, key, value, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$Leaf, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$Leaf));
    }
    else {
        var nColor = dict.a;
        var nKey = dict.b;
        var nValue = dict.c;
        var nLeft = dict.d;
        var nRight = dict.e;
        var _v1 = $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$compare_fn(key, nKey);
        switch (_v1) {
            case 0:
                var _v2 = $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertHelpNoReplace_fn(key, value, nLeft);
                if (!_v2.$) {
                    var newLeft = _v2.a;
                    return $elm$core$Maybe$Just($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$balance_fn(nColor, nKey, nValue, newLeft, nRight));
                }
                else {
                    return $elm$core$Maybe$Nothing;
                }
            case 1:
                return $elm$core$Maybe$Nothing;
            default:
                var _v3 = $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertHelpNoReplace_fn(key, value, nRight);
                if (!_v3.$) {
                    var newRight = _v3.a;
                    return $elm$core$Maybe$Just($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$balance_fn(nColor, nKey, nValue, nLeft, newRight));
                }
                else {
                    return $elm$core$Maybe$Nothing;
                }
        }
    }
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertHelpNoReplace = F3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertHelpNoReplace_fn);
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setRootBlack = function (dict) {
    if ((!dict.$) && dict.a) {
        var k = dict.b;
        var v = dict.c;
        var l = dict.d;
        var r = dict.e;
        return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode_fn(false, k, v, l, r);
    }
    else {
        var x = dict;
        return x;
    }
};
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace_fn = function (key, value, orig) {
    var sz = orig.a;
    var dict = orig.b;
    var _v0 = $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertHelpNoReplace_fn(key, value, dict);
    if (!_v0.$) {
        var result = _v0.a;
        return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$DictByTypeVariableFromContext_fn(sz + 1, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setRootBlack(result));
    }
    else {
        return orig;
    }
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace = F3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$nameDisambiguateWithIndexBy_fn = function (index, alreadyExists, currentName) {
    nameDisambiguateWithIndexBy: while (true) {
        var indexedCurrentName = function () {
            if (!index) {
                return currentName;
            }
            else {
                var indexAtLeast1 = index;
                return currentName + ($elm$core$String$fromInt(indexAtLeast1) + "");
            }
        }();
        if (alreadyExists(indexedCurrentName)) {
            var $temp$index = index + 1, $temp$alreadyExists = alreadyExists, $temp$currentName = currentName;
            index = $temp$index;
            alreadyExists = $temp$alreadyExists;
            currentName = $temp$currentName;
            continue nameDisambiguateWithIndexBy;
        }
        else {
            return indexedCurrentName;
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$nameDisambiguateWithIndexBy = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$nameDisambiguateWithIndexBy_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$nameDisambiguateBy_fn = function (alreadyExists, currentName) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$nameDisambiguateWithIndexBy_fn(0, alreadyExists, currentName);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$nameDisambiguateBy = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$nameDisambiguateBy_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariablesFromContextToDisambiguationLookup = function (variables) {
    return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldl_fn(F3(function (variable, _v0, soFar) {
        var alreadyExists = function (toDisambiguate) {
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$any_fn(F2(function (_v1, diambiguatedVariableSoFar) {
                return _Utils_eq(diambiguatedVariableSoFar, toDisambiguate);
            }), soFar);
        };
        var variableAsDisambiguatedString = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$nameDisambiguateBy_fn(alreadyExists, variable.a);
        return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace_fn(variable, variableAsDisambiguatedString, soFar);
    }), $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty, variables);
};
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn = function (t1, t2) {
    var s1 = t1.a;
    var s2 = t2.a;
    return ((s1 - s2) > 0) ? $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldl_fn($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace, t1, t2) : $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldl_fn($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace, t2, t1);
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion = F2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToTypeVariableFromContextSetsAndUnify_fn = function (elementToSet, elements) {
    return $elm$core$List$foldl_fn_unwrapped(function (element, soFar) {
        return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn(soFar, elementToSet(element));
    }, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty, elements);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToTypeVariableFromContextSetsAndUnify = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToTypeVariableFromContextSetsAndUnify_fn);
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$singleton_fn = function (key, value) {
    return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$DictByTypeVariableFromContext_fn(1, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode_fn(false, key, value, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$Leaf, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$Leaf));
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$singleton = F2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$singleton_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables = function (type_) {
    if (!type_.$) {
        var variable = type_.a;
        return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$singleton_fn(variable, 0);
    }
    else {
        var typeNotVariable = type_.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableContainedVariables(typeNotVariable);
    }
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableContainedVariables = function (typeNotVariable) {
    switch (typeNotVariable.$) {
        case 0:
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
        case 6:
            var typeFunction = typeNotVariable.a;
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(typeFunction.e), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(typeFunction.d));
        case 2:
            var typeTuple = typeNotVariable.a;
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(typeTuple.s), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(typeTuple.t));
        case 3:
            var typeTriple = typeNotVariable.a;
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(typeTriple.ak), $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(typeTriple.t), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(typeTriple.s)));
        case 1:
            var typeConstruct = typeNotVariable.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToTypeVariableFromContextSetsAndUnify_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables, typeConstruct.c);
        case 4:
            var typeRecordFields = typeNotVariable.a;
            return $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (_v1, value, soFar) {
                return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn(soFar, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(value));
            }), $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty, typeRecordFields);
        default:
            var typeRecordExtension = typeNotVariable.a;
            return $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (_v2, value, soFar) {
                return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn(soFar, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(value));
            }), $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$singleton_fn(typeRecordExtension.V, 0), typeRecordExtension.F);
    }
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternContainedTypeVariables = function (pattern) {
    switch (pattern.$) {
        case 0:
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
        case 4:
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
        case 5:
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
        case 6:
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
        case 7:
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
        case 1:
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
        case 2:
            var inParens = pattern.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(inParens);
        case 3:
            var patternAs = pattern.a;
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(patternAs.bm.n), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(patternAs.m));
        case 8:
            var parts = pattern.a;
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(parts.s), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(parts.t));
        case 9:
            var parts = pattern.a;
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(parts.ak), $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(parts.t), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(parts.s)));
        case 11:
            var patternListCons = pattern.a;
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(patternListCons.b0), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(patternListCons.cY));
        case 12:
            var elements = pattern.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToTypeVariableFromContextSetsAndUnify_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables, elements);
        case 13:
            var patternVariant = pattern.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToTypeVariableFromContextSetsAndUnify_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables, patternVariant.X);
        default:
            var fields = pattern.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToTypeVariableFromContextSetsAndUnify_fn(function (fieldTypedNode) {
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(fieldTypedNode.n);
            }, fields);
    }
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables = function (patternTypedNode) {
    return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(patternTypedNode.n), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternContainedTypeVariables(patternTypedNode.l));
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionCaseOfCaseContainedTypeVariables = function (syntaxCase) {
    return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(syntaxCase.m), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(syntaxCase.h));
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionContainedTypeVariables = function (expression) {
    switch (expression.$) {
        case 0:
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
        case 1:
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
        case 2:
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
        case 3:
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
        case 4:
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
        case 6:
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
        case 5:
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
        case 7:
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
        case 8:
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
        case 9:
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty;
        case 10:
            var negated = expression.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(negated);
        case 11:
            var inParens = expression.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(inParens);
        case 14:
            var expressionRecordAccess = expression.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(expressionRecordAccess.aY);
        case 15:
            var expressionInfixOperation = expression.a;
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(expressionInfixOperation.cw), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(expressionInfixOperation.cV));
        case 12:
            var parts = expression.a;
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(parts.s), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(parts.t));
        case 13:
            var parts = expression.a;
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(parts.ak), $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(parts.t), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(parts.s)));
        case 16:
            var expressionIfThenElse = expression.a;
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(expressionIfThenElse.aB), $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(expressionIfThenElse.aC), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(expressionIfThenElse.aA)));
        case 17:
            var elements = expression.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToTypeVariableFromContextSetsAndUnify_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables, elements);
        case 19:
            var fields = expression.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToTypeVariableFromContextSetsAndUnify_fn(function (field) {
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(field.l);
            }, fields);
        case 18:
            var expressionCall = expression.a;
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToTypeVariableFromContextSetsAndUnify_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables, expressionCall.dS), $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(expressionCall.dR), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(expressionCall.w)));
        case 21:
            var expressionLambda = expression.a;
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(expressionLambda.h), $elm$core$List$foldl_fn_unwrapped(function (parameter, soFar) {
                return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn(soFar, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(parameter));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(expressionLambda.dm), expressionLambda.dC));
        case 20:
            var expressionRecordUpdate = expression.a;
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($elm$core$List$foldl_fn_unwrapped(function (field, soFar) {
                return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn(soFar, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(field.l));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(expressionRecordUpdate.d4.l), expressionRecordUpdate.d5), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(expressionRecordUpdate.V.n));
        case 22:
            var expressionCaseOf = expression.a;
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($elm$core$List$foldl_fn_unwrapped(function (case_, soFar) {
                return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn(soFar, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionCaseOfCaseContainedTypeVariables(case_));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionCaseOfCaseContainedTypeVariables(expressionCaseOf.ar), expressionCaseOf.as), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(expressionCaseOf.at));
        default:
            var expressionLetIn = expression.a;
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(expressionLetIn.h), $elm$core$List$foldl_fn_unwrapped(function (letDeclaration, soFar) {
                return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn(soFar, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationContainedTypeVariables(letDeclaration.L));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationContainedTypeVariables(expressionLetIn.c4.L), expressionLetIn.c5));
    }
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables = function (expressionTypedNode) {
    return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(expressionTypedNode.n), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionContainedTypeVariables(expressionTypedNode.l));
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationContainedTypeVariables = function (letDeclaration) {
    if (!letDeclaration.$) {
        var letDestructuring = letDeclaration.a;
        return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables(letDestructuring.m), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(letDestructuring.O));
    }
    else {
        var letValueOrFunctionDeclaration = letDeclaration.a;
        return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(letValueOrFunctionDeclaration.h), $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToTypeVariableFromContextSetsAndUnify_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables, letValueOrFunctionDeclaration.o), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(letValueOrFunctionDeclaration.n)));
    }
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueOrFunctionDeclarationContainedTypeVariables = function (declarationValueOrFunction) {
    return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeContainedTypeVariables(declarationValueOrFunction.h), $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(declarationValueOrFunction.n), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToTypeVariableFromContextSetsAndUnify_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeContainedTypeVariables, declarationValueOrFunction.o)));
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$declarationValueOrFunctionDisambiguateTypeVariables = function (declarationValueOrFunctionInfo) {
    var globalTypeVariableDisambiguationLookup = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariablesFromContextToDisambiguationLookup($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueOrFunctionDeclarationContainedTypeVariables(declarationValueOrFunctionInfo));
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$declarationValueOrFunctionInfoMapTypeVariables_fn(function (variable) {
        return {
            a: $elm$core$Maybe$withDefault_fn("thisIsABugInDisambiguationPleaseReportToElmSyntaxTypeInfer", $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get_fn(variable, globalTypeVariableDisambiguationLookup)),
            f: variable.f
        };
    }, declarationValueOrFunctionInfo);
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$everywhereRange = {
    b_: { cJ: 10000000, bu: 10000000 },
    cf: { cJ: 1, bu: 1 }
};
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$getMinKeyInner = function (dict) {
    getMinKeyInner: while (true) {
        if (dict.$ === 1) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var k = dict.b;
            var left = dict.d;
            if (left.$ === 1) {
                return $elm$core$Maybe$Just(k);
            }
            else {
                var $temp$dict = left;
                dict = $temp$dict;
                continue getMinKeyInner;
            }
        }
    }
};
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$getMinKey = function (_v0) {
    var dict = _v0.b;
    return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$getMinKeyInner(dict);
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraintToString = function (constraint) {
    switch (constraint) {
        case 0:
            return "number";
        case 1:
            return "appendable";
        case 2:
            return "comparable";
        default:
            return "compappend";
    }
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariablesCreateCondensedVariable = function (set) {
    var _v0 = set.aP;
    if (!_v0.$) {
        var unifiedConstraint = _v0.a;
        return $elm$core$Result$Ok({
            a: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraintToString(unifiedConstraint),
            f: set.aD
        });
    }
    else {
        var _v1 = $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$getMinKey(set.aJ);
        if (_v1.$ === 1) {
            return $elm$core$Result$Err("implementation bug: equivalent variable set is empty");
        }
        else {
            var variable0 = _v1.a;
            return $elm$core$Result$Ok({ a: variable0.a, f: set.aD });
        }
    }
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$createEquivalentVariablesToCondensedVariableLookup = function (equivalentVariables) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom_fn_unwrapped($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty, function (equivalentVariableSet, soFar) {
        return $elm$core$Result$map_fn(function (unifiedVariable) {
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldl_fn(F3(function (variable, _v0, soFarInSet) {
                return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace_fn(variable, unifiedVariable, soFarInSet);
            }), soFar, equivalentVariableSet.aJ);
        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariablesCreateCondensedVariable(equivalentVariableSet));
    }, equivalentVariables);
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationToInfoString = function (location) {
    return $elm$core$String$fromInt(location.bu) + (":" + $elm$core$String$fromInt(location.cJ));
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString = function (range) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationToInfoString(range.cf) + ("-" + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationToInfoString(range.b_));
};
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlWhileOkFromInner_fn = function (func, initialFolded, dict) {
    foldlWhileOkFromInner: while (true) {
        if (dict.$ === 1) {
            return $elm$core$Result$Ok(initialFolded);
        }
        else {
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            var _v1 = $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlWhileOkFromInner_fn(func, initialFolded, left);
            if (_v1.$ === 1) {
                var error = _v1.a;
                return $elm$core$Result$Err(error);
            }
            else {
                var leftFolded = _v1.a;
                var _v2 = A3(func, key, value, leftFolded);
                if (_v2.$ === 1) {
                    var error = _v2.a;
                    return $elm$core$Result$Err(error);
                }
                else {
                    var leftAndCurrentFolded = _v2.a;
                    var $temp$func = func, $temp$initialFolded = leftAndCurrentFolded, $temp$dict = right;
                    func = $temp$func;
                    initialFolded = $temp$initialFolded;
                    dict = $temp$dict;
                    continue foldlWhileOkFromInner;
                }
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlWhileOkFromInner_fn_unwrapped = function (func, initialFolded, dict) {
    foldlWhileOkFromInner: while (true) {
        if (dict.$ === 1) {
            return $elm$core$Result$Ok(initialFolded);
        }
        else {
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            var _v1 = $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlWhileOkFromInner_fn_unwrapped(func, initialFolded, left);
            if (_v1.$ === 1) {
                var error = _v1.a;
                return $elm$core$Result$Err(error);
            }
            else {
                var leftFolded = _v1.a;
                var _v2 = func(key, value, leftFolded);
                if (_v2.$ === 1) {
                    var error = _v2.a;
                    return $elm$core$Result$Err(error);
                }
                else {
                    var leftAndCurrentFolded = _v2.a;
                    var $temp$func = func, $temp$initialFolded = leftAndCurrentFolded, $temp$dict = right;
                    func = $temp$func;
                    initialFolded = $temp$initialFolded;
                    dict = $temp$dict;
                    continue foldlWhileOkFromInner;
                }
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlWhileOkFromInner = F3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlWhileOkFromInner_fn);
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlWhileOkFrom_fn = function (initialFolded, reduceToResult, _v0) {
    var dict = _v0.b;
    return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlWhileOkFromInner_fn(reduceToResult, initialFolded, dict);
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlWhileOkFrom = F3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlWhileOkFrom_fn);
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$size = function (_v0) {
    var sz = _v0.a;
    return sz;
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$allUnchangedTrueArgumentsListEmpty = { u: true, c: _List_Nil };
var $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$locationEquals_fn = function (a, b) {
    return (!(a.bu - b.bu)) && (!(a.cJ - b.cJ));
}, $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$locationEquals = F2($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$locationEquals_fn);
var $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$rangeEquals_fn = function (a, b) {
    return $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$locationEquals_fn(a.cf, b.cf) && $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$locationEquals_fn(a.b_, b.b_);
}, $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$rangeEquals = F2($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$rangeEquals_fn);
var $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$equals_fn = function (a, b) {
    return $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$rangeEquals_fn(a.f, b.f) && _Utils_eq(a.a, b.a);
}, $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$equals = F2($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$equals_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictFoldlWhileOkFrom_fn = function (initialFolded, reduceToResult, fastDict) {
    return $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (key, value, soFarOrError) {
        if (soFarOrError.$ === 1) {
            var error = soFarOrError.a;
            return $elm$core$Result$Err(error);
        }
        else {
            var soFar = soFarOrError.a;
            return A3(reduceToResult, key, value, soFar);
        }
    }), $elm$core$Result$Ok(initialFolded), fastDict);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictFoldlWhileOkFrom_fn_unwrapped = function (initialFolded, reduceToResult, fastDict) {
    return $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (key, value, soFarOrError) {
        if (soFarOrError.$ === 1) {
            var error = soFarOrError.a;
            return $elm$core$Result$Err(error);
        }
        else {
            var soFar = soFarOrError.a;
            return reduceToResult(key, value, soFar);
        }
    }), $elm$core$Result$Ok(initialFolded), fastDict);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictFoldlWhileOkFrom = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictFoldlWhileOkFrom_fn);
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$isEmpty = function (_v0) {
    var dictSize = _v0.a;
    return !dictSize;
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldl2From_fn = function (initialState, aList, bList, reduce) {
    listFoldl2From: while (true) {
        if (!aList.b) {
            return initialState;
        }
        else {
            var aHead = aList.a;
            var aTail = aList.b;
            if (!bList.b) {
                return initialState;
            }
            else {
                var bHead = bList.a;
                var bTail = bList.b;
                var $temp$initialState = A3(reduce, aHead, bHead, initialState), $temp$aList = aTail, $temp$bList = bTail, $temp$reduce = reduce;
                initialState = $temp$initialState;
                aList = $temp$aList;
                bList = $temp$bList;
                reduce = $temp$reduce;
                continue listFoldl2From;
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldl2From_fn_unwrapped = function (initialState, aList, bList, reduce) {
    listFoldl2From: while (true) {
        if (!aList.b) {
            return initialState;
        }
        else {
            var aHead = aList.a;
            var aTail = aList.b;
            if (!bList.b) {
                return initialState;
            }
            else {
                var bHead = bList.a;
                var bTail = bList.b;
                var $temp$initialState = reduce(aHead, bHead, initialState), $temp$aList = aTail, $temp$bList = bTail, $temp$reduce = reduce;
                initialState = $temp$initialState;
                aList = $temp$aList;
                bList = $temp$bList;
                reduce = $temp$reduce;
                continue listFoldl2From;
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldl2From = F4($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldl2From_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn = function (initialOkFolded, reduceOnOk, list) {
    return $elm$core$List$foldr_fn(F2(function (element, soFar) {
        if (soFar.$ === 1) {
            var error = soFar.a;
            return $elm$core$Result$Err(error);
        }
        else {
            var soFarOk = soFar.a;
            return A2(reduceOnOk, element, soFarOk);
        }
    }), $elm$core$Result$Ok(initialOkFolded), list);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped = function (initialOkFolded, reduceOnOk, list) {
    return $elm$core$List$foldr_fn(F2(function (element, soFar) {
        if (soFar.$ === 1) {
            var error = soFar.a;
            return $elm$core$Result$Err(error);
        }
        else {
            var soFarOk = soFar.a;
            return reduceOnOk(element, soFarOk);
        }
    }), $elm$core$Result$Ok(initialOkFolded), list);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$parameterToVariableDictEmptyParameterToTypeNotVariableDictEmpty = { b8: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty, cz: $miniBill$elm_fast_dict$FastDict$empty };
var $elm$core$String$concat = function (strings) {
    return $elm$core$String$join_fn("", strings);
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableFromContextToInfoString = function (typeVariableFromContext) {
    return typeVariableFromContext.a + ("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(typeVariableFromContext.f) + ")"));
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString = function (typeNotVariable) {
    switch (typeNotVariable.$) {
        case 0:
            return "()";
        case 6:
            var typeFunction = typeNotVariable.a;
            return "(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeToInfoString(typeFunction.e) + (" -> " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeToInfoString(typeFunction.d) + ")")));
        case 1:
            var typeConstruct = typeNotVariable.a;
            var typeReferenceAsString = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString({ a: typeConstruct.a, K: typeConstruct.b });
            var _v2 = typeConstruct.c;
            if (!_v2.b) {
                return typeReferenceAsString;
            }
            else {
                var argument0 = _v2.a;
                var argument1Up = _v2.b;
                return "(" + (typeReferenceAsString + ($elm$core$String$concat($elm$core$List$map_fn(function (argument) {
                    return " " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeToInfoString(argument);
                }, _List_Cons(argument0, argument1Up))) + ")"));
            }
        case 2:
            var parts = typeNotVariable.a;
            return "( " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeToInfoString(parts.s) + (", " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeToInfoString(parts.t) + " )")));
        case 3:
            var parts = typeNotVariable.a;
            return "( " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeToInfoString(parts.s) + (", " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeToInfoString(parts.t) + (", " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeToInfoString(parts.ak) + " )")))));
        case 4:
            var fields = typeNotVariable.a;
            return "{ " + ($elm$core$String$join_fn(", ", $elm$core$List$map_fn(function (_v3) {
                var name = _v3.a;
                var value = _v3.b;
                return name + (" : " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeToInfoString(value));
            }, $miniBill$elm_fast_dict$FastDict$toList(fields))) + " }");
        default:
            var recordExtension = typeNotVariable.a;
            return "{ " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableFromContextToInfoString(recordExtension.V) + (" | " + ($elm$core$String$join_fn(", ", $elm$core$List$map_fn(function (_v4) {
                var name = _v4.a;
                var value = _v4.b;
                return name + (" : " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeToInfoString(value));
            }, $miniBill$elm_fast_dict$FastDict$toList(recordExtension.F))) + " }")));
    }
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeToInfoString = function (type_) {
    if (!type_.$) {
        var typeVariable = type_.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableFromContextToInfoString(typeVariable);
    }
    else {
        var typeNotVariable = type_.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(typeNotVariable);
    }
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariableConstraintAppendable = 1;
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$justTypeVariableConstraintAppendable = $elm$core$Maybe$Just(1);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariableConstraintCompappend = 3;
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$justTypeVariableConstraintCompappend = $elm$core$Maybe$Just(3);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariableConstraintComparable = 2;
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$justTypeVariableConstraintComparable = $elm$core$Maybe$Just(2);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariableConstraintNumber = 0;
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$justTypeVariableConstraintNumber = $elm$core$Maybe$Just(0);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint = function (variableName) {
    if (_String_startsWith_fn("number", variableName)) {
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$justTypeVariableConstraintNumber;
    }
    else {
        var _v0 = _String_slice_fn(0, 10, variableName);
        switch (_v0) {
            case "appendable":
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$justTypeVariableConstraintAppendable;
            case "comparable":
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$justTypeVariableConstraintComparable;
            case "compappend":
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$justTypeVariableConstraintCompappend;
            default:
                return $elm$core$Maybe$Nothing;
        }
    }
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeConstructFullyExpandIfAlias_fn = function (context, typeConstructToExpand) {
    var _v41 = $miniBill$elm_fast_dict$FastDict$get_fn(typeConstructToExpand.b, context.dw);
    if (_v41.$ === 1) {
        return $elm$core$Maybe$Nothing;
    }
    else {
        var aOriginModuleTypes = _v41.a;
        var _v42 = $miniBill$elm_fast_dict$FastDict$get_fn(typeConstructToExpand.a, aOriginModuleTypes.B);
        if (_v42.$ === 1) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var originAliasDeclaration = _v42.a;
            var substitutionsToApplyToOriginAliasType = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldl2From_fn_unwrapped($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$parameterToVariableDictEmptyParameterToTypeNotVariableDictEmpty, originAliasDeclaration.o, typeConstructToExpand.c, function (parameterName, argument, soFar) {
                if (!argument.$) {
                    var argumentVariable = argument.a;
                    return {
                        b8: soFar.b8,
                        cz: $miniBill$elm_fast_dict$FastDict$insert_fn(parameterName, argumentVariable, soFar.cz)
                    };
                }
                else {
                    var argumentTypeNotVariable = argument.a;
                    return {
                        b8: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace_fn({ a: parameterName, f: $stil4m$elm_syntax$Elm$Syntax$Range$empty }, argumentTypeNotVariable, soFar.b8),
                        cz: soFar.cz
                    };
                }
            });
            var aliasTypeWithVariableArgumentsFilledIn = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(function (parameterVariable) {
                var _v44 = $miniBill$elm_fast_dict$FastDict$get_fn(parameterVariable.a, substitutionsToApplyToOriginAliasType.cz);
                if (!_v44.$) {
                    var variable = _v44.a;
                    return variable;
                }
                else {
                    return { a: parameterVariable.a, f: $stil4m$elm_syntax$Elm$Syntax$Range$empty };
                }
            }, originAliasDeclaration.n);
            if ($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$isEmpty(substitutionsToApplyToOriginAliasType.b8)) {
                return $elm$core$Maybe$Just(aliasTypeWithVariableArgumentsFilledIn);
            }
            else {
                var _v43 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(context, function (variable) {
                    return $elm$core$Maybe$map_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get_fn(variable, substitutionsToApplyToOriginAliasType.b8));
                }, aliasTypeWithVariableArgumentsFilledIn);
                if (!_v43.$) {
                    var typeAliasWithSomeVariablesSubstitutedByTypes = _v43.a;
                    return $elm$core$Maybe$Just(typeAliasWithSomeVariablesSubstitutedByTypes.n);
                }
                else {
                    return $elm$core$Maybe$Nothing;
                }
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeConstructFullyExpandIfAlias = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeConstructFullyExpandIfAlias_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsAppendable_fn = function (declarationTypes, type_) {
    if (!type_.$) {
        var typeVariable = type_.a;
        var _v39 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(typeVariable.a);
        if (_v39.$ === 1) {
            return false;
        }
        else {
            var constraint = _v39.a;
            switch (constraint) {
                case 1:
                    return true;
                case 3:
                    return true;
                case 2:
                    return false;
                default:
                    return false;
            }
        }
    }
    else {
        var typeNotVariable = type_.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsAppendable_fn(declarationTypes, typeNotVariable);
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsAppendable = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsAppendable_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsCompappend_fn = function (declarationTypes, type_) {
    if (!type_.$) {
        var typeVariable = type_.a;
        var _v36 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(typeVariable.a);
        if (_v36.$ === 1) {
            return false;
        }
        else {
            var constraint = _v36.a;
            switch (constraint) {
                case 1:
                    return false;
                case 3:
                    return true;
                case 2:
                    return false;
                default:
                    return false;
            }
        }
    }
    else {
        var typeNotVariable = type_.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsCompappend_fn(declarationTypes, typeNotVariable);
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsCompappend = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsCompappend_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsComparable_fn = function (declarationTypes, type_) {
    if (!type_.$) {
        var typeVariable = type_.a;
        var _v33 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(typeVariable.a);
        if (_v33.$ === 1) {
            return false;
        }
        else {
            var constraint = _v33.a;
            switch (constraint) {
                case 1:
                    return false;
                case 3:
                    return true;
                case 2:
                    return true;
                default:
                    return true;
            }
        }
    }
    else {
        var typeNotVariable = type_.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsComparable_fn(declarationTypes, typeNotVariable);
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsComparable = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsComparable_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsNumber_fn = function (declarationTypes, type_) {
    if (!type_.$) {
        var typeVariable = type_.a;
        var _v30 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(typeVariable.a);
        if (_v30.$ === 1) {
            return false;
        }
        else {
            var constraint = _v30.a;
            switch (constraint) {
                case 1:
                    return true;
                case 3:
                    return true;
                case 2:
                    return false;
                default:
                    return false;
            }
        }
    }
    else {
        var typeNotVariable = type_.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsNumber_fn(declarationTypes, typeNotVariable);
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsNumber = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsNumber_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsAppendable_fn = function (declarationTypes, type_) {
    switch (type_.$) {
        case 1:
            var variableReplacementTypeConstruct = type_.a;
            var _v25 = variableReplacementTypeConstruct.b;
            switch (_v25) {
                case "String":
                    var _v26 = variableReplacementTypeConstruct.a;
                    if (_v26 === "String") {
                        return true;
                    }
                    else {
                        return false;
                    }
                case "List":
                    var _v27 = variableReplacementTypeConstruct.a;
                    if (_v27 === "List") {
                        return true;
                    }
                    else {
                        return false;
                    }
                default:
                    var _v28 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeConstructFullyExpandIfAlias_fn({ dw: declarationTypes, aN: $stil4m$elm_syntax$Elm$Syntax$Range$empty }, variableReplacementTypeConstruct);
                    if (_v28.$ === 1) {
                        return false;
                    }
                    else {
                        var deAliasedTypeConstruct = _v28.a;
                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsAppendable_fn(declarationTypes, deAliasedTypeConstruct);
                    }
            }
        case 0:
            return false;
        case 2:
            return false;
        case 3:
            return false;
        case 4:
            return false;
        case 5:
            return false;
        default:
            return false;
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsAppendable = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsAppendable_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsCompappend_fn = function (declarationTypes, type_) {
    switch (type_.$) {
        case 1:
            var variableReplacementTypeConstruct = type_.a;
            var _v21 = variableReplacementTypeConstruct.b;
            switch (_v21) {
                case "String":
                    return true;
                case "List":
                    var _v22 = variableReplacementTypeConstruct.a;
                    if (_v22 === "List") {
                        return $elm$core$List$all_fn(function (argument) {
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsComparable_fn(declarationTypes, argument);
                        }, variableReplacementTypeConstruct.c);
                    }
                    else {
                        return false;
                    }
                default:
                    var _v23 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeConstructFullyExpandIfAlias_fn({ dw: declarationTypes, aN: $stil4m$elm_syntax$Elm$Syntax$Range$empty }, variableReplacementTypeConstruct);
                    if (_v23.$ === 1) {
                        return false;
                    }
                    else {
                        var deAliasedTypeConstruct = _v23.a;
                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsCompappend_fn(declarationTypes, deAliasedTypeConstruct);
                    }
            }
        case 0:
            return false;
        case 2:
            return false;
        case 3:
            return false;
        case 4:
            return false;
        case 5:
            return false;
        default:
            return false;
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsCompappend = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsCompappend_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsComparable_fn = function (declarationTypes, typeNotVariable) {
    switch (typeNotVariable.$) {
        case 1:
            var variableReplacementTypeConstruct = typeNotVariable.a;
            var _v16 = variableReplacementTypeConstruct.b;
            switch (_v16) {
                case "String":
                    return true;
                case "Char":
                    return true;
                case "Basics":
                    var _v17 = variableReplacementTypeConstruct.a;
                    switch (_v17) {
                        case "Int":
                            return true;
                        case "Float":
                            return true;
                        default:
                            return false;
                    }
                case "Time":
                    var _v18 = variableReplacementTypeConstruct.a;
                    if (_v18 === "Posix") {
                        return true;
                    }
                    else {
                        return false;
                    }
                case "List":
                    return $elm$core$List$all_fn(function (argument) {
                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsComparable_fn(declarationTypes, argument);
                    }, variableReplacementTypeConstruct.c);
                default:
                    var _v19 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeConstructFullyExpandIfAlias_fn({ dw: declarationTypes, aN: $stil4m$elm_syntax$Elm$Syntax$Range$empty }, variableReplacementTypeConstruct);
                    if (_v19.$ === 1) {
                        return false;
                    }
                    else {
                        var deAliasedTypeConstruct = _v19.a;
                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsComparable_fn(declarationTypes, deAliasedTypeConstruct);
                    }
            }
        case 2:
            var typeTuple = typeNotVariable.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsComparable_fn(declarationTypes, typeTuple.s) && $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsComparable_fn(declarationTypes, typeTuple.t);
        case 3:
            var typeTriple = typeNotVariable.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsComparable_fn(declarationTypes, typeTriple.s) && ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsComparable_fn(declarationTypes, typeTriple.t) && $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsComparable_fn(declarationTypes, typeTriple.ak));
        case 0:
            return false;
        case 4:
            return false;
        case 5:
            return false;
        default:
            return false;
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsComparable = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsComparable_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsNumber_fn = function (declarationTypes, type_) {
    switch (type_.$) {
        case 1:
            var typeConstruct = type_.a;
            var _v12 = typeConstruct.b;
            if (_v12 === "Basics") {
                var _v13 = typeConstruct.a;
                switch (_v13) {
                    case "Int":
                        return true;
                    case "Float":
                        return true;
                    default:
                        return false;
                }
            }
            else {
                var _v14 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeConstructFullyExpandIfAlias_fn({ dw: declarationTypes, aN: $stil4m$elm_syntax$Elm$Syntax$Range$empty }, typeConstruct);
                if (_v14.$ === 1) {
                    return false;
                }
                else {
                    var deAliasedTypeConstruct = _v14.a;
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsNumber_fn(declarationTypes, deAliasedTypeConstruct);
                }
            }
        case 0:
            return false;
        case 2:
            return false;
        case 3:
            return false;
        case 4:
            return false;
        case 5:
            return false;
        default:
            return false;
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsNumber = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsNumber_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableSubstituteVariableByType_fn = function (context, replacement, typeNotVariable) {
    switch (typeNotVariable.$) {
        case 0:
            return $elm$core$Result$Ok({ n: typeNotVariable, i: true });
        case 1:
            var typeChoiceConstruct = typeNotVariable.a;
            var _v7 = typeChoiceConstruct.c;
            if (!_v7.b) {
                return $elm$core$Result$Ok({ n: typeNotVariable, i: true });
            }
            else {
                var argument0 = _v7.a;
                var argument1Up = _v7.b;
                return $elm$core$Result$map_fn(function (argumentsSubstituted) {
                    return {
                        n: argumentsSubstituted.u ? typeNotVariable : $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: argumentsSubstituted.c, b: typeChoiceConstruct.b, a: typeChoiceConstruct.a }),
                        i: argumentsSubstituted.u
                    };
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$allUnchangedTrueArgumentsListEmpty, function (argument, soFar) {
                    return $elm$core$Result$map_fn(function (argumentSubstituted) {
                        return {
                            u: soFar.u && argumentSubstituted.i,
                            c: _List_Cons(argumentSubstituted.n, soFar.c)
                        };
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(context, replacement, argument));
                }, _List_Cons(argument0, argument1Up)));
            }
        case 2:
            var typeTuple = typeNotVariable.a;
            return $elm$core$Result$map2_fn_unwrapped(function (part0Substituted, part1Substituted) {
                return (part0Substituted.i && part1Substituted.i) ? { n: typeNotVariable, i: true } : {
                    n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({ s: part0Substituted.n, t: part1Substituted.n }),
                    i: false
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(context, replacement, typeTuple.s), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(context, replacement, typeTuple.t));
        case 3:
            var typeTriple = typeNotVariable.a;
            return $elm$core$Result$map3_fn_unwrapped(function (part0Substituted, part1Substituted, part2Substituted) {
                return (part0Substituted.i && (part1Substituted.i && part2Substituted.i)) ? { n: typeNotVariable, i: true } : {
                    n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple({ s: part0Substituted.n, t: part1Substituted.n, ak: part2Substituted.n }),
                    i: false
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(context, replacement, typeTriple.s), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(context, replacement, typeTriple.t), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(context, replacement, typeTriple.ak));
        case 4:
            var typeRecordFields = typeNotVariable.a;
            return $elm$core$Result$map_fn(function (fieldsSubstituted) {
                return fieldsSubstituted.u ? { n: typeNotVariable, i: true } : {
                    n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(fieldsSubstituted.au),
                    i: false
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictFoldlWhileOkFrom_fn_unwrapped({ u: true, au: typeRecordFields }, function (fieldName, fieldValue, soFar) {
                return $elm$core$Result$map_fn(function (valueSubstituted) {
                    return valueSubstituted.i ? { u: soFar.u, au: soFar.au } : {
                        u: false,
                        au: $miniBill$elm_fast_dict$FastDict$insert_fn(fieldName, valueSubstituted.n, soFar.au)
                    };
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(context, replacement, fieldValue));
            }, typeRecordFields));
        case 5:
            var typeRecordExtension = typeNotVariable.a;
            return $elm$core$Result$andThen_fn(function (fieldsSubstituted) {
                var _v8 = replacement(typeRecordExtension.V);
                if (_v8.$ === 1) {
                    return fieldsSubstituted.u ? $elm$core$Result$Ok({ n: typeNotVariable, i: true }) : $elm$core$Result$Ok({
                        n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension({ F: fieldsSubstituted.au, V: typeRecordExtension.V }),
                        i: false
                    });
                }
                else {
                    var recordVariableReplacement = _v8.a;
                    if (!recordVariableReplacement.$) {
                        var recordVariableReplacementVariable = recordVariableReplacement.a;
                        return $elm$core$Result$Ok({
                            n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension({ F: fieldsSubstituted.au, V: recordVariableReplacementVariable }),
                            i: false
                        });
                    }
                    else {
                        var recordVariableReplacementTypeNotVariable = recordVariableReplacement.a;
                        switch (recordVariableReplacementTypeNotVariable.$) {
                            case 4:
                                var replacementRecordFields = recordVariableReplacementTypeNotVariable.a;
                                return $elm$core$Result$Ok({
                                    n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord($miniBill$elm_fast_dict$FastDict$union_fn(replacementRecordFields, fieldsSubstituted.au)),
                                    i: false
                                });
                            case 5:
                                var replacementRecordExtension = recordVariableReplacementTypeNotVariable.a;
                                return $elm$core$Result$Ok({
                                    n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension({
                                        F: $miniBill$elm_fast_dict$FastDict$union_fn(replacementRecordExtension.F, fieldsSubstituted.au),
                                        V: replacementRecordExtension.V
                                    }),
                                    i: false
                                });
                            case 0:
                                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "cannot unify record extension type variable with types other than record/record extension")));
                            case 1:
                                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "cannot unify record extension type variable with types other than record/record extension")));
                            case 2:
                                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "cannot unify record extension type variable with types other than record/record extension")));
                            case 3:
                                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "cannot unify record extension type variable with types other than record/record extension")));
                            default:
                                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "cannot unify record extension type variable with types other than record/record extension")));
                        }
                    }
                }
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictFoldlWhileOkFrom_fn_unwrapped({ u: true, au: typeRecordExtension.F }, function (fieldName, fieldValue, soFar) {
                return $elm$core$Result$map_fn(function (valueSubstituted) {
                    return valueSubstituted.i ? { u: soFar.u, au: soFar.au } : {
                        u: false,
                        au: $miniBill$elm_fast_dict$FastDict$insert_fn(fieldName, valueSubstituted.n, soFar.au)
                    };
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(context, replacement, fieldValue));
            }, typeRecordExtension.F));
        default:
            var typeFunction = typeNotVariable.a;
            return $elm$core$Result$map2_fn_unwrapped(function (inputSubstituted, outputSubstituted) {
                return (inputSubstituted.i && outputSubstituted.i) ? { n: typeNotVariable, i: true } : {
                    n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: inputSubstituted.n, d: outputSubstituted.n }),
                    i: false
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(context, replacement, typeFunction.e), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(context, replacement, typeFunction.d));
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableSubstituteVariableByType = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableSubstituteVariableByType_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn = function (context, replacement, type_) {
    if (!type_.$) {
        var typeVariable = type_.a;
        var _v1 = replacement(typeVariable);
        if (_v1.$ === 1) {
            return $elm$core$Result$Ok({ n: type_, i: true });
        }
        else {
            var replacementType = _v1.a;
            if (!replacementType.$) {
                var replacementTypeVariable = replacementType.a;
                return $elm$core$Result$Ok({
                    n: replacementType,
                    i: $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$equals_fn(typeVariable, replacementTypeVariable)
                });
            }
            else {
                var replacementTypeNotVariable = replacementType.a;
                var _v3 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(typeVariable.a);
                if (_v3.$ === 1) {
                    return $elm$core$Result$Ok({ n: replacementType, i: false });
                }
                else {
                    var constraint = _v3.a;
                    switch (constraint) {
                        case 0:
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsNumber_fn(context.dw, replacementTypeNotVariable) ? $elm$core$Result$Ok({ n: replacementType, i: false }) : $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("cannot unify number type variable with types other than Int/Float, found: " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeToInfoString(replacementType)))));
                        case 1:
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsAppendable_fn(context.dw, replacementTypeNotVariable) ? $elm$core$Result$Ok({ n: replacementType, i: false }) : $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "cannot unify appendable type variable with types other than String/List _")));
                        case 2:
                            return $elm$core$Result$Ok({ n: replacementType, i: false });
                        default:
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsCompappend_fn(context.dw, replacementTypeNotVariable) ? $elm$core$Result$Ok({ n: replacementType, i: false }) : $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "cannot unify compappend type variable with types other than String/List of comparable")));
                    }
                }
            }
        }
    }
    else {
        var typeNotVariable = type_.a;
        var _v5 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableSubstituteVariableByType_fn(context, replacement, typeNotVariable);
        if (_v5.$ === 1) {
            var error = _v5.a;
            return $elm$core$Result$Err(error);
        }
        else {
            var typeNotVariableSubstituted = _v5.a;
            return $elm$core$Result$Ok({
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(typeNotVariableSubstituted.n),
                i: typeNotVariableSubstituted.i
            });
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableFullyApplyVariableToTypeSubstitutions_fn = function (context, substitutionsToApply, typeNotVariable) {
    typeNotVariableFullyApplyVariableToTypeSubstitutions: while (true) {
        var _v0 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableSubstituteVariableByType_fn(context, substitutionsToApply, typeNotVariable);
        if (_v0.$ === 1) {
            var error = _v0.a;
            return $elm$core$Result$Err(error);
        }
        else {
            var typeNotVariableSubstituted = _v0.a;
            if (typeNotVariableSubstituted.i) {
                return $elm$core$Result$Ok(typeNotVariable);
            }
            else {
                var $temp$context = context, $temp$substitutionsToApply = substitutionsToApply, $temp$typeNotVariable = typeNotVariableSubstituted.n;
                context = $temp$context;
                substitutionsToApply = $temp$substitutionsToApply;
                typeNotVariable = $temp$typeNotVariable;
                continue typeNotVariableFullyApplyVariableToTypeSubstitutions;
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableFullyApplyVariableToTypeSubstitutions = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableFullyApplyVariableToTypeSubstitutions_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsVariableToTypeApplyOverItself_fn = function (context, variableToTypeInitial) {
    return ($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$size(variableToTypeInitial) <= 1) ? $elm$core$Result$Ok(variableToTypeInitial) : $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlWhileOkFrom_fn($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty, F3(function (variable, replacementTypeNotVariable, soFar) {
        return $elm$core$Result$map_fn(function (replacementTypeSubstituted) {
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace_fn(variable, replacementTypeSubstituted, soFar);
        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableFullyApplyVariableToTypeSubstitutions_fn(context, function (replacementTypeVariable) {
            return $elm$core$Maybe$map_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get_fn(replacementTypeVariable, variableToTypeInitial));
        }, replacementTypeNotVariable));
    }), variableToTypeInitial);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsVariableToTypeApplyOverItself = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsVariableToTypeApplyOverItself_fn);
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$memberInner_fn = function (targetKey, dict) {
    memberInner: while (true) {
        if (dict.$ === 1) {
            return false;
        }
        else {
            var key = dict.b;
            var left = dict.d;
            var right = dict.e;
            var _v1 = $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$compare_fn(targetKey, key);
            switch (_v1) {
                case 0:
                    var $temp$targetKey = targetKey, $temp$dict = left;
                    targetKey = $temp$targetKey;
                    dict = $temp$dict;
                    continue memberInner;
                case 1:
                    return true;
                default:
                    var $temp$targetKey = targetKey, $temp$dict = right;
                    targetKey = $temp$targetKey;
                    dict = $temp$dict;
                    continue memberInner;
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$memberInner = F2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$memberInner_fn);
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$member_fn = function (targetKey, _v0) {
    var dict = _v0.b;
    return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$memberInner_fn(targetKey, dict);
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$member = F2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$member_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeIncludesRange_fn = function (toCheckForInclusion, baseRange) {
    return (((baseRange.cf.bu - toCheckForInclusion.cf.bu) < 0) || ((!(baseRange.cf.bu - toCheckForInclusion.cf.bu)) && ((baseRange.cf.cJ - toCheckForInclusion.cf.cJ) <= 0))) && (((baseRange.b_.bu - toCheckForInclusion.b_.bu) > 0) || ((!(baseRange.b_.bu - toCheckForInclusion.b_.bu)) && ((baseRange.b_.cJ - toCheckForInclusion.b_.cJ) >= 0)));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeIncludesRange = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeIncludesRange_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentTypeVariableFromContextSetContains_fn = function (variableToCheckInclusionFor, equivalentTypeVariableFromContextSet) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeIncludesRange_fn(variableToCheckInclusionFor.f, equivalentTypeVariableFromContextSet.aD) && $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$member_fn(variableToCheckInclusionFor, equivalentTypeVariableFromContextSet.aJ);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentTypeVariableFromContextSetContains = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentTypeVariableFromContextSetContains_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintAppendable = $elm$core$Result$Ok(1);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintCompappend = $elm$core$Result$Ok(3);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintComparable = $elm$core$Result$Ok(2);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintNumber = $elm$core$Result$Ok(0);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraintMerge_fn = function (a, b) {
    switch (a) {
        case 0:
            switch (b) {
                case 0:
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintNumber;
                case 1:
                    return $elm$core$Result$Err("number and appendable variables cannot be unified");
                case 2:
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintNumber;
                default:
                    return $elm$core$Result$Err("number and compappend variables cannot be unified");
            }
        case 1:
            switch (b) {
                case 0:
                    return $elm$core$Result$Err("number and appendable variables cannot be unified");
                case 1:
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintAppendable;
                case 2:
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintCompappend;
                default:
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintCompappend;
            }
        case 2:
            switch (b) {
                case 0:
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintNumber;
                case 1:
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintCompappend;
                case 2:
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintComparable;
                default:
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintCompappend;
            }
        default:
            switch (b) {
                case 0:
                    return $elm$core$Result$Err("number and compappend variables cannot be unified");
                case 1:
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintCompappend;
                case 2:
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintCompappend;
                default:
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeVariableConstraintCompappend;
            }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraintMerge = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraintMerge_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$maybeTypeVariableConstraintMerge_fn = function (a, b) {
    if (a.$ === 1) {
        return $elm$core$Result$Ok(b);
    }
    else {
        var aConstraint = a.a;
        if (b.$ === 1) {
            return $elm$core$Result$Ok($elm$core$Maybe$Just(aConstraint));
        }
        else {
            var bConstraint = b.a;
            return $elm$core$Result$map_fn($elm$core$Maybe$Just, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraintMerge_fn(aConstraint, bConstraint));
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$maybeTypeVariableConstraintMerge = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$maybeTypeVariableConstraintMerge_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationMax_fn = function (aLocation, bLocation) {
    return ((aLocation.bu - bLocation.bu) > 0) ? aLocation : (((bLocation.bu - aLocation.bu) > 0) ? bLocation : (((aLocation.cJ - bLocation.cJ) > 0) ? aLocation : bLocation));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationMax = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationMax_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationMin_fn = function (aLocation, bLocation) {
    return ((aLocation.bu - bLocation.bu) < 0) ? aLocation : (((bLocation.bu - aLocation.bu) < 0) ? bLocation : (((aLocation.cJ - bLocation.cJ) < 0) ? aLocation : bLocation));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationMin = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationMin_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeOverarching_fn = function (a, b) {
    return {
        b_: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationMax_fn(a.b_, b.b_),
        cf: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationMin_fn(a.cf, b.cf)
    };
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeOverarching = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeOverarching_fn);
var $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$locationLessThen_fn = function (a, b) {
    return ((a.bu - b.bu) < 0) || ((!(a.bu - b.bu)) && ((a.cJ - b.cJ) < 0));
}, $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$locationLessThen = F2($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$locationLessThen_fn);
var $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$lessThan_fn = function (a, b) {
    return ((a.f.cf.bu - b.f.cf.bu) < 0) || (((a.f.cf.bu - b.f.cf.bu) > 0) ? false : (((a.f.cf.cJ - b.f.cf.cJ) < 0) || (((a.f.cf.cJ - b.f.cf.cJ) > 0) ? false : ($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$locationEquals_fn(a.f.b_, b.f.b_) ? (_Utils_cmp(a.a, b.a) < 0) : $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$locationLessThen_fn(a.f.b_, b.f.b_)))));
}, $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$lessThan = F2($lue_bird$elm_syntax_type_infer$TypeVariableFromContext$lessThan_fn);
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$twoDistinct_fn = function (aKey, aValue, bKey, bValue) {
    return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$DictByTypeVariableFromContext_fn(2, $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$lessThan_fn(aKey, bKey) ? $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode_fn(false, bKey, bValue, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode_fn(true, aKey, aValue, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$Leaf, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$Leaf), $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$Leaf) : $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode_fn(false, aKey, aValue, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$InnerNode_fn(true, bKey, bValue, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$Leaf, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$Leaf), $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$Leaf));
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$twoDistinct = F4($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$twoDistinct_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariablesMergeWithSetOf2Into_fn = function (soFar, aEquivalentVariable, bEquivalentVariable, equivalentVariables) {
    equivalentVariablesMergeWithSetOf2Into: while (true) {
        if (!equivalentVariables.b) {
            return $elm$core$Result$map_fn(function (abConstraint) {
                return _List_Cons({
                    aP: abConstraint,
                    aD: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeOverarching_fn(aEquivalentVariable.f, bEquivalentVariable.f),
                    aJ: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$twoDistinct_fn(aEquivalentVariable, 0, bEquivalentVariable, 0)
                }, soFar);
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$maybeTypeVariableConstraintMerge_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(aEquivalentVariable.a), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(bEquivalentVariable.a)));
        }
        else {
            var equivalentVariablesSet0 = equivalentVariables.a;
            var equivalentVariablesSet1Up = equivalentVariables.b;
            if ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentTypeVariableFromContextSetContains_fn(aEquivalentVariable, equivalentVariablesSet0)) {
                return $elm$core$Result$map_fn(function (unifiedConstraint) {
                    return _List_Cons({
                        aP: unifiedConstraint,
                        aD: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeOverarching_fn(equivalentVariablesSet0.aD, bEquivalentVariable.f),
                        aJ: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace_fn(bEquivalentVariable, 0, equivalentVariablesSet0.aJ)
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listAppendFastButInReverseOrder_fn(soFar, equivalentVariablesSet1Up));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$maybeTypeVariableConstraintMerge_fn(equivalentVariablesSet0.aP, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(bEquivalentVariable.a)));
            }
            else {
                if ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentTypeVariableFromContextSetContains_fn(bEquivalentVariable, equivalentVariablesSet0)) {
                    return $elm$core$Result$map_fn(function (unifiedConstraint) {
                        return _List_Cons({
                            aP: unifiedConstraint,
                            aD: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeOverarching_fn(equivalentVariablesSet0.aD, aEquivalentVariable.f),
                            aJ: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace_fn(aEquivalentVariable, 0, equivalentVariablesSet0.aJ)
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listAppendFastButInReverseOrder_fn(soFar, equivalentVariablesSet1Up));
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$maybeTypeVariableConstraintMerge_fn(equivalentVariablesSet0.aP, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(aEquivalentVariable.a)));
                }
                else {
                    var $temp$soFar = _List_Cons(equivalentVariablesSet0, soFar), $temp$aEquivalentVariable = aEquivalentVariable, $temp$bEquivalentVariable = bEquivalentVariable, $temp$equivalentVariables = equivalentVariablesSet1Up;
                    soFar = $temp$soFar;
                    aEquivalentVariable = $temp$aEquivalentVariable;
                    bEquivalentVariable = $temp$bEquivalentVariable;
                    equivalentVariables = $temp$equivalentVariables;
                    continue equivalentVariablesMergeWithSetOf2Into;
                }
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariablesMergeWithSetOf2Into = F4($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariablesMergeWithSetOf2Into_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariablesMergeWithSetOf2_fn = function (aEquivalentVariable, bEquivalentVariable, equivalentVariables) {
    return $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$equals_fn(aEquivalentVariable, bEquivalentVariable) ? $elm$core$Result$Ok(equivalentVariables) : $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariablesMergeWithSetOf2Into_fn(_List_Nil, aEquivalentVariable, bEquivalentVariable, equivalentVariables);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariablesMergeWithSetOf2 = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariablesMergeWithSetOf2_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone = { D: _List_Nil, E: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty };
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$argumentsReverseListEmptySubstitutionsNone = { cZ: _List_Nil, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone };
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationGreaterOrEqualThan_fn = function (a, b) {
    return ((a.bu - b.bu) > 0) || ((!(a.bu - b.bu)) && ((a.cJ - b.cJ) >= 0));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationGreaterOrEqualThan = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationGreaterOrEqualThan_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeAreOverlapping_fn = function (a, b) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationGreaterOrEqualThan_fn(a.b_, b.cf) && $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$locationGreaterOrEqualThan_fn(b.b_, a.cf);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeAreOverlapping = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeAreOverlapping_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentTypeVariableSetShareElements_fn = function (a, b) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeAreOverlapping_fn(a.aD, b.aD) && $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$any_fn(F2(function (aKey, _v0) {
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentTypeVariableFromContextSetContains_fn(aKey, b);
    }), a.aJ);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentTypeVariableSetShareElements = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentTypeVariableSetShareElements_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndFirstJustAndRemainingAndOrderWithBefore_fn = function (elementsBeforeReverse, elementToMaybe, list) {
    listMapAndFirstJustAndRemainingAndOrderWithBefore: while (true) {
        if (!list.b) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var head = list.a;
            var tail = list.b;
            var _v1 = elementToMaybe(head);
            if (!_v1.$) {
                var headValue = _v1.a;
                return $elm$core$Maybe$Just({
                    cc: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listAppendFastButInReverseOrder_fn(elementsBeforeReverse, tail),
                    l: headValue
                });
            }
            else {
                var $temp$elementsBeforeReverse = _List_Cons(head, elementsBeforeReverse), $temp$elementToMaybe = elementToMaybe, $temp$list = tail;
                elementsBeforeReverse = $temp$elementsBeforeReverse;
                elementToMaybe = $temp$elementToMaybe;
                list = $temp$list;
                continue listMapAndFirstJustAndRemainingAndOrderWithBefore;
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndFirstJustAndRemainingAndOrderWithBefore = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndFirstJustAndRemainingAndOrderWithBefore_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndFirstJustAndRemainingAnyOrder_fn = function (elementToMaybe, list) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndFirstJustAndRemainingAndOrderWithBefore_fn(_List_Nil, elementToMaybe, list);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndFirstJustAndRemainingAnyOrder = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndFirstJustAndRemainingAnyOrder_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariableSetMergeIntoVariableSubstitutionsWithVariableToType_fn = function (variableToType, a, b) {
    if (!a.b) {
        return $elm$core$Result$Ok({ D: b, E: variableToType });
    }
    else {
        if (!b.b) {
            return $elm$core$Result$Ok({ D: a, E: variableToType });
        }
        else {
            return $elm$core$Result$map_fn(function (mergedIntoA) {
                return {
                    D: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listAppendFastButInReverseOrder_fn(mergedIntoA.cA, mergedIntoA.cn),
                    E: variableToType
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom_fn_unwrapped({ cn: b, cA: _List_Nil }, function (aEquivalentVariableSet, soFar) {
                var _v2 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapAndFirstJustAndRemainingAnyOrder_fn(function (bEquivalentVariableSet) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentTypeVariableSetShareElements_fn(aEquivalentVariableSet, bEquivalentVariableSet) ? $elm$core$Maybe$Just(bEquivalentVariableSet) : $elm$core$Maybe$Nothing;
                }, soFar.cn);
                if (_v2.$ === 1) {
                    return $elm$core$Result$Ok({
                        cn: soFar.cn,
                        cA: _List_Cons(aEquivalentVariableSet, soFar.cA)
                    });
                }
                else {
                    var bEquivalentVariableSetAndRemaining = _v2.a;
                    return $elm$core$Result$map_fn(function (unifiedConstraint) {
                        return {
                            cn: bEquivalentVariableSetAndRemaining.cc,
                            cA: _List_Cons({
                                aP: unifiedConstraint,
                                aD: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeOverarching_fn(aEquivalentVariableSet.aD, bEquivalentVariableSetAndRemaining.l.aD),
                                aJ: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$setUnion_fn(aEquivalentVariableSet.aJ, bEquivalentVariableSetAndRemaining.l.aJ)
                            }, soFar.cA)
                        };
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$maybeTypeVariableConstraintMerge_fn(aEquivalentVariableSet.aP, bEquivalentVariableSetAndRemaining.l.aP));
                }
            }, a));
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariableSetMergeIntoVariableSubstitutionsWithVariableToType = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariableSetMergeIntoVariableSubstitutionsWithVariableToType_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldl2WhileOkFrom_fn = function (initialState, aList, bList, reduce) {
    listFoldl2WhileOkFrom: while (true) {
        if (!aList.b) {
            return $elm$core$Result$Ok(initialState);
        }
        else {
            var aHead = aList.a;
            var aTail = aList.b;
            if (!bList.b) {
                return $elm$core$Result$Ok(initialState);
            }
            else {
                var bHead = bList.a;
                var bTail = bList.b;
                var _v2 = A3(reduce, aHead, bHead, initialState);
                if (_v2.$ === 1) {
                    var error = _v2.a;
                    return $elm$core$Result$Err(error);
                }
                else {
                    var stateAfterReducingHeads = _v2.a;
                    var $temp$initialState = stateAfterReducingHeads, $temp$aList = aTail, $temp$bList = bTail, $temp$reduce = reduce;
                    initialState = $temp$initialState;
                    aList = $temp$aList;
                    bList = $temp$bList;
                    reduce = $temp$reduce;
                    continue listFoldl2WhileOkFrom;
                }
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldl2WhileOkFrom_fn_unwrapped = function (initialState, aList, bList, reduce) {
    listFoldl2WhileOkFrom: while (true) {
        if (!aList.b) {
            return $elm$core$Result$Ok(initialState);
        }
        else {
            var aHead = aList.a;
            var aTail = aList.b;
            if (!bList.b) {
                return $elm$core$Result$Ok(initialState);
            }
            else {
                var bHead = bList.a;
                var bTail = bList.b;
                var _v2 = reduce(aHead, bHead, initialState);
                if (_v2.$ === 1) {
                    var error = _v2.a;
                    return $elm$core$Result$Err(error);
                }
                else {
                    var stateAfterReducingHeads = _v2.a;
                    var $temp$initialState = stateAfterReducingHeads, $temp$aList = aTail, $temp$bList = bTail, $temp$reduce = reduce;
                    initialState = $temp$initialState;
                    aList = $temp$aList;
                    bList = $temp$bList;
                    reduce = $temp$reduce;
                    continue listFoldl2WhileOkFrom;
                }
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldl2WhileOkFrom = F4($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldl2WhileOkFrom_fn);
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$mergeStep_fn = function (leftStep, bothStep, rightStep, rKey, rValue, _v0) {
    mergeStep: while (true) {
        var list = _v0.a;
        var result = _v0.b;
        if (!list.b) {
            return _Utils_Tuple2(list, A3(rightStep, rKey, rValue, result));
        }
        else {
            var _v2 = list.a;
            var lKey = _v2.a;
            var lValue = _v2.b;
            var rest = list.b;
            var _v3 = $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$compare_fn(lKey, rKey);
            switch (_v3) {
                case 0:
                    var $temp$leftStep = leftStep, $temp$bothStep = bothStep, $temp$rightStep = rightStep, $temp$rKey = rKey, $temp$rValue = rValue, $temp$_v0 = _Utils_Tuple2(rest, A3(leftStep, lKey, lValue, result));
                    leftStep = $temp$leftStep;
                    bothStep = $temp$bothStep;
                    rightStep = $temp$rightStep;
                    rKey = $temp$rKey;
                    rValue = $temp$rValue;
                    _v0 = $temp$_v0;
                    continue mergeStep;
                case 2:
                    return _Utils_Tuple2(list, A3(rightStep, rKey, rValue, result));
                default:
                    return _Utils_Tuple2(rest, A4(bothStep, lKey, lValue, rValue, result));
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$mergeStep = F6($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$mergeStep_fn);
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldrInner_fn = function (func, acc, t) {
    foldrInner: while (true) {
        if (t.$ === 1) {
            return acc;
        }
        else {
            var key = t.b;
            var value = t.c;
            var left = t.d;
            var right = t.e;
            var $temp$func = func, $temp$acc = A3(func, key, value, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldrInner_fn(func, acc, right)), $temp$t = left;
            func = $temp$func;
            acc = $temp$acc;
            t = $temp$t;
            continue foldrInner;
        }
    }
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldrInner_fn_unwrapped = function (func, acc, t) {
    foldrInner: while (true) {
        if (t.$ === 1) {
            return acc;
        }
        else {
            var key = t.b;
            var value = t.c;
            var left = t.d;
            var right = t.e;
            var $temp$func = func, $temp$acc = func(key, value, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldrInner_fn_unwrapped(func, acc, right)), $temp$t = left;
            func = $temp$func;
            acc = $temp$acc;
            t = $temp$t;
            continue foldrInner;
        }
    }
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldrInner = F3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldrInner_fn);
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldr_fn = function (func, acc, _v0) {
    var dict = _v0.b;
    return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldrInner_fn(func, acc, dict);
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldr = F3($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldr_fn);
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$toList = function (dict) {
    return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldr_fn(F3(function (key, value, list) {
        return _List_Cons(_Utils_Tuple2(key, value), list);
    }), _List_Nil, dict);
};
var $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$merge_fn = function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
    var _v0 = $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldl_fn(F3(function (rKey, rValue, soFar) {
        return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$mergeStep_fn(leftStep, bothStep, rightStep, rKey, rValue, soFar);
    }), _Utils_Tuple2($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$toList(leftDict), initialResult), rightDict);
    var leftovers = _v0.a;
    var intermediateResult = _v0.b;
    return $elm$core$List$foldl_fn_unwrapped(function (_v1, result) {
        var k = _v1.a;
        var v = _v1.b;
        return A3(leftStep, k, v, result);
    }, intermediateResult, leftovers);
}, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$merge = F6($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$merge_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okFieldsUnifiedEmptySubstitutionsNone = $elm$core$Result$Ok({ aG: $miniBill$elm_fast_dict$FastDict$empty, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone });
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okFieldsUnifiedEmptySubstitutionsNoneAOnlyDictEmptyBOnlyDictEmpty = $elm$core$Result$Ok({ bA: $miniBill$elm_fast_dict$FastDict$empty, bF: $miniBill$elm_fast_dict$FastDict$empty, aG: $miniBill$elm_fast_dict$FastDict$empty, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone });
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnit = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeUnitSubstitutionsNone = $elm$core$Result$Ok({ g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnit });
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn = function (abToResult, aResult, bResult) {
    if (aResult.$ === 1) {
        var error = aResult.a;
        return $elm$core$Result$Err(error);
    }
    else {
        var a = aResult.a;
        if (bResult.$ === 1) {
            var error = bResult.a;
            return $elm$core$Result$Err(error);
        }
        else {
            var b = bResult.a;
            return A2(abToResult, a, b);
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped = function (abToResult, aResult, bResult) {
    if (aResult.$ === 1) {
        var error = aResult.a;
        return $elm$core$Result$Err(error);
    }
    else {
        var a = aResult.a;
        if (bResult.$ === 1) {
            var error = bResult.a;
            return $elm$core$Result$Err(error);
        }
        else {
            var b = bResult.a;
            return abToResult(a, b);
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2 = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3_fn = function (abToResult, aResult, bResult, cResult) {
    if (aResult.$ === 1) {
        var error = aResult.a;
        return $elm$core$Result$Err(error);
    }
    else {
        var a = aResult.a;
        if (bResult.$ === 1) {
            var error = bResult.a;
            return $elm$core$Result$Err(error);
        }
        else {
            var b = bResult.a;
            if (cResult.$ === 1) {
                var error = cResult.a;
                return $elm$core$Result$Err(error);
            }
            else {
                var c = cResult.a;
                return A3(abToResult, a, b, c);
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3_fn_unwrapped = function (abToResult, aResult, bResult, cResult) {
    if (aResult.$ === 1) {
        var error = aResult.a;
        return $elm$core$Result$Err(error);
    }
    else {
        var a = aResult.a;
        if (bResult.$ === 1) {
            var error = bResult.a;
            return $elm$core$Result$Err(error);
        }
        else {
            var b = bResult.a;
            if (cResult.$ === 1) {
                var error = cResult.a;
                return $elm$core$Result$Err(error);
            }
            else {
                var c = cResult.a;
                return abToResult(a, b, c);
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3 = F4($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3_fn);
var $elm$core$Char$toUpper = _Char_toUpper;
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$stringFirstCharToUpper = function (string) {
    var _v0 = $elm$core$String$uncons(string);
    if (_v0.$ === 1) {
        return "";
    }
    else {
        var _v1 = _v0.a;
        var headChar = _v1.a;
        var tailString = _v1.b;
        return _String_cons_fn($elm$core$Char$toUpper(headChar), tailString);
    }
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariable_fn = function (context, replacement, type_) {
    var _v0 = replacement.n;
    if (!_v0.$) {
        var argumentVariable = _v0.a;
        return $elm$core$Result$Ok($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(function (variable) {
            return $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$equals_fn(variable, replacement.bm) ? argumentVariable : variable;
        }, type_));
    }
    else {
        var argumentNotVariable = _v0.a;
        return $elm$core$Result$map_fn(function ($) {
            return $.n;
        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(context, function (variable) {
            return $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$equals_fn(variable, replacement.bm) ? $elm$core$Maybe$Just($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(argumentNotVariable)) : $elm$core$Maybe$Nothing;
        }, type_));
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariable = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariable_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone = $elm$core$Result$Ok($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFrom2EquivalentVariables_fn = function (aVariable, bVariable) {
    return $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$equals_fn(aVariable, bVariable) ? $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone : $elm$core$Result$map_fn(function (abConstraint) {
        return {
            D: _List_fromArray([
                {
                    aP: abConstraint,
                    aD: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeOverarching_fn(aVariable.f, bVariable.f),
                    aJ: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$twoDistinct_fn(aVariable, 0, bVariable, 0)
                }
            ]),
            E: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty
        };
    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$maybeTypeVariableConstraintMerge_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(aVariable.a), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(bVariable.a)));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFrom2EquivalentVariables = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFrom2EquivalentVariables_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFrom2EquivalentVariablesWithType_fn = function (type_, aVariable, bVariable) {
    return $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$equals_fn(aVariable, bVariable) ? $elm$core$Result$Ok({ g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, n: type_ }) : $elm$core$Result$map_fn(function (abConstraint) {
        return {
            g: {
                D: _List_fromArray([
                    {
                        aP: abConstraint,
                        aD: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeOverarching_fn(aVariable.f, bVariable.f),
                        aJ: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$twoDistinct_fn(aVariable, 0, bVariable, 0)
                    }
                ]),
                E: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty
            },
            n: type_
        };
    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$maybeTypeVariableConstraintMerge_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(aVariable.a), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(bVariable.a)));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFrom2EquivalentVariablesWithType = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFrom2EquivalentVariablesWithType_fn);
var $miniBill$elm_fast_dict$FastDict$restructureInner_fn = function (leafFunc, nodeFunc, dict) {
    if (dict.$ === 1) {
        return leafFunc;
    }
    else {
        var key = dict.b;
        var value = dict.c;
        var left = dict.d;
        var right = dict.e;
        return nodeFunc({
            A: key,
            cw: function (_v1) {
                return $miniBill$elm_fast_dict$FastDict$restructureInner_fn(leafFunc, nodeFunc, left);
            },
            cV: function (_v2) {
                return $miniBill$elm_fast_dict$FastDict$restructureInner_fn(leafFunc, nodeFunc, right);
            },
            l: value
        });
    }
}, $miniBill$elm_fast_dict$FastDict$restructureInner = F3($miniBill$elm_fast_dict$FastDict$restructureInner_fn);
var $miniBill$elm_fast_dict$FastDict$restructure_fn = function (leafFunc, nodeFunc, _v0) {
    var dict = _v0.b;
    return $miniBill$elm_fast_dict$FastDict$restructureInner_fn(leafFunc, nodeFunc, dict);
}, $miniBill$elm_fast_dict$FastDict$restructure = F3($miniBill$elm_fast_dict$FastDict$restructure_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictAny_fn = function (valueIsFound, dict) {
    return $miniBill$elm_fast_dict$FastDict$restructure_fn(false, function (state) {
        return valueIsFound(state.l) || (state.cw(0) || state.cV(0));
    }, dict);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictAny = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictAny_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainsVariable_fn = function (variableToCheckFor, type_) {
    if (!type_.$) {
        var variable = type_.a;
        return $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$equals_fn(variableToCheckFor, variable);
    }
    else {
        var typeNotVariable = type_.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableContainsVariable_fn(variableToCheckFor, typeNotVariable);
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainsVariable = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainsVariable_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableContainsVariable_fn = function (variableToCheckFor, typeNotVariable) {
    switch (typeNotVariable.$) {
        case 0:
            return false;
        case 6:
            var typeFunction = typeNotVariable.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainsVariable_fn(variableToCheckFor, typeFunction.e) || $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainsVariable_fn(variableToCheckFor, typeFunction.d);
        case 2:
            var typeTuple = typeNotVariable.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainsVariable_fn(variableToCheckFor, typeTuple.s) || $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainsVariable_fn(variableToCheckFor, typeTuple.t);
        case 3:
            var typeTriple = typeNotVariable.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainsVariable_fn(variableToCheckFor, typeTriple.s) || ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainsVariable_fn(variableToCheckFor, typeTriple.t) || $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainsVariable_fn(variableToCheckFor, typeTriple.ak));
        case 1:
            var typeConstruct = typeNotVariable.a;
            return $elm$core$List$any_fn(function (argument) {
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainsVariable_fn(variableToCheckFor, argument);
            }, typeConstruct.c);
        case 4:
            var typeRecordFields = typeNotVariable.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictAny_fn(function (value) {
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainsVariable_fn(variableToCheckFor, value);
            }, typeRecordFields);
        default:
            var typeRecordExtension = typeNotVariable.a;
            return $lue_bird$elm_syntax_type_infer$TypeVariableFromContext$equals_fn(typeRecordExtension.V, variableToCheckFor) || $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictAny_fn(function (value) {
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainsVariable_fn(variableToCheckFor, value);
            }, typeRecordExtension.F);
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableContainsVariable = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableContainsVariable_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsEquivalentToTypeVariable_fn = function (declarationTypes, type_) {
    if (!type_.$) {
        return true;
    }
    else {
        var typeNotVariable = type_.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsEquivalentToTypeVariable_fn(declarationTypes, typeNotVariable);
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsEquivalentToTypeVariable = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsEquivalentToTypeVariable_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsEquivalentToTypeVariable_fn = function (declarationTypes, typeNotVariable) {
    switch (typeNotVariable.$) {
        case 1:
            var typeConstruct = typeNotVariable.a;
            var _v1 = $miniBill$elm_fast_dict$FastDict$get_fn(typeConstruct.b, declarationTypes);
            if (_v1.$ === 1) {
                return false;
            }
            else {
                var originModule = _v1.a;
                var _v2 = $miniBill$elm_fast_dict$FastDict$get_fn(typeConstruct.a, originModule.B);
                if (_v2.$ === 1) {
                    return false;
                }
                else {
                    var typeAlias = _v2.a;
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeIsEquivalentToTypeVariable_fn(declarationTypes, typeAlias.n);
                }
            }
        case 0:
            return false;
        case 2:
            return false;
        case 3:
            return false;
        case 4:
            return false;
        case 5:
            return false;
        default:
            return false;
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsEquivalentToTypeVariable = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsEquivalentToTypeVariable_fn);
var $elm$core$String$dropLeft_fn = function (n, string) {
    return (n < 1) ? string : _String_slice_fn(n, $elm$core$String$length(string), string);
}, $elm$core$String$dropLeft = F2($elm$core$String$dropLeft_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okListEmpty = $elm$core$Result$Ok(_List_Nil);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMakeComparable_fn = function (declarationTypes, type_) {
    if (!type_.$) {
        var typeVariable = type_.a;
        var _v7 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(typeVariable.a);
        if (_v7.$ === 1) {
            return $elm$core$Result$Ok(_List_fromArray([
                {
                    aP: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$justTypeVariableConstraintComparable,
                    aD: typeVariable.f,
                    aJ: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$twoDistinct_fn(typeVariable, 0, {
                        a: "comparable" + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$stringFirstCharToUpper(typeVariable.a),
                        f: typeVariable.f
                    }, 0)
                }
            ]));
        }
        else {
            var constraint = _v7.a;
            switch (constraint) {
                case 1:
                    return $elm$core$Result$Ok(_List_fromArray([
                        {
                            aP: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$justTypeVariableConstraintCompappend,
                            aD: typeVariable.f,
                            aJ: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$twoDistinct_fn(typeVariable, 0, {
                                a: "compappend" + $elm$core$String$dropLeft_fn(10, typeVariable.a),
                                f: typeVariable.f
                            }, 0)
                        }
                    ]));
                case 3:
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okListEmpty;
                case 2:
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okListEmpty;
                default:
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okListEmpty;
            }
        }
    }
    else {
        var typeNotVariable = type_.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableMakeComparable_fn(declarationTypes, typeNotVariable);
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMakeComparable = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMakeComparable_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableMakeComparable_fn = function (declarationTypes, typeNotVariable) {
    switch (typeNotVariable.$) {
        case 1:
            var variableReplacementTypeConstruct = typeNotVariable.a;
            var _v1 = variableReplacementTypeConstruct.b;
            switch (_v1) {
                case "String":
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okListEmpty;
                case "Char":
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okListEmpty;
                case "Basics":
                    var _v2 = variableReplacementTypeConstruct.a;
                    switch (_v2) {
                        case "Int":
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okListEmpty;
                        case "Float":
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okListEmpty;
                        default:
                            var variableReplacementTypeConstructNameNotIntOrFloat = _v2;
                            return $elm$core$Result$Err("Basics." + (variableReplacementTypeConstructNameNotIntOrFloat + " is not comparable"));
                    }
                case "Time":
                    var _v3 = variableReplacementTypeConstruct.a;
                    if (_v3 === "Posix") {
                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okListEmpty;
                    }
                    else {
                        var variableReplacementTypeConstructNameNotPosix = _v3;
                        return $elm$core$Result$Err("Time." + (variableReplacementTypeConstructNameNotPosix + " is not comparable"));
                    }
                case "List":
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom_fn_unwrapped(_List_Nil, function (argument, _v4) {
                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMakeComparable_fn(declarationTypes, argument);
                    }, variableReplacementTypeConstruct.c);
                default:
                    var moduleOriginNotBasicsStringCharTimeList = _v1;
                    var _v5 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeConstructFullyExpandIfAlias_fn({ dw: declarationTypes, aN: $stil4m$elm_syntax$Elm$Syntax$Range$empty }, variableReplacementTypeConstruct);
                    if (_v5.$ === 1) {
                        return $elm$core$Result$Err(moduleOriginNotBasicsStringCharTimeList + ("." + (variableReplacementTypeConstruct.a + " is not comparable")));
                    }
                    else {
                        var deAliasedTypeConstruct = _v5.a;
                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMakeComparable_fn(declarationTypes, deAliasedTypeConstruct);
                    }
            }
        case 2:
            var typeTuple = typeNotVariable.a;
            return $elm$core$Result$map2_fn_unwrapped(function (fromPart0, fromPart1) {
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listAppendFastButInReverseOrder_fn(fromPart1, fromPart0);
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMakeComparable_fn(declarationTypes, typeTuple.s), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMakeComparable_fn(declarationTypes, typeTuple.t));
        case 3:
            var typeTriple = typeNotVariable.a;
            return $elm$core$Result$map3_fn_unwrapped(function (fromPart0, fromPart1, fromPart2) {
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listAppendFastButInReverseOrder_fn(fromPart2, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listAppendFastButInReverseOrder_fn(fromPart1, fromPart0));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMakeComparable_fn(declarationTypes, typeTriple.s), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMakeComparable_fn(declarationTypes, typeTriple.t), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMakeComparable_fn(declarationTypes, typeTriple.ak));
        case 0:
            return $elm$core$Result$Err("unit (`()`) is not comparable");
        case 4:
            return $elm$core$Result$Err("record is not comparable");
        case 5:
            return $elm$core$Result$Err("record extension is not comparable");
        default:
            return $elm$core$Result$Err("function is not comparable");
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableMakeComparable = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableMakeComparable_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableOrError_fn = function (declarationTypes, replacementVariable, replacementTypeNotVariable) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableContainsVariable_fn(replacementVariable, replacementTypeNotVariable) ? ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsEquivalentToTypeVariable_fn(declarationTypes, replacementTypeNotVariable) ? $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone : $elm$core$Result$Err("cannot unify the variable " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableFromContextToInfoString(replacementVariable) + (" with the type " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(replacementTypeNotVariable) + " because that type contains the type variable itself."))))) : (_String_startsWith_fn("comparable", replacementVariable.a) ? $elm$core$Result$map_fn(function (makeReplacementTypeNotVariableComparable) {
        return {
            D: makeReplacementTypeNotVariableComparable,
            E: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$singleton_fn(replacementVariable, replacementTypeNotVariable)
        };
    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableMakeComparable_fn(declarationTypes, replacementTypeNotVariable)) : $elm$core$Result$Ok({
        D: _List_Nil,
        E: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$singleton_fn(replacementVariable, replacementTypeNotVariable)
    }));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableOrError = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableOrError_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableWithType_fn = function (type_, declarationTypes, replacementVariable, replacementTypeNotVariable) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableContainsVariable_fn(replacementVariable, replacementTypeNotVariable) ? ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableIsEquivalentToTypeVariable_fn(declarationTypes, replacementTypeNotVariable) ? $elm$core$Result$Ok({ g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, n: type_ }) : $elm$core$Result$Err("cannot unify the variable " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableFromContextToInfoString(replacementVariable) + (" with the type " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString(replacementTypeNotVariable) + " because that type contains the type variable itself."))))) : (_String_startsWith_fn("comparable", replacementVariable.a) ? $elm$core$Result$map_fn(function (makeReplacementTypeNotVariableComparable) {
        return {
            g: {
                D: makeReplacementTypeNotVariableComparable,
                E: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$singleton_fn(replacementVariable, replacementTypeNotVariable)
            },
            n: type_
        };
    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableMakeComparable_fn(declarationTypes, replacementTypeNotVariable)) : $elm$core$Result$Ok({
        g: {
            D: _List_Nil,
            E: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$singleton_fn(replacementVariable, replacementTypeNotVariable)
        },
        n: type_
    }));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableWithType = F4($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableWithType_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnify_fn = function (context, a, bNotVariable) {
    switch (a.$) {
        case 0:
            switch (bNotVariable.$) {
                case 0:
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okTypeUnitSubstitutionsNone;
                case 1:
                    var bTypeConstruct = bNotVariable.a;
                    var _v30 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct_fn(context, bTypeConstruct, a);
                    if (!_v30.$) {
                        var result = _v30.a;
                        return result;
                    }
                    else {
                        return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "unit (`()`) cannot be unified with types other than unit")));
                    }
                case 2:
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "unit (`()`) cannot be unified with types other than unit")));
                case 3:
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "unit (`()`) cannot be unified with types other than unit")));
                case 4:
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "unit (`()`) cannot be unified with types other than unit")));
                case 5:
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "unit (`()`) cannot be unified with types other than unit")));
                default:
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "unit (`()`) cannot be unified with types other than unit")));
            }
        case 1:
            var aTypeConstruct = a.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnifyWithTypeConstruct_fn(context, bNotVariable, aTypeConstruct);
        case 2:
            var aTuple = a.a;
            switch (bNotVariable.$) {
                case 2:
                    var bTuple = bNotVariable.a;
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (part0ABUnified, part1ABUnified) {
                        return $elm$core$Result$map_fn(function (substitutionsABMerged) {
                            return {
                                g: substitutionsABMerged,
                                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({ s: part0ABUnified.n, t: part1ABUnified.n }))
                            };
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, part0ABUnified.g, part1ABUnified.g));
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(context, aTuple.s, bTuple.s), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(context, aTuple.t, bTuple.t));
                case 0:
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "tuple (`( ..., ... )`) cannot be unified with types other than tuple")));
                case 1:
                    var bTypeConstruct = bNotVariable.a;
                    var _v32 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct_fn(context, bTypeConstruct, a);
                    if (!_v32.$) {
                        var result = _v32.a;
                        return result;
                    }
                    else {
                        return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "tuple (`( ..., ... )`) cannot be unified with types other than tuple")));
                    }
                case 3:
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "tuple (`( ..., ... )`) cannot be unified with types other than tuple")));
                case 4:
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "tuple (`( ..., ... )`) cannot be unified with types other than tuple")));
                case 5:
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "tuple (`( ..., ... )`) cannot be unified with types other than tuple")));
                default:
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "tuple (`( ..., ... )`) cannot be unified with types other than tuple")));
            }
        case 3:
            var aTriple = a.a;
            switch (bNotVariable.$) {
                case 3:
                    var bTriple = bNotVariable.a;
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3_fn_unwrapped(function (part0ABUnified, part1ABUnified, part2ABUnified) {
                        return $elm$core$Result$map_fn(function (substitutionsABMerged) {
                            return {
                                g: substitutionsABMerged,
                                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple({ s: part0ABUnified.n, t: part1ABUnified.n, ak: part2ABUnified.n }))
                            };
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3_fn(context, part0ABUnified.g, part1ABUnified.g, part2ABUnified.g));
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(context, aTriple.s, bTriple.s), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(context, aTriple.t, bTriple.t), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(context, aTriple.ak, bTriple.ak));
                case 0:
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "triple (`( ..., ..., ... )`) cannot be unified with types other than triple")));
                case 1:
                    var bTypeConstruct = bNotVariable.a;
                    var _v34 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct_fn(context, bTypeConstruct, a);
                    if (!_v34.$) {
                        var result = _v34.a;
                        return result;
                    }
                    else {
                        return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "triple (`( ..., ..., ... )`) cannot be unified with types other than triple")));
                    }
                case 2:
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "triple (`( ..., ..., ... )`) cannot be unified with types other than triple")));
                case 4:
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "triple (`( ..., ..., ... )`) cannot be unified with types other than triple")));
                case 5:
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "triple (`( ..., ..., ... )`) cannot be unified with types other than triple")));
                default:
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "triple (`( ..., ..., ... )`) cannot be unified with types other than triple")));
            }
        case 4:
            var aRecord = a.a;
            switch (bNotVariable.$) {
                case 4:
                    var bRecord = bNotVariable.a;
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeRecordUnify_fn(context, aRecord, bRecord);
                case 5:
                    var bRecordExtension = bNotVariable.a;
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeRecordExtensionUnifyWithRecord_fn(context, bRecordExtension, aRecord);
                case 0:
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("record " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(aRecord)) + (" cannot be unified with types other than record or record extension, found: " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit)))))));
                case 1:
                    var bTypeConstruct = bNotVariable.a;
                    var _v36 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct_fn(context, bTypeConstruct, a);
                    if (!_v36.$) {
                        var result = _v36.a;
                        return result;
                    }
                    else {
                        return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("record " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(aRecord)) + (" cannot be unified with types other than record or record extension, found: " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(bTypeConstruct))))))));
                    }
                case 2:
                    var bParts = bNotVariable.a;
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("record " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(aRecord)) + (" cannot be unified with types other than record or record extension, found: " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(bParts))))))));
                case 3:
                    var bParts = bNotVariable.a;
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("record " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(aRecord)) + (" cannot be unified with types other than record or record extension, found: " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple(bParts))))))));
                default:
                    var bTypeFunction = bNotVariable.a;
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("record " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(aRecord)) + (" cannot be unified with types other than record or record extension, found: " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(bTypeFunction))))))));
            }
        case 5:
            var aRecordExtension = a.a;
            switch (bNotVariable.$) {
                case 4:
                    var bRecord = bNotVariable.a;
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeRecordExtensionUnifyWithRecord_fn(context, aRecordExtension, bRecord);
                case 5:
                    var bRecordExtension = bNotVariable.a;
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeRecordExtensionUnifyWithRecordExtension_fn(context, aRecordExtension, bRecordExtension);
                case 0:
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("record extension " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(aRecordExtension)) + (" cannot be unified with types other than record or record extension, found: " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit)))))));
                case 1:
                    var bTypeConstruct = bNotVariable.a;
                    var _v38 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct_fn(context, bTypeConstruct, a);
                    if (!_v38.$) {
                        var result = _v38.a;
                        return result;
                    }
                    else {
                        return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("record extension " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(aRecordExtension)) + (" cannot be unified with types other than record or record extension, found: " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(bTypeConstruct))))))));
                    }
                case 2:
                    var bParts = bNotVariable.a;
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("record extension " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(aRecordExtension)) + (" cannot be unified with types other than record or record extension, found: " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(bParts))))))));
                case 3:
                    var bParts = bNotVariable.a;
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("record extension " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(aRecordExtension)) + (" cannot be unified with types other than record or record extension, found: " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple(bParts))))))));
                default:
                    var bTypeFunction = bNotVariable.a;
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("record extension " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(aRecordExtension)) + (" cannot be unified with types other than record or record extension, found: " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(bTypeFunction))))))));
            }
        default:
            var aFunction = a.a;
            switch (bNotVariable.$) {
                case 6:
                    var bFunction = bNotVariable.a;
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (inputABUnified, outputABUnified) {
                        return $elm$core$Result$map_fn(function (substitutionsABMerged) {
                            return {
                                g: substitutionsABMerged,
                                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: inputABUnified.n, d: outputABUnified.n }))
                            };
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, inputABUnified.g, outputABUnified.g));
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(context, aFunction.e, bFunction.e), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(context, aFunction.d, bFunction.d));
                case 0:
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("function " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction)) + (" cannot be unified with types other than function: " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit)))))));
                case 1:
                    var bTypeConstruct = bNotVariable.a;
                    var _v40 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct_fn(context, bTypeConstruct, a);
                    if (!_v40.$) {
                        var result = _v40.a;
                        return result;
                    }
                    else {
                        return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("function " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction)) + (" cannot be unified with types other than function: " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(bTypeConstruct))))))));
                    }
                case 2:
                    var bTypeTuple = bNotVariable.a;
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("function " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction)) + (" cannot be unified with types other than function: " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(bTypeTuple))))))));
                case 3:
                    var bTypeTriple = bNotVariable.a;
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("function " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction)) + (" cannot be unified with types other than function: " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple(bTypeTriple))))))));
                case 4:
                    var bTypeRecord = bNotVariable.a;
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("function " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction)) + (" cannot be unified with types other than function: " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(bTypeRecord))))))));
                default:
                    var bTypeRecordExtension = bNotVariable.a;
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("function " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction)) + (" cannot be unified with types other than function: " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(bTypeRecordExtension))))))));
            }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnify = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnify_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnifyWithType_fn = function (context, aTypeNotVariable, b) {
    if (!b.$) {
        var bVariableName = b.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableWithType_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(aTypeNotVariable), context.dw, bVariableName, aTypeNotVariable);
    }
    else {
        var bTypeNotVariable = b.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnify_fn(context, aTypeNotVariable, bTypeNotVariable);
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnifyWithType = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnifyWithType_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnifyWithTypeConstruct_fn = function (context, aTypeNotVariable, bTypeConstruct) {
    switch (aTypeNotVariable.$) {
        case 1:
            var aTypeConstruct = aTypeNotVariable.a;
            if (_Utils_eq(bTypeConstruct.a, aTypeConstruct.a) && _Utils_eq(bTypeConstruct.b, aTypeConstruct.b)) {
                var _v18 = aTypeConstruct.c;
                if (!_v18.b) {
                    return $elm$core$Result$Ok({
                        g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
                        n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(aTypeNotVariable)
                    });
                }
                else {
                    return $elm$core$Result$map_fn(function (argumentsABUnified) {
                        return {
                            g: argumentsABUnified.g,
                            n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: $elm$core$List$reverse(argumentsABUnified.cZ),
                                b: bTypeConstruct.b,
                                a: bTypeConstruct.a
                            }))
                        };
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldl2WhileOkFrom_fn_unwrapped($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$argumentsReverseListEmptySubstitutionsNone, bTypeConstruct.c, aTypeConstruct.c, function (aArgument, bArgument, soFar) {
                        return $elm$core$Result$andThen_fn(function (argumentTypeUnifiedAndSubstitutions) {
                            return $elm$core$Result$map_fn(function (substitutionsWithArgument) {
                                return {
                                    cZ: _List_Cons(argumentTypeUnifiedAndSubstitutions.n, soFar.cZ),
                                    g: substitutionsWithArgument
                                };
                            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, soFar.g, argumentTypeUnifiedAndSubstitutions.g));
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(context, aArgument, bArgument));
                    }));
                }
            }
            else {
                var _v19 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct_fn(context, bTypeConstruct, aTypeNotVariable);
                if (!_v19.$) {
                    var result = _v19.a;
                    return result;
                }
                else {
                    var _v20 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct_fn(context, aTypeConstruct, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(bTypeConstruct));
                    if (!_v20.$) {
                        var result = _v20.a;
                        return result;
                    }
                    else {
                        return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("choice type " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString({ a: bTypeConstruct.a, K: bTypeConstruct.b }) + (" cannot be unified be with a choice type with a different name: " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(aTypeConstruct))))))));
                    }
                }
            }
        case 0:
            var _v21 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct_fn(context, bTypeConstruct, aTypeNotVariable);
            if (!_v21.$) {
                var result = _v21.a;
                return result;
            }
            else {
                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("choice type " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString({ a: bTypeConstruct.a, K: bTypeConstruct.b }) + " cannot be unified with types other than choice type/type alias")))));
            }
        case 2:
            var _v22 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct_fn(context, bTypeConstruct, aTypeNotVariable);
            if (!_v22.$) {
                var result = _v22.a;
                return result;
            }
            else {
                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("choice type " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString({ a: bTypeConstruct.a, K: bTypeConstruct.b }) + " cannot be unified with types other than choice type/type alias")))));
            }
        case 3:
            var _v23 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct_fn(context, bTypeConstruct, aTypeNotVariable);
            if (!_v23.$) {
                var result = _v23.a;
                return result;
            }
            else {
                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("choice type " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString({ a: bTypeConstruct.a, K: bTypeConstruct.b }) + " cannot be unified with types other than choice type/type alias")))));
            }
        case 4:
            var _v24 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct_fn(context, bTypeConstruct, aTypeNotVariable);
            if (!_v24.$) {
                var result = _v24.a;
                return result;
            }
            else {
                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("choice type " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString({ a: bTypeConstruct.a, K: bTypeConstruct.b }) + " cannot be unified with types other than choice type/type alias")))));
            }
        case 5:
            var _v25 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct_fn(context, bTypeConstruct, aTypeNotVariable);
            if (!_v25.$) {
                var result = _v25.a;
                return result;
            }
            else {
                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("choice type " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString({ a: bTypeConstruct.a, K: bTypeConstruct.b }) + " cannot be unified with types other than choice type/type alias")))));
            }
        default:
            var _v26 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct_fn(context, bTypeConstruct, aTypeNotVariable);
            if (!_v26.$) {
                var result = _v26.a;
                return result;
            }
            else {
                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("choice type " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString({ a: bTypeConstruct.a, K: bTypeConstruct.b }) + " cannot be unified with types other than choice type/type alias")))));
            }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnifyWithTypeConstruct = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnifyWithTypeConstruct_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeRecordExtensionUnifyWithRecord_fn = function (context, recordExtension, recordFields) {
    return $elm$core$Result$andThen_fn(function (fieldsUnified) {
        var unifiedTypeNotVariable = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(fieldsUnified.aG);
        return $elm$core$Result$map_fn(function (fullSubstitutions) {
            return {
                g: fullSubstitutions,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(unifiedTypeNotVariable)
            };
        }, $elm$core$Result$andThen_fn(function (recordVariableToUnifiedSubstitutions) {
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, fieldsUnified.g, recordVariableToUnifiedSubstitutions);
        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableOrError_fn(context.dw, recordExtension.V, unifiedTypeNotVariable)));
    }, $miniBill$elm_fast_dict$FastDict$merge_fn(F3(function (name, _v15, _v16) {
        return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("record extension with the field `" + (name + ("` cannot be unified with a record that does not have this field. The record extension is `" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(recordExtension)) + ("` and the record is `" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(recordFields)) + "`")))))))));
    }), F4(function (name, aValue, bValue, soFarOrError) {
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (abValueUnified, soFar) {
            return $elm$core$Result$map_fn(function (substitutionsWithField) {
                return {
                    aG: $miniBill$elm_fast_dict$FastDict$insert_fn(name, abValueUnified.n, soFar.aG),
                    g: substitutionsWithField
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, soFar.g, abValueUnified.g));
        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(context, aValue, bValue), soFarOrError);
    }), F3(function (name, value, soFarOrError) {
        return $elm$core$Result$map_fn(function (soFar) {
            return {
                aG: $miniBill$elm_fast_dict$FastDict$insert_fn(name, value, soFar.aG),
                g: soFar.g
            };
        }, soFarOrError);
    }), recordExtension.F, recordFields, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okFieldsUnifiedEmptySubstitutionsNone));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeRecordExtensionUnifyWithRecord = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeRecordExtensionUnifyWithRecord_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeRecordExtensionUnifyWithRecordExtension_fn = function (context, aRecordExtension, bRecordExtension) {
    return $elm$core$Result$andThen_fn(function (forFields) {
        var newBaseVariable = {
            a: aRecordExtension.V.a,
            f: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeOverarching_fn(aRecordExtension.V.f, bRecordExtension.V.f)
        };
        var unifiedRecordExtension = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension({ F: forFields.aG, V: newBaseVariable });
        return $elm$core$Result$map_fn(function (fullSubstitutions) {
            return {
                g: fullSubstitutions,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(unifiedRecordExtension)
            };
        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (aRecordVariableSubstitutions, bRecordVariableSubstitutions) {
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3_fn(context, forFields.g, aRecordVariableSubstitutions, bRecordVariableSubstitutions);
        }, $miniBill$elm_fast_dict$FastDict$isEmpty(forFields.bF) ? $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFrom2EquivalentVariables_fn(aRecordExtension.V, newBaseVariable) : $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableOrError_fn(context.dw, aRecordExtension.V, unifiedRecordExtension), $miniBill$elm_fast_dict$FastDict$isEmpty(forFields.bA) ? $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFrom2EquivalentVariables_fn(bRecordExtension.V, newBaseVariable) : $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableOrError_fn(context.dw, bRecordExtension.V, unifiedRecordExtension)));
    }, $miniBill$elm_fast_dict$FastDict$merge_fn(F3(function (name, value, soFarOrError) {
        return $elm$core$Result$map_fn(function (soFar) {
            return {
                bA: $miniBill$elm_fast_dict$FastDict$insert_fn(name, value, soFar.bA),
                bF: soFar.bF,
                aG: $miniBill$elm_fast_dict$FastDict$insert_fn(name, value, soFar.aG),
                g: soFar.g
            };
        }, soFarOrError);
    }), F4(function (name, aValue, bValue, soFarOrError) {
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (abValueUnified, soFar) {
            return $elm$core$Result$map_fn(function (substitutionsWithField) {
                return {
                    bA: soFar.bA,
                    bF: soFar.bF,
                    aG: $miniBill$elm_fast_dict$FastDict$insert_fn(name, abValueUnified.n, soFar.aG),
                    g: substitutionsWithField
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, soFar.g, abValueUnified.g));
        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(context, aValue, bValue), soFarOrError);
    }), F3(function (name, value, soFarOrError) {
        return $elm$core$Result$map_fn(function (soFar) {
            return {
                bA: soFar.bA,
                bF: $miniBill$elm_fast_dict$FastDict$insert_fn(name, value, soFar.bF),
                aG: $miniBill$elm_fast_dict$FastDict$insert_fn(name, value, soFar.aG),
                g: soFar.g
            };
        }, soFarOrError);
    }), aRecordExtension.F, bRecordExtension.F, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okFieldsUnifiedEmptySubstitutionsNoneAOnlyDictEmptyBOnlyDictEmpty));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeRecordExtensionUnifyWithRecordExtension = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeRecordExtensionUnifyWithRecordExtension_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeRecordUnify_fn = function (context, aFields, bFields) {
    return $elm$core$Result$map_fn(function (fieldsUnified) {
        return {
            g: fieldsUnified.g,
            n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(fieldsUnified.aG))
        };
    }, $miniBill$elm_fast_dict$FastDict$merge_fn(F3(function (name, _v11, _v12) {
        return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("record with the field " + (name + " cannot be unified with a record that does not have this field")))));
    }), F4(function (name, aValue, bValue, soFarOrError) {
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (abValueUnified, soFar) {
            return $elm$core$Result$map_fn(function (substitutionsWithField) {
                return {
                    aG: $miniBill$elm_fast_dict$FastDict$insert_fn(name, abValueUnified.n, soFar.aG),
                    g: substitutionsWithField
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, soFar.g, abValueUnified.g));
        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(context, aValue, bValue), soFarOrError);
    }), F3(function (name, _v13, _v14) {
        return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("record with the field " + (name + " cannot be unified with a record that does not have this field")))));
    }), aFields, bFields, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okFieldsUnifiedEmptySubstitutionsNone));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeRecordUnify = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeRecordUnify_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn = function (context, a, b) {
    if (a.$ === 1) {
        var aTypeNotVariable = a.a;
        if (!b.$) {
            var bVariableName = b.a;
            return $elm$core$Result$mapError_fn(function (error) {
                return "(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + error));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableWithType_fn(a, context.dw, bVariableName, aTypeNotVariable));
        }
        else {
            var bTypeNotVariable = b.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnify_fn(context, aTypeNotVariable, bTypeNotVariable);
        }
    }
    else {
        var aVariable = a.a;
        if (!b.$) {
            var bVariable = b.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFrom2EquivalentVariablesWithType_fn(a, aVariable, bVariable);
        }
        else {
            var bTypeNotVariable = b.a;
            return $elm$core$Result$mapError_fn(function (error) {
                return "(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + error));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableWithType_fn(b, context.dw, aVariable, bTypeNotVariable));
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct_fn = function (context, aTypeConstructToExpand, b) {
    var _v6 = $miniBill$elm_fast_dict$FastDict$get_fn(aTypeConstructToExpand.b, context.dw);
    if (_v6.$ === 1) {
        return $elm$core$Maybe$Just($elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("could not find declaration types in the origin module of the type construct " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString({ a: aTypeConstructToExpand.a, K: aTypeConstructToExpand.b }))))));
    }
    else {
        var aOriginModuleTypes = _v6.a;
        var _v7 = $miniBill$elm_fast_dict$FastDict$get_fn(aTypeConstructToExpand.a, aOriginModuleTypes.B);
        if (_v7.$ === 1) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var aOriginAliasDeclaration = _v7.a;
            var prefix = "parameter" + ($elm$core$String$replace_fn(".", "", aTypeConstructToExpand.b) + aTypeConstructToExpand.a);
            return $elm$core$Maybe$Just($elm$core$Result$andThen_fn(function (constructedAliasedType) {
                return $elm$core$Result$andThen_fn(function (constructedAliasedTypeUnifiedWithB) {
                    return $elm$core$Result$map_fn(function (fullSubstitutions) {
                        return { g: fullSubstitutions, n: constructedAliasedTypeUnifiedWithB.n };
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, constructedAliasedTypeUnifiedWithB.g, constructedAliasedType.g));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnifyWithType_fn(context, b, constructedAliasedType.n));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldl2WhileOkFrom_fn_unwrapped({
                g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(function (aliasVariable) {
                    return {
                        a: _Utils_ap(prefix, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$stringFirstCharToUpper(aliasVariable.a)),
                        f: context.aN
                    };
                }, aOriginAliasDeclaration.n)
            }, aOriginAliasDeclaration.o, aTypeConstructToExpand.c, function (parameterName, argument, constructedAliasedTypeSoFar) {
                return $elm$core$Result$map_fn(function (afterSubstitutionType) {
                    return { g: constructedAliasedTypeSoFar.g, n: afterSubstitutionType };
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariable_fn(context, {
                    n: argument,
                    bm: {
                        a: _Utils_ap(prefix, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$stringFirstCharToUpper(parameterName)),
                        f: context.aN
                    }
                }, constructedAliasedTypeSoFar.n));
            })));
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn = function (context, a, b) {
    if ($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$isEmpty(a.E)) {
        var _v0 = a.D;
        if (!_v0.b) {
            return $elm$core$Result$Ok(b);
        }
        else {
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariableSetMergeIntoVariableSubstitutionsWithVariableToType_fn(b.E, a.D, b.D);
        }
    }
    else {
        if ($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$isEmpty(b.E)) {
            var _v1 = b.D;
            if (!_v1.b) {
                return $elm$core$Result$Ok(a);
            }
            else {
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariableSetMergeIntoVariableSubstitutionsWithVariableToType_fn(a.E, a.D, b.D);
            }
        }
        else {
            return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$merge_fn(F3(function (variable, aType, soFarOrError) {
                return $elm$core$Result$andThen_fn(function (soFar) {
                    var _v2 = $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get_fn(variable, soFar.E);
                    if (_v2.$ === 1) {
                        return $elm$core$Result$Ok({
                            D: soFar.D,
                            E: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace_fn(variable, aType, soFar.E)
                        });
                    }
                    else {
                        var soFarReplacementTypeForVariable = _v2.a;
                        return $elm$core$Result$andThen_fn(function (aTypeUnifiedWithSoFarReplacementTypeForVariable) {
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, {
                                D: soFar.D,
                                E: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace_fn(variable, aType, soFar.E)
                            }, aTypeUnifiedWithSoFarReplacementTypeForVariable.g);
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnify_fn(context, aType, soFarReplacementTypeForVariable));
                    }
                }, soFarOrError);
            }), F4(function (variable, aType, bType, soFarOrError) {
                return $elm$core$Result$andThen_fn(function (soFar) {
                    return $elm$core$Result$andThen_fn(function (abTypesUnified) {
                        return $elm$core$Result$andThen_fn(function (substitutionsWithAB) {
                            var _v3 = abTypesUnified.n;
                            if (!_v3.$) {
                                var abUnifiedVariable = _v3.a;
                                return $elm$core$Result$map_fn(function (equivalentVariables) {
                                    return { D: equivalentVariables, E: substitutionsWithAB.E };
                                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariablesMergeWithSetOf2_fn(variable, abUnifiedVariable, substitutionsWithAB.D));
                            }
                            else {
                                var abUnifiedNotVariable = _v3.a;
                                var _v4 = $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get_fn(variable, substitutionsWithAB.E);
                                if (_v4.$ === 1) {
                                    return $elm$core$Result$Ok({
                                        D: substitutionsWithAB.D,
                                        E: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace_fn(variable, abUnifiedNotVariable, substitutionsWithAB.E)
                                    });
                                }
                                else {
                                    var substitutionWithABFromVariable = _v4.a;
                                    return $elm$core$Result$andThen_fn(function (abUnifiedNotVariableUnifiedWithSubstitutionWithABFromVariable) {
                                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, {
                                            D: substitutionsWithAB.D,
                                            E: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace_fn(variable, abUnifiedNotVariable, substitutionsWithAB.E)
                                        }, abUnifiedNotVariableUnifiedWithSubstitutionWithABFromVariable.g);
                                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnify_fn(context, abUnifiedNotVariable, substitutionWithABFromVariable));
                                }
                            }
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, soFar, abTypesUnified.g));
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnify_fn(context, aType, bType));
                }, soFarOrError);
            }), F3(function (variable, bType, soFarOrError) {
                return $elm$core$Result$andThen_fn(function (soFar) {
                    var _v5 = $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get_fn(variable, soFar.E);
                    if (_v5.$ === 1) {
                        return $elm$core$Result$Ok({
                            D: soFar.D,
                            E: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace_fn(variable, bType, soFar.E)
                        });
                    }
                    else {
                        var soFarReplacementTypeForVariable = _v5.a;
                        return $elm$core$Result$andThen_fn(function (bTypeUnifiedWithSoFarReplacementTypeForVariable) {
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, {
                                D: soFar.D,
                                E: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace_fn(variable, bType, soFar.E)
                            }, bTypeUnifiedWithSoFarReplacementTypeForVariable.g);
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnify_fn(context, bType, soFarReplacementTypeForVariable));
                    }
                }, soFarOrError);
            }), a.E, b.E, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariableSetMergeIntoVariableSubstitutionsWithVariableToType_fn($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty, a.D, b.D));
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3_fn = function (context, a, b, c) {
    return $elm$core$Result$andThen_fn(function (abSubstitutions) {
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, abSubstitutions, c);
    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, a, b));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3 = F4($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableToTypeSubstitutionsCondenseVariables_fn = function (context, variableToCondensedLookup, variableToType) {
    return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldlWhileOkFrom_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, F3(function (uncondensedVariable, replacementType, soFar) {
        var replacementTypeUsingCondensedVariables = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableMapVariables_fn(function (variable) {
            return $elm$core$Maybe$withDefault_fn(variable, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get_fn(variable, variableToCondensedLookup));
        }, replacementType);
        var _v0 = $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get_fn(uncondensedVariable, variableToCondensedLookup);
        if (_v0.$ === 1) {
            return $elm$core$Result$Ok({
                D: soFar.D,
                E: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace_fn(uncondensedVariable, replacementTypeUsingCondensedVariables, soFar.E)
            });
        }
        else {
            var condensedVariable = _v0.a;
            var _v1 = $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get_fn(condensedVariable, soFar.E);
            if (_v1.$ === 1) {
                return $elm$core$Result$Ok({
                    D: soFar.D,
                    E: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace_fn(condensedVariable, replacementTypeUsingCondensedVariables, soFar.E)
                });
            }
            else {
                var existingReplacementTypeForCondensedVariable = _v1.a;
                return $elm$core$Result$andThen_fn(function (replacementTypeForCondensedVariable) {
                    var _v2 = replacementTypeForCondensedVariable.n;
                    if (!_v2.$) {
                        var replacementTypeVariableForCondensedVariable = _v2.a;
                        return $elm$core$Result$map_fn(function (equivalentVariablesWithCondensed) {
                            return { D: equivalentVariablesWithCondensed, E: soFar.E };
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariablesMergeWithSetOf2_fn(condensedVariable, replacementTypeVariableForCondensedVariable, soFar.D));
                    }
                    else {
                        var replacementTypeNotVariableForCondensedVariable = _v2.a;
                        return $elm$core$Result$map_fn(function (substitutionsSoFarAndFromUnifying) {
                            return {
                                D: substitutionsSoFarAndFromUnifying.D,
                                E: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$insertNoReplace_fn(condensedVariable, replacementTypeNotVariableForCondensedVariable, substitutionsSoFarAndFromUnifying.E)
                            };
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, soFar, replacementTypeForCondensedVariable.g));
                    }
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnify_fn(context, existingReplacementTypeForCondensedVariable, replacementTypeUsingCondensedVariables));
            }
        }
    }), variableToType);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableToTypeSubstitutionsCondenseVariables = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableToTypeSubstitutionsCondenseVariables_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$createBatchOfSubstitutionsToApply_fn = function (context, substitutions) {
    var _v0 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$createEquivalentVariablesToCondensedVariableLookup(substitutions.D);
    if (_v0.$ === 1) {
        var error = _v0.a;
        return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + error)));
    }
    else {
        var variableToCondensedLookup = _v0.a;
        var _v1 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableToTypeSubstitutionsCondenseVariables_fn(context, variableToCondensedLookup, substitutions.E);
        if (_v1.$ === 1) {
            var error = _v1.a;
            return $elm$core$Result$Err(error);
        }
        else {
            var variableToTypeWithCondensedVariables = _v1.a;
            var _v2 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsVariableToTypeApplyOverItself_fn(context, variableToTypeWithCondensedVariables.E);
            if (_v2.$ === 1) {
                var error = _v2.a;
                return $elm$core$Result$Err(error);
            }
            else {
                var variableToTypeSubstitutedOverItself = _v2.a;
                return $elm$core$Result$Ok({
                    b7: variableToTypeWithCondensedVariables.D,
                    a6: function (originalTypeVariable) {
                        var _v3 = $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get_fn(originalTypeVariable, variableToCondensedLookup);
                        if (!_v3.$) {
                            var condensedVariable = _v3.a;
                            return $elm$core$Maybe$Just(function () {
                                var _v4 = $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get_fn(condensedVariable, variableToTypeSubstitutedOverItself);
                                if (_v4.$ === 1) {
                                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable(condensedVariable);
                                }
                                else {
                                    var replacementTypeNotVariable = _v4.a;
                                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(replacementTypeNotVariable);
                                }
                            }());
                        }
                        else {
                            return $elm$core$Maybe$map_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable, $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$get_fn(originalTypeVariable, variableToTypeSubstitutedOverItself));
                        }
                    }
                });
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$createBatchOfSubstitutionsToApply = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$createBatchOfSubstitutionsToApply_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$RopeLeaf_fn = function (a, b) {
    return { $: 0, a: a, b: b };
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$RopeLeaf = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$RopeLeaf_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$RopeBranch_fn = function (a, b) {
    return { $: 1, a: a, b: b };
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$RopeBranch = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$RopeBranch_fn);
var $miniBill$elm_fast_dict$FastDict$size = function (_v0) {
    var sz = _v0.a;
    return sz;
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictUnionWith_fn = function (combineValuesFromBothAndKey, aDict, bDict) {
    return (_Utils_cmp($miniBill$elm_fast_dict$FastDict$size(aDict), $miniBill$elm_fast_dict$FastDict$size(bDict)) > 0) ? $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (key, b, soFar) {
        var _v0 = $miniBill$elm_fast_dict$FastDict$get_fn(key, soFar);
        if (_v0.$ === 1) {
            return $miniBill$elm_fast_dict$FastDict$insert_fn(key, b, soFar);
        }
        else {
            var a = _v0.a;
            return $miniBill$elm_fast_dict$FastDict$insert_fn(key, A3(combineValuesFromBothAndKey, key, a, b), soFar);
        }
    }), aDict, bDict) : $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (key, a, soFar) {
        var _v1 = $miniBill$elm_fast_dict$FastDict$get_fn(key, soFar);
        if (_v1.$ === 1) {
            return $miniBill$elm_fast_dict$FastDict$insert_fn(key, a, soFar);
        }
        else {
            var b = _v1.a;
            return $miniBill$elm_fast_dict$FastDict$insert_fn(key, A3(combineValuesFromBothAndKey, key, a, b), soFar);
        }
    }), bDict, aDict);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictUnionWith_fn_unwrapped = function (combineValuesFromBothAndKey, aDict, bDict) {
    return (_Utils_cmp($miniBill$elm_fast_dict$FastDict$size(aDict), $miniBill$elm_fast_dict$FastDict$size(bDict)) > 0) ? $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (key, b, soFar) {
        var _v0 = $miniBill$elm_fast_dict$FastDict$get_fn(key, soFar);
        if (_v0.$ === 1) {
            return $miniBill$elm_fast_dict$FastDict$insert_fn(key, b, soFar);
        }
        else {
            var a = _v0.a;
            return $miniBill$elm_fast_dict$FastDict$insert_fn(key, combineValuesFromBothAndKey(key, a, b), soFar);
        }
    }), aDict, bDict) : $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (key, a, soFar) {
        var _v1 = $miniBill$elm_fast_dict$FastDict$get_fn(key, soFar);
        if (_v1.$ === 1) {
            return $miniBill$elm_fast_dict$FastDict$insert_fn(key, a, soFar);
        }
        else {
            var b = _v1.a;
            return $miniBill$elm_fast_dict$FastDict$insert_fn(key, combineValuesFromBothAndKey(key, a, b), soFar);
        }
    }), bDict, aDict);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictUnionWith = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictUnionWith_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge_fn = function (a, b) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictUnionWith_fn_unwrapped(function (_v0, aUses, bUses) {
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$RopeBranch_fn(aUses, bUses);
    }, a, b);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge_fn);
var $miniBill$elm_fast_dict$FastDict$member_fn = function (key, dict) {
    var _v0 = $miniBill$elm_fast_dict$FastDict$get_fn(key, dict);
    if (!_v0.$) {
        return true;
    }
    else {
        return false;
    }
}, $miniBill$elm_fast_dict$FastDict$member = F2($miniBill$elm_fast_dict$FastDict$member_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionLetInUsesOfLocalReferences_fn = function (localReferencesToCollect, expressionLetIn) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge_fn($elm$core$List$foldl_fn_unwrapped(function (letDeclaration, soFar) {
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge_fn(soFar, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationUsesOfLocalReferences_fn(localReferencesToCollect, letDeclaration.L));
    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationUsesOfLocalReferences_fn(localReferencesToCollect, expressionLetIn.c4.L), expressionLetIn.c5), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(localReferencesToCollect, expressionLetIn.h));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionLetInUsesOfLocalReferences = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionLetInUsesOfLocalReferences_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn = function (localReferencesToCollect, expressionTypedNode) {
    expressionTypedNodeUsesOfLocalReferences: while (true) {
        var _v1 = expressionTypedNode.l;
        switch (_v1.$) {
            case 0:
                return $miniBill$elm_fast_dict$FastDict$empty;
            case 1:
                return $miniBill$elm_fast_dict$FastDict$empty;
            case 2:
                return $miniBill$elm_fast_dict$FastDict$empty;
            case 3:
                return $miniBill$elm_fast_dict$FastDict$empty;
            case 4:
                return $miniBill$elm_fast_dict$FastDict$empty;
            case 6:
                return $miniBill$elm_fast_dict$FastDict$empty;
            case 7:
                return $miniBill$elm_fast_dict$FastDict$empty;
            case 5:
                var reference = _v1.a;
                var _v2 = reference.K;
                if (_v2 === "") {
                    return $miniBill$elm_fast_dict$FastDict$member_fn(reference.a, localReferencesToCollect) ? $miniBill$elm_fast_dict$FastDict$singleton_fn(reference.a, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$RopeLeaf_fn(expressionTypedNode.aN, expressionTypedNode.n)) : $miniBill$elm_fast_dict$FastDict$empty;
                }
                else {
                    return $miniBill$elm_fast_dict$FastDict$empty;
                }
            case 8:
                return $miniBill$elm_fast_dict$FastDict$empty;
            case 9:
                return $miniBill$elm_fast_dict$FastDict$empty;
            case 10:
                var negated = _v1.a;
                var $temp$localReferencesToCollect = localReferencesToCollect, $temp$expressionTypedNode = negated;
                localReferencesToCollect = $temp$localReferencesToCollect;
                expressionTypedNode = $temp$expressionTypedNode;
                continue expressionTypedNodeUsesOfLocalReferences;
            case 11:
                var inParens = _v1.a;
                var $temp$localReferencesToCollect = localReferencesToCollect, $temp$expressionTypedNode = inParens;
                localReferencesToCollect = $temp$localReferencesToCollect;
                expressionTypedNode = $temp$expressionTypedNode;
                continue expressionTypedNodeUsesOfLocalReferences;
            case 14:
                var expressionRecordAccess = _v1.a;
                var $temp$localReferencesToCollect = localReferencesToCollect, $temp$expressionTypedNode = expressionRecordAccess.aY;
                localReferencesToCollect = $temp$localReferencesToCollect;
                expressionTypedNode = $temp$expressionTypedNode;
                continue expressionTypedNodeUsesOfLocalReferences;
            case 15:
                var expressionInfixOperation = _v1.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(localReferencesToCollect, expressionInfixOperation.cw), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(localReferencesToCollect, expressionInfixOperation.cV));
            case 12:
                var parts = _v1.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(localReferencesToCollect, parts.s), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(localReferencesToCollect, parts.t));
            case 13:
                var parts = _v1.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(localReferencesToCollect, parts.s), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(localReferencesToCollect, parts.t), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(localReferencesToCollect, parts.ak)));
            case 16:
                var expressionIfThenElse = _v1.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(localReferencesToCollect, expressionIfThenElse.aA), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(localReferencesToCollect, expressionIfThenElse.aC), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(localReferencesToCollect, expressionIfThenElse.aB)));
            case 17:
                var elements = _v1.a;
                return $elm$core$List$foldl_fn_unwrapped(function (element, soFar) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge_fn(soFar, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(localReferencesToCollect, element));
                }, $miniBill$elm_fast_dict$FastDict$empty, elements);
            case 19:
                var fields = _v1.a;
                return $elm$core$List$foldl_fn_unwrapped(function (field, soFar) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge_fn(soFar, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(localReferencesToCollect, field.l));
                }, $miniBill$elm_fast_dict$FastDict$empty, fields);
            case 18:
                var expressionCall = _v1.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(localReferencesToCollect, expressionCall.w), $elm$core$List$foldl_fn_unwrapped(function (argument, soFar) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge_fn(soFar, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(localReferencesToCollect, argument));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(localReferencesToCollect, expressionCall.dR), expressionCall.dS));
            case 21:
                var expressionLambda = _v1.a;
                var $temp$localReferencesToCollect = localReferencesToCollect, $temp$expressionTypedNode = expressionLambda.h;
                localReferencesToCollect = $temp$localReferencesToCollect;
                expressionTypedNode = $temp$expressionTypedNode;
                continue expressionTypedNodeUsesOfLocalReferences;
            case 20:
                var expressionRecordUpdate = _v1.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge_fn($miniBill$elm_fast_dict$FastDict$member_fn(expressionRecordUpdate.V.l.a, localReferencesToCollect) ? $miniBill$elm_fast_dict$FastDict$singleton_fn(expressionRecordUpdate.V.l.a, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$RopeLeaf_fn(expressionRecordUpdate.V.aN, expressionRecordUpdate.V.n)) : $miniBill$elm_fast_dict$FastDict$empty, $elm$core$List$foldl_fn_unwrapped(function (field, soFar) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge_fn(soFar, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(localReferencesToCollect, field.l));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(localReferencesToCollect, expressionRecordUpdate.d4.l), expressionRecordUpdate.d5));
            case 22:
                var expressionCaseOf = _v1.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(localReferencesToCollect, expressionCaseOf.at), $elm$core$List$foldl_fn_unwrapped(function (case_, soFar) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge_fn(soFar, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(localReferencesToCollect, case_.h));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(localReferencesToCollect, expressionCaseOf.ar.h), expressionCaseOf.as));
            default:
                var expressionLetIn = _v1.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionLetInUsesOfLocalReferences_fn(localReferencesToCollect, expressionLetIn);
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationUsesOfLocalReferences_fn = function (localReferencesToCollect, letDeclaration) {
    if (!letDeclaration.$) {
        var letDestructuring = letDeclaration.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(localReferencesToCollect, letDestructuring.O);
    }
    else {
        var letValueOrFunctionDeclaration = letDeclaration.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(localReferencesToCollect, letValueOrFunctionDeclaration.h);
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationUsesOfLocalReferences = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationUsesOfLocalReferences_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternVariable = function (a) {
    return { $: 1, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue = { u: true, p: _List_Nil, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone };
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType_fn = function (declarationTypes, replacement, patternTypedNode) {
    var _v0 = patternTypedNode.l;
    switch (_v0.$) {
        case 4:
            return $elm$core$Result$Ok({ k: patternTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true });
        case 5:
            return $elm$core$Result$Ok({ k: patternTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true });
        case 6:
            return $elm$core$Result$Ok({ k: patternTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true });
        case 7:
            return $elm$core$Result$Ok({ k: patternTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true });
        case 0:
            return $elm$core$Result$map_fn(function (typeSubstituted) {
                return {
                    k: typeSubstituted.i ? patternTypedNode : { aN: patternTypedNode.aN, n: typeSubstituted.n, l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternIgnored },
                    g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
                    i: typeSubstituted.i
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn({ dw: declarationTypes, aN: patternTypedNode.aN }, replacement, patternTypedNode.n));
        case 1:
            var name = _v0.a;
            return $elm$core$Result$map_fn(function (substituted) {
                return substituted.i ? { k: patternTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true } : {
                    k: {
                        aN: patternTypedNode.aN,
                        n: substituted.n,
                        l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternVariable(name)
                    },
                    g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
                    i: false
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn({ dw: declarationTypes, aN: patternTypedNode.aN }, replacement, patternTypedNode.n));
        case 2:
            var inParens = _v0.a;
            return $elm$core$Result$map_fn(function (inParensSubstituted) {
                return inParensSubstituted.i ? { k: patternTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true } : {
                    k: {
                        aN: patternTypedNode.aN,
                        n: inParensSubstituted.k.n,
                        l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternParenthesized(inParensSubstituted.k)
                    },
                    g: inParensSubstituted.g,
                    i: false
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, inParens));
        case 3:
            var patternAs = _v0.a;
            return $elm$core$Result$map_fn(function (aliasedPatternSubstituted) {
                return aliasedPatternSubstituted.i ? { k: patternTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true } : {
                    k: {
                        aN: patternTypedNode.aN,
                        n: aliasedPatternSubstituted.k.n,
                        l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternAs({
                            m: aliasedPatternSubstituted.k,
                            bm: { aN: patternAs.bm.aN, n: aliasedPatternSubstituted.k.n, l: patternAs.bm.l }
                        })
                    },
                    g: aliasedPatternSubstituted.g,
                    i: false
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, patternAs.m));
        case 11:
            var patternListCons = _v0.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (headSubstituted, tailSubstituted) {
                return (headSubstituted.i && tailSubstituted.i) ? $elm$core$Result$Ok({ k: patternTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true }) : $elm$core$Result$map_fn(function (fullSubstitutions) {
                    return {
                        k: {
                            aN: patternTypedNode.aN,
                            n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeListList(headSubstituted.k.n),
                            l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternListCons({ b0: headSubstituted.k, cY: tailSubstituted.k })
                        },
                        g: fullSubstitutions,
                        i: false
                    };
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn({ dw: declarationTypes, aN: patternTypedNode.aN }, headSubstituted.g, tailSubstituted.g));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, patternListCons.b0), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, patternListCons.cY));
        case 8:
            var patternTuple = _v0.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (part0Substituted, part1Substituted) {
                return (part0Substituted.i && part1Substituted.i) ? $elm$core$Result$Ok({ k: patternTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true }) : $elm$core$Result$map_fn(function (fullSubstitutions) {
                    return {
                        k: {
                            aN: patternTypedNode.aN,
                            n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({ s: part0Substituted.k.n, t: part1Substituted.k.n })),
                            l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternTuple({ s: part0Substituted.k, t: part1Substituted.k })
                        },
                        g: fullSubstitutions,
                        i: false
                    };
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn({ dw: declarationTypes, aN: patternTypedNode.aN }, part0Substituted.g, part1Substituted.g));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, patternTuple.s), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, patternTuple.t));
        case 9:
            var patternTriple = _v0.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3_fn_unwrapped(function (part0Substituted, part1Substituted, part2Substituted) {
                return (part0Substituted.i && (part1Substituted.i && part2Substituted.i)) ? $elm$core$Result$Ok({ k: patternTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true }) : $elm$core$Result$map_fn(function (fullSubstitutions) {
                    return {
                        k: {
                            aN: patternTypedNode.aN,
                            n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple({ s: part0Substituted.k.n, t: part1Substituted.k.n, ak: part2Substituted.k.n })),
                            l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternTriple({ s: part0Substituted.k, t: part1Substituted.k, ak: part2Substituted.k })
                        },
                        g: fullSubstitutions,
                        i: false
                    };
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3_fn({ dw: declarationTypes, aN: patternTypedNode.aN }, part0Substituted.g, part1Substituted.g, part2Substituted.g));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, patternTriple.s), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, patternTriple.t), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, patternTriple.ak));
        case 10:
            var patternRecordFields = _v0.a;
            var typeContext = { dw: declarationTypes, aN: patternTypedNode.aN };
            return $elm$core$Result$map2_fn_unwrapped(function (typeSubstituted, fieldsSubstituted) {
                return (typeSubstituted.i && fieldsSubstituted.u) ? { k: patternTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true } : {
                    k: {
                        aN: patternTypedNode.aN,
                        n: typeSubstituted.n,
                        l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternRecord(fieldsSubstituted.p)
                    },
                    g: fieldsSubstituted.g,
                    i: false
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(typeContext, replacement, patternTypedNode.n), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue, function (fieldNode, soFar) {
                return $elm$core$Result$map_fn(function (fieldTypeSubstituted) {
                    return fieldTypeSubstituted.i ? {
                        u: soFar.u,
                        p: _List_Cons(fieldNode, soFar.p),
                        g: soFar.g
                    } : {
                        u: false,
                        p: _List_Cons({ aN: fieldNode.aN, n: fieldTypeSubstituted.n, l: fieldNode.l }, soFar.p),
                        g: soFar.g
                    };
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(typeContext, replacement, fieldNode.n));
            }, patternRecordFields));
        case 12:
            var patternListElements = _v0.a;
            var typeContext = { dw: declarationTypes, aN: patternTypedNode.aN };
            return $elm$core$Result$map2_fn_unwrapped(function (typeSubstituted, elementsSubstituted) {
                return (typeSubstituted.i && elementsSubstituted.u) ? { k: patternTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true } : {
                    k: {
                        aN: patternTypedNode.aN,
                        n: typeSubstituted.n,
                        l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternListExact(elementsSubstituted.p)
                    },
                    g: elementsSubstituted.g,
                    i: false
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(typeContext, replacement, patternTypedNode.n), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue, function (elementNode, soFar) {
                return $elm$core$Result$andThen_fn(function (fieldSubstituted) {
                    return fieldSubstituted.i ? $elm$core$Result$Ok({
                        u: soFar.u,
                        p: _List_Cons(elementNode, soFar.p),
                        g: soFar.g
                    }) : $elm$core$Result$map_fn(function (substitutionsWithElement) {
                        return {
                            u: false,
                            p: _List_Cons(fieldSubstituted.k, soFar.p),
                            g: substitutionsWithElement
                        };
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(typeContext, soFar.g, fieldSubstituted.g));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, elementNode));
            }, patternListElements));
        default:
            var patternVariant = _v0.a;
            var typeContext = { dw: declarationTypes, aN: patternTypedNode.aN };
            return $elm$core$Result$map2_fn_unwrapped(function (typeSubstituted, valuesSubstituted) {
                return (typeSubstituted.i && valuesSubstituted.u) ? { k: patternTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true } : {
                    k: {
                        aN: patternTypedNode.aN,
                        n: typeSubstituted.n,
                        l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternVariant({ c0: patternVariant.c0, b: patternVariant.b, a: patternVariant.a, K: patternVariant.K, X: valuesSubstituted.p })
                    },
                    g: valuesSubstituted.g,
                    i: false
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(typeContext, replacement, patternTypedNode.n), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue, function (argumentNode, soFar) {
                return $elm$core$Result$andThen_fn(function (valueSubstituted) {
                    return valueSubstituted.i ? $elm$core$Result$Ok({
                        u: soFar.u,
                        p: _List_Cons(argumentNode, soFar.p),
                        g: soFar.g
                    }) : $elm$core$Result$map_fn(function (substitutionsWithElement) {
                        return {
                            u: false,
                            p: _List_Cons(valueSubstituted.k, soFar.p),
                            g: substitutionsWithElement
                        };
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(typeContext, valueSubstituted.g, soFar.g));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, argumentNode));
            }, patternVariant.X));
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen4_fn = function (abToResult, aResult, bResult, cResult, dResult) {
    if (aResult.$ === 1) {
        var error = aResult.a;
        return $elm$core$Result$Err(error);
    }
    else {
        var a = aResult.a;
        if (bResult.$ === 1) {
            var error = bResult.a;
            return $elm$core$Result$Err(error);
        }
        else {
            var b = bResult.a;
            if (cResult.$ === 1) {
                var error = cResult.a;
                return $elm$core$Result$Err(error);
            }
            else {
                var c = cResult.a;
                if (dResult.$ === 1) {
                    var error = dResult.a;
                    return $elm$core$Result$Err(error);
                }
                else {
                    var d = dResult.a;
                    return A4(abToResult, a, b, c, d);
                }
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen4_fn_unwrapped = function (abToResult, aResult, bResult, cResult, dResult) {
    if (aResult.$ === 1) {
        var error = aResult.a;
        return $elm$core$Result$Err(error);
    }
    else {
        var a = aResult.a;
        if (bResult.$ === 1) {
            var error = bResult.a;
            return $elm$core$Result$Err(error);
        }
        else {
            var b = bResult.a;
            if (cResult.$ === 1) {
                var error = cResult.a;
                return $elm$core$Result$Err(error);
            }
            else {
                var c = cResult.a;
                if (dResult.$ === 1) {
                    var error = dResult.a;
                    return $elm$core$Result$Err(error);
                }
                else {
                    var d = dResult.a;
                    return abToResult(a, b, c, d);
                }
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen4 = F5($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen4_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ropeFoldlWhileOkFrom_fn = function (initialState, reduceToResult, rope) {
    ropeFoldlWhileOkFrom: while (true) {
        if (!rope.$) {
            var key = rope.a;
            var value = rope.b;
            return A3(reduceToResult, key, value, initialState);
        }
        else {
            var left = rope.a;
            var right = rope.b;
            var _v1 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ropeFoldlWhileOkFrom_fn(initialState, reduceToResult, left);
            if (_v1.$ === 1) {
                var error = _v1.a;
                return $elm$core$Result$Err(error);
            }
            else {
                var leftState = _v1.a;
                var $temp$initialState = leftState, $temp$reduceToResult = reduceToResult, $temp$rope = right;
                initialState = $temp$initialState;
                reduceToResult = $temp$reduceToResult;
                rope = $temp$rope;
                continue ropeFoldlWhileOkFrom;
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ropeFoldlWhileOkFrom_fn_unwrapped = function (initialState, reduceToResult, rope) {
    ropeFoldlWhileOkFrom: while (true) {
        if (!rope.$) {
            var key = rope.a;
            var value = rope.b;
            return reduceToResult(key, value, initialState);
        }
        else {
            var left = rope.a;
            var right = rope.b;
            var _v1 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ropeFoldlWhileOkFrom_fn_unwrapped(initialState, reduceToResult, left);
            if (_v1.$ === 1) {
                var error = _v1.a;
                return $elm$core$Result$Err(error);
            }
            else {
                var leftState = _v1.a;
                var $temp$initialState = leftState, $temp$reduceToResult = reduceToResult, $temp$rope = right;
                initialState = $temp$initialState;
                reduceToResult = $temp$reduceToResult;
                rope = $temp$rope;
                continue ropeFoldlWhileOkFrom;
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ropeFoldlWhileOkFrom = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ropeFoldlWhileOkFrom_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyUpdatedValueOrFunctionTypesDictEmptyAllUnchangedTrue = { u: true, p: _List_Nil, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, bW: $miniBill$elm_fast_dict$FastDict$empty };
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$maybeTypeVariableConstraintToString = function (maybeConstraint) {
    if (maybeConstraint.$ === 1) {
        return "";
    }
    else {
        var constraint = maybeConstraint.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraintToString(constraint);
    }
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableFromContextSetToListHighestToLowestAndMap_fn = function (setElementToListElement, typeVariableFromContextSet) {
    return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$foldl_fn(F3(function (setElement, _v0, soFar) {
        return _List_Cons(setElementToListElement(setElement), soFar);
    }), _List_Nil, typeVariableFromContextSet);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableFromContextSetToListHighestToLowestAndMap = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableFromContextSetToListHighestToLowestAndMap_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typesAreEquallyStrict_fn = function (aType, bType) {
    return (!($lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$size(aType) - $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$size(bType))) && _Utils_eq($elm$core$List$sort($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableFromContextSetToListHighestToLowestAndMap_fn(function (aVariable) {
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$maybeTypeVariableConstraintToString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(aVariable.a));
    }, aType)), $elm$core$List$sort($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableFromContextSetToListHighestToLowestAndMap_fn(function (bVariable) {
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$maybeTypeVariableConstraintToString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableConstraint(bVariable.a));
    }, bType)));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typesAreEquallyStrict = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typesAreEquallyStrict_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge4_fn = function (context, a, b, c, d) {
    return $elm$core$Result$andThen_fn(function (abcSubstitutions) {
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, abcSubstitutions, d);
    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3_fn(context, a, b, c));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge4 = F5($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge4_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn = function (declarationTypes, replacement, expressionTypedNode) {
    var _v1 = expressionTypedNode.l;
    switch (_v1.$) {
        case 0:
            return $elm$core$Result$Ok({ k: expressionTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true });
        case 2:
            return $elm$core$Result$Ok({ k: expressionTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true });
        case 4:
            return $elm$core$Result$Ok({ k: expressionTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true });
        case 3:
            return $elm$core$Result$Ok({ k: expressionTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true });
        case 1:
            return $elm$core$Result$map_fn(function (typeSubstituted) {
                return typeSubstituted.i ? { k: expressionTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true } : {
                    k: { aN: expressionTypedNode.aN, n: typeSubstituted.n, l: expressionTypedNode.l },
                    g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
                    i: false
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn({ dw: declarationTypes, aN: expressionTypedNode.aN }, replacement, expressionTypedNode.n));
        case 7:
            return $elm$core$Result$map_fn(function (typeSubstituted) {
                return typeSubstituted.i ? { k: expressionTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true } : {
                    k: { aN: expressionTypedNode.aN, n: typeSubstituted.n, l: expressionTypedNode.l },
                    g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
                    i: false
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn({ dw: declarationTypes, aN: expressionTypedNode.aN }, replacement, expressionTypedNode.n));
        case 6:
            return $elm$core$Result$map_fn(function (typeSubstituted) {
                return typeSubstituted.i ? { k: expressionTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true } : {
                    k: { aN: expressionTypedNode.aN, n: typeSubstituted.n, l: expressionTypedNode.l },
                    g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
                    i: false
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn({ dw: declarationTypes, aN: expressionTypedNode.aN }, replacement, expressionTypedNode.n));
        case 5:
            return $elm$core$Result$map_fn(function (typeSubstituted) {
                return typeSubstituted.i ? { k: expressionTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true } : {
                    k: { aN: expressionTypedNode.aN, n: typeSubstituted.n, l: expressionTypedNode.l },
                    g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
                    i: false
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn({ dw: declarationTypes, aN: expressionTypedNode.aN }, replacement, expressionTypedNode.n));
        case 8:
            return $elm$core$Result$map_fn(function (typeSubstituted) {
                return typeSubstituted.i ? { k: expressionTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true } : {
                    k: { aN: expressionTypedNode.aN, n: typeSubstituted.n, l: expressionTypedNode.l },
                    g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
                    i: false
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn({ dw: declarationTypes, aN: expressionTypedNode.aN }, replacement, expressionTypedNode.n));
        case 9:
            return $elm$core$Result$map_fn(function (typeSubstituted) {
                return typeSubstituted.i ? { k: expressionTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true } : {
                    k: { aN: expressionTypedNode.aN, n: typeSubstituted.n, l: expressionTypedNode.l },
                    g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone,
                    i: false
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn({ dw: declarationTypes, aN: expressionTypedNode.aN }, replacement, expressionTypedNode.n));
        case 10:
            var negated = _v1.a;
            return $elm$core$Result$map_fn(function (negatedSubstituted) {
                return negatedSubstituted.i ? { k: expressionTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true } : {
                    k: {
                        aN: expressionTypedNode.aN,
                        n: negatedSubstituted.k.n,
                        l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionNegation(negatedSubstituted.k)
                    },
                    g: negatedSubstituted.g,
                    i: false
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, negated));
        case 11:
            var inParens = _v1.a;
            return $elm$core$Result$map_fn(function (inParensSubstituted) {
                return inParensSubstituted.i ? { k: expressionTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true } : {
                    k: {
                        aN: expressionTypedNode.aN,
                        n: inParensSubstituted.k.n,
                        l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionParenthesized(inParensSubstituted.k)
                    },
                    g: inParensSubstituted.g,
                    i: false
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, inParens));
        case 14:
            var recordAccess = _v1.a;
            var typeContext = { dw: declarationTypes, aN: expressionTypedNode.aN };
            return $elm$core$Result$map2_fn_unwrapped(function (typeSubstituted, recordSubstituted) {
                return (typeSubstituted.i && recordSubstituted.i) ? { k: expressionTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true } : {
                    k: {
                        aN: expressionTypedNode.aN,
                        n: typeSubstituted.n,
                        l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecordAccess({ cs: recordAccess.cs, cO: recordAccess.cO, aY: recordSubstituted.k })
                    },
                    g: recordSubstituted.g,
                    i: false
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(typeContext, replacement, expressionTypedNode.n), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, recordAccess.aY));
        case 15:
            var expressionInfixOperation = _v1.a;
            var typeContext = { dw: declarationTypes, aN: expressionTypedNode.aN };
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3_fn_unwrapped(function (typeSubstituted, leftSubstituted, rightSubstituted) {
                return (typeSubstituted.i && (leftSubstituted.i && rightSubstituted.i)) ? $elm$core$Result$Ok({ k: expressionTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true }) : $elm$core$Result$map_fn(function (fullSubstitutions) {
                    return {
                        k: {
                            aN: expressionTypedNode.aN,
                            n: typeSubstituted.n,
                            l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionInfixOperation({
                                cw: leftSubstituted.k,
                                er: {
                                    b: expressionInfixOperation.er.b,
                                    cX: expressionInfixOperation.er.cX,
                                    n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                        e: leftSubstituted.k.n,
                                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: rightSubstituted.k.n, d: typeSubstituted.n }))
                                    }))
                                },
                                cV: rightSubstituted.k
                            })
                        },
                        g: fullSubstitutions,
                        i: false
                    };
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(typeContext, leftSubstituted.g, rightSubstituted.g));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(typeContext, replacement, expressionTypedNode.n), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, expressionInfixOperation.cw), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, expressionInfixOperation.cV));
        case 12:
            var expressionTuple = _v1.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (part0Substituted, part1Substituted) {
                return (part0Substituted.i && part1Substituted.i) ? $elm$core$Result$Ok({ k: expressionTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true }) : $elm$core$Result$map_fn(function (fullSubstitutions) {
                    return {
                        k: {
                            aN: expressionTypedNode.aN,
                            n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({ s: part0Substituted.k.n, t: part1Substituted.k.n })),
                            l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionTuple({ s: part0Substituted.k, t: part1Substituted.k })
                        },
                        g: fullSubstitutions,
                        i: false
                    };
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn({ dw: declarationTypes, aN: expressionTypedNode.aN }, part0Substituted.g, part1Substituted.g));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, expressionTuple.s), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, expressionTuple.t));
        case 13:
            var expressionTriple = _v1.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3_fn_unwrapped(function (part0Substituted, part1Substituted, part2Substituted) {
                return (part0Substituted.i && (part1Substituted.i && part2Substituted.i)) ? $elm$core$Result$Ok({ k: expressionTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true }) : $elm$core$Result$map_fn(function (fullSubstitutions) {
                    return {
                        k: {
                            aN: expressionTypedNode.aN,
                            n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple({ s: part0Substituted.k.n, t: part1Substituted.k.n, ak: part2Substituted.k.n })),
                            l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionTriple({ s: part0Substituted.k, t: part1Substituted.k, ak: part2Substituted.k })
                        },
                        g: fullSubstitutions,
                        i: false
                    };
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3_fn({ dw: declarationTypes, aN: expressionTypedNode.aN }, part0Substituted.g, part1Substituted.g, part2Substituted.g));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, expressionTriple.s), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, expressionTriple.t), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, expressionTriple.ak));
        case 16:
            var expressionIfThenElse = _v1.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3_fn_unwrapped(function (conditionSubstituted, onTrueSubstituted, onFalseSubstituted) {
                return (conditionSubstituted.i && (onTrueSubstituted.i && onFalseSubstituted.i)) ? $elm$core$Result$Ok({ k: expressionTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true }) : $elm$core$Result$map_fn(function (fullSubstitutions) {
                    return {
                        k: {
                            aN: expressionTypedNode.aN,
                            n: onTrueSubstituted.k.n,
                            l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionIfThenElse({ aA: conditionSubstituted.k, aB: onFalseSubstituted.k, aC: onTrueSubstituted.k })
                        },
                        g: fullSubstitutions,
                        i: false
                    };
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3_fn({ dw: declarationTypes, aN: expressionTypedNode.aN }, conditionSubstituted.g, onTrueSubstituted.g, onFalseSubstituted.g));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, expressionIfThenElse.aA), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, expressionIfThenElse.aC), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, expressionIfThenElse.aB));
        case 17:
            var expressionListElements = _v1.a;
            var typeContext = { dw: declarationTypes, aN: expressionTypedNode.aN };
            return $elm$core$Result$map2_fn_unwrapped(function (typeSubstituted, elementsSubstituted) {
                return (typeSubstituted.i && elementsSubstituted.u) ? { k: expressionTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true } : {
                    k: {
                        aN: expressionTypedNode.aN,
                        n: typeSubstituted.n,
                        l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionList(elementsSubstituted.p)
                    },
                    g: elementsSubstituted.g,
                    i: false
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(typeContext, replacement, expressionTypedNode.n), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue, function (elementNode, soFar) {
                return $elm$core$Result$andThen_fn(function (elementSubstituted) {
                    return elementSubstituted.i ? $elm$core$Result$Ok({
                        u: soFar.u,
                        p: _List_Cons(elementNode, soFar.p),
                        g: soFar.g
                    }) : $elm$core$Result$map_fn(function (substitutionsSoFarWithElement) {
                        return {
                            u: false,
                            p: _List_Cons(elementSubstituted.k, soFar.p),
                            g: substitutionsSoFarWithElement
                        };
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(typeContext, soFar.g, elementSubstituted.g));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, elementNode));
            }, expressionListElements));
        case 18:
            var expressionCall = _v1.a;
            var typeContext = { dw: declarationTypes, aN: expressionTypedNode.aN };
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen4_fn_unwrapped(function (typeSubstituted, calledSubstituted, argument0Substituted, argument1UpSubstituted) {
                return (typeSubstituted.i && (calledSubstituted.i && (argument0Substituted.i && argument1UpSubstituted.u))) ? $elm$core$Result$Ok({ k: expressionTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true }) : $elm$core$Result$map_fn(function (fullSubstitutions) {
                    return {
                        k: {
                            aN: expressionTypedNode.aN,
                            n: typeSubstituted.n,
                            l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionCall({ dR: argument0Substituted.k, dS: argument1UpSubstituted.p, w: calledSubstituted.k })
                        },
                        g: fullSubstitutions,
                        i: false
                    };
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3_fn(typeContext, calledSubstituted.g, argument0Substituted.g, argument1UpSubstituted.g));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(typeContext, replacement, expressionTypedNode.n), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, expressionCall.w), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, expressionCall.dR), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue, function (argumentNode, soFar) {
                return $elm$core$Result$andThen_fn(function (argumentSubstituted) {
                    return argumentSubstituted.i ? $elm$core$Result$Ok({
                        u: soFar.u,
                        p: _List_Cons(argumentNode, soFar.p),
                        g: soFar.g
                    }) : $elm$core$Result$map_fn(function (fullSubstitutions) {
                        return {
                            u: false,
                            p: _List_Cons(argumentSubstituted.k, soFar.p),
                            g: fullSubstitutions
                        };
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(typeContext, soFar.g, argumentSubstituted.g));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, argumentNode));
            }, expressionCall.dS));
        case 19:
            var expressionRecordFields = _v1.a;
            var typeContext = { dw: declarationTypes, aN: expressionTypedNode.aN };
            return $elm$core$Result$map_fn(function (fieldsSubstituted) {
                return fieldsSubstituted.u ? { k: expressionTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true } : {
                    k: {
                        aN: expressionTypedNode.aN,
                        n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord($elm$core$List$foldl_fn_unwrapped(function (fieldSubstituted, soFar) {
                            return $miniBill$elm_fast_dict$FastDict$insert_fn(fieldSubstituted.a, fieldSubstituted.l.n, soFar);
                        }, $miniBill$elm_fast_dict$FastDict$empty, fieldsSubstituted.p))),
                        l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecord(fieldsSubstituted.p)
                    },
                    g: fieldsSubstituted.g,
                    i: false
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue, function (fieldNode, soFar) {
                return $elm$core$Result$andThen_fn(function (fieldValueSubstituted) {
                    return fieldValueSubstituted.i ? $elm$core$Result$Ok({
                        u: soFar.u,
                        p: _List_Cons(fieldNode, soFar.p),
                        g: soFar.g
                    }) : $elm$core$Result$map_fn(function (fullSubstitutions) {
                        return {
                            u: false,
                            p: _List_Cons({ a: fieldNode.a, fJ: fieldNode.fJ, aN: fieldNode.aN, l: fieldValueSubstituted.k }, soFar.p),
                            g: fullSubstitutions
                        };
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(typeContext, soFar.g, fieldValueSubstituted.g));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, fieldNode.l));
            }, expressionRecordFields));
        case 20:
            var expressionRecordUpdate = _v1.a;
            var typeContext = { dw: declarationTypes, aN: expressionTypedNode.aN };
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3_fn_unwrapped(function (typeSubstituted, field0Substituted, field1UpSubstituted) {
                return (typeSubstituted.i && (field0Substituted.i && field1UpSubstituted.u)) ? $elm$core$Result$Ok({ k: expressionTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true }) : $elm$core$Result$map_fn(function (fullSubstitutions) {
                    return {
                        k: {
                            aN: expressionTypedNode.aN,
                            n: typeSubstituted.n,
                            l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecordUpdate({
                                d4: field0Substituted.k,
                                d5: field1UpSubstituted.p,
                                V: { aN: expressionRecordUpdate.V.aN, n: typeSubstituted.n, l: expressionRecordUpdate.V.l }
                            })
                        },
                        g: fullSubstitutions,
                        i: false
                    };
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(typeContext, field0Substituted.g, field1UpSubstituted.g));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(typeContext, replacement, expressionTypedNode.n), $elm$core$Result$map_fn(function (fieldValueSubstituted) {
                return fieldValueSubstituted.i ? { k: expressionRecordUpdate.d4, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true } : {
                    k: { a: expressionRecordUpdate.d4.a, fJ: expressionRecordUpdate.d4.fJ, aN: expressionRecordUpdate.d4.aN, l: fieldValueSubstituted.k },
                    g: fieldValueSubstituted.g,
                    i: false
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, expressionRecordUpdate.d4.l)), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue, function (fieldNode, soFar) {
                return $elm$core$Result$andThen_fn(function (fieldValueSubstituted) {
                    return fieldValueSubstituted.i ? $elm$core$Result$Ok({
                        u: soFar.u,
                        p: _List_Cons(fieldNode, soFar.p),
                        g: soFar.g
                    }) : $elm$core$Result$map_fn(function (fullSubstitutions) {
                        return {
                            u: false,
                            p: _List_Cons({ a: fieldNode.a, fJ: fieldNode.fJ, aN: fieldNode.aN, l: fieldValueSubstituted.k }, soFar.p),
                            g: fullSubstitutions
                        };
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(typeContext, soFar.g, fieldValueSubstituted.g));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, fieldNode.l));
            }, expressionRecordUpdate.d5));
        case 21:
            var expressionLambda = _v1.a;
            var typeContext = { dw: declarationTypes, aN: expressionTypedNode.aN };
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3_fn_unwrapped(function (parameter0Substituted, parameter1UpSubstituted, resultSubstituted) {
                return (parameter0Substituted.i && (parameter1UpSubstituted.u && resultSubstituted.i)) ? $elm$core$Result$Ok({ k: expressionTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true }) : $elm$core$Result$map_fn(function (fullSubstitutions) {
                    return {
                        k: {
                            aN: expressionTypedNode.aN,
                            n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: parameter0Substituted.k.n,
                                d: $elm$core$List$foldr_fn(F2(function (argumentTypedNode, output) {
                                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: argumentTypedNode.n, d: output }));
                                }), resultSubstituted.k.n, parameter1UpSubstituted.p)
                            })),
                            l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionLambda({ dm: parameter0Substituted.k, dC: parameter1UpSubstituted.p, h: resultSubstituted.k })
                        },
                        g: fullSubstitutions,
                        i: false
                    };
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3_fn(typeContext, parameter0Substituted.g, parameter1UpSubstituted.g, resultSubstituted.g));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, expressionLambda.dm), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue, function (parameterNode, soFar) {
                return $elm$core$Result$andThen_fn(function (parameterSubstituted) {
                    return parameterSubstituted.i ? $elm$core$Result$Ok({
                        u: soFar.u,
                        p: _List_Cons(parameterNode, soFar.p),
                        g: soFar.g
                    }) : $elm$core$Result$map_fn(function (substitutionsSoFarWithParameter) {
                        return {
                            u: false,
                            p: _List_Cons(parameterSubstituted.k, soFar.p),
                            g: substitutionsSoFarWithParameter
                        };
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(typeContext, parameterSubstituted.g, soFar.g));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, parameterNode));
            }, expressionLambda.dC), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, expressionLambda.h));
        case 22:
            var expressionCaseOf = _v1.a;
            var typeContext = { dw: declarationTypes, aN: expressionTypedNode.aN };
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3_fn_unwrapped(function (matchedSubstituted, case0Substituted, case1UpSubstituted) {
                return (matchedSubstituted.i && (case0Substituted.i && case1UpSubstituted.u)) ? $elm$core$Result$Ok({ k: expressionTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true }) : $elm$core$Result$map_fn(function (fullSubstitutions) {
                    return {
                        k: {
                            aN: expressionTypedNode.aN,
                            n: case0Substituted.k.h.n,
                            l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionCaseOf({ ar: case0Substituted.k, as: case1UpSubstituted.p, at: matchedSubstituted.k })
                        },
                        g: fullSubstitutions,
                        i: false
                    };
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3_fn(typeContext, matchedSubstituted.g, case0Substituted.g, case1UpSubstituted.g));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, expressionCaseOf.at), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (patternSubstituted, resultSubstituted) {
                return (patternSubstituted.i && resultSubstituted.i) ? $elm$core$Result$Ok({ k: expressionCaseOf.ar, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true }) : $elm$core$Result$map_fn(function (fullSubstitutions) {
                    return {
                        k: { m: patternSubstituted.k, h: resultSubstituted.k },
                        g: fullSubstitutions,
                        i: false
                    };
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn({
                    dw: declarationTypes,
                    aN: { b_: expressionCaseOf.ar.h.aN.b_, cf: expressionCaseOf.ar.m.aN.cf }
                }, patternSubstituted.g, resultSubstituted.g));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, expressionCaseOf.ar.m), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, expressionCaseOf.ar.h)), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue, function (case_, soFar) {
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (patternSubstituted, resultSubstituted) {
                    return (resultSubstituted.i && patternSubstituted.i) ? $elm$core$Result$Ok({
                        u: soFar.u,
                        p: _List_Cons(case_, soFar.p),
                        g: soFar.g
                    }) : $elm$core$Result$map_fn(function (fullSubstitutions) {
                        return {
                            u: false,
                            p: _List_Cons({ m: patternSubstituted.k, h: resultSubstituted.k }, soFar.p),
                            g: fullSubstitutions
                        };
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3_fn(typeContext, patternSubstituted.g, resultSubstituted.g, soFar.g));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, case_.m), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, case_.h));
            }, expressionCaseOf.as));
        default:
            var expressionLetIn = _v1.a;
            var typeContext = { dw: declarationTypes, aN: expressionTypedNode.aN };
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3_fn_unwrapped(function (declaration0Substituted, declaration1UpSubstituted, resultSubstituted) {
                if (declaration0Substituted.i && (declaration1UpSubstituted.u && resultSubstituted.i)) {
                    return $elm$core$Result$Ok({ k: expressionTypedNode, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true });
                }
                else {
                    var updatedValueOrFunctionTypes = function () {
                        var _v3 = declaration0Substituted.ck;
                        if (_v3.$ === 1) {
                            return declaration1UpSubstituted.bW;
                        }
                        else {
                            var declaration0UpdatedValueOrFunctionType = _v3.a;
                            return $miniBill$elm_fast_dict$FastDict$insert_fn(declaration0UpdatedValueOrFunctionType.a, { aN: declaration0UpdatedValueOrFunctionType.aN, n: declaration0UpdatedValueOrFunctionType.n }, declaration1UpSubstituted.bW);
                        }
                    }();
                    var resultLetInNode = {
                        aN: expressionTypedNode.aN,
                        n: resultSubstituted.k.n,
                        l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionLetIn({ c4: declaration0Substituted.k, c5: declaration1UpSubstituted.p, h: resultSubstituted.k })
                    };
                    var variableSubstitutionsForUnifyingWithUpdatedValueOrFunctionTypesOrError = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictFoldlWhileOkFrom_fn_unwrapped($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, function (inferredLetDeclarationName, uses, soFar) {
                        var _v2 = $miniBill$elm_fast_dict$FastDict$get_fn(inferredLetDeclarationName, updatedValueOrFunctionTypes);
                        if (_v2.$ === 1) {
                            return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(expressionTypedNode.aN) + (") " + "bug in elm-syntax-type-infer: collected uses of variable that wasn't asked for")));
                        }
                        else {
                            var inferredDeclarationType = _v2.a;
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ropeFoldlWhileOkFrom_fn_unwrapped(soFar, function (useRange, useType, soFarWithUses) {
                                var letDeclarationTypeNewInstanceForUse = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(function (inferredDeclarationTypeVariable) {
                                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeIncludesRange_fn(useRange, inferredDeclarationType.aN) ? { a: inferredDeclarationTypeVariable.a, f: useRange } : inferredDeclarationTypeVariable;
                                }, inferredDeclarationType.n);
                                return $elm$core$Result$andThen_fn(function (useUnifiedWithNewLetTypeInstance) {
                                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typesAreEquallyStrict_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(useUnifiedWithNewLetTypeInstance.n), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(useType)) ? $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariableSetMergeIntoVariableSubstitutionsWithVariableToType_fn(soFarWithUses.E, soFarWithUses.D, useUnifiedWithNewLetTypeInstance.g.D) : $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(typeContext, soFarWithUses, useUnifiedWithNewLetTypeInstance.g);
                                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(typeContext, useType, letDeclarationTypeNewInstanceForUse));
                            }, uses);
                        }
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(updatedValueOrFunctionTypes, resultLetInNode));
                    return $elm$core$Result$map_fn(function (fullSubstitutions) {
                        return { k: resultLetInNode, g: fullSubstitutions, i: false };
                    }, $elm$core$Result$andThen_fn(function (variableSubstitutionsForUnifyingWithUpdatedValueOrFunctionTypes) {
                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge4_fn(typeContext, declaration0Substituted.g, declaration1UpSubstituted.g, resultSubstituted.g, variableSubstitutionsForUnifyingWithUpdatedValueOrFunctionTypes);
                    }, variableSubstitutionsForUnifyingWithUpdatedValueOrFunctionTypesOrError));
                }
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationSubstituteVariableByType_fn(declarationTypes, replacement, expressionLetIn.c4), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyUpdatedValueOrFunctionTypesDictEmptyAllUnchangedTrue, function (letDeclarationNode, soFar) {
                return $elm$core$Result$andThen_fn(function (declarationSubstituted) {
                    return declarationSubstituted.i ? $elm$core$Result$Ok({
                        u: soFar.u,
                        p: _List_Cons(letDeclarationNode, soFar.p),
                        g: soFar.g,
                        bW: soFar.bW
                    }) : $elm$core$Result$map_fn(function (fullSubstitutions) {
                        return {
                            u: false,
                            p: _List_Cons(declarationSubstituted.k, soFar.p),
                            g: fullSubstitutions,
                            bW: function () {
                                var _v4 = declarationSubstituted.ck;
                                if (_v4.$ === 1) {
                                    return soFar.bW;
                                }
                                else {
                                    var updatedValueOrFunctionType = _v4.a;
                                    return $miniBill$elm_fast_dict$FastDict$insert_fn(updatedValueOrFunctionType.a, { aN: updatedValueOrFunctionType.aN, n: updatedValueOrFunctionType.n }, soFar.bW);
                                }
                            }()
                        };
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(typeContext, soFar.g, declarationSubstituted.g));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationSubstituteVariableByType_fn(declarationTypes, replacement, letDeclarationNode));
            }, expressionLetIn.c5), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, expressionLetIn.h));
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationSubstituteVariableByType_fn = function (declarationTypes, replacement, letDeclarationAndRange) {
    var _v0 = letDeclarationAndRange.L;
    if (!_v0.$) {
        var letDestructuring = _v0.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (patternSubstituted, expressionSubstituted) {
            return (patternSubstituted.i && expressionSubstituted.i) ? $elm$core$Result$Ok({ k: letDeclarationAndRange, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true, ck: $elm$core$Maybe$Nothing }) : $elm$core$Result$map_fn(function (fullSubstitutions) {
                return {
                    k: {
                        L: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetDestructuring({ O: expressionSubstituted.k, m: patternSubstituted.k }),
                        aN: letDeclarationAndRange.aN
                    },
                    g: fullSubstitutions,
                    i: false,
                    ck: $elm$core$Maybe$Nothing
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn({ dw: declarationTypes, aN: letDeclarationAndRange.aN }, patternSubstituted.g, expressionSubstituted.g));
        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, letDestructuring.m), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, letDestructuring.O));
    }
    else {
        var letValueOrFunction = _v0.a;
        var typeContext = { dw: declarationTypes, aN: letDeclarationAndRange.aN };
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3_fn_unwrapped(function (parametersSubstituted, resultSubstituted, typeSubstituted) {
            return typeSubstituted.i ? ((resultSubstituted.i && parametersSubstituted.u) ? $elm$core$Result$Ok({ k: letDeclarationAndRange, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, i: true, ck: $elm$core$Maybe$Nothing }) : $elm$core$Result$map_fn(function (fullSubstitutions) {
                return {
                    k: {
                        L: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetValueOrFunctionDeclaration({ a: letValueOrFunction.a, fJ: letValueOrFunction.fJ, o: parametersSubstituted.p, h: resultSubstituted.k, cW: letValueOrFunction.cW, n: letValueOrFunction.n }),
                        aN: letDeclarationAndRange.aN
                    },
                    g: fullSubstitutions,
                    i: false,
                    ck: $elm$core$Maybe$Nothing
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(typeContext, parametersSubstituted.g, resultSubstituted.g))) : $elm$core$Result$map_fn(function (fullSubstitutions) {
                return {
                    k: {
                        L: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetValueOrFunctionDeclaration({ a: letValueOrFunction.a, fJ: letValueOrFunction.fJ, o: parametersSubstituted.p, h: resultSubstituted.k, cW: letValueOrFunction.cW, n: typeSubstituted.n }),
                        aN: letDeclarationAndRange.aN
                    },
                    g: fullSubstitutions,
                    i: false,
                    ck: $elm$core$Maybe$Just({ a: letValueOrFunction.a, aN: letDeclarationAndRange.aN, n: typeSubstituted.n })
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(typeContext, parametersSubstituted.g, resultSubstituted.g));
        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue, function (parameterNode, soFar) {
            return $elm$core$Result$andThen_fn(function (parameterSubstituted) {
                return parameterSubstituted.i ? $elm$core$Result$Ok({
                    u: soFar.u,
                    p: _List_Cons(parameterNode, soFar.p),
                    g: soFar.g
                }) : $elm$core$Result$map_fn(function (fullSubstitutions) {
                    return {
                        u: false,
                        p: _List_Cons(parameterSubstituted.k, soFar.p),
                        g: fullSubstitutions
                    };
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(typeContext, soFar.g, parameterSubstituted.g));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, parameterNode));
        }, letValueOrFunction.o), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, letValueOrFunction.h), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(typeContext, replacement, letValueOrFunction.n));
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationSubstituteVariableByType = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationSubstituteVariableByType_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsIsNone = function (substitutions) {
    var _v0 = substitutions.D;
    if (_v0.b) {
        return false;
    }
    else {
        return $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$isEmpty(substitutions.E);
    }
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$annotatedValueOrFunctionDeclarationApplyVariableSubstitutions_fn = function (context, substitutionsToApply, valueOrFunctionDeclarationInfoOriginal) {
    annotatedValueOrFunctionDeclarationApplyVariableSubstitutions: while (true) {
        if ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsIsNone(substitutionsToApply)) {
            return $elm$core$Result$Ok(valueOrFunctionDeclarationInfoOriginal);
        }
        else {
            var _v0 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$createBatchOfSubstitutionsToApply_fn(context, substitutionsToApply);
            if (_v0.$ === 1) {
                var error = _v0.a;
                return $elm$core$Result$Err(error);
            }
            else {
                var batchOfSubstitutionsToApply = _v0.a;
                var _v1 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(context, batchOfSubstitutionsToApply.a6, valueOrFunctionDeclarationInfoOriginal.n);
                if (_v1.$ === 1) {
                    var error = _v1.a;
                    return $elm$core$Result$Err(error);
                }
                else {
                    var typeSubstituted = _v1.a;
                    var _v2 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(context.dw, batchOfSubstitutionsToApply.a6, valueOrFunctionDeclarationInfoOriginal.h);
                    if (_v2.$ === 1) {
                        var error = _v2.a;
                        return $elm$core$Result$Err(error);
                    }
                    else {
                        var resultSubstituted = _v2.a;
                        var _v3 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue, function (parameterInferred, parametersSubstitutedSoFar) {
                            return $elm$core$Result$andThen_fn(function (parameterSubstituted) {
                                return parameterSubstituted.i ? $elm$core$Result$Ok({
                                    u: parametersSubstitutedSoFar.u,
                                    p: _List_Cons(parameterInferred, parametersSubstitutedSoFar.p),
                                    g: parametersSubstitutedSoFar.g
                                }) : $elm$core$Result$map_fn(function (substitutionsSoFarWithParameter) {
                                    return {
                                        u: false,
                                        p: _List_Cons(parameterSubstituted.k, parametersSubstitutedSoFar.p),
                                        g: substitutionsSoFarWithParameter
                                    };
                                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, parametersSubstitutedSoFar.g, parameterSubstituted.g));
                            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType_fn(context.dw, batchOfSubstitutionsToApply.a6, parameterInferred));
                        }, valueOrFunctionDeclarationInfoOriginal.o);
                        if (_v3.$ === 1) {
                            var error = _v3.a;
                            return $elm$core$Result$Err(error);
                        }
                        else {
                            var parametersSubstituted = _v3.a;
                            if (resultSubstituted.i && (typeSubstituted.i && parametersSubstituted.u)) {
                                return $elm$core$Result$Ok(valueOrFunctionDeclarationInfoOriginal);
                            }
                            else {
                                var _v4 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, resultSubstituted.g, parametersSubstituted.g);
                                if (_v4.$ === 1) {
                                    var error = _v4.a;
                                    return $elm$core$Result$Err(error);
                                }
                                else {
                                    var newResultParametersSubstitutions = _v4.a;
                                    var _v5 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariableSetMergeIntoVariableSubstitutionsWithVariableToType_fn(newResultParametersSubstitutions.E, newResultParametersSubstitutions.D, batchOfSubstitutionsToApply.b7);
                                    if (_v5.$ === 1) {
                                        var error = _v5.a;
                                        return $elm$core$Result$Err(error);
                                    }
                                    else {
                                        var newSubstitutions = _v5.a;
                                        var $temp$context = context, $temp$substitutionsToApply = newSubstitutions, $temp$valueOrFunctionDeclarationInfoOriginal = { cM: valueOrFunctionDeclarationInfoOriginal.cM, a: valueOrFunctionDeclarationInfoOriginal.a, fJ: valueOrFunctionDeclarationInfoOriginal.fJ, o: parametersSubstituted.p, h: resultSubstituted.k, cW: valueOrFunctionDeclarationInfoOriginal.cW, n: typeSubstituted.n };
                                        context = $temp$context;
                                        substitutionsToApply = $temp$substitutionsToApply;
                                        valueOrFunctionDeclarationInfoOriginal = $temp$valueOrFunctionDeclarationInfoOriginal;
                                        continue annotatedValueOrFunctionDeclarationApplyVariableSubstitutions;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$annotatedValueOrFunctionDeclarationApplyVariableSubstitutions = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$annotatedValueOrFunctionDeclarationApplyVariableSubstitutions_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$Base10 = 0;
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$Base16 = 1;
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionChar = function (a) {
    return { $: 4, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionFloat = function (a) {
    return { $: 2, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionInteger = function (a) {
    return { $: 1, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionOperatorFunction = function (a) {
    return { $: 8, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecordAccessFunction = function (a) {
    return { $: 9, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionString = function (a) {
    return { $: 3, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionUnit = { $: 0 };
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$annotatedLetValueOrFunctionDeclarationApplyVariableSubstitutions_fn = function (context, substitutionsToApply, valueOrFunctionDeclarationInfoOriginal) {
    annotatedLetValueOrFunctionDeclarationApplyVariableSubstitutions: while (true) {
        if ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsIsNone(substitutionsToApply)) {
            return $elm$core$Result$Ok(valueOrFunctionDeclarationInfoOriginal);
        }
        else {
            var _v0 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$createBatchOfSubstitutionsToApply_fn(context, substitutionsToApply);
            if (_v0.$ === 1) {
                var error = _v0.a;
                return $elm$core$Result$Err(error);
            }
            else {
                var batchOfSubstitutionsToApply = _v0.a;
                var _v1 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(context, batchOfSubstitutionsToApply.a6, valueOrFunctionDeclarationInfoOriginal.n);
                if (_v1.$ === 1) {
                    var error = _v1.a;
                    return $elm$core$Result$Err(error);
                }
                else {
                    var typeSubstituted = _v1.a;
                    var _v2 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(context.dw, batchOfSubstitutionsToApply.a6, valueOrFunctionDeclarationInfoOriginal.h);
                    if (_v2.$ === 1) {
                        var error = _v2.a;
                        return $elm$core$Result$Err(error);
                    }
                    else {
                        var resultSubstituted = _v2.a;
                        var _v3 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue, function (parameterInferred, parametersSubstitutedSoFar) {
                            return $elm$core$Result$andThen_fn(function (parameterSubstituted) {
                                return parameterSubstituted.i ? $elm$core$Result$Ok({
                                    u: parametersSubstitutedSoFar.u,
                                    p: _List_Cons(parameterInferred, parametersSubstitutedSoFar.p),
                                    g: parametersSubstitutedSoFar.g
                                }) : $elm$core$Result$map_fn(function (substitutionsSoFarWithParameter) {
                                    return {
                                        u: false,
                                        p: _List_Cons(parameterSubstituted.k, parametersSubstitutedSoFar.p),
                                        g: substitutionsSoFarWithParameter
                                    };
                                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, parametersSubstitutedSoFar.g, parameterSubstituted.g));
                            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType_fn(context.dw, batchOfSubstitutionsToApply.a6, parameterInferred));
                        }, valueOrFunctionDeclarationInfoOriginal.o);
                        if (_v3.$ === 1) {
                            var error = _v3.a;
                            return $elm$core$Result$Err(error);
                        }
                        else {
                            var parametersSubstituted = _v3.a;
                            if (resultSubstituted.i && (typeSubstituted.i && parametersSubstituted.u)) {
                                return $elm$core$Result$Ok(valueOrFunctionDeclarationInfoOriginal);
                            }
                            else {
                                var _v4 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, resultSubstituted.g, parametersSubstituted.g);
                                if (_v4.$ === 1) {
                                    var error = _v4.a;
                                    return $elm$core$Result$Err(error);
                                }
                                else {
                                    var newResultParametersSubstitutions = _v4.a;
                                    var _v5 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariableSetMergeIntoVariableSubstitutionsWithVariableToType_fn(newResultParametersSubstitutions.E, newResultParametersSubstitutions.D, batchOfSubstitutionsToApply.b7);
                                    if (_v5.$ === 1) {
                                        var error = _v5.a;
                                        return $elm$core$Result$Err(error);
                                    }
                                    else {
                                        var newSubstitutions = _v5.a;
                                        var $temp$context = context, $temp$substitutionsToApply = newSubstitutions, $temp$valueOrFunctionDeclarationInfoOriginal = { a: valueOrFunctionDeclarationInfoOriginal.a, fJ: valueOrFunctionDeclarationInfoOriginal.fJ, o: parametersSubstituted.p, h: resultSubstituted.k, cW: valueOrFunctionDeclarationInfoOriginal.cW, n: typeSubstituted.n };
                                        context = $temp$context;
                                        substitutionsToApply = $temp$substitutionsToApply;
                                        valueOrFunctionDeclarationInfoOriginal = $temp$valueOrFunctionDeclarationInfoOriginal;
                                        continue annotatedLetValueOrFunctionDeclarationApplyVariableSubstitutions;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$annotatedLetValueOrFunctionDeclarationApplyVariableSubstitutions = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$annotatedLetValueOrFunctionDeclarationApplyVariableSubstitutions_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionReference = function (a) {
    return { $: 5, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionReferenceRecordTypeAliasConstructorFunction = function (a) {
    return { $: 7, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionReferenceVariant = function (a) {
    return { $: 6, a: a };
};
var $miniBill$elm_fast_dict$FastDict$Stop = function (a) {
    return { $: 1, a: a };
};
var $miniBill$elm_fast_dict$FastDict$Continue = function (a) {
    return { $: 0, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictContinueNothing = $miniBill$elm_fast_dict$FastDict$Continue($elm$core$Maybe$Nothing);
var $miniBill$elm_fast_dict$FastDict$stoppableFoldlInner_fn = function (func, acc, dict) {
    stoppableFoldlInner: while (true) {
        if (dict.$ === 1) {
            return $miniBill$elm_fast_dict$FastDict$Continue(acc);
        }
        else {
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            var _v1 = $miniBill$elm_fast_dict$FastDict$stoppableFoldlInner_fn(func, acc, left);
            if (!_v1.$) {
                var lacc = _v1.a;
                var _v2 = A3(func, key, value, lacc);
                if (!_v2.$) {
                    var vacc = _v2.a;
                    var $temp$func = func, $temp$acc = vacc, $temp$dict = right;
                    func = $temp$func;
                    acc = $temp$acc;
                    dict = $temp$dict;
                    continue stoppableFoldlInner;
                }
                else {
                    var vacc = _v2.a;
                    return $miniBill$elm_fast_dict$FastDict$Stop(vacc);
                }
            }
            else {
                var lacc = _v1.a;
                return $miniBill$elm_fast_dict$FastDict$Stop(lacc);
            }
        }
    }
}, $miniBill$elm_fast_dict$FastDict$stoppableFoldlInner_fn_unwrapped = function (func, acc, dict) {
    stoppableFoldlInner: while (true) {
        if (dict.$ === 1) {
            return $miniBill$elm_fast_dict$FastDict$Continue(acc);
        }
        else {
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            var _v1 = $miniBill$elm_fast_dict$FastDict$stoppableFoldlInner_fn_unwrapped(func, acc, left);
            if (!_v1.$) {
                var lacc = _v1.a;
                var _v2 = func(key, value, lacc);
                if (!_v2.$) {
                    var vacc = _v2.a;
                    var $temp$func = func, $temp$acc = vacc, $temp$dict = right;
                    func = $temp$func;
                    acc = $temp$acc;
                    dict = $temp$dict;
                    continue stoppableFoldlInner;
                }
                else {
                    var vacc = _v2.a;
                    return $miniBill$elm_fast_dict$FastDict$Stop(vacc);
                }
            }
            else {
                var lacc = _v1.a;
                return $miniBill$elm_fast_dict$FastDict$Stop(lacc);
            }
        }
    }
}, $miniBill$elm_fast_dict$FastDict$stoppableFoldlInner = F3($miniBill$elm_fast_dict$FastDict$stoppableFoldlInner_fn);
var $miniBill$elm_fast_dict$FastDict$stoppableFoldl_fn = function (func, acc, _v0) {
    var dict = _v0.b;
    var _v1 = $miniBill$elm_fast_dict$FastDict$stoppableFoldlInner_fn(func, acc, dict);
    if (!_v1.$) {
        var res = _v1.a;
        return res;
    }
    else {
        var res = _v1.a;
        return res;
    }
}, $miniBill$elm_fast_dict$FastDict$stoppableFoldl = F3($miniBill$elm_fast_dict$FastDict$stoppableFoldl_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictMapAndSmallestJust_fn = function (keyValueToMaybe, fastDict) {
    return $miniBill$elm_fast_dict$FastDict$stoppableFoldl_fn(F3(function (key, value, _v0) {
        var _v1 = A2(keyValueToMaybe, key, value);
        if (!_v1.$) {
            var foldedWithEntry = _v1.a;
            return $miniBill$elm_fast_dict$FastDict$Stop($elm$core$Maybe$Just(foldedWithEntry));
        }
        else {
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictContinueNothing;
        }
    }), $elm$core$Maybe$Nothing, fastDict);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictMapAndSmallestJust_fn_unwrapped = function (keyValueToMaybe, fastDict) {
    return $miniBill$elm_fast_dict$FastDict$stoppableFoldl_fn(F3(function (key, value, _v0) {
        var _v1 = keyValueToMaybe(key, value);
        if (!_v1.$) {
            var foldedWithEntry = _v1.a;
            return $miniBill$elm_fast_dict$FastDict$Stop($elm$core$Maybe$Just(foldedWithEntry));
        }
        else {
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictContinueNothing;
        }
    }), $elm$core$Maybe$Nothing, fastDict);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictMapAndSmallestJust = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictMapAndSmallestJust_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionReferenceTypeInfer_fn = function (context, expressionReference) {
    var useOfLocallyIntroducedExpressionVariablesOrLocallyIntroducedDeclaration = function () {
        var _v8 = expressionReference.K;
        if (_v8 === "") {
            var _v9 = $miniBill$elm_fast_dict$FastDict$get_fn(expressionReference.a, context.aV);
            if (!_v9.$) {
                var locallyIntroducedExpressionVariableType = _v9.a;
                return $elm$core$Maybe$Just({
                    aN: expressionReference.T,
                    n: locallyIntroducedExpressionVariableType,
                    l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionReference({ b: "", a: expressionReference.a, K: "" })
                });
            }
            else {
                var _v10 = $miniBill$elm_fast_dict$FastDict$get_fn(expressionReference.a, context.aU);
                if (_v10.$ === 1) {
                    return $elm$core$Maybe$Nothing;
                }
                else {
                    var locallyIntroducedDeclarationType = _v10.a;
                    return $elm$core$Maybe$Just({
                        aN: expressionReference.T,
                        n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(function (partiallyInferredTypeVariable) {
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeIncludesRange_fn(partiallyInferredTypeVariable.f, locallyIntroducedDeclarationType.aN) ? { a: partiallyInferredTypeVariable.a, f: expressionReference.T } : partiallyInferredTypeVariable;
                        }, locallyIntroducedDeclarationType.n),
                        l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionReference({ b: locallyIntroducedDeclarationType.dh, a: expressionReference.a, K: "" })
                    });
                }
            }
        }
        else {
            return $elm$core$Maybe$Nothing;
        }
    }();
    if (!useOfLocallyIntroducedExpressionVariablesOrLocallyIntroducedDeclaration.$) {
        var inferred = useOfLocallyIntroducedExpressionVariablesOrLocallyIntroducedDeclaration.a;
        return $elm$core$Result$Ok(inferred);
    }
    else {
        var _v1 = $elm$core$Maybe$andThen_fn(function (inModuleLookup) {
            return $miniBill$elm_fast_dict$FastDict$get_fn(expressionReference.a, inModuleLookup);
        }, $miniBill$elm_fast_dict$FastDict$get_fn(expressionReference.K, context.di.bO));
        if (_v1.$ === 1) {
            return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(expressionReference.T) + (") " + (" could not determine the module where the reference " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString({ a: expressionReference.a, K: expressionReference.K }) + " was originally declared in. I'm likely missing import information or don't know of some locally declared things.")))));
        }
        else {
            var moduleOrigin = _v1.a;
            var _v2 = $miniBill$elm_fast_dict$FastDict$get_fn(moduleOrigin, context.dw);
            if (_v2.$ === 1) {
                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(expressionReference.T) + (") " + ("no declaration types found for the reference " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString({ a: expressionReference.a, K: expressionReference.K }) + (". I looked for some in the module " + moduleOrigin))))));
            }
            else {
                var originModuleDeclarationTypes = _v2.a;
                var _v3 = $miniBill$elm_fast_dict$FastDict$get_fn(expressionReference.a, originModuleDeclarationTypes.az);
                if (!_v3.$) {
                    var signatureType = _v3.a;
                    return $elm$core$Result$Ok({
                        aN: expressionReference.T,
                        n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(function (variable) {
                            return { a: variable.a, f: expressionReference.T };
                        }, signatureType),
                        l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionReference({ b: moduleOrigin, a: expressionReference.a, K: expressionReference.K })
                    });
                }
                else {
                    var _v4 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictMapAndSmallestJust_fn_unwrapped(function (choiceTypeName, choiceTypeInfo) {
                        return $elm$core$Maybe$map_fn(function (variantValues) {
                            return { c0: choiceTypeName, cp: choiceTypeInfo.o, eY: variantValues };
                        }, $miniBill$elm_fast_dict$FastDict$get_fn(expressionReference.a, choiceTypeInfo.Y));
                    }, originModuleDeclarationTypes.aw);
                    if (!_v4.$) {
                        var variant = _v4.a;
                        return $elm$core$Result$Ok({
                            aN: expressionReference.T,
                            n: $elm$core$List$foldr_fn(F2(function (argument, output) {
                                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(function (variable) {
                                        return { a: variable.a, f: expressionReference.T };
                                    }, argument),
                                    d: output
                                }));
                            }), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                c: $elm$core$List$map_fn(function (parameter) {
                                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: parameter, f: expressionReference.T });
                                }, variant.cp),
                                b: moduleOrigin,
                                a: variant.c0
                            })), variant.eY),
                            l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionReferenceVariant({ c0: variant.c0, b: moduleOrigin, a: expressionReference.a, K: expressionReference.K })
                        });
                    }
                    else {
                        var _v5 = $miniBill$elm_fast_dict$FastDict$get_fn(expressionReference.a, originModuleDeclarationTypes.B);
                        if (_v5.$ === 1) {
                            return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(expressionReference.T) + (") " + ("no value/function/port/variant/record type alias constructor found in the origin module of the reference " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString({ a: expressionReference.a, K: moduleOrigin })))));
                        }
                        else {
                            var originTypeAliasDeclaration = _v5.a;
                            var _v6 = _Utils_Tuple2(originTypeAliasDeclaration.$7, originTypeAliasDeclaration.n);
                            if (((!_v6.a.$) && (_v6.b.$ === 1)) && (_v6.b.a.$ === 4)) {
                                var fieldOrder = _v6.a.a;
                                var fields = _v6.b.a.a;
                                return $elm$core$Result$Ok({
                                    aN: expressionReference.T,
                                    n: $elm$core$List$foldr_fn(F2(function (fieldName, outputTypeSoFar) {
                                        var _v7 = $miniBill$elm_fast_dict$FastDict$get_fn(fieldName, fields);
                                        if (_v7.$ === 1) {
                                            return outputTypeSoFar;
                                        }
                                        else {
                                            var fieldValueType = _v7.a;
                                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                                e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(function (variable) {
                                                    return { a: variable.a, f: expressionReference.T };
                                                }, fieldValueType),
                                                d: outputTypeSoFar
                                            }));
                                        }
                                    }), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
                                        c: $elm$core$List$map_fn(function (parameterName) {
                                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: parameterName, f: expressionReference.T });
                                        }, originTypeAliasDeclaration.o),
                                        b: moduleOrigin,
                                        a: expressionReference.a
                                    })), fieldOrder),
                                    l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionReferenceRecordTypeAliasConstructorFunction({ b: moduleOrigin, a: expressionReference.a, K: expressionReference.K })
                                });
                            }
                            else {
                                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(expressionReference.T) + (") " + ("I found a type alias with the same name as the reference " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString({ a: expressionReference.a, K: moduleOrigin }) + ", so I thought you are constructing a record. However, I was unable to determine which arguments correspond to which fields")))));
                            }
                        }
                    }
                }
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionReferenceTypeInfer = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionReferenceTypeInfer_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions_fn = function (declarationTypes, substitutions, expressionTypedNode) {
    expressionTypedNodeApplyVariableSubstitutions: while (true) {
        if ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsIsNone(substitutions)) {
            return $elm$core$Result$Ok(expressionTypedNode);
        }
        else {
            var _v0 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$createBatchOfSubstitutionsToApply_fn({ dw: declarationTypes, aN: expressionTypedNode.aN }, substitutions);
            if (_v0.$ === 1) {
                var error = _v0.a;
                return $elm$core$Result$Err(error);
            }
            else {
                var batchOfSubstitutionsToApply = _v0.a;
                var _v1 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, batchOfSubstitutionsToApply.a6, expressionTypedNode);
                if (_v1.$ === 1) {
                    var error = _v1.a;
                    return $elm$core$Result$Err(error);
                }
                else {
                    var substitutedExpressionTypedNode = _v1.a;
                    if (substitutedExpressionTypedNode.i) {
                        return $elm$core$Result$Ok(expressionTypedNode);
                    }
                    else {
                        var _v2 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariableSetMergeIntoVariableSubstitutionsWithVariableToType_fn(substitutedExpressionTypedNode.g.E, substitutedExpressionTypedNode.g.D, batchOfSubstitutionsToApply.b7);
                        if (_v2.$ === 1) {
                            var error = _v2.a;
                            return $elm$core$Result$Err(error);
                        }
                        else {
                            var withNewEquivalentVariables = _v2.a;
                            var $temp$declarationTypes = declarationTypes, $temp$substitutions = withNewEquivalentVariables, $temp$expressionTypedNode = substitutedExpressionTypedNode.k;
                            declarationTypes = $temp$declarationTypes;
                            substitutions = $temp$substitutions;
                            expressionTypedNode = $temp$expressionTypedNode;
                            continue expressionTypedNodeApplyVariableSubstitutions;
                        }
                    }
                }
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionReferenceLetDeclaredUnifyWithTypeInstanceSubstitutions_fn = function (context, newLetDeclaredTypes, expressionReferenceLetDeclared) {
    var _v0 = expressionReferenceLetDeclared.b;
    if (_v0 === "") {
        var _v1 = $miniBill$elm_fast_dict$FastDict$get_fn(expressionReferenceLetDeclared.a, newLetDeclaredTypes);
        if (_v1.$ === 1) {
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
        }
        else {
            var newLetDeclared = _v1.a;
            return $elm$core$Result$map_fn(function (useUnifiedWithNewLetTypeInstance) {
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typesAreEquallyStrict_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(useUnifiedWithNewLetTypeInstance.n), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(expressionReferenceLetDeclared.n)) ? { D: useUnifiedWithNewLetTypeInstance.g.D, E: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty } : useUnifiedWithNewLetTypeInstance.g;
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(context, expressionReferenceLetDeclared.n, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(function (letDeclaredTypeVariable) {
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeIncludesRange_fn(letDeclaredTypeVariable.f, newLetDeclared.aN) ? { a: letDeclaredTypeVariable.a, f: expressionReferenceLetDeclared.aN } : letDeclaredTypeVariable;
            }, newLetDeclared.n)));
        }
    }
    else {
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionReferenceLetDeclaredUnifyWithTypeInstanceSubstitutions = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionReferenceLetDeclaredUnifyWithTypeInstanceSubstitutions_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDestructuringExpressionRightOfEquals = function (letDeclaration) {
    if (!letDeclaration.$) {
        var letDestructuring = letDeclaration.a;
        return letDestructuring.O;
    }
    else {
        var letValueOrFunctionDeclaration = letDeclaration.a;
        return letValueOrFunctionDeclaration.h;
    }
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult_fn = function (initialResult, reduceOnOk, list) {
    if (initialResult.$ === 1) {
        var error = initialResult.a;
        return $elm$core$Result$Err(error);
    }
    else {
        var initialOkFolded = initialResult.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom_fn(initialOkFolded, reduceOnOk, list);
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn = function (context, newLetDeclaredTypes, expressionTypedNode) {
    expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions: while (true) {
        var _v0 = expressionTypedNode.l;
        switch (_v0.$) {
            case 0:
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
            case 1:
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
            case 2:
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
            case 3:
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
            case 4:
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
            case 6:
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
            case 7:
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
            case 8:
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
            case 9:
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
            case 5:
                var reference = _v0.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionReferenceLetDeclaredUnifyWithTypeInstanceSubstitutions_fn(context, newLetDeclaredTypes, { b: reference.b, a: reference.a, aN: expressionTypedNode.aN, n: expressionTypedNode.n });
            case 10:
                var negated = _v0.a;
                var $temp$context = context, $temp$newLetDeclaredTypes = newLetDeclaredTypes, $temp$expressionTypedNode = negated;
                context = $temp$context;
                newLetDeclaredTypes = $temp$newLetDeclaredTypes;
                expressionTypedNode = $temp$expressionTypedNode;
                continue expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions;
            case 11:
                var inParens = _v0.a;
                var $temp$context = context, $temp$newLetDeclaredTypes = newLetDeclaredTypes, $temp$expressionTypedNode = inParens;
                context = $temp$context;
                newLetDeclaredTypes = $temp$newLetDeclaredTypes;
                expressionTypedNode = $temp$expressionTypedNode;
                continue expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions;
            case 14:
                var expressionRecordAccess = _v0.a;
                var $temp$context = context, $temp$newLetDeclaredTypes = newLetDeclaredTypes, $temp$expressionTypedNode = expressionRecordAccess.aY;
                context = $temp$context;
                newLetDeclaredTypes = $temp$newLetDeclaredTypes;
                expressionTypedNode = $temp$expressionTypedNode;
                continue expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions;
            case 21:
                var expressionLambda = _v0.a;
                var $temp$context = context, $temp$newLetDeclaredTypes = newLetDeclaredTypes, $temp$expressionTypedNode = expressionLambda.h;
                context = $temp$context;
                newLetDeclaredTypes = $temp$newLetDeclaredTypes;
                expressionTypedNode = $temp$expressionTypedNode;
                continue expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions;
            case 15:
                var expressionInfixOperation = _v0.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (leftSubstitutions, rightSubstitutions) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, leftSubstitutions, rightSubstitutions);
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, expressionInfixOperation.cw), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, expressionInfixOperation.cV));
            case 12:
                var parts = _v0.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (part0Substitutions, part1Substitutions) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, part0Substitutions, part1Substitutions);
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, parts.s), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, parts.t));
            case 13:
                var parts = _v0.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3_fn_unwrapped(function (part0Substitutions, part1Substitutions, part2Substitutions) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3_fn(context, part0Substitutions, part1Substitutions, part2Substitutions);
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, parts.s), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, parts.t), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, parts.ak));
            case 16:
                var expressionIfThenElse = _v0.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3_fn_unwrapped(function (part0Substitutions, part1Substitutions, part2Substitutions) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3_fn(context, part0Substitutions, part1Substitutions, part2Substitutions);
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, expressionIfThenElse.aA), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, expressionIfThenElse.aC), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, expressionIfThenElse.aB));
            case 17:
                var elements = _v0.a;
                if (!elements.b) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
                }
                else {
                    var head = elements.a;
                    var tail = elements.b;
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, head), F2(function (element, soFar) {
                        return $elm$core$Result$andThen_fn(function (elementSubstitutions) {
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, soFar, elementSubstitutions);
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, element));
                    }), tail);
                }
            case 19:
                var fields = _v0.a;
                if (!fields.b) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
                }
                else {
                    var field0 = fields.a;
                    var field1Up = fields.b;
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, field0.l), F2(function (field, soFar) {
                        return $elm$core$Result$andThen_fn(function (fieldValueSubstitutions) {
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, soFar, fieldValueSubstitutions);
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, field.l));
                    }), field1Up);
                }
            case 18:
                var expressionCall = _v0.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (calledSubstitutions, argument0Substitutions) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, calledSubstitutions, argument0Substitutions), F2(function (argument, soFar) {
                        return $elm$core$Result$andThen_fn(function (argumentSubstitutions) {
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, soFar, argumentSubstitutions);
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, argument));
                    }), expressionCall.dS);
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, expressionCall.w), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, expressionCall.dR));
            case 20:
                var expressionRecordUpdate = _v0.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (recordVariableSubstitutions, fieldValue0Substitutions) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, recordVariableSubstitutions, fieldValue0Substitutions), F2(function (field, soFar) {
                        return $elm$core$Result$andThen_fn(function (fieldValueSubstitutions) {
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, soFar, fieldValueSubstitutions);
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, field.l));
                    }), expressionRecordUpdate.d5);
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, expressionRecordUpdate.d4.l), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionReferenceLetDeclaredUnifyWithTypeInstanceSubstitutions_fn(context, newLetDeclaredTypes, { b: expressionRecordUpdate.V.l.b, a: expressionRecordUpdate.V.l.a, aN: expressionRecordUpdate.V.aN, n: expressionRecordUpdate.V.n }));
            case 22:
                var expressionCaseOf = _v0.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (matchedSubstitutions, case0ResultSubstitutions) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, matchedSubstitutions, case0ResultSubstitutions), F2(function (case_, soFar) {
                        return $elm$core$Result$andThen_fn(function (caseResultSubstitutions) {
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, soFar, caseResultSubstitutions);
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, case_.h));
                    }), expressionCaseOf.as);
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, expressionCaseOf.at), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, expressionCaseOf.ar.h));
            default:
                var expressionLetIn = _v0.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (declarationsSubstitutions, resultSubstitutions) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, declarationsSubstitutions, resultSubstitutions);
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDestructuringExpressionRightOfEquals(expressionLetIn.c4.L)), F2(function (declarationNode, soFar) {
                    return $elm$core$Result$andThen_fn(function (declarationSubstitutions) {
                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, soFar, declarationSubstitutions);
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDestructuringExpressionRightOfEquals(declarationNode.L)));
                }), expressionLetIn.c5), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(context, newLetDeclaredTypes, expressionLetIn.h));
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$andExpressionTypedNodeUnifyUsesOfLocalReferences_fn = function (context, nextExpressionTypedNode, soFarUsesUnified) {
    return $elm$core$Result$andThen_fn(function (withNextUsesUnified) {
        return $elm$core$Result$map_fn(function (withNextSubstitutions) {
            return { g: withNextSubstitutions, aq: withNextUsesUnified.aq };
        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, soFarUsesUnified.g, withNextUsesUnified.g));
    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences_fn(context, soFarUsesUnified.aq, nextExpressionTypedNode));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$andExpressionTypedNodeUnifyUsesOfLocalReferences = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$andExpressionTypedNodeUnifyUsesOfLocalReferences_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences_fn = function (context, unifiedTypesSoFar, expressionTypedNode) {
    expressionTypedNodeUnifyUsesOfLocalReferences: while (true) {
        var _v0 = expressionTypedNode.l;
        switch (_v0.$) {
            case 0:
                return $elm$core$Result$Ok({ g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, aq: unifiedTypesSoFar });
            case 1:
                return $elm$core$Result$Ok({ g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, aq: unifiedTypesSoFar });
            case 2:
                return $elm$core$Result$Ok({ g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, aq: unifiedTypesSoFar });
            case 3:
                return $elm$core$Result$Ok({ g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, aq: unifiedTypesSoFar });
            case 4:
                return $elm$core$Result$Ok({ g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, aq: unifiedTypesSoFar });
            case 6:
                return $elm$core$Result$Ok({ g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, aq: unifiedTypesSoFar });
            case 7:
                return $elm$core$Result$Ok({ g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, aq: unifiedTypesSoFar });
            case 8:
                return $elm$core$Result$Ok({ g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, aq: unifiedTypesSoFar });
            case 9:
                return $elm$core$Result$Ok({ g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, aq: unifiedTypesSoFar });
            case 5:
                var reference = _v0.a;
                var _v1 = reference.b;
                if (_v1 === "") {
                    var _v2 = $miniBill$elm_fast_dict$FastDict$get_fn(reference.a, unifiedTypesSoFar);
                    if (_v2.$ === 1) {
                        return $elm$core$Result$Ok({ g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, aq: unifiedTypesSoFar });
                    }
                    else {
                        var unifiedTypeWithSameNameSoFar = _v2.a;
                        return $elm$core$Result$map_fn(function (unifiedTypeSoFarWithReference) {
                            return {
                                g: unifiedTypeSoFarWithReference.g,
                                aq: $miniBill$elm_fast_dict$FastDict$insert_fn(reference.a, unifiedTypeSoFarWithReference.n, unifiedTypesSoFar)
                            };
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(context, unifiedTypeWithSameNameSoFar, expressionTypedNode.n));
                    }
                }
                else {
                    return $elm$core$Result$Ok({ g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, aq: unifiedTypesSoFar });
                }
            case 10:
                var negated = _v0.a;
                var $temp$context = context, $temp$unifiedTypesSoFar = unifiedTypesSoFar, $temp$expressionTypedNode = negated;
                context = $temp$context;
                unifiedTypesSoFar = $temp$unifiedTypesSoFar;
                expressionTypedNode = $temp$expressionTypedNode;
                continue expressionTypedNodeUnifyUsesOfLocalReferences;
            case 11:
                var inParens = _v0.a;
                var $temp$context = context, $temp$unifiedTypesSoFar = unifiedTypesSoFar, $temp$expressionTypedNode = inParens;
                context = $temp$context;
                unifiedTypesSoFar = $temp$unifiedTypesSoFar;
                expressionTypedNode = $temp$expressionTypedNode;
                continue expressionTypedNodeUnifyUsesOfLocalReferences;
            case 14:
                var expressionRecordAccess = _v0.a;
                var $temp$context = context, $temp$unifiedTypesSoFar = unifiedTypesSoFar, $temp$expressionTypedNode = expressionRecordAccess.aY;
                context = $temp$context;
                unifiedTypesSoFar = $temp$unifiedTypesSoFar;
                expressionTypedNode = $temp$expressionTypedNode;
                continue expressionTypedNodeUnifyUsesOfLocalReferences;
            case 21:
                var expressionLambda = _v0.a;
                var $temp$context = context, $temp$unifiedTypesSoFar = unifiedTypesSoFar, $temp$expressionTypedNode = expressionLambda.h;
                context = $temp$context;
                unifiedTypesSoFar = $temp$unifiedTypesSoFar;
                expressionTypedNode = $temp$expressionTypedNode;
                continue expressionTypedNodeUnifyUsesOfLocalReferences;
            case 15:
                var expressionInfixOperation = _v0.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndExpressionTypedNodeUnifyUsesOfLocalReferences_fn(context, expressionInfixOperation.cV, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences_fn(context, unifiedTypesSoFar, expressionInfixOperation.cw));
            case 12:
                var parts = _v0.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndExpressionTypedNodeUnifyUsesOfLocalReferences_fn(context, parts.t, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences_fn(context, unifiedTypesSoFar, parts.s));
            case 13:
                var parts = _v0.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndExpressionTypedNodeUnifyUsesOfLocalReferences_fn(context, parts.ak, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndExpressionTypedNodeUnifyUsesOfLocalReferences_fn(context, parts.t, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences_fn(context, unifiedTypesSoFar, parts.s)));
            case 16:
                var expressionIfThenElse = _v0.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndExpressionTypedNodeUnifyUsesOfLocalReferences_fn(context, expressionIfThenElse.aB, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndExpressionTypedNodeUnifyUsesOfLocalReferences_fn(context, expressionIfThenElse.aC, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences_fn(context, unifiedTypesSoFar, expressionIfThenElse.aA)));
            case 17:
                var elements = _v0.a;
                if (!elements.b) {
                    return $elm$core$Result$Ok({ g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, aq: unifiedTypesSoFar });
                }
                else {
                    var head = elements.a;
                    var tail = elements.b;
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences_fn(context, unifiedTypesSoFar, head), F2(function (element, soFar) {
                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$andExpressionTypedNodeUnifyUsesOfLocalReferences_fn(context, element, soFar);
                    }), tail);
                }
            case 19:
                var fields = _v0.a;
                if (!fields.b) {
                    return $elm$core$Result$Ok({ g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, aq: unifiedTypesSoFar });
                }
                else {
                    var field0 = fields.a;
                    var field1Up = fields.b;
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences_fn(context, unifiedTypesSoFar, field0.l), F2(function (field, soFar) {
                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$andExpressionTypedNodeUnifyUsesOfLocalReferences_fn(context, field.l, soFar);
                    }), field1Up);
                }
            case 18:
                var expressionCall = _v0.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndExpressionTypedNodeUnifyUsesOfLocalReferences_fn(context, expressionCall.dR, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences_fn(context, unifiedTypesSoFar, expressionCall.w)), F2(function (argument, soFar) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$andExpressionTypedNodeUnifyUsesOfLocalReferences_fn(context, argument, soFar);
                }), expressionCall.dS);
            case 20:
                var expressionRecordUpdate = _v0.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndExpressionTypedNodeUnifyUsesOfLocalReferences_fn(context, expressionRecordUpdate.d4.l, function () {
                    var _v5 = expressionRecordUpdate.V.l.b;
                    if (_v5 === "") {
                        var _v6 = $miniBill$elm_fast_dict$FastDict$get_fn(expressionRecordUpdate.V.l.a, unifiedTypesSoFar);
                        if (_v6.$ === 1) {
                            return $elm$core$Result$Ok({ g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, aq: unifiedTypesSoFar });
                        }
                        else {
                            var unifiedTypeWithSameNameSoFar = _v6.a;
                            return $elm$core$Result$map_fn(function (unifiedTypeSoFarWithReference) {
                                return {
                                    g: unifiedTypeSoFarWithReference.g,
                                    aq: $miniBill$elm_fast_dict$FastDict$insert_fn(expressionRecordUpdate.V.l.a, unifiedTypeSoFarWithReference.n, unifiedTypesSoFar)
                                };
                            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(context, unifiedTypeWithSameNameSoFar, expressionTypedNode.n));
                        }
                    }
                    else {
                        return $elm$core$Result$Ok({ g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, aq: unifiedTypesSoFar });
                    }
                }()), F2(function (field, soFar) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$andExpressionTypedNodeUnifyUsesOfLocalReferences_fn(context, field.l, soFar);
                }), expressionRecordUpdate.d5);
            case 22:
                var expressionCaseOf = _v0.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndExpressionTypedNodeUnifyUsesOfLocalReferences_fn(context, expressionCaseOf.ar.h, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences_fn(context, unifiedTypesSoFar, expressionCaseOf.at)), F2(function (case_, soFar) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$andExpressionTypedNodeUnifyUsesOfLocalReferences_fn(context, case_.h, soFar);
                }), expressionCaseOf.as);
            default:
                var expressionLetIn = _v0.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndExpressionTypedNodeUnifyUsesOfLocalReferences_fn(context, expressionLetIn.h, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences_fn(context, unifiedTypesSoFar, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDestructuringExpressionRightOfEquals(expressionLetIn.c4.L)), F2(function (declarationNode, soFar) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$andExpressionTypedNodeUnifyUsesOfLocalReferences_fn(context, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDestructuringExpressionRightOfEquals(declarationNode.L), soFar);
                }), expressionLetIn.c5));
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndExpressionTypedNodeUnifyUsesOfLocalReferences_fn = function (context, nextExpressionTypedNode, soFarUsesUnifiedOrError) {
    return $elm$core$Result$andThen_fn(function (soFarUsesUnified) {
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$andExpressionTypedNodeUnifyUsesOfLocalReferences_fn(context, nextExpressionTypedNode, soFarUsesUnified);
    }, soFarUsesUnifiedOrError);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndExpressionTypedNodeUnifyUsesOfLocalReferences = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndExpressionTypedNodeUnifyUsesOfLocalReferences_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$infixOperationApproximateOperatorRange = function (infixOperation) {
    var operatorLength = $elm$core$String$length(infixOperation.er);
    return (!(infixOperation.df.bu - infixOperation.aQ.bu)) ? ((!((infixOperation.df.cJ + operatorLength) - infixOperation.aQ.cJ)) ? {
        b_: { cJ: infixOperation.aQ.cJ, bu: infixOperation.aQ.bu },
        cf: { cJ: infixOperation.df.cJ, bu: infixOperation.aQ.bu }
    } : {
        b_: { cJ: infixOperation.aQ.cJ - 1, bu: infixOperation.aQ.bu },
        cf: { cJ: (infixOperation.aQ.cJ - 1) - operatorLength, bu: infixOperation.aQ.bu }
    }) : {
        b_: { cJ: infixOperation.aQ.cJ - 1, bu: infixOperation.aQ.bu },
        cf: { cJ: (infixOperation.aQ.cJ - 1) - operatorLength, bu: infixOperation.aQ.bu }
    };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToFastDictsAndUnify_fn = function (elementToSet, elements) {
    return $elm$core$List$foldl_fn_unwrapped(function (element, soFar) {
        return $miniBill$elm_fast_dict$FastDict$union_fn(soFar, elementToSet(element));
    }, $miniBill$elm_fast_dict$FastDict$empty, elements);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToFastDictsAndUnify = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToFastDictsAndUnify_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNoneUnifiedTypesDictEmpty = $elm$core$Result$Ok({ g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, aq: $miniBill$elm_fast_dict$FastDict$empty });
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeConstructBasicsBool = { c: _List_Nil, b: "Basics", a: "Bool" };
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableBasicsBool = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeConstructBasicsBool);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableBasicsBool);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okAndOperatorInfo = $elm$core$Result$Ok({ U: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool, b: "Basics", Q: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool, W: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool });
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsFloat = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Float" }));
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okFdivOperatorInfo = $elm$core$Result$Ok({ U: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsFloat, b: "Basics", Q: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsFloat, W: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsFloat });
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsInt = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Basics", a: "Int" }));
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okIdivOperatorInfo = $elm$core$Result$Ok({ U: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsInt, b: "Basics", Q: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsInt, W: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsInt });
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okOrOperatorInfo = $elm$core$Result$Ok({ U: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool, b: "Basics", Q: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool, W: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool });
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserAdvancedParser_fn = function (context, problem, value) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
        c: _List_fromArray([context, problem, value]),
        b: "Parser.Advanced",
        a: "Parser"
    }));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserAdvancedParser = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserAdvancedParser_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserParser = function (a) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
        c: _List_fromArray([a]),
        b: "Parser",
        a: "Parser"
    }));
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUrlParserParser_fn = function (a, b) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
        c: _List_fromArray([a, b]),
        b: "Url.Parser",
        a: "Parser"
    }));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUrlParserParser = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUrlParserParser_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUrlParserQueryParser = function (a) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
        c: _List_fromArray([a]),
        b: "Url.Parser.Query",
        a: "Parser"
    }));
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$operatorFunctionType_fn = function (context, operator) {
    switch (operator) {
        case "|>":
            var b = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: context.aN });
            var a = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: context.aN });
            return $elm$core$Result$Ok({
                U: a,
                b: "Basics",
                Q: b,
                W: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: a, d: b }))
            });
        case "<|":
            var b = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: context.aN });
            var a = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: context.aN });
            return $elm$core$Result$Ok({
                U: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: a, d: b })),
                b: "Basics",
                Q: b,
                W: a
            });
        case ">>":
            var c = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: context.aN });
            var b = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: context.aN });
            var a = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: context.aN });
            return $elm$core$Result$Ok({
                U: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: a, d: b })),
                b: "Basics",
                Q: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: a, d: c })),
                W: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: b, d: c }))
            });
        case "<<":
            var c = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: context.aN });
            var b = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: context.aN });
            var a = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: context.aN });
            return $elm$core$Result$Ok({
                U: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: b, d: c })),
                b: "Basics",
                Q: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: a, d: c })),
                W: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: a, d: b }))
            });
        case "++":
            var appendable = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "appendable", f: context.aN });
            return $elm$core$Result$Ok({ U: appendable, b: "Basics", Q: appendable, W: appendable });
        case "==":
            var equatable = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "equatable", f: context.aN });
            return $elm$core$Result$Ok({ U: equatable, b: "Basics", Q: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool, W: equatable });
        case "/=":
            var equatable = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "equatable", f: context.aN });
            return $elm$core$Result$Ok({ U: equatable, b: "Basics", Q: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool, W: equatable });
        case "::":
            var a = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "element", f: context.aN });
            return $elm$core$Result$Ok({
                U: a,
                b: "List",
                Q: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeListList(a),
                W: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeListList(a)
            });
        case "*":
            var number = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "number", f: context.aN });
            return $elm$core$Result$Ok({ U: number, b: "Basics", Q: number, W: number });
        case "+":
            var number = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "number", f: context.aN });
            return $elm$core$Result$Ok({ U: number, b: "Basics", Q: number, W: number });
        case "-":
            var number = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "number", f: context.aN });
            return $elm$core$Result$Ok({ U: number, b: "Basics", Q: number, W: number });
        case "/":
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okFdivOperatorInfo;
        case "^":
            var number = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "number", f: context.aN });
            return $elm$core$Result$Ok({ U: number, b: "Basics", Q: number, W: number });
        case "<=":
            var comparable = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: context.aN });
            return $elm$core$Result$Ok({ U: comparable, b: "Basics", Q: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool, W: comparable });
        case ">=":
            var comparable = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: context.aN });
            return $elm$core$Result$Ok({ U: comparable, b: "Basics", Q: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool, W: comparable });
        case ">":
            var comparable = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: context.aN });
            return $elm$core$Result$Ok({ U: comparable, b: "Basics", Q: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool, W: comparable });
        case "<":
            var comparable = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "comparable", f: context.aN });
            return $elm$core$Result$Ok({ U: comparable, b: "Basics", Q: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsBool, W: comparable });
        case "//":
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okIdivOperatorInfo;
        case "&&":
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okAndOperatorInfo;
        case "||":
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okOrOperatorInfo;
        case "|.":
            return $elm$core$Result$Ok(function () {
                if (context.di.b1) {
                    var varContext = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "context", f: context.aN });
                    var problem = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "problem", f: context.aN });
                    var keep = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "keep", f: context.aN });
                    var ignore = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "ignore", f: context.aN });
                    return {
                        U: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserAdvancedParser_fn(varContext, problem, keep),
                        b: "Parser.Advanced",
                        Q: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserAdvancedParser_fn(varContext, problem, keep),
                        W: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserAdvancedParser_fn(varContext, problem, ignore)
                    };
                }
                else {
                    var keep = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "keep", f: context.aN });
                    var ignore = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "ignore", f: context.aN });
                    return {
                        U: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserParser(keep),
                        b: "Parser",
                        Q: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserParser(keep),
                        W: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserParser(ignore)
                    };
                }
            }());
        case "|=":
            return $elm$core$Result$Ok(function () {
                if (context.di.b3) {
                    var varContext = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "context", f: context.aN });
                    var problem = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "problem", f: context.aN });
                    var b = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: context.aN });
                    var a = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: context.aN });
                    return {
                        U: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserAdvancedParser_fn(varContext, problem, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: a, d: b }))),
                        b: "Parser.Advanced",
                        Q: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserAdvancedParser_fn(varContext, problem, b),
                        W: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserAdvancedParser_fn(varContext, problem, a)
                    };
                }
                else {
                    var b = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: context.aN });
                    var a = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: context.aN });
                    return {
                        U: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserParser($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: a, d: b }))),
                        b: "Parser",
                        Q: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserParser(b),
                        W: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeParserParser(a)
                    };
                }
            }());
        case "</>":
            var c = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "c", f: context.aN });
            var b = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: context.aN });
            var a = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: context.aN });
            return $elm$core$Result$Ok({
                U: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUrlParserParser_fn(a, b),
                b: "Url.Parser",
                Q: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUrlParserParser_fn(a, c),
                W: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUrlParserParser_fn(b, c)
            });
        case "<?>":
            var query = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "query", f: context.aN });
            var b = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "b", f: context.aN });
            var a = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "a", f: context.aN });
            return $elm$core$Result$Ok({
                U: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUrlParserParser_fn(a, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: query, d: b }))),
                b: "Url.Parser",
                Q: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUrlParserParser_fn(a, b),
                W: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUrlParserQueryParser(query)
            });
        default:
            var unknownOperator = operator;
            return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("unknown operator (" + (unknownOperator + ")")))));
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$operatorFunctionType = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$operatorFunctionType_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$introducedExpressionVariablesEmptyNodesEmpty = { ax: $miniBill$elm_fast_dict$FastDict$empty, p: _List_Nil };
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternChar = function (a) {
    return { $: 5, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternInt = function (a) {
    return { $: 7, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternString = function (a) {
    return { $: 6, a: a };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternUnit = { $: 4 };
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeApplyVariableSubstitutions_fn = function (declarationTypes, substitutions, patternTypedNode) {
    patternTypedNodeApplyVariableSubstitutions: while (true) {
        if ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsIsNone(substitutions)) {
            return $elm$core$Result$Ok(patternTypedNode);
        }
        else {
            var _v0 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$createBatchOfSubstitutionsToApply_fn({ dw: declarationTypes, aN: patternTypedNode.aN }, substitutions);
            if (_v0.$ === 1) {
                var error = _v0.a;
                return $elm$core$Result$Err(error);
            }
            else {
                var batchOfSubstitutionsToApply = _v0.a;
                var _v1 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType_fn(declarationTypes, batchOfSubstitutionsToApply.a6, patternTypedNode);
                if (_v1.$ === 1) {
                    var error = _v1.a;
                    return $elm$core$Result$Err(error);
                }
                else {
                    var substitutedPatternTypedNode = _v1.a;
                    if (substitutedPatternTypedNode.i) {
                        return $elm$core$Result$Ok(patternTypedNode);
                    }
                    else {
                        var _v2 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariableSetMergeIntoVariableSubstitutionsWithVariableToType_fn(substitutedPatternTypedNode.g.E, substitutedPatternTypedNode.g.D, batchOfSubstitutionsToApply.b7);
                        if (_v2.$ === 1) {
                            var error = _v2.a;
                            return $elm$core$Result$Err(error);
                        }
                        else {
                            var withNewEquivalentVariables = _v2.a;
                            var $temp$declarationTypes = declarationTypes, $temp$substitutions = withNewEquivalentVariables, $temp$patternTypedNode = substitutedPatternTypedNode.k;
                            declarationTypes = $temp$declarationTypes;
                            substitutions = $temp$substitutions;
                            patternTypedNode = $temp$patternTypedNode;
                            continue patternTypedNodeApplyVariableSubstitutions;
                        }
                    }
                }
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeApplyVariableSubstitutions = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeApplyVariableSubstitutions_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeApplyVariableSubstitutions_fn = function (context, substitutions, originalType) {
    typeApplyVariableSubstitutions: while (true) {
        if ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsIsNone(substitutions)) {
            return $elm$core$Result$Ok(originalType);
        }
        else {
            var _v0 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$createBatchOfSubstitutionsToApply_fn(context, substitutions);
            if (_v0.$ === 1) {
                var error = _v0.a;
                return $elm$core$Result$Err(error);
            }
            else {
                var batchOfSubstitutionsToApply = _v0.a;
                var _v1 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(context, batchOfSubstitutionsToApply.a6, originalType);
                if (_v1.$ === 1) {
                    var error = _v1.a;
                    return $elm$core$Result$Err(error);
                }
                else {
                    var substitutedType = _v1.a;
                    if (substitutedType.i) {
                        return $elm$core$Result$Ok(originalType);
                    }
                    else {
                        var $temp$context = context, $temp$substitutions = { D: batchOfSubstitutionsToApply.b7, E: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty }, $temp$originalType = substitutedType.n;
                        context = $temp$context;
                        substitutions = $temp$substitutions;
                        originalType = $temp$originalType;
                        continue typeApplyVariableSubstitutions;
                    }
                }
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeApplyVariableSubstitutions = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeApplyVariableSubstitutions_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeCharChar = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "Char", a: "Char" }));
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeStringString = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }));
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTypeConstruct_fn = function (context, a, bTypeConstruct) {
    if (a.$ === 1) {
        var aTypeNotVariable = a.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnifyWithTypeConstruct_fn(context, aTypeNotVariable, bTypeConstruct);
    }
    else {
        var aVariable = a.a;
        var bTypeNotVariable = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(bTypeConstruct);
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableWithType_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(bTypeNotVariable), context.dw, aVariable, bTypeNotVariable);
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTypeConstruct = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTypeConstruct_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableIsConstrained = function (variableName) {
    return _String_startsWith_fn("number", variableName) || function () {
        var _v0 = _String_slice_fn(0, 10, variableName);
        switch (_v0) {
            case "appendable":
                return true;
            case "comparable":
                return true;
            case "compappend":
                return true;
            default:
                return false;
        }
    }();
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer_fn = function (context, _v0) {
    var fullRange = _v0.a;
    var pattern = _v0.b;
    switch (pattern.$) {
        case 6:
            return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (") " + "float patterns are invalid syntax")));
        case 0:
            return $elm$core$Result$Ok({
                aN: fullRange,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "ignored", f: fullRange }),
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternIgnored
            });
        case 1:
            return $elm$core$Result$Ok({ aN: fullRange, n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnit, l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternUnit });
        case 2:
            var charValue = pattern.a;
            return $elm$core$Result$Ok({
                aN: fullRange,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeCharChar,
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternChar(charValue)
            });
        case 4:
            var intValue = pattern.a;
            return $elm$core$Result$Ok({
                aN: fullRange,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsInt,
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternInt({ c_: 0, l: intValue })
            });
        case 5:
            var intValue = pattern.a;
            return $elm$core$Result$Ok({
                aN: fullRange,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsInt,
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternInt({ c_: 1, l: intValue })
            });
        case 3:
            var stringValue = pattern.a;
            return $elm$core$Result$Ok({
                aN: fullRange,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeStringString,
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternString(stringValue)
            });
        case 11:
            var variableName = pattern.a;
            return $elm$core$Result$Ok({
                aN: fullRange,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({
                    a: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeVariableIsConstrained(variableName) ? ("incoming" + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$stringFirstCharToUpper(variableName)) : variableName,
                    f: fullRange
                }),
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternVariable(variableName)
            });
        case 14:
            var parenthesizedInParens = pattern.a;
            return $elm$core$Result$map_fn(function (inParens) {
                return {
                    aN: fullRange,
                    n: inParens.n,
                    l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternParenthesized(inParens)
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer_fn(context, parenthesizedInParens));
        case 13:
            var innerPatternNode = pattern.a;
            var _v2 = pattern.b;
            var variableNameRange = _v2.a;
            var variableName = _v2.b;
            return $elm$core$Result$map_fn(function (inner) {
                return {
                    aN: fullRange,
                    n: inner.n,
                    l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternAs({
                        m: inner,
                        bm: { aN: variableNameRange, n: inner.n, l: variableName }
                    })
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer_fn(context, innerPatternNode));
        case 7:
            var parts = pattern.a;
            if (!parts.b) {
                return $elm$core$Result$Ok({ aN: fullRange, n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnit, l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternUnit });
            }
            else {
                if (!parts.b.b) {
                    var parenthesizedInParens = parts.a;
                    return $elm$core$Result$map_fn(function (inParens) {
                        return {
                            aN: fullRange,
                            n: inParens.n,
                            l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternParenthesized(inParens)
                        };
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer_fn(context, parenthesizedInParens));
                }
                else {
                    if (!parts.b.b.b) {
                        var tuplePart0 = parts.a;
                        var _v4 = parts.b;
                        var tuplePart1 = _v4.a;
                        return $elm$core$Result$map2_fn_unwrapped(function (part0, part1) {
                            return {
                                aN: fullRange,
                                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({ s: part0.n, t: part1.n })),
                                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternTuple({ s: part0, t: part1 })
                            };
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer_fn(context, tuplePart0), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer_fn(context, tuplePart1));
                    }
                    else {
                        if (!parts.b.b.b.b) {
                            var tuplePart0 = parts.a;
                            var _v5 = parts.b;
                            var tuplePart1 = _v5.a;
                            var _v6 = _v5.b;
                            var tuplePart2 = _v6.a;
                            return $elm$core$Result$map3_fn_unwrapped(function (part0, part1, part2) {
                                return {
                                    aN: fullRange,
                                    n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple({ s: part0.n, t: part1.n, ak: part2.n })),
                                    l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternTriple({ s: part0, t: part1, ak: part2 })
                                };
                            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer_fn(context, tuplePart0), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer_fn(context, tuplePart1), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer_fn(context, tuplePart2));
                        }
                        else {
                            var _v7 = parts.b;
                            var _v8 = _v7.b;
                            var _v9 = _v8.b;
                            return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (") " + "too many tuple parts")));
                        }
                    }
                }
            }
        case 8:
            var recordFields = pattern.a;
            var fieldTypedNodes = $elm$core$List$map_fn(function (_v10) {
                var fieldRange = _v10.a;
                var fieldName = _v10.b;
                return {
                    aN: fieldRange,
                    n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: fieldName, f: fieldRange }),
                    l: fieldName
                };
            }, recordFields);
            return $elm$core$Result$Ok({
                aN: fullRange,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension({
                    F: $elm$core$List$foldl_fn_unwrapped(function (fieldVariable, soFar) {
                        return $miniBill$elm_fast_dict$FastDict$insert_fn(fieldVariable.l, fieldVariable.n, soFar);
                    }, $miniBill$elm_fast_dict$FastDict$empty, fieldTypedNodes),
                    V: { a: "record", f: fullRange }
                })),
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternRecord(fieldTypedNodes)
            });
        case 9:
            var headNode = pattern.a;
            var tailNode = pattern.b;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (headInferred, tailInferred) {
                return $elm$core$Result$andThen_fn(function (fullListTypeUnified) {
                    return $elm$core$Result$map2_fn_unwrapped(function (headAfterUnification, tailAfterUnification) {
                        return {
                            aN: fullRange,
                            n: fullListTypeUnified.n,
                            l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternListCons({ b0: headAfterUnification, cY: tailAfterUnification })
                        };
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeApplyVariableSubstitutions_fn(context.dw, fullListTypeUnified.g, headInferred), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeApplyVariableSubstitutions_fn(context.dw, fullListTypeUnified.g, tailInferred));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTypeConstruct_fn({ dw: context.dw, aN: fullRange }, tailInferred.n, {
                    c: _List_fromArray([headInferred.n]),
                    b: "List",
                    a: "List"
                }));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer_fn(context, headNode), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer_fn(context, tailNode));
        case 10:
            var elementNodes = pattern.a;
            if (!elementNodes.b) {
                return $elm$core$Result$Ok({
                    aN: fullRange,
                    n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeListList($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "element", f: fullRange })),
                    l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternListExactEmpty
                });
            }
            else {
                var head = elementNodes.a;
                var tail = elementNodes.b;
                return $elm$core$Result$andThen_fn(function (headInferred) {
                    var typeContext = { dw: context.dw, aN: fullRange };
                    return $elm$core$Result$andThen_fn(function (tailInferredAndUnifiedElementType) {
                        return $elm$core$Result$map2_fn_unwrapped(function (headInferredAfterUnification, tailInferredAfterUnification) {
                            return {
                                aN: fullRange,
                                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeListList(tailInferredAndUnifiedElementType.bU),
                                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternListExact(_List_Cons(headInferredAfterUnification, tailInferredAfterUnification))
                            };
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeApplyVariableSubstitutions_fn(context.dw, tailInferredAndUnifiedElementType.g, headInferred), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped(_List_Nil, function (tailElementInferred, tailAfterUnificationSoFar) {
                            return $elm$core$Result$map_fn(function (tailElementAfterUnification) {
                                return _List_Cons(tailElementAfterUnification, tailAfterUnificationSoFar);
                            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeApplyVariableSubstitutions_fn(context.dw, tailInferredAndUnifiedElementType.g, tailElementInferred));
                        }, tailInferredAndUnifiedElementType.p));
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped({ p: _List_Nil, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, bU: headInferred.n }, function (tailElementNode, soFar) {
                        return $elm$core$Result$andThen_fn(function (tailElementInferred) {
                            return $elm$core$Result$andThen_fn(function (unifiedElementTypeSoFarWithTailElement) {
                                return $elm$core$Result$map_fn(function (substitutionsSoFarWithUnifyingTailElement) {
                                    return {
                                        p: _List_Cons(tailElementInferred, soFar.p),
                                        g: substitutionsSoFarWithUnifyingTailElement,
                                        bU: unifiedElementTypeSoFarWithTailElement.n
                                    };
                                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(typeContext, soFar.g, unifiedElementTypeSoFarWithTailElement.g));
                            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(typeContext, soFar.bU, tailElementInferred.n));
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer_fn(context, tailElementNode));
                    }, tail));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer_fn(context, head));
            }
        default:
            var qualified = pattern.a;
            var values = pattern.b;
            var qualification = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$moduleNameToString(qualified.bN);
            var moduleOriginInfoOrError = function () {
                var _v14 = $elm$core$Maybe$andThen_fn(function (inModuleLookup) {
                    return $miniBill$elm_fast_dict$FastDict$get_fn(qualified.a, inModuleLookup);
                }, $miniBill$elm_fast_dict$FastDict$get_fn(qualification, context.di.bO));
                if (_v14.$ === 1) {
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (") " + ("no module origin found for the pattern variant " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString({ a: qualified.a, K: qualification })))));
                }
                else {
                    var moduleOrigin = _v14.a;
                    var _v15 = $miniBill$elm_fast_dict$FastDict$get_fn(moduleOrigin, context.dw);
                    if (_v15.$ === 1) {
                        return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (") " + ("no declaration types found at the module origin of the variant reference " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString({ a: qualified.a, K: moduleOrigin })))));
                    }
                    else {
                        var moduleOriginDeclarationTypes = _v15.a;
                        return $elm$core$Result$Ok({ dw: moduleOriginDeclarationTypes, a: moduleOrigin });
                    }
                }
            }();
            if (moduleOriginInfoOrError.$ === 1) {
                var error = moduleOriginInfoOrError.a;
                return $elm$core$Result$Err(error);
            }
            else {
                var moduleOriginInfo = moduleOriginInfoOrError.a;
                var _v13 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictMapAndSmallestJust_fn_unwrapped(function (choiceTypeName, choiceTypeInfo) {
                    return $elm$core$Maybe$map_fn(function (variantParameters) {
                        return { c0: choiceTypeName, cp: choiceTypeInfo.o, eW: variantParameters };
                    }, $miniBill$elm_fast_dict$FastDict$get_fn(qualified.a, choiceTypeInfo.Y));
                }, moduleOriginInfo.dw.aw);
                if (_v13.$ === 1) {
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (") " + ("no choice type found at the module origin with the variant reference " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString({ a: qualified.a, K: moduleOriginInfo.a })))));
                }
                else {
                    var variant = _v13.a;
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternVariantTypeInfer_fn(context, { c0: variant.c0, cp: variant.cp, T: fullRange, b: moduleOriginInfo.a, a: qualified.a, K: qualification, X: values, eX: variant.eW });
                }
            }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternVariantTypeInfer_fn = function (context, patternVariant) {
    return $elm$core$Result$map_fn(function (valuesAndResultTypeUnified) {
        return {
            aN: patternVariant.T,
            n: valuesAndResultTypeUnified.Q,
            l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$PatternVariant({
                c0: patternVariant.c0,
                b: patternVariant.b,
                a: patternVariant.a,
                K: patternVariant.K,
                X: $elm$core$List$reverse(valuesAndResultTypeUnified.dr)
            })
        };
    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldl2WhileOkFrom_fn_unwrapped({
        Q: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({
            c: $elm$core$List$map_fn(function (parameter) {
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: parameter, f: patternVariant.T });
            }, patternVariant.cp),
            b: patternVariant.b,
            a: patternVariant.c0
        })),
        dr: _List_Nil
    }, patternVariant.eX, patternVariant.X, function (typeInVariant, argumentPattern, soFar) {
        return $elm$core$Result$andThen_fn(function (valueInferred) {
            var typeContext = { dw: context.dw, aN: patternVariant.T };
            return $elm$core$Result$andThen_fn(function (valueTypeUnified) {
                return $elm$core$Result$map2_fn_unwrapped(function (resultTypeAfterUnification, valueInferredAfterUnification) {
                    return {
                        Q: resultTypeAfterUnification,
                        dr: _List_Cons(valueInferredAfterUnification, soFar.dr)
                    };
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeApplyVariableSubstitutions_fn(typeContext, valueTypeUnified.g, soFar.Q), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeApplyVariableSubstitutions_fn(context.dw, valueTypeUnified.g, valueInferred));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(typeContext, valueInferred.n, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(function (variable) {
                return { a: variable.a, f: patternVariant.T };
            }, typeInVariant)));
        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer_fn(context, argumentPattern));
    }));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternVariantTypeInfer = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternVariantTypeInfer_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables = function (patternTypedNode) {
    patternTypedNodeIntroducedVariables: while (true) {
        var _v0 = patternTypedNode.l;
        switch (_v0.$) {
            case 4:
                return $miniBill$elm_fast_dict$FastDict$empty;
            case 0:
                return $miniBill$elm_fast_dict$FastDict$empty;
            case 7:
                return $miniBill$elm_fast_dict$FastDict$empty;
            case 6:
                return $miniBill$elm_fast_dict$FastDict$empty;
            case 5:
                return $miniBill$elm_fast_dict$FastDict$empty;
            case 1:
                var variable = _v0.a;
                return $miniBill$elm_fast_dict$FastDict$singleton_fn(variable, patternTypedNode.n);
            case 10:
                var fieldVariables = _v0.a;
                return $elm$core$List$foldl_fn_unwrapped(function (fieldVariable, soFar) {
                    return $miniBill$elm_fast_dict$FastDict$insert_fn(fieldVariable.l, fieldVariable.n, soFar);
                }, $miniBill$elm_fast_dict$FastDict$empty, fieldVariables);
            case 3:
                var patternAs = _v0.a;
                return $miniBill$elm_fast_dict$FastDict$insert_fn(patternAs.bm.l, patternAs.bm.n, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(patternAs.m));
            case 2:
                var inParens = _v0.a;
                var $temp$patternTypedNode = inParens;
                patternTypedNode = $temp$patternTypedNode;
                continue patternTypedNodeIntroducedVariables;
            case 11:
                var listCons = _v0.a;
                return $miniBill$elm_fast_dict$FastDict$union_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(listCons.b0), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(listCons.cY));
            case 8:
                var parts = _v0.a;
                return $miniBill$elm_fast_dict$FastDict$union_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(parts.s), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(parts.t));
            case 9:
                var parts = _v0.a;
                return $miniBill$elm_fast_dict$FastDict$union_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(parts.ak), $miniBill$elm_fast_dict$FastDict$union_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(parts.t), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(parts.s)));
            case 12:
                var elements = _v0.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToFastDictsAndUnify_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables, elements);
            default:
                var variant = _v0.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToFastDictsAndUnify_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables, variant.X);
        }
    }
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$parameterPatternsTypeInfer_fn = function (context, parameterPatterns) {
    return $elm$core$Result$map_fn(function (folded) {
        return { ax: folded.ax, p: folded.p };
    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$introducedExpressionVariablesEmptyNodesEmpty, function (pattern, soFar) {
        return $elm$core$Result$map_fn(function (patternInferred) {
            return {
                ax: $miniBill$elm_fast_dict$FastDict$union_fn(soFar.ax, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(patternInferred)),
                p: _List_Cons(patternInferred, soFar.p)
            };
        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer_fn(context, pattern));
    }, parameterPatterns));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$parameterPatternsTypeInfer = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$parameterPatternsTypeInfer_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxValueOrFunctionDeclarationRange = function (syntaxValueOrFunctionDeclaration) {
    return {
        b_: $stil4m$elm_syntax$Elm$Syntax$Node$range(syntaxValueOrFunctionDeclaration.L).b_,
        cf: function () {
            var _v0 = syntaxValueOrFunctionDeclaration.cM;
            if (!_v0.$) {
                var _v1 = _v0.a;
                var documentationRange = _v1.a;
                return documentationRange.cf;
            }
            else {
                var _v2 = syntaxValueOrFunctionDeclaration.cW;
                if (!_v2.$) {
                    var _v3 = _v2.a;
                    var signatureRange = _v3.a;
                    return signatureRange.cf;
                }
                else {
                    return $stil4m$elm_syntax$Elm$Syntax$Node$range(syntaxValueOrFunctionDeclaration.L).cf;
                }
            }
        }()
    };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithBasicsBool_fn = function (context, a) {
    if (a.$ === 1) {
        var aTypeNotVariable = a.a;
        switch (aTypeNotVariable.$) {
            case 1:
                var aTypeConstruct = aTypeNotVariable.a;
                if (function () {
                    var _v2 = aTypeConstruct.a;
                    if (_v2 === "Bool") {
                        var _v3 = aTypeConstruct.b;
                        if (_v3 === "Basics") {
                            return true;
                        }
                        else {
                            return false;
                        }
                    }
                    else {
                        return false;
                    }
                }()) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNone;
                }
                else {
                    var _v4 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct_fn(context, aTypeConstruct, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableBasicsBool);
                    if (!_v4.$) {
                        var result = _v4.a;
                        return $elm$core$Result$map_fn(function ($) {
                            return $.g;
                        }, result);
                    }
                    else {
                        return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("choice type " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$qualifiedToString({ a: aTypeConstruct.a, K: aTypeConstruct.b }) + " cannot be unified be with a choice type with a different name: Basics.Bool")))));
                    }
                }
            case 0:
                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "choice type Basics.Bool cannot be unified be with a choice type with a different name: Basics.Bool")));
            case 2:
                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "choice type Basics.Bool cannot be unified be with a choice type with a different name: Basics.Bool")));
            case 3:
                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "choice type Basics.Bool cannot be unified be with a choice type with a different name: Basics.Bool")));
            case 4:
                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "choice type Basics.Bool cannot be unified be with a choice type with a different name: Basics.Bool")));
            case 5:
                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "choice type Basics.Bool cannot be unified be with a choice type with a different name: Basics.Bool")));
            default:
                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "choice type Basics.Bool cannot be unified be with a choice type with a different name: Basics.Bool")));
        }
    }
    else {
        var aVariable = a.a;
        return $elm$core$Result$mapError_fn(function (error) {
            return "(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + error));
        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableOrError_fn(context.dw, aVariable, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableBasicsBool));
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithBasicsBool = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithBasicsBool_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithFunction_fn = function (context, aFunction, b) {
    if (!b.$) {
        var bVariableName = b.a;
        var aTypeNotVariable = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction);
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableWithType_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable(aTypeNotVariable), context.dw, bVariableName, aTypeNotVariable);
    }
    else {
        var bTypeNotVariable = b.a;
        switch (bTypeNotVariable.$) {
            case 6:
                var bFunction = bTypeNotVariable.a;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (inputABUnified, outputABUnified) {
                    return $elm$core$Result$map_fn(function (substitutionsABMerged) {
                        return {
                            g: substitutionsABMerged,
                            n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: inputABUnified.n, d: outputABUnified.n }))
                        };
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, inputABUnified.g, outputABUnified.g));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(context, aFunction.e, bFunction.e), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(context, aFunction.d, bFunction.d));
            case 0:
                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("function " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction)) + (" cannot be unified with types other than function: " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeUnit)))))));
            case 1:
                var bTypeConstruct = bTypeNotVariable.a;
                var _v2 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithTryToExpandTypeConstruct_fn(context, bTypeConstruct, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction));
                if (!_v2.$) {
                    var result = _v2.a;
                    return result;
                }
                else {
                    return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("function " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction)) + (" cannot be unified with types other than function: " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct(bTypeConstruct))))))));
                }
            case 2:
                var bTypeTuple = bTypeNotVariable.a;
                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("function " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction)) + (" cannot be unified with types other than function: " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple(bTypeTuple))))))));
            case 3:
                var bTypeTriple = bTypeNotVariable.a;
                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("function " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction)) + (" cannot be unified with types other than function: " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple(bTypeTriple))))))));
            case 4:
                var bTypeRecord = bTypeNotVariable.a;
                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("function " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction)) + (" cannot be unified with types other than function: " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord(bTypeRecord))))))));
            default:
                var bTypeRecordExtension = bTypeNotVariable.a;
                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + ("function " + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction(aFunction)) + (" cannot be unified with types other than function: " + $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableToInfoString($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension(bTypeRecordExtension))))))));
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithFunction = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithFunction_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToType_fn = function (declarationsTypes, variableToReplace, replacementType) {
    if (replacementType.$ === 1) {
        var replacementTypeNotVariable = replacementType.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToTypeNotVariableOrError_fn(declarationsTypes, variableToReplace, replacementTypeNotVariable);
    }
    else {
        var replacementVariable = replacementType.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFrom2EquivalentVariables_fn(variableToReplace, replacementVariable);
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToType = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToType_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionCaseTypeInfer_fn = function (context, _v43) {
    var syntaxCasePattern = _v43.a;
    var syntaxCaseResult = _v43.b;
    return $elm$core$Result$andThen_fn(function (patternInferred) {
        return $elm$core$Result$andThen_fn(function (resultInferred) {
            var patternIntroducedVariables = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(patternInferred);
            return $miniBill$elm_fast_dict$FastDict$isEmpty(patternIntroducedVariables) ? $elm$core$Result$Ok({ m: patternInferred, h: resultInferred }) : $elm$core$Result$andThen_fn(function (patternVariablesWithUsesUnification) {
                return $elm$core$Result$map2_fn_unwrapped(function (patternInferredSubstituted, resultInferredSubstituted) {
                    return { m: patternInferredSubstituted, h: resultInferredSubstituted };
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeApplyVariableSubstitutions_fn(context.dw, patternVariablesWithUsesUnification.g, patternInferred), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions_fn(context.dw, patternVariablesWithUsesUnification.g, resultInferred));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences_fn({
                dw: context.dw,
                aN: {
                    b_: $stil4m$elm_syntax$Elm$Syntax$Node$range(syntaxCaseResult).b_,
                    cf: $stil4m$elm_syntax$Elm$Syntax$Node$range(syntaxCasePattern).cf
                }
            }, patternIntroducedVariables, resultInferred));
        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn({
            dw: context.dw,
            aU: context.aU,
            aV: $miniBill$elm_fast_dict$FastDict$union_fn(context.aV, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(patternInferred)),
            di: context.di
        }, syntaxCaseResult));
    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer_fn({ dw: context.dw, di: context.di }, syntaxCasePattern));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionCaseTypeInfer = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionCaseTypeInfer_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionInfixOperationTypeInfer_fn = function (context, infixOperation) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3_fn_unwrapped(function (operatorAsFunctionType, leftInferred, rightInferred) {
        var typeContext = { dw: context.dw, aN: infixOperation.T };
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (unifiedLeftType, unifiedRightType) {
            return $elm$core$Result$andThen_fn(function (leftRightAndUnificationSubstitutions) {
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions_fn(context.dw, leftRightAndUnificationSubstitutions, {
                    aN: infixOperation.T,
                    n: operatorAsFunctionType.Q,
                    l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionInfixOperation({
                        cw: leftInferred,
                        er: {
                            b: operatorAsFunctionType.b,
                            cX: infixOperation.er,
                            n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                e: leftInferred.n,
                                d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: rightInferred.n, d: operatorAsFunctionType.Q }))
                            }))
                        },
                        cV: rightInferred
                    })
                });
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(typeContext, unifiedLeftType.g, unifiedRightType.g));
        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(typeContext, operatorAsFunctionType.U, leftInferred.n), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(typeContext, operatorAsFunctionType.W, rightInferred.n));
    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$operatorFunctionType_fn({
        di: context.di,
        aN: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$infixOperationApproximateOperatorRange({
            df: $stil4m$elm_syntax$Elm$Syntax$Node$range(infixOperation.cw).b_,
            er: infixOperation.er,
            aQ: $stil4m$elm_syntax$Elm$Syntax$Node$range(infixOperation.cV).cf
        })
    }, infixOperation.er), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, infixOperation.cw), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, infixOperation.cV));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionInfixOperationTypeInfer = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionInfixOperationTypeInfer_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionLetInTypeInfer_fn = function (context, syntaxExpressionLetIn) {
    return $elm$core$Result$andThen_fn(function (acrossLetInIncludingContextSoFar) {
        var inferContextAcrossLetIn = { dw: context.dw, aU: acrossLetInIncludingContextSoFar.bJ, aV: acrossLetInIncludingContextSoFar.ax, di: context.di };
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3_fn_unwrapped(function (declaration0Inferred, declaration1UpInferred, resultInferred) {
            var typeContext = { dw: context.dw, aN: syntaxExpressionLetIn.T };
            var letInTypedNodeInferred = {
                aN: syntaxExpressionLetIn.T,
                n: resultInferred.n,
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionLetIn({ c4: declaration0Inferred, c5: declaration1UpInferred, h: resultInferred })
            };
            var inferredUnannotatedDeclarationTypes = acrossLetInIncludingContextSoFar.cj ? $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToFastDictsAndUnify_fn(function (declarationInferred) {
                var _v36 = declarationInferred.L;
                if (!_v36.$) {
                    return $miniBill$elm_fast_dict$FastDict$empty;
                }
                else {
                    var letValueOrFunctionDeclaration = _v36.a;
                    var _v37 = letValueOrFunctionDeclaration.cW;
                    if (!_v37.$) {
                        return $miniBill$elm_fast_dict$FastDict$empty;
                    }
                    else {
                        return $miniBill$elm_fast_dict$FastDict$singleton_fn(letValueOrFunctionDeclaration.a, { aN: declarationInferred.aN, n: letValueOrFunctionDeclaration.n });
                    }
                }
            }, _List_Cons(declaration0Inferred, declaration1UpInferred)) : $miniBill$elm_fast_dict$FastDict$empty;
            return $elm$core$Result$andThen_fn(function (fullSubstitutions) {
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions_fn(context.dw, fullSubstitutions, letInTypedNodeInferred);
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (destructuringUseUnification, declarationUseUnificationSubstitutions) {
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(typeContext, destructuringUseUnification.g, declarationUseUnificationSubstitutions);
            }, acrossLetInIncludingContextSoFar.bZ ? $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences_fn(typeContext, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToFastDictsAndUnify_fn(function (declarationInferred) {
                var _v35 = declarationInferred.L;
                if (!_v35.$) {
                    var letDestructuring = _v35.a;
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(letDestructuring.m);
                }
                else {
                    return $miniBill$elm_fast_dict$FastDict$empty;
                }
            }, _List_Cons(declaration0Inferred, declaration1UpInferred)), letInTypedNodeInferred) : $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$okVariableSubstitutionsNoneUnifiedTypesDictEmpty, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLetDeclaredWithTypeInstancesSubstitutions_fn(typeContext, inferredUnannotatedDeclarationTypes, letInTypedNodeInferred)));
        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationTypeInfer_fn(inferContextAcrossLetIn, syntaxExpressionLetIn.c4), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped(_List_Nil, function (letDeclarationNode, soFar) {
            return $elm$core$Result$map_fn(function (letDeclarationInferred) {
                return _List_Cons(letDeclarationInferred, soFar);
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationTypeInfer_fn(inferContextAcrossLetIn, letDeclarationNode));
        }, syntaxExpressionLetIn.c5), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(inferContextAcrossLetIn, syntaxExpressionLetIn.O));
    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom_fn_unwrapped({ bZ: false, bJ: context.aU, ax: context.aV, cj: false }, function (_v38, soFar) {
        var letDeclarationRange = _v38.a;
        var letDeclaration = _v38.b;
        if (letDeclaration.$ === 1) {
            var patternNode = letDeclaration.a;
            return $elm$core$Result$map_fn(function (patternInferred) {
                return {
                    bZ: true,
                    bJ: soFar.bJ,
                    ax: $miniBill$elm_fast_dict$FastDict$union_fn(soFar.ax, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(patternInferred)),
                    cj: soFar.cj
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer_fn({ dw: context.dw, di: context.di }, patternNode));
        }
        else {
            var letValueOrFunctionDeclaration = letDeclaration.a;
            var _v40 = $stil4m$elm_syntax$Elm$Syntax$Node$value(letValueOrFunctionDeclaration.L).a;
            var name = _v40.b;
            var _v41 = letValueOrFunctionDeclaration.cW;
            if (_v41.$ === 1) {
                return $elm$core$Result$Ok({
                    bZ: soFar.bZ,
                    bJ: $miniBill$elm_fast_dict$FastDict$insert_fn(name, {
                        dh: "",
                        aN: letDeclarationRange,
                        n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: name, f: letDeclarationRange })
                    }, soFar.bJ),
                    ax: soFar.ax,
                    cj: true
                });
            }
            else {
                var _v42 = _v41.a;
                var signature = _v42.b;
                return $elm$core$Result$map_fn(function (type_) {
                    return {
                        bZ: soFar.bZ,
                        bJ: $miniBill$elm_fast_dict$FastDict$insert_fn(name, { dh: "", aN: letDeclarationRange, n: type_ }, soFar.bJ),
                        ax: soFar.ax,
                        cj: soFar.cj
                    };
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToType_fn(context.di.bl, signature.ci));
            }
        }
    }, _List_Cons(syntaxExpressionLetIn.c4, syntaxExpressionLetIn.c5)));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionLetInTypeInfer = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionLetInTypeInfer_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn = function (context, _v7) {
    var fullRange = _v7.a;
    var expression = _v7.b;
    switch (expression.$) {
        case 0:
            return $elm$core$Result$Ok({ aN: fullRange, n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnit, l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionUnit });
        case 7:
            var intValue = expression.a;
            return $elm$core$Result$Ok({
                aN: fullRange,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "number", f: fullRange }),
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionInteger({ c_: 0, l: intValue })
            });
        case 8:
            var intValue = expression.a;
            return $elm$core$Result$Ok({
                aN: fullRange,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "number", f: fullRange }),
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionInteger({ c_: 1, l: intValue })
            });
        case 9:
            var floatValue = expression.a;
            return $elm$core$Result$Ok({
                aN: fullRange,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeBasicsFloat,
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionFloat(floatValue)
            });
        case 11:
            var stringValue = expression.a;
            return $elm$core$Result$Ok({
                aN: fullRange,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeStringString,
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionString(stringValue)
            });
        case 12:
            var charValue = expression.a;
            return $elm$core$Result$Ok({
                aN: fullRange,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeCharChar,
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionChar(charValue)
            });
        case 5:
            var operator = expression.a;
            return $elm$core$Result$map_fn(function (operatorInferred) {
                return {
                    aN: fullRange,
                    n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                        e: operatorInferred.U,
                        d: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: operatorInferred.W, d: operatorInferred.Q }))
                    })),
                    l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionOperatorFunction({ b: operatorInferred.b, cX: operator })
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$operatorFunctionType_fn({ di: context.di, aN: fullRange }, operator));
        case 3:
            var qualificationDotSeparated = expression.a;
            var name = expression.b;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionReferenceTypeInfer_fn(context, {
                T: fullRange,
                a: name,
                K: $elm$core$String$join_fn(".", qualificationDotSeparated)
            });
        case 21:
            var dotFieldName = expression.a;
            var nameStartLocation = { cJ: fullRange.cf.cJ + 1, bu: fullRange.cf.bu };
            var fieldName = $elm$core$String$dropLeft_fn(1, dotFieldName);
            var fieldValueType = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({
                a: fieldName,
                f: { b_: fullRange.b_, cf: nameStartLocation }
            });
            return $elm$core$Result$Ok({
                aN: fullRange,
                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                    e: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension({
                        F: $miniBill$elm_fast_dict$FastDict$singleton_fn(fieldName, fieldValueType),
                        V: {
                            a: "record",
                            f: { b_: nameStartLocation, cf: fullRange.cf }
                        }
                    })),
                    d: fieldValueType
                })),
                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecordAccessFunction(fieldName)
            });
        case 14:
            var inParens = expression.a;
            return $elm$core$Result$map_fn(function (inParensInferred) {
                return {
                    aN: fullRange,
                    n: inParensInferred.n,
                    l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionParenthesized(inParensInferred)
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, inParens));
        case 10:
            var negated = expression.a;
            return $elm$core$Result$andThen_fn(function (negatedInferred) {
                return $elm$core$Result$andThen_fn(function (substitutionsFromUnifyingNegatedWithNumber) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions_fn(context.dw, substitutionsFromUnifyingNegatedWithNumber, {
                        aN: fullRange,
                        n: negatedInferred.n,
                        l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionNegation(negatedInferred)
                    });
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsFromVariableToType_fn(context.dw, { a: "number", f: fullRange }, negatedInferred.n));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, negated));
        case 20:
            var recordNode = expression.a;
            var fieldNameNode = expression.b;
            return $elm$core$Result$andThen_fn(function (accessedRecordInferred) {
                var _v9 = fieldNameNode;
                var fieldRange = _v9.a;
                var fieldName = _v9.b;
                var introducedFieldValueTypeVariable = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: fieldName, f: fieldRange });
                return $elm$core$Result$andThen_fn(function (recordWithAccessedFieldUnified) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions_fn(context.dw, recordWithAccessedFieldUnified.g, {
                        aN: fullRange,
                        n: introducedFieldValueTypeVariable,
                        l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecordAccess({
                            cs: fieldName,
                            cO: $stil4m$elm_syntax$Elm$Syntax$Node$range(fieldNameNode),
                            aY: accessedRecordInferred
                        })
                    });
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeNotVariableUnifyWithType_fn({ dw: context.dw, aN: fullRange }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension({
                    F: $miniBill$elm_fast_dict$FastDict$singleton_fn(fieldName, introducedFieldValueTypeVariable),
                    V: {
                        a: "record",
                        f: {
                            b_: fieldRange.cf,
                            cf: { cJ: fieldRange.cf.cJ - 1, bu: fieldRange.cf.bu }
                        }
                    }
                }), accessedRecordInferred.n));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, recordNode));
        case 2:
            var operator = expression.a;
            var left = expression.c;
            var right = expression.d;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionInfixOperationTypeInfer_fn(context, { T: fullRange, cw: left, er: operator, cV: right });
        case 4:
            var condition = expression.a;
            var onTrue = expression.b;
            var onFalse = expression.c;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3_fn_unwrapped(function (conditionInferred, onTrueInferred, onFalseInferred) {
                var typeContext = { dw: context.dw, aN: fullRange };
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (conditionTypeInferredUnifiedWithBoolSubstitutions, onTrueOnFalseTypesUnified) {
                    return $elm$core$Result$andThen_fn(function (fullUnificationSubstitutions) {
                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions_fn(context.dw, fullUnificationSubstitutions, {
                            aN: fullRange,
                            n: onTrueInferred.n,
                            l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionIfThenElse({ aA: conditionInferred, aB: onFalseInferred, aC: onTrueInferred })
                        });
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(typeContext, conditionTypeInferredUnifiedWithBoolSubstitutions, onTrueOnFalseTypesUnified.g));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithBasicsBool_fn(typeContext, conditionInferred.n), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(typeContext, onTrueInferred.n, onFalseInferred.n));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, condition), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, onTrue), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, onFalse));
        case 13:
            var tupleParts = expression.a;
            if (!tupleParts.b) {
                return $elm$core$Result$Ok({ aN: fullRange, n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnit, l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionUnit });
            }
            else {
                if (!tupleParts.b.b) {
                    var inParens = tupleParts.a;
                    return $elm$core$Result$map_fn(function (inParensInferred) {
                        return {
                            aN: fullRange,
                            n: inParensInferred.n,
                            l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionParenthesized(inParensInferred)
                        };
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, inParens));
                }
                else {
                    if (!tupleParts.b.b.b) {
                        var part0 = tupleParts.a;
                        var _v11 = tupleParts.b;
                        var part1 = _v11.a;
                        return $elm$core$Result$map2_fn_unwrapped(function (part0Inferred, part1Inferred) {
                            return {
                                aN: fullRange,
                                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTuple({ s: part0Inferred.n, t: part1Inferred.n })),
                                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionTuple({ s: part0Inferred, t: part1Inferred })
                            };
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, part0), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, part1));
                    }
                    else {
                        if (!tupleParts.b.b.b.b) {
                            var part0 = tupleParts.a;
                            var _v12 = tupleParts.b;
                            var part1 = _v12.a;
                            var _v13 = _v12.b;
                            var part2 = _v13.a;
                            return $elm$core$Result$map3_fn_unwrapped(function (part0Inferred, part1Inferred, part2Inferred) {
                                return {
                                    aN: fullRange,
                                    n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeTriple({ s: part0Inferred.n, t: part1Inferred.n, ak: part2Inferred.n })),
                                    l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionTriple({ s: part0Inferred, t: part1Inferred, ak: part2Inferred })
                                };
                            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, part0), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, part1), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, part2));
                        }
                        else {
                            var _v14 = tupleParts.b;
                            var _v15 = _v14.b;
                            var _v16 = _v15.b;
                            return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (") " + "too many tuple parts")));
                        }
                    }
                }
            }
        case 19:
            var elements = expression.a;
            if (!elements.b) {
                return $elm$core$Result$Ok({
                    aN: fullRange,
                    n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeListList($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "element", f: fullRange })),
                    l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionListEmpty
                });
            }
            else {
                var head = elements.a;
                var tail = elements.b;
                return $elm$core$Result$andThen_fn(function (headInferred) {
                    var typeContext = { dw: context.dw, aN: fullRange };
                    return $elm$core$Result$andThen_fn(function (tailElementsInferredAndUnifiedElementType) {
                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions_fn(context.dw, tailElementsInferredAndUnifiedElementType.g, {
                            aN: fullRange,
                            n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeListList(tailElementsInferredAndUnifiedElementType.bU),
                            l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionList(_List_Cons(headInferred, tailElementsInferredAndUnifiedElementType.p))
                        });
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped({ p: _List_Nil, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, bU: headInferred.n }, function (elementNode, soFar) {
                        return $elm$core$Result$andThen_fn(function (tailElementInferred) {
                            return $elm$core$Result$andThen_fn(function (unifiedSoFarElementTypeWithElement) {
                                return $elm$core$Result$map_fn(function (substitutionsSoFarWithElement) {
                                    return {
                                        p: _List_Cons(tailElementInferred, soFar.p),
                                        g: substitutionsSoFarWithElement,
                                        bU: unifiedSoFarElementTypeWithElement.n
                                    };
                                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(typeContext, soFar.g, unifiedSoFarElementTypeWithElement.g));
                            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(typeContext, soFar.bU, tailElementInferred.n));
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, elementNode));
                    }, tail));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, head));
            }
        case 1:
            var application = expression.a;
            if (!application.b) {
                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (") " + "empty application is invalid syntax")));
            }
            else {
                if (!application.b.b) {
                    var subExpression = application.a;
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, subExpression);
                }
                else {
                    var called = application.a;
                    var _v19 = application.b;
                    var argument0 = _v19.a;
                    var argument1Up = _v19.b;
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3_fn_unwrapped(function (calledInferred, argument0Inferred, argument1UpInferred) {
                        var introducedResultTypeVariable = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: "callResult", f: fullRange });
                        return $elm$core$Result$andThen_fn(function (callTypeUnified) {
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions_fn(context.dw, callTypeUnified.g, {
                                aN: fullRange,
                                n: introducedResultTypeVariable,
                                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionCall({ dR: argument0Inferred, dS: argument1UpInferred, w: calledInferred })
                            });
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnifyWithFunction_fn({ dw: context.dw, aN: fullRange }, {
                            e: argument0Inferred.n,
                            d: $elm$core$List$foldr_fn(F2(function (argumentInferred, output) {
                                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: argumentInferred.n, d: output }));
                            }), introducedResultTypeVariable, argument1UpInferred)
                        }, calledInferred.n));
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, called), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, argument0), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped(_List_Nil, function (argumentNode, soFar) {
                        return $elm$core$Result$map_fn(function (argumentInferred) {
                            return _List_Cons(argumentInferred, soFar);
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, argumentNode));
                    }, argument1Up));
                }
            }
        case 18:
            var fields = expression.a;
            return $elm$core$Result$map_fn(function (fieldsInferred) {
                return {
                    aN: fullRange,
                    n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecord($elm$core$List$foldl_fn_unwrapped(function (field, soFar) {
                        return $miniBill$elm_fast_dict$FastDict$insert_fn(field.a, field.l.n, soFar);
                    }, $miniBill$elm_fast_dict$FastDict$empty, fieldsInferred))),
                    l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecord(fieldsInferred)
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped(_List_Nil, function (_v20, soFar) {
                var fieldRange = _v20.a;
                var _v21 = _v20.b;
                var _v22 = _v21.a;
                var fieldNameRange = _v22.a;
                var fieldName = _v22.b;
                var fieldValueNode = _v21.b;
                return $elm$core$Result$map_fn(function (fieldValueInferred) {
                    return _List_Cons({ a: fieldName, fJ: fieldNameRange, aN: fieldRange, l: fieldValueInferred }, soFar);
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, fieldValueNode));
            }, fields));
        case 22:
            var _v23 = expression.a;
            var recordVariableRange = _v23.a;
            var recordVariable = _v23.b;
            var fields = expression.b;
            if (!fields.b) {
                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (") " + "record update without fields is invalid syntax")));
            }
            else {
                var _v25 = fields.a;
                var field0Range = _v25.a;
                var _v26 = _v25.b;
                var _v27 = _v26.a;
                var field0NameRange = _v27.a;
                var field0Name = _v27.b;
                var field0ValueNode = _v26.b;
                var field1Up = fields.b;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3_fn_unwrapped(function (recordVariableInferred, field0Inferred, field1UpInferred) {
                    var _v28 = recordVariableInferred.l;
                    if (_v28.$ === 5) {
                        var recordVariableReference = _v28.a;
                        return $elm$core$Result$andThen_fn(function (recordVariableUnifiedWithUpdate) {
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions_fn(context.dw, recordVariableUnifiedWithUpdate.g, {
                                aN: fullRange,
                                n: recordVariableInferred.n,
                                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionRecordUpdate({
                                    d4: field0Inferred,
                                    d5: field1UpInferred,
                                    V: {
                                        aN: recordVariableInferred.aN,
                                        n: recordVariableInferred.n,
                                        l: { b: recordVariableReference.b, a: recordVariableReference.a }
                                    }
                                })
                            });
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn({ dw: context.dw, aN: fullRange }, recordVariableInferred.n, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeRecordExtension({
                            F: $elm$core$List$foldl_fn_unwrapped(function (fieldInferred, soFar) {
                                return $miniBill$elm_fast_dict$FastDict$insert_fn(fieldInferred.a, fieldInferred.l.n, soFar);
                            }, $miniBill$elm_fast_dict$FastDict$singleton_fn(field0Inferred.a, field0Inferred.l.n), field1UpInferred),
                            V: { a: recordVariableReference.a, f: fullRange }
                        }))));
                    }
                    else {
                        return $elm$core$Result$Err("record update variable needs to be a reference to a lowercase value or function");
                    }
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionReferenceTypeInfer_fn(context, { T: recordVariableRange, a: recordVariable, K: "" }), $elm$core$Result$map_fn(function (valueInferred) {
                    return { a: field0Name, fJ: field0NameRange, aN: field0Range, l: valueInferred };
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, field0ValueNode)), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped(_List_Nil, function (_v29, soFar) {
                    var fieldRange = _v29.a;
                    var _v30 = _v29.b;
                    var _v31 = _v30.a;
                    var nameRange = _v31.a;
                    var name = _v31.b;
                    var valueNode = _v30.b;
                    return $elm$core$Result$map_fn(function (fieldValueInferred) {
                        return _List_Cons({ a: name, fJ: nameRange, aN: fieldRange, l: fieldValueInferred }, soFar);
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, valueNode));
                }, field1Up));
            }
        case 17:
            var lambda = expression.a;
            var _v32 = lambda.dQ;
            if (!_v32.b) {
                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (") " + "lambda without parameter patterns is invalid syntax")));
            }
            else {
                var parameter0 = _v32.a;
                var parameter1Up = _v32.b;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (parameter0Inferred, parameter1UpInferred) {
                    return $elm$core$Result$andThen_fn(function (resultInferred) {
                        return $elm$core$Result$andThen_fn(function (parameterPatternVariablesAndUsesUnification) {
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions_fn(context.dw, parameterPatternVariablesAndUsesUnification.g, {
                                aN: fullRange,
                                n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({
                                    e: parameter0Inferred.n,
                                    d: $elm$core$List$foldr_fn(F2(function (argumentTypedNode, output) {
                                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: argumentTypedNode.n, d: output }));
                                    }), resultInferred.n, parameter1UpInferred)
                                })),
                                l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionLambda({ dm: parameter0Inferred, dC: parameter1UpInferred, h: resultInferred })
                            });
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences_fn({ dw: context.dw, aN: fullRange }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToFastDictsAndUnify_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables, _List_Cons(parameter0Inferred, parameter1UpInferred)), resultInferred));
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn({
                        dw: context.dw,
                        aU: context.aU,
                        aV: $miniBill$elm_fast_dict$FastDict$union_fn(context.aV, $elm$core$List$foldl_fn_unwrapped(function (parameter, soFar) {
                            return $miniBill$elm_fast_dict$FastDict$union_fn(soFar, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(parameter));
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables(parameter0Inferred), parameter1UpInferred)),
                        di: context.di
                    }, lambda.O));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer_fn({ dw: context.dw, di: context.di }, parameter0), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped(_List_Nil, function (pattern, soFar) {
                    return $elm$core$Result$map_fn(function (patternInferred) {
                        return _List_Cons(patternInferred, soFar);
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer_fn({ dw: context.dw, di: context.di }, pattern));
                }, parameter1Up));
            }
        case 16:
            var caseOf = expression.a;
            var _v33 = caseOf.aL;
            if (!_v33.b) {
                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (") " + "case-of without case branches is invalid syntax")));
            }
            else {
                var case0 = _v33.a;
                var case1Up = _v33.b;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3_fn_unwrapped(function (matchedInferred, case0Inferred, case1UpInferred) {
                    var typeContext = { dw: context.dw, aN: fullRange };
                    return $elm$core$Result$andThen_fn(function (unifiedTypes) {
                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions_fn(context.dw, unifiedTypes.g, {
                            aN: fullRange,
                            n: case0Inferred.h.n,
                            l: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ExpressionCaseOf({ ar: case0Inferred, as: case1UpInferred, at: matchedInferred })
                        });
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFromResult_fn($elm$core$Result$map_fn(function (matchedExpressionCase0PatternUnifiedType) {
                        return { dB: matchedExpressionCase0PatternUnifiedType.n, Q: case0Inferred.h.n, g: matchedExpressionCase0PatternUnifiedType.g };
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(typeContext, matchedInferred.n, case0Inferred.m.n)), F2(function (caseInferred, soFar) {
                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (matchedTypeUnifiedWithCasePattern, resultTypeUnifiedWithCaseResult) {
                            return $elm$core$Result$map_fn(function (substitutionsWithCase) {
                                return { dB: matchedTypeUnifiedWithCasePattern.n, Q: resultTypeUnifiedWithCaseResult.n, g: substitutionsWithCase };
                            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3_fn(typeContext, soFar.g, matchedTypeUnifiedWithCasePattern.g, resultTypeUnifiedWithCaseResult.g));
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(typeContext, soFar.dB, caseInferred.m.n), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(typeContext, soFar.Q, caseInferred.h.n));
                    }), case1UpInferred));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, caseOf.O), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionCaseTypeInfer_fn(context, case0), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped(_List_Nil, function (case_, soFar) {
                    return $elm$core$Result$map_fn(function (caseInferred) {
                        return _List_Cons(caseInferred, soFar);
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionCaseTypeInfer_fn(context, case_));
                }, case1Up));
            }
        case 15:
            var letIn = expression.a;
            var _v34 = letIn.M;
            if (!_v34.b) {
                return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (") " + "let-in without declarations is invalid syntax")));
            }
            else {
                var letDeclaration0Node = _v34.a;
                var letDeclaration1Up = _v34.b;
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionLetInTypeInfer_fn(context, { c4: letDeclaration0Node, c5: letDeclaration1Up, O: letIn.O, T: fullRange });
            }
        case 6:
            return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (") " + "Elm.Syntax.Expression.Operator is not valid syntax")));
        default:
            return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(fullRange) + (") " + "glsl shader expressions not supported")));
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationTypeInfer_fn = function (context, _v5) {
    var letDeclarationRange = _v5.a;
    var letDeclaration = _v5.b;
    if (letDeclaration.$ === 1) {
        var letDestructuringPattern = letDeclaration.a;
        var letDestructuringExpression = letDeclaration.b;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (patternInferred, expressionInferred) {
            return $elm$core$Result$andThen_fn(function (patternExpressionUnified) {
                return $elm$core$Result$map2_fn_unwrapped(function (patternWithUnificationSubstitutionsApplied, expressionWithUnificationSubstitutionsApplied) {
                    return {
                        L: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetDestructuring({ O: expressionWithUnificationSubstitutionsApplied, m: patternWithUnificationSubstitutionsApplied }),
                        aN: letDeclarationRange
                    };
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeApplyVariableSubstitutions_fn(context.dw, patternExpressionUnified.g, patternInferred), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions_fn(context.dw, patternExpressionUnified.g, expressionInferred));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn({ dw: context.dw, aN: letDeclarationRange }, patternInferred.n, expressionInferred.n));
        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypeInfer_fn({ dw: context.dw, di: context.di }, letDestructuringPattern), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn(context, letDestructuringExpression));
    }
    else {
        var letValueOrFunction = letDeclaration.a;
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letFunctionOrValueDeclarationTypeInfer_fn(context, $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(letDeclarationRange, letValueOrFunction));
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationTypeInfer = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letDeclarationTypeInfer_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letFunctionOrValueDeclarationTypeInfer_fn = function (context, _v0) {
    var letDeclarationRange = _v0.a;
    var letValueOrFunction = _v0.b;
    var implementation = $stil4m$elm_syntax$Elm$Syntax$Node$value(letValueOrFunction.L);
    return $elm$core$Result$andThen_fn(function (parametersInferred) {
        var typeContext = { dw: context.dw, aN: letDeclarationRange };
        var name = $stil4m$elm_syntax$Elm$Syntax$Node$value(implementation.a);
        var _v1 = letValueOrFunction.cW;
        if (_v1.$ === 1) {
            return $elm$core$Result$andThen_fn(function (resultInferred) {
                var _v2 = implementation.c;
                if (!_v2.b) {
                    return $elm$core$Result$Ok({
                        L: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetValueOrFunctionDeclaration({
                            a: name,
                            fJ: $stil4m$elm_syntax$Elm$Syntax$Node$range(implementation.a),
                            o: _List_Nil,
                            h: resultInferred,
                            cW: $elm$core$Maybe$Nothing,
                            n: resultInferred.n
                        }),
                        aN: letDeclarationRange
                    });
                }
                else {
                    return $elm$core$Result$andThen_fn(function (parameterVariablesWithUsesUnification) {
                        return $elm$core$Result$map2_fn_unwrapped(function (parametersSubstituted, resultSubstituted) {
                            return {
                                L: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetValueOrFunctionDeclaration({
                                    a: name,
                                    fJ: $stil4m$elm_syntax$Elm$Syntax$Node$range(implementation.a),
                                    o: parametersSubstituted,
                                    h: resultSubstituted,
                                    cW: $elm$core$Maybe$Nothing,
                                    n: $elm$core$List$foldr_fn(F2(function (parameter, outputTypeSoFar) {
                                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: parameter.n, d: outputTypeSoFar }));
                                    }), resultSubstituted.n, parametersSubstituted)
                                }),
                                aN: letDeclarationRange
                            };
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped(_List_Nil, function (parameterInferred, soFar) {
                            return $elm$core$Result$map_fn(function (parameterSubstituted) {
                                return _List_Cons(parameterSubstituted, soFar);
                            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeApplyVariableSubstitutions_fn(context.dw, parameterVariablesWithUsesUnification.g, parameterInferred));
                        }, parametersInferred.p), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions_fn(context.dw, parameterVariablesWithUsesUnification.g, resultInferred));
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences_fn(typeContext, parametersInferred.ax, resultInferred));
                }
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn({
                dw: context.dw,
                aU: context.aU,
                aV: $miniBill$elm_fast_dict$FastDict$insert_fn(name, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({
                    a: name,
                    f: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxValueOrFunctionDeclarationRange(letValueOrFunction)
                }), $miniBill$elm_fast_dict$FastDict$union_fn(parametersInferred.ax, context.aV)),
                di: context.di
            }, implementation.O));
        }
        else {
            var _v3 = _v1.a;
            var signatureRange = _v3.a;
            var letValueOrFunctionSignature = _v3.b;
            return $elm$core$Result$andThen_fn(function (annotationAsType) {
                return $elm$core$Result$andThen_fn(function (resultInferred) {
                    return $elm$core$Result$andThen_fn(function (typeUnifiedWithAnnotation) {
                        return $elm$core$Result$andThen_fn(function (fullSubstitutions) {
                            return $elm$core$Result$map_fn(function (letValueOrFunctionSubstituted) {
                                return {
                                    L: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetValueOrFunctionDeclaration(letValueOrFunctionSubstituted),
                                    aN: letDeclarationRange
                                };
                            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$annotatedLetValueOrFunctionDeclarationApplyVariableSubstitutions_fn(typeContext, fullSubstitutions, {
                                a: name,
                                fJ: $stil4m$elm_syntax$Elm$Syntax$Node$range(implementation.a),
                                o: parametersInferred.p,
                                h: resultInferred,
                                cW: $elm$core$Maybe$Just({
                                    dN: $stil4m$elm_syntax$Elm$Syntax$Node$value(letValueOrFunctionSignature.ci),
                                    dO: $stil4m$elm_syntax$Elm$Syntax$Node$range(letValueOrFunctionSignature.ci),
                                    fJ: $stil4m$elm_syntax$Elm$Syntax$Node$range(letValueOrFunctionSignature.a),
                                    aN: signatureRange
                                }),
                                n: annotationAsType
                            }));
                        }, function () {
                            var _v4 = implementation.c;
                            if (!_v4.b) {
                                return $elm$core$Result$Ok(typeUnifiedWithAnnotation.g);
                            }
                            else {
                                return $elm$core$Result$andThen_fn(function (parameterVariablesWithUsesUnification) {
                                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(typeContext, parameterVariablesWithUsesUnification.g, typeUnifiedWithAnnotation.g);
                                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences_fn(typeContext, parametersInferred.ax, resultInferred));
                            }
                        }());
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(typeContext, annotationAsType, $elm$core$List$foldr_fn(F2(function (parameterTypedNode, outputSoFar) {
                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: parameterTypedNode.n, d: outputSoFar }));
                    }), resultInferred.n, parametersInferred.p)));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn({
                    dw: context.dw,
                    aU: context.aU,
                    aV: $miniBill$elm_fast_dict$FastDict$insert_fn(name, annotationAsType, $miniBill$elm_fast_dict$FastDict$union_fn(context.aV, parametersInferred.ax)),
                    di: context.di
                }, implementation.O));
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToType_fn(context.di.bl, letValueOrFunctionSignature.ci));
        }
    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$parameterPatternsTypeInfer_fn({ dw: context.dw, di: context.di }, implementation.c));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letFunctionOrValueDeclarationTypeInfer = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$letFunctionOrValueDeclarationTypeInfer_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$moduleLevelValueOrFunctionDeclarationTypeInfer_fn = function (context, acrossValueAndFunctionDeclarationsToInfer, valueOrFunctionDeclarationToInfer) {
    var implementation = $stil4m$elm_syntax$Elm$Syntax$Node$value(valueOrFunctionDeclarationToInfer.L);
    return $elm$core$Result$andThen_fn(function (parametersInferred) {
        var valueOrFunctionDeclarationToInferRange = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxValueOrFunctionDeclarationRange(valueOrFunctionDeclarationToInfer);
        var typeContext = { dw: context.dw, aN: valueOrFunctionDeclarationToInferRange };
        var name = $stil4m$elm_syntax$Elm$Syntax$Node$value(implementation.a);
        var maybeDocumentationAndRange = function () {
            var _v4 = valueOrFunctionDeclarationToInfer.cM;
            if (_v4.$ === 1) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var _v5 = _v4.a;
                var documentationRange = _v5.a;
                var documentationContent = _v5.b;
                return $elm$core$Maybe$Just({ fb: documentationContent, aN: documentationRange });
            }
        }();
        var _v0 = valueOrFunctionDeclarationToInfer.cW;
        if (_v0.$ === 1) {
            return $elm$core$Result$andThen_fn(function (resultInferred) {
                var _v1 = parametersInferred.p;
                if (!_v1.b) {
                    return $elm$core$Result$Ok({
                        cM: maybeDocumentationAndRange,
                        a: name,
                        fJ: $stil4m$elm_syntax$Elm$Syntax$Node$range(implementation.a),
                        o: parametersInferred.p,
                        h: resultInferred,
                        cW: $elm$core$Maybe$Nothing,
                        n: $elm$core$List$foldr_fn(F2(function (parameterTypedNode, typeSoFar) {
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: parameterTypedNode.n, d: typeSoFar }));
                        }), resultInferred.n, parametersInferred.p)
                    });
                }
                else {
                    return $elm$core$Result$andThen_fn(function (parameterPatternVariablesAndUsesUnification) {
                        return $elm$core$Result$map2_fn_unwrapped(function (resultSubstituted, parametersSubstituted) {
                            return {
                                cM: maybeDocumentationAndRange,
                                a: name,
                                fJ: $stil4m$elm_syntax$Elm$Syntax$Node$range(implementation.a),
                                o: parametersSubstituted,
                                h: resultSubstituted,
                                cW: $elm$core$Maybe$Nothing,
                                n: $elm$core$List$foldr_fn(F2(function (parameterTypedNode, typeSoFar) {
                                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: parameterTypedNode.n, d: typeSoFar }));
                                }), resultSubstituted.n, parametersSubstituted)
                            };
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeApplyVariableSubstitutions_fn(context.dw, parameterPatternVariablesAndUsesUnification.g, resultInferred), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped(_List_Nil, function (parameterInferred, parametersSubstitutedSoFar) {
                            return $elm$core$Result$map_fn(function (parameterSubstituted) {
                                return _List_Cons(parameterSubstituted, parametersSubstitutedSoFar);
                            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeApplyVariableSubstitutions_fn(context.dw, parameterPatternVariablesAndUsesUnification.g, parameterInferred));
                        }, parametersInferred.p));
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences_fn(typeContext, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToFastDictsAndUnify_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables, parametersInferred.p), resultInferred));
                }
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn({
                dw: context.dw,
                aU: acrossValueAndFunctionDeclarationsToInfer.bT,
                aV: $miniBill$elm_fast_dict$FastDict$insert_fn(name, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: name, f: valueOrFunctionDeclarationToInferRange }), parametersInferred.ax),
                di: context.di
            }, implementation.O));
        }
        else {
            var _v2 = _v0.a;
            var signatureRange = _v2.a;
            var signature = _v2.b;
            var _v3 = $miniBill$elm_fast_dict$FastDict$get_fn(name, acrossValueAndFunctionDeclarationsToInfer.bY);
            if (_v3.$ === 1) {
                return $elm$core$Result$Err("bug in elm-syntax-type-infer: failed to retrieve annotation type for " + name);
            }
            else {
                var annotationType = _v3.a;
                return $elm$core$Result$andThen_fn(function (resultInferred) {
                    var inferredFullType = $elm$core$List$foldr_fn(F2(function (parameterTypedNode, typeSoFar) {
                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeFunction({ e: parameterTypedNode.n, d: typeSoFar }));
                    }), resultInferred.n, parametersInferred.p);
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen2_fn_unwrapped(function (inferredDeclarationTypeUnifiedWithAnnotation, parameterVariablesWithUsesUnification) {
                        return $elm$core$Result$andThen_fn(function (fullSubstitutions) {
                            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$annotatedValueOrFunctionDeclarationApplyVariableSubstitutions_fn(typeContext, fullSubstitutions, {
                                cM: maybeDocumentationAndRange,
                                a: name,
                                fJ: $stil4m$elm_syntax$Elm$Syntax$Node$range(implementation.a),
                                o: parametersInferred.p,
                                h: resultInferred,
                                cW: $elm$core$Maybe$Just({
                                    dN: $stil4m$elm_syntax$Elm$Syntax$Node$value(signature.ci),
                                    dO: $stil4m$elm_syntax$Elm$Syntax$Node$range(signature.ci),
                                    fJ: $stil4m$elm_syntax$Elm$Syntax$Node$range(signature.a),
                                    aN: signatureRange
                                }),
                                n: annotationType
                            });
                        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(typeContext, parameterVariablesWithUsesUnification.g, inferredDeclarationTypeUnifiedWithAnnotation.g));
                    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(typeContext, annotationType, inferredFullType), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUnifyUsesOfLocalReferences_fn(typeContext, parametersInferred.ax, resultInferred));
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypeInfer_fn({
                    dw: context.dw,
                    aU: acrossValueAndFunctionDeclarationsToInfer.bT,
                    aV: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listMapToFastDictsAndUnify_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeIntroducedVariables, parametersInferred.p),
                    di: context.di
                }, implementation.O));
            }
        }
    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$parameterPatternsTypeInfer_fn(context, implementation.c));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$moduleLevelValueOrFunctionDeclarationTypeInfer = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$moduleLevelValueOrFunctionDeclarationTypeInfer_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsForInstanceUnifyingModuleDeclaredTypesWithUsesInExpression_fn = function (context, introducedDeclarations, expressionTypedNode) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$fastDictFoldlWhileOkFrom_fn_unwrapped($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, function (declarationName, usesInLambdaResult, soFar) {
        var _v0 = $miniBill$elm_fast_dict$FastDict$get_fn(declarationName, introducedDeclarations);
        if (_v0.$ === 1) {
            return $elm$core$Result$Err("(" + ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$rangeToInfoString(context.aN) + (") " + "bug in elm-syntax-type-infer: collected uses of variable that wasn't asked for")));
        }
        else {
            var inferredDeclarationType = _v0.a;
            return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ropeFoldlWhileOkFrom_fn_unwrapped(soFar, function (useRange, useType, soFarWithUses) {
                var newDeclarationTypeInstanceForUse = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(function (inferredDeclarationTypeVariable) {
                    return { a: inferredDeclarationTypeVariable.a, f: useRange };
                }, inferredDeclarationType.n);
                return $elm$core$Result$andThen_fn(function (useUnifiedWithNewLetTypeInstance) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typesAreEquallyStrict_fn($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(useUnifiedWithNewLetTypeInstance.n), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeContainedVariables(useType)) ? $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$equivalentVariableSetMergeIntoVariableSubstitutionsWithVariableToType_fn(soFarWithUses.E, soFarWithUses.D, useUnifiedWithNewLetTypeInstance.g.D) : $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(context, soFarWithUses, useUnifiedWithNewLetTypeInstance.g);
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(context, useType, newDeclarationTypeInstanceForUse));
            }, usesInLambdaResult);
        }
    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(introducedDeclarations, expressionTypedNode));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsForInstanceUnifyingModuleDeclaredTypesWithUsesInExpression = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsForInstanceUnifyingModuleDeclaredTypesWithUsesInExpression_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$unannotatedInferredDeclarationTypesEmptyAndAnnotatedEmpty = { bY: $miniBill$elm_fast_dict$FastDict$empty, bT: $miniBill$elm_fast_dict$FastDict$empty };
var $elm$core$Dict$member_fn = function (key, dict) {
    var _v0 = $elm$core$Dict$get_fn(key, dict);
    if (!_v0.$) {
        return true;
    }
    else {
        return false;
    }
}, $elm$core$Dict$member = F2($elm$core$Dict$member_fn);
var $elm$core$Set$member_fn = function (key, _v0) {
    var dict = _v0;
    return $elm$core$Dict$member_fn(key, dict);
}, $elm$core$Set$member = F2($elm$core$Set$member_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueOrFunctionDeclarationRange = function (valueOrFunctionDeclarationInfo) {
    return {
        b_: valueOrFunctionDeclarationInfo.h.aN.b_,
        cf: function () {
            var _v0 = valueOrFunctionDeclarationInfo.cM;
            if (!_v0.$) {
                var documentation = _v0.a;
                return documentation.aN.cf;
            }
            else {
                var _v1 = valueOrFunctionDeclarationInfo.cW;
                if (!_v1.$) {
                    var signature = _v1.a;
                    return signature.aN.cf;
                }
                else {
                    return valueOrFunctionDeclarationInfo.fJ.cf;
                }
            }
        }()
    };
};
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarationsGetPartiallyInferred = function (valueAndFunctionDeclarationsSoFar) {
    return $elm$core$List$foldl_fn_unwrapped(function (valueOrFunctionDeclaration, moduleLevelPartiallyInferredDeclarationsSoFar) {
        var _v0 = valueOrFunctionDeclaration.cW;
        if (!_v0.$) {
            return moduleLevelPartiallyInferredDeclarationsSoFar;
        }
        else {
            return $miniBill$elm_fast_dict$FastDict$insert_fn(valueOrFunctionDeclaration.a, {
                aN: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueOrFunctionDeclarationRange(valueOrFunctionDeclaration),
                n: valueOrFunctionDeclaration.n
            }, moduleLevelPartiallyInferredDeclarationsSoFar);
        }
    }, $miniBill$elm_fast_dict$FastDict$empty, valueAndFunctionDeclarationsSoFar);
};
var $elm$core$Set$Set_elm_builtin = $elm$core$Basics$identity;
var $elm$core$Set$insert_fn = function (key, _v0) {
    var dict = _v0;
    return $elm$core$Dict$insert_fn(key, 0, dict);
}, $elm$core$Set$insert = F2($elm$core$Set$insert_fn);
var $elm$core$Set$empty = $elm$core$Dict$empty;
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneDeclarationsListEmptyUnchangedDeclarationsSetEmpty = { M: _List_Nil, g: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, cF: $elm$core$Set$empty };
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueOrFunctionDeclarationSubstituteVariableByType_fn = function (declarationTypes, replacement, declarationValueOrFunctionSoFar) {
    var typeContext = {
        dw: declarationTypes,
        aN: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueOrFunctionDeclarationRange(declarationValueOrFunctionSoFar)
    };
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$resultAndThen3_fn_unwrapped(function (typeSubstituted, parametersSubstituted, resultSubstituted) {
        return (typeSubstituted.i && (parametersSubstituted.u && resultSubstituted.i)) ? $elm$core$Result$Ok({ L: declarationValueOrFunctionSoFar, g: parametersSubstituted.g, i: true }) : $elm$core$Result$map_fn(function (fullSubstitutions) {
            return {
                L: { cM: declarationValueOrFunctionSoFar.cM, a: declarationValueOrFunctionSoFar.a, fJ: declarationValueOrFunctionSoFar.fJ, o: parametersSubstituted.p, h: resultSubstituted.k, cW: declarationValueOrFunctionSoFar.cW, n: typeSubstituted.n },
                g: fullSubstitutions,
                i: false
            };
        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(typeContext, parametersSubstituted.g, resultSubstituted.g));
    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeSubstituteVariableByType_fn(typeContext, replacement, declarationValueOrFunctionSoFar.n), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneNodesEmptyAllUnchangedTrue, function (patternTypedNode, soFar) {
        return $elm$core$Result$andThen_fn(function (patternSubstituted) {
            return patternSubstituted.i ? $elm$core$Result$Ok({
                u: soFar.u,
                p: _List_Cons(patternTypedNode, soFar.p),
                g: soFar.g
            }) : $elm$core$Result$map_fn(function (fullSubstitutions) {
                return {
                    u: false,
                    p: _List_Cons(patternSubstituted.k, soFar.p),
                    g: fullSubstitutions
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(typeContext, patternSubstituted.g, soFar.g));
        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$patternTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, patternTypedNode));
    }, declarationValueOrFunctionSoFar.o), $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeSubstituteVariableByType_fn(declarationTypes, replacement, declarationValueOrFunctionSoFar.h));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueOrFunctionDeclarationSubstituteVariableByType = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueOrFunctionDeclarationSubstituteVariableByType_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarationsSubstituteVariableByType_fn = function (declarationTypes, substitutionToApply, valueAndFunctionDeclarationsToApplySubstitutionTo) {
    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldrWhileOkFrom_fn_unwrapped($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsNoneDeclarationsListEmptyUnchangedDeclarationsSetEmpty, function (declarationToSubstituteIn, soFar) {
        return $elm$core$Result$mapError_fn(function (substitutionError) {
            return "I inferred various parts of the value/function declaration " + (declarationToSubstituteIn.a + (" but there was a problem after substituting pieces of knowledge: " + substitutionError));
        }, $elm$core$Result$andThen_fn(function (declarationSubstituted) {
            return declarationSubstituted.i ? $elm$core$Result$Ok({
                M: _List_Cons(declarationToSubstituteIn, soFar.M),
                g: soFar.g,
                cF: $elm$core$Set$insert_fn(declarationToSubstituteIn.a, soFar.cF)
            }) : $elm$core$Result$map_fn(function (fullSubstitutions) {
                return {
                    M: _List_Cons(declarationSubstituted.L, soFar.M),
                    g: fullSubstitutions,
                    cF: soFar.cF
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn({ dw: declarationTypes, aN: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$everywhereRange }, soFar.g, declarationSubstituted.g));
        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueOrFunctionDeclarationSubstituteVariableByType_fn(declarationTypes, substitutionToApply, declarationToSubstituteIn)));
    }, valueAndFunctionDeclarationsToApplySubstitutionTo);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarationsSubstituteVariableByType = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarationsSubstituteVariableByType_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarationsUsesOfLocalReferences_fn = function (localReferencesToCollect, inferredValueAndFunctionDeclarations) {
    return $elm$core$List$foldl_fn_unwrapped(function (valueOrFunctionDeclaration, usesSoFar) {
        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$collectedLocalReferenceUsesMerge_fn(usesSoFar, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$expressionTypedNodeUsesOfLocalReferences_fn(localReferencesToCollect, valueOrFunctionDeclaration.h));
    }, $miniBill$elm_fast_dict$FastDict$empty, inferredValueAndFunctionDeclarations);
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarationsUsesOfLocalReferences = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarationsUsesOfLocalReferences_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarationsApplyVariableSubstitutions_fn = function (declarationTypes, substitutionsToApply, valueAndFunctionDeclarationsSoFar) {
    valueAndFunctionDeclarationsApplyVariableSubstitutions: while (true) {
        if ($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsIsNone(substitutionsToApply)) {
            return $elm$core$Result$Ok(valueAndFunctionDeclarationsSoFar);
        }
        else {
            var everywhereTypeContext = { dw: declarationTypes, aN: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$everywhereRange };
            var _v0 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$createBatchOfSubstitutionsToApply_fn(everywhereTypeContext, substitutionsToApply);
            if (_v0.$ === 1) {
                var error = _v0.a;
                return $elm$core$Result$Err(error);
            }
            else {
                var batchOfSubstitutionsToApply = _v0.a;
                var _v1 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarationsSubstituteVariableByType_fn(declarationTypes, batchOfSubstitutionsToApply.a6, valueAndFunctionDeclarationsSoFar);
                if (_v1.$ === 1) {
                    var error = _v1.a;
                    return $elm$core$Result$Err(error);
                }
                else {
                    var valueAndFunctionDeclarationsSubstituted = _v1.a;
                    var moduleLevelPartiallyInferredDeclarations = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarationsGetPartiallyInferred(valueAndFunctionDeclarationsSoFar);
                    var allPartiallyInferredDeclarationsAndUsesAfterSubstitution = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarationsUsesOfLocalReferences_fn(moduleLevelPartiallyInferredDeclarations, valueAndFunctionDeclarationsSubstituted.M);
                    var substitutionsOfPartiallyInferredDeclarationUses = $elm$core$List$foldl_fn_unwrapped(function (inferredDeclarationAfterSubstituting, soFar) {
                        var _v4 = $miniBill$elm_fast_dict$FastDict$get_fn(inferredDeclarationAfterSubstituting.a, allPartiallyInferredDeclarationsAndUsesAfterSubstitution);
                        if (_v4.$ === 1) {
                            return soFar;
                        }
                        else {
                            var uses = _v4.a;
                            return $elm$core$Set$member_fn(inferredDeclarationAfterSubstituting.a, valueAndFunctionDeclarationsSubstituted.cF) ? _List_Cons({ ev: inferredDeclarationAfterSubstituting.n, eV: uses }, soFar) : soFar;
                        }
                    }, _List_Nil, valueAndFunctionDeclarationsSubstituted.M);
                    var updatePartiallyInferredSubstitutionsOrError = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom_fn_unwrapped($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, function (substitutionOfPartiallyInferredDeclaration, substitutionsSoFar) {
                        return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$ropeFoldlWhileOkFrom_fn_unwrapped(substitutionsSoFar, function (useRange, useType, unificationSubstitutionsWithUsesSoFar) {
                            var partialTypeNewInstance = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeMapVariables_fn(function (declarationTypeVariable) {
                                return { a: declarationTypeVariable.a, f: useRange };
                            }, substitutionOfPartiallyInferredDeclaration.ev);
                            return $elm$core$Result$andThen_fn(function (unified) {
                                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn(everywhereTypeContext, unificationSubstitutionsWithUsesSoFar, unified.g);
                            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$typeUnify_fn(everywhereTypeContext, partialTypeNewInstance, useType));
                        }, substitutionOfPartiallyInferredDeclaration.eV);
                    }, substitutionsOfPartiallyInferredDeclarationUses);
                    if (updatePartiallyInferredSubstitutionsOrError.$ === 1) {
                        var error = updatePartiallyInferredSubstitutionsOrError.a;
                        return $elm$core$Result$Err(error);
                    }
                    else {
                        var updatePartiallyInferredSubstitutions = updatePartiallyInferredSubstitutionsOrError.a;
                        var _v3 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge3_fn(everywhereTypeContext, valueAndFunctionDeclarationsSubstituted.g, updatePartiallyInferredSubstitutions, { D: batchOfSubstitutionsToApply.b7, E: $lue_bird$elm_syntax_type_infer$DictByTypeVariableFromContext$empty });
                        if (_v3.$ === 1) {
                            var error = _v3.a;
                            return $elm$core$Result$Err(error);
                        }
                        else {
                            var substitutionsAfterSubstitution = _v3.a;
                            var $temp$declarationTypes = declarationTypes, $temp$substitutionsToApply = substitutionsAfterSubstitution, $temp$valueAndFunctionDeclarationsSoFar = valueAndFunctionDeclarationsSubstituted.M;
                            declarationTypes = $temp$declarationTypes;
                            substitutionsToApply = $temp$substitutionsToApply;
                            valueAndFunctionDeclarationsSoFar = $temp$valueAndFunctionDeclarationsSoFar;
                            continue valueAndFunctionDeclarationsApplyVariableSubstitutions;
                        }
                    }
                }
            }
        }
    }
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarationsApplyVariableSubstitutions = F3($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarationsApplyVariableSubstitutions_fn);
var $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarations_fn = function (context, syntaxValueAndFunctionDeclarations) {
    var moduleOriginLookup = {
        b1: context.di.b1,
        b3: context.di.b3,
        bO: $miniBill$elm_fast_dict$FastDict$update_fn("", function (existingExposedReferences) {
            return $elm$core$Maybe$Just($miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (_v5, info, soFar) {
                return $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (variantName, _v6, soFarWithVariantNames) {
                    return $miniBill$elm_fast_dict$FastDict$insert_fn(variantName, context.bN, soFarWithVariantNames);
                }), soFar, info.Y);
            }), $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (typeAliasName, info, soFar) {
                var _v7 = info.$7;
                if (_v7.$ === 1) {
                    return soFar;
                }
                else {
                    return $miniBill$elm_fast_dict$FastDict$insert_fn(typeAliasName, context.bN, soFar);
                }
            }), $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (signatureName, _v8, soFar) {
                return $miniBill$elm_fast_dict$FastDict$insert_fn(signatureName, context.bN, soFar);
            }), $elm$core$List$foldl_fn_unwrapped(function (valueOrFunctionDeclaration, soFar) {
                return $miniBill$elm_fast_dict$FastDict$insert_fn($stil4m$elm_syntax$Elm$Syntax$Node$value($stil4m$elm_syntax$Elm$Syntax$Node$value(valueOrFunctionDeclaration.L).a), context.bN, soFar);
            }, $elm$core$Maybe$withDefault_fn($miniBill$elm_fast_dict$FastDict$empty, existingExposedReferences), syntaxValueAndFunctionDeclarations), context.es.az), context.es.B), context.es.aw));
        }, context.di.bO),
        bl: $miniBill$elm_fast_dict$FastDict$update_fn("", function (existingExposedTypeConstructs) {
            return $elm$core$Maybe$Just($miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (choiceTypeName, _v9, soFar) {
                return $miniBill$elm_fast_dict$FastDict$insert_fn(choiceTypeName, context.bN, soFar);
            }), $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (typeAliasName, _v10, soFar) {
                return $miniBill$elm_fast_dict$FastDict$insert_fn(typeAliasName, context.bN, soFar);
            }), $elm$core$Maybe$withDefault_fn($miniBill$elm_fast_dict$FastDict$empty, existingExposedTypeConstructs), context.es.B), context.es.aw));
        }, context.di.bl)
    };
    var acrossValueAndFunctionDeclarationsToInfer = $elm$core$List$foldl_fn_unwrapped(function (syntaxValueOrFunctionDeclaration, soFar) {
        var name = $stil4m$elm_syntax$Elm$Syntax$Node$value($stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxValueOrFunctionDeclaration.L).a);
        var _v2 = syntaxValueOrFunctionDeclaration.cW;
        if (_v2.$ === 1) {
            var declarationRange = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxValueOrFunctionDeclarationRange(syntaxValueOrFunctionDeclaration);
            return {
                bY: soFar.bY,
                bT: $miniBill$elm_fast_dict$FastDict$insert_fn(name, {
                    dh: context.bN,
                    aN: declarationRange,
                    n: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeVariable({ a: name, f: declarationRange })
                }, soFar.bT)
            };
        }
        else {
            var _v3 = _v2.a;
            var signature = _v3.b;
            var _v4 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$syntaxToType_fn(moduleOriginLookup.bl, signature.ci);
            if (_v4.$ === 1) {
                return soFar;
            }
            else {
                var type_ = _v4.a;
                return {
                    bY: $miniBill$elm_fast_dict$FastDict$insert_fn(name, type_, soFar.bY),
                    bT: soFar.bT
                };
            }
        }
    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$unannotatedInferredDeclarationTypesEmptyAndAnnotatedEmpty, syntaxValueAndFunctionDeclarations);
    var declarationTypes = $miniBill$elm_fast_dict$FastDict$insert_fn(context.bN, {
        aw: context.es.aw,
        az: $miniBill$elm_fast_dict$FastDict$union_fn(context.es.az, acrossValueAndFunctionDeclarationsToInfer.bY),
        B: context.es.B
    }, context.ed);
    var declarationTypeInferContext = { dw: declarationTypes, di: moduleOriginLookup };
    return $elm$core$Result$map_fn(function (fullySubstitutedDeclarationsTypedWithContext) {
        return $elm$core$List$foldl_fn_unwrapped(function (declaration, soFar) {
            return _List_Cons($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$declarationValueOrFunctionDisambiguateTypeVariables(declaration), soFar);
        }, _List_Nil, fullySubstitutedDeclarationsTypedWithContext);
    }, $elm$core$Result$andThen_fn(function (declarationsInferredIndependentOfOtherLocalUnannotatedDeclarations) {
        if ($miniBill$elm_fast_dict$FastDict$isEmpty(acrossValueAndFunctionDeclarationsToInfer.bT)) {
            return $elm$core$Result$Ok(declarationsInferredIndependentOfOtherLocalUnannotatedDeclarations);
        }
        else {
            var unannotatedDeclarationTypes = $elm$core$List$foldl_fn_unwrapped(function (declaration, soFar) {
                var _v1 = declaration.cW;
                if (!_v1.$) {
                    return soFar;
                }
                else {
                    return $miniBill$elm_fast_dict$FastDict$insert_fn(declaration.a, {
                        aN: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueOrFunctionDeclarationRange(declaration),
                        n: declaration.n
                    }, soFar);
                }
            }, $miniBill$elm_fast_dict$FastDict$empty, declarationsInferredIndependentOfOtherLocalUnannotatedDeclarations);
            return $elm$core$Result$andThen_fn(function (substitutionsForInstanceUnifyingUnannotatedDeclarationTypesWithUses) {
                return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarationsApplyVariableSubstitutions_fn(declarationTypes, substitutionsForInstanceUnifyingUnannotatedDeclarationTypesWithUses, declarationsInferredIndependentOfOtherLocalUnannotatedDeclarations);
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom_fn_unwrapped($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsNone, function (declaration, soFar) {
                return $elm$core$Result$andThen_fn(function (resultSubstitutions) {
                    return $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$variableSubstitutionsMerge_fn({ dw: declarationTypes, aN: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$everywhereRange }, soFar, resultSubstitutions);
                }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$substitutionsForInstanceUnifyingModuleDeclaredTypesWithUsesInExpression_fn({
                    dw: declarationTypes,
                    aN: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueOrFunctionDeclarationRange(declaration)
                }, unannotatedDeclarationTypes, declaration.h));
            }, declarationsInferredIndependentOfOtherLocalUnannotatedDeclarations));
        }
    }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$listFoldlWhileOkFrom_fn_unwrapped(_List_Nil, function (valueOrFunctionDeclarationToInfer, soFar) {
        var _v0 = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$moduleLevelValueOrFunctionDeclarationTypeInfer_fn(declarationTypeInferContext, acrossValueAndFunctionDeclarationsToInfer, valueOrFunctionDeclarationToInfer);
        if (!_v0.$) {
            var inferred = _v0.a;
            return $elm$core$Result$Ok(_List_Cons(inferred, soFar));
        }
        else {
            var inferError = _v0.a;
            return $elm$core$Result$Err("inferring the value/function declaration " + ($stil4m$elm_syntax$Elm$Syntax$Node$value($stil4m$elm_syntax$Elm$Syntax$Node$value(valueOrFunctionDeclarationToInfer.L).a) + (", " + inferError)));
        }
    }, syntaxValueAndFunctionDeclarations)));
}, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarations = F2($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarations_fn);
var $author$project$ElmSyntaxToRust$RustStatementLetDeclarationUninitialized = function (a) {
    return { $: 3, a: a };
};
var $author$project$ElmSyntaxToRust$RustStatementBindingAssignment = function (a) {
    return { $: 5, a: a };
};
var $author$project$ElmSyntaxToRust$RustStatementLetDestructuring = function (a) {
    return { $: 0, a: a };
};
var $author$project$ElmSyntaxToRust$RustStatementSwitch = function (a) {
    return { $: 8, a: a };
};
var $author$project$ElmSyntaxToRust$generatedDestructuringVariableNameFor = function (variableName) {
    return "generated_destructured_" + variableName;
};
var $author$project$ElmSyntaxToRust$RustPatternBool = function (a) {
    return { $: 1, a: a };
};
var $author$project$ElmSyntaxToRust$RustPatternInteger = function (a) {
    return { $: 2, a: a };
};
var $author$project$ElmSyntaxToRust$RustPatternStringLiteral = function (a) {
    return { $: 4, a: a };
};
var $author$project$ElmSyntaxToRust$RustPatternUnicodeScalar = function (a) {
    return { $: 3, a: a };
};
var $author$project$ElmSyntaxToRust$fieldsDictEmptyIntroducedVariablesDictEmpty = { F: $miniBill$elm_fast_dict$FastDict$empty, x: $miniBill$elm_fast_dict$FastSet$empty };
var $author$project$ElmSyntaxToRust$referenceToCoreRust = function (reference) {
    var _v0 = reference.b;
    switch (_v0) {
        case "Basics":
            var _v1 = reference.a;
            switch (_v1) {
                case "identity":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_identity" });
                case "always":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_always" });
                case "compare":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_compare" });
                case "max":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "max" });
                case "min":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "min" });
                case "LT":
                    return $elm$core$Maybe$Just({
                        b: $elm$core$Maybe$Just("Basics_Order"),
                        a: "Basics_LT"
                    });
                case "EQ":
                    return $elm$core$Maybe$Just({
                        b: $elm$core$Maybe$Just("Basics_Order"),
                        a: "Basics_EQ"
                    });
                case "GT":
                    return $elm$core$Maybe$Just({
                        b: $elm$core$Maybe$Just("Basics_Order"),
                        a: "Basics_GT"
                    });
                case "True":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "true" });
                case "False":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "false" });
                case "not":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_not" });
                case "xor":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_neq" });
                case "e":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_e" });
                case "pi":
                    return $elm$core$Maybe$Just({
                        b: $elm$core$Maybe$Just("Double"),
                        a: "pi"
                    });
                case "ceiling":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_ceiling" });
                case "floor":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_floor" });
                case "round":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_round" });
                case "truncate":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_truncate" });
                case "negate":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_negate" });
                case "abs":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "abs" });
                case "toFloat":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_identity" });
                case "isNaN":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_isNaN" });
                case "isInfinite":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_isInfinite" });
                case "remainderBy":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_remainderBy" });
                case "modBy":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_modBy" });
                case "sin":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "sin" });
                case "cos":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "cos" });
                case "tan":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "tan" });
                case "asin":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "asin" });
                case "acos":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "acos" });
                case "atan":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "atan" });
                case "atan2":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "atan2" });
                case "sqrt":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "sqrt" });
                case "logBase":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_logBase" });
                case "radians":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_identity" });
                case "degrees":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_degrees" });
                case "turns":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_turns" });
                case "fromPolar":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_fromPolar" });
                case "toPolar":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_toPolar" });
                case "clamp":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_clamp" });
                case "never":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Basics_never" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Bitwise":
            var _v2 = reference.a;
            switch (_v2) {
                case "complement":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Bitwise_complement" });
                case "and":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Bitwise_and" });
                case "or":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Bitwise_or" });
                case "xor":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Bitwise_xor" });
                case "shiftLeftBy":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Bitwise_shiftLeftBy" });
                case "shiftRightBy":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Bitwise_shiftRightBy" });
                case "shiftRightZfBy":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Bitwise_shiftRightZfBy" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "String":
            var _v3 = reference.a;
            switch (_v3) {
                case "isEmpty":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_isEmpty" });
                case "length":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_length" });
                case "append":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_concat" });
                case "trim":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_trim" });
                case "trimLeft":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_trimLeft" });
                case "trimRight":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_trimRight" });
                case "left":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_left" });
                case "right":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_right" });
                case "dropLeft":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_dropLeft" });
                case "dropRight":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_dropRight" });
                case "padLeft":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_padLeft" });
                case "padRight":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_padRight" });
                case "replace":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_replace" });
                case "toList":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_toList" });
                case "foldl":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_foldl" });
                case "foldr":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_foldr" });
                case "join":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_join" });
                case "filter":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_filter" });
                case "any":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_any" });
                case "all":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_all" });
                case "map":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_map" });
                case "repeat":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_repeat" });
                case "split":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_split" });
                case "lines":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_lines" });
                case "words":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_words" });
                case "startsWith":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_startsWith" });
                case "endsWith":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_endsWith" });
                case "toInt":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_toInt" });
                case "toFloat":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_toFloat" });
                case "fromInt":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_fromInt" });
                case "fromFloat":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_fromFloat" });
                case "contains":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_contains" });
                case "fromChar":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_fromChar" });
                case "cons":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_cons" });
                case "uncons":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_uncons" });
                case "slice":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_slice" });
                case "toLower":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_toLower" });
                case "toUpper":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "String_toUpper" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Char":
            var _v4 = reference.a;
            switch (_v4) {
                case "toCode":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Char_toCode" });
                case "fromCode":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Char_fromCode" });
                case "toLower":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Char_toLower" });
                case "toUpper":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Char_toUpper" });
                case "toLocaleLower":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Char_toLocaleLower" });
                case "toLocaleUpper":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Char_toLocaleUpper" });
                case "isLower":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Char_isLower" });
                case "isUpper":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Char_isUpper" });
                case "isHexDigit":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Char_isHexDigit" });
                case "isOctDigit":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Char_isOctDigit" });
                case "isDigit":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Char_isDigit" });
                case "isAlpha":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Char_isAlpha" });
                case "isAlphaNum":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Char_isAlphaNum" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "List":
            var _v5 = reference.a;
            switch (_v5) {
                case "singleton":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_singleton" });
                case "isEmpty":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_isEmpty" });
                case "length":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_length" });
                case "member":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_member" });
                case "minimum":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_minimum" });
                case "maximum":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_maximum" });
                case "sum":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_sum" });
                case "product":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_product" });
                case "append":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_append" });
                case "concat":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_concat" });
                case "reverse":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_reverse" });
                case "repeat":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_repeat" });
                case "head":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_head" });
                case "tail":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_tail" });
                case "all":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_all" });
                case "any":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_any" });
                case "filter":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_filter" });
                case "filterMap":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_filterMap" });
                case "map":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_map" });
                case "indexedMap":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_indexedMap" });
                case "map2":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_map2" });
                case "zip":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_zip" });
                case "map3":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_map3" });
                case "map4":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_map4" });
                case "map5":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_map5" });
                case "unzip":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_unzip" });
                case "concatMap":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_concatMap" });
                case "sort":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_sort" });
                case "sortBy":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_sortBy" });
                case "sortWith":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_sortWith" });
                case "range":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_range" });
                case "take":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_take" });
                case "drop":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_drop" });
                case "intersperse":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_intersperse" });
                case "foldl":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_foldl" });
                case "foldr":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "List_foldr" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Maybe":
            var _v6 = reference.a;
            switch (_v6) {
                case "Nothing":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Maybe_Nothing" });
                case "Just":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Maybe_Just" });
                case "withDefault":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Maybe_withDefault" });
                case "map":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Maybe_map" });
                case "map2":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Maybe_map2" });
                case "map3":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Maybe_map3" });
                case "map4":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Maybe_map4" });
                case "map5":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Maybe_map5" });
                case "andThen":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Maybe_andThen" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Result":
            var _v7 = reference.a;
            switch (_v7) {
                case "Err":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Result_Err" });
                case "Ok":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Result_Ok" });
                case "map":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Result_map" });
                case "map2":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Result_map2" });
                case "map3":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Result_map3" });
                case "map4":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Result_map4" });
                case "map5":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Result_map5" });
                case "andThen":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Result_andThen" });
                case "withDefault":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Result_withDefault" });
                case "toMaybe":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Result_toMaybe" });
                case "fromMaybe":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Result_fromMaybe" });
                case "mapError":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Result_mapError" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Array":
            var _v8 = reference.a;
            switch (_v8) {
                case "isEmpty":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Array_isEmpty" });
                case "length":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Array_length" });
                case "get":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Array_get" });
                case "empty":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Array_empty" });
                case "initialize":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Array_initialize" });
                case "repeat":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Array_repeat" });
                case "fromList":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Array_fromList" });
                case "reverse":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Array_reverse" });
                case "filter":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Array_filter" });
                case "push":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Array_push" });
                case "set":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Array_set" });
                case "slice":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Array_slice" });
                case "map":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Array_map" });
                case "indexedMap":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Array_indexedMap" });
                case "append":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Array_append" });
                case "toList":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Array_toList" });
                case "toIndexedList":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Array_toIndexedList" });
                case "foldl":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Array_foldl" });
                case "foldr":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Array_foldr" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Dict":
            var _v9 = reference.a;
            switch (_v9) {
                case "size":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Dict_size" });
                case "empty":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Dict_empty" });
                case "singleton":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Dict_singleton" });
                case "fromList":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Dict_fromList" });
                case "toList":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Dict_toList" });
                case "keys":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Dict_keys" });
                case "values":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Dict_values" });
                case "isEmpty":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Dict_isEmpty" });
                case "map":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Dict_map" });
                case "partition":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Dict_partition" });
                case "foldl":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Dict_foldl" });
                case "foldr":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Dict_foldr" });
                case "filter":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Dict_filter" });
                case "get":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Dict_get" });
                case "member":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Dict_member" });
                case "insert":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Dict_insert" });
                case "update":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Dict_update" });
                case "remove":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Dict_remove" });
                case "union":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Dict_union" });
                case "diff":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Dict_diff" });
                case "intersect":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Dict_intersect" });
                case "merge":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Dict_merge" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Set":
            var _v10 = reference.a;
            switch (_v10) {
                case "size":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Set_size" });
                case "empty":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Set_empty" });
                case "singleton":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Set_singleton" });
                case "fromList":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Set_fromList" });
                case "toList":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Set_toList" });
                case "isEmpty":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Set_isEmpty" });
                case "insert":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Set_insert" });
                case "partition":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Set_partition" });
                case "foldl":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Set_foldl" });
                case "foldr":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Set_foldr" });
                case "map":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Set_map" });
                case "filter":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Set_filter" });
                case "member":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Set_member" });
                case "remove":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Set_remove" });
                case "union":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Set_union" });
                case "diff":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Set_diff" });
                case "intersect":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Set_intersect" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Json.Encode":
            var _v11 = reference.a;
            switch (_v11) {
                case "encode":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonEncode_encode" });
                case "null":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonEncode_null" });
                case "bool":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonEncode_bool" });
                case "string":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonEncode_string" });
                case "int":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonEncode_int" });
                case "float":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonEncode_float" });
                case "list":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonEncode_list" });
                case "array":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonEncode_array" });
                case "set":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonEncode_set" });
                case "object":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonEncode_object" });
                case "dict":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonEncode_dict" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Json.Decode":
            var _v12 = reference.a;
            switch (_v12) {
                case "Field":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_Field" });
                case "Index":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_Index" });
                case "OneOf":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_OneOf" });
                case "Failure":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_Failure" });
                case "string":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_string" });
                case "bool":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_bool" });
                case "int":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_int" });
                case "float":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_float" });
                case "nullable":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_nullable" });
                case "list":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_list" });
                case "array":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_array" });
                case "dict":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_dict" });
                case "keyValuePairs":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_keyValuePairs" });
                case "oneOrMore":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_oneOrMore" });
                case "field":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_field" });
                case "at":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_at" });
                case "index":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_index" });
                case "maybe":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_maybe" });
                case "oneOf":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_oneOf" });
                case "decodeString":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_decodeString" });
                case "decodeValue":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_decodeValue" });
                case "errorToString":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_errorToString" });
                case "map":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_map" });
                case "map2":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_map2" });
                case "map3":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_map3" });
                case "map4":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_map4" });
                case "map5":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_map5" });
                case "map6":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_map6" });
                case "map7":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_map7" });
                case "map8":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_map8" });
                case "lazy":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_lazy" });
                case "value":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_value" });
                case "null":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_null" });
                case "succeed":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_succeed" });
                case "fail":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_fail" });
                case "andThen":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "JsonDecode_andThen" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Regex":
            var _v13 = reference.a;
            switch (_v13) {
                case "fromString":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Regex_fromString" });
                case "fromStringWith":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Regex_fromStringWith" });
                case "never":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Regex_never" });
                case "contains":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Regex_contains" });
                case "split":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Regex_split" });
                case "find":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Regex_find" });
                case "replace":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Regex_replace" });
                case "splitAtMost":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Regex_splitAtMost" });
                case "findAtMost":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Regex_findAtMost" });
                case "replaceAtMost":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Regex_replaceAtMost" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Random":
            var _v14 = reference.a;
            switch (_v14) {
                case "int":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Random_int" });
                case "float":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Random_float" });
                case "uniform":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Random_uniform" });
                case "weighted":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Random_weighted" });
                case "constant":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Random_constant" });
                case "list":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Random_list" });
                case "pair":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Random_pair" });
                case "map":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Random_map" });
                case "map2":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Random_map2" });
                case "map3":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Random_map3" });
                case "map4":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Random_map4" });
                case "map5":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Random_map5" });
                case "andThen":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Random_andThen" });
                case "lazy":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Random_lazy" });
                case "minInt":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Random_minInt" });
                case "maxInt":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Random_maxInt" });
                case "step":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Random_step" });
                case "initialSeed":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Random_initialSeed" });
                case "independentSeed":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Random_independentSeed" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Time":
            var _v15 = reference.a;
            switch (_v15) {
                case "posixToMillis":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Time_posixToMillis" });
                case "millisToPosix":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Time_millisToPosix" });
                case "utc":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Time_utc" });
                case "toYear":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Time_toYear" });
                case "toMonth":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Time_toMonth" });
                case "toDay":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Time_toDay" });
                case "toWeekday":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Time_toWeekday" });
                case "toHour":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Time_toHour" });
                case "toMinute":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Time_toMinute" });
                case "toSecond":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Time_toSecond" });
                case "toMillis":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Time_toMillis" });
                case "customZone":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Time_customZone" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Bytes":
            var _v16 = reference.a;
            switch (_v16) {
                case "LE":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Bytes_LE" });
                case "BE":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Bytes_BE" });
                case "width":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Bytes_width" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Bytes.Decode":
            var _v17 = reference.a;
            switch (_v17) {
                case "Loop":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesDecode_Loop" });
                case "Done":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesDecode_Done" });
                case "decode":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesDecode_decode" });
                case "signedInt8":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesDecode_signedInt8" });
                case "signedInt16":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesDecode_signedInt16" });
                case "signedInt32":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesDecode_signedInt32" });
                case "unsignedInt8":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesDecode_unsignedInt8" });
                case "unsignedInt16":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesDecode_unsignedInt16" });
                case "unsignedInt32":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesDecode_unsignedInt32" });
                case "float32":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesDecode_float32" });
                case "float64":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesDecode_float64" });
                case "string":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesDecode_string" });
                case "bytes":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesDecode_bytes" });
                case "map":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesDecode_map" });
                case "map2":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesDecode_map2" });
                case "map3":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesDecode_map3" });
                case "map4":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesDecode_map4" });
                case "map5":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesDecode_map5" });
                case "andThen":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesDecode_andThen" });
                case "succeed":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesDecode_succeed" });
                case "fail":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesDecode_fail" });
                case "loop":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesDecode_loop" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Bytes.Encode":
            var _v18 = reference.a;
            switch (_v18) {
                case "encode":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesEncode_encode" });
                case "signedInt8":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesEncode_signedInt8" });
                case "signedInt16":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesEncode_signedInt16" });
                case "signedInt32":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesEncode_signedInt32" });
                case "unsignedInt8":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesEncode_unsignedInt8" });
                case "unsignedInt16":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesEncode_unsignedInt16" });
                case "unsignedInt32":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesEncode_unsignedInt32" });
                case "float32":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesEncode_float32" });
                case "float64":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesEncode_float64" });
                case "bytes":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesEncode_bytes" });
                case "string":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesEncode_string" });
                case "getStringWidth":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesEncode_getStringWidth" });
                case "sequence":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "BytesEncode_sequence" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Elm.Kernel.Parser":
            var _v19 = reference.a;
            switch (_v19) {
                case "isSubString":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "ElmKernelParser_isSubString" });
                case "isSubChar":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "ElmKernelParser_isSubChar" });
                case "isAsciiCode":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "ElmKernelParser_isAsciiCode" });
                case "chompBase10":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "ElmKernelParser_chompBase10" });
                case "consumeBase":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "ElmKernelParser_consumeBase" });
                case "consumeBase16":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "ElmKernelParser_consumeBase16" });
                case "findSubString":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "ElmKernelParser_findSubString" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Elm.Kernel.VirtualDom":
            var _v20 = reference.a;
            switch (_v20) {
                case "property":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_property" });
                case "attribute":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_attribute" });
                case "attributeNS":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_attributeNS" });
                case "node":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_node" });
                case "nodeNS":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_nodeNS" });
                case "noJavaScriptOrHtmlUri":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_noJavaScriptOrHtmlUri" });
                case "noJavaScriptUri":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_noJavaScriptUri" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "VirtualDom":
            var _v21 = reference.a;
            switch (_v21) {
                case "Normal":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_Normal" });
                case "MayStopPropagation":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_MayStopPropagation" });
                case "MayPreventDefault":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_MayPreventDefault" });
                case "Custom":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_Custom" });
                case "text":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_text" });
                case "node":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_node" });
                case "nodeNS":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_nodeNS" });
                case "style":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_style" });
                case "property":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_property" });
                case "attribute":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_attribute" });
                case "attributeNS":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_attributeNS" });
                case "on":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_on" });
                case "map":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_map" });
                case "mapAttribute":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_mapAttribute" });
                case "keyedNode":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_keyedNode" });
                case "keyedNodeNS":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_keyedNodeNS" });
                case "lazy":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_lazy" });
                case "lazy2":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_lazy2" });
                case "lazy3":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_lazy3" });
                case "lazy4":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_lazy4" });
                case "lazy5":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_lazy5" });
                case "lazy6":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_lazy6" });
                case "lazy7":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_lazy7" });
                case "lazy8":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "VirtualDom_lazy8" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Debug":
            var _v22 = reference.a;
            switch (_v22) {
                case "log":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Debug_log" });
                case "toString":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Debug_toString" });
                case "todo":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Debug_todo" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Math.Vector2":
            var _v23 = reference.a;
            switch (_v23) {
                case "add":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector2_add" });
                case "direction":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector2_direction" });
                case "distance":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector2_distance" });
                case "distanceSquared":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector2_distanceSquared" });
                case "dot":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector2_dot" });
                case "fromRecord":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector2_fromRecord" });
                case "getX":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector2_getX" });
                case "getY":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector2_getY" });
                case "length":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector2_length" });
                case "lengthSquared":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector2_lengthSquared" });
                case "negate":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector2_negate" });
                case "normalize":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector2_normalize" });
                case "scale":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector2_scale" });
                case "setX":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector2_setX" });
                case "setY":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector2_setY" });
                case "sub":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector2_sub" });
                case "toRecord":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector2_toRecord" });
                case "vec2":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector2_vec2" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Math.Vector3":
            var _v24 = reference.a;
            switch (_v24) {
                case "add":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_add" });
                case "cross":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_cross" });
                case "direction":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_direction" });
                case "distance":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_distance" });
                case "distanceSquared":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_distanceSquared" });
                case "dot":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_dot" });
                case "fromRecord":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_fromRecord" });
                case "getX":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_getX" });
                case "getY":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_getY" });
                case "getZ":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_getZ" });
                case "i":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_i" });
                case "j":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_j" });
                case "k":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_k" });
                case "length":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_length" });
                case "lengthSquared":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_lengthSquared" });
                case "negate":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_negate" });
                case "normalize":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_normalize" });
                case "scale":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_scale" });
                case "setX":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_setX" });
                case "setY":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_setY" });
                case "setZ":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_setZ" });
                case "sub":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_sub" });
                case "toRecord":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_toRecord" });
                case "vec3":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_vec3" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Math.Vector4":
            var _v25 = reference.a;
            switch (_v25) {
                case "add":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector4_add" });
                case "direction":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector4_direction" });
                case "distance":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector4_distance" });
                case "distanceSquared":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector4_distanceSquared" });
                case "dot":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector4_dot" });
                case "fromRecord":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector4_fromRecord" });
                case "getW":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector4_getW" });
                case "getX":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector4_getX" });
                case "getY":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector4_getY" });
                case "getZ":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector4_getZ" });
                case "length":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector4_length" });
                case "lengthSquared":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector4_lengthSquared" });
                case "negate":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_negate" });
                case "normalize":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector3_normalize" });
                case "scale":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector4_scale" });
                case "setW":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector4_setW" });
                case "setX":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector4_setX" });
                case "setY":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector4_setY" });
                case "setZ":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector4_setZ" });
                case "sub":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector4_sub" });
                case "toRecord":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector4_toRecord" });
                case "vec4":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "MathVector4_vec4" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Math.Matrix4":
            return $elm$core$Maybe$Nothing;
        case "Platform":
            var _v26 = reference.a;
            if (_v26 === "worker") {
                return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "Platform_worker" });
            }
            else {
                return $elm$core$Maybe$Nothing;
            }
        case "Platform.Cmd":
            var _v27 = reference.a;
            switch (_v27) {
                case "none":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "PlatformCmd_none" });
                case "batch":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "PlatformCmd_batch" });
                case "map":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "PlatformCmd_map" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        case "Platform.Sub":
            var _v28 = reference.a;
            switch (_v28) {
                case "none":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "PlatformSub_none" });
                case "batch":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "PlatformSub_batch" });
                case "map":
                    return $elm$core$Maybe$Just({ b: $elm$core$Maybe$Nothing, a: "PlatformSub_map" });
                default:
                    return $elm$core$Maybe$Nothing;
            }
        default:
            return $elm$core$Maybe$Nothing;
    }
};
var $author$project$ElmSyntaxToRust$rustPatternIgnorePatternAliasesEmpty = { m: $author$project$ElmSyntaxToRust$RustPatternIgnore, am: _List_Nil };
var $author$project$ElmSyntaxToRust$rustPatternListCons_fn = function (head, tail) {
    return $author$project$ElmSyntaxToRust$RustPatternVariant({
        a: "List_Cons",
        P: "List_List",
        X: _List_fromArray([
            { v: $elm$core$Maybe$Nothing, l: head },
            { v: $elm$core$Maybe$Nothing, l: tail }
        ])
    });
}, $author$project$ElmSyntaxToRust$rustPatternListCons = F2($author$project$ElmSyntaxToRust$rustPatternListCons_fn);
var $author$project$ElmSyntaxToRust$rustPatternListEmpty = $author$project$ElmSyntaxToRust$RustPatternVariant({ a: "List_Empty", P: "List_List", X: _List_Nil });
var $author$project$ElmSyntaxToRust$rustPatternVariantTuple_fn = function (part0, part1) {
    return $author$project$ElmSyntaxToRust$RustPatternVariant({
        a: "Tuple",
        P: "Tuple",
        X: _List_fromArray([
            { v: $elm$core$Maybe$Nothing, l: part0 },
            { v: $elm$core$Maybe$Nothing, l: part1 }
        ])
    });
}, $author$project$ElmSyntaxToRust$rustPatternVariantTuple = F2($author$project$ElmSyntaxToRust$rustPatternVariantTuple_fn);
var $author$project$ElmSyntaxToRust$inferredPatternUntilAsPatterns = function (patternTypedNode) {
    inferredPatternUntilAsPatterns: while (true) {
        var _v0 = patternTypedNode.l;
        switch (_v0.$) {
            case 0:
                return $author$project$ElmSyntaxToRust$rustPatternIgnorePatternAliasesEmpty;
            case 4:
                return $author$project$ElmSyntaxToRust$rustPatternIgnorePatternAliasesEmpty;
            case 5:
                var charValue = _v0.a;
                return {
                    m: $author$project$ElmSyntaxToRust$RustPatternUnicodeScalar(charValue),
                    am: _List_Nil
                };
            case 6:
                var stringValue = _v0.a;
                return {
                    m: $author$project$ElmSyntaxToRust$RustPatternStringLiteral(stringValue),
                    am: _List_Nil
                };
            case 7:
                var intValue = _v0.a;
                return {
                    m: $author$project$ElmSyntaxToRust$RustPatternInteger(intValue.l),
                    am: _List_Nil
                };
            case 1:
                var variableName = _v0.a;
                var disambiguatedVariableName = $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(variableName);
                return {
                    m: $author$project$ElmSyntaxToRust$RustPatternVariable(disambiguatedVariableName),
                    am: _List_Nil
                };
            case 2:
                var inParens = _v0.a;
                var $temp$patternTypedNode = inParens;
                patternTypedNode = $temp$patternTypedNode;
                continue inferredPatternUntilAsPatterns;
            case 8:
                var parts = _v0.a;
                var part1 = $author$project$ElmSyntaxToRust$inferredPatternUntilAsPatterns(parts.t);
                var part0 = $author$project$ElmSyntaxToRust$inferredPatternUntilAsPatterns(parts.s);
                return {
                    m: $author$project$ElmSyntaxToRust$rustPatternVariantTuple_fn(part0.m, part1.m),
                    am: _Utils_ap(part0.am, part1.am)
                };
            case 9:
                var parts = _v0.a;
                var part2 = $author$project$ElmSyntaxToRust$inferredPatternUntilAsPatterns(parts.ak);
                var part1 = $author$project$ElmSyntaxToRust$inferredPatternUntilAsPatterns(parts.t);
                var part0 = $author$project$ElmSyntaxToRust$inferredPatternUntilAsPatterns(parts.s);
                return {
                    m: $author$project$ElmSyntaxToRust$RustPatternVariant({
                        a: "Triple",
                        P: "Triple",
                        X: _List_fromArray([
                            { v: $elm$core$Maybe$Nothing, l: part0.m },
                            { v: $elm$core$Maybe$Nothing, l: part1.m },
                            { v: $elm$core$Maybe$Nothing, l: part2.m }
                        ])
                    }),
                    am: _Utils_ap(part0.am, _Utils_ap(part1.am, part2.am))
                };
            case 10:
                var patternFields = _v0.a;
                var allFields = function () {
                    var _v5 = patternTypedNode.n;
                    if (!_v5.$) {
                        return $miniBill$elm_fast_dict$FastDict$empty;
                    }
                    else {
                        var patternTypeNotVariable = _v5.a;
                        switch (patternTypeNotVariable.$) {
                            case 0:
                                return $miniBill$elm_fast_dict$FastDict$empty;
                            case 1:
                                return $miniBill$elm_fast_dict$FastDict$empty;
                            case 2:
                                return $miniBill$elm_fast_dict$FastDict$empty;
                            case 3:
                                return $miniBill$elm_fast_dict$FastDict$empty;
                            case 4:
                                var patternTypeRecordFields = patternTypeNotVariable.a;
                                return patternTypeRecordFields;
                            case 5:
                                return $miniBill$elm_fast_dict$FastDict$empty;
                            default:
                                return $miniBill$elm_fast_dict$FastDict$empty;
                        }
                    }
                }();
                var combinedFieldNames = $miniBill$elm_fast_dict$FastDict$merge_fn(F3(function (fieldName, _v1, soFar) {
                    return {
                        F: $miniBill$elm_fast_dict$FastDict$insert_fn($author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(fieldName), $author$project$ElmSyntaxToRust$RustPatternIgnore, soFar.F),
                        x: soFar.x
                    };
                }), F4(function (fieldName, _v2, _v3, soFar) {
                    var disambiguatedFieldName = $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(fieldName);
                    return {
                        F: $miniBill$elm_fast_dict$FastDict$insert_fn(disambiguatedFieldName, $author$project$ElmSyntaxToRust$RustPatternVariable(disambiguatedFieldName), soFar.F),
                        x: $miniBill$elm_fast_dict$FastSet$insert_fn(fieldName, soFar.x)
                    };
                }), F3(function (fieldName, _v4, soFar) {
                    var disambiguatedFieldName = $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(fieldName);
                    return {
                        F: $miniBill$elm_fast_dict$FastDict$insert_fn(disambiguatedFieldName, $author$project$ElmSyntaxToRust$RustPatternVariable(disambiguatedFieldName), soFar.F),
                        x: $miniBill$elm_fast_dict$FastSet$insert_fn(fieldName, soFar.x)
                    };
                }), allFields, $elm$core$List$foldl_fn_unwrapped(function (fieldNameTypedNode, soFar) {
                    return $miniBill$elm_fast_dict$FastDict$insert_fn(fieldNameTypedNode.l, 0, soFar);
                }, $miniBill$elm_fast_dict$FastDict$empty, patternFields), $author$project$ElmSyntaxToRust$fieldsDictEmptyIntroducedVariablesDictEmpty);
                return {
                    m: $author$project$ElmSyntaxToRust$RustPatternVariant({
                        a: "Record",
                        P: $author$project$ElmSyntaxToRust$generatedRecordTypeName($miniBill$elm_fast_dict$FastDict$keys(combinedFieldNames.F)),
                        X: $miniBill$elm_fast_dict$FastDict$foldr_fn(F3(function (fieldName, fieldValue, soFar) {
                            return _List_Cons({
                                v: $elm$core$Maybe$Just(fieldName),
                                l: fieldValue
                            }, soFar);
                        }), _List_Nil, combinedFieldNames.F)
                    }),
                    am: _List_Nil
                };
            case 11:
                var listCons = _v0.a;
                var tail = $author$project$ElmSyntaxToRust$inferredPatternUntilAsPatterns(listCons.cY);
                var head = $author$project$ElmSyntaxToRust$inferredPatternUntilAsPatterns(listCons.b0);
                return {
                    m: $author$project$ElmSyntaxToRust$rustPatternListCons_fn(head.m, tail.m),
                    am: _Utils_ap(head.am, tail.am)
                };
            case 12:
                var elementPatterns = _v0.a;
                var elements = $elm$core$List$map_fn(function (element) {
                    return $author$project$ElmSyntaxToRust$inferredPatternUntilAsPatterns(element);
                }, elementPatterns);
                return {
                    m: $elm$core$List$foldr_fn(F2(function (element, soFar) {
                        return $author$project$ElmSyntaxToRust$rustPatternListCons_fn(element.m, soFar);
                    }), $author$project$ElmSyntaxToRust$rustPatternListEmpty, elements),
                    am: $elm$core$List$concatMap_fn(function ($) {
                        return $.am;
                    }, elements)
                };
            case 13:
                var variant = _v0.a;
                var asBool = function () {
                    var _v9 = variant.b;
                    if (_v9 === "Basics") {
                        var _v10 = variant.a;
                        switch (_v10) {
                            case "True":
                                return $elm$core$Maybe$Just(true);
                            case "False":
                                return $elm$core$Maybe$Just(false);
                            default:
                                return $elm$core$Maybe$Nothing;
                        }
                    }
                    else {
                        return $elm$core$Maybe$Nothing;
                    }
                }();
                if (!asBool.$) {
                    var bool = asBool.a;
                    return {
                        m: $author$project$ElmSyntaxToRust$RustPatternBool(bool),
                        am: _List_Nil
                    };
                }
                else {
                    var values = $elm$core$List$map_fn($author$project$ElmSyntaxToRust$inferredPatternUntilAsPatterns, variant.X);
                    var reference = function () {
                        var _v8 = $author$project$ElmSyntaxToRust$referenceToCoreRust({ b: variant.b, a: variant.a, n: patternTypedNode.n });
                        if (!_v8.$) {
                            var rustReference = _v8.a;
                            return rustReference;
                        }
                        else {
                            return {
                                b: $elm$core$Maybe$Nothing,
                                a: $author$project$ElmSyntaxToRust$referenceToRustName({ b: variant.b, a: variant.a })
                            };
                        }
                    }();
                    return {
                        m: $author$project$ElmSyntaxToRust$RustPatternVariant({
                            a: reference.a,
                            P: $elm$core$String$replace_fn(".", "", variant.b) + ("_" + variant.c0),
                            X: $elm$core$List$map_fn(function (value) {
                                return { v: $elm$core$Maybe$Nothing, l: value.m };
                            }, values)
                        }),
                        am: $elm$core$List$concatMap_fn(function ($) {
                            return $.am;
                        }, values)
                    };
                }
            default:
                var patternAs = _v0.a;
                var variableDisambiguated = $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(patternAs.bm.l);
                return {
                    m: $author$project$ElmSyntaxToRust$RustPatternVariable(variableDisambiguated),
                    am: _List_fromArray([
                        { m: patternAs.m, bm: variableDisambiguated }
                    ])
                };
        }
    }
};
var $author$project$ElmSyntaxToRust$RustStatementLetDeclaration = function (a) {
    return { $: 1, a: a };
};
var $author$project$ElmSyntaxToRust$generatedLocalReturnResult = function (path) {
    return "generated_localReturnResult_" + $elm$core$String$join_fn("_", path);
};
var $author$project$ElmSyntaxToRust$rustExpressionWrapInLetIfOrSwitchResult_fn = function (path, rustExpressionTyped) {
    var mustBeWrapped = function () {
        var _v0 = rustExpressionTyped.O;
        switch (_v0.$) {
            case 14:
                return true;
            case 13:
                return true;
            case 0:
                return false;
            case 1:
                return false;
            case 2:
                return false;
            case 3:
                return false;
            case 4:
                return false;
            case 5:
                return false;
            case 6:
                return false;
            case 7:
                return false;
            case 8:
                return false;
            case 9:
                return false;
            case 10:
                return false;
            case 11:
                return false;
            default:
                return false;
        }
    }();
    if (mustBeWrapped) {
        var switchLocalResultVariableToInitialize = $author$project$ElmSyntaxToRust$generatedLocalReturnResult(path);
        return {
            h: $author$project$ElmSyntaxToRust$RustExpressionReference({ b: $elm$core$Maybe$Nothing, a: switchLocalResultVariableToInitialize }),
            j: _List_fromArray([
                $author$project$ElmSyntaxToRust$RustStatementLetDeclaration({
                    a: switchLocalResultVariableToInitialize,
                    h: rustExpressionTyped.O,
                    Q: rustExpressionTyped.n(0)
                })
            ])
        };
    }
    else {
        return { h: rustExpressionTyped.O, j: _List_Nil };
    }
}, $author$project$ElmSyntaxToRust$rustExpressionWrapInLetIfOrSwitchResult = F2($author$project$ElmSyntaxToRust$rustExpressionWrapInLetIfOrSwitchResult_fn);
var $author$project$ElmSyntaxToRust$RustPatternRecord = function (a) {
    return { $: 6, a: a };
};
var $author$project$ElmSyntaxToRust$RustPatternTuple = function (a) {
    return { $: 8, a: a };
};
var $author$project$ElmSyntaxToRust$rustPatternAlterVariables_fn = function (variableNameChange, rustPattern) {
    switch (rustPattern.$) {
        case 0:
            return $author$project$ElmSyntaxToRust$RustPatternIgnore;
        case 5:
            var variable = rustPattern.a;
            return $author$project$ElmSyntaxToRust$RustPatternVariable(variableNameChange(variable));
        case 1:
            return rustPattern;
        case 2:
            return rustPattern;
        case 3:
            return rustPattern;
        case 4:
            return rustPattern;
        case 6:
            var fields = rustPattern.a;
            return $author$project$ElmSyntaxToRust$RustPatternRecord($miniBill$elm_fast_dict$FastDict$map_fn(F2(function (_v1, fieldValue) {
                return $author$project$ElmSyntaxToRust$rustPatternAlterVariables_fn(variableNameChange, fieldValue);
            }), fields));
        case 7:
            var variant = rustPattern.a;
            return $author$project$ElmSyntaxToRust$RustPatternVariant({
                a: variant.a,
                P: variant.P,
                X: $elm$core$List$map_fn(function (value) {
                    return {
                        v: value.v,
                        l: $author$project$ElmSyntaxToRust$rustPatternAlterVariables_fn(variableNameChange, value.l)
                    };
                }, variant.X)
            });
        default:
            var parts = rustPattern.a;
            return $author$project$ElmSyntaxToRust$RustPatternTuple({
                s: $author$project$ElmSyntaxToRust$rustPatternAlterVariables_fn(variableNameChange, parts.s),
                t: $author$project$ElmSyntaxToRust$rustPatternAlterVariables_fn(variableNameChange, parts.t),
                ao: $elm$core$List$map_fn(function (part) {
                    return $author$project$ElmSyntaxToRust$rustPatternAlterVariables_fn(variableNameChange, part);
                }, parts.ao)
            });
    }
}, $author$project$ElmSyntaxToRust$rustPatternAlterVariables = F2($author$project$ElmSyntaxToRust$rustPatternAlterVariables_fn);
var $author$project$ElmSyntaxToRust$rustPatternCanBeUsedInRustDestructuring = function (rustPattern) {
    switch (rustPattern.$) {
        case 1:
            return false;
        case 0:
            return true;
        case 2:
            return false;
        case 3:
            return false;
        case 4:
            return false;
        case 5:
            return true;
        case 6:
            var fields = rustPattern.a;
            return $author$project$ElmSyntaxToRust$fastDictAll_fn_unwrapped(function (_v1, fieldValue) {
                return $author$project$ElmSyntaxToRust$rustPatternCanBeUsedInRustDestructuring(fieldValue);
            }, fields);
        case 7:
            return false;
        default:
            var parts = rustPattern.a;
            return $author$project$ElmSyntaxToRust$rustPatternCanBeUsedInRustDestructuring(parts.s) && ($author$project$ElmSyntaxToRust$rustPatternCanBeUsedInRustDestructuring(parts.t) && $elm$core$List$all_fn($author$project$ElmSyntaxToRust$rustPatternCanBeUsedInRustDestructuring, parts.ao));
    }
};
var $author$project$ElmSyntaxToRust$rustPatternIntroducedVariables = function (rustPattern) {
    switch (rustPattern.$) {
        case 0:
            return _List_Nil;
        case 1:
            return _List_Nil;
        case 2:
            return _List_Nil;
        case 3:
            return _List_Nil;
        case 4:
            return _List_Nil;
        case 5:
            var variable = rustPattern.a;
            return _List_fromArray([variable]);
        case 8:
            var partPatterns = rustPattern.a;
            return _Utils_ap($author$project$ElmSyntaxToRust$rustPatternIntroducedVariables(partPatterns.s), _Utils_ap($author$project$ElmSyntaxToRust$rustPatternIntroducedVariables(partPatterns.t), $elm$core$List$concatMap_fn($author$project$ElmSyntaxToRust$rustPatternIntroducedVariables, partPatterns.ao)));
        case 7:
            var patternVariant = rustPattern.a;
            return $elm$core$List$concatMap_fn(function (value) {
                return $author$project$ElmSyntaxToRust$rustPatternIntroducedVariables(value.l);
            }, patternVariant.X);
        default:
            var recordPatternInexhaustiveFieldNames = rustPattern.a;
            return $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (_v1, field, soFar) {
                return _Utils_ap($author$project$ElmSyntaxToRust$rustPatternIntroducedVariables(field), soFar);
            }), _List_Nil, recordPatternInexhaustiveFieldNames);
    }
};
var $author$project$ElmSyntaxToRust$destructuringToRustAssignmentStatements_fn = function (context, toDestructure) {
    var patternUntilAsPatterns = $author$project$ElmSyntaxToRust$inferredPatternUntilAsPatterns(toDestructure.m);
    var patternUntilAsPatternsIntroducedVariableAssignments = $elm$core$List$map_fn(function (introducedVariableName) {
        return $author$project$ElmSyntaxToRust$RustStatementBindingAssignment({
            av: $author$project$ElmSyntaxToRust$RustExpressionReference({
                b: $elm$core$Maybe$Nothing,
                a: $author$project$ElmSyntaxToRust$generatedDestructuringVariableNameFor(introducedVariableName)
            }),
            a: introducedVariableName
        });
    }, $author$project$ElmSyntaxToRust$rustPatternIntroducedVariables(patternUntilAsPatterns.m));
    var patternUntilAsPatternsWithGeneratedVariableNames = $author$project$ElmSyntaxToRust$rustPatternAlterVariables_fn($author$project$ElmSyntaxToRust$generatedDestructuringVariableNameFor, patternUntilAsPatterns.m);
    var asPatternAliasDestructuringStatements = $elm$core$List$concatMap_fn(function (variableAsPatternAlias) {
        return $author$project$ElmSyntaxToRust$destructuringToRustAssignmentStatements_fn(context, {
            O: $author$project$ElmSyntaxToRust$RustExpressionReference({ b: $elm$core$Maybe$Nothing, a: variableAsPatternAlias.bm }),
            m: variableAsPatternAlias.m
        });
    }, patternUntilAsPatterns.am);
    if ($author$project$ElmSyntaxToRust$rustPatternCanBeUsedInRustDestructuring(patternUntilAsPatternsWithGeneratedVariableNames)) {
        return _List_Cons($author$project$ElmSyntaxToRust$RustStatementLetDestructuring({ O: toDestructure.O, m: patternUntilAsPatternsWithGeneratedVariableNames }), _Utils_ap(patternUntilAsPatternsIntroducedVariableAssignments, asPatternAliasDestructuringStatements));
    }
    else {
        var matchedWrappedInLetIfIfOrSwitch = $author$project$ElmSyntaxToRust$rustExpressionWrapInLetIfOrSwitchResult_fn(context.q, {
            O: toDestructure.O,
            n: function (_v0) {
                return $author$project$ElmSyntaxToRust$type__fn(context.cE, toDestructure.m.n);
            }
        });
        return _Utils_ap(matchedWrappedInLetIfIfOrSwitch.j, _List_fromArray([
            $author$project$ElmSyntaxToRust$RustStatementSwitch({
                ar: {
                    m: patternUntilAsPatternsWithGeneratedVariableNames,
                    j: _Utils_ap(asPatternAliasDestructuringStatements, patternUntilAsPatternsIntroducedVariableAssignments)
                },
                as: _List_Nil,
                at: matchedWrappedInLetIfIfOrSwitch.h
            })
        ]));
    }
}, $author$project$ElmSyntaxToRust$destructuringToRustAssignmentStatements = F2($author$project$ElmSyntaxToRust$destructuringToRustAssignmentStatements_fn);
var $author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables = function (patternTypedNode) {
    inferredPatternIntroducedVariables: while (true) {
        var _v0 = patternTypedNode.l;
        switch (_v0.$) {
            case 4:
                return _List_Nil;
            case 0:
                return _List_Nil;
            case 7:
                return _List_Nil;
            case 6:
                return _List_Nil;
            case 5:
                return _List_Nil;
            case 1:
                var variable = _v0.a;
                return _List_fromArray([
                    { a: variable, n: patternTypedNode.n }
                ]);
            case 10:
                var fieldVariables = _v0.a;
                return $elm$core$List$map_fn(function (fieldVariable) {
                    return { a: fieldVariable.l, n: fieldVariable.n };
                }, fieldVariables);
            case 3:
                var patternAs = _v0.a;
                return _List_Cons({ a: patternAs.bm.l, n: patternAs.bm.n }, $author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables(patternAs.m));
            case 2:
                var inParens = _v0.a;
                var $temp$patternTypedNode = inParens;
                patternTypedNode = $temp$patternTypedNode;
                continue inferredPatternIntroducedVariables;
            case 11:
                var listCons = _v0.a;
                return _Utils_ap($author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables(listCons.b0), $author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables(listCons.cY));
            case 8:
                var parts = _v0.a;
                return _Utils_ap($author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables(parts.s), $author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables(parts.t));
            case 9:
                var parts = _v0.a;
                return _Utils_ap($author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables(parts.s), _Utils_ap($author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables(parts.t), $author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables(parts.ak)));
            case 12:
                var elements = _v0.a;
                return $elm$core$List$concatMap_fn($author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables, elements);
            default:
                var variant = _v0.a;
                return $elm$core$List$concatMap_fn($author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables, variant.X);
        }
    }
};
var $author$project$ElmSyntaxToRust$destructuringToRustStatements_fn = function (context, toDestructure) {
    return _Utils_ap($elm$core$List$map_fn(function (bindingToIntroduce) {
        return $author$project$ElmSyntaxToRust$RustStatementLetDeclarationUninitialized({
            a: $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(bindingToIntroduce.a),
            n: $author$project$ElmSyntaxToRust$type__fn(context.cE, bindingToIntroduce.n)
        });
    }, $author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables(toDestructure.m)), $author$project$ElmSyntaxToRust$destructuringToRustAssignmentStatements_fn(context, { O: toDestructure.O, m: toDestructure.m }));
}, $author$project$ElmSyntaxToRust$destructuringToRustStatements = F2($author$project$ElmSyntaxToRust$destructuringToRustStatements_fn);
var $elm$core$List$drop_fn = function (n, list) {
    drop: while (true) {
        if (n <= 0) {
            return list;
        }
        else {
            if (!list.b) {
                return list;
            }
            else {
                var x = list.a;
                var xs = list.b;
                var $temp$n = n - 1, $temp$list = xs;
                n = $temp$n;
                list = $temp$list;
                continue drop;
            }
        }
    }
}, $elm$core$List$drop = F2($elm$core$List$drop_fn);
var $author$project$ElmSyntaxToRust$RustExpressionArrayLiteral = function (a) {
    return { $: 9, a: a };
};
var $author$project$ElmSyntaxToRust$RustExpressionDouble = function (a) {
    return { $: 0, a: a };
};
var $author$project$ElmSyntaxToRust$RustExpressionIfElse = function (a) {
    return { $: 13, a: a };
};
var $author$project$ElmSyntaxToRust$RustExpressionNegateOperation = function (a) {
    return { $: 6, a: a };
};
var $author$project$ElmSyntaxToRust$RustExpressionRecordAccess = function (a) {
    return { $: 7, a: a };
};
var $author$project$ElmSyntaxToRust$RustExpressionStringLiteral = function (a) {
    return { $: 2, a: a };
};
var $author$project$ElmSyntaxToRust$RustExpressionUnicodeScalar = function (a) {
    return { $: 1, a: a };
};
var $author$project$ElmSyntaxToRust$RustExpressionVariant = function (a) {
    return { $: 5, a: a };
};
var $author$project$ElmSyntaxToRust$RustStatementFuncDeclaration = function (a) {
    return { $: 2, a: a };
};
var $author$project$ElmSyntaxToRust$RustStatementIfElse = function (a) {
    return { $: 7, a: a };
};
var $author$project$ElmSyntaxToRust$generatedRustFillingOutVariableAtPath = function (path) {
    return "generated_" + $elm$core$String$join_fn("_", path);
};
var $miniBill$elm_fast_dict$FastSet$singleton = function (value) {
    return $miniBill$elm_fast_dict$FastDict$singleton_fn(value, false);
};
var $author$project$ElmSyntaxToRust$rustPatternIgnoreIntroducedVariablesSetEmptyVariableAsPatternAliasesDictEmpty = { x: $miniBill$elm_fast_dict$FastSet$empty, m: $author$project$ElmSyntaxToRust$RustPatternIgnore, I: $miniBill$elm_fast_dict$FastDict$empty };
var $author$project$ElmSyntaxToRust$rustPatternVariantTriple_fn = function (part0, part1, part2) {
    return $author$project$ElmSyntaxToRust$RustPatternVariant({
        a: "Triple",
        P: "Triple",
        X: _List_fromArray([
            { v: $elm$core$Maybe$Nothing, l: part0 },
            { v: $elm$core$Maybe$Nothing, l: part1 },
            { v: $elm$core$Maybe$Nothing, l: part2 }
        ])
    });
}, $author$project$ElmSyntaxToRust$rustPatternVariantTriple = F3($author$project$ElmSyntaxToRust$rustPatternVariantTriple_fn);
var $author$project$ElmSyntaxToRust$patternFillingOutIgnoredPartsWithNewVariables_fn = function (path, patternInferred) {
    patternFillingOutIgnoredPartsWithNewVariables: while (true) {
        var _v0 = patternInferred.l;
        switch (_v0.$) {
            case 0:
                return {
                    x: $miniBill$elm_fast_dict$FastSet$empty,
                    m: $author$project$ElmSyntaxToRust$RustPatternVariable($author$project$ElmSyntaxToRust$generatedRustFillingOutVariableAtPath(path)),
                    I: $miniBill$elm_fast_dict$FastDict$empty
                };
            case 4:
                return $author$project$ElmSyntaxToRust$rustPatternIgnoreIntroducedVariablesSetEmptyVariableAsPatternAliasesDictEmpty;
            case 5:
                var charValue = _v0.a;
                return {
                    x: $miniBill$elm_fast_dict$FastSet$empty,
                    m: $author$project$ElmSyntaxToRust$RustPatternUnicodeScalar(charValue),
                    I: $miniBill$elm_fast_dict$FastDict$empty
                };
            case 6:
                var stringValue = _v0.a;
                return {
                    x: $miniBill$elm_fast_dict$FastSet$empty,
                    m: $author$project$ElmSyntaxToRust$RustPatternStringLiteral(stringValue),
                    I: $miniBill$elm_fast_dict$FastDict$empty
                };
            case 7:
                var intValue = _v0.a;
                return {
                    x: $miniBill$elm_fast_dict$FastSet$empty,
                    m: $author$project$ElmSyntaxToRust$RustPatternInteger(intValue.l),
                    I: $miniBill$elm_fast_dict$FastDict$empty
                };
            case 1:
                var variableName = _v0.a;
                return {
                    x: $miniBill$elm_fast_dict$FastSet$singleton(variableName),
                    m: $author$project$ElmSyntaxToRust$RustPatternVariable($author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(variableName)),
                    I: $miniBill$elm_fast_dict$FastDict$empty
                };
            case 2:
                var inParens = _v0.a;
                var $temp$path = path, $temp$patternInferred = inParens;
                path = $temp$path;
                patternInferred = $temp$patternInferred;
                continue patternFillingOutIgnoredPartsWithNewVariables;
            case 8:
                var parts = _v0.a;
                var part1 = $author$project$ElmSyntaxToRust$patternFillingOutIgnoredPartsWithNewVariables_fn(_List_Cons("1", path), parts.t);
                var part0 = $author$project$ElmSyntaxToRust$patternFillingOutIgnoredPartsWithNewVariables_fn(_List_Cons("0", path), parts.s);
                return {
                    x: $miniBill$elm_fast_dict$FastSet$union_fn(part0.x, part1.x),
                    m: $author$project$ElmSyntaxToRust$rustPatternVariantTuple_fn(part0.m, part1.m),
                    I: $miniBill$elm_fast_dict$FastDict$union_fn(part1.I, part0.I)
                };
            case 9:
                var parts = _v0.a;
                var part2 = $author$project$ElmSyntaxToRust$patternFillingOutIgnoredPartsWithNewVariables_fn(_List_Cons("2", path), parts.ak);
                var part1 = $author$project$ElmSyntaxToRust$patternFillingOutIgnoredPartsWithNewVariables_fn(_List_Cons("1", path), parts.t);
                var part0 = $author$project$ElmSyntaxToRust$patternFillingOutIgnoredPartsWithNewVariables_fn(_List_Cons("0", path), parts.s);
                return {
                    x: $miniBill$elm_fast_dict$FastSet$union_fn(part2.x, $miniBill$elm_fast_dict$FastSet$union_fn(part1.x, part0.x)),
                    m: $author$project$ElmSyntaxToRust$rustPatternVariantTriple_fn(part0.m, part1.m, part2.m),
                    I: $miniBill$elm_fast_dict$FastDict$union_fn(part2.I, $miniBill$elm_fast_dict$FastDict$union_fn(part1.I, part0.I))
                };
            case 10:
                var patternFields = _v0.a;
                var allFields = function () {
                    var _v5 = patternInferred.n;
                    if (!_v5.$) {
                        return $miniBill$elm_fast_dict$FastDict$empty;
                    }
                    else {
                        var patternTypeNotVariable = _v5.a;
                        switch (patternTypeNotVariable.$) {
                            case 0:
                                return $miniBill$elm_fast_dict$FastDict$empty;
                            case 1:
                                return $miniBill$elm_fast_dict$FastDict$empty;
                            case 2:
                                return $miniBill$elm_fast_dict$FastDict$empty;
                            case 3:
                                return $miniBill$elm_fast_dict$FastDict$empty;
                            case 4:
                                var patternTypeRecordFields = patternTypeNotVariable.a;
                                return patternTypeRecordFields;
                            case 5:
                                return $miniBill$elm_fast_dict$FastDict$empty;
                            default:
                                return $miniBill$elm_fast_dict$FastDict$empty;
                        }
                    }
                }();
                var combinedFieldNames = $miniBill$elm_fast_dict$FastDict$merge_fn(F3(function (fieldName, _v1, soFar) {
                    return {
                        F: $miniBill$elm_fast_dict$FastDict$insert_fn($author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(fieldName), $author$project$ElmSyntaxToRust$RustPatternVariable($author$project$ElmSyntaxToRust$generatedRustFillingOutVariableAtPath(_List_Cons(fieldName, path))), soFar.F),
                        x: soFar.x
                    };
                }), F4(function (fieldName, _v2, _v3, soFar) {
                    var disambiguatedFieldName = $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(fieldName);
                    return {
                        F: $miniBill$elm_fast_dict$FastDict$insert_fn(disambiguatedFieldName, $author$project$ElmSyntaxToRust$RustPatternVariable(disambiguatedFieldName), soFar.F),
                        x: $miniBill$elm_fast_dict$FastSet$insert_fn(fieldName, soFar.x)
                    };
                }), F3(function (fieldName, _v4, soFar) {
                    var disambiguatedFieldName = $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(fieldName);
                    return {
                        F: $miniBill$elm_fast_dict$FastDict$insert_fn(disambiguatedFieldName, $author$project$ElmSyntaxToRust$RustPatternVariable(disambiguatedFieldName), soFar.F),
                        x: $miniBill$elm_fast_dict$FastSet$insert_fn(fieldName, soFar.x)
                    };
                }), allFields, $elm$core$List$foldl_fn_unwrapped(function (fieldNameTypedNode, soFar) {
                    return $miniBill$elm_fast_dict$FastDict$insert_fn(fieldNameTypedNode.l, 0, soFar);
                }, $miniBill$elm_fast_dict$FastDict$empty, patternFields), $author$project$ElmSyntaxToRust$fieldsDictEmptyIntroducedVariablesDictEmpty);
                return {
                    x: combinedFieldNames.x,
                    m: $author$project$ElmSyntaxToRust$RustPatternVariant({
                        a: "Record",
                        P: $author$project$ElmSyntaxToRust$generatedRecordTypeName($miniBill$elm_fast_dict$FastDict$keys(combinedFieldNames.F)),
                        X: $miniBill$elm_fast_dict$FastDict$foldr_fn(F3(function (fieldName, fieldValue, soFar) {
                            return _List_Cons({
                                v: $elm$core$Maybe$Just(fieldName),
                                l: fieldValue
                            }, soFar);
                        }), _List_Nil, combinedFieldNames.F)
                    }),
                    I: $miniBill$elm_fast_dict$FastDict$empty
                };
            case 11:
                var listCons = _v0.a;
                var tail = $author$project$ElmSyntaxToRust$patternFillingOutIgnoredPartsWithNewVariables_fn(_List_Cons("tail", path), listCons.cY);
                var head = $author$project$ElmSyntaxToRust$patternFillingOutIgnoredPartsWithNewVariables_fn(_List_Cons("head", path), listCons.b0);
                return {
                    x: $miniBill$elm_fast_dict$FastSet$union_fn(head.x, tail.x),
                    m: $author$project$ElmSyntaxToRust$rustPatternListCons_fn(head.m, tail.m),
                    I: $miniBill$elm_fast_dict$FastDict$union_fn(tail.I, head.I)
                };
            case 12:
                var elementPatterns = _v0.a;
                var elements = $elm$core$List$indexedMap_fn_unwrapped(function (elementIndex, element) {
                    return $author$project$ElmSyntaxToRust$patternFillingOutIgnoredPartsWithNewVariables_fn(_List_Cons($elm$core$String$fromInt(elementIndex), path), element);
                }, elementPatterns);
                return {
                    x: $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn(function ($) {
                        return $.x;
                    }, elements),
                    m: $elm$core$List$foldr_fn(F2(function (element, soFar) {
                        return $author$project$ElmSyntaxToRust$rustPatternListCons_fn(element.m, soFar);
                    }), $author$project$ElmSyntaxToRust$rustPatternListEmpty, elements),
                    I: $author$project$ElmSyntaxToRust$listMapToFastDictsAndUnify_fn(function ($) {
                        return $.I;
                    }, elements)
                };
            case 13:
                var variant = _v0.a;
                var asBool = function () {
                    var _v9 = variant.b;
                    if (_v9 === "Basics") {
                        var _v10 = variant.a;
                        switch (_v10) {
                            case "True":
                                return $elm$core$Maybe$Just(true);
                            case "False":
                                return $elm$core$Maybe$Just(false);
                            default:
                                return $elm$core$Maybe$Nothing;
                        }
                    }
                    else {
                        return $elm$core$Maybe$Nothing;
                    }
                }();
                if (!asBool.$) {
                    var bool = asBool.a;
                    return {
                        x: $miniBill$elm_fast_dict$FastSet$empty,
                        m: $author$project$ElmSyntaxToRust$RustPatternBool(bool),
                        I: $miniBill$elm_fast_dict$FastDict$empty
                    };
                }
                else {
                    var values = $elm$core$List$indexedMap_fn_unwrapped(function (valueIndex, value) {
                        return $author$project$ElmSyntaxToRust$patternFillingOutIgnoredPartsWithNewVariables_fn(_List_Cons($elm$core$String$fromInt(valueIndex), path), value);
                    }, variant.X);
                    var reference = function () {
                        var _v8 = $author$project$ElmSyntaxToRust$referenceToCoreRust({ b: variant.b, a: variant.a, n: patternInferred.n });
                        if (!_v8.$) {
                            var rustReference = _v8.a;
                            return rustReference;
                        }
                        else {
                            return {
                                b: $elm$core$Maybe$Nothing,
                                a: $author$project$ElmSyntaxToRust$referenceToRustName({ b: variant.b, a: variant.a })
                            };
                        }
                    }();
                    return {
                        x: $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn(function ($) {
                            return $.x;
                        }, values),
                        m: $author$project$ElmSyntaxToRust$RustPatternVariant({
                            a: reference.a,
                            P: $elm$core$String$replace_fn(".", "", variant.b) + ("_" + variant.c0),
                            X: $elm$core$List$map_fn(function (value) {
                                return { v: $elm$core$Maybe$Nothing, l: value.m };
                            }, values)
                        }),
                        I: $author$project$ElmSyntaxToRust$listMapToFastDictsAndUnify_fn(function ($) {
                            return $.I;
                        }, values)
                    };
                }
            default:
                var patternAs = _v0.a;
                var variableDisambiguated = $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(patternAs.bm.l);
                var aliasedPattern = $author$project$ElmSyntaxToRust$patternFillingOutIgnoredPartsWithNewVariables_fn(path, patternAs.m);
                return {
                    x: $miniBill$elm_fast_dict$FastSet$insert_fn(variableDisambiguated, aliasedPattern.x),
                    m: aliasedPattern.m,
                    I: $miniBill$elm_fast_dict$FastDict$insert_fn(variableDisambiguated, { m: aliasedPattern.m, n: patternAs.m.n }, aliasedPattern.I)
                };
        }
    }
}, $author$project$ElmSyntaxToRust$patternFillingOutIgnoredPartsWithNewVariables = F2($author$project$ElmSyntaxToRust$patternFillingOutIgnoredPartsWithNewVariables_fn);
var $author$project$ElmSyntaxToRust$casePatternInPath_fn = function (path, patternInferred) {
    casePatternInPath: while (true) {
        var _v0 = patternInferred.l;
        switch (_v0.$) {
            case 0:
                return $author$project$ElmSyntaxToRust$rustPatternIgnoreIntroducedVariablesSetEmptyVariableAsPatternAliasesDictEmpty;
            case 4:
                return $author$project$ElmSyntaxToRust$rustPatternIgnoreIntroducedVariablesSetEmptyVariableAsPatternAliasesDictEmpty;
            case 5:
                var charValue = _v0.a;
                return {
                    x: $miniBill$elm_fast_dict$FastSet$empty,
                    m: $author$project$ElmSyntaxToRust$RustPatternUnicodeScalar(charValue),
                    I: $miniBill$elm_fast_dict$FastDict$empty
                };
            case 6:
                var stringValue = _v0.a;
                return {
                    x: $miniBill$elm_fast_dict$FastSet$empty,
                    m: $author$project$ElmSyntaxToRust$RustPatternStringLiteral(stringValue),
                    I: $miniBill$elm_fast_dict$FastDict$empty
                };
            case 7:
                var intValue = _v0.a;
                return {
                    x: $miniBill$elm_fast_dict$FastSet$empty,
                    m: $author$project$ElmSyntaxToRust$RustPatternInteger(intValue.l),
                    I: $miniBill$elm_fast_dict$FastDict$empty
                };
            case 1:
                var variableName = _v0.a;
                return {
                    x: $miniBill$elm_fast_dict$FastSet$singleton(variableName),
                    m: $author$project$ElmSyntaxToRust$RustPatternVariable($author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(variableName)),
                    I: $miniBill$elm_fast_dict$FastDict$empty
                };
            case 2:
                var inParens = _v0.a;
                var $temp$path = path, $temp$patternInferred = inParens;
                path = $temp$path;
                patternInferred = $temp$patternInferred;
                continue casePatternInPath;
            case 8:
                var parts = _v0.a;
                var part1 = $author$project$ElmSyntaxToRust$casePatternInPath_fn(_List_Cons("1", path), parts.t);
                var part0 = $author$project$ElmSyntaxToRust$casePatternInPath_fn(_List_Cons("0", path), parts.s);
                return {
                    x: $miniBill$elm_fast_dict$FastSet$union_fn(part0.x, part1.x),
                    m: $author$project$ElmSyntaxToRust$rustPatternVariantTuple_fn(part0.m, part1.m),
                    I: $miniBill$elm_fast_dict$FastDict$union_fn(part1.I, part0.I)
                };
            case 9:
                var parts = _v0.a;
                var part2 = $author$project$ElmSyntaxToRust$casePatternInPath_fn(_List_Cons("2", path), parts.ak);
                var part1 = $author$project$ElmSyntaxToRust$casePatternInPath_fn(_List_Cons("1", path), parts.t);
                var part0 = $author$project$ElmSyntaxToRust$casePatternInPath_fn(_List_Cons("0", path), parts.s);
                return {
                    x: $miniBill$elm_fast_dict$FastSet$union_fn(part2.x, $miniBill$elm_fast_dict$FastSet$union_fn(part1.x, part0.x)),
                    m: $author$project$ElmSyntaxToRust$rustPatternVariantTriple_fn(part0.m, part1.m, part2.m),
                    I: $miniBill$elm_fast_dict$FastDict$union_fn(part2.I, $miniBill$elm_fast_dict$FastDict$union_fn(part1.I, part0.I))
                };
            case 10:
                var patternFields = _v0.a;
                var allFields = function () {
                    var _v5 = patternInferred.n;
                    if (!_v5.$) {
                        return $miniBill$elm_fast_dict$FastDict$empty;
                    }
                    else {
                        var patternTypeNotVariable = _v5.a;
                        switch (patternTypeNotVariable.$) {
                            case 0:
                                return $miniBill$elm_fast_dict$FastDict$empty;
                            case 1:
                                return $miniBill$elm_fast_dict$FastDict$empty;
                            case 2:
                                return $miniBill$elm_fast_dict$FastDict$empty;
                            case 3:
                                return $miniBill$elm_fast_dict$FastDict$empty;
                            case 4:
                                var patternTypeRecordFields = patternTypeNotVariable.a;
                                return patternTypeRecordFields;
                            case 5:
                                return $miniBill$elm_fast_dict$FastDict$empty;
                            default:
                                return $miniBill$elm_fast_dict$FastDict$empty;
                        }
                    }
                }();
                var combinedFieldNames = $miniBill$elm_fast_dict$FastDict$merge_fn(F3(function (fieldName, _v1, soFar) {
                    return {
                        F: $miniBill$elm_fast_dict$FastDict$insert_fn($author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(fieldName), $author$project$ElmSyntaxToRust$RustPatternIgnore, soFar.F),
                        x: soFar.x
                    };
                }), F4(function (fieldName, _v2, _v3, soFar) {
                    var disambiguatedFieldName = $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(fieldName);
                    return {
                        F: $miniBill$elm_fast_dict$FastDict$insert_fn(disambiguatedFieldName, $author$project$ElmSyntaxToRust$RustPatternVariable(disambiguatedFieldName), soFar.F),
                        x: $miniBill$elm_fast_dict$FastSet$insert_fn(fieldName, soFar.x)
                    };
                }), F3(function (fieldName, _v4, soFar) {
                    var disambiguatedFieldName = $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(fieldName);
                    return {
                        F: $miniBill$elm_fast_dict$FastDict$insert_fn(disambiguatedFieldName, $author$project$ElmSyntaxToRust$RustPatternVariable(disambiguatedFieldName), soFar.F),
                        x: $miniBill$elm_fast_dict$FastSet$insert_fn(fieldName, soFar.x)
                    };
                }), allFields, $elm$core$List$foldl_fn_unwrapped(function (fieldNameTypedNode, soFar) {
                    return $miniBill$elm_fast_dict$FastDict$insert_fn(fieldNameTypedNode.l, 0, soFar);
                }, $miniBill$elm_fast_dict$FastDict$empty, patternFields), $author$project$ElmSyntaxToRust$fieldsDictEmptyIntroducedVariablesDictEmpty);
                return {
                    x: combinedFieldNames.x,
                    m: $author$project$ElmSyntaxToRust$RustPatternVariant({
                        a: "Record",
                        P: $author$project$ElmSyntaxToRust$generatedRecordTypeName($miniBill$elm_fast_dict$FastDict$keys(combinedFieldNames.F)),
                        X: $miniBill$elm_fast_dict$FastDict$foldr_fn(F3(function (fieldName, fieldValue, soFar) {
                            return _List_Cons({
                                v: $elm$core$Maybe$Just(fieldName),
                                l: fieldValue
                            }, soFar);
                        }), _List_Nil, combinedFieldNames.F)
                    }),
                    I: $miniBill$elm_fast_dict$FastDict$empty
                };
            case 11:
                var listCons = _v0.a;
                var tail = $author$project$ElmSyntaxToRust$casePatternInPath_fn(_List_Cons("tail", path), listCons.cY);
                var head = $author$project$ElmSyntaxToRust$casePatternInPath_fn(_List_Cons("head", path), listCons.b0);
                return {
                    x: $miniBill$elm_fast_dict$FastSet$union_fn(head.x, tail.x),
                    m: $author$project$ElmSyntaxToRust$rustPatternListCons_fn(head.m, tail.m),
                    I: $miniBill$elm_fast_dict$FastDict$union_fn(tail.I, head.I)
                };
            case 12:
                var elementPatterns = _v0.a;
                var elements = $elm$core$List$indexedMap_fn_unwrapped(function (elementIndex, element) {
                    return $author$project$ElmSyntaxToRust$casePatternInPath_fn(_List_Cons($elm$core$String$fromInt(elementIndex), path), element);
                }, elementPatterns);
                return {
                    x: $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn(function ($) {
                        return $.x;
                    }, elements),
                    m: $elm$core$List$foldr_fn(F2(function (element, soFar) {
                        return $author$project$ElmSyntaxToRust$rustPatternListCons_fn(element.m, soFar);
                    }), $author$project$ElmSyntaxToRust$rustPatternListEmpty, elements),
                    I: $author$project$ElmSyntaxToRust$listMapToFastDictsAndUnify_fn(function ($) {
                        return $.I;
                    }, elements)
                };
            case 13:
                var variant = _v0.a;
                var asBool = function () {
                    var _v9 = variant.b;
                    if (_v9 === "Basics") {
                        var _v10 = variant.a;
                        switch (_v10) {
                            case "True":
                                return $elm$core$Maybe$Just(true);
                            case "False":
                                return $elm$core$Maybe$Just(false);
                            default:
                                return $elm$core$Maybe$Nothing;
                        }
                    }
                    else {
                        return $elm$core$Maybe$Nothing;
                    }
                }();
                if (!asBool.$) {
                    var bool = asBool.a;
                    return {
                        x: $miniBill$elm_fast_dict$FastSet$empty,
                        m: $author$project$ElmSyntaxToRust$RustPatternBool(bool),
                        I: $miniBill$elm_fast_dict$FastDict$empty
                    };
                }
                else {
                    var values = $elm$core$List$indexedMap_fn_unwrapped(function (valueIndex, value) {
                        return $author$project$ElmSyntaxToRust$casePatternInPath_fn(_List_Cons($elm$core$String$fromInt(valueIndex), path), value);
                    }, variant.X);
                    var reference = function () {
                        var _v8 = $author$project$ElmSyntaxToRust$referenceToCoreRust({ b: variant.b, a: variant.a, n: patternInferred.n });
                        if (!_v8.$) {
                            var rustReference = _v8.a;
                            return rustReference;
                        }
                        else {
                            return {
                                b: $elm$core$Maybe$Nothing,
                                a: $author$project$ElmSyntaxToRust$referenceToRustName({ b: variant.b, a: variant.a })
                            };
                        }
                    }();
                    return {
                        x: $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn(function ($) {
                            return $.x;
                        }, values),
                        m: $author$project$ElmSyntaxToRust$RustPatternVariant({
                            a: reference.a,
                            P: $elm$core$String$replace_fn(".", "", variant.b) + ("_" + variant.c0),
                            X: $elm$core$List$map_fn(function (value) {
                                return { v: $elm$core$Maybe$Nothing, l: value.m };
                            }, values)
                        }),
                        I: $author$project$ElmSyntaxToRust$listMapToFastDictsAndUnify_fn(function ($) {
                            return $.I;
                        }, values)
                    };
                }
            default:
                var patternAs = _v0.a;
                var aliasedPattern = $author$project$ElmSyntaxToRust$patternFillingOutIgnoredPartsWithNewVariables_fn(path, patternAs.m);
                return {
                    x: $miniBill$elm_fast_dict$FastSet$insert_fn(patternAs.bm.l, aliasedPattern.x),
                    m: aliasedPattern.m,
                    I: $miniBill$elm_fast_dict$FastDict$insert_fn($author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(patternAs.bm.l), { m: aliasedPattern.m, n: patternAs.m.n }, aliasedPattern.I)
                };
        }
    }
}, $author$project$ElmSyntaxToRust$casePatternInPath = F2($author$project$ElmSyntaxToRust$casePatternInPath_fn);
var $author$project$ElmSyntaxToRust$casePattern = function (patternInferred) {
    return $author$project$ElmSyntaxToRust$casePatternInPath_fn(_List_Nil, patternInferred);
};
var $author$project$ElmSyntaxToRust$inferredTypeString = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeNotVariable($lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$TypeConstruct({ c: _List_Nil, b: "String", a: "String" }));
var $author$project$ElmSyntaxToRust$okReferenceAdd = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "Basics_add" });
var $author$project$ElmSyntaxToRust$okReferenceAnd = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "Basics_and" });
var $author$project$ElmSyntaxToRust$okReferenceApL = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "Basics_apL" });
var $author$project$ElmSyntaxToRust$okReferenceApR = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "Basics_apR" });
var $author$project$ElmSyntaxToRust$okReferenceComposeL = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "Basics_composeL" });
var $author$project$ElmSyntaxToRust$okReferenceComposeR = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "Basics_composeR" });
var $author$project$ElmSyntaxToRust$okReferenceEq = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "Basics_eq" });
var $author$project$ElmSyntaxToRust$okReferenceFdiv = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "Basics_fdiv" });
var $author$project$ElmSyntaxToRust$okReferenceGe = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "Basics_ge" });
var $author$project$ElmSyntaxToRust$okReferenceGt = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "Basics_gt" });
var $author$project$ElmSyntaxToRust$okReferenceIdiv = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "Basics_idiv" });
var $author$project$ElmSyntaxToRust$okReferenceLe = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "Basics_le" });
var $author$project$ElmSyntaxToRust$okReferenceListAppend = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "List_append" });
var $author$project$ElmSyntaxToRust$okReferenceListCons = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "List_cons" });
var $author$project$ElmSyntaxToRust$okReferenceLt = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "Basics_lt" });
var $author$project$ElmSyntaxToRust$okReferenceMul = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "Basics_mul" });
var $author$project$ElmSyntaxToRust$okReferenceNeq = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "Basics_neq" });
var $author$project$ElmSyntaxToRust$okReferenceOr = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "Basics_or" });
var $author$project$ElmSyntaxToRust$okReferenceParserAdvancedIgnorer = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "ParserAdvanced_ignorer" });
var $author$project$ElmSyntaxToRust$okReferenceParserAdvancedKeeper = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "ParserAdvanced_keeper" });
var $author$project$ElmSyntaxToRust$okReferencePow = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "Basics_pow" });
var $author$project$ElmSyntaxToRust$okReferenceStringAppend = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "String_append" });
var $author$project$ElmSyntaxToRust$okReferenceSub = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "Basics_sub" });
var $author$project$ElmSyntaxToRust$okReferenceUrlParserQuestionMark = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "UrlParser_questionMark" });
var $author$project$ElmSyntaxToRust$okReferenceUrlParserSlash = $elm$core$Result$Ok({ b: $elm$core$Maybe$Nothing, a: "UrlParser_slash" });
var $author$project$ElmSyntaxToRust$expressionOperatorToRustFunctionReference = function (operator) {
    var _v0 = operator.cX;
    switch (_v0) {
        case "+":
            return $author$project$ElmSyntaxToRust$okReferenceAdd;
        case "-":
            return $author$project$ElmSyntaxToRust$okReferenceSub;
        case "*":
            return $author$project$ElmSyntaxToRust$okReferenceMul;
        case "/":
            return $author$project$ElmSyntaxToRust$okReferenceFdiv;
        case "//":
            return $author$project$ElmSyntaxToRust$okReferenceIdiv;
        case "^":
            return $author$project$ElmSyntaxToRust$okReferencePow;
        case "==":
            return $author$project$ElmSyntaxToRust$okReferenceEq;
        case "/=":
            return $author$project$ElmSyntaxToRust$okReferenceNeq;
        case "||":
            return $author$project$ElmSyntaxToRust$okReferenceOr;
        case "&&":
            return $author$project$ElmSyntaxToRust$okReferenceAnd;
        case "<":
            return $author$project$ElmSyntaxToRust$okReferenceLt;
        case ">":
            return $author$project$ElmSyntaxToRust$okReferenceGt;
        case "<=":
            return $author$project$ElmSyntaxToRust$okReferenceLe;
        case ">=":
            return $author$project$ElmSyntaxToRust$okReferenceGe;
        case "::":
            return $author$project$ElmSyntaxToRust$okReferenceListCons;
        case "++":
            var _v1 = operator.n;
            if ((_v1.$ === 1) && (_v1.a.$ === 6)) {
                var typeFunction = _v1.a.a;
                return _Utils_eq(typeFunction.e, $author$project$ElmSyntaxToRust$inferredTypeString) ? $author$project$ElmSyntaxToRust$okReferenceStringAppend : $author$project$ElmSyntaxToRust$okReferenceListAppend;
            }
            else {
                return $author$project$ElmSyntaxToRust$okReferenceListAppend;
            }
        case "|>":
            return $author$project$ElmSyntaxToRust$okReferenceApR;
        case "<|":
            return $author$project$ElmSyntaxToRust$okReferenceApL;
        case ">>":
            return $author$project$ElmSyntaxToRust$okReferenceComposeR;
        case "<<":
            return $author$project$ElmSyntaxToRust$okReferenceComposeL;
        case "|=":
            return $author$project$ElmSyntaxToRust$okReferenceParserAdvancedKeeper;
        case "|.":
            return $author$project$ElmSyntaxToRust$okReferenceParserAdvancedIgnorer;
        case "</>":
            return $author$project$ElmSyntaxToRust$okReferenceUrlParserSlash;
        case "<?>":
            return $author$project$ElmSyntaxToRust$okReferenceUrlParserQuestionMark;
        default:
            var unknownOrUnsupportedOperator = _v0;
            return $elm$core$Result$Err("unknown/unsupported operator " + unknownOrUnsupportedOperator);
    }
};
var $author$project$ElmSyntaxToRust$generatedAccessedRecordVariableName = "generated_record";
var $author$project$ElmSyntaxToRust$generatedFieldValueParameterName = function (fieldName) {
    return "generated_" + fieldName;
};
var $author$project$ElmSyntaxToRust$generatedParameterNameForIndexAtPath_fn = function (index, path) {
    return "generated_" + ($elm$core$String$join_fn("_", path) + ("_" + $elm$core$String$fromInt(index)));
}, $author$project$ElmSyntaxToRust$generatedParameterNameForIndexAtPath = F2($author$project$ElmSyntaxToRust$generatedParameterNameForIndexAtPath_fn);
var $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences = function (inferredExpressionTypedNode) {
    return $author$project$ElmSyntaxToRust$inferredExpressionUsedLocalReferences(inferredExpressionTypedNode.l);
};
var $author$project$ElmSyntaxToRust$inferredExpressionUsedLocalReferences = function (inferredExpression) {
    switch (inferredExpression.$) {
        case 0:
            return $miniBill$elm_fast_dict$FastSet$empty;
        case 6:
            return $miniBill$elm_fast_dict$FastSet$empty;
        case 7:
            return $miniBill$elm_fast_dict$FastSet$empty;
        case 1:
            return $miniBill$elm_fast_dict$FastSet$empty;
        case 2:
            return $miniBill$elm_fast_dict$FastSet$empty;
        case 4:
            return $miniBill$elm_fast_dict$FastSet$empty;
        case 3:
            return $miniBill$elm_fast_dict$FastSet$empty;
        case 8:
            return $miniBill$elm_fast_dict$FastSet$empty;
        case 9:
            return $miniBill$elm_fast_dict$FastSet$empty;
        case 5:
            var reference = inferredExpression.a;
            var _v2 = reference.b;
            if (_v2 === "") {
                return $miniBill$elm_fast_dict$FastSet$singleton(reference.a);
            }
            else {
                return $miniBill$elm_fast_dict$FastSet$empty;
            }
        case 11:
            var inParens = inferredExpression.a;
            return $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(inParens);
        case 10:
            var inNegation = inferredExpression.a;
            return $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(inNegation);
        case 21:
            var lambda = inferredExpression.a;
            return $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(lambda.h);
        case 14:
            var recordAccess = inferredExpression.a;
            return $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(recordAccess.aY);
        case 15:
            var infixOperation = inferredExpression.a;
            return $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(infixOperation.cV), $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(infixOperation.cw));
        case 12:
            var parts = inferredExpression.a;
            return $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(parts.t), $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(parts.s));
        case 13:
            var parts = inferredExpression.a;
            return $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(parts.ak), $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(parts.t), $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(parts.s)));
        case 16:
            var ifThenElse = inferredExpression.a;
            return $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(ifThenElse.aB), $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(ifThenElse.aC), $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(ifThenElse.aA)));
        case 17:
            var elements = inferredExpression.a;
            return $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn($author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences, elements);
        case 19:
            var fields = inferredExpression.a;
            return $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn(function (field) {
                return $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(field.l);
            }, fields);
        case 20:
            var recordUpdate = inferredExpression.a;
            return $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn(function (field) {
                return $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(field.l);
            }, recordUpdate.d5), $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(recordUpdate.d4.l), function () {
                var _v3 = recordUpdate.V.l.b;
                if (_v3 === "") {
                    return $miniBill$elm_fast_dict$FastSet$empty;
                }
                else {
                    return $miniBill$elm_fast_dict$FastSet$singleton(recordUpdate.V.l.a);
                }
            }()));
        case 22:
            var caseOf = inferredExpression.a;
            return $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn(function (laterCase) {
                return $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(laterCase.h);
            }, caseOf.as), $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(caseOf.ar.h), $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(caseOf.at)));
        case 18:
            var call = inferredExpression.a;
            return $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn($author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences, call.dS), $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(call.dR), $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(call.w)));
        default:
            var letIn = inferredExpression.a;
            return $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn(function (letDeclarationNode) {
                return $author$project$ElmSyntaxToRust$inferredLetDeclarationUsedLocalReferences(letDeclarationNode.L);
            }, letIn.c5), $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$inferredLetDeclarationUsedLocalReferences(letIn.c4.L), $author$project$ElmSyntaxToRust$inferredExpressionTypedNodeUsedLocalReferences(letIn.h)));
    }
};
var $author$project$ElmSyntaxToRust$inferredLetDeclarationUsedLocalReferences = function (inferredLetDeclaration) {
    if (inferredLetDeclaration.$ === 1) {
        var inferredLetValueOrFunctionDeclaration = inferredLetDeclaration.a;
        return $author$project$ElmSyntaxToRust$inferredExpressionUsedLocalReferences(inferredLetValueOrFunctionDeclaration.h.l);
    }
    else {
        var inferredLetDestructuring = inferredLetDeclaration.a;
        return $author$project$ElmSyntaxToRust$inferredExpressionUsedLocalReferences(inferredLetDestructuring.O.l);
    }
};
var $author$project$ElmSyntaxToRust$destructuringHasBeenInsertedFalseLeastToMostDependedOnListEmpty = { cr: false, br: _List_Nil };
var $author$project$ElmSyntaxToRust$fastSetAny_fn = function (isFound, fastSet) {
    return $miniBill$elm_fast_dict$FastSet$foldl_fn_unwrapped(function (element, soFar) {
        return soFar || isFound(element);
    }, false, fastSet);
}, $author$project$ElmSyntaxToRust$fastSetAny = F2($author$project$ElmSyntaxToRust$fastSetAny_fn);
var $author$project$ElmSyntaxToRust$fastSetsIntersect_fn = function (aSet, bSet) {
    return $author$project$ElmSyntaxToRust$fastSetAny_fn(function (aElement) {
        return $miniBill$elm_fast_dict$FastSet$member_fn(aElement, bSet);
    }, aSet);
}, $author$project$ElmSyntaxToRust$fastSetsIntersect = F2($author$project$ElmSyntaxToRust$fastSetsIntersect_fn);
var $author$project$ElmSyntaxToRust$fsharpLetDeclarationsInsertFsharpLetDestructuring_fn = function (fsharpLetDestructuringToInsert, existingLetDeclarationsMostToLeastDependedOn) {
    var variablesIntroducedInDestructuringPattern = $elm$core$List$foldl_fn_unwrapped(function (variable, soFar) {
        return $miniBill$elm_fast_dict$FastSet$insert_fn(variable.a, soFar);
    }, $miniBill$elm_fast_dict$FastSet$empty, $author$project$ElmSyntaxToRust$inferredPatternIntroducedVariables(fsharpLetDestructuringToInsert.L.m));
    var withLetDestructuring = $elm$core$List$foldl_fn_unwrapped(function (existingLetDeclaration, soFar) {
        if (soFar.cr) {
            return {
                cr: true,
                br: _List_Cons(existingLetDeclaration, soFar.br)
            };
        }
        else {
            var existingLetDeclarationUsedLocalReferences = $author$project$ElmSyntaxToRust$inferredLetDeclarationUsedLocalReferences(existingLetDeclaration.L);
            return $author$project$ElmSyntaxToRust$fastSetsIntersect_fn(variablesIntroducedInDestructuringPattern, existingLetDeclarationUsedLocalReferences) ? {
                cr: true,
                br: _List_Cons(existingLetDeclaration, _List_Cons({
                    L: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetDestructuring(fsharpLetDestructuringToInsert.L),
                    aN: fsharpLetDestructuringToInsert.aN
                }, soFar.br))
            } : {
                cr: false,
                br: _List_Cons(existingLetDeclaration, soFar.br)
            };
        }
    }, $author$project$ElmSyntaxToRust$destructuringHasBeenInsertedFalseLeastToMostDependedOnListEmpty, existingLetDeclarationsMostToLeastDependedOn);
    return withLetDestructuring.cr ? $elm$core$List$reverse(withLetDestructuring.br) : $elm$core$List$reverse(_List_Cons({
        L: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetDestructuring(fsharpLetDestructuringToInsert.L),
        aN: fsharpLetDestructuringToInsert.aN
    }, withLetDestructuring.br));
}, $author$project$ElmSyntaxToRust$fsharpLetDeclarationsInsertFsharpLetDestructuring = F2($author$project$ElmSyntaxToRust$fsharpLetDeclarationsInsertFsharpLetDestructuring_fn);
var $author$project$ElmSyntaxToRust$inferredLetDeclarationsInsertLetDestructurings_fn = function (fsharpLetDestructuringsToInsert, existingLetDeclarations) {
    return $elm$core$List$foldl_fn_unwrapped(function (fsharpLetDestructuringToInsert, soFar) {
        return $author$project$ElmSyntaxToRust$fsharpLetDeclarationsInsertFsharpLetDestructuring_fn(fsharpLetDestructuringToInsert, soFar);
    }, existingLetDeclarations, fsharpLetDestructuringsToInsert);
}, $author$project$ElmSyntaxToRust$inferredLetDeclarationsInsertLetDestructurings = F2($author$project$ElmSyntaxToRust$inferredLetDeclarationsInsertLetDestructurings_fn);
var $miniBill$elm_fast_dict$FastSet$toList = function (_v0) {
    var set = _v0;
    return $miniBill$elm_fast_dict$FastDict$keys(set);
};
var $author$project$ElmSyntaxToRust$inferredLetDeclarationNodesSortFromMostToLeastDependedOn = function (inferredLetDeclarationNodes) {
    var letValueOrFunctionDeclarations = $elm$core$List$filterMap_fn(function (inferredLetDeclarationNode) {
        var _v2 = inferredLetDeclarationNode.L;
        if (!_v2.$) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var inferredLetValueOrFunctionDeclaration = _v2.a;
            return $elm$core$Maybe$Just({ L: inferredLetValueOrFunctionDeclaration, aN: inferredLetDeclarationNode.aN });
        }
    }, inferredLetDeclarationNodes);
    var letDestructurings = $elm$core$List$filterMap_fn(function (inferredLetDeclarationNode) {
        var _v1 = inferredLetDeclarationNode.L;
        if (_v1.$ === 1) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var inferredLetDestructuring = _v1.a;
            return $elm$core$Maybe$Just({ L: inferredLetDestructuring, aN: inferredLetDeclarationNode.aN });
        }
    }, inferredLetDeclarationNodes);
    return $author$project$ElmSyntaxToRust$inferredLetDeclarationsInsertLetDestructurings_fn(letDestructurings, $elm$core$List$concatMap_fn(function (bucket) {
        if (!bucket.$) {
            var node = bucket.a;
            return _List_fromArray([node]);
        }
        else {
            var nodes = bucket.a;
            return nodes;
        }
    }, $author$project$Graph$stronglyConnComponents($elm$core$List$map_fn(function (inferredLetValueOrFunctionDeclarationNode) {
        return _Utils_Tuple3({
            L: $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$LetValueOrFunctionDeclaration(inferredLetValueOrFunctionDeclarationNode.L),
            aN: inferredLetValueOrFunctionDeclarationNode.aN
        }, inferredLetValueOrFunctionDeclarationNode.L.a, $miniBill$elm_fast_dict$FastSet$toList($author$project$ElmSyntaxToRust$inferredExpressionUsedLocalReferences(inferredLetValueOrFunctionDeclarationNode.L.h.l)));
    }, letValueOrFunctionDeclarations))));
};
var $author$project$ElmSyntaxToRust$inferredPatternBindings = function (syntaxPattern) {
    var _v0 = syntaxPattern.l;
    switch (_v0.$) {
        case 0:
            return _List_Nil;
        case 4:
            return _List_Nil;
        case 5:
            return _List_Nil;
        case 6:
            return _List_Nil;
        case 7:
            return _List_Nil;
        case 1:
            var name = _v0.a;
            return _List_fromArray([name]);
        case 3:
            var patternAs = _v0.a;
            return _List_Cons(patternAs.bm.l, $author$project$ElmSyntaxToRust$inferredPatternBindings(patternAs.m));
        case 2:
            var inParens = _v0.a;
            return $author$project$ElmSyntaxToRust$inferredPatternBindings(inParens);
        case 12:
            var elements = _v0.a;
            return $elm$core$List$concatMap_fn($author$project$ElmSyntaxToRust$inferredPatternBindings, elements);
        case 8:
            var parts = _v0.a;
            return _Utils_ap($author$project$ElmSyntaxToRust$inferredPatternBindings(parts.s), $author$project$ElmSyntaxToRust$inferredPatternBindings(parts.t));
        case 9:
            var parts = _v0.a;
            return _Utils_ap($author$project$ElmSyntaxToRust$inferredPatternBindings(parts.s), _Utils_ap($author$project$ElmSyntaxToRust$inferredPatternBindings(parts.t), $author$project$ElmSyntaxToRust$inferredPatternBindings(parts.ak)));
        case 10:
            var fields = _v0.a;
            return $elm$core$List$map_fn(function (field) {
                return field.l;
            }, fields);
        case 13:
            var patternVariant = _v0.a;
            return $elm$core$List$concatMap_fn($author$project$ElmSyntaxToRust$inferredPatternBindings, patternVariant.X);
        default:
            var listCons = _v0.a;
            return _Utils_ap($author$project$ElmSyntaxToRust$inferredPatternBindings(listCons.b0), $author$project$ElmSyntaxToRust$inferredPatternBindings(listCons.b0));
    }
};
var $author$project$ElmSyntaxToRust$inferredReferenceToInfoString = function (reference) {
    var _v0 = reference.b;
    if (_v0 === "") {
        return reference.a;
    }
    else {
        var moduleOriginNotEmpty = _v0;
        return moduleOriginNotEmpty + ("." + reference.a);
    }
};
var $author$project$ElmSyntaxToRust$inferredTypeContainedVariables = function (inferredType) {
    if (!inferredType.$) {
        var variable = inferredType.a;
        return $miniBill$elm_fast_dict$FastDict$singleton_fn(variable.a, variable.f);
    }
    else {
        var inferredTypeNotVariable = inferredType.a;
        return $author$project$ElmSyntaxToRust$inferredTypeNotVariableContainedVariables(inferredTypeNotVariable);
    }
};
var $author$project$ElmSyntaxToRust$inferredTypeNotVariableContainedVariables = function (inferredTypeNotVariable) {
    switch (inferredTypeNotVariable.$) {
        case 0:
            return $miniBill$elm_fast_dict$FastDict$empty;
        case 6:
            var typeFunction = inferredTypeNotVariable.a;
            return $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$inferredTypeContainedVariables(typeFunction.e), $author$project$ElmSyntaxToRust$inferredTypeContainedVariables(typeFunction.d));
        case 2:
            var typeTuple = inferredTypeNotVariable.a;
            return $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$inferredTypeContainedVariables(typeTuple.s), $author$project$ElmSyntaxToRust$inferredTypeContainedVariables(typeTuple.t));
        case 3:
            var typeTriple = inferredTypeNotVariable.a;
            return $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$inferredTypeContainedVariables(typeTriple.ak), $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$inferredTypeContainedVariables(typeTriple.t), $author$project$ElmSyntaxToRust$inferredTypeContainedVariables(typeTriple.s)));
        case 1:
            var typeConstruct = inferredTypeNotVariable.a;
            return $author$project$ElmSyntaxToRust$listMapToFastDictsAndUnify_fn($author$project$ElmSyntaxToRust$inferredTypeContainedVariables, typeConstruct.c);
        case 4:
            var typeRecordFields = inferredTypeNotVariable.a;
            return $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (_v1, value, soFar) {
                return $miniBill$elm_fast_dict$FastDict$union_fn(soFar, $author$project$ElmSyntaxToRust$inferredTypeContainedVariables(value));
            }), $miniBill$elm_fast_dict$FastDict$empty, typeRecordFields);
        default:
            var typeRecordExtension = inferredTypeNotVariable.a;
            return $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (_v2, value, soFar) {
                return $miniBill$elm_fast_dict$FastDict$union_fn(soFar, $author$project$ElmSyntaxToRust$inferredTypeContainedVariables(value));
            }), $miniBill$elm_fast_dict$FastDict$singleton_fn(typeRecordExtension.V.a, typeRecordExtension.V.f), typeRecordExtension.F);
    }
};
var $author$project$ElmSyntaxToRust$inferredTypeExpandFunction = function (inferredType) {
    if ((inferredType.$ === 1) && (inferredType.a.$ === 6)) {
        var typeFunction = inferredType.a.a;
        var outputExpanded = $author$project$ElmSyntaxToRust$inferredTypeExpandFunction(typeFunction.d);
        return {
            aj: _List_Cons(typeFunction.e, outputExpanded.aj),
            d: outputExpanded.d
        };
    }
    else {
        var typeNotFunction = inferredType;
        return { aj: _List_Nil, d: typeNotFunction };
    }
};
var $author$project$ElmSyntaxToRust$inferredTypeExpandFunctionIntoReverse_fn = function (soFarReverse, inferredType) {
    inferredTypeExpandFunctionIntoReverse: while (true) {
        if (!inferredType.$) {
            return {
                aj: $elm$core$List$reverse(soFarReverse),
                d: inferredType
            };
        }
        else {
            var inferredTypeNotVariable = inferredType.a;
            switch (inferredTypeNotVariable.$) {
                case 6:
                    var _function = inferredTypeNotVariable.a;
                    var $temp$soFarReverse = _List_Cons(_function.e, soFarReverse), $temp$inferredType = _function.d;
                    soFarReverse = $temp$soFarReverse;
                    inferredType = $temp$inferredType;
                    continue inferredTypeExpandFunctionIntoReverse;
                case 0:
                    return {
                        aj: $elm$core$List$reverse(soFarReverse),
                        d: inferredType
                    };
                case 1:
                    return {
                        aj: $elm$core$List$reverse(soFarReverse),
                        d: inferredType
                    };
                case 2:
                    return {
                        aj: $elm$core$List$reverse(soFarReverse),
                        d: inferredType
                    };
                case 3:
                    return {
                        aj: $elm$core$List$reverse(soFarReverse),
                        d: inferredType
                    };
                case 4:
                    return {
                        aj: $elm$core$List$reverse(soFarReverse),
                        d: inferredType
                    };
                default:
                    return {
                        aj: $elm$core$List$reverse(soFarReverse),
                        d: inferredType
                    };
            }
        }
    }
}, $author$project$ElmSyntaxToRust$inferredTypeExpandFunctionIntoReverse = F2($author$project$ElmSyntaxToRust$inferredTypeExpandFunctionIntoReverse_fn);
var $author$project$ElmSyntaxToRust$inferredTypeExpandToFunction = function (inferredType) {
    return $author$project$ElmSyntaxToRust$inferredTypeExpandFunctionIntoReverse_fn(_List_Nil, inferredType);
};
var $author$project$ElmSyntaxToRust$listOfFastDictsUnify = function (list) {
    return $elm$core$List$foldl_fn($miniBill$elm_fast_dict$FastDict$union, $miniBill$elm_fast_dict$FastDict$empty, list);
};
var $author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom_fn = function (originalInferredType, specializedInferredType) {
    if (!originalInferredType.$) {
        return $miniBill$elm_fast_dict$FastDict$empty;
    }
    else {
        var originalTypeNotVariable = originalInferredType.a;
        return $author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFromNotVariable_fn(originalTypeNotVariable, specializedInferredType);
    }
}, $author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom = F2($author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom_fn);
var $author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFromNotVariable_fn = function (originalTypeNotVariable, specializedInferredType) {
    switch (originalTypeNotVariable.$) {
        case 0:
            return $miniBill$elm_fast_dict$FastDict$empty;
        case 6:
            var originalTypeFunction = originalTypeNotVariable.a;
            if ((specializedInferredType.$ === 1) && (specializedInferredType.a.$ === 6)) {
                var inferredFunction = specializedInferredType.a.a;
                return $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom_fn(originalTypeFunction.d, inferredFunction.d), $author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom_fn(originalTypeFunction.e, inferredFunction.e));
            }
            else {
                return $miniBill$elm_fast_dict$FastDict$empty;
            }
        case 2:
            var originalParts = originalTypeNotVariable.a;
            if ((specializedInferredType.$ === 1) && (specializedInferredType.a.$ === 2)) {
                var inferredTuple = specializedInferredType.a.a;
                return $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom_fn(originalParts.t, inferredTuple.t), $author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom_fn(originalParts.s, inferredTuple.s));
            }
            else {
                return $miniBill$elm_fast_dict$FastDict$empty;
            }
        case 3:
            var originalParts = originalTypeNotVariable.a;
            if ((specializedInferredType.$ === 1) && (specializedInferredType.a.$ === 3)) {
                var inferredTriple = specializedInferredType.a.a;
                return $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom_fn(originalParts.ak, inferredTriple.ak), $miniBill$elm_fast_dict$FastDict$union_fn($author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom_fn(originalParts.t, inferredTriple.t), $author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom_fn(originalParts.s, inferredTriple.s)));
            }
            else {
                return $miniBill$elm_fast_dict$FastDict$empty;
            }
        case 1:
            var originalTypeConstruct = originalTypeNotVariable.a;
            if (!specializedInferredType.$) {
                return $miniBill$elm_fast_dict$FastDict$empty;
            }
            else {
                var inferredTypeNotVariable_ = specializedInferredType.a;
                switch (inferredTypeNotVariable_.$) {
                    case 1:
                        var inferredTypeConstruct = inferredTypeNotVariable_.a;
                        return $author$project$ElmSyntaxToRust$listOfFastDictsUnify(_List_map2_fn($author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom, originalTypeConstruct.c, inferredTypeConstruct.c));
                    case 0:
                        return $miniBill$elm_fast_dict$FastDict$empty;
                    case 2:
                        return $miniBill$elm_fast_dict$FastDict$empty;
                    case 3:
                        return $miniBill$elm_fast_dict$FastDict$empty;
                    case 4:
                        return $miniBill$elm_fast_dict$FastDict$empty;
                    case 5:
                        return $miniBill$elm_fast_dict$FastDict$empty;
                    default:
                        return $miniBill$elm_fast_dict$FastDict$empty;
                }
            }
        case 4:
            var originalFields = originalTypeNotVariable.a;
            if ((specializedInferredType.$ === 1) && (specializedInferredType.a.$ === 4)) {
                var inferredRecord = specializedInferredType.a.a;
                return $author$project$ElmSyntaxToRust$listOfFastDictsUnify(_List_map2_fn($author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom, $miniBill$elm_fast_dict$FastDict$values(originalFields), $miniBill$elm_fast_dict$FastDict$values(inferredRecord)));
            }
            else {
                return $miniBill$elm_fast_dict$FastDict$empty;
            }
        default:
            var originalTypeRecordExtension = originalTypeNotVariable.a;
            if (specializedInferredType.$ === 1) {
                var inferredTypeNotVariable_ = specializedInferredType.a;
                switch (inferredTypeNotVariable_.$) {
                    case 5:
                        var inferredRecordExtension = inferredTypeNotVariable_.a;
                        return $miniBill$elm_fast_dict$FastDict$merge_fn(F3(function (_v9, _v10, soFar) {
                            return soFar;
                        }), F4(function (_v11, originalValue, specializedValue, soFar) {
                            return $miniBill$elm_fast_dict$FastDict$union_fn(soFar, $author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom_fn(originalValue, specializedValue));
                        }), F3(function (_v12, _v13, soFar) {
                            return soFar;
                        }), originalTypeRecordExtension.F, inferredRecordExtension.F, $miniBill$elm_fast_dict$FastDict$empty);
                    case 4:
                        var inferredRecordFields = inferredTypeNotVariable_.a;
                        return $miniBill$elm_fast_dict$FastDict$insert_fn(originalTypeRecordExtension.V.a, $miniBill$elm_fast_dict$FastDict$keys(inferredRecordFields), $miniBill$elm_fast_dict$FastDict$merge_fn(F3(function (_v14, _v15, soFar) {
                            return soFar;
                        }), F4(function (_v16, originalValue, specializedValue, soFar) {
                            return $miniBill$elm_fast_dict$FastDict$union_fn(soFar, $author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom_fn(originalValue, specializedValue));
                        }), F3(function (_v17, _v18, soFar) {
                            return soFar;
                        }), originalTypeRecordExtension.F, inferredRecordFields, $miniBill$elm_fast_dict$FastDict$empty));
                    case 0:
                        return $miniBill$elm_fast_dict$FastDict$empty;
                    case 1:
                        return $miniBill$elm_fast_dict$FastDict$empty;
                    case 2:
                        return $miniBill$elm_fast_dict$FastDict$empty;
                    case 3:
                        return $miniBill$elm_fast_dict$FastDict$empty;
                    default:
                        return $miniBill$elm_fast_dict$FastDict$empty;
                }
            }
            else {
                return $miniBill$elm_fast_dict$FastDict$empty;
            }
    }
}, $author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFromNotVariable = F2($author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFromNotVariable_fn);
var $elm$core$List$isEmpty = function (xs) {
    if (!xs.b) {
        return true;
    }
    else {
        return false;
    }
};
var $author$project$ElmSyntaxToRust$listMapAndCombineOkFrom_fn = function (soFar, elementToResult, list) {
    listMapAndCombineOkFrom: while (true) {
        if (!list.b) {
            return $elm$core$Result$Ok($elm$core$List$reverse(soFar));
        }
        else {
            var head = list.a;
            var tail = list.b;
            var _v1 = elementToResult(head);
            if (_v1.$ === 1) {
                var headErr = _v1.a;
                return $elm$core$Result$Err(headErr);
            }
            else {
                var headOk = _v1.a;
                var $temp$soFar = _List_Cons(headOk, soFar), $temp$elementToResult = elementToResult, $temp$list = tail;
                soFar = $temp$soFar;
                elementToResult = $temp$elementToResult;
                list = $temp$list;
                continue listMapAndCombineOkFrom;
            }
        }
    }
}, $author$project$ElmSyntaxToRust$listMapAndCombineOkFrom = F3($author$project$ElmSyntaxToRust$listMapAndCombineOkFrom_fn);
var $author$project$ElmSyntaxToRust$listMapAndCombineOk_fn = function (elementToResult, list) {
    return $author$project$ElmSyntaxToRust$listMapAndCombineOkFrom_fn(_List_Nil, elementToResult, list);
}, $author$project$ElmSyntaxToRust$listMapAndCombineOk = F2($author$project$ElmSyntaxToRust$listMapAndCombineOk_fn);
var $author$project$ElmSyntaxToRust$RustExpressionRecord = function (a) {
    return { $: 10, a: a };
};
var $author$project$ElmSyntaxToRust$okResultRustExpressionRecordEmptyStatementsEmpty = $elm$core$Result$Ok({
    h: $author$project$ElmSyntaxToRust$RustExpressionRecord($miniBill$elm_fast_dict$FastDict$empty),
    j: _List_Nil
});
var $author$project$ElmSyntaxToRust$rustExpressionUnit = $author$project$ElmSyntaxToRust$RustExpressionVariant({ a: "Unit", P: "Unit" });
var $author$project$ElmSyntaxToRust$okResultRustExpressionUnitStatementsEmpty = $elm$core$Result$Ok({ h: $author$project$ElmSyntaxToRust$rustExpressionUnit, j: _List_Nil });
var $author$project$ElmSyntaxToRust$patternIntroducedVariables = function (inferredPattern) {
    switch (inferredPattern.$) {
        case 0:
            return $miniBill$elm_fast_dict$FastSet$empty;
        case 4:
            return $miniBill$elm_fast_dict$FastSet$empty;
        case 5:
            return $miniBill$elm_fast_dict$FastSet$empty;
        case 6:
            return $miniBill$elm_fast_dict$FastSet$empty;
        case 7:
            return $miniBill$elm_fast_dict$FastSet$empty;
        case 1:
            var variable = inferredPattern.a;
            return $miniBill$elm_fast_dict$FastSet$singleton(variable);
        case 2:
            var inParens = inferredPattern.a;
            return $author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables(inParens);
        case 3:
            var patternAs = inferredPattern.a;
            return $miniBill$elm_fast_dict$FastSet$insert_fn(patternAs.bm.l, $author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables(patternAs.m));
        case 8:
            var parts = inferredPattern.a;
            return $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables(parts.s), $author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables(parts.t));
        case 9:
            var parts = inferredPattern.a;
            return $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables(parts.s), $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables(parts.t), $author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables(parts.ak)));
        case 11:
            var patternListCons = inferredPattern.a;
            return $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables(patternListCons.b0), $author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables(patternListCons.cY));
        case 12:
            var elements = inferredPattern.a;
            return $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn(function (element) {
                return $author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables(element);
            }, elements);
        case 13:
            var patternVariant = inferredPattern.a;
            return $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn(function (value) {
                return $author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables(value);
            }, patternVariant.X);
        default:
            var fields = inferredPattern.a;
            return $elm$core$List$foldl_fn_unwrapped(function (fieldTypedNode, soFar) {
                return $miniBill$elm_fast_dict$FastSet$insert_fn(fieldTypedNode.l, soFar);
            }, $miniBill$elm_fast_dict$FastSet$empty, fields);
    }
};
var $author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables = function (patternTypedNode) {
    return $author$project$ElmSyntaxToRust$patternIntroducedVariables(patternTypedNode.l);
};
var $author$project$ElmSyntaxToRust$rangeIncludesRange_fn = function (toCheckForInclusion, baseRange) {
    return (((baseRange.cf.bu - toCheckForInclusion.cf.bu) < 0) || ((!(baseRange.cf.bu - toCheckForInclusion.cf.bu)) && ((baseRange.cf.cJ - toCheckForInclusion.cf.cJ) <= 0))) && (((baseRange.b_.bu - toCheckForInclusion.b_.bu) > 0) || ((!(baseRange.b_.bu - toCheckForInclusion.b_.bu)) && ((baseRange.b_.cJ - toCheckForInclusion.b_.cJ) >= 0)));
}, $author$project$ElmSyntaxToRust$rangeIncludesRange = F2($author$project$ElmSyntaxToRust$rangeIncludesRange_fn);
var $author$project$ElmSyntaxToRust$locationToInfoString = function (location) {
    return $elm$core$String$fromInt(location.bu) + (":" + $elm$core$String$fromInt(location.cJ));
};
var $author$project$ElmSyntaxToRust$rangeToInfoString = function (range) {
    return $author$project$ElmSyntaxToRust$locationToInfoString(range.cf) + ("-" + $author$project$ElmSyntaxToRust$locationToInfoString(range.b_));
};
var $author$project$ElmSyntaxToRust$RustExpressionTuple = function (a) {
    return { $: 8, a: a };
};
var $author$project$ElmSyntaxToRust$RustStatementRecordFieldAssignment = function (a) {
    return { $: 6, a: a };
};
var $author$project$ElmSyntaxToRust$RustStatementVarDeclaration = function (a) {
    return { $: 4, a: a };
};
var $author$project$ElmSyntaxToRust$rustPatternAlterBindingNames_fn = function (variableNameChange, inferredPattern) {
    switch (inferredPattern.$) {
        case 0:
            return $author$project$ElmSyntaxToRust$RustPatternIgnore;
        case 1:
            return inferredPattern;
        case 3:
            return inferredPattern;
        case 4:
            return inferredPattern;
        case 2:
            return inferredPattern;
        case 5:
            var existingVariable = inferredPattern.a;
            return $author$project$ElmSyntaxToRust$RustPatternVariable(variableNameChange(existingVariable));
        case 6:
            var fields = inferredPattern.a;
            return $author$project$ElmSyntaxToRust$RustPatternRecord($miniBill$elm_fast_dict$FastDict$map_fn(F2(function (_v1, fieldValue) {
                return $author$project$ElmSyntaxToRust$rustPatternAlterBindingNames_fn(variableNameChange, fieldValue);
            }), fields));
        case 7:
            var variant = inferredPattern.a;
            return $author$project$ElmSyntaxToRust$RustPatternVariant({
                a: variant.a,
                P: variant.P,
                X: $elm$core$List$map_fn(function (value) {
                    return {
                        v: value.v,
                        l: $author$project$ElmSyntaxToRust$rustPatternAlterBindingNames_fn(variableNameChange, value.l)
                    };
                }, variant.X)
            });
        default:
            var tuple = inferredPattern.a;
            return $author$project$ElmSyntaxToRust$RustPatternTuple({
                s: $author$project$ElmSyntaxToRust$rustPatternAlterBindingNames_fn(variableNameChange, tuple.s),
                t: $author$project$ElmSyntaxToRust$rustPatternAlterBindingNames_fn(variableNameChange, tuple.t),
                ao: $elm$core$List$map_fn(function (part) {
                    return $author$project$ElmSyntaxToRust$rustPatternAlterBindingNames_fn(variableNameChange, part);
                }, tuple.ao)
            });
    }
}, $author$project$ElmSyntaxToRust$rustPatternAlterBindingNames = F2($author$project$ElmSyntaxToRust$rustPatternAlterBindingNames_fn);
var $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn = function (variableNameChange, rustExpression) {
    switch (rustExpression.$) {
        case 0:
            return rustExpression;
        case 1:
            return rustExpression;
        case 2:
            return rustExpression;
        case 5:
            return rustExpression;
        case 3:
            return rustExpression;
        case 4:
            var reference = rustExpression.a;
            var _v2 = reference.b;
            if (!_v2.$) {
                return rustExpression;
            }
            else {
                return $author$project$ElmSyntaxToRust$RustExpressionReference({
                    b: $elm$core$Maybe$Nothing,
                    a: variableNameChange(reference.a)
                });
            }
        case 6:
            var inNegation = rustExpression.a;
            return $author$project$ElmSyntaxToRust$RustExpressionNegateOperation($author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn(variableNameChange, inNegation));
        case 7:
            var recordAccess = rustExpression.a;
            return $author$project$ElmSyntaxToRust$RustExpressionRecordAccess({
                bI: recordAccess.bI,
                aY: $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn(variableNameChange, recordAccess.aY)
            });
        case 12:
            var lambda = rustExpression.a;
            return $author$project$ElmSyntaxToRust$RustExpressionLambda({
                o: $elm$core$List$map_fn(function (parameter) {
                    return {
                        a: variableNameChange(parameter.a),
                        n: parameter.n
                    };
                }, lambda.o),
                h: $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn(variableNameChange, lambda.h),
                j: $elm$core$List$map_fn(function (statement) {
                    return $author$project$ElmSyntaxToRust$rustStatementAlterBindingNames_fn(variableNameChange, statement);
                }, lambda.j)
            });
        case 13:
            var ifElse = rustExpression.a;
            return $author$project$ElmSyntaxToRust$RustExpressionIfElse({
                aA: $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn(variableNameChange, ifElse.aA),
                aB: $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn(variableNameChange, ifElse.aB),
                aC: $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn(variableNameChange, ifElse.aC)
            });
        case 8:
            var parts = rustExpression.a;
            return $author$project$ElmSyntaxToRust$RustExpressionTuple({
                s: $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn(variableNameChange, parts.s),
                t: $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn(variableNameChange, parts.t),
                ao: $elm$core$List$map_fn(function (part) {
                    return $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn(variableNameChange, part);
                }, parts.ao)
            });
        case 9:
            var elements = rustExpression.a;
            return $author$project$ElmSyntaxToRust$RustExpressionArrayLiteral($elm$core$List$map_fn(function (element) {
                return $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn(variableNameChange, element);
            }, elements));
        case 10:
            var fields = rustExpression.a;
            return $author$project$ElmSyntaxToRust$RustExpressionRecord($miniBill$elm_fast_dict$FastDict$map_fn(F2(function (_v3, fieldValue) {
                return $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn(variableNameChange, fieldValue);
            }), fields));
        case 11:
            var call = rustExpression.a;
            return $author$project$ElmSyntaxToRust$RustExpressionCall({
                c: $elm$core$List$map_fn(function (argument) {
                    return {
                        v: argument.v,
                        l: $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn(variableNameChange, argument.l)
                    };
                }, call.c),
                w: $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn(variableNameChange, call.w)
            });
        default:
            var _switch = rustExpression.a;
            return $author$project$ElmSyntaxToRust$RustExpressionSwitch({
                ar: $author$project$ElmSyntaxToRust$rustExpressionSwitchCaseAlterBindingNames_fn(variableNameChange, _switch.ar),
                as: $elm$core$List$map_fn(function (switchCase) {
                    return $author$project$ElmSyntaxToRust$rustExpressionSwitchCaseAlterBindingNames_fn(variableNameChange, switchCase);
                }, _switch.as),
                at: $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn(variableNameChange, _switch.at)
            });
    }
}, $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames = F2($author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn);
var $author$project$ElmSyntaxToRust$rustExpressionSwitchCaseAlterBindingNames_fn = function (variableNameChange, rustCase) {
    return {
        m: $author$project$ElmSyntaxToRust$rustPatternAlterBindingNames_fn(variableNameChange, rustCase.m),
        h: $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn(variableNameChange, rustCase.h)
    };
}, $author$project$ElmSyntaxToRust$rustExpressionSwitchCaseAlterBindingNames = F2($author$project$ElmSyntaxToRust$rustExpressionSwitchCaseAlterBindingNames_fn);
var $author$project$ElmSyntaxToRust$rustStatementAlterBindingNames_fn = function (variableNameChange, rustStatement) {
    switch (rustStatement.$) {
        case 3:
            var existingName = rustStatement.a;
            return $author$project$ElmSyntaxToRust$RustStatementLetDeclarationUninitialized({
                a: variableNameChange(existingName.a),
                n: existingName.n
            });
        case 0:
            var letDestructuring = rustStatement.a;
            return $author$project$ElmSyntaxToRust$RustStatementLetDestructuring({
                O: $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn(variableNameChange, letDestructuring.O),
                m: $author$project$ElmSyntaxToRust$rustPatternAlterBindingNames_fn(variableNameChange, letDestructuring.m)
            });
        case 4:
            var varDeclaration = rustStatement.a;
            return $author$project$ElmSyntaxToRust$RustStatementVarDeclaration({
                a: variableNameChange(varDeclaration.a),
                l: $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn(variableNameChange, varDeclaration.l)
            });
        case 5:
            var assignment = rustStatement.a;
            return $author$project$ElmSyntaxToRust$RustStatementBindingAssignment({
                av: $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn(variableNameChange, assignment.av),
                a: variableNameChange(assignment.a)
            });
        case 6:
            var assignment = rustStatement.a;
            return $author$project$ElmSyntaxToRust$RustStatementRecordFieldAssignment({
                av: $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn(variableNameChange, assignment.av),
                cs: assignment.cs,
                cU: variableNameChange(assignment.cU)
            });
        case 1:
            var rustStatementLetDeclaration = rustStatement.a;
            return $author$project$ElmSyntaxToRust$RustStatementLetDeclaration({
                a: variableNameChange(rustStatementLetDeclaration.a),
                h: $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn(variableNameChange, rustStatementLetDeclaration.h),
                Q: rustStatementLetDeclaration.Q
            });
        case 2:
            var funcDeclaration = rustStatement.a;
            return $author$project$ElmSyntaxToRust$RustStatementFuncDeclaration({
                b2: funcDeclaration.b2,
                a: variableNameChange(funcDeclaration.a),
                o: $elm$core$List$map_fn(function (parameter) {
                    return {
                        a: variableNameChange(parameter.a),
                        n: parameter.n
                    };
                }, funcDeclaration.o),
                h: $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn(variableNameChange, funcDeclaration.h),
                Q: funcDeclaration.Q,
                j: $elm$core$List$map_fn(function (statement) {
                    return $author$project$ElmSyntaxToRust$rustStatementAlterBindingNames_fn(variableNameChange, statement);
                }, funcDeclaration.j)
            });
        case 7:
            var rustStatementIfElse = rustStatement.a;
            return $author$project$ElmSyntaxToRust$RustStatementIfElse({
                aA: $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn(variableNameChange, rustStatementIfElse.aA),
                aB: $elm$core$List$map_fn(function (statement) {
                    return $author$project$ElmSyntaxToRust$rustStatementAlterBindingNames_fn(variableNameChange, statement);
                }, rustStatementIfElse.aB),
                aC: $elm$core$List$map_fn(function (statement) {
                    return $author$project$ElmSyntaxToRust$rustStatementAlterBindingNames_fn(variableNameChange, statement);
                }, rustStatementIfElse.aC)
            });
        default:
            var _switch = rustStatement.a;
            return $author$project$ElmSyntaxToRust$RustStatementSwitch({
                ar: $author$project$ElmSyntaxToRust$rustStatementSwitchCaseAlterBindingNames_fn(variableNameChange, _switch.ar),
                as: $elm$core$List$map_fn(function (switchCase) {
                    return $author$project$ElmSyntaxToRust$rustStatementSwitchCaseAlterBindingNames_fn(variableNameChange, switchCase);
                }, _switch.as),
                at: $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn(variableNameChange, _switch.at)
            });
    }
}, $author$project$ElmSyntaxToRust$rustStatementAlterBindingNames = F2($author$project$ElmSyntaxToRust$rustStatementAlterBindingNames_fn);
var $author$project$ElmSyntaxToRust$rustStatementSwitchCaseAlterBindingNames_fn = function (variableNameChange, rustCase) {
    return {
        m: $author$project$ElmSyntaxToRust$rustPatternAlterBindingNames_fn(variableNameChange, rustCase.m),
        j: $elm$core$List$map_fn(function (statement) {
            return $author$project$ElmSyntaxToRust$rustStatementAlterBindingNames_fn(variableNameChange, statement);
        }, rustCase.j)
    };
}, $author$project$ElmSyntaxToRust$rustStatementSwitchCaseAlterBindingNames = F2($author$project$ElmSyntaxToRust$rustStatementSwitchCaseAlterBindingNames_fn);
var $author$project$ElmSyntaxToRust$listMapAndSumPlus_fn = function (soFar, elementToInt, list) {
    listMapAndSumPlus: while (true) {
        if (!list.b) {
            return soFar;
        }
        else {
            var head = list.a;
            var tail = list.b;
            var $temp$soFar = soFar + elementToInt(head), $temp$elementToInt = elementToInt, $temp$list = tail;
            soFar = $temp$soFar;
            elementToInt = $temp$elementToInt;
            list = $temp$list;
            continue listMapAndSumPlus;
        }
    }
}, $author$project$ElmSyntaxToRust$listMapAndSumPlus = F3($author$project$ElmSyntaxToRust$listMapAndSumPlus_fn);
var $author$project$ElmSyntaxToRust$listMapAndSum_fn = function (elementToInt, list) {
    return $author$project$ElmSyntaxToRust$listMapAndSumPlus_fn(0, elementToInt, list);
}, $author$project$ElmSyntaxToRust$listMapAndSum = F2($author$project$ElmSyntaxToRust$listMapAndSum_fn);
var $author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn = function (referenceToCountUsesOf, rustExpression) {
    rustExpressionCountUsesOfReference: while (true) {
        switch (rustExpression.$) {
            case 4:
                var reference = rustExpression.a;
                return (_Utils_eq(reference.b, referenceToCountUsesOf.b) && _Utils_eq(reference.a, referenceToCountUsesOf.a)) ? 1 : 0;
            case 3:
                return 0;
            case 5:
                return 0;
            case 0:
                return 0;
            case 2:
                return 0;
            case 1:
                return 0;
            case 6:
                var inNegation = rustExpression.a;
                var $temp$referenceToCountUsesOf = referenceToCountUsesOf, $temp$rustExpression = inNegation;
                referenceToCountUsesOf = $temp$referenceToCountUsesOf;
                rustExpression = $temp$rustExpression;
                continue rustExpressionCountUsesOfReference;
            case 7:
                var recordAccess = rustExpression.a;
                var $temp$referenceToCountUsesOf = referenceToCountUsesOf, $temp$rustExpression = recordAccess.aY;
                referenceToCountUsesOf = $temp$referenceToCountUsesOf;
                rustExpression = $temp$rustExpression;
                continue rustExpressionCountUsesOfReference;
            case 12:
                var lambda = rustExpression.a;
                return $author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn(referenceToCountUsesOf, lambda.h) + $author$project$ElmSyntaxToRust$listMapAndSum_fn(function (statement) {
                    return $author$project$ElmSyntaxToRust$rustStatementCountUsesOfReference_fn(referenceToCountUsesOf, statement);
                }, lambda.j);
            case 11:
                var call = rustExpression.a;
                return $author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn(referenceToCountUsesOf, call.w) + $author$project$ElmSyntaxToRust$listMapAndSum_fn(function (argument) {
                    return $author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn(referenceToCountUsesOf, argument.l);
                }, call.c);
            case 9:
                var elements = rustExpression.a;
                return $author$project$ElmSyntaxToRust$listMapAndSum_fn(function (element) {
                    return $author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn(referenceToCountUsesOf, element);
                }, elements);
            case 10:
                var fields = rustExpression.a;
                return $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (_v2, fieldValue, soFar) {
                    return soFar + $author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn(referenceToCountUsesOf, fieldValue);
                }), 0, fields);
            case 13:
                var ifThenElse = rustExpression.a;
                return ($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn(referenceToCountUsesOf, ifThenElse.aA) + $author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn(referenceToCountUsesOf, ifThenElse.aC)) + $author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn(referenceToCountUsesOf, ifThenElse.aB);
            case 14:
                var _switch = rustExpression.a;
                return $author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn(referenceToCountUsesOf, _switch.at) + $author$project$ElmSyntaxToRust$listMapAndSum_fn(function (rustCase) {
                    return $author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn(referenceToCountUsesOf, rustCase.h);
                }, _List_Cons(_switch.ar, _switch.as));
            default:
                var parts = rustExpression.a;
                return ($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn(referenceToCountUsesOf, parts.s) + $author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn(referenceToCountUsesOf, parts.t)) + $author$project$ElmSyntaxToRust$listMapAndSum_fn(function (part) {
                    return $author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn(referenceToCountUsesOf, part);
                }, parts.ao);
        }
    }
}, $author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference = F2($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn);
var $author$project$ElmSyntaxToRust$rustStatementCountUsesOfReference_fn = function (referenceToCountUsesOf, rustStatement) {
    switch (rustStatement.$) {
        case 3:
            return 0;
        case 0:
            var destructuring = rustStatement.a;
            return $author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn(referenceToCountUsesOf, destructuring.O);
        case 1:
            var rustStatementLetDeclaration = rustStatement.a;
            return $author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn(referenceToCountUsesOf, rustStatementLetDeclaration.h);
        case 2:
            var funcDeclaration = rustStatement.a;
            return $author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn(referenceToCountUsesOf, funcDeclaration.h) + $author$project$ElmSyntaxToRust$listMapAndSum_fn(function (statement) {
                return $author$project$ElmSyntaxToRust$rustStatementCountUsesOfReference_fn(referenceToCountUsesOf, statement);
            }, funcDeclaration.j);
        case 4:
            var _var = rustStatement.a;
            return $author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn(referenceToCountUsesOf, _var.l);
        case 5:
            var assignment = rustStatement.a;
            return $author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn(referenceToCountUsesOf, assignment.av);
        case 6:
            var assignment = rustStatement.a;
            return $author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn(referenceToCountUsesOf, assignment.av);
        case 7:
            var ifElse = rustStatement.a;
            return ($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn(referenceToCountUsesOf, ifElse.aA) + $author$project$ElmSyntaxToRust$listMapAndSum_fn(function (statement) {
                return $author$project$ElmSyntaxToRust$rustStatementCountUsesOfReference_fn(referenceToCountUsesOf, statement);
            }, ifElse.aC)) + $author$project$ElmSyntaxToRust$listMapAndSum_fn(function (statement) {
                return $author$project$ElmSyntaxToRust$rustStatementCountUsesOfReference_fn(referenceToCountUsesOf, statement);
            }, ifElse.aB);
        default:
            var _switch = rustStatement.a;
            return ($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn(referenceToCountUsesOf, _switch.at) + $author$project$ElmSyntaxToRust$listMapAndSum_fn(function (statement) {
                return $author$project$ElmSyntaxToRust$rustStatementCountUsesOfReference_fn(referenceToCountUsesOf, statement);
            }, _switch.ar.j)) + $author$project$ElmSyntaxToRust$listMapAndSum_fn(function (laterCase) {
                return $author$project$ElmSyntaxToRust$listMapAndSum_fn(function (statement) {
                    return $author$project$ElmSyntaxToRust$rustStatementCountUsesOfReference_fn(referenceToCountUsesOf, statement);
                }, laterCase.j);
            }, _switch.as);
    }
}, $author$project$ElmSyntaxToRust$rustStatementCountUsesOfReference = F2($author$project$ElmSyntaxToRust$rustStatementCountUsesOfReference_fn);
var $author$project$ElmSyntaxToRust$rustExpressionInnermostLambdaResult = function (rustExpression) {
    switch (rustExpression.$) {
        case 12:
            var lambda = rustExpression.a;
            var resultInnermostLambdaResult = $author$project$ElmSyntaxToRust$rustExpressionInnermostLambdaResult(lambda.h);
            return {
                h: resultInnermostLambdaResult.h,
                j: _Utils_ap(lambda.j, resultInnermostLambdaResult.j)
            };
        case 0:
            return { h: rustExpression, j: _List_Nil };
        case 1:
            return { h: rustExpression, j: _List_Nil };
        case 2:
            return { h: rustExpression, j: _List_Nil };
        case 3:
            return { h: rustExpression, j: _List_Nil };
        case 4:
            return { h: rustExpression, j: _List_Nil };
        case 5:
            return { h: rustExpression, j: _List_Nil };
        case 6:
            return { h: rustExpression, j: _List_Nil };
        case 7:
            return { h: rustExpression, j: _List_Nil };
        case 8:
            return { h: rustExpression, j: _List_Nil };
        case 9:
            return { h: rustExpression, j: _List_Nil };
        case 10:
            return { h: rustExpression, j: _List_Nil };
        case 11:
            return { h: rustExpression, j: _List_Nil };
        case 13:
            return { h: rustExpression, j: _List_Nil };
        default:
            return { h: rustExpression, j: _List_Nil };
    }
};
var $author$project$ElmSyntaxToRust$rustExpressionIsConstant = function (rustExpression) {
    switch (rustExpression.$) {
        case 0:
            return true;
        case 1:
            return true;
        case 2:
            return true;
        case 3:
            return true;
        case 4:
            return true;
        case 5:
            return true;
        case 6:
            return false;
        case 7:
            return false;
        case 8:
            return false;
        case 9:
            var elements = rustExpression.a;
            return $elm$core$List$isEmpty(elements);
        case 10:
            var fields = rustExpression.a;
            return $miniBill$elm_fast_dict$FastDict$isEmpty(fields);
        case 11:
            return false;
        case 12:
            return false;
        case 13:
            return false;
        default:
            return false;
    }
};
var $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn = function (referenceToExpression, rustExpression) {
    switch (rustExpression.$) {
        case 0:
            return rustExpression;
        case 1:
            return rustExpression;
        case 2:
            return rustExpression;
        case 5:
            return rustExpression;
        case 3:
            return rustExpression;
        case 4:
            var reference = rustExpression.a;
            return referenceToExpression(reference);
        case 6:
            var inNegation = rustExpression.a;
            return $author$project$ElmSyntaxToRust$RustExpressionNegateOperation($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn(referenceToExpression, inNegation));
        case 7:
            var recordAccess = rustExpression.a;
            return $author$project$ElmSyntaxToRust$RustExpressionRecordAccess({
                bI: recordAccess.bI,
                aY: $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn(referenceToExpression, recordAccess.aY)
            });
        case 12:
            var lambda = rustExpression.a;
            return $author$project$ElmSyntaxToRust$RustExpressionLambda({
                o: lambda.o,
                h: $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn(referenceToExpression, lambda.h),
                j: $elm$core$List$map_fn(function (statement) {
                    return $author$project$ElmSyntaxToRust$rustStatementSubstituteReferences_fn(referenceToExpression, statement);
                }, lambda.j)
            });
        case 13:
            var ifElse = rustExpression.a;
            return $author$project$ElmSyntaxToRust$RustExpressionIfElse({
                aA: $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn(referenceToExpression, ifElse.aA),
                aB: $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn(referenceToExpression, ifElse.aB),
                aC: $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn(referenceToExpression, ifElse.aC)
            });
        case 8:
            var parts = rustExpression.a;
            return $author$project$ElmSyntaxToRust$RustExpressionTuple({
                s: $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn(referenceToExpression, parts.s),
                t: $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn(referenceToExpression, parts.t),
                ao: $elm$core$List$map_fn(function (part) {
                    return $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn(referenceToExpression, part);
                }, parts.ao)
            });
        case 9:
            var elements = rustExpression.a;
            return $author$project$ElmSyntaxToRust$RustExpressionArrayLiteral($elm$core$List$map_fn(function (element) {
                return $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn(referenceToExpression, element);
            }, elements));
        case 10:
            var fields = rustExpression.a;
            return $author$project$ElmSyntaxToRust$RustExpressionRecord($miniBill$elm_fast_dict$FastDict$map_fn(F2(function (_v2, fieldValue) {
                return $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn(referenceToExpression, fieldValue);
            }), fields));
        case 11:
            var call = rustExpression.a;
            return $author$project$ElmSyntaxToRust$RustExpressionCall({
                c: $elm$core$List$map_fn(function (argument) {
                    return {
                        v: argument.v,
                        l: $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn(referenceToExpression, argument.l)
                    };
                }, call.c),
                w: $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn(referenceToExpression, call.w)
            });
        default:
            var _switch = rustExpression.a;
            return $author$project$ElmSyntaxToRust$RustExpressionSwitch({
                ar: $author$project$ElmSyntaxToRust$rustExpressionSwitchCaseSubstituteReferences_fn(referenceToExpression, _switch.ar),
                as: $elm$core$List$map_fn(function (switchCase) {
                    return $author$project$ElmSyntaxToRust$rustExpressionSwitchCaseSubstituteReferences_fn(referenceToExpression, switchCase);
                }, _switch.as),
                at: $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn(referenceToExpression, _switch.at)
            });
    }
}, $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences = F2($author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn);
var $author$project$ElmSyntaxToRust$rustExpressionSwitchCaseSubstituteReferences_fn = function (referenceToExpression, rustCase) {
    return {
        m: rustCase.m,
        h: $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn(referenceToExpression, rustCase.h)
    };
}, $author$project$ElmSyntaxToRust$rustExpressionSwitchCaseSubstituteReferences = F2($author$project$ElmSyntaxToRust$rustExpressionSwitchCaseSubstituteReferences_fn);
var $author$project$ElmSyntaxToRust$rustStatementSubstituteReferences_fn = function (referenceToExpression, rustStatement) {
    switch (rustStatement.$) {
        case 3:
            return rustStatement;
        case 0:
            var letDestructuring = rustStatement.a;
            return $author$project$ElmSyntaxToRust$RustStatementLetDestructuring({
                O: $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn(referenceToExpression, letDestructuring.O),
                m: letDestructuring.m
            });
        case 4:
            var varDeclaration = rustStatement.a;
            return $author$project$ElmSyntaxToRust$RustStatementVarDeclaration({
                a: varDeclaration.a,
                l: $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn(referenceToExpression, varDeclaration.l)
            });
        case 5:
            var assignment = rustStatement.a;
            return $author$project$ElmSyntaxToRust$RustStatementBindingAssignment({
                av: $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn(referenceToExpression, assignment.av),
                a: assignment.a
            });
        case 6:
            var assignment = rustStatement.a;
            return $author$project$ElmSyntaxToRust$RustStatementRecordFieldAssignment({
                av: $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn(referenceToExpression, assignment.av),
                cs: assignment.cs,
                cU: assignment.cU
            });
        case 1:
            var rustStatementLetDeclaration = rustStatement.a;
            return $author$project$ElmSyntaxToRust$RustStatementLetDeclaration({
                a: rustStatementLetDeclaration.a,
                h: $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn(referenceToExpression, rustStatementLetDeclaration.h),
                Q: rustStatementLetDeclaration.Q
            });
        case 2:
            var funcDeclaration = rustStatement.a;
            return $author$project$ElmSyntaxToRust$RustStatementFuncDeclaration({
                b2: funcDeclaration.b2,
                a: funcDeclaration.a,
                o: funcDeclaration.o,
                h: $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn(referenceToExpression, funcDeclaration.h),
                Q: funcDeclaration.Q,
                j: $elm$core$List$map_fn(function (statement) {
                    return $author$project$ElmSyntaxToRust$rustStatementSubstituteReferences_fn(referenceToExpression, statement);
                }, funcDeclaration.j)
            });
        case 7:
            var rustStatementIfElse = rustStatement.a;
            return $author$project$ElmSyntaxToRust$RustStatementIfElse({
                aA: $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn(referenceToExpression, rustStatementIfElse.aA),
                aB: $elm$core$List$map_fn(function (statement) {
                    return $author$project$ElmSyntaxToRust$rustStatementSubstituteReferences_fn(referenceToExpression, statement);
                }, rustStatementIfElse.aB),
                aC: $elm$core$List$map_fn(function (statement) {
                    return $author$project$ElmSyntaxToRust$rustStatementSubstituteReferences_fn(referenceToExpression, statement);
                }, rustStatementIfElse.aC)
            });
        default:
            var _switch = rustStatement.a;
            return $author$project$ElmSyntaxToRust$RustStatementSwitch({
                ar: $author$project$ElmSyntaxToRust$rustStatementSwitchCaseSubstituteReferences_fn(referenceToExpression, _switch.ar),
                as: $elm$core$List$map_fn(function (switchCase) {
                    return $author$project$ElmSyntaxToRust$rustStatementSwitchCaseSubstituteReferences_fn(referenceToExpression, switchCase);
                }, _switch.as),
                at: $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn(referenceToExpression, _switch.at)
            });
    }
}, $author$project$ElmSyntaxToRust$rustStatementSubstituteReferences = F2($author$project$ElmSyntaxToRust$rustStatementSubstituteReferences_fn);
var $author$project$ElmSyntaxToRust$rustStatementSwitchCaseSubstituteReferences_fn = function (referenceToExpression, rustCase) {
    return {
        m: rustCase.m,
        j: $elm$core$List$map_fn(function (statement) {
            return $author$project$ElmSyntaxToRust$rustStatementSubstituteReferences_fn(referenceToExpression, statement);
        }, rustCase.j)
    };
}, $author$project$ElmSyntaxToRust$rustStatementSwitchCaseSubstituteReferences = F2($author$project$ElmSyntaxToRust$rustStatementSwitchCaseSubstituteReferences_fn);
var $author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration_fn = function (referenceToCheck, rustExpression) {
    rustExpressionUsesReferenceInLambdaOrFuncDeclaration: while (true) {
        switch (rustExpression.$) {
            case 0:
                return false;
            case 1:
                return false;
            case 2:
                return false;
            case 3:
                return false;
            case 4:
                return false;
            case 5:
                return false;
            case 6:
                var inNegation = rustExpression.a;
                var $temp$referenceToCheck = referenceToCheck, $temp$rustExpression = inNegation;
                referenceToCheck = $temp$referenceToCheck;
                rustExpression = $temp$rustExpression;
                continue rustExpressionUsesReferenceInLambdaOrFuncDeclaration;
            case 7:
                var recordAccess = rustExpression.a;
                var $temp$referenceToCheck = referenceToCheck, $temp$rustExpression = recordAccess.aY;
                referenceToCheck = $temp$referenceToCheck;
                rustExpression = $temp$rustExpression;
                continue rustExpressionUsesReferenceInLambdaOrFuncDeclaration;
            case 8:
                var parts = rustExpression.a;
                return $author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration_fn(referenceToCheck, parts.s) || ($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration_fn(referenceToCheck, parts.t) || $elm$core$List$any_fn(function (part) {
                    return $author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration_fn(referenceToCheck, part);
                }, parts.ao));
            case 9:
                var elements = rustExpression.a;
                return $elm$core$List$any_fn(function (element) {
                    return $author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration_fn(referenceToCheck, element);
                }, elements);
            case 10:
                var fields = rustExpression.a;
                return $author$project$ElmSyntaxToRust$fastDictAny_fn_unwrapped(function (_v1, fieldValue) {
                    return $author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration_fn(referenceToCheck, fieldValue);
                }, fields);
            case 11:
                var call = rustExpression.a;
                return $author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration_fn(referenceToCheck, call.w) || $elm$core$List$any_fn(function (argument) {
                    return $author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration_fn(referenceToCheck, argument.l);
                }, call.c);
            case 12:
                var lambda = rustExpression.a;
                return ($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn(referenceToCheck, lambda.h) >= 1) || $elm$core$List$any_fn(function (statement) {
                    return $author$project$ElmSyntaxToRust$rustStatementCountUsesOfReference_fn(referenceToCheck, statement) >= 1;
                }, lambda.j);
            case 13:
                var ifElse = rustExpression.a;
                return $author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration_fn(referenceToCheck, ifElse.aA) || ($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration_fn(referenceToCheck, ifElse.aC) || $author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration_fn(referenceToCheck, ifElse.aB));
            default:
                var _switch = rustExpression.a;
                return $author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration_fn(referenceToCheck, _switch.at) || ($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration_fn(referenceToCheck, _switch.ar.h) || $elm$core$List$any_fn(function (laterCase) {
                    return $author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration_fn(referenceToCheck, laterCase.h);
                }, _switch.as));
        }
    }
}, $author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration = F2($author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration_fn);
var $author$project$ElmSyntaxToRust$rustStatementUsesReferenceInLambdaOrFuncDeclaration_fn = function (referenceToCheck, rustStatement) {
    switch (rustStatement.$) {
        case 3:
            return false;
        case 2:
            var func = rustStatement.a;
            return ($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn(referenceToCheck, func.h) >= 1) || $elm$core$List$any_fn(function (statement) {
                return $author$project$ElmSyntaxToRust$rustStatementCountUsesOfReference_fn(referenceToCheck, statement) >= 1;
            }, func.j);
        case 0:
            var destructuring = rustStatement.a;
            return $author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration_fn(referenceToCheck, destructuring.O);
        case 4:
            var _var = rustStatement.a;
            return $author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration_fn(referenceToCheck, _var.l);
        case 5:
            var assignment = rustStatement.a;
            return $author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration_fn(referenceToCheck, assignment.av);
        case 6:
            var assignment = rustStatement.a;
            return $author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration_fn(referenceToCheck, assignment.av);
        case 1:
            var rustStatementLetDeclaration = rustStatement.a;
            return $author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration_fn(referenceToCheck, rustStatementLetDeclaration.h);
        case 7:
            var ifElse = rustStatement.a;
            return $author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration_fn(referenceToCheck, ifElse.aA) || ($elm$core$List$any_fn(function (statement) {
                return $author$project$ElmSyntaxToRust$rustStatementUsesReferenceInLambdaOrFuncDeclaration_fn(referenceToCheck, statement);
            }, ifElse.aC) || $elm$core$List$any_fn(function (statement) {
                return $author$project$ElmSyntaxToRust$rustStatementUsesReferenceInLambdaOrFuncDeclaration_fn(referenceToCheck, statement);
            }, ifElse.aB));
        default:
            var _switch = rustStatement.a;
            return $author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration_fn(referenceToCheck, _switch.at) || ($elm$core$List$any_fn(function (statement) {
                return $author$project$ElmSyntaxToRust$rustStatementUsesReferenceInLambdaOrFuncDeclaration_fn(referenceToCheck, statement);
            }, _switch.ar.j) || $elm$core$List$any_fn(function (laterCase) {
                return $elm$core$List$any_fn(function (statement) {
                    return $author$project$ElmSyntaxToRust$rustStatementUsesReferenceInLambdaOrFuncDeclaration_fn(referenceToCheck, statement);
                }, laterCase.j);
            }, _switch.as));
    }
}, $author$project$ElmSyntaxToRust$rustStatementUsesReferenceInLambdaOrFuncDeclaration = F2($author$project$ElmSyntaxToRust$rustStatementUsesReferenceInLambdaOrFuncDeclaration_fn);
var $author$project$ElmSyntaxToRust$rustExpressionCallCondense = function (call) {
    var _v0 = call.w;
    switch (_v0.$) {
        case 12:
            var calledLambda = _v0.a;
            var _v1 = calledLambda.o;
            if (_v1.b && (!_v1.b.b)) {
                var parameter = _v1.a;
                if ($author$project$ElmSyntaxToRust$rustExpressionIsConstant(call.ai) || (($author$project$ElmSyntaxToRust$rustExpressionCountUsesOfReference_fn({ b: $elm$core$Maybe$Nothing, a: parameter.a }, call.w) === 1) && (!function () {
                    var calledLambdaResultInnermostLambdaResult = $author$project$ElmSyntaxToRust$rustExpressionInnermostLambdaResult(call.w);
                    return $author$project$ElmSyntaxToRust$rustExpressionUsesReferenceInLambdaOrFuncDeclaration_fn({ b: $elm$core$Maybe$Nothing, a: parameter.a }, calledLambdaResultInnermostLambdaResult.h) || $elm$core$List$any_fn(function (statement) {
                        return $author$project$ElmSyntaxToRust$rustStatementUsesReferenceInLambdaOrFuncDeclaration_fn({ b: $elm$core$Maybe$Nothing, a: parameter.a }, statement);
                    }, calledLambdaResultInnermostLambdaResult.j);
                }()))) {
                    var substituteReferences = function (existingReference) {
                        return function () {
                            var _v2 = existingReference.b;
                            if (!_v2.$) {
                                return false;
                            }
                            else {
                                return _Utils_eq(existingReference.a, parameter.a);
                            }
                        }() ? call.ai : $author$project$ElmSyntaxToRust$RustExpressionReference(existingReference);
                    };
                    return {
                        h: $author$project$ElmSyntaxToRust$rustExpressionSubstituteReferences_fn(substituteReferences, calledLambda.h),
                        j: $elm$core$List$map_fn(function (statement) {
                            return $author$project$ElmSyntaxToRust$rustStatementSubstituteReferences_fn(substituteReferences, statement);
                        }, calledLambda.j)
                    };
                }
                else {
                    return {
                        h: $author$project$ElmSyntaxToRust$RustExpressionCall({
                            c: _List_fromArray([
                                { v: $elm$core$Maybe$Nothing, l: call.ai }
                            ]),
                            w: call.w
                        }),
                        j: _List_Nil
                    };
                }
            }
            else {
                return {
                    h: $author$project$ElmSyntaxToRust$RustExpressionCall({
                        c: _List_fromArray([
                            { v: $elm$core$Maybe$Nothing, l: call.ai }
                        ]),
                        w: call.w
                    }),
                    j: _List_Nil
                };
            }
        case 4:
            var reference = _v0.a;
            var _v3 = function () {
                var _v4 = reference.a;
                if (_v4 === "Array_fromList") {
                    var _v5 = call.ai;
                    if (_v5.$ === 11) {
                        var argumentCall = _v5.a;
                        var _v6 = argumentCall.w;
                        if (_v6.$ === 4) {
                            var argumentReference = _v6.a;
                            var _v7 = argumentReference.a;
                            if (_v7 === "Array_toList") {
                                var _v8 = $elm$core$List$map_fn(function ($) {
                                    return $.l;
                                }, argumentCall.c);
                                if ((_v8.b && (_v8.a.$ === 9)) && (!_v8.b.b)) {
                                    var elements = _v8.a.a;
                                    return $elm$core$Maybe$Just(elements);
                                }
                                else {
                                    return $elm$core$Maybe$Nothing;
                                }
                            }
                            else {
                                return $elm$core$Maybe$Nothing;
                            }
                        }
                        else {
                            return $elm$core$Maybe$Nothing;
                        }
                    }
                    else {
                        return $elm$core$Maybe$Nothing;
                    }
                }
                else {
                    return $elm$core$Maybe$Nothing;
                }
            }();
            if (!_v3.$) {
                var elements = _v3.a;
                return {
                    h: $author$project$ElmSyntaxToRust$RustExpressionArrayLiteral(elements),
                    j: _List_Nil
                };
            }
            else {
                return {
                    h: $author$project$ElmSyntaxToRust$RustExpressionCall({
                        c: _List_fromArray([
                            { v: $elm$core$Maybe$Nothing, l: call.ai }
                        ]),
                        w: call.w
                    }),
                    j: _List_Nil
                };
            }
        case 11:
            return {
                h: $author$project$ElmSyntaxToRust$RustExpressionCall({
                    c: _List_fromArray([
                        { v: $elm$core$Maybe$Nothing, l: call.ai }
                    ]),
                    w: call.w
                }),
                j: _List_Nil
            };
        case 3:
            return {
                h: $author$project$ElmSyntaxToRust$RustExpressionCall({
                    c: _List_fromArray([
                        { v: $elm$core$Maybe$Nothing, l: call.ai }
                    ]),
                    w: call.w
                }),
                j: _List_Nil
            };
        case 5:
            return {
                h: $author$project$ElmSyntaxToRust$RustExpressionCall({
                    c: _List_fromArray([
                        { v: $elm$core$Maybe$Nothing, l: call.ai }
                    ]),
                    w: call.w
                }),
                j: _List_Nil
            };
        case 0:
            return {
                h: $author$project$ElmSyntaxToRust$RustExpressionCall({
                    c: _List_fromArray([
                        { v: $elm$core$Maybe$Nothing, l: call.ai }
                    ]),
                    w: call.w
                }),
                j: _List_Nil
            };
        case 1:
            return {
                h: $author$project$ElmSyntaxToRust$RustExpressionCall({
                    c: _List_fromArray([
                        { v: $elm$core$Maybe$Nothing, l: call.ai }
                    ]),
                    w: call.w
                }),
                j: _List_Nil
            };
        case 2:
            return {
                h: $author$project$ElmSyntaxToRust$RustExpressionCall({
                    c: _List_fromArray([
                        { v: $elm$core$Maybe$Nothing, l: call.ai }
                    ]),
                    w: call.w
                }),
                j: _List_Nil
            };
        case 6:
            return {
                h: $author$project$ElmSyntaxToRust$RustExpressionCall({
                    c: _List_fromArray([
                        { v: $elm$core$Maybe$Nothing, l: call.ai }
                    ]),
                    w: call.w
                }),
                j: _List_Nil
            };
        case 7:
            return {
                h: $author$project$ElmSyntaxToRust$RustExpressionCall({
                    c: _List_fromArray([
                        { v: $elm$core$Maybe$Nothing, l: call.ai }
                    ]),
                    w: call.w
                }),
                j: _List_Nil
            };
        case 8:
            return {
                h: $author$project$ElmSyntaxToRust$RustExpressionCall({
                    c: _List_fromArray([
                        { v: $elm$core$Maybe$Nothing, l: call.ai }
                    ]),
                    w: call.w
                }),
                j: _List_Nil
            };
        case 13:
            return {
                h: $author$project$ElmSyntaxToRust$RustExpressionCall({
                    c: _List_fromArray([
                        { v: $elm$core$Maybe$Nothing, l: call.ai }
                    ]),
                    w: call.w
                }),
                j: _List_Nil
            };
        case 9:
            return {
                h: $author$project$ElmSyntaxToRust$RustExpressionCall({
                    c: _List_fromArray([
                        { v: $elm$core$Maybe$Nothing, l: call.ai }
                    ]),
                    w: call.w
                }),
                j: _List_Nil
            };
        case 10:
            return {
                h: $author$project$ElmSyntaxToRust$RustExpressionCall({
                    c: _List_fromArray([
                        { v: $elm$core$Maybe$Nothing, l: call.ai }
                    ]),
                    w: call.w
                }),
                j: _List_Nil
            };
        default:
            return {
                h: $author$project$ElmSyntaxToRust$RustExpressionCall({
                    c: _List_fromArray([
                        { v: $elm$core$Maybe$Nothing, l: call.ai }
                    ]),
                    w: call.w
                }),
                j: _List_Nil
            };
    }
};
var $author$project$ElmSyntaxToRust$rustExpressionCallTriple_fn = function (part0, part1, part2) {
    return $author$project$ElmSyntaxToRust$RustExpressionCall({
        c: _List_fromArray([
            { v: $elm$core$Maybe$Nothing, l: part0 },
            { v: $elm$core$Maybe$Nothing, l: part1 },
            { v: $elm$core$Maybe$Nothing, l: part2 }
        ]),
        w: $author$project$ElmSyntaxToRust$RustExpressionVariant({ a: "Triple", P: "Triple" })
    });
}, $author$project$ElmSyntaxToRust$rustExpressionCallTriple = F3($author$project$ElmSyntaxToRust$rustExpressionCallTriple_fn);
var $author$project$ElmSyntaxToRust$rustExpressionCallTuple_fn = function (part0, part1) {
    return $author$project$ElmSyntaxToRust$RustExpressionCall({
        c: _List_fromArray([
            { v: $elm$core$Maybe$Nothing, l: part0 },
            { v: $elm$core$Maybe$Nothing, l: part1 }
        ]),
        w: $author$project$ElmSyntaxToRust$RustExpressionVariant({ a: "Tuple", P: "Tuple" })
    });
}, $author$project$ElmSyntaxToRust$rustExpressionCallTuple = F2($author$project$ElmSyntaxToRust$rustExpressionCallTuple_fn);
var $author$project$ElmSyntaxToRust$rustExpressionStringLiteralEmpty = $author$project$ElmSyntaxToRust$RustExpressionStringLiteral("");
var $author$project$ElmSyntaxToRust$rustExpressionIsEmptyString = function (rustExpression) {
    return _Utils_eq(rustExpression, $author$project$ElmSyntaxToRust$rustExpressionStringLiteralEmpty);
};
var $author$project$ElmSyntaxToRust$rustExpressionListEmpty = $author$project$ElmSyntaxToRust$RustExpressionVariant({ a: "List_Empty", P: "List_List" });
var $author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType = function (inferredType) {
    if (!inferredType.$) {
        var variable = inferredType.a;
        return _String_startsWith_fn("number", variable.a);
    }
    else {
        var inferredTypNotVariable = inferredType.a;
        return $author$project$ElmSyntaxToRust$inferredTypeNotVariableIsConcreteRustType(inferredTypNotVariable);
    }
};
var $author$project$ElmSyntaxToRust$inferredTypeNotVariableIsConcreteRustType = function (inferredTypeNotVariable) {
    switch (inferredTypeNotVariable.$) {
        case 0:
            return true;
        case 6:
            var typeFunction = inferredTypeNotVariable.a;
            return $author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType(typeFunction.e) && $author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType(typeFunction.d);
        case 2:
            var parts = inferredTypeNotVariable.a;
            return $author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType(parts.s) && $author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType(parts.t);
        case 3:
            var parts = inferredTypeNotVariable.a;
            return $author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType(parts.s) && ($author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType(parts.t) && $author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType(parts.ak));
        case 1:
            var typeConstruct = inferredTypeNotVariable.a;
            return $elm$core$List$all_fn($author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType, typeConstruct.c);
        case 4:
            var fields = inferredTypeNotVariable.a;
            return $author$project$ElmSyntaxToRust$fastDictAll_fn_unwrapped(function (_v1, fieldValue) {
                return $author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType(fieldValue);
            }, fields);
        default:
            var recordExtension = inferredTypeNotVariable.a;
            return $author$project$ElmSyntaxToRust$fastDictAll_fn_unwrapped(function (_v2, fieldValue) {
                return $author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType(fieldValue);
            }, recordExtension.F);
    }
};
var $elm$core$List$takeReverse_fn = function (n, list, kept) {
    takeReverse: while (true) {
        if (n <= 0) {
            return kept;
        }
        else {
            if (!list.b) {
                return kept;
            }
            else {
                var x = list.a;
                var xs = list.b;
                var $temp$n = n - 1, $temp$list = xs, $temp$kept = _List_Cons(x, kept);
                n = $temp$n;
                list = $temp$list;
                kept = $temp$kept;
                continue takeReverse;
            }
        }
    }
}, $elm$core$List$takeReverse = F3($elm$core$List$takeReverse_fn);
var $elm$core$List$takeTailRec_fn = function (n, list) {
    return $elm$core$List$reverse($elm$core$List$takeReverse_fn(n, list, _List_Nil));
}, $elm$core$List$takeTailRec = F2($elm$core$List$takeTailRec_fn);
var $elm$core$List$takeFast_fn = function (ctr, n, list) {
    if (n <= 0) {
        return _List_Nil;
    }
    else {
        var _v0 = _Utils_Tuple2(n, list);
        _v0$1: while (true) {
            _v0$5: while (true) {
                if (!_v0.b.b) {
                    return list;
                }
                else {
                    if (_v0.b.b.b) {
                        switch (_v0.a) {
                            case 1:
                                break _v0$1;
                            case 2:
                                var _v2 = _v0.b;
                                var x = _v2.a;
                                var _v3 = _v2.b;
                                var y = _v3.a;
                                return _List_fromArray([x, y]);
                            case 3:
                                if (_v0.b.b.b.b) {
                                    var _v4 = _v0.b;
                                    var x = _v4.a;
                                    var _v5 = _v4.b;
                                    var y = _v5.a;
                                    var _v6 = _v5.b;
                                    var z = _v6.a;
                                    return _List_fromArray([x, y, z]);
                                }
                                else {
                                    break _v0$5;
                                }
                            default:
                                if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
                                    var _v7 = _v0.b;
                                    var x = _v7.a;
                                    var _v8 = _v7.b;
                                    var y = _v8.a;
                                    var _v9 = _v8.b;
                                    var z = _v9.a;
                                    var _v10 = _v9.b;
                                    var w = _v10.a;
                                    var tl = _v10.b;
                                    return (ctr > 1000) ? _List_Cons(x, _List_Cons(y, _List_Cons(z, _List_Cons(w, $elm$core$List$takeTailRec_fn(n - 4, tl))))) : _List_Cons(x, _List_Cons(y, _List_Cons(z, _List_Cons(w, $elm$core$List$takeFast_fn(ctr + 1, n - 4, tl)))));
                                }
                                else {
                                    break _v0$5;
                                }
                        }
                    }
                    else {
                        if (_v0.a === 1) {
                            break _v0$1;
                        }
                        else {
                            break _v0$5;
                        }
                    }
                }
            }
            return list;
        }
        var _v1 = _v0.b;
        var x = _v1.a;
        return _List_fromArray([x]);
    }
}, $elm$core$List$takeFast = F3($elm$core$List$takeFast_fn);
var $elm$core$List$take_fn = function (n, xs) {
    var tmp = _List_Cons(undefined, _List_Nil);
    var end = tmp;
    for (var i = 0; i < n && xs.b; xs = xs.
        b, i++) {
        var next = _List_Cons(xs.a, _List_Nil);
        end.b = next;
        end = next;
    }
    return tmp.b;
}, $elm$core$List$take = F2($elm$core$List$take_fn);
var $author$project$ElmSyntaxToRust$rustExpressionReferenceDeclaredValueOrFunctionAppliedLazilyOrCurriedIfNecessary_fn = function (context, rustReference) {
    var parameterCount = $elm$core$List$length($author$project$ElmSyntaxToRust$inferredTypeExpandFunction(rustReference.dk).aj);
    switch (parameterCount) {
        case 1:
            return $author$project$ElmSyntaxToRust$RustExpressionReference({ b: rustReference.b, a: rustReference.a });
        case 0:
            return $author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType(rustReference.dk) ? $author$project$ElmSyntaxToRust$RustExpressionReference({ b: rustReference.b, a: rustReference.a }) : $author$project$ElmSyntaxToRust$RustExpressionCall({
                c: _List_Nil,
                w: $author$project$ElmSyntaxToRust$RustExpressionReference({ b: rustReference.b, a: rustReference.a })
            });
        default:
            var parameterCountAtLeast2 = parameterCount;
            var typeAliasesInModule = function (moduleNameToAccess) {
                return $elm$core$Maybe$map_fn(function ($) {
                    return $.B;
                }, $miniBill$elm_fast_dict$FastDict$get_fn(moduleNameToAccess, context.r));
            };
            return $elm$core$List$foldr_fn(F2(function (_v1, resultSoFar) {
                var parameterIndex = _v1.a;
                var parameterInferredType = _v1.b;
                return $author$project$ElmSyntaxToRust$RustExpressionLambda({
                    o: _List_fromArray([
                        {
                            a: $author$project$ElmSyntaxToRust$generatedParameterNameForIndexAtPath_fn(parameterIndex, context.q),
                            n: $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, parameterInferredType)
                        }
                    ]),
                    h: resultSoFar,
                    j: _List_Nil
                });
            }), $author$project$ElmSyntaxToRust$RustExpressionCall({
                c: $elm$core$List$map_fn(function (parameterIndex) {
                    return {
                        v: $elm$core$Maybe$Nothing,
                        l: $author$project$ElmSyntaxToRust$RustExpressionReference({
                            b: $elm$core$Maybe$Nothing,
                            a: $author$project$ElmSyntaxToRust$generatedParameterNameForIndexAtPath_fn(parameterIndex, context.q)
                        })
                    };
                }, $elm$core$List$range_fn(0, parameterCountAtLeast2 - 1)),
                w: $author$project$ElmSyntaxToRust$RustExpressionReference({ b: rustReference.b, a: rustReference.a })
            }), $elm$core$List$indexedMap_fn($elm$core$Tuple$pair, $elm$core$List$take_fn(parameterCountAtLeast2, $author$project$ElmSyntaxToRust$inferredTypeExpandFunction($author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases_fn(typeAliasesInModule, rustReference.dA)).aj)));
    }
}, $author$project$ElmSyntaxToRust$rustExpressionReferenceDeclaredValueOrFunctionAppliedLazilyOrCurriedIfNecessary = F2($author$project$ElmSyntaxToRust$rustExpressionReferenceDeclaredValueOrFunctionAppliedLazilyOrCurriedIfNecessary_fn);
var $author$project$ElmSyntaxToRust$rustExpressionReferenceListAppend = $author$project$ElmSyntaxToRust$RustExpressionReference({ b: $elm$core$Maybe$Nothing, a: "List_append" });
var $author$project$ElmSyntaxToRust$rustExpressionReferenceStringAppend = $author$project$ElmSyntaxToRust$RustExpressionReference({ b: $elm$core$Maybe$Nothing, a: "String_append" });
var $author$project$ElmSyntaxToRust$rustExpressionReferenceFalse = $author$project$ElmSyntaxToRust$RustExpressionReference({ b: $elm$core$Maybe$Nothing, a: "false" });
var $author$project$ElmSyntaxToRust$rustExpressionReferenceTrue = $author$project$ElmSyntaxToRust$RustExpressionReference({ b: $elm$core$Maybe$Nothing, a: "true" });
var $author$project$ElmSyntaxToRust$rustPatternAsExpression = function (rustPattern) {
    switch (rustPattern.$) {
        case 0:
            return $author$project$ElmSyntaxToRust$rustExpressionUnit;
        case 1:
            var bool = rustPattern.a;
            return bool ? $author$project$ElmSyntaxToRust$rustExpressionReferenceTrue : $author$project$ElmSyntaxToRust$rustExpressionReferenceFalse;
        case 2:
            var _int = rustPattern.a;
            return $author$project$ElmSyntaxToRust$RustExpressionDouble(_int);
        case 3:
            var _char = rustPattern.a;
            return $author$project$ElmSyntaxToRust$RustExpressionUnicodeScalar(_char);
        case 4:
            var string = rustPattern.a;
            return $author$project$ElmSyntaxToRust$RustExpressionStringLiteral(string);
        case 5:
            var name = rustPattern.a;
            return $author$project$ElmSyntaxToRust$RustExpressionReference({ b: $elm$core$Maybe$Nothing, a: name });
        case 8:
            var parts = rustPattern.a;
            return $author$project$ElmSyntaxToRust$RustExpressionTuple({
                s: $author$project$ElmSyntaxToRust$rustPatternAsExpression(parts.s),
                t: $author$project$ElmSyntaxToRust$rustPatternAsExpression(parts.t),
                ao: $elm$core$List$map_fn($author$project$ElmSyntaxToRust$rustPatternAsExpression, parts.ao)
            });
        case 7:
            var variant = rustPattern.a;
            var _v1 = variant.X;
            if (!_v1.b) {
                return $author$project$ElmSyntaxToRust$RustExpressionVariant({ a: variant.a, P: variant.P });
            }
            else {
                var value0 = _v1.a;
                var value1Up = _v1.b;
                return $author$project$ElmSyntaxToRust$RustExpressionCall({
                    c: $elm$core$List$map_fn(function (value) {
                        return {
                            v: value.v,
                            l: $author$project$ElmSyntaxToRust$rustPatternAsExpression(value.l)
                        };
                    }, _List_Cons(value0, value1Up)),
                    w: $author$project$ElmSyntaxToRust$RustExpressionVariant({ a: variant.a, P: variant.P })
                });
            }
        default:
            var fields = rustPattern.a;
            return $author$project$ElmSyntaxToRust$RustExpressionRecord($miniBill$elm_fast_dict$FastDict$map_fn(F2(function (_v2, value) {
                return $author$project$ElmSyntaxToRust$rustPatternAsExpression(value);
            }), fields));
    }
};
var $author$project$ElmSyntaxToRust$rustTypeIsConcrete = function (rustType) {
    switch (rustType.$) {
        case 3:
            return false;
        case 1:
            var parts = rustType.a;
            return $author$project$ElmSyntaxToRust$rustTypeIsConcrete(parts.s) && ($author$project$ElmSyntaxToRust$rustTypeIsConcrete(parts.t) && $elm$core$List$all_fn($author$project$ElmSyntaxToRust$rustTypeIsConcrete, parts.ao));
        case 2:
            var fields = rustType.a;
            return $author$project$ElmSyntaxToRust$fastDictAll_fn_unwrapped(function (_v1, fieldValue) {
                return $author$project$ElmSyntaxToRust$rustTypeIsConcrete(fieldValue);
            }, fields);
        case 0:
            var typeConstruct = rustType.a;
            return $elm$core$List$all_fn($author$project$ElmSyntaxToRust$rustTypeIsConcrete, typeConstruct.c);
        default:
            var typeFunction = rustType.a;
            return $elm$core$List$all_fn($author$project$ElmSyntaxToRust$rustTypeIsConcrete, typeFunction.e) && $author$project$ElmSyntaxToRust$rustTypeIsConcrete(typeFunction.d);
    }
};
var $author$project$ElmSyntaxToRust$rustTypeJsonEncodeValue = $author$project$ElmSyntaxToRust$RustTypeConstruct({ c: _List_Nil, a2: false, b: $elm$core$Maybe$Nothing, a: "JsonEncode_Value" });
var $author$project$ElmSyntaxToRust$case__fn = function (context, syntaxCase) {
    var casePatternAsRust = $author$project$ElmSyntaxToRust$casePattern(syntaxCase.m);
    return $elm$core$Result$map_fn(function (result) {
        return {
            m: casePatternAsRust.m,
            h: result.h,
            j: $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (variable, aliasedPattern, resultSoFar) {
                return _List_Cons($author$project$ElmSyntaxToRust$RustStatementLetDeclaration({
                    a: variable,
                    h: $author$project$ElmSyntaxToRust$rustPatternAsExpression(aliasedPattern.m),
                    Q: $author$project$ElmSyntaxToRust$type__fn(function (moduleNameToAccess) {
                        return $elm$core$Maybe$map_fn(function ($) {
                            return $.B;
                        }, $miniBill$elm_fast_dict$FastDict$get_fn(moduleNameToAccess, context.r));
                    }, aliasedPattern.n)
                }), resultSoFar);
            }), result.j, casePatternAsRust.I)
        };
    }, $author$project$ElmSyntaxToRust$expression_fn({
        z: context.z,
        r: context.r,
        q: _List_Cons("caseResult", context.q),
        y: $miniBill$elm_fast_dict$FastSet$union_fn(casePatternAsRust.x, context.y)
    }, syntaxCase.h));
}, $author$project$ElmSyntaxToRust$case_ = F2($author$project$ElmSyntaxToRust$case__fn);
var $author$project$ElmSyntaxToRust$expression_fn = function (context, expressionTypedNode) {
    expression: while (true) {
        var _v6 = expressionTypedNode.l;
        switch (_v6.$) {
            case 0:
                return $author$project$ElmSyntaxToRust$okResultRustExpressionUnitStatementsEmpty;
            case 1:
                var intValue = _v6.a;
                return $elm$core$Result$Ok({
                    h: $author$project$ElmSyntaxToRust$RustExpressionDouble(intValue.l),
                    j: _List_Nil
                });
            case 2:
                var doubleValue = _v6.a;
                return $elm$core$Result$Ok({
                    h: $author$project$ElmSyntaxToRust$RustExpressionDouble(doubleValue),
                    j: _List_Nil
                });
            case 4:
                var charValue = _v6.a;
                return $elm$core$Result$Ok({
                    h: $author$project$ElmSyntaxToRust$RustExpressionUnicodeScalar(charValue),
                    j: _List_Nil
                });
            case 3:
                var stringValue = _v6.a;
                return $elm$core$Result$Ok({
                    h: $author$project$ElmSyntaxToRust$RustExpressionStringLiteral(stringValue),
                    j: _List_Nil
                });
            case 9:
                var fieldName = _v6.a;
                var _v7 = expressionTypedNode.n;
                if ((_v7.$ === 1) && (_v7.a.$ === 6)) {
                    var typeFunction = _v7.a.a;
                    return $elm$core$Result$Ok({
                        h: $author$project$ElmSyntaxToRust$RustExpressionLambda({
                            o: _List_fromArray([
                                {
                                    a: $author$project$ElmSyntaxToRust$generatedAccessedRecordVariableName,
                                    n: $author$project$ElmSyntaxToRust$type__fn(function (moduleNameToAccess) {
                                        return $elm$core$Maybe$map_fn(function ($) {
                                            return $.B;
                                        }, $miniBill$elm_fast_dict$FastDict$get_fn(moduleNameToAccess, context.r));
                                    }, typeFunction.e)
                                }
                            ]),
                            h: $author$project$ElmSyntaxToRust$RustExpressionRecordAccess({
                                bI: $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords($elm$core$String$replace_fn(".", "", fieldName)),
                                aY: $author$project$ElmSyntaxToRust$RustExpressionReference({ b: $elm$core$Maybe$Nothing, a: $author$project$ElmSyntaxToRust$generatedAccessedRecordVariableName })
                            }),
                            j: _List_Nil
                        }),
                        j: _List_Nil
                    });
                }
                else {
                    return $elm$core$Result$Err("record access function has an inferred type that wasn't a function");
                }
            case 8:
                var operator = _v6.a;
                var _v8 = $author$project$ElmSyntaxToRust$inferredTypeExpandToFunction(expressionTypedNode.n).aj;
                if (_v8.b && _v8.b.b) {
                    var leftInferredType = _v8.a;
                    var _v9 = _v8.b;
                    var rightInferredType = _v9.a;
                    var typeAliasesInModule = function (moduleNameToAccess) {
                        return $elm$core$Maybe$map_fn(function ($) {
                            return $.B;
                        }, $miniBill$elm_fast_dict$FastDict$get_fn(moduleNameToAccess, context.r));
                    };
                    return $elm$core$Result$map_fn(function (reference) {
                        return {
                            h: $author$project$ElmSyntaxToRust$RustExpressionLambda({
                                o: _List_fromArray([
                                    {
                                        a: "generated_left",
                                        n: $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, leftInferredType)
                                    }
                                ]),
                                h: $author$project$ElmSyntaxToRust$RustExpressionLambda({
                                    o: _List_fromArray([
                                        {
                                            a: "generated_right",
                                            n: $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, rightInferredType)
                                        }
                                    ]),
                                    h: $author$project$ElmSyntaxToRust$RustExpressionCall({
                                        c: _List_fromArray([
                                            {
                                                v: $elm$core$Maybe$Nothing,
                                                l: $author$project$ElmSyntaxToRust$RustExpressionReference({ b: $elm$core$Maybe$Nothing, a: "generated_left" })
                                            },
                                            {
                                                v: $elm$core$Maybe$Nothing,
                                                l: $author$project$ElmSyntaxToRust$RustExpressionReference({ b: $elm$core$Maybe$Nothing, a: "generated_right" })
                                            }
                                        ]),
                                        w: $author$project$ElmSyntaxToRust$RustExpressionReference(reference)
                                    }),
                                    j: _List_Nil
                                }),
                                j: _List_Nil
                            }),
                            j: _List_Nil
                        };
                    }, $author$project$ElmSyntaxToRust$expressionOperatorToRustFunctionReference({ b: operator.b, cX: operator.cX, n: expressionTypedNode.n }));
                }
                else {
                    return $elm$core$Result$Err("(" + ($author$project$ElmSyntaxToRust$rangeToInfoString(expressionTypedNode.aN) + (") I tried to transpile the operator function (" + (operator.cX + ") to a lambda into a call but for that I needed to find the left and right argument types which I couldn't"))));
                }
            case 18:
                var call = _v6.a;
                return $elm$core$Result$map3_fn_unwrapped(function (called, argument0, argument1Up) {
                    return $elm$core$List$foldl_fn_unwrapped(function (argument, condensedSoFar) {
                        var afterCondensingArgument = $author$project$ElmSyntaxToRust$rustExpressionCallCondense({ ai: argument.h, w: condensedSoFar.h });
                        return {
                            h: afterCondensingArgument.h,
                            j: _Utils_ap(condensedSoFar.j, _Utils_ap(argument.j, afterCondensingArgument.j))
                        };
                    }, called, _List_Cons(argument0, argument1Up));
                }, $author$project$ElmSyntaxToRust$expressionWrappingInLetIfOrSwitchResult_fn({
                    z: context.z,
                    r: context.r,
                    q: _List_Cons("called", context.q),
                    y: context.y
                }, call.w), $author$project$ElmSyntaxToRust$expressionWrappingInLetIfOrSwitchResult_fn({
                    z: context.z,
                    r: context.r,
                    q: _List_Cons("argument0", context.q),
                    y: context.y
                }, call.dR), $author$project$ElmSyntaxToRust$listMapAndCombineOk_fn(function (_v10) {
                    var argumentIndex = _v10.a;
                    var argument = _v10.b;
                    return $author$project$ElmSyntaxToRust$expressionWrappingInLetIfOrSwitchResult_fn({
                        z: context.z,
                        r: context.r,
                        q: _List_Cons("argument" + $elm$core$String$fromInt(argumentIndex), context.q),
                        y: context.y
                    }, argument);
                }, $elm$core$List$indexedMap_fn_unwrapped(function (index, argument) {
                    return _Utils_Tuple2(index + 1, argument);
                }, call.dS)));
            case 15:
                var infixOperation = _v6.a;
                var _v11 = infixOperation.er.cX;
                switch (_v11) {
                    case "|>":
                        return $elm$core$Result$map2_fn_unwrapped(function (argument, called) {
                            var callCondensed = $author$project$ElmSyntaxToRust$rustExpressionCallCondense({ ai: argument.h, w: called.h });
                            return {
                                h: callCondensed.h,
                                j: _Utils_ap(called.j, _Utils_ap(argument.j, callCondensed.j))
                            };
                        }, $author$project$ElmSyntaxToRust$expressionWrappingInLetIfOrSwitchResult_fn({
                            z: context.z,
                            r: context.r,
                            q: _List_Cons("left", context.q),
                            y: context.y
                        }, infixOperation.cw), $author$project$ElmSyntaxToRust$expressionWrappingInLetIfOrSwitchResult_fn({
                            z: context.z,
                            r: context.r,
                            q: _List_Cons("right", context.q),
                            y: context.y
                        }, infixOperation.cV));
                    case "<|":
                        return $elm$core$Result$map2_fn_unwrapped(function (called, argument) {
                            var callCondensed = $author$project$ElmSyntaxToRust$rustExpressionCallCondense({ ai: argument.h, w: called.h });
                            return {
                                h: callCondensed.h,
                                j: _Utils_ap(called.j, _Utils_ap(argument.j, callCondensed.j))
                            };
                        }, $author$project$ElmSyntaxToRust$expressionWrappingInLetIfOrSwitchResult_fn({
                            z: context.z,
                            r: context.r,
                            q: _List_Cons("left", context.q),
                            y: context.y
                        }, infixOperation.cw), $author$project$ElmSyntaxToRust$expressionWrappingInLetIfOrSwitchResult_fn({
                            z: context.z,
                            r: context.r,
                            q: _List_Cons("right", context.q),
                            y: context.y
                        }, infixOperation.cV));
                    case "++":
                        return $elm$core$Result$map2_fn_unwrapped(function (left, right) {
                            return {
                                h: _Utils_eq(infixOperation.cw.n, $author$project$ElmSyntaxToRust$inferredTypeString) ? ($author$project$ElmSyntaxToRust$rustExpressionIsEmptyString(left.h) ? right.h : ($author$project$ElmSyntaxToRust$rustExpressionIsEmptyString(right.h) ? left.h : $author$project$ElmSyntaxToRust$RustExpressionCall({
                                    c: _List_fromArray([
                                        { v: $elm$core$Maybe$Nothing, l: left.h },
                                        { v: $elm$core$Maybe$Nothing, l: right.h }
                                    ]),
                                    w: $author$project$ElmSyntaxToRust$rustExpressionReferenceStringAppend
                                }))) : $author$project$ElmSyntaxToRust$RustExpressionCall({
                                    c: _List_fromArray([
                                        { v: $elm$core$Maybe$Nothing, l: left.h },
                                        { v: $elm$core$Maybe$Nothing, l: right.h }
                                    ]),
                                    w: $author$project$ElmSyntaxToRust$rustExpressionReferenceListAppend
                                }),
                                j: _Utils_ap(left.j, right.j)
                            };
                        }, $author$project$ElmSyntaxToRust$expressionWrappingInLetIfOrSwitchResult_fn({
                            z: context.z,
                            r: context.r,
                            q: _List_Cons("left", context.q),
                            y: context.y
                        }, infixOperation.cw), $author$project$ElmSyntaxToRust$expressionWrappingInLetIfOrSwitchResult_fn({
                            z: context.z,
                            r: context.r,
                            q: _List_Cons("right", context.q),
                            y: context.y
                        }, infixOperation.cV));
                    default:
                        return $elm$core$Result$map3_fn_unwrapped(function (operationFunctionReference, left, right) {
                            return {
                                h: $author$project$ElmSyntaxToRust$RustExpressionCall({
                                    c: _List_fromArray([
                                        { v: $elm$core$Maybe$Nothing, l: left.h },
                                        { v: $elm$core$Maybe$Nothing, l: right.h }
                                    ]),
                                    w: $author$project$ElmSyntaxToRust$RustExpressionReference(operationFunctionReference)
                                }),
                                j: _Utils_ap(left.j, right.j)
                            };
                        }, $author$project$ElmSyntaxToRust$expressionOperatorToRustFunctionReference(infixOperation.er), $author$project$ElmSyntaxToRust$expressionWrappingInLetIfOrSwitchResult_fn({
                            z: context.z,
                            r: context.r,
                            q: _List_Cons("left", context.q),
                            y: context.y
                        }, infixOperation.cw), $author$project$ElmSyntaxToRust$expressionWrappingInLetIfOrSwitchResult_fn({
                            z: context.z,
                            r: context.r,
                            q: _List_Cons("right", context.q),
                            y: context.y
                        }, infixOperation.cV));
                }
            case 6:
                var reference = _v6.a;
                var asBool = function () {
                    var _v16 = reference.b;
                    if (_v16 === "Basics") {
                        var _v17 = reference.a;
                        switch (_v17) {
                            case "True":
                                return $elm$core$Maybe$Just($author$project$ElmSyntaxToRust$RustExpressionReference({ b: $elm$core$Maybe$Nothing, a: "true" }));
                            case "False":
                                return $elm$core$Maybe$Just($author$project$ElmSyntaxToRust$RustExpressionReference({ b: $elm$core$Maybe$Nothing, a: "false" }));
                            default:
                                return $elm$core$Maybe$Nothing;
                        }
                    }
                    else {
                        return $elm$core$Maybe$Nothing;
                    }
                }();
                if (!asBool.$) {
                    var bool = asBool.a;
                    return $elm$core$Result$Ok({ h: bool, j: _List_Nil });
                }
                else {
                    var rustVariantName = function () {
                        var _v15 = $author$project$ElmSyntaxToRust$referenceToCoreRust({ b: reference.b, a: reference.a, n: expressionTypedNode.n });
                        if (!_v15.$) {
                            var rustCoreReference = _v15.a;
                            return rustCoreReference.a;
                        }
                        else {
                            return $author$project$ElmSyntaxToRust$referenceToRustName({ b: reference.b, a: reference.a });
                        }
                    }();
                    var rustOriginTypeName = $elm$core$String$replace_fn(".", "", reference.b) + ("_" + reference.c0);
                    return $elm$core$Result$Ok({
                        h: function () {
                            var _v13 = $elm$core$List$map_fn(function (input) {
                                return $author$project$ElmSyntaxToRust$type__fn(function (moduleNameToAccess) {
                                    return $elm$core$Maybe$map_fn(function ($) {
                                        return $.B;
                                    }, $miniBill$elm_fast_dict$FastDict$get_fn(moduleNameToAccess, context.r));
                                }, input);
                            }, $author$project$ElmSyntaxToRust$inferredTypeExpandFunction(expressionTypedNode.n).aj);
                            if (!_v13.b) {
                                return $author$project$ElmSyntaxToRust$RustExpressionVariant({ a: rustVariantName, P: rustOriginTypeName });
                            }
                            else {
                                var valueType0 = _v13.a;
                                var valueType1Up = _v13.b;
                                var generatedValueParameterName = function (valueIndex) {
                                    return _Utils_ap("generated_" + ($elm$core$String$fromInt(valueIndex) + "_"), $elm$core$String$join_fn("_", context.q));
                                };
                                return $elm$core$List$foldr_fn(F2(function (parameter, resultSoFar) {
                                    return $author$project$ElmSyntaxToRust$RustExpressionLambda({
                                        o: _List_fromArray([
                                            { a: parameter.m, n: parameter.n }
                                        ]),
                                        h: resultSoFar,
                                        j: _List_Nil
                                    });
                                }), $author$project$ElmSyntaxToRust$RustExpressionCall({
                                    c: $elm$core$List$indexedMap_fn_unwrapped(function (valueIndex, _v14) {
                                        return {
                                            v: $elm$core$Maybe$Nothing,
                                            l: $author$project$ElmSyntaxToRust$RustExpressionReference({
                                                b: $elm$core$Maybe$Nothing,
                                                a: generatedValueParameterName(valueIndex)
                                            })
                                        };
                                    }, _List_Cons(valueType0, valueType1Up)),
                                    w: $author$project$ElmSyntaxToRust$RustExpressionVariant({ a: rustVariantName, P: rustOriginTypeName })
                                }), $elm$core$List$indexedMap_fn_unwrapped(function (valueIndex, valueType) {
                                    return {
                                        m: generatedValueParameterName(valueIndex),
                                        n: valueType
                                    };
                                }, _List_Cons(valueType0, valueType1Up)));
                            }
                        }(),
                        j: _List_Nil
                    });
                }
            case 7:
                var reference = _v6.a;
                var _v18 = $elm$core$Maybe$andThen_fn(function ($) {
                    return $.$7;
                }, $elm$core$Maybe$andThen_fn(function (byName) {
                    return $miniBill$elm_fast_dict$FastDict$get_fn(reference.a, byName.B);
                }, $miniBill$elm_fast_dict$FastDict$get_fn(reference.b, context.r)));
                if (!_v18.$) {
                    var fieldOrder = _v18.a;
                    if (!fieldOrder.b) {
                        return $author$project$ElmSyntaxToRust$okResultRustExpressionRecordEmptyStatementsEmpty;
                    }
                    else {
                        var fieldName0 = fieldOrder.a;
                        var fieldName1Up = fieldOrder.b;
                        var resultRecordFields = $elm$core$List$foldl_fn_unwrapped(function (fieldName, soFar) {
                            return $miniBill$elm_fast_dict$FastDict$insert_fn($author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(fieldName), $author$project$ElmSyntaxToRust$RustExpressionReference({
                                b: $elm$core$Maybe$Nothing,
                                a: $author$project$ElmSyntaxToRust$generatedFieldValueParameterName(fieldName)
                            }), soFar);
                        }, $miniBill$elm_fast_dict$FastDict$empty, _List_Cons(fieldName0, fieldName1Up));
                        var parameterTypes = $author$project$ElmSyntaxToRust$inferredTypeExpandToFunction(expressionTypedNode.n).aj;
                        return $elm$core$Result$Ok({
                            h: $elm$core$List$foldr_fn(F2(function (parameter, resultSoFar) {
                                return $author$project$ElmSyntaxToRust$RustExpressionLambda({
                                    o: _List_fromArray([
                                        {
                                            a: parameter.a,
                                            n: $author$project$ElmSyntaxToRust$type__fn(function (moduleNameToAccess) {
                                                return $elm$core$Maybe$map_fn(function ($) {
                                                    return $.B;
                                                }, $miniBill$elm_fast_dict$FastDict$get_fn(moduleNameToAccess, context.r));
                                            }, parameter.n)
                                        }
                                    ]),
                                    h: resultSoFar,
                                    j: _List_Nil
                                });
                            }), $author$project$ElmSyntaxToRust$RustExpressionCall({
                                c: $miniBill$elm_fast_dict$FastDict$foldr_fn(F3(function (fieldName, fieldValue, soFar) {
                                    return _List_Cons({
                                        v: $elm$core$Maybe$Just(fieldName),
                                        l: fieldValue
                                    }, soFar);
                                }), _List_Nil, resultRecordFields),
                                w: $author$project$ElmSyntaxToRust$RustExpressionVariant({
                                    a: "Record",
                                    P: $author$project$ElmSyntaxToRust$generatedRecordTypeName($miniBill$elm_fast_dict$FastDict$keys(resultRecordFields))
                                })
                            }), _List_map2_fn_unwrapped(function (fieldName, fieldType) {
                                return {
                                    a: $author$project$ElmSyntaxToRust$generatedFieldValueParameterName(fieldName),
                                    n: fieldType
                                };
                            }, _List_Cons(fieldName0, fieldName1Up), parameterTypes)),
                            j: _List_Nil
                        });
                    }
                }
                else {
                    return $elm$core$Result$Err("could not find declaration for the record type alias constructor " + $author$project$ElmSyntaxToRust$inferredReferenceToInfoString(reference));
                }
            case 5:
                var reference = _v6.a;
                var asVariableFromWithinDeclaration = function () {
                    var _v26 = reference.b;
                    if (_v26 === "") {
                        return $miniBill$elm_fast_dict$FastSet$member_fn(reference.a, context.y) ? $elm$core$Maybe$Just($author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(reference.a)) : $elm$core$Maybe$Nothing;
                    }
                    else {
                        return $elm$core$Maybe$Nothing;
                    }
                }();
                return $elm$core$Result$Ok({
                    h: function () {
                        if (!asVariableFromWithinDeclaration.$) {
                            var variableFromWithinDeclaration = asVariableFromWithinDeclaration.a;
                            var _v21 = $miniBill$elm_fast_dict$FastDict$get_fn(variableFromWithinDeclaration, context.z);
                            if (_v21.$ === 1) {
                                return $author$project$ElmSyntaxToRust$RustExpressionReference({ b: $elm$core$Maybe$Nothing, a: variableFromWithinDeclaration });
                            }
                            else {
                                var letDeclaredValueOrFunctionType = _v21.a;
                                return $author$project$ElmSyntaxToRust$rustExpressionReferenceDeclaredValueOrFunctionAppliedLazilyOrCurriedIfNecessary_fn(context, {
                                    dA: expressionTypedNode.n,
                                    b: $elm$core$Maybe$Nothing,
                                    a: variableFromWithinDeclaration,
                                    dk: $author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases_fn(function (moduleName) {
                                        return $elm$core$Maybe$map_fn(function ($) {
                                            return $.B;
                                        }, $miniBill$elm_fast_dict$FastDict$get_fn(moduleName, context.r));
                                    }, letDeclaredValueOrFunctionType)
                                });
                            }
                        }
                        else {
                            var _v22 = $miniBill$elm_fast_dict$FastDict$get_fn(reference.b, context.r);
                            if (_v22.$ === 1) {
                                return $author$project$ElmSyntaxToRust$RustExpressionReference({
                                    b: $elm$core$Maybe$Nothing,
                                    a: $author$project$ElmSyntaxToRust$referenceToRustName({ b: reference.b, a: reference.a })
                                });
                            }
                            else {
                                var referenceOriginModuleInfo = _v22.a;
                                if ($miniBill$elm_fast_dict$FastSet$member_fn(reference.a, referenceOriginModuleInfo.bh)) {
                                    return $author$project$ElmSyntaxToRust$RustExpressionLambda({
                                        o: _List_fromArray([
                                            { a: "generated_value", n: $author$project$ElmSyntaxToRust$rustTypeJsonEncodeValue }
                                        ]),
                                        h: $author$project$ElmSyntaxToRust$RustExpressionArrayLiteral(_List_fromArray([
                                            $author$project$ElmSyntaxToRust$RustExpressionCall({
                                                c: _List_fromArray([
                                                    {
                                                        v: $elm$core$Maybe$Just("name"),
                                                        l: $author$project$ElmSyntaxToRust$RustExpressionStringLiteral(reference.a)
                                                    },
                                                    {
                                                        v: $elm$core$Maybe$Just("value"),
                                                        l: $author$project$ElmSyntaxToRust$RustExpressionReference({ b: $elm$core$Maybe$Nothing, a: "generated_value" })
                                                    }
                                                ]),
                                                w: $author$project$ElmSyntaxToRust$RustExpressionVariant({ a: "PlatformCmd_PortOutgoing", P: "PlatformCmd_CmdSingle" })
                                            })
                                        ])),
                                        j: _List_Nil
                                    });
                                }
                                else {
                                    if ($miniBill$elm_fast_dict$FastSet$member_fn(reference.a, referenceOriginModuleInfo.bg)) {
                                        return $author$project$ElmSyntaxToRust$RustExpressionLambda({
                                            o: _List_fromArray([
                                                {
                                                    a: "generated_onValue",
                                                    n: function () {
                                                        var _v23 = expressionTypedNode.n;
                                                        if ((_v23.$ === 1) && (_v23.a.$ === 6)) {
                                                            var expressionTypeFunction = _v23.a.a;
                                                            return $author$project$ElmSyntaxToRust$type__fn(function (moduleName) {
                                                                return $elm$core$Maybe$map_fn(function ($) {
                                                                    return $.B;
                                                                }, $miniBill$elm_fast_dict$FastDict$get_fn(moduleName, context.r));
                                                            }, expressionTypeFunction.e);
                                                        }
                                                        else {
                                                            return $author$project$ElmSyntaxToRust$RustTypeFunction({
                                                                e: _List_fromArray([$author$project$ElmSyntaxToRust$rustTypeJsonEncodeValue]),
                                                                d: $author$project$ElmSyntaxToRust$RustTypeVariable("event")
                                                            });
                                                        }
                                                    }()
                                                }
                                            ]),
                                            h: $author$project$ElmSyntaxToRust$RustExpressionArrayLiteral(_List_fromArray([
                                                $author$project$ElmSyntaxToRust$RustExpressionCall({
                                                    c: _List_fromArray([
                                                        {
                                                            v: $elm$core$Maybe$Just("name"),
                                                            l: $author$project$ElmSyntaxToRust$RustExpressionStringLiteral(reference.a)
                                                        },
                                                        {
                                                            v: $elm$core$Maybe$Just("onValue"),
                                                            l: $author$project$ElmSyntaxToRust$RustExpressionReference({ b: $elm$core$Maybe$Nothing, a: "generated_onValue" })
                                                        }
                                                    ]),
                                                    w: $author$project$ElmSyntaxToRust$RustExpressionVariant({ a: "PlatformSub_PortIncoming", P: "PlatformSub_SubSingle" })
                                                })
                                            ])),
                                            j: _List_Nil
                                        });
                                    }
                                    else {
                                        var _v24 = $miniBill$elm_fast_dict$FastDict$get_fn(reference.a, referenceOriginModuleInfo.bX);
                                        if (_v24.$ === 1) {
                                            return $author$project$ElmSyntaxToRust$RustExpressionReference({
                                                b: $elm$core$Maybe$Nothing,
                                                a: $author$project$ElmSyntaxToRust$referenceToRustName({ b: reference.b, a: reference.a })
                                            });
                                        }
                                        else {
                                            var originDeclarationType = _v24.a;
                                            var typeAliasesInModule = function (moduleNameToAccess) {
                                                return $elm$core$Maybe$map_fn(function ($) {
                                                    return $.B;
                                                }, $miniBill$elm_fast_dict$FastDict$get_fn(moduleNameToAccess, context.r));
                                            };
                                            var originDeclarationTypeWithExpandedAliases = $author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases_fn(typeAliasesInModule, originDeclarationType);
                                            var rustReference = function () {
                                                var _v25 = $author$project$ElmSyntaxToRust$referenceToCoreRust({ b: reference.b, a: reference.a, n: expressionTypedNode.n });
                                                if (!_v25.$) {
                                                    var coreRustReference = _v25.a;
                                                    return coreRustReference;
                                                }
                                                else {
                                                    return {
                                                        b: $elm$core$Maybe$Nothing,
                                                        a: $author$project$ElmSyntaxToRust$rustNameWithSpecializedTypes_fn($author$project$ElmSyntaxToRust$inferredTypeSpecializedVariablesFrom_fn(originDeclarationTypeWithExpandedAliases, $author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases_fn(typeAliasesInModule, expressionTypedNode.n)), $author$project$ElmSyntaxToRust$referenceToRustName({ b: reference.b, a: reference.a }))
                                                    };
                                                }
                                            }();
                                            return $author$project$ElmSyntaxToRust$rustExpressionReferenceDeclaredValueOrFunctionAppliedLazilyOrCurriedIfNecessary_fn(context, { dA: expressionTypedNode.n, b: rustReference.b, a: rustReference.a, dk: originDeclarationTypeWithExpandedAliases });
                                        }
                                    }
                                }
                            }
                        }
                    }(),
                    j: _List_Nil
                });
            case 16:
                var ifThenElse = _v6.a;
                return $elm$core$Result$map3_fn_unwrapped(function (condition, onTrue, onFalse) {
                    if ($elm$core$List$isEmpty(onTrue.j) && $elm$core$List$isEmpty(onFalse.j)) {
                        return {
                            h: $author$project$ElmSyntaxToRust$RustExpressionIfElse({ aA: condition.h, aB: onFalse.h, aC: onTrue.h }),
                            j: condition.j
                        };
                    }
                    else {
                        var typeAliasesInModule = function (moduleNameToAccess) {
                            return $elm$core$Maybe$map_fn(function ($) {
                                return $.B;
                            }, $miniBill$elm_fast_dict$FastDict$get_fn(moduleNameToAccess, context.r));
                        };
                        var ifLocalResultVariableToInitialize = $author$project$ElmSyntaxToRust$generatedLocalReturnResult(context.q);
                        return {
                            h: $author$project$ElmSyntaxToRust$RustExpressionReference({ b: $elm$core$Maybe$Nothing, a: ifLocalResultVariableToInitialize }),
                            j: _Utils_ap(condition.j, _List_fromArray([
                                $author$project$ElmSyntaxToRust$RustStatementLetDeclarationUninitialized({
                                    a: ifLocalResultVariableToInitialize,
                                    n: $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, expressionTypedNode.n)
                                }),
                                $author$project$ElmSyntaxToRust$RustStatementIfElse({
                                    aA: condition.h,
                                    aB: _Utils_ap(onFalse.j, _List_fromArray([
                                        $author$project$ElmSyntaxToRust$RustStatementBindingAssignment({ av: onFalse.h, a: ifLocalResultVariableToInitialize })
                                    ])),
                                    aC: _Utils_ap(onTrue.j, _List_fromArray([
                                        $author$project$ElmSyntaxToRust$RustStatementBindingAssignment({ av: onTrue.h, a: ifLocalResultVariableToInitialize })
                                    ]))
                                })
                            ]))
                        };
                    }
                }, $author$project$ElmSyntaxToRust$expressionWrappingInLetIfOrSwitchResult_fn({
                    z: context.z,
                    r: context.r,
                    q: _List_Cons("condition", context.q),
                    y: context.y
                }, ifThenElse.aA), $author$project$ElmSyntaxToRust$expression_fn({
                    z: context.z,
                    r: context.r,
                    q: _List_Cons("onTrue", context.q),
                    y: context.y
                }, ifThenElse.aC), $author$project$ElmSyntaxToRust$expression_fn({
                    z: context.z,
                    r: context.r,
                    q: _List_Cons("onFalse", context.q),
                    y: context.y
                }, ifThenElse.aB));
            case 11:
                var inParens = _v6.a;
                var $temp$context = context, $temp$expressionTypedNode = inParens;
                context = $temp$context;
                expressionTypedNode = $temp$expressionTypedNode;
                continue expression;
            case 10:
                var inNegationNode = _v6.a;
                return $elm$core$Result$map_fn(function (rustInNegation) {
                    return {
                        h: $author$project$ElmSyntaxToRust$RustExpressionNegateOperation(rustInNegation.h),
                        j: rustInNegation.j
                    };
                }, $author$project$ElmSyntaxToRust$expression_fn(context, inNegationNode));
            case 14:
                var recordAccess = _v6.a;
                return $elm$core$Result$map_fn(function (record) {
                    return {
                        h: $author$project$ElmSyntaxToRust$RustExpressionRecordAccess({
                            bI: $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords($elm$core$String$replace_fn(".", "", recordAccess.cs)),
                            aY: record.h
                        }),
                        j: record.j
                    };
                }, $author$project$ElmSyntaxToRust$expression_fn(context, recordAccess.aY));
            case 12:
                var parts = _v6.a;
                return $elm$core$Result$map2_fn_unwrapped(function (part0, part1) {
                    return {
                        h: $author$project$ElmSyntaxToRust$rustExpressionCallTuple_fn(part0.h, part1.h),
                        j: _Utils_ap(part0.j, part1.j)
                    };
                }, $author$project$ElmSyntaxToRust$expressionWrappingInLetIfOrSwitchResult_fn({
                    z: context.z,
                    r: context.r,
                    q: _List_Cons("part0", context.q),
                    y: context.y
                }, parts.s), $author$project$ElmSyntaxToRust$expressionWrappingInLetIfOrSwitchResult_fn({
                    z: context.z,
                    r: context.r,
                    q: _List_Cons("part1", context.q),
                    y: context.y
                }, parts.t));
            case 13:
                var parts = _v6.a;
                return $elm$core$Result$map3_fn_unwrapped(function (part0, part1, part2) {
                    return {
                        h: $author$project$ElmSyntaxToRust$rustExpressionCallTriple_fn(part0.h, part1.h, part2.h),
                        j: _Utils_ap(part0.j, _Utils_ap(part1.j, part2.j))
                    };
                }, $author$project$ElmSyntaxToRust$expressionWrappingInLetIfOrSwitchResult_fn({
                    z: context.z,
                    r: context.r,
                    q: _List_Cons("part0", context.q),
                    y: context.y
                }, parts.s), $author$project$ElmSyntaxToRust$expressionWrappingInLetIfOrSwitchResult_fn({
                    z: context.z,
                    r: context.r,
                    q: _List_Cons("part1", context.q),
                    y: context.y
                }, parts.t), $author$project$ElmSyntaxToRust$expressionWrappingInLetIfOrSwitchResult_fn({
                    z: context.z,
                    r: context.r,
                    q: _List_Cons("part2", context.q),
                    y: context.y
                }, parts.ak));
            case 17:
                var elementNodes = _v6.a;
                return $elm$core$Result$map_fn(function (elements) {
                    return {
                        h: function () {
                            if (!elements.b) {
                                return $author$project$ElmSyntaxToRust$rustExpressionListEmpty;
                            }
                            else {
                                if (!elements.b.b) {
                                    var onlyElement = elements.a;
                                    return $author$project$ElmSyntaxToRust$RustExpressionCall({
                                        c: _List_fromArray([
                                            { v: $elm$core$Maybe$Nothing, l: onlyElement.h }
                                        ]),
                                        w: $author$project$ElmSyntaxToRust$RustExpressionReference({ b: $elm$core$Maybe$Nothing, a: "List_singleton" })
                                    });
                                }
                                else {
                                    var element0 = elements.a;
                                    var _v28 = elements.b;
                                    var element1 = _v28.a;
                                    var element2Up = _v28.b;
                                    return $author$project$ElmSyntaxToRust$RustExpressionCall({
                                        c: _List_fromArray([
                                            {
                                                v: $elm$core$Maybe$Nothing,
                                                l: $author$project$ElmSyntaxToRust$RustExpressionArrayLiteral($elm$core$List$map_fn(function ($) {
                                                    return $.h;
                                                }, _List_Cons(element0, _List_Cons(element1, element2Up))))
                                            }
                                        ]),
                                        w: $author$project$ElmSyntaxToRust$RustExpressionReference({ b: $elm$core$Maybe$Nothing, a: "Array_toList" })
                                    });
                                }
                            }
                        }(),
                        j: $elm$core$List$concatMap_fn(function ($) {
                            return $.j;
                        }, elements)
                    };
                }, $author$project$ElmSyntaxToRust$listMapAndCombineOk_fn(function (_v29) {
                    var elementIndex = _v29.a;
                    var element = _v29.b;
                    return $author$project$ElmSyntaxToRust$expressionWrappingInLetIfOrSwitchResult_fn({
                        z: context.z,
                        r: context.r,
                        q: _List_Cons($elm$core$String$fromInt(elementIndex), context.q),
                        y: context.y
                    }, element);
                }, $elm$core$List$indexedMap_fn($elm$core$Tuple$pair, elementNodes)));
            case 19:
                var fieldNodes = _v6.a;
                return $elm$core$Result$map_fn(function (fields) {
                    var fieldResults = $elm$core$List$foldl_fn_unwrapped(function (_v31, soFar) {
                        var fieldName = _v31.a;
                        var fieldValue = _v31.b;
                        return $miniBill$elm_fast_dict$FastDict$insert_fn(fieldName, fieldValue.h, soFar);
                    }, $miniBill$elm_fast_dict$FastDict$empty, fields);
                    return {
                        h: $author$project$ElmSyntaxToRust$RustExpressionCall({
                            c: $miniBill$elm_fast_dict$FastDict$foldr_fn(F3(function (fieldName, fieldValue, soFar) {
                                return _List_Cons({
                                    v: $elm$core$Maybe$Just(fieldName),
                                    l: fieldValue
                                }, soFar);
                            }), _List_Nil, fieldResults),
                            w: $author$project$ElmSyntaxToRust$RustExpressionVariant({
                                a: "Record",
                                P: $author$project$ElmSyntaxToRust$generatedRecordTypeName($miniBill$elm_fast_dict$FastDict$keys(fieldResults))
                            })
                        }),
                        j: $elm$core$List$concatMap_fn(function (_v30) {
                            var fieldValue = _v30.b;
                            return fieldValue.j;
                        }, fields)
                    };
                }, $author$project$ElmSyntaxToRust$listMapAndCombineOk_fn(function (field) {
                    return $elm$core$Result$map_fn(function (fieldValue) {
                        return _Utils_Tuple2($author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(field.a), fieldValue);
                    }, $author$project$ElmSyntaxToRust$expressionWrappingInLetIfOrSwitchResult_fn({
                        z: context.z,
                        r: context.r,
                        q: _List_Cons(field.a, context.q),
                        y: context.y
                    }, field.l));
                }, fieldNodes));
            case 20:
                var recordUpdate = _v6.a;
                var _v32 = expressionTypedNode.n;
                if ((_v32.$ === 1) && (_v32.a.$ === 4)) {
                    var allFields = _v32.a.a;
                    return $elm$core$Result$map_fn(function (fieldsToSet) {
                        var originalRecordVariable = $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords($author$project$ElmSyntaxToRust$referenceToRustName({ b: recordUpdate.V.l.b, a: recordUpdate.V.l.a }));
                        var rustOriginalRecordVariableReferenceExpression = $author$project$ElmSyntaxToRust$RustExpressionReference({ b: $elm$core$Maybe$Nothing, a: originalRecordVariable });
                        var fieldsToSetDict = $elm$core$List$foldl_fn_unwrapped(function (_v37, soFar) {
                            var fieldName = _v37.a;
                            var valueToSet = _v37.b;
                            return $miniBill$elm_fast_dict$FastDict$insert_fn(fieldName, valueToSet.h, soFar);
                        }, $miniBill$elm_fast_dict$FastDict$empty, fieldsToSet);
                        return {
                            h: $author$project$ElmSyntaxToRust$RustExpressionCall({
                                c: $miniBill$elm_fast_dict$FastDict$foldr_fn(F3(function (fieldName, _v33, soFar) {
                                    return _List_Cons({
                                        v: $elm$core$Maybe$Just(fieldName),
                                        l: function () {
                                            var _v34 = $miniBill$elm_fast_dict$FastDict$get_fn(fieldName, fieldsToSetDict);
                                            if (!_v34.$) {
                                                var valueToSet = _v34.a;
                                                return valueToSet;
                                            }
                                            else {
                                                return $author$project$ElmSyntaxToRust$RustExpressionRecordAccess({ bI: fieldName, aY: rustOriginalRecordVariableReferenceExpression });
                                            }
                                        }()
                                    }, soFar);
                                }), _List_Nil, allFields),
                                w: $author$project$ElmSyntaxToRust$RustExpressionVariant({
                                    a: "Record",
                                    P: $author$project$ElmSyntaxToRust$generatedRecordTypeName($miniBill$elm_fast_dict$FastDict$foldr_fn(F3(function (fieldName, _v35, soFar) {
                                        return _List_Cons($author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(fieldName), soFar);
                                    }), _List_Nil, allFields))
                                })
                            }),
                            j: $elm$core$List$concatMap_fn(function (_v36) {
                                var fieldValue = _v36.b;
                                return fieldValue.j;
                            }, fieldsToSet)
                        };
                    }, $author$project$ElmSyntaxToRust$listMapAndCombineOk_fn(function (field) {
                        return $elm$core$Result$map_fn(function (fieldValue) {
                            return _Utils_Tuple2($author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(field.a), fieldValue);
                        }, $author$project$ElmSyntaxToRust$expressionWrappingInLetIfOrSwitchResult_fn({
                            z: context.z,
                            r: context.r,
                            q: _List_Cons(field.a, context.q),
                            y: context.y
                        }, field.l));
                    }, _List_Cons(recordUpdate.d4, recordUpdate.d5)));
                }
                else {
                    return $elm$core$Result$Err("(" + ($author$project$ElmSyntaxToRust$rangeToInfoString(expressionTypedNode.aN) + ") I tried to transpile an elm record update but the inferred type is not a record so I am unable to construct a new record. This likely means you are using extensible records in a variant or let declaration"));
                }
            case 21:
                var lambda = _v6.a;
                var typeAliasesInModule = function (moduleNameToAccess) {
                    return $elm$core$Maybe$map_fn(function ($) {
                        return $.B;
                    }, $miniBill$elm_fast_dict$FastDict$get_fn(moduleNameToAccess, context.r));
                };
                return $elm$core$Result$map_fn(function (result) {
                    var parameter1UpResultAndStatements = $elm$core$List$foldr_fn(F2(function (parameter, soFar) {
                        return {
                            h: $author$project$ElmSyntaxToRust$RustExpressionLambda({
                                o: _List_fromArray([
                                    {
                                        a: function () {
                                            var _v39 = parameter.m;
                                            if (_v39.$ === 1) {
                                                var patternVariable = _v39.a;
                                                return $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(patternVariable);
                                            }
                                            else {
                                                return $author$project$ElmSyntaxToRust$generatedParameterNameForIndexAtPath_fn(parameter.ee, context.q);
                                            }
                                        }(),
                                        n: $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, parameter.n)
                                    }
                                ]),
                                h: soFar.h,
                                j: soFar.j
                            }),
                            j: _List_Nil
                        };
                    }), {
                        h: result.h,
                        j: _Utils_ap($elm$core$List$concat($elm$core$List$indexedMap_fn_unwrapped(function (parameterIndex, parameter) {
                            var _v40 = parameter.l;
                            if (_v40.$ === 1) {
                                return _List_Nil;
                            }
                            else {
                                return $author$project$ElmSyntaxToRust$destructuringToRustStatements_fn({
                                    q: _List_Cons("parameter" + $elm$core$String$fromInt(parameterIndex), context.q),
                                    cE: typeAliasesInModule
                                }, {
                                    O: $author$project$ElmSyntaxToRust$RustExpressionReference({
                                        b: $elm$core$Maybe$Nothing,
                                        a: $author$project$ElmSyntaxToRust$generatedParameterNameForIndexAtPath_fn(parameterIndex, context.q)
                                    }),
                                    m: parameter
                                });
                            }
                        }, _List_Cons(lambda.dm, lambda.dC))), result.j)
                    }, $elm$core$List$indexedMap_fn_unwrapped(function (parameter1UpIndex, parameter) {
                        return { ee: parameter1UpIndex + 1, m: parameter.l, n: parameter.n };
                    }, lambda.dC));
                    return {
                        h: $author$project$ElmSyntaxToRust$RustExpressionLambda({
                            o: _List_fromArray([
                                {
                                    a: function () {
                                        var _v38 = lambda.dm.l;
                                        if (_v38.$ === 1) {
                                            var patternVariable = _v38.a;
                                            return $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(patternVariable);
                                        }
                                        else {
                                            return $author$project$ElmSyntaxToRust$generatedParameterNameForIndexAtPath_fn(0, context.q);
                                        }
                                    }(),
                                    n: $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, lambda.dm.n)
                                }
                            ]),
                            h: parameter1UpResultAndStatements.h,
                            j: parameter1UpResultAndStatements.j
                        }),
                        j: _List_Nil
                    };
                }, $author$project$ElmSyntaxToRust$expression_fn({
                    z: context.z,
                    r: context.r,
                    q: _List_Cons("result", context.q),
                    y: $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn($author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables, _List_Cons(lambda.dm, lambda.dC)), context.y)
                }, lambda.h));
            case 22:
                var caseOf = _v6.a;
                return $elm$core$Result$map3_fn_unwrapped(function (matched, case0, case1Up) {
                    var allCasesHaveNoStatements = $elm$core$List$all_fn(function (rustCase) {
                        return $elm$core$List$isEmpty(rustCase.j);
                    }, _List_Cons(case0, case1Up));
                    if (allCasesHaveNoStatements) {
                        return {
                            h: $author$project$ElmSyntaxToRust$RustExpressionSwitch({
                                ar: { m: case0.m, h: case0.h },
                                as: $elm$core$List$map_fn(function (rustCase) {
                                    return { m: rustCase.m, h: rustCase.h };
                                }, case1Up),
                                at: matched.h
                            }),
                            j: matched.j
                        };
                    }
                    else {
                        var typeAliasesInModule = function (moduleNameToAccess) {
                            return $elm$core$Maybe$map_fn(function ($) {
                                return $.B;
                            }, $miniBill$elm_fast_dict$FastDict$get_fn(moduleNameToAccess, context.r));
                        };
                        var switchLocalResultVariableToInitialize = $author$project$ElmSyntaxToRust$generatedLocalReturnResult(context.q);
                        return {
                            h: $author$project$ElmSyntaxToRust$RustExpressionReference({ b: $elm$core$Maybe$Nothing, a: switchLocalResultVariableToInitialize }),
                            j: _Utils_ap(matched.j, _List_fromArray([
                                $author$project$ElmSyntaxToRust$RustStatementLetDeclarationUninitialized({
                                    a: switchLocalResultVariableToInitialize,
                                    n: $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, expressionTypedNode.n)
                                }),
                                $author$project$ElmSyntaxToRust$RustStatementSwitch({
                                    ar: {
                                        m: case0.m,
                                        j: _Utils_ap(case0.j, _List_fromArray([
                                            $author$project$ElmSyntaxToRust$RustStatementBindingAssignment({ av: case0.h, a: switchLocalResultVariableToInitialize })
                                        ]))
                                    },
                                    as: $elm$core$List$map_fn(function (rustCase) {
                                        return {
                                            m: rustCase.m,
                                            j: _Utils_ap(rustCase.j, _List_fromArray([
                                                $author$project$ElmSyntaxToRust$RustStatementBindingAssignment({ av: rustCase.h, a: switchLocalResultVariableToInitialize })
                                            ]))
                                        };
                                    }, case1Up),
                                    at: matched.h
                                })
                            ]))
                        };
                    }
                }, $author$project$ElmSyntaxToRust$expressionWrappingInLetIfOrSwitchResult_fn({
                    z: context.z,
                    r: context.r,
                    q: _List_Cons("matched", context.q),
                    y: context.y
                }, caseOf.at), $author$project$ElmSyntaxToRust$case__fn({
                    z: context.z,
                    r: context.r,
                    q: _List_Cons("case0", context.q),
                    y: context.y
                }, caseOf.ar), $author$project$ElmSyntaxToRust$listMapAndCombineOk_fn(function (_v41) {
                    var caseIndex = _v41.a;
                    var laterCase = _v41.b;
                    return $author$project$ElmSyntaxToRust$case__fn({
                        z: context.z,
                        r: context.r,
                        q: _List_Cons("case" + $elm$core$String$fromInt(caseIndex), context.q),
                        y: context.y
                    }, laterCase);
                }, $elm$core$List$indexedMap_fn_unwrapped(function (laterCaseIndex, laterCase) {
                    return _Utils_Tuple2(laterCaseIndex + 1, laterCase);
                }, caseOf.as)));
            default:
                var letIn = _v6.a;
                var letIntroducedBindings = $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn(function (syntaxLetDeclarationAndRange) {
                    var _v44 = syntaxLetDeclarationAndRange.L;
                    if (_v44.$ === 1) {
                        var syntaxLetValueOrFunction = _v44.a;
                        return $miniBill$elm_fast_dict$FastSet$singleton(syntaxLetValueOrFunction.a);
                    }
                    else {
                        var syntaxLetDestructuring = _v44.a;
                        return $miniBill$elm_fast_dict$FastSet$fromList($author$project$ElmSyntaxToRust$inferredPatternBindings(syntaxLetDestructuring.m));
                    }
                }, _List_Cons(letIn.c4, letIn.c5));
                var letIntroducedBindingNameWithPath = function (withoutPath) {
                    return "generated_let_" + ($elm$core$String$join_fn("_", context.q) + ("_" + withoutPath));
                };
                var letDeclaredValueAndFunctionTypesIncludingCurrentFromLets = $elm$core$List$foldl_fn_unwrapped(function (declarationNode, soFar) {
                    var _v43 = declarationNode.L;
                    if (!_v43.$) {
                        return soFar;
                    }
                    else {
                        var inferredLetValueOrFunction = _v43.a;
                        return $miniBill$elm_fast_dict$FastDict$insert_fn(inferredLetValueOrFunction.a, inferredLetValueOrFunction.n, soFar);
                    }
                }, context.z, _List_Cons(letIn.c4, letIn.c5));
                return $elm$core$Result$map2_fn_unwrapped(function (declarations, result) {
                    var substituteLetIntroducedBindingByNameWithPath = function (existingBindingName) {
                        return $miniBill$elm_fast_dict$FastSet$member_fn(existingBindingName, letIntroducedBindings) ? letIntroducedBindingNameWithPath(existingBindingName) : existingBindingName;
                    };
                    return {
                        h: $author$project$ElmSyntaxToRust$rustExpressionAlterBindingNames_fn(substituteLetIntroducedBindingByNameWithPath, result.h),
                        j: $elm$core$List$map_fn(function (statement) {
                            return $author$project$ElmSyntaxToRust$rustStatementAlterBindingNames_fn(substituteLetIntroducedBindingByNameWithPath, statement);
                        }, _Utils_ap($elm$core$List$concat(declarations), result.j))
                    };
                }, $author$project$ElmSyntaxToRust$listMapAndCombineOk_fn(function (_v42) {
                    var letDeclarationIndex = _v42.a;
                    var letDeclarationNode = _v42.b;
                    return $author$project$ElmSyntaxToRust$letDeclaration_fn({
                        z: letDeclaredValueAndFunctionTypesIncludingCurrentFromLets,
                        r: context.r,
                        q: _List_Cons("letDeclaration" + $elm$core$String$fromInt(letDeclarationIndex), context.q),
                        y: $miniBill$elm_fast_dict$FastSet$union_fn(letIntroducedBindings, context.y)
                    }, letDeclarationNode);
                }, $elm$core$List$indexedMap_fn_unwrapped(function (letDeclarationIndex, laterDeclaration) {
                    return _Utils_Tuple2(letDeclarationIndex, laterDeclaration);
                }, $author$project$ElmSyntaxToRust$inferredLetDeclarationNodesSortFromMostToLeastDependedOn(_List_Cons(letIn.c4, letIn.c5)))), $author$project$ElmSyntaxToRust$expression_fn({
                    z: letDeclaredValueAndFunctionTypesIncludingCurrentFromLets,
                    r: context.r,
                    q: _List_Cons("letResult", context.q),
                    y: $miniBill$elm_fast_dict$FastSet$union_fn(letIntroducedBindings, context.y)
                }, letIn.h));
        }
    }
}, $author$project$ElmSyntaxToRust$expression = F2($author$project$ElmSyntaxToRust$expression_fn);
var $author$project$ElmSyntaxToRust$expressionWrappingInLetIfOrSwitchResult_fn = function (context, expressionTypedNode) {
    var _v4 = $author$project$ElmSyntaxToRust$expression_fn(context, expressionTypedNode);
    if (_v4.$ === 1) {
        var error = _v4.a;
        return $elm$core$Result$Err(error);
    }
    else {
        var expressionTranspiled = _v4.a;
        var wrappedInLetIfIfOrSwitch = $author$project$ElmSyntaxToRust$rustExpressionWrapInLetIfOrSwitchResult_fn(context.q, {
            O: expressionTranspiled.h,
            n: function (_v5) {
                return $author$project$ElmSyntaxToRust$type__fn(function (moduleNameToAccess) {
                    return $elm$core$Maybe$map_fn(function ($) {
                        return $.B;
                    }, $miniBill$elm_fast_dict$FastDict$get_fn(moduleNameToAccess, context.r));
                }, expressionTypedNode.n);
            }
        });
        return $elm$core$Result$Ok({
            h: wrappedInLetIfIfOrSwitch.h,
            j: _Utils_ap(expressionTranspiled.j, wrappedInLetIfIfOrSwitch.j)
        });
    }
}, $author$project$ElmSyntaxToRust$expressionWrappingInLetIfOrSwitchResult = F2($author$project$ElmSyntaxToRust$expressionWrappingInLetIfOrSwitchResult_fn);
var $author$project$ElmSyntaxToRust$letDeclaration_fn = function (context, syntaxLetDeclarationNode) {
    var _v3 = syntaxLetDeclarationNode.L;
    if (!_v3.$) {
        var letDestructuring = _v3.a;
        return $elm$core$Result$map_fn(function (destructuredExpression) {
            return _Utils_ap(destructuredExpression.j, $author$project$ElmSyntaxToRust$destructuringToRustStatements_fn({
                q: _List_Cons("destructuredExpression", context.q),
                cE: function (moduleNameToAccess) {
                    return $elm$core$Maybe$map_fn(function ($) {
                        return $.B;
                    }, $miniBill$elm_fast_dict$FastDict$get_fn(moduleNameToAccess, context.r));
                }
            }, { O: destructuredExpression.h, m: letDestructuring.m }));
        }, $author$project$ElmSyntaxToRust$expression_fn({
            z: context.z,
            r: context.r,
            q: _List_Cons("destructuredExpression", context.q),
            y: context.y
        }, letDestructuring.O));
    }
    else {
        var letValueOrFunction = _v3.a;
        return $author$project$ElmSyntaxToRust$letValueOrFunctionDeclaration_fn(context, { L: letValueOrFunction, aN: syntaxLetDeclarationNode.aN });
    }
}, $author$project$ElmSyntaxToRust$letDeclaration = F2($author$project$ElmSyntaxToRust$letDeclaration_fn);
var $author$project$ElmSyntaxToRust$letValueOrFunctionDeclaration_fn = function (context, syntaxLetDeclarationValueOrFunctionNode) {
    var typeAliasesInModule = function (moduleNameToAccess) {
        return $elm$core$Maybe$map_fn(function ($) {
            return $.B;
        }, $miniBill$elm_fast_dict$FastDict$get_fn(moduleNameToAccess, context.r));
    };
    var typeWithExpandedAliases = $author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases_fn(typeAliasesInModule, syntaxLetDeclarationValueOrFunctionNode.L.n);
    var rustFullTypeAsFunction = $author$project$ElmSyntaxToRust$inferredTypeExpandFunction(typeWithExpandedAliases);
    var introducedTypeParameters = $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (variableName, variableUseRange, soFar) {
        return ((!_String_startsWith_fn("number", variableName)) && $author$project$ElmSyntaxToRust$rangeIncludesRange_fn(variableUseRange, syntaxLetDeclarationValueOrFunctionNode.aN)) ? _List_Cons(variableName, soFar) : soFar;
    }), _List_Nil, $author$project$ElmSyntaxToRust$inferredTypeContainedVariables(syntaxLetDeclarationValueOrFunctionNode.L.n));
    var _v0 = rustFullTypeAsFunction.aj;
    if (!_v0.b) {
        return $elm$core$Result$map_fn(function (result) {
            var rustResultType = $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, syntaxLetDeclarationValueOrFunctionNode.L.n);
            var rustName = $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(syntaxLetDeclarationValueOrFunctionNode.L.a);
            return _Utils_ap(result.j, $author$project$ElmSyntaxToRust$rustTypeIsConcrete(rustResultType) ? _List_fromArray([
                $author$project$ElmSyntaxToRust$RustStatementLetDeclaration({ a: rustName, h: result.h, Q: rustResultType })
            ]) : _List_fromArray([
                $author$project$ElmSyntaxToRust$RustStatementFuncDeclaration({ b2: introducedTypeParameters, a: rustName, o: _List_Nil, h: result.h, Q: rustResultType, j: _List_Nil })
            ]));
        }, $author$project$ElmSyntaxToRust$expression_fn({ z: context.z, r: context.r, q: context.q, y: context.y }, syntaxLetDeclarationValueOrFunctionNode.L.h));
    }
    else {
        return $elm$core$Result$map_fn(function (result) {
            var syntaxParameterCount = $elm$core$List$length(syntaxLetDeclarationValueOrFunctionNode.L.o);
            var additionalGeneratedParameters = $elm$core$List$indexedMap_fn_unwrapped(function (additionalParameterIndex, additionalParameterInferredType) {
                return {
                    a: $author$project$ElmSyntaxToRust$generatedParameterNameForIndexAtPath_fn(syntaxParameterCount + additionalParameterIndex, context.q),
                    n: $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, additionalParameterInferredType)
                };
            }, $elm$core$List$drop_fn(syntaxParameterCount, rustFullTypeAsFunction.aj));
            var resultAndStatements = $elm$core$List$foldl_fn_unwrapped(function (additionalGeneratedParameter, soFar) {
                var condensedWithAdditionalGeneratedParameter = $author$project$ElmSyntaxToRust$rustExpressionCallCondense({
                    ai: $author$project$ElmSyntaxToRust$RustExpressionReference({ b: $elm$core$Maybe$Nothing, a: additionalGeneratedParameter.a }),
                    w: soFar.h
                });
                return {
                    h: condensedWithAdditionalGeneratedParameter.h,
                    j: _Utils_ap(condensedWithAdditionalGeneratedParameter.j, soFar.j)
                };
            }, {
                h: result.h,
                j: _Utils_ap($elm$core$List$concat($elm$core$List$indexedMap_fn_unwrapped(function (parameterIndex, parameter) {
                    var _v2 = parameter.l;
                    if (_v2.$ === 1) {
                        return _List_Nil;
                    }
                    else {
                        return $author$project$ElmSyntaxToRust$destructuringToRustStatements_fn({
                            q: _List_Cons("parameter" + $elm$core$String$fromInt(parameterIndex), context.q),
                            cE: typeAliasesInModule
                        }, {
                            O: $author$project$ElmSyntaxToRust$RustExpressionReference({
                                b: $elm$core$Maybe$Nothing,
                                a: $author$project$ElmSyntaxToRust$generatedParameterNameForIndexAtPath_fn(parameterIndex, context.q)
                            }),
                            m: parameter
                        });
                    }
                }, syntaxLetDeclarationValueOrFunctionNode.L.o)), result.j)
            }, additionalGeneratedParameters);
            return _List_fromArray([
                $author$project$ElmSyntaxToRust$RustStatementFuncDeclaration({
                    b2: introducedTypeParameters,
                    a: syntaxLetDeclarationValueOrFunctionNode.L.a,
                    o: _Utils_ap($elm$core$List$indexedMap_fn_unwrapped(function (parameterIndex, parameter) {
                        return {
                            a: function () {
                                var _v1 = parameter.l;
                                if (_v1.$ === 1) {
                                    var patternVariable = _v1.a;
                                    return $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(patternVariable);
                                }
                                else {
                                    return $author$project$ElmSyntaxToRust$generatedParameterNameForIndexAtPath_fn(parameterIndex, context.q);
                                }
                            }(),
                            n: $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, parameter.n)
                        };
                    }, syntaxLetDeclarationValueOrFunctionNode.L.o), additionalGeneratedParameters),
                    h: resultAndStatements.h,
                    Q: $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, rustFullTypeAsFunction.d),
                    j: resultAndStatements.j
                })
            ]);
        }, $author$project$ElmSyntaxToRust$expression_fn({
            z: context.z,
            r: context.r,
            q: _List_Cons("letDeclarationResult", context.q),
            y: $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn($author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables, syntaxLetDeclarationValueOrFunctionNode.L.o), context.y)
        }, syntaxLetDeclarationValueOrFunctionNode.L.h));
    }
}, $author$project$ElmSyntaxToRust$letValueOrFunctionDeclaration = F2($author$project$ElmSyntaxToRust$letValueOrFunctionDeclaration_fn);
var $author$project$ElmSyntaxToRust$generatedParameterNameForIndex = function (parameterIndex) {
    return "generated_" + $elm$core$String$fromInt(parameterIndex);
};
var $author$project$ElmSyntaxToRust$valueOrFunctionDeclaration_fn = function (moduleContext, syntaxDeclarationValueOrFunction) {
    var typeAliasesInModule = function (moduleNameToAccess) {
        return $elm$core$Maybe$map_fn(function ($) {
            return $.B;
        }, $miniBill$elm_fast_dict$FastDict$get_fn(moduleNameToAccess, moduleContext));
    };
    var typeWithExpandedAliases = $author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases_fn(typeAliasesInModule, syntaxDeclarationValueOrFunction.n);
    var rustFullTypeAsFunction = $author$project$ElmSyntaxToRust$inferredTypeExpandFunction(typeWithExpandedAliases);
    var _v0 = rustFullTypeAsFunction.aj;
    if (!_v0.b) {
        return $elm$core$Result$map_fn(function (result) {
            var rustResultType = $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, syntaxDeclarationValueOrFunction.n);
            return {
                o: $author$project$ElmSyntaxToRust$inferredTypeIsConcreteRustType(typeWithExpandedAliases) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(_List_Nil),
                h: result.h,
                Q: rustResultType,
                j: result.j
            };
        }, $author$project$ElmSyntaxToRust$expression_fn({ z: $miniBill$elm_fast_dict$FastDict$empty, r: moduleContext, q: _List_Nil, y: $miniBill$elm_fast_dict$FastSet$empty }, syntaxDeclarationValueOrFunction.h));
    }
    else {
        return $elm$core$Result$map_fn(function (result) {
            var syntaxParameterCount = $elm$core$List$length(syntaxDeclarationValueOrFunction.o);
            var additionalGeneratedParameters = $elm$core$List$indexedMap_fn_unwrapped(function (additionalParameterIndex, additionalParameterInferredType) {
                return {
                    a: $author$project$ElmSyntaxToRust$generatedParameterNameForIndex(syntaxParameterCount + additionalParameterIndex),
                    n: $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, additionalParameterInferredType)
                };
            }, $elm$core$List$drop_fn(syntaxParameterCount, rustFullTypeAsFunction.aj));
            var resultAndStatements = $elm$core$List$foldl_fn_unwrapped(function (additionalGeneratedParameter, soFar) {
                var condensedWithAdditionalGeneratedParameter = $author$project$ElmSyntaxToRust$rustExpressionCallCondense({
                    ai: $author$project$ElmSyntaxToRust$RustExpressionReference({ b: $elm$core$Maybe$Nothing, a: additionalGeneratedParameter.a }),
                    w: soFar.h
                });
                return {
                    h: condensedWithAdditionalGeneratedParameter.h,
                    j: _Utils_ap(condensedWithAdditionalGeneratedParameter.j, soFar.j)
                };
            }, {
                h: result.h,
                j: _Utils_ap($elm$core$List$concat($elm$core$List$indexedMap_fn_unwrapped(function (parameterIndex, parameter) {
                    var _v2 = parameter.l;
                    if (_v2.$ === 1) {
                        return _List_Nil;
                    }
                    else {
                        return $author$project$ElmSyntaxToRust$destructuringToRustStatements_fn({
                            q: _List_fromArray([
                                "parameter" + $elm$core$String$fromInt(parameterIndex)
                            ]),
                            cE: typeAliasesInModule
                        }, {
                            O: $author$project$ElmSyntaxToRust$RustExpressionReference({
                                b: $elm$core$Maybe$Nothing,
                                a: $author$project$ElmSyntaxToRust$generatedParameterNameForIndex(parameterIndex)
                            }),
                            m: parameter
                        });
                    }
                }, syntaxDeclarationValueOrFunction.o)), result.j)
            }, additionalGeneratedParameters);
            return {
                o: $elm$core$Maybe$Just(_Utils_ap($elm$core$List$indexedMap_fn_unwrapped(function (parameterIndex, parameter) {
                    return {
                        a: function () {
                            var _v1 = parameter.l;
                            if (_v1.$ === 1) {
                                var patternVariable = _v1.a;
                                return $author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords(patternVariable);
                            }
                            else {
                                return $author$project$ElmSyntaxToRust$generatedParameterNameForIndex(parameterIndex);
                            }
                        }(),
                        n: $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, parameter.n)
                    };
                }, syntaxDeclarationValueOrFunction.o), additionalGeneratedParameters)),
                h: resultAndStatements.h,
                Q: $author$project$ElmSyntaxToRust$type__fn(typeAliasesInModule, rustFullTypeAsFunction.d),
                j: resultAndStatements.j
            };
        }, $author$project$ElmSyntaxToRust$expression_fn({
            z: $miniBill$elm_fast_dict$FastDict$empty,
            r: moduleContext,
            q: _List_fromArray(["declarationResult"]),
            y: $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn($author$project$ElmSyntaxToRust$patternTypedNodeIntroducedVariables, syntaxDeclarationValueOrFunction.o)
        }, syntaxDeclarationValueOrFunction.h));
    }
}, $author$project$ElmSyntaxToRust$valueOrFunctionDeclaration = F2($author$project$ElmSyntaxToRust$valueOrFunctionDeclaration_fn);
var $author$project$ElmSyntaxToRust$modules = function (syntaxDeclarationsIncludingOverwrittenOnes) {
    var syntaxModules = $elm$core$List$filter_fn(function (syntaxModule) {
        var _v49 = $author$project$ElmSyntaxToRust$moduleHeaderName($stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxModule.cy));
        switch (_v49) {
            case "Basics":
                return false;
            case "Array":
                return false;
            case "Elm.JsArray":
                return false;
            case "Bitwise":
                return false;
            case "Debug":
                return false;
            case "Char":
                return false;
            case "String":
                return false;
            case "List":
                return false;
            case "Maybe":
                return false;
            case "Result":
                return false;
            case "Dict":
                return false;
            case "Set":
                return false;
            case "Platform":
                return false;
            case "Platform.Cmd":
                return false;
            case "Platform.Sub":
                return false;
            case "Process":
                return false;
            case "Task":
                return false;
            case "Json.Decode":
                return false;
            case "Json.Encode":
                return false;
            case "Regex":
                return false;
            case "File":
                return false;
            case "Bytes":
                return false;
            case "Bytes.Encode":
                return false;
            case "Bytes.Decode":
                return false;
            case "Http":
                return false;
            case "VirtualDom":
                return false;
            case "Browser":
                return false;
            case "Browser.Events":
                return false;
            case "Browser.Navigation":
                return false;
            case "Browser.Dom":
                return false;
            case "Browser.AnimationManager":
                return false;
            case "Debugger.Expando":
                return false;
            case "Debugger.History":
                return false;
            case "Debugger.Main":
                return false;
            case "Debugger.Metadata":
                return false;
            case "Debugger.Overlay":
                return false;
            case "Debugger.Report":
                return false;
            case "Time":
                return false;
            case "Random":
                return false;
            case "Markdown":
                return false;
            case "Benchmark":
                return false;
            case "WebGL":
                return false;
            case "WebGL.Settings":
                return false;
            case "WebGL.Settings.Blend":
                return false;
            case "WebGL.Settings.DepthTest":
                return false;
            case "WebGL.Settings.StencilTest":
                return false;
            case "WebGL.Texture":
                return false;
            case "Math.Matrix4":
                return false;
            case "Math.Vector2":
                return false;
            case "Math.Vector3":
                return false;
            case "Math.Vector4":
                return false;
            default:
                return true;
        }
    }, syntaxDeclarationsIncludingOverwrittenOnes);
    var syntaxModulesFromMostToLeastImported = $elm$core$List$foldr_fn(F2(function (edge0, syntaxModulesFromMostToLeastImportedSoFar) {
        if (!edge0.$) {
            var n = edge0.a;
            return _List_Cons(n, syntaxModulesFromMostToLeastImportedSoFar);
        }
        else {
            var recursive = edge0.a;
            return _Utils_ap(recursive, syntaxModulesFromMostToLeastImportedSoFar);
        }
    }), _List_Nil, $author$project$Graph$stronglyConnComponents($elm$core$List$map_fn(function (syntaxModule) {
        return _Utils_Tuple3(syntaxModule, $author$project$ElmSyntaxToRust$moduleHeaderName($stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxModule.cy)), $elm$core$List$map_fn(function (_v47) {
            var import_ = _v47.b;
            return $elm$core$String$join_fn(".", $stil4m$elm_syntax$Elm$Syntax$Node$value(import_.bN));
        }, syntaxModule.dz));
    }, syntaxModules)));
    var allElmRecords = $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn(function (syntaxModule) {
        return $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn(function (_v42) {
            var syntaxDeclaration = _v42.b;
            switch (syntaxDeclaration.$) {
                case 0:
                    var syntaxValueOrFunctionDeclaration = syntaxDeclaration.a;
                    var implementationContainedConstructedRecords = $author$project$ElmSyntaxToRust$syntaxExpressionContainedConstructedRecords($stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxValueOrFunctionDeclaration.L).O);
                    var _v44 = syntaxValueOrFunctionDeclaration.cW;
                    if (_v44.$ === 1) {
                        return implementationContainedConstructedRecords;
                    }
                    else {
                        var _v45 = _v44.a;
                        var signature = _v45.b;
                        return $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$typeContainedRecords(signature.ci), implementationContainedConstructedRecords);
                    }
                case 5:
                    return $miniBill$elm_fast_dict$FastSet$empty;
                case 4:
                    return $miniBill$elm_fast_dict$FastSet$empty;
                case 1:
                    var syntaxTypeAliasDeclaration = syntaxDeclaration.a;
                    return $author$project$ElmSyntaxToRust$typeContainedRecords(syntaxTypeAliasDeclaration.ci);
                case 3:
                    var syntaxPortDeclaration = syntaxDeclaration.a;
                    return $author$project$ElmSyntaxToRust$typeContainedRecords(syntaxPortDeclaration.ci);
                default:
                    var syntaxChoiceTypeDeclaration = syntaxDeclaration.a;
                    return $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn(function (_v46) {
                        var variant = _v46.b;
                        return $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn($author$project$ElmSyntaxToRust$typeContainedRecords, variant.c);
                    }, syntaxChoiceTypeDeclaration.fa);
            }
        }, syntaxModule.M);
    }, syntaxModules);
    var specialize = function (config) {
        var specializedTypes = $author$project$ElmSyntaxToRust$inferredTypeWithExpandedInnerAliasesSplitIntoSpecializedRustTypes_fn({ dM: allElmRecords }, $author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases_fn(function (moduleName) {
            return $miniBill$elm_fast_dict$FastDict$get_fn(moduleName, config.B);
        }, config.bq.n));
        if ($miniBill$elm_fast_dict$FastDict$isEmpty(specializedTypes)) {
            return _List_Nil;
        }
        else {
            var _v37 = config.cC.cW;
            if (_v37.$ === 1) {
                return $elm$core$List$map_fn(function (specialization) {
                    var specializedName = $author$project$ElmSyntaxToRust$rustNameWithSpecializedTypes_fn(specialization, config.bq.a);
                    var _v38 = config.cC.L;
                    var implementationRange = _v38.a;
                    var implementation = _v38.b;
                    return {
                        L: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(implementationRange, {
                            c: implementation.c,
                            O: implementation.O,
                            a: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn($stil4m$elm_syntax$Elm$Syntax$Node$range(implementation.a), specializedName)
                        }),
                        cM: config.cC.cM,
                        cW: $elm$core$Maybe$Nothing
                    };
                }, $author$project$ElmSyntaxToRust$fastDictPermutations(specializedTypes));
            }
            else {
                var _v39 = _v37.a;
                var signatureRange = _v39.a;
                var signature = _v39.b;
                var synchronizationFromInferredTypeVariableToAnnotationTypeVariable = $author$project$ElmSyntaxToRust$createSynchronizationFromInferredTypeVariableToSyntaxTypeVariable_fn(config.bq.n, signature.ci);
                return $elm$core$List$map_fn(function (specialization) {
                    var specializedName = $author$project$ElmSyntaxToRust$rustNameWithSpecializedTypes_fn(specialization, config.bq.a);
                    return {
                        L: function () {
                            var _v40 = config.cC.L;
                            var implementationRange = _v40.a;
                            var implementation = _v40.b;
                            return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(implementationRange, {
                                c: implementation.c,
                                O: implementation.O,
                                a: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn($stil4m$elm_syntax$Elm$Syntax$Node$range(implementation.a), specializedName)
                            });
                        }(),
                        cM: config.cC.cM,
                        cW: $elm$core$Maybe$Just($stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(signatureRange, {
                            a: $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn($stil4m$elm_syntax$Elm$Syntax$Node$range(signature.a), specializedName),
                            ci: $author$project$ElmSyntaxToRust$syntaxTypeNodeApplySpecialization_fn($miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (inferredVariable, specializedType, soFar) {
                                var _v41 = $miniBill$elm_fast_dict$FastDict$get_fn(inferredVariable, synchronizationFromInferredTypeVariableToAnnotationTypeVariable);
                                if (_v41.$ === 1) {
                                    return soFar;
                                }
                                else {
                                    var annotationVariable = _v41.a;
                                    return $miniBill$elm_fast_dict$FastDict$insert_fn(annotationVariable, specializedType, soFar);
                                }
                            }), $miniBill$elm_fast_dict$FastDict$empty, specialization), signature.ci)
                        }))
                    };
                }, $author$project$ElmSyntaxToRust$fastDictPermutations(specializedTypes));
            }
        }
    };
    var syntaxModulesInferredOrError = $author$project$ElmSyntaxToRust$listFoldlWhileOkFrom_fn_unwrapped({ ap: _List_Nil, bq: _List_Nil, au: $author$project$ElmSyntaxToRust$baseElmDeclarationTypes, bX: $miniBill$elm_fast_dict$FastDict$empty }, function (syntaxModule, soFar) {
        var syntaxValueOrFunctionDeclarations = $elm$core$List$filterMap_fn(function (_v35) {
            var declaration = _v35.b;
            switch (declaration.$) {
                case 0:
                    var syntaxValueOrFunctionDeclaration = declaration.a;
                    return $elm$core$Maybe$Just(syntaxValueOrFunctionDeclaration);
                case 1:
                    return $elm$core$Maybe$Nothing;
                case 2:
                    return $elm$core$Maybe$Nothing;
                case 3:
                    return $elm$core$Maybe$Nothing;
                case 4:
                    return $elm$core$Maybe$Nothing;
                default:
                    return $elm$core$Maybe$Nothing;
            }
        }, syntaxModule.M);
        var moduleOriginLookup = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$importsToModuleOriginLookup_fn(soFar.au, syntaxModule.dz);
        var moduleName = $author$project$ElmSyntaxToRust$moduleHeaderName($stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxModule.cy));
        var currentModuleDeclarationTypesAndErrors = $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$moduleDeclarationsToTypes_fn({ bN: moduleName, di: moduleOriginLookup }, syntaxModule.M);
        return $elm$core$Result$mapError_fn(function (error) {
            return "In module " + (moduleName + (": " + error));
        }, $elm$core$Result$andThen_fn(function (declarationsInferredUnspecialized) {
            var typeAliasesAcrossModulesSoFarWithCurrent = $miniBill$elm_fast_dict$FastDict$insert_fn(moduleName, currentModuleDeclarationTypesAndErrors.au.B, $miniBill$elm_fast_dict$FastDict$map_fn(F2(function (_v34, moduleTypes) {
                return moduleTypes.B;
            }), soFar.au));
            var specializedDeclarations = $elm$core$List$foldl_fn_unwrapped(function (inferredUnspecializedValueOrFunctionDeclaration, specializedDeclarationsSoFar) {
                var _v32 = $author$project$ElmSyntaxToRust$listMapAndFirstJust_fn(function (syntaxValueOrFunctionDeclaration) {
                    return _Utils_eq($stil4m$elm_syntax$Elm$Syntax$Node$value($stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxValueOrFunctionDeclaration.L).a), inferredUnspecializedValueOrFunctionDeclaration.a) ? $elm$core$Maybe$Just(syntaxValueOrFunctionDeclaration) : $elm$core$Maybe$Nothing;
                }, syntaxValueOrFunctionDeclarations);
                if (_v32.$ === 1) {
                    return specializedDeclarationsSoFar;
                }
                else {
                    var originalSyntaxForInferredDeclaration = _v32.a;
                    var _v33 = specialize({ bq: inferredUnspecializedValueOrFunctionDeclaration, cC: originalSyntaxForInferredDeclaration, B: typeAliasesAcrossModulesSoFarWithCurrent });
                    if (!_v33.b) {
                        return specializedDeclarationsSoFar;
                    }
                    else {
                        var split0 = _v33.a;
                        var split1Up = _v33.b;
                        return {
                            dl: $miniBill$elm_fast_dict$FastSet$insert_fn(inferredUnspecializedValueOrFunctionDeclaration.a, specializedDeclarationsSoFar.dl),
                            dp: _List_Cons(split0, _Utils_ap(split1Up, specializedDeclarationsSoFar.dp))
                        };
                    }
                }
            }, { dl: $miniBill$elm_fast_dict$FastSet$empty, dp: _List_Nil }, declarationsInferredUnspecialized);
            return $elm$core$Result$map_fn(function (specializedInferredDeclarations) {
                var currentModuleDeclarationSignatureTypesIncludingUnannotated = $elm$core$List$foldl_fn_unwrapped(function (declarationInferred, moduleTypesSoFar) {
                    return $miniBill$elm_fast_dict$FastDict$insert_fn(declarationInferred.a, declarationInferred.n, moduleTypesSoFar);
                }, $elm$core$List$foldl_fn_unwrapped(function (declarationInferred, moduleTypesSoFar) {
                    return $miniBill$elm_fast_dict$FastDict$insert_fn(declarationInferred.a, declarationInferred.n, moduleTypesSoFar);
                }, currentModuleDeclarationTypesAndErrors.au.az, declarationsInferredUnspecialized), specializedInferredDeclarations);
                var currentModuleDeclarationTypesIncludingUnannotated = { aw: currentModuleDeclarationTypesAndErrors.au.aw, az: currentModuleDeclarationSignatureTypesIncludingUnannotated, B: currentModuleDeclarationTypesAndErrors.au.B };
                return {
                    ap: _Utils_ap(currentModuleDeclarationTypesAndErrors.ap, soFar.ap),
                    bq: _List_Cons({
                        dw: currentModuleDeclarationTypesIncludingUnannotated,
                        dY: function () {
                            if (!specializedInferredDeclarations.b) {
                                return declarationsInferredUnspecialized;
                            }
                            else {
                                var specializedInferredDeclaration0 = specializedInferredDeclarations.a;
                                var specializedInferredDeclaration1Up = specializedInferredDeclarations.b;
                                return _List_Cons(specializedInferredDeclaration0, _Utils_ap(specializedInferredDeclaration1Up, $elm$core$List$filter_fn(function (declarationInferredUnspecialized) {
                                    return !$miniBill$elm_fast_dict$FastSet$member_fn(declarationInferredUnspecialized.a, specializedDeclarations.dl);
                                }, declarationsInferredUnspecialized)));
                            }
                        }(),
                        di: moduleOriginLookup,
                        dj: syntaxModule
                    }, soFar.bq),
                    au: $miniBill$elm_fast_dict$FastDict$insert_fn(moduleName, currentModuleDeclarationTypesIncludingUnannotated, soFar.au),
                    bX: $miniBill$elm_fast_dict$FastDict$insert_fn(moduleName, currentModuleDeclarationSignatureTypesIncludingUnannotated, soFar.bX)
                };
            }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarations_fn({ ed: soFar.au, bN: moduleName, di: moduleOriginLookup, es: currentModuleDeclarationTypesAndErrors.au }, specializedDeclarations.dp));
        }, $lue_bird$elm_syntax_type_infer$ElmSyntaxTypeInfer$valueAndFunctionDeclarations_fn({ ed: soFar.au, bN: moduleName, di: moduleOriginLookup, es: currentModuleDeclarationTypesAndErrors.au }, syntaxValueOrFunctionDeclarations)));
    }, syntaxModulesFromMostToLeastImported);
    if (syntaxModulesInferredOrError.$ === 1) {
        var error = syntaxModulesInferredOrError.a;
        return {
            M: { aR: $miniBill$elm_fast_dict$FastDict$empty, aS: $miniBill$elm_fast_dict$FastDict$empty, aT: $miniBill$elm_fast_dict$FastDict$empty, B: $miniBill$elm_fast_dict$FastDict$empty },
            ap: _List_fromArray([error])
        };
    }
    else {
        var modulesInferred = syntaxModulesInferredOrError.a;
        var moduleDeclaredPorts = $elm$core$List$foldl_fn_unwrapped(function (syntaxModule, acrossModulesSoFar) {
            return $miniBill$elm_fast_dict$FastDict$insert_fn($author$project$ElmSyntaxToRust$moduleHeaderName($stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxModule.cy)), $elm$core$List$foldl_fn_unwrapped(function (_v29, membersSoFar) {
                var declaration = _v29.b;
                switch (declaration.$) {
                    case 3:
                        var portDeclaration = declaration.a;
                        return $author$project$ElmSyntaxToRust$portTypeSignifiesOutgoing(portDeclaration.ci) ? {
                            bg: membersSoFar.bg,
                            bh: $miniBill$elm_fast_dict$FastSet$insert_fn($stil4m$elm_syntax$Elm$Syntax$Node$value(portDeclaration.a), membersSoFar.bh)
                        } : {
                            bg: $miniBill$elm_fast_dict$FastSet$insert_fn($stil4m$elm_syntax$Elm$Syntax$Node$value(portDeclaration.a), membersSoFar.bg),
                            bh: membersSoFar.bh
                        };
                    case 0:
                        return membersSoFar;
                    case 2:
                        return membersSoFar;
                    case 1:
                        return membersSoFar;
                    case 4:
                        return membersSoFar;
                    default:
                        return membersSoFar;
                }
            }, $author$project$ElmSyntaxToRust$portsOutgoingDictEmptyPortsIncomingDictEmpty, syntaxModule.M), acrossModulesSoFar);
        }, $miniBill$elm_fast_dict$FastDict$empty, $elm$core$List$filter_fn(function (syntaxModule) {
            var _v28 = $author$project$ElmSyntaxToRust$moduleHeaderName($stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxModule.cy));
            switch (_v28) {
                case "Elm.JsArray":
                    return false;
                case "Process":
                    return false;
                case "Task":
                    return false;
                case "File":
                    return false;
                case "Http":
                    return false;
                case "Browser":
                    return false;
                case "Browser.Events":
                    return false;
                case "Browser.Navigation":
                    return false;
                case "Browser.Dom":
                    return false;
                case "Browser.AnimationManager":
                    return false;
                case "Debugger.Expando":
                    return false;
                case "Debugger.History":
                    return false;
                case "Debugger.Main":
                    return false;
                case "Debugger.Metadata":
                    return false;
                case "Debugger.Overlay":
                    return false;
                case "Debugger.Report":
                    return false;
                case "Markdown":
                    return false;
                case "Benchmark":
                    return false;
                case "WebGL":
                    return false;
                case "WebGL.Settings":
                    return false;
                case "WebGL.Settings.Blend":
                    return false;
                case "WebGL.Settings.DepthTest":
                    return false;
                case "WebGL.Settings.StencilTest":
                    return false;
                case "WebGL.Texture":
                    return false;
                default:
                    return true;
            }
        }, syntaxDeclarationsIncludingOverwrittenOnes));
        var transpiledRustDeclarations = $elm$core$List$foldr_fn(F2(function (moduleInferred, soFarAcrossModules) {
            var moduleName = $author$project$ElmSyntaxToRust$moduleHeaderName($stil4m$elm_syntax$Elm$Syntax$Node$value(moduleInferred.dj.cy));
            var createdModuleContext = $author$project$ElmSyntaxToRust$modulesPlusImplicitlyImportedToModuleContext_fn({ ex: moduleDeclaredPorts, au: modulesInferred.au, bX: modulesInferred.bX }, _List_Cons(moduleName, $elm$core$List$map_fn(function (_v27) {
                var syntaxImport = _v27.b;
                return $elm$core$String$join_fn(".", $stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxImport.bN));
            }, moduleInferred.dj.dz)));
            return $elm$core$List$foldr_fn(F2(function (_v20, soFar) {
                var declaration = _v20.b;
                switch (declaration.$) {
                    case 0:
                        return soFar;
                    case 1:
                        var syntaxTypeAliasDeclaration = declaration.a;
                        var typeAliasName = $stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxTypeAliasDeclaration.a);
                        var _v22 = $miniBill$elm_fast_dict$FastDict$get_fn(typeAliasName, moduleInferred.dw.B);
                        if (_v22.$ === 1) {
                            return {
                                M: soFar.M,
                                ap: _List_Cons("bug in elm-syntax-to-rust: failed to find transformed type alias declaration " + (moduleName + ("." + typeAliasName)), soFar.ap)
                            };
                        }
                        else {
                            var inferredTypeAliasDeclaration = _v22.a;
                            if ($author$project$ElmSyntaxToRust$inferredTypeContainsExtensibleRecord($author$project$ElmSyntaxToRust$inferredTypeExpandInnerAliases_fn(function (moduleNameToAccess) {
                                return $elm$core$Maybe$map_fn(function ($) {
                                    return $.B;
                                }, $miniBill$elm_fast_dict$FastDict$get_fn(moduleNameToAccess, modulesInferred.au));
                            }, inferredTypeAliasDeclaration.n))) {
                                return soFar;
                            }
                            else {
                                var rustTypeAliasDeclaration = $author$project$ElmSyntaxToRust$typeAliasDeclaration_fn(function (moduleNameToAccess) {
                                    return $elm$core$Maybe$map_fn(function ($) {
                                        return $.B;
                                    }, $miniBill$elm_fast_dict$FastDict$get_fn(moduleNameToAccess, modulesInferred.au));
                                }, { a: typeAliasName, o: inferredTypeAliasDeclaration.o, n: inferredTypeAliasDeclaration.n });
                                return {
                                    M: {
                                        aR: soFar.M.aR,
                                        aS: soFar.M.aS,
                                        aT: soFar.M.aT,
                                        B: $miniBill$elm_fast_dict$FastDict$insert_fn($author$project$ElmSyntaxToRust$referenceToRustName({ b: moduleName, a: rustTypeAliasDeclaration.a }), { o: rustTypeAliasDeclaration.o, n: rustTypeAliasDeclaration.n }, soFar.M.B)
                                    },
                                    ap: soFar.ap
                                };
                            }
                        }
                    case 2:
                        var syntaxChoiceTypeDeclaration = declaration.a;
                        var choiceTypeName = $stil4m$elm_syntax$Elm$Syntax$Node$value(syntaxChoiceTypeDeclaration.a);
                        var _v23 = $miniBill$elm_fast_dict$FastDict$get_fn(choiceTypeName, moduleInferred.dw.aw);
                        if (_v23.$ === 1) {
                            return {
                                M: soFar.M,
                                ap: _List_Cons("bug in elm-syntax-to-rust: failed to find transformed choice type declaration " + (moduleName + ("." + choiceTypeName)), soFar.ap)
                            };
                        }
                        else {
                            var inferredChoiceAliasDeclaration = _v23.a;
                            var rustTypeAliasDeclaration = $author$project$ElmSyntaxToRust$choiceTypeDeclaration_fn(function (moduleNameToAccess) {
                                return $elm$core$Maybe$map_fn(function ($) {
                                    return $.B;
                                }, $miniBill$elm_fast_dict$FastDict$get_fn(moduleNameToAccess, modulesInferred.au));
                            }, { a: choiceTypeName, o: inferredChoiceAliasDeclaration.o, Y: inferredChoiceAliasDeclaration.Y });
                            return {
                                M: {
                                    aR: $miniBill$elm_fast_dict$FastDict$insert_fn($author$project$ElmSyntaxToRust$referenceToRustName({ b: moduleName, a: rustTypeAliasDeclaration.a }), {
                                        aL: $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (variantName, values, variantsSoFar) {
                                            return $miniBill$elm_fast_dict$FastDict$insert_fn($author$project$ElmSyntaxToRust$referenceToRustName({ b: moduleName, a: variantName }), values, variantsSoFar);
                                        }), $miniBill$elm_fast_dict$FastDict$empty, rustTypeAliasDeclaration.Y),
                                        o: rustTypeAliasDeclaration.o
                                    }, soFar.M.aR),
                                    aS: soFar.M.aS,
                                    aT: soFar.M.aT,
                                    B: soFar.M.B
                                },
                                ap: soFar.ap
                            };
                        }
                    case 3:
                        return soFar;
                    case 4:
                        return soFar;
                    default:
                        return soFar;
                }
            }), $elm$core$List$foldl_fn_unwrapped(function (valueOrFunctionDeclarationInferred, soFarAcrossModulesWithInferredValeAndFunctionDeclarations) {
                var _v24 = $author$project$ElmSyntaxToRust$valueOrFunctionDeclaration_fn(createdModuleContext, valueOrFunctionDeclarationInferred);
                if (!_v24.$) {
                    var rustValueOrFunctionDeclaration = _v24.a;
                    var rustName = $author$project$ElmSyntaxToRust$referenceToRustName({ b: moduleName, a: valueOrFunctionDeclarationInferred.a });
                    return {
                        M: function () {
                            var _v25 = rustValueOrFunctionDeclaration.o;
                            if (!_v25.$) {
                                var parameters = _v25.a;
                                return {
                                    aR: soFarAcrossModulesWithInferredValeAndFunctionDeclarations.M.aR,
                                    aS: $miniBill$elm_fast_dict$FastDict$insert_fn(rustName, { o: parameters, h: rustValueOrFunctionDeclaration.h, Q: rustValueOrFunctionDeclaration.Q, j: rustValueOrFunctionDeclaration.j }, soFarAcrossModulesWithInferredValeAndFunctionDeclarations.M.aS),
                                    aT: soFarAcrossModulesWithInferredValeAndFunctionDeclarations.M.aT,
                                    B: soFarAcrossModulesWithInferredValeAndFunctionDeclarations.M.B
                                };
                            }
                            else {
                                return {
                                    aR: soFarAcrossModulesWithInferredValeAndFunctionDeclarations.M.aR,
                                    aS: soFarAcrossModulesWithInferredValeAndFunctionDeclarations.M.aS,
                                    aT: $miniBill$elm_fast_dict$FastDict$insert_fn(rustName, {
                                        h: function () {
                                            var _v26 = rustValueOrFunctionDeclaration.j;
                                            if (!_v26.b) {
                                                return rustValueOrFunctionDeclaration.h;
                                            }
                                            else {
                                                var statement0 = _v26.a;
                                                var statement1Up = _v26.b;
                                                return $author$project$ElmSyntaxToRust$RustExpressionCall({
                                                    c: _List_Nil,
                                                    w: $author$project$ElmSyntaxToRust$RustExpressionLambda({
                                                        o: _List_Nil,
                                                        h: rustValueOrFunctionDeclaration.h,
                                                        j: _List_Cons(statement0, statement1Up)
                                                    })
                                                });
                                            }
                                        }(),
                                        Q: rustValueOrFunctionDeclaration.Q
                                    }, soFarAcrossModulesWithInferredValeAndFunctionDeclarations.M.aT),
                                    B: soFarAcrossModulesWithInferredValeAndFunctionDeclarations.M.B
                                };
                            }
                        }(),
                        ap: soFarAcrossModulesWithInferredValeAndFunctionDeclarations.ap
                    };
                }
                else {
                    var error = _v24.a;
                    return {
                        M: soFarAcrossModulesWithInferredValeAndFunctionDeclarations.M,
                        ap: _List_Cons("in value/function declaration " + (moduleName + ("." + (valueOrFunctionDeclarationInferred.a + (": " + error)))), soFarAcrossModulesWithInferredValeAndFunctionDeclarations.ap)
                    };
                }
            }, soFarAcrossModules, moduleInferred.dY), moduleInferred.dj.M);
        }), {
            M: { aR: $miniBill$elm_fast_dict$FastDict$empty, aS: $miniBill$elm_fast_dict$FastDict$empty, aT: $miniBill$elm_fast_dict$FastDict$empty, B: $miniBill$elm_fast_dict$FastDict$empty },
            ap: _List_Nil
        }, modulesInferred.bq);
        return {
            M: {
                aR: $miniBill$elm_fast_dict$FastDict$union_fn($miniBill$elm_fast_dict$FastSet$foldl_fn_unwrapped(function (elmRecordFields, soFar) {
                    _v3$7: while (true) {
                        if (elmRecordFields.b && elmRecordFields.b.b) {
                            if (!elmRecordFields.b.b.b) {
                                switch (elmRecordFields.a) {
                                    case "caseInsensitive":
                                        if (elmRecordFields.b.a === "multiline") {
                                            var _v6 = elmRecordFields.b;
                                            return soFar;
                                        }
                                        else {
                                            break _v3$7;
                                        }
                                    case "offset":
                                        if (elmRecordFields.b.a === "start") {
                                            var _v10 = elmRecordFields.b;
                                            return soFar;
                                        }
                                        else {
                                            break _v3$7;
                                        }
                                    case "x":
                                        if (elmRecordFields.b.a === "y") {
                                            var _v11 = elmRecordFields.b;
                                            return soFar;
                                        }
                                        else {
                                            break _v3$7;
                                        }
                                    default:
                                        break _v3$7;
                                }
                            }
                            else {
                                if (!elmRecordFields.b.b.b.b) {
                                    switch (elmRecordFields.a) {
                                        case "init":
                                            if ((elmRecordFields.b.a === "subscriptions") && (elmRecordFields.b.b.a === "update")) {
                                                var _v4 = elmRecordFields.b;
                                                var _v5 = _v4.b;
                                                return soFar;
                                            }
                                            else {
                                                break _v3$7;
                                            }
                                        case "x":
                                            if ((elmRecordFields.b.a === "y") && (elmRecordFields.b.b.a === "z")) {
                                                var _v12 = elmRecordFields.b;
                                                var _v13 = _v12.b;
                                                return soFar;
                                            }
                                            else {
                                                break _v3$7;
                                            }
                                        default:
                                            break _v3$7;
                                    }
                                }
                                else {
                                    if (!elmRecordFields.b.b.b.b.b) {
                                        switch (elmRecordFields.a) {
                                            case "index":
                                                if (((elmRecordFields.b.a === "match") && (elmRecordFields.b.b.a === "number")) && (elmRecordFields.b.b.b.a === "submatches")) {
                                                    var _v7 = elmRecordFields.b;
                                                    var _v8 = _v7.b;
                                                    var _v9 = _v8.b;
                                                    return soFar;
                                                }
                                                else {
                                                    break _v3$7;
                                                }
                                            case "w":
                                                if (((elmRecordFields.b.a === "x") && (elmRecordFields.b.b.a === "y")) && (elmRecordFields.b.b.b.a === "z")) {
                                                    var _v14 = elmRecordFields.b;
                                                    var _v15 = _v14.b;
                                                    var _v16 = _v15.b;
                                                    return soFar;
                                                }
                                                else {
                                                    break _v3$7;
                                                }
                                            default:
                                                break _v3$7;
                                        }
                                    }
                                    else {
                                        break _v3$7;
                                    }
                                }
                            }
                        }
                        else {
                            break _v3$7;
                        }
                    }
                    var elmRecordFieldsNotAlreadyInDefaultDeclarations = elmRecordFields;
                    var rustRecordFields = $elm$core$List$map_fn($author$project$ElmSyntaxToRust$variableNameDisambiguateFromRustKeywords, elmRecordFieldsNotAlreadyInDefaultDeclarations);
                    var rustTypeName = $author$project$ElmSyntaxToRust$generatedRecordTypeName(rustRecordFields);
                    return $miniBill$elm_fast_dict$FastDict$insert_fn(rustTypeName, {
                        aL: $miniBill$elm_fast_dict$FastDict$singleton_fn("Record", $elm$core$List$map_fn(function (rustRecordField) {
                            return {
                                v: $elm$core$Maybe$Just(rustRecordField),
                                l: $author$project$ElmSyntaxToRust$RustTypeVariable(rustRecordField)
                            };
                        }, rustRecordFields)),
                        aX: $elm$core$List$foldl_fn_unwrapped(function (rustRecordField, computedPropertiesSoFar) {
                            return $miniBill$elm_fast_dict$FastDict$insert_fn(rustRecordField, {
                                n: $author$project$ElmSyntaxToRust$RustTypeVariable(rustRecordField),
                                l: $author$project$ElmSyntaxToRust$RustExpressionSwitch({
                                    ar: {
                                        m: $author$project$ElmSyntaxToRust$RustPatternVariant({
                                            a: "Record",
                                            P: rustTypeName,
                                            X: $elm$core$List$map_fn(function (valueName) {
                                                return {
                                                    v: $elm$core$Maybe$Just(valueName),
                                                    l: _Utils_eq(valueName, rustRecordField) ? $author$project$ElmSyntaxToRust$RustPatternVariable("result") : $author$project$ElmSyntaxToRust$RustPatternIgnore
                                                };
                                            }, rustRecordFields)
                                        }),
                                        h: $author$project$ElmSyntaxToRust$RustExpressionReference({ b: $elm$core$Maybe$Nothing, a: "result" })
                                    },
                                    as: _List_Nil,
                                    at: $author$project$ElmSyntaxToRust$RustExpressionSelf
                                })
                            }, computedPropertiesSoFar);
                        }, $miniBill$elm_fast_dict$FastDict$empty, rustRecordFields),
                        o: rustRecordFields
                    }, soFar);
                }, $miniBill$elm_fast_dict$FastDict$empty, allElmRecords), $miniBill$elm_fast_dict$FastDict$map_fn(F2(function (_v1, enumDeclarationInfo) {
                    return {
                        aL: $miniBill$elm_fast_dict$FastDict$map_fn(F2(function (_v2, enumCase) {
                            return $elm$core$List$map_fn(function (enumCaseValue) {
                                return { v: $elm$core$Maybe$Nothing, l: enumCaseValue };
                            }, enumCase);
                        }), enumDeclarationInfo.aL),
                        aX: $miniBill$elm_fast_dict$FastDict$empty,
                        o: enumDeclarationInfo.o
                    };
                }), transpiledRustDeclarations.M.aR)),
                aS: $miniBill$elm_fast_dict$FastDict$map_fn(F2(function (_v17, valueOrFunctionInfo) {
                    return { o: valueOrFunctionInfo.o, h: valueOrFunctionInfo.h, Q: valueOrFunctionInfo.Q, j: valueOrFunctionInfo.j };
                }), transpiledRustDeclarations.M.aS),
                aT: $miniBill$elm_fast_dict$FastDict$map_fn(F2(function (_v18, valueOrFunctionInfo) {
                    return { h: valueOrFunctionInfo.h, Q: valueOrFunctionInfo.Q };
                }), transpiledRustDeclarations.M.aT),
                B: $miniBill$elm_fast_dict$FastDict$map_fn(F2(function (_v19, typeAliasInfo) {
                    return { o: typeAliasInfo.o, n: typeAliasInfo.n };
                }), transpiledRustDeclarations.M.B)
            },
            ap: _Utils_ap($elm$core$List$reverse(modulesInferred.ap), $elm$core$List$reverse(transpiledRustDeclarations.ap))
        };
    }
};
var $miniBill$elm_fast_dict$FastSet$remove_fn = function (value, _v0) {
    var set = _v0;
    return $miniBill$elm_fast_dict$FastDict$remove_fn(value, set);
}, $miniBill$elm_fast_dict$FastSet$remove = F2($miniBill$elm_fast_dict$FastSet$remove_fn);
var $lue_bird$elm_state_interface_experimental$Node$standardOutWrite = function (text) {
    return $lue_bird$elm_state_interface_experimental$Node$interfaceFromSingle($lue_bird$elm_state_interface_experimental$Node$StandardOutWrite(text));
};
var $elm$bytes$Bytes$Encode$Utf8_fn = function (a, b) {
    return { $: 9, a: a, b: b };
}, $elm$bytes$Bytes$Encode$Utf8 = F2($elm$bytes$Bytes$Encode$Utf8_fn);
var $elm$bytes$Bytes$Encode$string = function (str) {
    return $elm$bytes$Bytes$Encode$Utf8_fn(_Bytes_getStringWidth(str), str);
};
var $author$project$ElmSyntaxToRust$defaultDeclarations = "\npublic enum Unit: Sendable, Equatable { case Unit }\npublic enum Tuple<first: Sendable, second: Sendable>: Sendable {\n    case Tuple(first, second)\n    var first: first {\n        switch self {\n        case let .Tuple(result, _): result\n        }\n    }\n    var second: second {\n        switch self {\n        case let .Tuple(_, result): result\n        }\n    }\n}\npublic enum Triple<first: Sendable, second: Sendable, third: Sendable>: Sendable {\n    case Triple(first, second, third)\n    var first: first {\n        switch self {\n        case let .Triple(result, _, _): result\n        }\n    }\n    var second: second {\n        switch self {\n        case let .Triple(_, result, _): result\n        }\n    }\n    var third: third {\n        switch self {\n        case let .Triple(_, _, result): result\n        }\n    }\n}\npublic enum Basics_Order: Sendable, Equatable {\n    case Basics_LT\n    case Basics_EQ\n    case Basics_GT\n}\n\n// in theory Optional.none and Optional.some exist\n// and they even correctly adhere to\n//     Optional<Optional<Int>>.none == Optional.some(Optional<Int>.none))\n//     being false\n// However, since they are\n//   - both displayed as nil\n//   - Optional.some(x) has the same type as x (hand-wave)\n// I'm a bit worried about how shaky to use they might be though\npublic enum Maybe_Maybe<a: Sendable>: Sendable {\n    case Maybe_Nothing\n    case Maybe_Just(_ value: a)\n}\n\n// needed because\n// rust Result type requires the error to be : Error\npublic enum Result_Result<error: Sendable, success: Sendable>: Sendable {\n    case Result_Err(error)\n    case Result_Ok(success)\n}\n\n// somewhat needed because\n// rust array does not support pattern matching\npublic indirect enum List_List<a: Sendable>: Sendable, Sequence {\n    case List_Empty\n    case List_Cons(_ head: a, _ tail: List_List<a>)\n\n    public func makeIterator() -> List_Iterator<a> {\n        List_Iterator(remainingList: self)\n    }\n}\npublic struct List_Iterator<a: Sendable>: IteratorProtocol {\n    var remainingList: List_List<a>\n    public mutating func next() -> a? {\n        switch self.remainingList {\n        case .List_Empty:\n            return .none\n        case let .List_Cons(head, tail):\n            self.remainingList = tail\n            return .some(head)\n        }\n    }\n}\n\n@Sendable public static func Debug_toString<a>(_ data: a) -> String {\n    String(reflecting: data)\n}\n\n@Sendable public static func Debug_log<a>(_ tag: String, data: a) -> a {\n    print(tag, data)\n    return data\n}\n\n@Sendable public static func Debug_todo<a>(_ message: String) -> a {\n    fatalError(\"TODO \\(message)\")\n}\n\n@Sendable public static func Basics_identity<a>(_ a: a) -> a {\n    a\n}\n\n@Sendable public static func Basics_always<ignored, kept>(_ kept: kept, _: ignored) -> kept {\n    kept\n}\n@Sendable public static func Basics_apR<a, b>(_ food: a, _ eat: (a) -> b) -> b {\n    eat(food)\n}\n@Sendable public static func Basics_apL<a, b>(_ eat: (a) -> b, _ food: a) -> b {\n    eat(food)\n}\n@Sendable public static func Basics_composeR<a, b, c>(\n    _ earlier: @escaping @Sendable (a) -> b,\n    _ later: @escaping @Sendable (b) -> c\n)\n    -> @Sendable (a) -> c\n{\n    { food in later(earlier(food)) }\n}\n@Sendable public static func Basics_composeL<a, b, c>(\n    _ later: @escaping @Sendable (b) -> c,\n    _ earlier: @escaping @Sendable (a) -> b\n)\n    -> @Sendable (a) -> c\n{\n    { food in later(earlier(food)) }\n}\n\n@Sendable public static func Basics_never<a>(_: Never) -> a {\n}\n\n@Sendable public static func Basics_not(_ bool: Bool) -> Bool {\n    !bool\n}\n\n@Sendable public static func Basics_or(_ a: Bool, _ b: Bool) -> Bool {\n    a || b\n}\n\n@Sendable public static func Basics_and(_ a: Bool, _ b: Bool) -> Bool {\n    a && b\n}\n\n@Sendable public static func Basics_eq<a: Equatable>(_ a: a, _ b: a) -> Bool {\n    a == b\n}\n// necessary because elm type variables do not have information about being equatable\n@Sendable public static func Basics_eq<a>(_ a: a, _ b: a) -> Bool {\n    if let a: any Equatable = a as? any Equatable,\n        let b: any Equatable = b as? any Equatable\n    {\n        typeErasedEq(a, b)\n    } else {\n        fatalError(\"== on non-Equatable types\")\n    }\n}\n\n@Sendable public static func Basics_neq<a: Equatable>(_ a: a, _ b: a) -> Bool {\n    a != b\n}\n// necessary because elm type variables do not have information about being equatable\n@Sendable public static func Basics_neq<a>(_ a: a, _ b: a) -> Bool {\n    if let a: any Equatable = a as? any Equatable,\n        let b: any Equatable = b as? any Equatable\n    {\n        typeErasedNeq(a, b)\n    } else {\n        fatalError(\"/= on non-Equatable types\")\n    }\n}\n\n// https://rustunwrap.com/article/comparing-equatable-using-opened-existentials/\nstatic func typeErasedEq<a: Equatable, b: Equatable>(_ a: a, _ b: b) -> Bool {\n    if let b: a = b as? a {\n        a == b\n    } else {\n        fatalError(\"== on non-Equatable types\")\n    }\n}\nstatic func typeErasedNeq<a: Equatable, b: Equatable>(_ a: a, _ b: b) -> Bool {\n    if let b: a = b as? a {\n        a != b\n    } else {\n        fatalError(\"/= on non-Equatable types\")\n    }\n}\n\n@Sendable public static func Basics_lt<a: Comparable>(_ a: a, _ b: a) -> Bool {\n    a < b\n}\n\n@Sendable public static func Basics_gt<a: Comparable>(_ a: a, _ b: a) -> Bool {\n    a > b\n}\n\n@Sendable public static func Basics_le<a: Comparable>(_ a: a, _ b: a) -> Bool {\n    a <= b\n}\n\n@Sendable public static func Basics_ge<a: Comparable>(_ a: a, _ b: a) -> Bool {\n    a >= b\n}\n\n@Sendable public static func Basics_compare<a: Comparable>(_ a: a, _ b: a) -> Basics_Order {\n    if a < b {\n        .Basics_LT\n    } else if a > b {\n        .Basics_GT\n    } else {\n        .Basics_EQ\n    }\n}\n\npublic static let Basics_e: Double = exp(1.0)\n\n@Sendable public static func Basics_clamp(_ low: Double, _ high: Double, _ number: Double)\n    -> Double\n{\n    if number < low { low } else if number > high { high } else { number }\n}\n\n@Sendable public static func Basics_negate(_ float: Double) -> Double {\n    -float\n}\n\n@Sendable public static func Basics_truncate(_ float: Double) -> Double {\n    float.rounded(.towardZero)\n}\n\n@Sendable public static func Basics_round(_ float: Double) -> Double {\n    float.rounded()\n}\n\n@Sendable public static func Basics_floor(_ float: Double) -> Double {\n    float.rounded(.down)\n}\n\n@Sendable public static func Basics_ceiling(_ float: Double) -> Double {\n    float.rounded(.up)\n}\n\n@Sendable public static func Basics_isInfinite(_ float: Double) -> Bool {\n    float.isInfinite\n}\n\n@Sendable public static func Basics_isNaN(_ float: Double) -> Bool {\n    float.isNaN\n}\n\n@Sendable public static func Basics_add(_ a: Double, _ b: Double) -> Double {\n    a + b\n}\n\n@Sendable public static func Basics_sub(_ base: Double, _ toSubtract: Double) -> Double {\n    base - toSubtract\n}\n\n@Sendable public static func Basics_mul(_ a: Double, _ b: Double) -> Double {\n    a * b\n}\n\n@Sendable public static func Basics_idiv(_ toDivide: Double, _ divisor: Double) -> Double {\n    (toDivide / divisor).rounded(.towardZero)\n}\n\n@Sendable public static func Basics_fdiv(_ toDivide: Double, _ divisor: Double) -> Double {\n    toDivide / divisor\n}\n\n@Sendable public static func Basics_remainderBy(_ divisor: Double, _ toDivide: Double) -> Double\n{\n    toDivide.truncatingRemainder(dividingBy: divisor)\n}\n\n@Sendable public static func Basics_modBy(_ divisor: Double, _ toDivide: Double) -> Double {\n    toDivide.remainder(dividingBy: divisor)\n}\n\n@Sendable public static func Basics_pow(_ base: Double, _ exponent: Double) -> Double {\n    pow(base, exponent)\n}\n@Sendable public static func Basics_logBase(_ base: Double, _ float: Double) -> Double {\n    log(float) / log(base)\n}\n@Sendable public static func Basics_degrees(_ angleInDegrees: Double) -> Double {\n    (angleInDegrees * Double.pi) / 180\n}\n@Sendable public static func Basics_turns(_ angleInTurns: Double) -> Double {\n    angleInTurns * Double.pi * 2\n}\n@Sendable public static func Basics_fromPolar(_ polar: Tuple<Double, Double>)\n    -> Tuple<Double, Double>\n{\n    switch polar {\n    case let .Tuple(radius, theta):\n        .Tuple(radius * (cos(theta)), radius * (sin(theta)))\n    }\n}\n@Sendable public static func Basics_toPolar(_ coordinates: Tuple<Double, Double>)\n    -> Tuple<Double, Double>\n{\n    switch coordinates {\n    case let .Tuple(x, y):\n        .Tuple(sqrt((x * x) + (y * y)), atan2(y, x))\n    }\n}\n\n@Sendable public static func Bitwise_complement(_ int: Double) -> Double {\n    Double(~Int32(truncatingIfNeeded: Int(int)))\n}\n@Sendable public static func Bitwise_and(_ a: Double, _ b: Double) -> Double {\n    Double(Int32(truncatingIfNeeded: Int(a)) & Int32(truncatingIfNeeded: Int(b)))\n}\n@Sendable public static func Bitwise_or(_ a: Double, _ b: Double) -> Double {\n    Double(Int32(truncatingIfNeeded: Int(a)) | Int32(truncatingIfNeeded: Int(b)))\n}\n@Sendable public static func Bitwise_xor(_ a: Double, _ b: Double) -> Double {\n    Double(Int32(truncatingIfNeeded: Int(a)) ^ Int32(truncatingIfNeeded: Int(b)))\n}\n@Sendable public static func Bitwise_shiftLeftBy(_ shifts: Double, _ float: Double) -> Double {\n    Double(Int32(truncatingIfNeeded: Int(float)) << Int32(truncatingIfNeeded: Int(shifts)))\n}\n@Sendable public static func Bitwise_shiftRightBy(_ shifts: Double, _ float: Double) -> Double {\n    Double(Int32(truncatingIfNeeded: Int(float)) >> Int32(truncatingIfNeeded: Int(shifts)))\n}\n@Sendable public static func Bitwise_shiftRightZfBy(_ shifts: Double, _ float: Double) -> Double\n{\n    Double(UInt32(truncatingIfNeeded: Int(float)) >> UInt32(truncatingIfNeeded: Int(shifts)))\n}\n\n@Sendable public static func Char_toCode(_ char: UnicodeScalar) -> Double {\n    Double(char.value)\n}\n\n@Sendable public static func Char_fromCode(_ charCode: Double) -> UnicodeScalar {\n    switch UnicodeScalar(Int(charCode)) {\n    case .none: \"\\0\"\n    case let .some(unicodeScalar): unicodeScalar\n    }\n}\n\n@Sendable public static func Char_isHexDigit(_ char: UnicodeScalar) -> Bool {\n    (0x30 <= char.value && char.value <= 0x39)\n        || (0x41 <= char.value && char.value <= 0x46)\n        || (0x61 <= char.value && char.value <= 0x66)\n}\n@Sendable public static func Char_isDigit(_ char: UnicodeScalar) -> Bool {\n    char.value <= 0x39 && 0x30 <= char.value\n}\n@Sendable public static func Char_isUpper(_ char: UnicodeScalar) -> Bool {\n    char.value <= 0x5A && 0x41 <= char.value\n}\n@Sendable public static func Char_isLower(_ char: UnicodeScalar) -> Bool {\n    0x61 <= char.value && char.value <= 0x7A\n}\n@Sendable public static func Char_isAlpha(_ char: UnicodeScalar) -> Bool {\n    Char_isLower(char) || Char_isUpper(char)\n}\n@Sendable public static func Char_isAlphaNum(_ char: UnicodeScalar) -> Bool {\n    Char_isAlpha(char) || Char_isDigit(char)\n}\n\n@Sendable public static func Char_toUpper(_ char: UnicodeScalar) -> UnicodeScalar {\n    switch Character(char).uppercased().unicodeScalars.first {\n    case .none: char\n    case let .some(uppercased): uppercased\n    }\n}\n@Sendable public static func Char_toLocaleUpper(_ char: UnicodeScalar) -> UnicodeScalar {\n    // Character does not have uppercased(with: Locale)\n    switch String(char).uppercased(with: Locale.current).unicodeScalars.first {\n    case .none: char\n    case let .some(uppercased): uppercased\n    }\n}\n\n@Sendable public static func Char_toLower(_ char: UnicodeScalar) -> UnicodeScalar {\n    // Character does not have lowercased(with: Locale)\n    switch Character(char).lowercased().unicodeScalars.first {\n    case .none: char\n    case let .some(lowercased): lowercased\n    }\n}\n@Sendable public static func Char_toLocaleLower(_ char: UnicodeScalar) -> UnicodeScalar {\n    switch String(char).lowercased(with: Locale.current).unicodeScalars.first {\n    case .none: char\n    case let .some(lowercased): lowercased\n    }\n}\n\n@Sendable public static func String_fromChar(_ char: UnicodeScalar) -> String {\n    String(char)\n}\n\n@Sendable public static func String_fromInt(_ int: Double) -> String {\n    String(Int64(int))\n}\n\n@Sendable public static func String_fromFloat(_ float: Double) -> String {\n    String(float)\n}\n\n@Sendable public static func String_toInt(_ string: String) -> Maybe_Maybe<Double> {\n    switch Int64(string) {\n    case .some(let parseResult):\n        .Maybe_Just(Double(parseResult))\n    case .none:\n        .Maybe_Nothing\n    }\n}\n\n@Sendable public static func String_toFloat(_ string: String) -> Maybe_Maybe<Double> {\n    Maybe_fromOptional(Double(string))\n}\n\n@Sendable public static func String_uncons(_ string: String)\n    -> Maybe_Maybe<Tuple<UnicodeScalar, String>>\n{\n    if string.isEmpty {\n        return .Maybe_Nothing\n    } else {\n        // is there something more performant?\n        var stringMutable: String = string\n        let poppedChar: Unicode.Scalar = stringMutable.unicodeScalars.removeFirst()\n        return .Maybe_Just(.Tuple(poppedChar, stringMutable))\n    }\n}\n\n@Sendable public static func String_toList(_ string: String) -> List_List<UnicodeScalar> {\n    var chars: List_List<UnicodeScalar> = .List_Empty\n    for char in string.unicodeScalars.reversed() {\n        chars = .List_Cons(char, chars)\n    }\n    return chars\n}\n\n@Sendable public static func String_fromList(_ chars: List_List<UnicodeScalar>) -> String {\n    var stringBuffer: String = String()\n    for char in chars {\n        stringBuffer.append(Character(char))\n    }\n    return stringBuffer\n}\n\n@Sendable public static func String_length(_ string: String) -> Double {\n    Double(string.utf16.count)\n}\n\n@Sendable public static func String_isEmpty(_ string: String) -> Bool {\n    string.isEmpty\n}\n\n@Sendable public static func String_cons(_ headChar: UnicodeScalar, _ tailString: String)\n    -> String\n{\n    String(headChar) + tailString\n}\n\n@Sendable public static func String_append(_ earlier: String, _ later: String) -> String {\n    earlier + later\n}\n\n@Sendable public static func String_contains(_ sub: String, _ string: String) -> Bool {\n    string.contains(sub)\n}\n\n@Sendable public static func String_startsWith(_ start: String, _ string: String) -> Bool {\n    string.hasPrefix(start)\n}\n\n@Sendable public static func String_endsWith(_ end: String, _ string: String) -> Bool {\n    string.hasSuffix(end)\n}\n\n@Sendable public static func String_concat(_ segments: List_List<String>) -> String {\n    var stringBuffer: String = String()\n    for segment in segments {\n        stringBuffer.append(contentsOf: segment)\n    }\n    return stringBuffer\n}\n\n@Sendable public static func String_join(_ inBetween: String, _ segments: List_List<String>)\n    -> String\n{\n    segments.joined(separator: inBetween)\n}\n\n@Sendable public static func String_reverse(_ string: String) -> String {\n    String(decoding: string.utf16.reversed(), as: Unicode.UTF16.self)\n}\n\n@Sendable public static func String_dropLeft(_ countToSkip: Double, _ string: String) -> String\n{\n    String(decoding: string.utf16.dropFirst(Int(countToSkip)), as: Unicode.UTF16.self)\n}\n\n@Sendable public static func String_dropRight(_ countToSkip: Double, _ string: String) -> String\n{\n    String(decoding: string.utf16.dropLast(Int(countToSkip)), as: Unicode.UTF16.self)\n}\n\n@Sendable public static func String_left(_ countToTake: Double, _ string: String) -> String {\n    String(decoding: string.utf16.prefix(Int(countToTake)), as: Unicode.UTF16.self)\n}\n\n@Sendable public static func String_right(_ countToTake: Double, _ string: String) -> String {\n    String(decoding: string.utf16.suffix(Int(countToTake)), as: Unicode.UTF16.self)\n}\n\n@Sendable public static func String_padRight(\n    _ desiredLength: Double, _ padChar: String, _ string: String\n)\n    -> String\n{\n    string + String(repeating: padChar, count: Int(desiredLength) - string.utf16.count)\n}\n\n@Sendable public static func String_padLeft(\n    _ desiredLength: Double, _ padChar: String, _ string: String\n) -> String {\n    String(\n        repeating: padChar,\n        count: max(0, Int(desiredLength) - string.utf16.count)\n    )\n        + string\n}\n\n@Sendable public static func String_repeat(_ count: Double, _ segment: String) -> String {\n    String(repeating: segment, count: Int(count))\n}\n\n@Sendable public static func String_replace(\n    _ toReplace: String, _ replacement: String, _ string: String\n)\n    -> String\n{\n    string.replacing(toReplace, with: replacement)\n}\n\n@Sendable public static func String_toLower(_ string: String) -> String {\n    string.lowercased()\n}\n\n@Sendable public static func String_toUpper(_ string: String) -> String {\n    string.uppercased()\n}\n\n@Sendable public static func String_trimLeft(_ string: String) -> String {\n    String(\n        string.trimmingPrefix(while: { character in\n            character.isWhitespace || character.isNewline\n        })\n    )\n}\n\n@Sendable public static func String_trimRight(_ string: String) -> String {\n    let startToRestoreAfterTrimming: String.SubSequence =\n        string.prefix(while: { character in\n            character.isWhitespace || character.isNewline\n        })\n    return startToRestoreAfterTrimming\n        + string.trimmingCharacters(in: .whitespacesAndNewlines)\n}\n\n@Sendable public static func String_trim(_ string: String) -> String {\n    string.trimmingCharacters(in: .whitespacesAndNewlines)\n}\n\n@Sendable public static func String_map(\n    _ characterChange: (UnicodeScalar) -> UnicodeScalar,\n    _ string: String\n)\n    -> String\n{\n    String(String.UnicodeScalarView(string.unicodeScalars.map(characterChange)))\n}\n\n@Sendable public static func String_filter(\n    _ keepCharacter: (UnicodeScalar) -> Bool,\n    _ string: String\n)\n    -> String\n{\n    String(string.unicodeScalars.filter(keepCharacter))\n}\n\n@Sendable public static func String_lines(_ string: String) -> List_List<String> {\n    Array_toList(string.components(separatedBy: .newlines))\n}\n\n@Sendable public static func String_words(_ string: String) -> List_List<String> {\n    Array_toList(string.components(separatedBy: .whitespaces))\n}\n\n@Sendable public static func String_split(_ separator: String, _ string: String) -> List_List<\n    String\n> {\n    Array_mapToList(\n        String.init,\n        string.split(separator: separator)\n    )\n}\n\n@Sendable public static func String_all(\n    _ isExpected: (UnicodeScalar) -> Bool,\n    _ string: String\n)\n    -> Bool\n{\n    string.unicodeScalars.allSatisfy(isExpected)\n}\n\n@Sendable public static func String_any(\n    _ isOdd: (UnicodeScalar) -> Bool,\n    _ string: String\n)\n    -> Bool\n{\n    string.unicodeScalars.contains(where: isOdd)\n}\n\n@Sendable public static func String_slice(\n    _ startInclusivePossiblyNegativeAsDouble: Double,\n    _ endExclusivePossiblyNegative: Double,\n    _ string: String\n)\n    -> String\n{\n    let stringLength: Int = string.utf16.count\n    let realStartIndexInclusive: Int =\n        possiblyNegativeIndexForCount(\n            index: Int(startInclusivePossiblyNegativeAsDouble),\n            count: stringLength\n        )\n    let realEndIndexExclusive: Int =\n        possiblyNegativeIndexForCount(\n            index: Int(endExclusivePossiblyNegative),\n            count: stringLength\n        )\n    return if realStartIndexInclusive >= realEndIndexExclusive {\n        \"\"\n    } else {\n        String(\n            string.unicodeScalars[\n                string.utf16.index(\n                    string.utf16.startIndex, offsetBy: realStartIndexInclusive\n                )..<string.utf16.index(\n                    string.utf16.startIndex, offsetBy: realEndIndexExclusive\n                )\n            ]\n        )\n    }\n}\n// For an index where -1 meaning one before the last element, 1 meaning one after the first element,\n// normalize to valid index from the start\nstatic func possiblyNegativeIndexForCount(index: Int, count: Int) -> Int {\n    if index >= 0 {\n        min(index, count)\n    } else {\n        max(count + index, 0)\n    }\n}\n\n@Sendable public static func String_foldl<state>(\n    _ reduce: (UnicodeScalar) -> (state) -> state,\n    _ initialState: state,\n    _ string: String\n) -> state {\n    string.unicodeScalars.reduce(\n        initialState,\n        { (soFar, char) in\n            reduce(char)(soFar)\n        }\n    )\n}\n\n@Sendable public static func String_foldr<state>(\n    _ reduce: (UnicodeScalar) -> (state) -> state,\n    _ initialState: state,\n    _ string: String\n) -> state {\n    string.unicodeScalars.reversed().reduce(\n        initialState,\n        { (soFar, char) in\n            reduce(char)(soFar)\n        }\n    )\n}\n\n@Sendable public static func Maybe_toOptional<a>(_ optional: Maybe_Maybe<a>) -> a? {\n    switch optional {\n    case .Maybe_Nothing: .none\n    case let .Maybe_Just(value): .some(value)\n    }\n}\n@Sendable public static func Maybe_fromOptional<a>(_ optional: a?) -> Maybe_Maybe<a> {\n    switch optional {\n    case .none: .Maybe_Nothing\n    case let .some(value): .Maybe_Just(value)\n    }\n}\n@Sendable public static func Maybe_withDefault<a>(_ valueOnNothing: a, _ maybe: Maybe_Maybe<a>)\n    -> a\n{\n    switch maybe {\n    case .Maybe_Nothing: valueOnNothing\n    case .Maybe_Just(let value): value\n    }\n}\n@Sendable public static func Maybe_map<a, b>(\n    _ valueChange: (a) -> b,\n    _ maybe: Maybe_Maybe<a>\n) -> Maybe_Maybe<b> {\n    switch maybe {\n    case .Maybe_Nothing: .Maybe_Nothing\n    case .Maybe_Just(let value): .Maybe_Just(valueChange(value))\n    }\n}\n@Sendable public static func Maybe_map2<a, b, combined>(\n    _ valueCombine: (a) -> (b) -> combined,\n    _ aMaybe: Maybe_Maybe<a>,\n    _ bMaybe: Maybe_Maybe<b>\n)\n    -> Maybe_Maybe<combined>\n{\n    switch aMaybe {\n    case .Maybe_Nothing: .Maybe_Nothing\n    case .Maybe_Just(let aValue):\n        switch bMaybe {\n        case .Maybe_Nothing: .Maybe_Nothing\n        case .Maybe_Just(let bValue):\n            .Maybe_Just(valueCombine(aValue)(bValue))\n        }\n    }\n}\n@Sendable public static func Maybe_map3<a, b, c, combined>(\n    _ valueCombine: (a) -> (b) -> (c) -> combined,\n    _ aMaybe: Maybe_Maybe<a>,\n    _ bMaybe: Maybe_Maybe<b>,\n    _ cMaybe: Maybe_Maybe<c>\n)\n    -> Maybe_Maybe<combined>\n{\n    switch aMaybe {\n    case .Maybe_Nothing: .Maybe_Nothing\n    case .Maybe_Just(let aValue):\n        switch bMaybe {\n        case .Maybe_Nothing: .Maybe_Nothing\n        case .Maybe_Just(let bValue):\n            switch cMaybe {\n            case .Maybe_Nothing: .Maybe_Nothing\n            case .Maybe_Just(let cValue):\n                .Maybe_Just(valueCombine(aValue)(bValue)(cValue))\n            }\n        }\n    }\n}\n@Sendable public static func Maybe_map4<a, b, c, d, combined>(\n    _ valueCombine: (a) -> (b) -> (c) -> (d) -> combined,\n    _ aMaybe: Maybe_Maybe<a>,\n    _ bMaybe: Maybe_Maybe<b>,\n    _ cMaybe: Maybe_Maybe<c>,\n    _ dMaybe: Maybe_Maybe<d>\n)\n    -> Maybe_Maybe<combined>\n{\n    switch aMaybe {\n    case .Maybe_Nothing: .Maybe_Nothing\n    case .Maybe_Just(let aValue):\n        switch bMaybe {\n        case .Maybe_Nothing: .Maybe_Nothing\n        case .Maybe_Just(let bValue):\n            switch cMaybe {\n            case .Maybe_Nothing: .Maybe_Nothing\n            case .Maybe_Just(let cValue):\n                switch dMaybe {\n                case .Maybe_Nothing: .Maybe_Nothing\n                case .Maybe_Just(let dValue):\n                    .Maybe_Just(valueCombine(aValue)(bValue)(cValue)(dValue))\n                }\n            }\n        }\n    }\n}\n@Sendable public static func Maybe_map5<a, b, c, d, e, combined>(\n    _ valueCombine: (a) -> (b) -> (c) -> (d) -> (e) -> combined,\n    _ aMaybe: Maybe_Maybe<a>,\n    _ bMaybe: Maybe_Maybe<b>,\n    _ cMaybe: Maybe_Maybe<c>,\n    _ dMaybe: Maybe_Maybe<d>,\n    _ eMaybe: Maybe_Maybe<e>\n)\n    -> Maybe_Maybe<combined>\n{\n    switch aMaybe {\n    case .Maybe_Nothing: .Maybe_Nothing\n    case .Maybe_Just(let aValue):\n        switch bMaybe {\n        case .Maybe_Nothing: .Maybe_Nothing\n        case .Maybe_Just(let bValue):\n            switch cMaybe {\n            case .Maybe_Nothing: .Maybe_Nothing\n            case .Maybe_Just(let cValue):\n                switch dMaybe {\n                case .Maybe_Nothing: .Maybe_Nothing\n                case .Maybe_Just(let dValue):\n                    switch eMaybe {\n                    case .Maybe_Nothing: .Maybe_Nothing\n                    case .Maybe_Just(let eValue):\n                        .Maybe_Just(\n                            valueCombine(aValue)(bValue)(cValue)(dValue)(eValue)\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Sendable public static func Maybe_andThen<a, b>(\n    _ valueToMaybe: (a) -> Maybe_Maybe<b>,\n    _ maybe: Maybe_Maybe<a>\n)\n    -> Maybe_Maybe<b>\n{\n    switch maybe {\n    case .Maybe_Nothing: .Maybe_Nothing\n    case .Maybe_Just(let value): valueToMaybe(value)\n    }\n}\n\n@Sendable public static func Result_fromMaybe<a, x>(\n    _ errorOnNothing: x,\n    _ maybe: Maybe_Maybe<a>\n)\n    -> Result_Result<x, a>\n{\n    switch maybe {\n    case let .Maybe_Just(value): .Result_Ok(value)\n    case .Maybe_Nothing: .Result_Err(errorOnNothing)\n    }\n}\n\n@Sendable public static func Result_toMaybe<a, x>(_ result: Result_Result<x, a>) -> Maybe_Maybe<\n    a\n> {\n    switch result {\n    case let .Result_Ok(value): .Maybe_Just(value)\n    case .Result_Err(_): .Maybe_Nothing\n    }\n}\n\n@Sendable public static func Result_withDefault<a, x>(\n    _ valueOnError: a,\n    _ result: Result_Result<x, a>\n) -> a {\n    switch result {\n    case let .Result_Ok(value): value\n    case .Result_Err(_): valueOnError\n    }\n}\n\n@Sendable public static func Result_mapError<a, x, y>(\n    _ errorChange: (x) -> y,\n    _ result: Result_Result<x, a>\n)\n    -> Result_Result<y, a>\n{\n    switch result {\n    case let .Result_Ok(value): .Result_Ok(value)\n    case let .Result_Err(error): .Result_Err(errorChange(error))\n    }\n}\n\n@Sendable public static func Result_andThen<a, b, x>(\n    _ onOk: (a) -> Result_Result<x, b>,\n    _ result: Result_Result<x, a>\n) -> Result_Result<x, b> {\n    switch result {\n    case let .Result_Ok(value): onOk(value)\n    case let .Result_Err(error): .Result_Err(error)\n    }\n}\n\n@Sendable public static func Result_map<a, b, x>(\n    _ valueChange: (a) -> b,\n    _ result: Result_Result<x, a>\n)\n    -> Result_Result<x, b>\n{\n    switch result {\n    case let .Result_Err(error): .Result_Err(error)\n    case let .Result_Ok(value):\n        .Result_Ok(valueChange(value))\n    }\n}\n\n@Sendable public static func Result_map2<a, b, combined, x>(\n    _ combine: (a) -> (b) -> combined,\n    _ aResult: Result_Result<x, a>,\n    _ bResult: Result_Result<x, b>\n) -> Result_Result<x, combined> {\n    switch aResult {\n    case let .Result_Err(x): .Result_Err(x)\n    case let .Result_Ok(a):\n        switch bResult {\n        case let .Result_Err(x): .Result_Err(x)\n        case let .Result_Ok(b):\n            .Result_Ok(combine(a)(b))\n        }\n    }\n}\n\n@Sendable public static func Result_map3<a, b, c, combined, x>(\n    _ combine: (a) -> (b) -> (c) -> combined,\n    _ aResult: Result_Result<x, a>,\n    _ bResult: Result_Result<x, b>,\n    _ cResult: Result_Result<x, c>\n) -> Result_Result<x, combined> {\n    switch aResult {\n    case let .Result_Err(x): .Result_Err(x)\n    case let .Result_Ok(a):\n        switch bResult {\n        case let .Result_Err(x): .Result_Err(x)\n        case let .Result_Ok(b):\n            switch cResult {\n            case let .Result_Err(x): .Result_Err(x)\n            case let .Result_Ok(c):\n                .Result_Ok(combine(a)(b)(c))\n            }\n        }\n    }\n}\n\n@Sendable public static func Result_map4<a, b, c, d, combined, x>(\n    _ combine: (a) -> (b) -> (c) -> (d) -> combined,\n    _ aResult: Result_Result<x, a>,\n    _ bResult: Result_Result<x, b>,\n    _ cResult: Result_Result<x, c>,\n    _ dResult: Result_Result<x, d>\n) -> Result_Result<x, combined> {\n    switch aResult {\n    case let .Result_Err(x): .Result_Err(x)\n    case let .Result_Ok(a):\n        switch bResult {\n        case let .Result_Err(x): .Result_Err(x)\n        case let .Result_Ok(b):\n            switch cResult {\n            case let .Result_Err(x): .Result_Err(x)\n            case let .Result_Ok(c):\n                switch dResult {\n                case let .Result_Err(x): .Result_Err(x)\n                case let .Result_Ok(d):\n                    .Result_Ok(combine(a)(b)(c)(d))\n\n                }\n            }\n\n        }\n    }\n}\n\n@Sendable public static func Result_map5<a, b, c, d, e, combined, x>(\n    _ combine: (a) -> (b) -> (c) -> (d) -> (e) -> combined,\n    _ aResult: Result_Result<x, a>,\n    _ bResult: Result_Result<x, b>,\n    _ cResult: Result_Result<x, c>,\n    _ dResult: Result_Result<x, d>,\n    _ eResult: Result_Result<x, e>\n) -> Result_Result<x, combined> {\n    switch aResult {\n    case let .Result_Err(x): .Result_Err(x)\n    case let .Result_Ok(a):\n        switch bResult {\n        case let .Result_Err(x): .Result_Err(x)\n        case let .Result_Ok(b):\n            switch cResult {\n            case let .Result_Err(x): .Result_Err(x)\n            case let .Result_Ok(c):\n                switch dResult {\n                case let .Result_Err(x): .Result_Err(x)\n                case let .Result_Ok(d):\n                    switch eResult {\n                    case let .Result_Err(x): .Result_Err(x)\n                    case let .Result_Ok(e):\n                        .Result_Ok(combine(a)(b)(c)(d)(e))\n                    }\n                }\n            }\n        }\n\n    }\n}\nstatic func Result_map6<a, b, c, d, e, f, combined, x>(\n    _ combine: (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> combined,\n    _ aResult: Result_Result<x, a>,\n    _ bResult: Result_Result<x, b>,\n    _ cResult: Result_Result<x, c>,\n    _ dResult: Result_Result<x, d>,\n    _ eResult: Result_Result<x, e>,\n    _ fResult: Result_Result<x, f>\n) -> Result_Result<x, combined> {\n    switch aResult {\n    case let .Result_Err(x): .Result_Err(x)\n    case let .Result_Ok(a):\n        switch bResult {\n        case let .Result_Err(x): .Result_Err(x)\n        case let .Result_Ok(b):\n            switch cResult {\n            case let .Result_Err(x): .Result_Err(x)\n            case let .Result_Ok(c):\n                switch dResult {\n                case let .Result_Err(x): .Result_Err(x)\n                case let .Result_Ok(d):\n                    switch eResult {\n                    case let .Result_Err(x): .Result_Err(x)\n                    case let .Result_Ok(e):\n                        switch fResult {\n                        case let .Result_Err(x): .Result_Err(x)\n                        case let .Result_Ok(f):\n                            .Result_Ok(combine(a)(b)(c)(d)(e)(f))\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nstatic func Result_map7<a, b, c, d, e, f, g, combined, x>(\n    _ combine: (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> (g) -> combined,\n    _ aResult: Result_Result<x, a>,\n    _ bResult: Result_Result<x, b>,\n    _ cResult: Result_Result<x, c>,\n    _ dResult: Result_Result<x, d>,\n    _ eResult: Result_Result<x, e>,\n    _ fResult: Result_Result<x, f>,\n    _ gResult: Result_Result<x, g>\n) -> Result_Result<x, combined> {\n    switch aResult {\n    case let .Result_Err(x): .Result_Err(x)\n    case let .Result_Ok(a):\n        switch bResult {\n        case let .Result_Err(x): .Result_Err(x)\n        case let .Result_Ok(b):\n            switch cResult {\n            case let .Result_Err(x): .Result_Err(x)\n            case let .Result_Ok(c):\n                switch dResult {\n                case let .Result_Err(x): .Result_Err(x)\n                case let .Result_Ok(d):\n                    switch eResult {\n                    case let .Result_Err(x): .Result_Err(x)\n                    case let .Result_Ok(e):\n                        switch fResult {\n                        case let .Result_Err(x): .Result_Err(x)\n                        case let .Result_Ok(f):\n                            switch gResult {\n                            case let .Result_Err(x): .Result_Err(x)\n                            case let .Result_Ok(g):\n                                .Result_Ok(combine(a)(b)(c)(d)(e)(f)(g))\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nstatic func Result_map8<a, b, c, d, e, f, g, h, combined, x>(\n    _ combine: (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> (g) -> (h) -> combined,\n    _ aResult: Result_Result<x, a>,\n    _ bResult: Result_Result<x, b>,\n    _ cResult: Result_Result<x, c>,\n    _ dResult: Result_Result<x, d>,\n    _ eResult: Result_Result<x, e>,\n    _ fResult: Result_Result<x, f>,\n    _ gResult: Result_Result<x, g>,\n    _ hResult: Result_Result<x, h>\n) -> Result_Result<x, combined> {\n    switch aResult {\n    case let .Result_Err(x): .Result_Err(x)\n    case let .Result_Ok(a):\n        switch bResult {\n        case let .Result_Err(x): .Result_Err(x)\n        case let .Result_Ok(b):\n            switch cResult {\n            case let .Result_Err(x): .Result_Err(x)\n            case let .Result_Ok(c):\n                switch dResult {\n                case let .Result_Err(x): .Result_Err(x)\n                case let .Result_Ok(d):\n                    switch eResult {\n                    case let .Result_Err(x): .Result_Err(x)\n                    case let .Result_Ok(e):\n                        switch fResult {\n                        case let .Result_Err(x): .Result_Err(x)\n                        case let .Result_Ok(f):\n                            switch gResult {\n                            case let .Result_Err(x): .Result_Err(x)\n                            case let .Result_Ok(g):\n                                switch hResult {\n                                case let .Result_Err(x): .Result_Err(x)\n                                case let .Result_Ok(h):\n                                    .Result_Ok(combine(a)(b)(c)(d)(e)(f)(g)(h))\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nstatic func Array_mapToList<a, b>(_ elementChange: (a) -> b, _ array: [a])\n    -> List_List<b>\n{\n    var soFar: List_List<b> = .List_Empty\n    for element in array.reversed() {\n        soFar = .List_Cons(elementChange(element), soFar)\n    }\n    return soFar\n}\n\nstatic func arrayReversedToList<a>(_ array: [a]) -> List_List<a> {\n    var soFar: List_List<a> = .List_Empty\n    for element in array {\n        soFar = .List_Cons(element, soFar)\n    }\n    return soFar\n}\n@Sendable public static func Array_toList<a>(_ array: [a]) -> List_List<a> {\n    var soFar: List_List<a> = .List_Empty\n    for element in array.reversed() {\n        soFar = .List_Cons(element, soFar)\n    }\n    return soFar\n}\n@Sendable public static func Array_toIndexedList<a>(_ array: [a]) -> List_List<Tuple<Double, a>>\n{\n    var soFar: List_List<Tuple<Double, a>> = .List_Empty\n    var index: Int = array.count - 1\n    for element in array.reversed() {\n        soFar = .List_Cons(.Tuple(Double(index), element), soFar)\n        index = index - 1\n    }\n    return soFar\n}\n\n@Sendable public static func Array_fromList<a>(_ fullList: List_List<a>) -> [a] {\n    var soFar: [a] = []\n    for element in fullList {\n        soFar.append(element)\n    }\n    return soFar\n}\n\n@Sendable public static func Array_isEmpty<a>(_ array: [a]) -> Bool {\n    array.isEmpty\n}\n@Sendable public static func Array_length<a>(_ array: [a]) -> Double {\n    Double(array.count)\n}\n@Sendable public static func Array_get<a>(_ indexAsDouble: Double, _ array: [a])\n    -> Maybe_Maybe<a>\n{\n    let index: Int = Int(indexAsDouble)\n    return if (index >= 0) && (index < array.count) {\n        .Maybe_Just(array[index])\n    } else {\n        .Maybe_Nothing\n    }\n}\n@Sendable public static func Array_empty<a>() -> [a] {\n    []\n}\n@Sendable public static func Array_repeat<a>(\n    _ finalLengthAsDouble: Double,\n    _ elementToRepeat: a\n) -> [a] {\n    let finalLength: Int = Int(finalLengthAsDouble)\n    return if finalLength <= 0 {\n        []\n    } else {\n        Array(repeating: elementToRepeat, count: finalLength)\n    }\n}\n@Sendable public static func Array_initialize<a>(\n    _ finalLengthAsDouble: Double,\n    _ indexToElement: (Double) -> a\n) -> [a] {\n    let finalLength: Int = Int(finalLengthAsDouble)\n    if finalLength <= 0 {\n        return []\n    } else {\n        // can't do \u2193 because indexToElement would be escaping\n        // Array((0..<finalLength).lazy.map({ index in indexToElement(Double(index)) }))\n        var resultArray: [a] = Array(repeating: indexToElement(0.0), count: finalLength)\n        for index in 1..<finalLength {\n            resultArray[index] = indexToElement(Double(index))\n        }\n        return resultArray\n    }\n}\n@Sendable public static func Array_push<a>(_ newElement: a, _ array: [a]) -> [a] {\n    var arrayMutable = array\n    arrayMutable.append(newElement)\n    return arrayMutable\n}\n@Sendable public static func Array_set<a>(\n    _ indexAsDouble: Double,\n    _ newElement: a,\n    _ array: [a]\n) -> [a] {\n    let index: Int = Int(indexAsDouble)\n    if (index >= 0) && (index < array.count) {\n        var arrayMutable: [a] = array\n        arrayMutable[index] = newElement\n        return arrayMutable\n    } else {\n        return []\n    }\n}\n@Sendable public static func Array_reverse<a>(_ array: [a]) -> [a] {\n    array.reversed()\n}\n@Sendable public static func Array_filter<a>(_ keepElement: (a) -> Bool, _ array: [a]) -> [a] {\n    array.filter(keepElement)\n}\n@Sendable public static func Array_map<a, b>(_ elementChange: (a) -> b, _ array: [a]) -> [b] {\n    array.map(elementChange)\n}\n@Sendable public static func Array_indexedMap<a, b>(\n    _ indexAndElementToNew: (Double) -> (a) -> b,\n    _ array: [a]\n) -> [b] {\n    array.enumerated()\n        .map({ (index, element) in\n            indexAndElementToNew(Double(index))(element)\n        })\n}\n@Sendable public static func Array_slice<a>(\n    _ startInclusivePossiblyNegativeAsDouble: Double,\n    _ endExclusivePossiblyNegative: Double,\n    _ array: [a]\n) -> [a] {\n    let realStartIndexInclusive: Int =\n        possiblyNegativeIndexForCount(\n            index: Int(startInclusivePossiblyNegativeAsDouble),\n            count: array.count\n        )\n    let realEndIndexExclusive: Int =\n        possiblyNegativeIndexForCount(\n            index: Int(endExclusivePossiblyNegative),\n            count: array.count\n        )\n    return if realStartIndexInclusive >= realEndIndexExclusive {\n        []\n    } else {\n        Array(array[realStartIndexInclusive..<realEndIndexExclusive])\n    }\n}\n\n@Sendable public static func Array_append<a>(_ left: [a], _ right: [a]) -> [a] {\n    left + right\n}\n\n@Sendable public static func Array_foldl<a, state>(\n    _ reduce: (a) -> (state) -> state,\n    _ initialState: state,\n    _ array: [a]\n) -> state {\n    array.reduce(\n        initialState,\n        { soFar, element in\n            reduce(element)(soFar)\n        }\n    )\n}\nstatic func Array_foldr<a, state>(\n    _ reduce: (a, state) -> state,\n    _ initialState: state,\n    _ array: [a]\n) -> state {\n    var currentState: state = initialState\n    for indexFromTheEnd in array.indices {\n        currentState = reduce(array[array.count - 1 - indexFromTheEnd], currentState)\n    }\n    return currentState\n}\n@Sendable public static func Array_foldr<a, state>(\n    _ reduce: (a) -> (state) -> state,\n    _ initialState: state,\n    _ array: [a]\n) -> state {\n    var currentState: state = initialState\n    for indexFromTheEnd in array.indices {\n        currentState = reduce(array[array.count - 1 - indexFromTheEnd])(currentState)\n    }\n    return currentState\n}\n\n@Sendable public static func List_singleton<a>(_ onlyElement: a) -> List_List<a> {\n    .List_Cons(onlyElement, .List_Empty)\n}\n\n@Sendable public static func List_cons<a>(_ newHead: a, _ tail: List_List<a>) -> List_List<a> {\n    .List_Cons(newHead, tail)\n}\n\n@Sendable public static func List_isEmpty<a>(_ list: List_List<a>) -> Bool {\n    switch list {\n    case .List_Empty: true\n    case .List_Cons(_, _): false\n    }\n}\n\n@Sendable public static func List_head<a>(_ list: List_List<a>) -> Maybe_Maybe<a> {\n    switch list {\n    case .List_Empty: .Maybe_Nothing\n    case let .List_Cons(head, _): .Maybe_Just(head)\n    }\n}\n@Sendable public static func List_tail<a>(_ list: List_List<a>) -> Maybe_Maybe<List_List<a>> {\n    switch list {\n    case .List_Empty: .Maybe_Nothing\n    case let .List_Cons(_, tail): .Maybe_Just(tail)\n    }\n}\n\n@Sendable public static func List_length<a>(_ list: List_List<a>) -> Double {\n    var lengthSoFar: Int = 0\n    for _ in list {\n        lengthSoFar = lengthSoFar + 1\n    }\n    return Double(lengthSoFar)\n}\n\n@Sendable public static func List_foldl<a, state>(\n    _ reduce: (a) -> (state) -> state,\n    _ initialState: state,\n    _ list: List_List<a>\n) -> state {\n    list.reduce(initialState, { soFar, element in reduce(element)(soFar) })\n}\n\n@Sendable public static func List_foldr<a, state>(\n    _ reduce: (a) -> (state) -> state,\n    _ initialState: state,\n    _ list: List_List<a>\n) -> state {\n    // alternative: Array_foldr(reduce, initialState, Array_fromList(list))\n    list.reversed().reduce(initialState, { soFar, element in reduce(element)(soFar) })\n}\n\n@Sendable public static func List_reverse<a>(_ list: List_List<a>) -> List_List<a> {\n    list.reduce(\n        .List_Empty,\n        { soFar, element in .List_Cons(element, soFar) }\n    )\n}\n\n@Sendable public static func List_all<a>(_ isExpected: (a) -> Bool, _ list: List_List<a>)\n    -> Bool\n{\n    list.allSatisfy(isExpected)\n}\n\n@Sendable public static func List_any<a>(_ isNeedle: (a) -> Bool, _ list: List_List<a>) -> Bool\n{\n    list.contains(where: isNeedle)\n}\n\n// necessary because elm type variables do not have information about being equatable\n@Sendable public static func List_member<a: Equatable>(_ needle: (a), _ list: List_List<a>)\n    -> Bool\n{\n    list.contains(needle)\n}\n@Sendable public static func List_member<a>(_ needle: (a), _ list: List_List<a>) -> Bool {\n    list.contains(where: { element in Basics_eq(element, needle) })\n}\n\n@Sendable public static func List_drop<a>(_ countToSkip: Double, _ list: List_List<a>)\n    -> List_List<a>\n{\n    var remainingCountToSkip: Int = Int(countToSkip)\n    var remainingList: List_List<a> = list\n    while remainingCountToSkip >= 1 {\n        switch remainingList {\n        case .List_Empty:\n            return remainingList\n        case let .List_Cons(_, tail):\n            remainingList = tail\n            remainingCountToSkip = remainingCountToSkip - 1\n        }\n    }\n    return remainingList\n}\n\n@Sendable public static func List_take<a>(_ countToTake: Double, _ list: List_List<a>)\n    -> List_List<a>\n{\n    var remainingCountToTake: Int = Int(countToTake)\n    var remainingList: List_List<a> = list\n    var takenElementsArraySoFar: [a] = []\n    while remainingCountToTake >= 1 {\n        switch remainingList {\n        case .List_Empty:\n            return Array_toList(takenElementsArraySoFar)\n        case let .List_Cons(head, tail):\n            takenElementsArraySoFar.append(head)\n            remainingList = tail\n            remainingCountToTake = remainingCountToTake - 1\n        }\n    }\n    return Array_toList(takenElementsArraySoFar)\n}\n\n@Sendable public static func List_intersperse<a>(\n    _ inBetween: a,\n    _ list: List_List<a>\n) -> List_List<a> {\n    switch list {\n    case .List_Empty:\n        return .List_Empty\n    case let .List_Cons(head, tail):\n        var interspersedSoFar: [a] = [head]\n        for tailElement in tail {\n            interspersedSoFar.append(inBetween)\n            interspersedSoFar.append(tailElement)\n        }\n        return Array_toList(interspersedSoFar)\n    }\n}\n\n@Sendable public static func List_map<a, b>(_ elementChange: (a) -> b, _ list: List_List<a>)\n    -> List_List<b>\n{\n    Array_toList(list.map(elementChange))\n}\n\n@Sendable public static func List_indexedMap<a, b>(\n    _ indexedElementChange: (Double) -> (a) -> b,\n    _ list: List_List<a>\n) -> List_List<b> {\n    Array_toList(\n        list.enumerated().map({ (index, element) in\n            indexedElementChange(Double(index))(element)\n        })\n    )\n}\n\n@Sendable public static func List_map2<a, b, c>(\n    _ combineAb: (a) -> (b) -> c,\n    _ aList: List_List<a>,\n    _ bList: List_List<b>\n) -> List_List<c> {\n    var remainingAList: List_List<a> = aList\n    var remainingBList: List_List<b> = bList\n    var combinedArraySoFar: [c] = []\n    while case let (\n        a: .List_Cons(aHead, aTail),\n        b: .List_Cons(bHead, bTail)\n    ) = (remainingAList, remainingBList) {\n        remainingAList = aTail\n        remainingBList = bTail\n        combinedArraySoFar.append(combineAb(aHead)(bHead))\n    }\n    return Array_toList(combinedArraySoFar)\n}\n@Sendable public static func List_map3<a, b, c, combined>(\n    _ combine: (a) -> (b) -> (c) -> combined,\n    _ aList: List_List<a>,\n    _ bList: List_List<b>,\n    _ cList: List_List<c>\n) -> List_List<combined> {\n    var remainingAList: List_List<a> = aList\n    var remainingBList: List_List<b> = bList\n    var remainingCList: List_List<c> = cList\n    var combinedArraySoFar: [combined] = []\n    while case let (\n        .List_Cons(aHead, aTail),\n        .List_Cons(bHead, bTail),\n        .List_Cons(cHead, cTail)\n    ) = (remainingAList, remainingBList, remainingCList) {\n        remainingAList = aTail\n        remainingBList = bTail\n        remainingCList = cTail\n        combinedArraySoFar.append(combine(aHead)(bHead)(cHead))\n    }\n    return Array_toList(combinedArraySoFar)\n}\n@Sendable public static func List_map4<a, b, c, d, combined>(\n    _ combine: (a) -> (b) -> (c) -> (d) -> combined,\n    _ aList: List_List<a>,\n    _ bList: List_List<b>,\n    _ cList: List_List<c>,\n    _ dList: List_List<d>\n) -> List_List<combined> {\n    var remainingAList: List_List<a> = aList\n    var remainingBList: List_List<b> = bList\n    var remainingCList: List_List<c> = cList\n    var remainingDList: List_List<d> = dList\n    var combinedArraySoFar: [combined] = []\n    while case let (\n        .List_Cons(aHead, aTail),\n        .List_Cons(bHead, bTail),\n        .List_Cons(cHead, cTail),\n        .List_Cons(dHead, dTail)\n    ) = (remainingAList, remainingBList, remainingCList, remainingDList) {\n        remainingAList = aTail\n        remainingBList = bTail\n        remainingCList = cTail\n        remainingDList = dTail\n        combinedArraySoFar.append(combine(aHead)(bHead)(cHead)(dHead))\n    }\n    return Array_toList(combinedArraySoFar)\n}\n@Sendable public static func List_map5<a, b, c, d, e, combined>(\n    _ combine: (a) -> (b) -> (c) -> (d) -> (e) -> combined,\n    _ aList: List_List<a>,\n    _ bList: List_List<b>,\n    _ cList: List_List<c>,\n    _ dList: List_List<d>,\n    _ eList: List_List<e>\n) -> List_List<combined> {\n    var remainingAList: List_List<a> = aList\n    var remainingBList: List_List<b> = bList\n    var remainingCList: List_List<c> = cList\n    var remainingDList: List_List<d> = dList\n    var remainingEList: List_List<e> = eList\n    var combinedArraySoFar: [combined] = []\n    while case let (\n        .List_Cons(aHead, aTail),\n        .List_Cons(bHead, bTail),\n        .List_Cons(cHead, cTail),\n        .List_Cons(dHead, dTail),\n        .List_Cons(eHead, eTail)\n    ) = (\n        remainingAList, remainingBList, remainingCList, remainingDList,\n        remainingEList\n    ) {\n        remainingAList = aTail\n        remainingBList = bTail\n        remainingCList = cTail\n        remainingDList = dTail\n        remainingEList = eTail\n        combinedArraySoFar.append(\n            combine(aHead)(bHead)(cHead)(dHead)(eHead))\n    }\n    return Array_toList(combinedArraySoFar)\n}\n\n@Sendable public static func List_zip<a, b>(_ aList: List_List<a>, _ bList: List_List<b>)\n    -> List_List<Tuple<a, b>>\n{\n    List_map2({ a in { b in .Tuple(a, b) } }, aList, bList)\n}\n\n@Sendable public static func List_unzip<a, b>(_ abList: List_List<Tuple<a, b>>)\n    -> Tuple<List_List<a>, List_List<b>>\n{\n    var firstsSoFar: List_List<a> = .List_Empty\n    var secondsSoFar: List_List<b> = .List_Empty\n    for tuple in Array_fromList(abList).reversed() {\n        firstsSoFar = .List_Cons(tuple.first, firstsSoFar)\n        secondsSoFar = .List_Cons(tuple.second, secondsSoFar)\n    }\n    return .Tuple(firstsSoFar, secondsSoFar)\n}\n\n@Sendable public static func List_filter<a>(\n    _ keepElement: (a) -> Bool,\n    _ list: List_List<a>\n)\n    -> List_List<a>\n{\n    // alternative: Array_toList(list.filter(keepElement))\n    var filteredSoFar: [a] = []\n    var allElementsKeptSoFar: Bool = true\n    for element in list {\n        if keepElement(element) {\n            filteredSoFar.append(element)\n        } else {\n            allElementsKeptSoFar = false\n        }\n    }\n    return if allElementsKeptSoFar {\n        list\n    } else {\n        Array_toList(filteredSoFar)\n    }\n}\n\n@Sendable public static func List_filterMap<a, b>(\n    _ elementToMaybe: (a) -> Maybe_Maybe<b>,\n    _ list: List_List<a>\n) -> List_List<b> {\n    Array_toList(list.compactMap({ element in Maybe_toOptional(elementToMaybe(element)) }))\n}\n\n@Sendable public static func List_append<a>(\n    _ earlier: List_List<a>,\n    _ later: List_List<a>\n) -> List_List<a> {\n    // can be optimized\n    earlier.reversed().reduce(\n        later,\n        { (soFar, earlierElement) in\n            .List_Cons(earlierElement, soFar)\n        }\n    )\n}\n\n@Sendable public static func List_concatMap<a, b>(\n    _ elementToList: (a) -> List_List<b>,\n    _ list: List_List<a>\n) -> List_List<b> {\n    Array_toList(list.flatMap(elementToList))\n}\n\n@Sendable public static func List_concat<a>(_ list: List_List<List_List<a>>) -> List_List<a> {\n    Array_toList(list.flatMap({ element in element }))\n}\n\n@Sendable public static func List_repeat<a>(_ count: Double, _ element: a) -> List_List<a> {\n    if count <= 0 {\n        return .List_Empty\n    } else {\n        var soFar: List_List<a> = .List_Empty\n        for _ in 1...Int(count) {\n            soFar = .List_Cons(element, soFar)\n        }\n        return soFar\n    }\n}\n\n@Sendable public static func List_range(_ start: Double, _ end: Double) -> List_List<Double> {\n    if start > end {\n        return .List_Empty\n    } else {\n        var soFar: List_List<Double> = .List_Empty\n        for i in stride(from: Int(end), through: Int(start), by: -1) {\n            soFar = .List_Cons(Double(i), soFar)\n        }\n        return soFar\n    }\n}\n@Sendable public static func List_sum(_ list: List_List<Double>) -> Double {\n    // alternative: list.reduce(0, +)\n    var sumSoFar: Double = 0.0\n    for element in list {\n        sumSoFar = sumSoFar + element\n    }\n    return sumSoFar\n}\n@Sendable public static func List_product(_ list: List_List<Double>) -> Double {\n    // alternative: list.reduce(1, *)\n    var productSoFar: Double = 1.0\n    for element in list {\n        productSoFar = productSoFar * element\n    }\n    return productSoFar\n}\n\n@Sendable public static func List_maximum<a: Comparable>(_ list: List_List<a>) -> Maybe_Maybe<a>\n{\n    switch list {\n    case .List_Empty:\n        .Maybe_Nothing\n    case let .List_Cons(head, tail):\n        .Maybe_Just(tail.reduce(head, max))\n    }\n}\n\n@Sendable public static func List_minimum<a: Comparable>(_ list: List_List<a>) -> Maybe_Maybe<a>\n{\n    switch list {\n    case .List_Empty:\n        .Maybe_Nothing\n    case let .List_Cons(head, tail):\n        .Maybe_Just(tail.reduce(head, min))\n    }\n}\n\n@Sendable public static func List_sortWith<a>(\n    _ elementCompare: (a) -> (a) -> Basics_Order,\n    _ list: List_List<a>\n) -> List_List<a> {\n    Array_toList(list.sorted(by: { (a, b) in elementCompare(a)(b) == .Basics_LT }))\n}\n\n@Sendable public static func List_sortBy<element, comparable: Comparable>(\n    _ elementToComparable: (element) -> comparable,\n    _ list: List_List<element>\n) -> List_List<element> {\n    Array_toList(\n        list.sorted(\n            by: { (a, b) in elementToComparable(a) < elementToComparable(b) }\n        )\n    )\n}\n\n@Sendable public static func List_sort<comparable: Comparable>(_ list: List_List<comparable>)\n    -> List_List<comparable>\n{\n    Array_toList(list.sorted())\n}\n\n@Sendable public static func Set_size<a>(_ set: Set<a>) -> Double {\n    Double(set.count)\n}\n@Sendable public static func Set_empty<a>() -> Set<a> {\n    Set()\n}\n@Sendable public static func Set_singleton<a>(_ onlyElement: a) -> Set<a> {\n    [onlyElement]\n}\n@Sendable public static func Set_fromList<a>(_ list: List_List<a>) -> Set<a> {\n    var set: Set<a> = Set()\n    for element in list {\n        set.insert(element)\n    }\n    return set\n}\n@Sendable public static func Set_toList<a: Comparable>(_ set: Set<a>) -> List_List<a> {\n    return Array_toList(set.sorted())\n}\n@Sendable public static func Set_isEmpty<a>(_ set: Set<a>) -> Bool {\n    set.isEmpty\n}\n@Sendable public static func Set_member<a>(_ needle: a, _ set: Set<a>) -> Bool {\n    set.contains(needle)\n}\n@Sendable public static func Set_insert<a>(_ newElement: a, _ set: Set<a>) -> Set<a> {\n    var setMutable: Set<a> = set\n    setMutable.insert(newElement)\n    return setMutable\n}\n@Sendable public static func Set_remove<a>(_ badApple: a, _ set: Set<a>) -> Set<a> {\n    var setMutable: Set<a> = set\n    setMutable.remove(badApple)\n    return setMutable\n}\n@Sendable public static func Set_diff<a>(_ baseSet: Set<a>, _ badApples: Set<a>) -> Set<a> {\n    var setMutable: Set<a> = baseSet\n    setMutable.subtract(badApples)\n    return setMutable\n}\n@Sendable public static func Set_intersect<a>(_ aSet: Set<a>, _ bSet: Set<a>) -> Set<a> {\n    aSet.intersection(bSet)\n}\n@Sendable public static func Set_union<a>(_ aSet: Set<a>, _ bSet: Set<a>) -> Set<a> {\n    aSet.union(bSet)\n}\n@Sendable public static func Set_map<a, b>(\n    _ elementChange: (a) -> b,\n    _ set: Set<a>\n) -> Set<b> {\n    Set(set.map(elementChange))\n}\n@Sendable public static func Set_filter<a>(_ keepElement: (a) -> Bool, set: Set<a>) -> Set<a> {\n    set.filter(keepElement)\n}\n@Sendable public static func Set_partition<a>(_ isLeft: (a) -> Bool, _ set: Set<a>)\n    -> Tuple<Set<a>, Set<a>>\n{\n    var left: Set<a> = Set()\n    left.reserveCapacity(set.count)\n    var right: Set<a> = Set()\n    right.reserveCapacity(set.count)\n    for element in set {\n        if isLeft(element) {\n            left.insert(element)\n        } else {\n            right.insert(element)\n        }\n    }\n    return .Tuple(left, right)\n}\n@Sendable public static func Set_foldl<a: Comparable, state>(\n    _ reduce: (a) -> (state) -> state,\n    _ initialState: state,\n    _ set: Set<a>\n) -> (state) {\n    set.sorted().reduce(\n        initialState,\n        { soFar, element in reduce(element)(soFar) }\n    )\n}\n@Sendable public static func Set_foldr<a: Comparable, state>(\n    _ reduce: (a) -> (state) -> state,\n    _ initialState: state,\n    _ set: Set<a>\n) -> (state) {\n    set\n        // notice that we sort by > instead of < !\n        .sorted(by: { a, b in a > b })\n        .reduce(\n            initialState,\n            { soFar, element in reduce(element)(soFar) }\n        )\n}\n\n@Sendable public static func Dict_size<key, value>(_ dictionary: [key: value]) -> Double {\n    Double(dictionary.count)\n}\n@Sendable public static func Dict_empty<key, value>() -> [key: value] {\n    Dictionary()\n}\n@Sendable public static func Dict_singleton<key, value>(_ key: key, _ value: value)\n    -> [key: value]\n{\n    [key: value]\n}\n@Sendable public static func Dict_fromList<key, value>(_ list: List_List<Tuple<key, value>>)\n    -> [key: value]\n{\n    var dictionary: [key: value] = Dictionary()\n    for case let entry in list {\n        dictionary[entry.first] = entry.second\n    }\n    return dictionary\n}\n@Sendable public static func Dict_toList<key: Comparable, value>(_ dictionary: [key: value])\n    -> List_List<Tuple<key, value>>\n{\n    Array_mapToList(\n        { entry in .Tuple(entry.key, entry.value) },\n        dictionary.sorted(by: { a, b in a.key < b.key })\n    )\n}\n@Sendable public static func Dict_keys<key: Comparable, value>(_ dictionary: [key: value])\n    -> List_List<key>\n{\n    return Array_toList(dictionary.keys.sorted())\n}\n@Sendable public static func Dict_values<key: Comparable, value>(_ dictionary: [key: value])\n    -> List_List<value>\n{\n    Array_mapToList(\n        { entry in entry.value },\n        dictionary\n            .sorted(by: { a, b in a.key < b.key })\n    )\n}\n@Sendable public static func Dict_isEmpty<key, value>(_ dictionary: [key: value]) -> Bool {\n    dictionary.isEmpty\n}\n@Sendable public static func Dict_member<key, value>(_ needle: key, _ dictionary: [key: value])\n    -> Bool\n{\n    switch dictionary[needle] {\n    case .none: false\n    case .some(_): true\n    }\n}\n@Sendable public static func Dict_get<key, value>(_ key: key, _ dictionary: [key: value])\n    -> Maybe_Maybe<value>\n{\n    Maybe_fromOptional(dictionary[key])\n}\n@Sendable public static func Dict_insert<key, value>(\n    _ key: key,\n    _ value: value,\n    _ dictionary: [key: value]\n) -> [key: value] {\n    var dictionaryMutable: [key: value] = dictionary\n    dictionaryMutable[key] = value\n    return dictionaryMutable\n}\n@Sendable public static func Dict_update<key, value>(\n    _ key: key,\n    _ maybeValueToMaybeValue: (Maybe_Maybe<value>) -> Maybe_Maybe<value>,\n    _ dictionary: [key: value]\n) -> [key: value] {\n    var dictionaryMutable: [key: value] = dictionary\n    dictionaryMutable[key] = Maybe_toOptional(\n        maybeValueToMaybeValue(\n            Maybe_fromOptional(dictionaryMutable[key])\n        )\n    )\n    return dictionaryMutable\n}\n@Sendable public static func Dict_remove<key, value>(\n    _ badApple: key,\n    _ dictionary: [key: value]\n) -> [key: value] {\n    var dictionaryMutable: [key: value] = dictionary\n    dictionaryMutable.removeValue(forKey: badApple)\n    return dictionaryMutable\n}\n@Sendable public static func Dict_diff<key, a, b>(\n    _ baseDictionary: [key: a],\n    _ badApples: [key: b]\n) -> [key: a] {\n    baseDictionary.filter({ key, _ in\n        switch badApples[key] {\n        case .none: true\n        case .some(_): false\n        }\n    })\n}\n@Sendable public static func Dict_intersect<key, value>(\n    _ aDictionary: [key: value],\n    _ bDictionary: [key: value]\n) -> [key: value] {\n    aDictionary.filter({ aKey, aValue in\n        switch bDictionary[aKey] {\n        case .none: false\n        case .some(_): true\n        }\n    })\n}\n@Sendable public static func Dict_union<key, value>(\n    _ aDictionary: [key: value],\n    _ bDictionary: [key: value]\n) -> [key: value] {\n    var aDictionaryMutable: [key: value] = aDictionary\n    aDictionaryMutable.merge(bDictionary, uniquingKeysWith: { aValue, _ in aValue })\n    return aDictionaryMutable\n}\n@Sendable public static func Dict_merge<key: Comparable, a, b, state>(\n    _ onlyA: (key) -> (a) -> (state) -> state,\n    _ bothAB: (key) -> (a) -> (b) -> (state) -> state,\n    _ onlyB: (key) -> (b) -> (state) -> state,\n    _ aDictionary: [key: a],\n    _ bDictionary: [key: b],\n    _ initialState: state\n)\n    -> state\n{\n    var combinedKeyArray: [key] = []\n    combinedKeyArray.reserveCapacity(aDictionary.count + bDictionary.count)\n    for aKey in aDictionary.keys {\n        combinedKeyArray.append(aKey)\n    }\n    for bKey in bDictionary.keys {\n        combinedKeyArray.append(bKey)\n    }\n    combinedKeyArray.sort()\n    var currentState: state = initialState\n    var previousKey: key? = .none\n    for key in combinedKeyArray {\n        if key == previousKey {\n            // skip key that was added from both dictionaries\n            // next key is guaranteed to be different so let's make the comparison easy\n            previousKey = .none\n        } else {\n            previousKey = key\n            switch (aDictionary[key], bDictionary[key]) {\n            case let (.some(a), .some(b)):\n                currentState = bothAB(key)(a)(b)(currentState)\n            case let (.some(a), .none):\n                currentState = onlyA(key)(a)(currentState)\n            case let (.none, .some(b)):\n                currentState = onlyB(key)(b)(currentState)\n            case (.none, .none): break\n            }\n        }\n    }\n    return currentState\n}\n@Sendable public static func Dict_map<key, a, b>(\n    _ entryToNewValue: (key) -> (a) -> b,\n    _ dictionary: [key: a]\n) -> [key: b] {\n    Dictionary(\n        uniqueKeysWithValues:\n            dictionary.map({ key, value in\n                (key, entryToNewValue(key)(value))\n            })\n    )\n}\n@Sendable public static func Dict_filter<key, value>(\n    _ keepElement: (key) -> (value) -> Bool,\n    _ dictionary: [key: value]\n) -> [key: value] {\n    dictionary.filter(\n        { key, value in keepElement(key)(value) }\n    )\n}\n@Sendable public static func Dict_partition<key, value>(\n    _ isLeft: (key) -> (value) -> Bool,\n    _ dictionary: [key: value]\n)\n    -> Tuple<[key: value], [key: value]>\n{\n    var left: [key: value] = Dictionary()\n    left.reserveCapacity(dictionary.capacity)\n    var right: [key: value] = Dictionary()\n    right.reserveCapacity(dictionary.capacity)\n    for (key, value) in dictionary {\n        if isLeft(key)(value) {\n            left[key] = value\n        } else {\n            right[key] = value\n        }\n    }\n    return .Tuple(left, right)\n}\n@Sendable public static func Dict_foldl<key: Comparable, value, state>(\n    _ reduce: (key) -> (value) -> (state) -> state,\n    _ initialState: state,\n    _ dictionary: [key: value]\n) -> state {\n    dictionary\n        .sorted(by: { a, b in a.key < b.key })\n        .reduce(\n            initialState,\n            { soFar, entry in reduce(entry.key)(entry.value)(soFar) }\n        )\n}\n@Sendable public static func Dict_foldr<key: Comparable, value, state>(\n    _ reduce: (key) -> (value) -> (state) -> state,\n    _ initialState: state,\n    _ dictionary: [key: value]\n) -> state {\n    dictionary\n        // notice that we sort by > instead of < !\n        .sorted(by: { a, b in a.key > b.key })\n        .reduce(\n            initialState,\n            { soFar, entry in reduce(entry.key)(entry.value)(soFar) }\n        )\n}\n\n// not alias for Regex<Substring> because Regex is not Sendable\n// when constructing, always validate with .regex\npublic enum Regex_Regex: Sendable, Equatable {\n    case Regex_Regex(patternString: String, ignoresCase: Bool, anchorsMatchLineEndings: Bool)\n\n    public var regex: Regex<AnyRegexOutput>? {\n        switch self {\n        case let .Regex_Regex(\n            patternString: patternString,\n            ignoresCase: ignoresCase,\n            anchorsMatchLineEndings: anchorsMatchLineEndings\n        ):\n            do {\n                let patternRegex: Regex<AnyRegexOutput> = try Regex(patternString)\n                return .some(\n                    patternRegex\n                        .ignoresCase(ignoresCase)\n                        .anchorsMatchLineEndings(anchorsMatchLineEndings)\n                )\n            } catch {\n                return .none\n            }\n        }\n    }\n}\n\npublic enum Generated_caseInsensitive_multiline<caseInsensitive: Sendable, multiline: Sendable>:\n    Sendable\n{\n    case Record(caseInsensitive: caseInsensitive, multiline: multiline)\n    var caseInsensitive: caseInsensitive {\n        switch self {\n        case let .Record(result, _): result\n        }\n    }\n    var multiline: multiline {\n        switch self {\n        case let .Record(_, result): result\n        }\n    }\n}\npublic typealias Regex_Options =\n    Generated_caseInsensitive_multiline<Bool, Bool>\n\npublic enum Generated_index_match_number_submatches<\n    index: Sendable, match: Sendable, number: Sendable, submatches: Sendable\n>: Sendable {\n    case Record(index: index, match: match, number: number, submatches: submatches)\n    var index: index {\n        switch self {\n        case let .Record(result, _, _, _): result\n        }\n    }\n    var match: match {\n        switch self {\n        case let .Record(_, result, _, _): result\n        }\n    }\n    var number: number {\n        switch self {\n        case let .Record(_, _, result, _): result\n        }\n    }\n    var submatches: submatches {\n        switch self {\n        case let .Record(_, _, _, result): result\n        }\n    }\n}\npublic typealias Regex_Match =\n    Generated_index_match_number_submatches<\n        Double,\n        String,\n        Double,\n        List_List<(Maybe_Maybe<String>)>\n    >\n\npublic static let Regex_never: Regex_Regex = .Regex_Regex(\n    patternString: \"/.^/\",\n    ignoresCase: false,\n    anchorsMatchLineEndings: false\n)\n@Sendable public static func Regex_fromString(_ string: String) -> Maybe_Maybe<Regex_Regex> {\n    Regex_fromStringWith(.Record(caseInsensitive: false, multiline: false), string)\n}\n@Sendable public static func Regex_fromStringWith(_ options: Regex_Options, _ string: String)\n    -> Maybe_Maybe<Regex_Regex>\n{\n    let regexInfo: Regex_Regex = .Regex_Regex(\n        patternString: string,\n        ignoresCase: options.caseInsensitive,\n        anchorsMatchLineEndings: options.multiline\n    )\n    return switch regexInfo.regex {\n    case .some(_): .Maybe_Just(regexInfo)\n    case .none: .Maybe_Nothing\n    }\n}\n@Sendable public static func Regex_contains(_ regex: Regex_Regex, _ string: String) -> Bool {\n    switch regex.regex {\n    case let .some(rustRegex):\n        string.contains(rustRegex)\n    case .none:\n        false\n    }\n}\n\nstatic func toRegexMatch(\n    _ match: Regex<AnyRegexOutput>.Match,\n    matchIndex1Based: Int,\n    in string: String\n)\n    -> Regex_Match\n{\n    .Record(\n        index: Double(match.range.lowerBound.utf16Offset(in: string)),\n        match: String(match.0),\n        number: Double(matchIndex1Based),\n        submatches: Array_mapToList(\n            { submatch in\n                switch submatch.substring {\n                case .none: .Maybe_Nothing\n                case let .some(submatchSubstring):\n                    .Maybe_Just(String(submatchSubstring))\n                }\n            },\n            Array(match.output)\n        )\n    )\n}\n@Sendable public static func Regex_replace(\n    _ regexInfo: Regex_Regex,\n    _ matchToReplacementString: (Regex_Match) -> String,\n    _ string: String\n) -> String {\n    switch regexInfo.regex {\n    case .none: return string\n    case let .some(regex):\n        // we rely on the fact that String.replacing\n        // looks for matches from the start to the end in order\n        var matchIndex1Based: Int = 1\n        return string.replacing(\n            regex,\n            with: { (match: Regex<AnyRegexOutput>.Match) -> String in\n                let matchToReplace: Regex_Match =\n                    toRegexMatch(\n                        match,\n                        matchIndex1Based: matchIndex1Based,\n                        in: string\n                    )\n                matchIndex1Based = matchIndex1Based + 1\n                return matchToReplacementString(matchToReplace)\n            }\n        )\n    }\n}\n@Sendable public static func Regex_replaceAtMost(\n    _ maxOccurrences: Double,\n    _ regexInfo: Regex_Regex,\n    _ matchToReplacementString: (Regex_Match) -> String,\n    _ string: String\n) -> String {\n    switch regexInfo.regex {\n    case .none: return string\n    case let .some(regex):\n        // we rely on the fact that String.replacing\n        // looks for matches from the start to the end in order\n        var matchIndex1Based = 1\n        return string.replacing(\n            regex,\n            maxReplacements: Int(maxOccurrences),\n            with: { (match: Regex<AnyRegexOutput>.Match) -> String in\n                let matchToReplace: Regex_Match =\n                    toRegexMatch(\n                        match,\n                        matchIndex1Based: matchIndex1Based,\n                        in: string\n                    )\n                matchIndex1Based = matchIndex1Based + 1\n                return matchToReplacementString(matchToReplace)\n            }\n        )\n    }\n}\n@Sendable public static func Regex_find(_ regexInfo: Regex_Regex, _ string: String)\n    -> List_List<Regex_Match>\n{\n    switch regexInfo.regex {\n    case .none: .List_Empty\n    case let .some(regex):\n        Array_toList(\n            string.matches(of: regex).enumerated()\n                .map({ (matchIndex0Based, match: Regex.Match) in\n                    toRegexMatch(\n                        match,\n                        matchIndex1Based: 1 + matchIndex0Based,\n                        in: string\n                    )\n                })\n        )\n    }\n}\n@Sendable public static func Regex_findAtMost(\n    _ maxOccurrences: Double,\n    _ regexInfo: Regex_Regex,\n    _ string: String\n)\n    -> List_List<Regex_Match>\n{\n    switch regexInfo.regex {\n    case .none: .List_Empty\n    case let .some(regex):\n        Array_toList(\n            // can be optimized by only matching up until that point\n            string.matches(of: regex)\n                .prefix(Int(maxOccurrences)).enumerated()\n                .map({ (matchIndex0Based: Int, match: Regex.Match) in\n                    toRegexMatch(\n                        match,\n                        matchIndex1Based: 1 + matchIndex0Based,\n                        in: string\n                    )\n                })\n        )\n    }\n}\n@Sendable public static func Regex_split(_ regexInfo: Regex_Regex, _ string: String)\n    -> List_List<String>\n{\n    switch regexInfo.regex {\n    case .none: List_singleton(string)\n    case let .some(regex):\n        Array_mapToList(\n            String.init,\n            string.split(separator: regex)\n        )\n    }\n}\n\n@Sendable public static func Regex_splitAtMost(\n    _ maxSplitCount: Double,\n    _ regexInfo: Regex_Regex,\n    _ string: String\n) -> List_List<String> {\n    switch regexInfo.regex {\n    case .none: List_singleton(string)\n    case let .some(regex):\n        Array_mapToList(\n            String.init,\n            string.split(\n                separator: regex,\n                maxSplits: Int(maxSplitCount)\n            )\n        )\n    }\n}\n\npublic enum Time_Posix: Sendable, Equatable, Hashable {\n    case Time_Posix(Int64)\n}\n\npublic enum Generated_offset_start<offset: Sendable, start: Sendable>: Sendable {\n    case Record(offset: offset, start: start)\n    var offset: offset {\n        switch self {\n        case let .Record(result, _): result\n        }\n    }\n    var start: start {\n        switch self {\n        case let .Record(_, result): result\n        }\n    }\n}\npublic typealias Time_Era =\n    Generated_offset_start<Int64, Int64>\n\npublic enum Time_Zone: Sendable, Equatable {\n    case Time_Zone(Int64, [Time_Era])\n}\n\npublic enum Time_Weekday: Sendable, Equatable {\n    case Time_Mon\n    case Time_Tue\n    case Time_Wed\n    case Time_Thu\n    case Time_Fri\n    case Time_Sat\n    case Time_Sun\n}\n\npublic enum Time_Month: Sendable, Equatable {\n    case Time_Jan\n    case Time_Feb\n    case Time_Mar\n    case Time_Apr\n    case Time_May\n    case Time_Jun\n    case Time_Jul\n    case Time_Aug\n    case Time_Sep\n    case Time_Oct\n    case Time_Nov\n    case Time_Dec\n}\n\npublic enum Time_ZoneName: Sendable, Equatable {\n    case Time_Name(String)\n    case Time_Offset(Double)\n}\nstatic func Time_posixToMillisInt(_ timePosix: Time_Posix) -> Int64 {\n    switch timePosix {\n    case let .Time_Posix(millis): millis\n    }\n}\n@Sendable public static func Time_posixToMillis(_ timePosix: Time_Posix) -> Double {\n    Double(Time_posixToMillisInt(timePosix))\n}\n@Sendable public static func Time_millisToPosix(_ millis: Double) -> Time_Posix {\n    .Time_Posix(Int64(millis))\n}\n\npublic static let Time_utc: Time_Zone = .Time_Zone(0, [])\n\n@Sendable public static func Time_customZone(\n    _ n: Double,\n    _ eras: List_List<Generated_offset_start<Double, Double>>\n)\n    -> Time_Zone\n{\n    .Time_Zone(\n        Int64(n),\n        eras.map({ era in\n            .Record(offset: Int64(era.offset), start: Int64(era.start))\n        })\n    )\n}\n\nstatic func Time_toAdjustedMinutesHelp(\n    _ defaultOffset: Int64,\n    _ posixMinutes: Int64,\n    _ eras: [Time_Era]\n)\n    -> Int64\n{\n    for era in eras {\n        if era.start < posixMinutes {\n            return posixMinutes + Int64(era.offset)\n        } else {\n            // continue\n        }\n    }\n    return posixMinutes + Int64(defaultOffset)\n}\n\nstatic func Time_toAdjustedMinutes(_ timeZone: Time_Zone, _ time: Time_Posix) -> Int64 {\n    switch timeZone {\n    case let .Time_Zone(defaultOffset, eras):\n        Time_toAdjustedMinutesHelp(\n            defaultOffset,\n            (Time_posixToMillisInt(time) / 60000),\n            eras\n        )\n    }\n}\n\nstatic let minutesPerDay: Int64 = 60 * 24\nstatic func Time_toCivil(_ minutes: Int64) -> (\n    day: Int64,\n    month: Int64,\n    year: Int64\n) {\n    let rawDay: Int64 = (minutes / minutesPerDay) + 719468\n    let era: Int64 = if rawDay >= 0 { rawDay / 146097 } else { (rawDay - 146096) / 146097 }\n    let dayOfEra: Int64 = rawDay - era * 146097  // [0, 146096]\n\n    let yearOfEra: Int64 =\n        (dayOfEra - dayOfEra / 1460 + dayOfEra / 36524 - dayOfEra / 146096)\n        / 365  // [0, 399]\n\n    let year: Int64 = yearOfEra + era * 400\n\n    let dayOfYear: Int64 =\n        dayOfEra - (365 * yearOfEra + yearOfEra / 4 - yearOfEra / 100)  // [0, 365]\n\n    let mp: Int64 = (5 * dayOfYear + 2) / 153  // [0, 11]\n    let month: Int64 = if mp < 10 { mp + 3 } else { mp - 9 }  // [1, 12]\n\n    let resultYear: Int64 = if month <= 2 { year + 1 } else { year }\n\n    return (\n        day: dayOfYear - (153 * mp + 2) / 5 + 1,  // [1, 31]\n        month: month,\n        year: resultYear,\n    )\n}\n\n@Sendable public static func Time_toYear(_ zone: Time_Zone, _ time: Time_Posix) -> Double {\n    Double((Time_toCivil(Time_toAdjustedMinutes(zone, time))).year)\n}\n\n@Sendable public static func Time_toMonth(_ zone: Time_Zone, _ time: Time_Posix) -> Time_Month {\n    switch (Time_toCivil(Time_toAdjustedMinutes(zone, time))).month {\n    case 1: .Time_Jan\n    case 2: .Time_Feb\n    case 3: .Time_Mar\n    case 4: .Time_Apr\n    case 5: .Time_May\n    case 6: .Time_Jun\n    case 7: .Time_Jul\n    case 8: .Time_Aug\n    case 9: .Time_Sep\n    case 10: .Time_Oct\n    case 11: .Time_Nov\n    case _: .Time_Dec\n    }\n}\n\n@Sendable public static func Time_toDay(_ zone: Time_Zone, _ time: Time_Posix) -> Double {\n    Double((Time_toCivil(Time_toAdjustedMinutes(zone, time))).day)\n}\n\n@Sendable public static func Time_toWeekday(_ zone: Time_Zone, _ time: Time_Posix)\n    -> Time_Weekday\n{\n    switch (Time_toAdjustedMinutes(zone, time) / minutesPerDay) % 7 {\n    case 0: .Time_Thu\n    case 1: .Time_Fri\n    case 2: .Time_Sat\n    case 3: .Time_Sun\n    case 4: .Time_Mon\n    case 5: .Time_Tue\n    case _: .Time_Wed\n    }\n}\n\n@Sendable public static func Time_toHour(_ zone: Time_Zone, _ time: Time_Posix) -> Double {\n    Double((Time_toAdjustedMinutes(zone, time) / 60) % 24)\n}\n\n@Sendable public static func Time_toMinute(_ zone: Time_Zone, _ time: Time_Posix) -> Double {\n    Double(Time_toAdjustedMinutes(zone, time) % 60)\n}\n\n@Sendable public static func Time_toSecond(_ zone: Time_Zone, _ time: Time_Posix) -> Double {\n    Double((Time_posixToMillisInt(time) / 1000) % 60)\n}\n\n@Sendable public static func Time_toMillis(_ zone: Time_Zone, _ time: Time_Posix) -> Double {\n    Double(Time_posixToMillisInt(time) % 1000)\n}\n\npublic typealias Bytes_Bytes = [UInt8]\n\npublic enum Bytes_Endianness: Sendable, Equatable {\n    case Bytes_LE\n    case Bytes_BE\n}\n\n@Sendable public static func Bytes_width(_ bytes: Bytes_Bytes) -> Double {\n    Double(bytes.count)\n}\n\npublic enum BytesEncode_Encoder: Sendable, Equatable {\n    case BytesEncode_I8(Int8)\n    case BytesEncode_I16(Bytes_Endianness, Int16)\n    case BytesEncode_I32(Bytes_Endianness, Int32)\n    case BytesEncode_U8(UInt8)\n    case BytesEncode_U16(Bytes_Endianness, UInt16)\n    case BytesEncode_U32(Bytes_Endianness, UInt32)\n    case BytesEncode_F32(Bytes_Endianness, Float32)\n    case BytesEncode_F64(Bytes_Endianness, Float64)\n    case BytesEncode_Seq([BytesEncode_Encoder])\n    case BytesEncode_Utf8(String)\n    case BytesEncode_Bytes(Bytes_Bytes)\n}\n@Sendable public static func BytesEncode_EncoderByteCount(_ encoder: BytesEncode_Encoder) -> Int\n{\n    var combinedByteCount: Int = 0\n    var encodersRemainingUnordered: [BytesEncode_Encoder] = [encoder]\n    while !encodersRemainingUnordered.isEmpty {\n        switch encodersRemainingUnordered.popLast() {\n        // should have been caught by while condition\n        case .none:\n            return combinedByteCount\n        case let .some(nextEncoder):\n            switch nextEncoder {\n            case .BytesEncode_I8(_):\n                combinedByteCount = combinedByteCount + 1\n            case .BytesEncode_I16(_, _):\n                combinedByteCount = combinedByteCount + 2\n            case .BytesEncode_I32(_, _):\n                combinedByteCount = combinedByteCount + 4\n            case .BytesEncode_U8(_):\n                combinedByteCount = combinedByteCount + 1\n            case .BytesEncode_U16(_, _):\n                combinedByteCount = combinedByteCount + 2\n            case .BytesEncode_U32(_, _):\n                combinedByteCount = combinedByteCount + 4\n            case .BytesEncode_F32(_, _):\n                combinedByteCount = combinedByteCount + 4\n            case .BytesEncode_F64(_, _):\n                combinedByteCount = combinedByteCount + 8\n            case let .BytesEncode_Seq(encoders):\n                encodersRemainingUnordered.append(contentsOf: encoders)\n            case let .BytesEncode_Utf8(string):\n                combinedByteCount =\n                    combinedByteCount + string.lengthOfBytes(using: String.Encoding.utf8)\n            case let .BytesEncode_Bytes(bytes):\n                combinedByteCount = combinedByteCount + bytes.count\n            }\n        }\n    }\n    return combinedByteCount\n}\n@Sendable public static func BytesEncode_getStringWidth(_ string: String) -> Double {\n    Double(string.lengthOfBytes(using: String.Encoding.utf8))\n}\n@Sendable public static func BytesEncode_signedInt8(_ value: Double)\n    -> BytesEncode_Encoder\n{\n    .BytesEncode_I8(Int8(truncatingIfNeeded: Int(value)))\n}\n@Sendable public static func BytesEncode_signedInt16(\n    _ endianness: Bytes_Endianness,\n    _ value: Double\n)\n    -> BytesEncode_Encoder\n{\n    .BytesEncode_I16(endianness, Int16(truncatingIfNeeded: Int(value)))\n}\n@Sendable public static func BytesEncode_signedInt32(\n    _ endianness: Bytes_Endianness,\n    _ value: Double\n)\n    -> BytesEncode_Encoder\n{\n    .BytesEncode_I32(endianness, Int32(truncatingIfNeeded: Int(value)))\n}\n@Sendable public static func BytesEncode_unsignedInt8(_ value: Double)\n    -> BytesEncode_Encoder\n{\n    .BytesEncode_U8(UInt8(value))\n}\n@Sendable public static func BytesEncode_unsignedInt16(\n    _ endianness: Bytes_Endianness,\n    _ value: Double\n)\n    -> BytesEncode_Encoder\n{\n    .BytesEncode_U16(endianness, UInt16(truncatingIfNeeded: Int(value)))\n}\n@Sendable public static func BytesEncode_unsignedInt32(\n    _ endianness: Bytes_Endianness,\n    _ value: Double\n)\n    -> BytesEncode_Encoder\n{\n    .BytesEncode_U32(endianness, UInt32(truncatingIfNeeded: Int(value)))\n}\n@Sendable public static func BytesEncode_float32(\n    _ endianness: Bytes_Endianness,\n    _ value: Double\n)\n    -> BytesEncode_Encoder\n{\n    .BytesEncode_F32(endianness, Float32(value))\n}\n@Sendable public static func BytesEncode_float64(\n    _ endianness: Bytes_Endianness,\n    _ value: Double\n)\n    -> BytesEncode_Encoder\n{\n    .BytesEncode_F64(endianness, value)\n}\n@Sendable public static func BytesEncode_bytes(\n    _ endianness: Bytes_Endianness,\n    _ value: Bytes_Bytes\n)\n    -> BytesEncode_Encoder\n{\n    .BytesEncode_Bytes(value)\n}\n@Sendable public static func BytesEncode_string(_ value: String)\n    -> BytesEncode_Encoder\n{\n    .BytesEncode_Utf8(value)\n}\n@Sendable public static func BytesEncode_sequence(\n    _ encodersInSequence: List_List<BytesEncode_Encoder>\n)\n    -> BytesEncode_Encoder\n{\n    .BytesEncode_Seq(Array_fromList(encodersInSequence))\n}\n\nstatic func toBytes<a>(_ value: a) -> Bytes_Bytes {\n    withUnsafeBytes(of: value, Array.init)\n}\n@Sendable public static func BytesEncode_encode(_ encoder: BytesEncode_Encoder) -> Bytes_Bytes {\n    var bytesBuffer: Bytes_Bytes = []\n    bytesBuffer.reserveCapacity(BytesEncode_EncoderByteCount(encoder))\n    var encodersRemainingStack: [BytesEncode_Encoder] = [encoder]\n    while !encodersRemainingStack.isEmpty {\n        switch encodersRemainingStack.popLast() {\n        // should have been caught by while condition\n        case .none:\n            return bytesBuffer\n        case let .some(nextEncoder):\n            switch nextEncoder {\n            case let .BytesEncode_I8(i8):\n                bytesBuffer.append(contentsOf: toBytes(i8))\n            case let .BytesEncode_I16(endianness, i16):\n                switch endianness {\n                case .Bytes_BE:\n                    bytesBuffer.append(contentsOf: toBytes(i16.bigEndian))\n                case .Bytes_LE:\n                    bytesBuffer.append(contentsOf: toBytes(i16.littleEndian))\n                }\n            case let .BytesEncode_I32(endianness, i32):\n                switch endianness {\n                case .Bytes_BE:\n                    bytesBuffer.append(contentsOf: toBytes(i32.bigEndian))\n                case .Bytes_LE:\n                    bytesBuffer.append(contentsOf: toBytes(i32.littleEndian))\n                }\n            case let .BytesEncode_U8(u8):\n                bytesBuffer.append(u8)\n            case let .BytesEncode_U16(endianness, u16):\n                switch endianness {\n                case .Bytes_BE:\n                    bytesBuffer.append(contentsOf: toBytes(u16.bigEndian))\n                case .Bytes_LE:\n                    bytesBuffer.append(contentsOf: toBytes(u16.littleEndian))\n                }\n            case let .BytesEncode_U32(endianness, u32):\n                switch endianness {\n                case .Bytes_BE:\n                    bytesBuffer.append(contentsOf: toBytes(u32.bigEndian))\n                case .Bytes_LE:\n                    bytesBuffer.append(contentsOf: toBytes(u32.littleEndian))\n                }\n            case let .BytesEncode_F32(endianness, f32):\n                switch endianness {\n                case .Bytes_BE:\n                    bytesBuffer.append(contentsOf: toBytes(f32.bitPattern.bigEndian))\n                case .Bytes_LE:\n                    bytesBuffer.append(contentsOf: toBytes(f32.bitPattern.littleEndian))\n                }\n            case let .BytesEncode_F64(endianness, f64):\n                switch endianness {\n                case .Bytes_BE:\n                    bytesBuffer.append(contentsOf: toBytes(f64.bitPattern.bigEndian))\n                case .Bytes_LE:\n                    bytesBuffer.append(contentsOf: toBytes(f64.bitPattern.littleEndian))\n                }\n            case let .BytesEncode_Seq(encodersToAppend):\n                encodersRemainingStack.append(contentsOf: encodersToAppend.reversed())\n            case let .BytesEncode_Utf8(utf8String):\n                bytesBuffer.append(contentsOf: Array(Data(utf8String.utf8)))\n            case let .BytesEncode_Bytes(bytes):\n                bytesBuffer.append(contentsOf: bytes)\n            }\n        }\n    }\n    return bytesBuffer\n}\n\npublic struct BytesDecode_Decoder<value: Sendable>: Sendable {\n    let decode:\n        @Sendable (_ index: Int, _ bytes: Bytes_Bytes)\n            -> (index: Int, value: value)?\n}\npublic enum BytesDecode_Step<state: Sendable, a: Sendable>: Sendable {\n    case BytesDecode_Loop(state)\n    case BytesDecode_Done(a)\n}\n\n@Sendable public static func BytesDecode_decode<value>(\n    _ decoder: BytesDecode_Decoder<value>,\n    _ bytes: Bytes_Bytes\n)\n    -> Maybe_Maybe<value>\n{\n    switch decoder.decode(0, bytes) {\n    case .none: .Maybe_Nothing\n    case let .some(finalState):\n        .Maybe_Just(finalState.value)\n    }\n}\n@Sendable public static func BytesDecode_succeed<value>(_ value: value)\n    -> BytesDecode_Decoder<value>\n{\n    BytesDecode_Decoder(decode: { startIndex, _ in\n        (startIndex, value)\n    })\n}\n@Sendable public static func BytesDecode_fail<value>()\n    -> BytesDecode_Decoder<value>\n{\n    BytesDecode_Decoder(decode: { _, _ in .none })\n}\n@Sendable public static func BytesDecode_andThen<a, b>(\n    _ valueToFollowupDecoder: @escaping @Sendable (a) -> BytesDecode_Decoder<b>,\n    _ decoder: BytesDecode_Decoder<a>\n)\n    -> BytesDecode_Decoder<b>\n{\n    BytesDecode_Decoder(decode: { startIndex, bytes in\n        decoder.decode(startIndex, bytes)\n            .flatMap({ endIndex, value in\n                valueToFollowupDecoder(value).decode(endIndex, bytes)\n            })\n    })\n}\n@Sendable public static func BytesDecode_map<a, b>(\n    _ valueChange: @escaping @Sendable (a) -> b,\n    _ decoder: BytesDecode_Decoder<a>\n)\n    -> BytesDecode_Decoder<b>\n{\n    BytesDecode_Decoder(decode: { startIndex, bytes in\n        decoder.decode(startIndex, bytes)\n            .map({ endIndex, value in (endIndex, valueChange(value)) })\n    })\n}\n@Sendable public static func BytesDecode_map2<a, b, combined>(\n    _ valueCombine: @escaping @Sendable (a) -> (b) -> combined,\n    _ aDecoder: BytesDecode_Decoder<a>,\n    _ bDecoder: BytesDecode_Decoder<b>\n)\n    -> BytesDecode_Decoder<combined>\n{\n    BytesDecode_Decoder(decode: { startIndex, bytes in\n        aDecoder.decode(startIndex, bytes)\n            .flatMap({ indexAfterA, a in\n                bDecoder.decode(indexAfterA, bytes)\n                    .map({ indexAfterB, b in\n                        (indexAfterB, valueCombine(a)(b))\n                    })\n            })\n    })\n}\n@Sendable public static func BytesDecode_map3<a, b, c, combined>(\n    _ valueCombine: @escaping @Sendable (a) -> (b) -> (c) -> combined,\n    _ aDecoder: BytesDecode_Decoder<a>,\n    _ bDecoder: BytesDecode_Decoder<b>,\n    _ cDecoder: BytesDecode_Decoder<c>\n)\n    -> BytesDecode_Decoder<combined>\n{\n    BytesDecode_Decoder(decode: { startIndex, bytes in\n        aDecoder.decode(startIndex, bytes)\n            .flatMap({ indexAfterA, a in\n                bDecoder.decode(indexAfterA, bytes)\n                    .flatMap({ indexAfterB, b in\n                        cDecoder.decode(indexAfterB, bytes)\n                            .map({ indexAfterC, c in\n                                (indexAfterC, valueCombine(a)(b)(c))\n                            })\n                    })\n            })\n    })\n}\n@Sendable public static func BytesDecode_map4<a, b, c, d, combined>(\n    _ valueCombine: @escaping @Sendable (a) -> (b) -> (c) -> (d) -> combined,\n    _ aDecoder: BytesDecode_Decoder<a>,\n    _ bDecoder: BytesDecode_Decoder<b>,\n    _ cDecoder: BytesDecode_Decoder<c>,\n    _ dDecoder: BytesDecode_Decoder<d>\n)\n    -> BytesDecode_Decoder<combined>\n{\n    BytesDecode_Decoder(decode: { startIndex, bytes in\n        aDecoder.decode(startIndex, bytes)\n            .flatMap({ indexAfterA, a in\n                bDecoder.decode(indexAfterA, bytes)\n                    .flatMap({ indexAfterB, b in\n                        cDecoder.decode(indexAfterB, bytes)\n                            .flatMap({ indexAfterC, c in\n                                dDecoder.decode(indexAfterC, bytes)\n                                    .map({ indexAfterD, d in\n                                        (indexAfterD, valueCombine(a)(b)(c)(d))\n                                    })\n                            })\n                    })\n            })\n    })\n}\n@Sendable public static func BytesDecode_map5<a, b, c, d, e, combined>(\n    _ valueCombine: @escaping @Sendable (a) -> (b) -> (c) -> (d) -> (e) -> combined,\n    _ aDecoder: BytesDecode_Decoder<a>,\n    _ bDecoder: BytesDecode_Decoder<b>,\n    _ cDecoder: BytesDecode_Decoder<c>,\n    _ dDecoder: BytesDecode_Decoder<d>,\n    _ eDecoder: BytesDecode_Decoder<e>\n)\n    -> BytesDecode_Decoder<combined>\n{\n    BytesDecode_Decoder(decode: { startIndex, bytes in\n        aDecoder.decode(startIndex, bytes)\n            .flatMap({ indexAfterA, a in\n                bDecoder.decode(indexAfterA, bytes)\n                    .flatMap({ indexAfterB, b in\n                        cDecoder.decode(indexAfterB, bytes)\n                            .flatMap({ indexAfterC, c in\n                                dDecoder.decode(indexAfterC, bytes)\n                                    .flatMap({ indexAfterD, d in\n                                        eDecoder.decode(indexAfterD, bytes)\n                                            .map({ indexAfterE, e in\n                                                (indexAfterE, valueCombine(a)(b)(c)(d)(e))\n                                            })\n                                    })\n                            })\n                    })\n            })\n    })\n}\n@Sendable public static func BytesDecode_loop<state, a>(\n    _ initialState: state,\n    _ step: @escaping @Sendable (state) -> BytesDecode_Decoder<BytesDecode_Step<state, a>>\n)\n    -> BytesDecode_Decoder<a>\n{\n    BytesDecode_Decoder(decode: { startIndex, bytes in\n        BytesDecode_loopFunction(initialState, step, startIndex: startIndex, bytes: bytes)\n    })\n}\n@Sendable public static func BytesDecode_loopFunction<state, a>(\n    _ initialState: state,\n    _ step: @escaping @Sendable (state) -> BytesDecode_Decoder<BytesDecode_Step<state, a>>,\n    startIndex: Int,\n    bytes: Bytes_Bytes\n)\n    -> (index: Int, value: a)?\n{\n    switch step(initialState).decode(startIndex, bytes) {\n    case .none: .none\n    case let .some((index: indexAfterStep, value: stepValue)):\n        switch stepValue {\n        case let .BytesDecode_Done(result):\n            .some((index: indexAfterStep, value: result))\n        case let .BytesDecode_Loop(newState):\n            BytesDecode_loopFunction(newState, step, startIndex: indexAfterStep, bytes: bytes)\n        }\n    }\n}\n\n@Sendable public static func BytesDecode_signedInt8(_ endianness: Bytes_Endianness)\n    -> BytesDecode_Decoder<Double>\n{\n    BytesDecode_Decoder(decode: { index, bytes in\n        let indexAfter: Int = index + 1\n        return if indexAfter > bytes.count {\n            .none\n        } else {\n            .some((index: indexAfter, value: Double(Int8(bitPattern: bytes[index]))))\n        }\n    })\n}\n@Sendable public static func BytesDecode_signedInt16(_ endianness: Bytes_Endianness)\n    -> BytesDecode_Decoder<Double>\n{\n    BytesDecode_Decoder(decode: { index, bytes in\n        let indexAfter: Int = index + 2\n        if indexAfter > bytes.count {\n            return .none\n        } else {\n            let valueRaw: Int16 = bytes.withUnsafeBytes({ b in\n                b.load(fromByteOffset: index, as: Int16.self)\n            })\n            let valueCorrectedForEndianness: Int16 =\n                switch endianness {\n                case .Bytes_BE: Int16(bigEndian: valueRaw)\n                case .Bytes_LE: Int16(littleEndian: valueRaw)\n                }\n            return .some((index: indexAfter, value: Double(valueCorrectedForEndianness)))\n        }\n    })\n}\n@Sendable public static func BytesDecode_signedInt32(_ endianness: Bytes_Endianness)\n    -> BytesDecode_Decoder<Double>\n{\n    BytesDecode_Decoder(decode: { index, bytes in\n        let indexAfter: Int = index + 4\n        if indexAfter > bytes.count {\n            return .none\n        } else {\n            let valueRaw: Int32 = bytes.withUnsafeBytes({ b in\n                b.load(fromByteOffset: index, as: Int32.self)\n            })\n            let valueCorrectedForEndianness: Int32 =\n                switch endianness {\n                case .Bytes_BE: Int32(bigEndian: valueRaw)\n                case .Bytes_LE: Int32(littleEndian: valueRaw)\n                }\n            return .some((index: indexAfter, value: Double(valueCorrectedForEndianness)))\n        }\n    })\n}\n@Sendable public static func BytesDecode_unsignedInt8(_ endianness: Bytes_Endianness)\n    -> BytesDecode_Decoder<Double>\n{\n    BytesDecode_Decoder(decode: { index, bytes in\n        let indexAfter: Int = index + 1\n        return if indexAfter > bytes.count {\n            .none\n        } else {\n            .some((index: indexAfter, value: Double(bytes[index])))\n        }\n    })\n}\n@Sendable public static func BytesDecode_unsignedInt16(_ endianness: Bytes_Endianness)\n    -> BytesDecode_Decoder<Double>\n{\n    BytesDecode_Decoder(decode: { index, bytes in\n        let indexAfter: Int = index + 2\n        if indexAfter > bytes.count {\n            return .none\n        } else {\n            let valueRaw: UInt16 = bytes.withUnsafeBytes({ b in\n                b.load(fromByteOffset: index, as: UInt16.self)\n            })\n            let valueCorrectedForEndianness: UInt16 =\n                switch endianness {\n                case .Bytes_BE: UInt16(bigEndian: valueRaw)\n                case .Bytes_LE: UInt16(littleEndian: valueRaw)\n                }\n            return .some((index: indexAfter, value: Double(valueCorrectedForEndianness)))\n        }\n    })\n}\n@Sendable public static func BytesDecode_unsignedInt32(_ endianness: Bytes_Endianness)\n    -> BytesDecode_Decoder<Double>\n{\n    BytesDecode_Decoder(decode: { index, bytes in\n        let indexAfter: Int = index + 4\n        if indexAfter > bytes.count {\n            return .none\n        } else {\n            let valueRaw: UInt32 = bytes.withUnsafeBytes({ b in\n                b.load(fromByteOffset: index, as: UInt32.self)\n            })\n            let valueCorrectedForEndianness: UInt32 =\n                switch endianness {\n                case .Bytes_BE: UInt32(bigEndian: valueRaw)\n                case .Bytes_LE: UInt32(littleEndian: valueRaw)\n                }\n            return .some((index: indexAfter, value: Double(valueCorrectedForEndianness)))\n        }\n    })\n}\n@Sendable public static func BytesDecode_unsignedFloat32(_ endianness: Bytes_Endianness)\n    -> BytesDecode_Decoder<Double>\n{\n    BytesDecode_Decoder(decode: { index, bytes in\n        let indexAfter: Int = index + 4\n        if indexAfter > bytes.count {\n            return .none\n        } else {\n            let valueRaw: UInt32 = bytes.withUnsafeBytes({ b in\n                b.load(fromByteOffset: index, as: UInt32.self)\n            })\n            let valueCorrectedForEndianness: Float32 =\n                switch endianness {\n                case .Bytes_BE: Float32(bitPattern: UInt32(bigEndian: valueRaw))\n                case .Bytes_LE: Float32(bitPattern: UInt32(littleEndian: valueRaw))\n                }\n            return .some((index: indexAfter, value: Double(valueCorrectedForEndianness)))\n        }\n    })\n}\n@Sendable public static func BytesDecode_unsignedFloat64(_ endianness: Bytes_Endianness)\n    -> BytesDecode_Decoder<Double>\n{\n    BytesDecode_Decoder(decode: { index, bytes in\n        let indexAfter: Int = index + 8\n        if indexAfter > bytes.count {\n            return .none\n        } else {\n            let valueRaw: UInt64 = bytes.withUnsafeBytes({ b in\n                b.load(fromByteOffset: index, as: UInt64.self)\n            })\n            let valueCorrectedForEndianness: Float64 =\n                switch endianness {\n                case .Bytes_BE: Float64(bitPattern: UInt64(bigEndian: valueRaw))\n                case .Bytes_LE: Float64(bitPattern: UInt64(littleEndian: valueRaw))\n                }\n            return .some((index: indexAfter, value: Double(valueCorrectedForEndianness)))\n        }\n    })\n}\n@Sendable public static func BytesDecode_bytes(_ count: Double)\n    -> BytesDecode_Decoder<Bytes_Bytes>\n{\n    BytesDecode_Decoder(decode: { index, bytes in\n        let indexAfter: Int = index + Int(count)\n        return if indexAfter > bytes.count {\n            .none\n        } else {\n            .some(\n                (\n                    index: indexAfter,\n                    value: Array(bytes[index..<indexAfter])\n                )\n            )\n        }\n    })\n}\n@Sendable public static func BytesDecode_string(_ utf8Count: Double)\n    -> BytesDecode_Decoder<String>\n{\n    BytesDecode_Decoder(decode: { index, bytes -> (index: Int, value: String)? in\n        let indexAfter: Int = index + Int(utf8Count)\n        return if indexAfter > bytes.count {\n            .none\n        } else {\n            String(\n                bytes: bytes[index..<indexAfter],\n                encoding: String.Encoding.utf8\n            )\n            .map({ value in\n                (\n                    index: indexAfter,\n                    value: value\n                )\n            })\n        }\n    })\n}\n\npublic enum PlatformCmd_CmdSingle<event: Sendable>: Sendable {\n    case PlatformCmd_PortOutgoing(name: String, value: JsonEncode_Value)\n}\npublic typealias PlatformCmd_Cmd<event> =\n    [PlatformCmd_CmdSingle<event>]\n\n@Sendable public static func PlatformCmd_none<event>() -> PlatformCmd_Cmd<event> {\n    []\n}\n@Sendable public static func PlatformCmd_batch<event: Sendable>(\n    _ cmds: List_List<PlatformCmd_Cmd<event>>\n)\n    -> PlatformCmd_Cmd<event>\n{\n    // can be optimized\n    Array_fromList(cmds).flatMap({ cmd in cmd })\n}\n@Sendable public static func PlatformCmd_map<event: Sendable, eventMapped: Sendable>(\n    _: (event) -> eventMapped,\n    _ cmd: PlatformCmd_Cmd<event>\n) -> PlatformCmd_Cmd<eventMapped> {\n    cmd.map({ cmdSingle in\n        switch cmdSingle {\n        case let .PlatformCmd_PortOutgoing(name, value):\n            .PlatformCmd_PortOutgoing(name: name, value: value)\n        }\n    })\n}\n\npublic enum PlatformSub_SubSingle<event: Sendable>: Sendable {\n    case PlatformSub_PortIncoming(\n        name: String,\n        onValue: @Sendable (JsonDecode_Value) -> event\n    )\n}\npublic typealias PlatformSub_Sub<event> = [PlatformSub_SubSingle<event>]\n\n@Sendable public static func PlatformSub_none<event>() -> PlatformSub_Sub<event> {\n    []\n}\n@Sendable public static func PlatformSub_batch<event: Sendable>(\n    _ subs: List_List<PlatformSub_Sub<event>>\n)\n    -> PlatformSub_Sub<event>\n{\n    // can be optimized\n    Array_fromList(subs).flatMap({ sub in sub })\n}\n@Sendable public static func PlatformSub_map<event: Sendable, eventMapped: Sendable>(\n    _ eventChange: @escaping @Sendable (event) -> eventMapped,\n    _ sub: PlatformSub_Sub<event>\n) -> PlatformSub_Sub<eventMapped> {\n    sub.map({ subSingle in\n        switch subSingle {\n        case let .PlatformSub_PortIncoming(name, onValue):\n            .PlatformSub_PortIncoming(\n                name: name,\n                onValue: { value in eventChange(onValue(value)) }\n            )\n        }\n    })\n}\n\npublic enum Generated_init__subscriptions_update<\n    init_: Sendable, subscriptions: Sendable, update: Sendable\n>: Sendable {\n    case Record(init_: init_, subscriptions: subscriptions, update: update)\n    var init_: init_ {\n        switch self {\n        case let .Record(result, _, _): result\n        }\n    }\n    var subscriptions: subscriptions {\n        switch self {\n        case let .Record(_, result, _): result\n        }\n    }\n    var update: update {\n        switch self {\n        case let .Record(_, _, result): result\n        }\n    }\n}\npublic typealias Platform_Program<flags: Sendable, state: Sendable, event: Sendable> =\n    Generated_init__subscriptions_update<\n        @Sendable (flags) -> Tuple<state, PlatformCmd_Cmd<event>>,\n        @Sendable (state) -> PlatformSub_Sub<event>,\n        @Sendable (event) -> (state) -> Tuple<state, PlatformCmd_Cmd<event>>\n    >\n\n@Sendable public static func Platform_worker<flags, state, event>(\n    _ config: Platform_Program<flags, state, event>\n)\n    -> Platform_Program<flags, state, event>\n{\n    config\n}\n\npublic struct JsonDecode_Value: @unchecked Sendable, Equatable {\n    // NSString | NSNumber (covering Int, Float, Bool) | NSArray | NSDictionary | NSNull\n    let value: Any\n\n    public static func == (l: JsonDecode_Value, r: JsonDecode_Value) -> Bool {\n        anyEquals(l.value, r.value)\n    }\n    static func anyEquals(_ l: Any, _ r: Any) -> Bool {\n        switch (l, r) {\n        case (_ as NSNull, _ as NSNull):\n            true\n        case (_ as NSNull, _), (_, _ as NSNull): false\n        case let (lNumber as NSNumber, rNumber as NSNumber):\n            lNumber == rNumber\n        case (_ as NSNumber, _), (_, _ as NSNumber): false\n        case let (lString as NSString, rString as NSString):\n            lString == rString\n        case (_ as NSString, _), (_, _ as NSString): false\n        case let (lArray as NSArray, rArray as NSArray):\n            lArray.elementsEqual(rArray, by: anyEquals)\n        case (_ as NSArray, _), (_, _ as NSArray): false\n        case let (lDictionary as NSDictionary, rDictionary as NSDictionary):\n            lDictionary.allSatisfy({ lEntry in\n                switch rDictionary[lEntry.key] {\n                case .none: false\n                case let .some(rEntryValue):\n                    anyEquals(lEntry.value, rEntryValue)\n                }\n            })\n        case (_ as NSDictionary, _), (_, _ as NSDictionary): false\n        // non-standard, usually type-equivalent so cases likely impossible\n        case let (lNumber as Double, rNumber as Double):\n            lNumber == rNumber\n        case (_ as Double, _), (_, _ as Double): false\n        case let (lNumber as Int, rNumber as Int):\n            lNumber == rNumber\n        case (_ as Int, _), (_, _ as Int): false\n        case let (lNumber as Bool, rNumber as Bool):\n            lNumber == rNumber\n        case (_ as Bool, _), (_, _ as Bool): false\n        case let (lString as String, rString as String):\n            lString == rString\n        case (_ as String, _), (_, _ as String): false\n        case let (lArray as [Any], rArray as [Any]):\n            lArray.elementsEqual(rArray, by: anyEquals)\n        case let (lDictionary as [AnyHashable: Any], rDictionary as [AnyHashable: Any]):\n            lDictionary.allSatisfy({ lEntry in\n                switch rDictionary[lEntry.key] {\n                case .none: false\n                case let .some(rEntryValue):\n                    anyEquals(lEntry.value, rEntryValue)\n                }\n            })\n        case (_ as [AnyHashable: Any], _), (_, _ as [AnyHashable: Any]): false\n        // last resort\n        case let (lHashable as AnyHashable, rHashable as AnyHashable):\n            lHashable == rHashable\n        case let (lEquatable as any Equatable, rEquatable as any Equatable):\n            typeErasedEq(lEquatable, rEquatable)\n        case (_, _):\n            fatalError(\"== on non-Equatable json values \\(l) and \\(r)\")\n        }\n    }\n}\npublic typealias JsonEncode_Value = JsonDecode_Value\n\npublic static let JsonEncode_null: JsonEncode_Value =\n    JsonDecode_Value(value: NSNull())\n@Sendable public static func JsonEncode_int(_ int: Double) -> JsonEncode_Value {\n    JsonDecode_Value(value: NSNumber(value: Int64(int)))\n}\n@Sendable public static func JsonEncode_float(_ float: Double) -> JsonEncode_Value {\n    JsonDecode_Value(value: NSNumber(value: float))\n}\n@Sendable public static func JsonEncode_string(_ string: String) -> JsonEncode_Value {\n    JsonDecode_Value(value: NSString(string: string))\n}\n@Sendable public static func JsonEncode_bool(_ bool: Bool) -> JsonEncode_Value {\n    JsonDecode_Value(value: NSNumber(value: bool))\n}\n@Sendable public static func JsonEncode_list<a>(\n    _ elementToJson: (a) -> JsonEncode_Value,\n    _ elements: List_List<a>\n) -> JsonEncode_Value {\n    JsonDecode_Value(\n        value: NSArray(array: elements.map(elementToJson))\n    )\n}\n@Sendable public static func JsonEncode_array<a>(\n    _ elementToJson: (a) -> JsonEncode_Value,\n    _ elements: [a]\n) -> JsonEncode_Value {\n    JsonDecode_Value(\n        value: NSArray(\n            array: elements.map(elementToJson)\n        )\n    )\n}\n@Sendable public static func JsonEncode_set<a: Sendable>(\n    _ elementToJson: (a) -> JsonEncode_Value,\n    _ elements: Set<a>\n) -> JsonEncode_Value {\n    JsonDecode_Value(\n        value: NSArray(\n            array: Array(elements).map(elementToJson)\n        )\n    )\n}\n@Sendable public static func JsonEncode_object(\n    _ fields: List_List<Tuple<String, JsonEncode_Value>>\n)\n    -> JsonEncode_Value\n{\n    var fieldsDictionary: [String: JsonEncode_Value] = Dictionary()\n    for field in fields {\n        fieldsDictionary[field.first] = field.second\n    }\n    return JsonDecode_Value(value: NSDictionary(dictionary: fieldsDictionary))\n}\n@Sendable public static func JsonEncode_dict(_ fields: [String: JsonEncode_Value])\n    -> JsonEncode_Value\n{\n    JsonDecode_Value(value: NSDictionary(dictionary: fields))\n}\n\n@Sendable public static func JsonEncode_encode(\n    _ indentSize: Double,\n    _ encoded: JsonEncode_Value\n)\n    -> String\n{\n    let options: JSONSerialization.WritingOptions =\n        if indentSize <= 0 {\n            [.fragmentsAllowed]\n        } else {\n            [.fragmentsAllowed, .prettyPrinted]  // indent size 2\n        }\n    do {\n        let prettyPrintedData: Data = try JSONSerialization.data(\n            withJSONObject: encoded.value,\n            options: options\n        )\n        return switch String(data: prettyPrintedData, encoding: .utf8) {\n        case let .some(encodedJsonAsString):\n            if (indentSize <= 0) || (indentSize == 2) {\n                encodedJsonAsString\n            } else {\n                // set indent size\n                encodedJsonAsString.replacing(\n                    \"\\n  \",\n                    with: \"\\n\\(String(repeating: \" \", count: Int(indentSize)))\"\n                )\n            }\n        case .none:\n            \"null\"\n        }\n    } catch {\n        return \"null\"\n    }\n}\n\npublic indirect enum JsonDecode_Error: Sendable, Equatable {\n    case JsonDecode_Field(String, JsonDecode_Error)\n    case JsonDecode_Index(Double, JsonDecode_Error)\n    case JsonDecode_OneOf(List_List<JsonDecode_Error>)\n    case JsonDecode_Failure(String, JsonDecode_Value)\n}\npublic struct JsonDecode_Decoder<value: Sendable>: Sendable {\n    let decode: @Sendable (JsonDecode_Value) -> Result_Result<JsonDecode_Error, value>\n}\n\n@Sendable public static func JsonDecode_decodeValue<value: Sendable>(\n    _ decoder: JsonDecode_Decoder<value>,\n    _ toDecode: JsonDecode_Value\n) -> Result_Result<JsonDecode_Error, value> {\n    decoder.decode(toDecode)\n}\n@Sendable public static func JsonDecode_decodeString<value: Sendable>(\n    _ decoder: JsonDecode_Decoder<value>,\n    _ toDecode: String\n) -> Result_Result<JsonDecode_Error, value> {\n    do {\n        return decoder.decode(\n            JsonDecode_Value(\n                value: try JSONSerialization.jsonObject(\n                    with: Data(toDecode.utf8),\n                    options: [.fragmentsAllowed]\n                )\n            )\n        )\n    } catch let error {\n        return .Result_Err(\n            .JsonDecode_Failure(\n                \"This is not valid JSON! \\(error.localizedDescription)\",\n                JsonEncode_string(toDecode)\n            )\n        )\n    }\n}\n\npublic static let JsonDecode_value: JsonDecode_Decoder<JsonDecode_Value> =\n    JsonDecode_Decoder(decode: { toDecode in .Result_Ok(toDecode) })\n@Sendable public static func JsonDecode_succeed<a: Sendable>(_ value: (a))\n    -> JsonDecode_Decoder<a>\n{\n    JsonDecode_Decoder(decode: { _ in .Result_Ok(value) })\n}\n@Sendable public static func JsonDecode_fail<a: Sendable>(_ errorMessage: String)\n    -> JsonDecode_Decoder<a>\n{\n    JsonDecode_Decoder(decode: { toDecode in\n        .Result_Err(.JsonDecode_Failure(errorMessage, toDecode))\n    })\n}\n@Sendable public static func JsonDecode_lazy<a: Sendable>(\n    _ buildDecoder: @escaping @Sendable (Unit) -> JsonDecode_Decoder<a>\n)\n    -> JsonDecode_Decoder<a>\n{\n    JsonDecode_Decoder(decode: { toDecode in\n        buildDecoder(.Unit).decode(toDecode)\n    })\n}\n@Sendable public static func JsonDecode_andThen<a: Sendable, b: Sendable>(\n    _ valueToDecoder: @escaping @Sendable (a) -> JsonDecode_Decoder<b>,\n    _ decoder: JsonDecode_Decoder<a>\n) -> JsonDecode_Decoder<b> {\n    JsonDecode_Decoder(decode: { toDecode in\n        switch decoder.decode(toDecode) {\n        case let .Result_Err(error):\n            .Result_Err(error)\n        case let .Result_Ok(value):\n            valueToDecoder(value).decode(toDecode)\n        }\n    })\n}\n@Sendable public static func JsonDecode_map<a: Sendable, b: Sendable>(\n    _ valueChange: @escaping @Sendable (a) -> b,\n    _ decoder: JsonDecode_Decoder<a>\n) -> JsonDecode_Decoder<b> {\n    JsonDecode_Decoder(decode: { toDecode in\n        Result_map(valueChange, decoder.decode(toDecode))\n    })\n}\n@Sendable public static func JsonDecode_map2<a: Sendable, b: Sendable, combined: Sendable>(\n    _ combine: @escaping @Sendable (a) -> (b) -> combined,\n    _ aDecoder: JsonDecode_Decoder<a>,\n    _ bDecoder: JsonDecode_Decoder<b>\n)\n    -> JsonDecode_Decoder<combined>\n{\n    JsonDecode_Decoder(decode: { toDecode in\n        Result_map2(\n            combine, aDecoder.decode(toDecode),\n            bDecoder.decode(toDecode)\n        )\n    })\n}\n@Sendable\npublic static func JsonDecode_map3<a: Sendable, b: Sendable, c: Sendable, combined: Sendable>(\n    _ combine: @escaping @Sendable (a) -> (b) -> (c) -> combined,\n    _ aDecoder: JsonDecode_Decoder<a>,\n    _ bDecoder: JsonDecode_Decoder<b>,\n    _ cDecoder: JsonDecode_Decoder<c>\n)\n    -> JsonDecode_Decoder<combined>\n{\n    JsonDecode_Decoder(decode: { toDecode in\n        Result_map3(\n            combine,\n            aDecoder.decode(toDecode),\n            bDecoder.decode(toDecode),\n            cDecoder.decode(toDecode))\n    })\n}\n@Sendable\npublic static func JsonDecode_map4<\n    a: Sendable, b: Sendable, c: Sendable, d: Sendable, combined: Sendable\n>(\n    _ combine: @escaping @Sendable (a) -> (b) -> (c) -> (d) -> combined,\n    _ aDecoder: JsonDecode_Decoder<a>,\n    _ bDecoder: JsonDecode_Decoder<b>,\n    _ cDecoder: JsonDecode_Decoder<c>,\n    _ dDecoder: JsonDecode_Decoder<d>\n)\n    -> JsonDecode_Decoder<combined>\n{\n    JsonDecode_Decoder(decode: { toDecode in\n        Result_map4(\n            combine,\n            aDecoder.decode(toDecode),\n            bDecoder.decode(toDecode),\n            cDecoder.decode(toDecode),\n            dDecoder.decode(toDecode)\n        )\n    })\n}\n@Sendable\npublic static func JsonDecode_map5<\n    a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, combined: Sendable\n>(\n    _ combine: @escaping @Sendable (a) -> (b) -> (c) -> (d) -> (e) -> combined,\n    _ aDecoder: JsonDecode_Decoder<a>,\n    _ bDecoder: JsonDecode_Decoder<b>,\n    _ cDecoder: JsonDecode_Decoder<c>,\n    _ dDecoder: JsonDecode_Decoder<d>,\n    _ eDecoder: JsonDecode_Decoder<e>\n)\n    -> JsonDecode_Decoder<combined>\n{\n    JsonDecode_Decoder(decode: { toDecode in\n        Result_map5(\n            combine,\n            aDecoder.decode(toDecode),\n            bDecoder.decode(toDecode),\n            cDecoder.decode(toDecode),\n            dDecoder.decode(toDecode),\n            eDecoder.decode(toDecode)\n        )\n    })\n}\n@Sendable\npublic static func JsonDecode_map6<\n    a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, f: Sendable,\n    combined: Sendable\n>(\n    _ combine: @escaping @Sendable (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> combined,\n    _ aDecoder: JsonDecode_Decoder<a>,\n    _ bDecoder: JsonDecode_Decoder<b>,\n    _ cDecoder: JsonDecode_Decoder<c>,\n    _ dDecoder: JsonDecode_Decoder<d>,\n    _ eDecoder: JsonDecode_Decoder<e>,\n    _ fDecoder: JsonDecode_Decoder<f>\n)\n    -> JsonDecode_Decoder<combined>\n{\n    JsonDecode_Decoder(decode: { toDecode in\n        Result_map6(\n            combine,\n            aDecoder.decode(toDecode),\n            bDecoder.decode(toDecode),\n            cDecoder.decode(toDecode),\n            dDecoder.decode(toDecode),\n            eDecoder.decode(toDecode),\n            fDecoder.decode(toDecode)\n        )\n    })\n}\n@Sendable\npublic static func JsonDecode_map7<\n    a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, f: Sendable, g: Sendable,\n    combined: Sendable\n>(\n    _ combine: @escaping @Sendable (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> (g) -> combined,\n    _ aDecoder: JsonDecode_Decoder<a>,\n    _ bDecoder: JsonDecode_Decoder<b>,\n    _ cDecoder: JsonDecode_Decoder<c>,\n    _ dDecoder: JsonDecode_Decoder<d>,\n    _ eDecoder: JsonDecode_Decoder<e>,\n    _ fDecoder: JsonDecode_Decoder<f>,\n    _ gDecoder: JsonDecode_Decoder<g>\n)\n    -> JsonDecode_Decoder<combined>\n{\n    JsonDecode_Decoder(decode: { toDecode in\n        Result_map7(\n            combine,\n            aDecoder.decode(toDecode),\n            bDecoder.decode(toDecode),\n            cDecoder.decode(toDecode),\n            dDecoder.decode(toDecode),\n            eDecoder.decode(toDecode),\n            fDecoder.decode(toDecode),\n            gDecoder.decode(toDecode)\n        )\n    })\n}\n@Sendable\npublic static func JsonDecode_map8<\n    a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, f: Sendable, g: Sendable,\n    h: Sendable, combined: Sendable\n>(\n    _ combine: @escaping @Sendable (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> (g) -> (h) ->\n        combined,\n    _ aDecoder: JsonDecode_Decoder<a>,\n    _ bDecoder: JsonDecode_Decoder<b>,\n    _ cDecoder: JsonDecode_Decoder<c>,\n    _ dDecoder: JsonDecode_Decoder<d>,\n    _ eDecoder: JsonDecode_Decoder<e>,\n    _ fDecoder: JsonDecode_Decoder<f>,\n    _ gDecoder: JsonDecode_Decoder<g>,\n    _ hDecoder: JsonDecode_Decoder<h>\n)\n    -> JsonDecode_Decoder<combined>\n{\n    JsonDecode_Decoder(decode: { toDecode in\n        Result_map8(\n            combine,\n            aDecoder.decode(toDecode),\n            bDecoder.decode(toDecode),\n            cDecoder.decode(toDecode),\n            dDecoder.decode(toDecode),\n            eDecoder.decode(toDecode),\n            fDecoder.decode(toDecode),\n            gDecoder.decode(toDecode),\n            hDecoder.decode(toDecode)\n        )\n    })\n}\n\n@Sendable public static func JsonDecode_oneOf<value: Sendable>(\n    _ options: List_List<JsonDecode_Decoder<value>>\n)\n    -> JsonDecode_Decoder<value>\n{\n    JsonDecode_Decoder(decode: { toDecode in\n        var optionDecodeErrors: [JsonDecode_Error] = []\n        for nextOptionDecoder in options {\n            switch nextOptionDecoder.decode(toDecode) {\n            case let .Result_Ok(value): return .Result_Ok(value)\n            case let .Result_Err(optionDecodeError):\n                optionDecodeErrors.append(optionDecodeError)\n            }\n        }\n        return .Result_Err(.JsonDecode_OneOf(Array_toList(optionDecodeErrors)))\n    })\n}\n\n@Sendable public static func JsonDecode_null<a: Sendable>(_ value: a) -> JsonDecode_Decoder<a> {\n    JsonDecode_Decoder(decode: { toDecode in\n        switch toDecode.value {\n        case _ as NSNull:\n            .Result_Ok(value)\n        case _:\n            .Result_Err(\n                .JsonDecode_Failure(\"Expecting NULL\", toDecode)\n            )\n        }\n    })\n}\npublic static let JsonDecode_bool: JsonDecode_Decoder<Bool> =\n    JsonDecode_Decoder(decode: { toDecode in\n        switch toDecode.value {\n        case let nsNumber as NSNumber:\n            // https://stackoverflow.com/questions/30215680/is-there-a-correct-way-to-determine-that-an-nsnumber-is-derived-from-a-bool-usin\n            if CFGetTypeID(nsNumber) == CFBooleanGetTypeID() {\n                .Result_Ok(nsNumber.boolValue)\n            } else {\n                .Result_Err(\n                    .JsonDecode_Failure(\"Expecting a BOOL\", toDecode)\n                )\n            }\n        case _:\n            .Result_Err(\n                .JsonDecode_Failure(\"Expecting a BOOL\", toDecode)\n            )\n        }\n    })\npublic static let JsonDecode_int: JsonDecode_Decoder<Double> =\n    JsonDecode_Decoder(decode: { toDecode in\n        switch toDecode.value {\n        case let nsNumber as NSNumber:\n            switch Int(exactly: nsNumber.doubleValue) {\n            case .some(_): .Result_Ok(nsNumber.doubleValue)\n            case .none:\n                .Result_Err(\n                    .JsonDecode_Failure(\"Expecting an INT\", toDecode)\n                )\n            }\n        case _:\n            .Result_Err(\n                .JsonDecode_Failure(\"Expecting an INT\", toDecode)\n            )\n        }\n    })\npublic static let JsonDecode_float: JsonDecode_Decoder<Double> =\n    JsonDecode_Decoder(decode: { toDecode in\n        switch toDecode.value {\n        case let nsNumber as NSNumber:\n            .Result_Ok(nsNumber.doubleValue)\n        // non-standard\n        case let double as Double:\n            .Result_Ok(double)\n        case _:\n            .Result_Err(\n                .JsonDecode_Failure(\"Expecting a NUMBER\", toDecode)\n            )\n        }\n    })\npublic static let JsonDecode_string: JsonDecode_Decoder<String> =\n    JsonDecode_Decoder(decode: { toDecode in\n        switch toDecode.value {\n        case let nsString as NSString:\n            .Result_Ok(String(nsString))\n        // non-standard\n        case let string as String:\n            .Result_Ok(String(string))\n        case _:\n            .Result_Err(\n                .JsonDecode_Failure(\"Expecting a STRING\", toDecode)\n            )\n        }\n    })\n\n@Sendable public static func JsonDecode_field<value: Sendable>(\n    _ fieldName: String,\n    _ valueDecoder: JsonDecode_Decoder<value>\n) -> JsonDecode_Decoder<value> {\n    JsonDecode_Decoder(decode: { toDecode in\n        Result_andThen(\n            valueDecoder.decode,\n            JsonDecode_fieldValue(fieldName).decode(toDecode)\n        )\n    })\n}\nstatic func JsonDecode_fieldValue(_ fieldName: String)\n    -> JsonDecode_Decoder<JsonDecode_Value>\n{\n    JsonDecode_Decoder(decode: { toDecode in\n        switch toDecode.value {\n        case let dictToDecode as NSDictionary:\n            switch dictToDecode.value(forKey: fieldName) {\n            case let .some(valueJson):\n                .Result_Ok(JsonDecode_Value(value: valueJson))\n            case .none:\n                .Result_Err(\n                    .JsonDecode_Failure(\n                        \"Expecting an OBJECT with a field named '\\(fieldName)'\",\n                        toDecode\n                    )\n                )\n            }\n        case _:\n            .Result_Err(\n                .JsonDecode_Failure(\n                    \"Expecting an OBJECT with a field named '\\(fieldName)'\",\n                    toDecode\n                )\n            )\n        }\n    })\n}\n\n@Sendable public static func JsonDecode_at<value: Sendable>(\n    _ fieldNames: List_List<String>,\n    _ valueDecoder: JsonDecode_Decoder<value>\n) -> JsonDecode_Decoder<value> {\n    JsonDecode_Decoder(decode: { toDecode in\n        var successfullyDecodedFieldNames: [String] = []\n        var remainingToDecode: JsonDecode_Value = toDecode\n        for nextFieldName in fieldNames {\n            switch JsonDecode_fieldValue(nextFieldName).decode(remainingToDecode) {\n            case let .Result_Ok(fieldValueJson):\n                remainingToDecode = fieldValueJson\n                successfullyDecodedFieldNames.append(nextFieldName)\n            case let .Result_Err(fieldValueDecodeError):\n                return .Result_Err(\n                    successfullyDecodedFieldNames.reduce(\n                        fieldValueDecodeError,\n                        { soFar, fieldName in\n                            .JsonDecode_Field(fieldName, soFar)\n                        }\n                    )\n                )\n            }\n        }\n        return valueDecoder.decode(remainingToDecode)\n    })\n}\n@Sendable public static func JsonDecode_dict<value: Sendable>(\n    _ valueDecoder: JsonDecode_Decoder<value>\n)\n    -> JsonDecode_Decoder<[String: value]>\n{\n    JsonDecode_Decoder(decode: { toDecode in\n        switch toDecode.value {\n        case let dictToDecode as NSDictionary:\n            var decodedDictionary: [String: value] = Dictionary()\n            for entryToDecode in dictToDecode {\n                switch JsonDecode_string.decode(JsonDecode_Value(value: entryToDecode.key)) {\n                case let .Result_Ok(keyToDecode):\n                    switch valueDecoder.decode(JsonDecode_Value(value: entryToDecode.value)) {\n                    case let .Result_Err(error):\n                        return .Result_Err(.JsonDecode_Field(keyToDecode, error))\n                    case let .Result_Ok(decodedValue):\n                        decodedDictionary[keyToDecode] = decodedValue\n                    }\n                case .Result_Err(_):\n                    return .Result_Err(\n                        .JsonDecode_Failure(\n                            \"Expecting an OBJECT with STRING keys\",\n                            toDecode\n                        )\n                    )\n                }\n            }\n            return .Result_Ok(decodedDictionary)\n        case _:\n            return .Result_Err(\n                .JsonDecode_Failure(\"Expecting an OBJECT\", toDecode)\n            )\n        }\n    })\n}\n@Sendable public static func JsonDecode_keyValuePairs<value: Sendable>(\n    _ valueDecoder: JsonDecode_Decoder<value>\n)\n    -> JsonDecode_Decoder<List_List<Tuple<String, value>>>\n{\n    JsonDecode_map(Dict_toList, JsonDecode_dict(valueDecoder))\n}\n@Sendable public static func JsonDecode_array<a: Sendable>(\n    _ elementDecoder: JsonDecode_Decoder<a>\n)\n    -> JsonDecode_Decoder<[a]>\n{\n    JsonDecode_Decoder(decode: { toDecode in\n        switch toDecode.value {\n        case let arrayToDecode as NSArray:\n            var decodedArray: [a] = []\n            decodedArray.reserveCapacity(arrayToDecode.count)\n            for (index, elementToDecode) in arrayToDecode.enumerated() {\n                switch elementDecoder.decode(JsonDecode_Value(value: elementToDecode)) {\n                case let .Result_Err(error):\n                    return .Result_Err(.JsonDecode_Index(Double(index), error))\n                case let .Result_Ok(elementDecoded):\n                    decodedArray.append(elementDecoded)\n                }\n            }\n            return .Result_Ok(decodedArray)\n        case _:\n            return .Result_Err(\n                .JsonDecode_Failure(\"Expecting an ARRAY\", toDecode)\n            )\n        }\n    })\n}\n@Sendable public static func JsonDecode_index<a: Sendable>(\n    _ indexAsDouble: Double,\n    _ elementDecoder: JsonDecode_Decoder<a>\n)\n    -> JsonDecode_Decoder<a>\n{\n    JsonDecode_Decoder(decode: { toDecode in\n        switch toDecode.value {\n        case let arrayToDecode as NSArray:\n            let index: Int = Int(indexAsDouble)\n            return if index >= 0 && index < arrayToDecode.count {\n                switch elementDecoder.decode(JsonDecode_Value(value: arrayToDecode[index])) {\n                case let .Result_Err(error):\n                    .Result_Err(.JsonDecode_Index(indexAsDouble, error))\n                case let .Result_Ok(elementDecoded):\n                    .Result_Ok(elementDecoded)\n                }\n            } else {\n                .Result_Err(\n                    .JsonDecode_Failure(\n                        \"Expecting an ARRAY with an index [\\(String(index))]\",\n                        toDecode\n                    )\n                )\n            }\n        case _:\n            return .Result_Err(\n                .JsonDecode_Failure(\"Expecting an ARRAY\", toDecode)\n            )\n        }\n    })\n}\n@Sendable public static func JsonDecode_list<a: Sendable>(\n    _ elementDecoder: JsonDecode_Decoder<a>\n)\n    -> JsonDecode_Decoder<List_List<a>>\n{\n    JsonDecode_Decoder(decode: { toDecode in\n        switch toDecode.value {\n        case let arrayToDecode as NSArray:\n            var decodedList: List_List<a> = .List_Empty\n            for (index, elementToDecode) in arrayToDecode.enumerated().reversed() {\n                switch elementDecoder.decode(JsonDecode_Value(value: elementToDecode)) {\n                case let .Result_Err(error):\n                    return .Result_Err(.JsonDecode_Index(Double(index), error))\n                case let .Result_Ok(elementDecoded):\n                    decodedList = .List_Cons(elementDecoded, decodedList)\n                }\n            }\n            return .Result_Ok(decodedList)\n        case _:\n            return .Result_Err(\n                .JsonDecode_Failure(\"Expecting an ARRAY\", toDecode)\n            )\n        }\n    })\n}\n@Sendable public static func JsonDecode_oneOrMore<a: Sendable, combined: Sendable>(\n    _ combineHeadTail: @escaping @Sendable (a) -> (List_List<a>) -> combined,\n    _ elementDecoder: JsonDecode_Decoder<a>\n)\n    -> JsonDecode_Decoder<combined>\n{\n    JsonDecode_map2(\n        combineHeadTail,\n        elementDecoder,\n        JsonDecode_list(elementDecoder)\n    )\n}\n@Sendable public static func JsonDecode_maybe<a: Sendable>(\n    _ valueDecoder: JsonDecode_Decoder<a>\n)\n    -> JsonDecode_Decoder<Maybe_Maybe<a>>\n{\n    JsonDecode_Decoder(decode: { toDecode in\n        switch valueDecoder.decode(toDecode) {\n        case let .Result_Ok(value):\n            .Result_Ok(.Maybe_Just(value))\n        case .Result_Err(_):\n            .Result_Ok(.Maybe_Nothing)\n        }\n    })\n}\n@Sendable public static func JsonDecode_nullable<a>(_ valueDecoder: JsonDecode_Decoder<a>)\n    -> JsonDecode_Decoder<Maybe_Maybe<a>>\n{\n    JsonDecode_Decoder(decode: { toDecode in\n        switch JsonDecode_null(()).decode(toDecode) {\n        case .Result_Ok(()):\n            .Result_Ok(.Maybe_Nothing)\n        case let .Result_Err(nullDecodeError):\n            switch valueDecoder.decode(toDecode) {\n            case let .Result_Ok(value):\n                .Result_Ok(.Maybe_Just(value))\n            case let .Result_Err(valueDecodeError):\n                .Result_Err(\n                    .JsonDecode_OneOf(\n                        .List_Cons(nullDecodeError, .List_Cons(valueDecodeError, .List_Empty)))\n                )\n            }\n        }\n    })\n}\n\nstatic func indent(_ str: String) -> String {\n    str.split(separator: \"\\n\").joined(separator: \"\\n    \")\n}\n@Sendable public static func JsonDecode_errorToString(_ error: JsonDecode_Error) -> String {\n    JsonDecode_errorToStringHelp(error, [])\n}\nstatic func JsonDecode_errorToStringHelp(\n    _ error: JsonDecode_Error,\n    _ context: [String]\n)\n    -> String\n{\n    switch error {\n    case let .JsonDecode_Field(f, err):\n        let isSimple: Bool =\n            switch String_uncons(f) {\n            case .Maybe_Nothing: false\n            case let .Maybe_Just(.Tuple(head, rest)):\n                Char_isAlpha(head) && rest.unicodeScalars.allSatisfy(Char_isAlphaNum)\n            }\n        let fieldName: String =\n            if isSimple { \".\\(f)\" } else { \"['\\(f)']\" }\n        return JsonDecode_errorToStringHelp(err, Array_push(fieldName, context))\n    case let .JsonDecode_Index(index, err):\n        let indexName: String = \"[\\(String(Int(index)))]\"\n        return JsonDecode_errorToStringHelp(err, Array_push(indexName, context))\n    case let .JsonDecode_OneOf(errors):\n        switch errors {\n        case .List_Empty:\n            return if context.isEmpty {\n                \"Ran into a Json.Decode.oneOf with no possibilities!\"\n            } else {\n                \"Ran into a Json.Decode.oneOf with no possibilities at json\\(context.joined())\"\n            }\n        case let .List_Cons(err, .List_Empty):\n            return JsonDecode_errorToStringHelp(err, context)\n        case _:\n            let starter: String =\n                if context.isEmpty {\n                    \"Json.Decode.oneOf\"\n                } else {\n                    \"The Json.Decode.oneOf at json\\(context.joined())\"\n                }\n            let introduction: String =\n                \"\\(starter) failed in the following \\(String(Int(List_length(errors)))) ways:\"\n            return String_join(\n                \"\\n\\n\",\n                .List_Cons(\n                    introduction,\n                    List_indexedMap(\n                        { (i: Double) in\n                            { (error: JsonDecode_Error) in\n                                \"\\n\\n(\\(String(Int(i + 1)))) \\(indent(JsonDecode_errorToStringHelp(error, [])))\"\n                            }\n                        },\n                        errors\n                    )\n                )\n            )\n        }\n    case let .JsonDecode_Failure(msg, json):\n        let introduction: String =\n            if context.isEmpty {\n                \"Problem with the given value:\\n\\n\"\n            } else {\n                \"Problem with the value at json\\(context.joined()):\\n\\n    \"\n            }\n        return \"\\(introduction)\\(indent(JsonEncode_encode(4, json)))\\n\\n\\(msg)\"\n    }\n}\n\npublic typealias MathVector2_Vec2 = SIMD2<Double>\npublic typealias MathVector3_Vec3 = SIMD3<Double>\npublic typealias MathVector4_Vec4 = SIMD4<Double>\n\n@Sendable public static func MathVector2_vec2(_ x: Double, _ y: Double) -> MathVector2_Vec2 {\n    SIMD2(x, y)\n}\npublic enum Generated_x_y<x: Sendable, y: Sendable>: Sendable {\n    case Record(x: x, y: y)\n    var x: x {\n        switch self {\n        case let .Record(result, _): result\n        }\n    }\n    var y: y {\n        switch self {\n        case let .Record(_, result): result\n        }\n    }\n}\n@Sendable public static func MathVector2_fromRecord(_ vec2: Generated_x_y<Double, Double>)\n    -> MathVector2_Vec2\n{\n    SIMD2(x: vec2.x, y: vec2.y)\n}\n@Sendable public static func MathVector2_toRecord(_ vec2: MathVector2_Vec2)\n    -> Generated_x_y<Double, Double>\n{\n    .Record(x: vec2.x, y: vec2.y)\n}\n@Sendable public static func MathVector2_getX(_ vec2: MathVector2_Vec2) -> Double {\n    vec2.x\n}\n@Sendable public static func MathVector2_getY(_ vec2: MathVector2_Vec2) -> Double {\n    vec2.y\n}\n@Sendable public static func MathVector2_setX(_ newX: Double, _ vec2: MathVector2_Vec2)\n    -> MathVector2_Vec2\n{\n    var vec2Mutable: MathVector2_Vec2 = vec2\n    vec2Mutable.x = newX\n    return vec2Mutable\n}\n@Sendable public static func MathVector2_setY(_ newY: Double, _ vec2: MathVector2_Vec2)\n    -> MathVector2_Vec2\n{\n    var vec2Mutable: MathVector2_Vec2 = vec2\n    vec2Mutable.y = newY\n    return vec2Mutable\n}\n@Sendable public static func MathVector2_add(_ a: MathVector2_Vec2, _ b: MathVector2_Vec2)\n    -> MathVector2_Vec2\n{\n    a + b\n}\n@Sendable public static func MathVector2_sub(_ a: MathVector2_Vec2, _ b: MathVector2_Vec2)\n    -> MathVector2_Vec2\n{\n    a - b\n}\n@Sendable public static func MathVector2_negate(_ vec2: MathVector2_Vec2) -> MathVector2_Vec2 {\n    -vec2\n}\n@Sendable public static func MathVector2_scale(_ factor: Double, _ vec2: MathVector2_Vec2)\n    -> MathVector2_Vec2\n{\n    vec2 * factor\n}\n@Sendable public static func MathVector2_dot(_ a: MathVector2_Vec2, _ b: MathVector2_Vec2)\n    -> Double\n{\n    a.x * b.x + a.y * b.y\n}\n@Sendable public static func MathVector2_normalize(_ vec2: MathVector2_Vec2) -> MathVector2_Vec2\n{\n    vec2 / MathVector2_length(vec2)\n    // alternative: vec2 * vec2 / MathVector2_lengthSquared(vec2)\n}\n@Sendable public static func MathVector2_direction(_ a: MathVector2_Vec2, _ b: MathVector2_Vec2)\n    -> MathVector2_Vec2\n{\n    MathVector2_normalize(a - b)\n}\n@Sendable public static func MathVector2_length(_ vec2: MathVector2_Vec2) -> Double {\n    sqrt(vec2.x * vec2.x + vec2.y + vec2.y)\n}\n@Sendable public static func MathVector2_lengthSquared(_ vec2: MathVector2_Vec2) -> Double {\n    vec2.x * vec2.x + vec2.y + vec2.y\n}\n@Sendable public static func MathVector2_distance(_ a: MathVector2_Vec2, _ b: MathVector2_Vec2)\n    -> Double\n{\n    MathVector2_length(a - b)\n}\n@Sendable public static func MathVector2_distanceSquared(\n    _ a: MathVector2_Vec2, _ b: MathVector2_Vec2\n) -> Double {\n    MathVector2_lengthSquared(a - b)\n}\n\npublic static let MathVector3_i: MathVector3_Vec3 = SIMD3(1, 0, 0)\npublic static let MathVector3_j: MathVector3_Vec3 = SIMD3(0, 1, 0)\npublic static let MathVector3_k: MathVector3_Vec3 = SIMD3(0, 0, 1)\n\n@Sendable public static func MathVector3_vec3(_ x: Double, _ y: Double, _ z: Double)\n    -> MathVector3_Vec3\n{\n    SIMD3(x, y, z)\n}\npublic enum Generated_x_y_z<x: Sendable, y: Sendable, z: Sendable>: Sendable {\n    case Record(x: x, y: y, z: z)\n    var x: x {\n        switch self {\n        case let .Record(result, _, _): result\n        }\n    }\n    var y: y {\n        switch self {\n        case let .Record(_, result, _): result\n        }\n    }\n    var z: z {\n        switch self {\n        case let .Record(_, _, result): result\n        }\n    }\n}\n@Sendable public static func MathVector3_fromRecord(\n    _ vec3: Generated_x_y_z<Double, Double, Double>\n)\n    -> MathVector3_Vec3\n{\n    SIMD3(x: vec3.x, y: vec3.y, z: vec3.z)\n}\n@Sendable public static func MathVector3_toRecord(_ vec3: MathVector3_Vec3)\n    -> Generated_x_y_z<Double, Double, Double>\n{\n    .Record(x: vec3.x, y: vec3.y, z: vec3.z)\n}\n@Sendable public static func MathVector3_getX(_ vec3: MathVector3_Vec3) -> Double {\n    vec3.x\n}\n@Sendable public static func MathVector3_getY(_ vec3: MathVector3_Vec3) -> Double {\n    vec3.y\n}\n@Sendable public static func MathVector3_getZ(_ vec3: MathVector3_Vec3) -> Double {\n    vec3.z\n}\n@Sendable public static func MathVector3_setX(_ newX: Double) -> (MathVector3_Vec3) ->\n    MathVector3_Vec3\n{\n    { vec3 in\n        var vec3Mutable: MathVector3_Vec3 = vec3\n        vec3Mutable.x = newX\n        return vec3Mutable\n    }\n}\n@Sendable public static func MathVector3_setY(_ newY: Double, _ vec3: MathVector3_Vec3)\n    -> MathVector3_Vec3\n{\n    var vec3Mutable: MathVector3_Vec3 = vec3\n    vec3Mutable.y = newY\n    return vec3Mutable\n}\n@Sendable public static func MathVector3_setZ(_ newZ: Double, _ vec3: MathVector3_Vec3)\n    -> MathVector3_Vec3\n{\n    var vec3Mutable: MathVector3_Vec3 = vec3\n    vec3Mutable.z = newZ\n    return vec3Mutable\n}\n@Sendable public static func MathVector3_add(_ a: MathVector3_Vec3, _ b: MathVector3_Vec3)\n    -> MathVector3_Vec3\n{\n    a + b\n}\n@Sendable public static func MathVector3_sub(_ a: MathVector3_Vec3, _ b: MathVector3_Vec3)\n    -> MathVector3_Vec3\n{\n    a - b\n}\n@Sendable public static func MathVector3_negate(_ vec3: MathVector3_Vec3) -> MathVector3_Vec3 {\n    -vec3\n}\n@Sendable public static func MathVector3_scale(_ factor: Double, _ vec3: MathVector3_Vec3)\n    -> MathVector3_Vec3\n{\n    vec3 * factor\n}\n@Sendable public static func MathVector3_dot(_ a: MathVector3_Vec3, _ b: MathVector3_Vec3)\n    -> Double\n{\n    a.x * b.x + a.y * b.y + a.z * b.z\n}\n@Sendable public static func MathVector3_cross(_ a: MathVector3_Vec3, _ b: MathVector3_Vec3)\n    -> MathVector3_Vec3\n{\n    SIMD3(\n        a.y * b.z - a.z * b.y,\n        a.z * b.x - a.x * b.z,\n        a.x * b.y - a.y * b.x\n    )\n}\n@Sendable public static func MathVector3_normalize(_ vec3: MathVector3_Vec3) -> MathVector3_Vec3\n{\n    vec3 / MathVector3_length(vec3)\n    // alternative: vec3 * vec3 / MathVector3_lengthSquared(vec3)\n}\n@Sendable public static func MathVector3_direction(_ a: MathVector3_Vec3, _ b: MathVector3_Vec3)\n    -> MathVector3_Vec3\n{\n    MathVector3_normalize(a - b)\n}\n@Sendable public static func MathVector3_length(_ vec3: MathVector3_Vec3) -> Double {\n    sqrt(vec3.x * vec3.x + vec3.y + vec3.y + vec3.z * vec3.z)\n}\n@Sendable public static func MathVector3_lengthSquared(_ vec3: MathVector3_Vec3) -> Double {\n    vec3.x * vec3.x + vec3.y + vec3.y + vec3.z * vec3.z\n}\n@Sendable public static func MathVector3_distance(_ a: MathVector3_Vec3, _ b: MathVector3_Vec3)\n    -> Double\n{\n    MathVector3_length(a - b)\n}\n@Sendable public static func MathVector3_distanceSquared(\n    _ a: MathVector3_Vec3,\n    _ b: MathVector3_Vec3\n) -> Double {\n    MathVector3_lengthSquared(a - b)\n}\n\n@Sendable public static func MathVector4_vec4(\n    _ x: Double,\n    _ y: Double,\n    _ z: Double,\n    _ w: Double\n)\n    -> MathVector4_Vec4\n{\n    SIMD4(x, y, z, w)\n}\npublic enum Generated_w_x_y_z<x: Sendable, y: Sendable, z: Sendable, w: Sendable>: Sendable {\n    case Record(w: w, x: x, y: y, z: z)\n    var w: w {\n        switch self {\n        case let .Record(result, _, _, _): result\n        }\n    }\n    var x: x {\n        switch self {\n        case let .Record(_, result, _, _): result\n        }\n    }\n    var y: y {\n        switch self {\n        case let .Record(_, _, result, _): result\n        }\n    }\n    var z: z {\n        switch self {\n        case let .Record(_, _, _, result): result\n        }\n    }\n}\n@Sendable public static func MathVector4_fromRecord(\n    _ vec4: Generated_w_x_y_z<Double, Double, Double, Double>\n)\n    -> MathVector4_Vec4\n{\n    SIMD4(x: vec4.x, y: vec4.y, z: vec4.z, w: vec4.w)\n}\n@Sendable public static func MathVector4_toRecord(_ vec4: MathVector4_Vec4)\n    -> Generated_w_x_y_z<Double, Double, Double, Double>\n{\n    .Record(w: vec4.w, x: vec4.x, y: vec4.y, z: vec4.z)\n}\n@Sendable public static func MathVector4_getX(_ vec4: MathVector4_Vec4) -> Double {\n    vec4.x\n}\n@Sendable public static func MathVector4_getY(_ vec4: MathVector4_Vec4) -> Double {\n    vec4.y\n}\n@Sendable public static func MathVector4_getZ(_ vec4: MathVector4_Vec4) -> Double {\n    vec4.z\n}\n@Sendable public static func MathVector4_getW(_ vec4: MathVector4_Vec4) -> Double {\n    vec4.w\n}\n@Sendable public static func MathVector4_setX(_ newX: Double, _ vec4: MathVector4_Vec4)\n    -> MathVector4_Vec4\n{\n    var vec4Mutable: MathVector4_Vec4 = vec4\n    vec4Mutable.x = newX\n    return vec4Mutable\n}\n@Sendable public static func MathVector4_setY(_ newY: Double, _ vec4: MathVector4_Vec4)\n    -> MathVector4_Vec4\n{\n    var vec4Mutable: MathVector4_Vec4 = vec4\n    vec4Mutable.y = newY\n    return vec4Mutable\n}\n@Sendable public static func MathVector4_setZ(_ newZ: Double, _ vec4: MathVector4_Vec4)\n    -> MathVector4_Vec4\n{\n    var vec4Mutable: MathVector4_Vec4 = vec4\n    vec4Mutable.z = newZ\n    return vec4Mutable\n}\n@Sendable public static func MathVector4_setW(_ newW: Double, _ vec4: MathVector4_Vec4)\n    -> MathVector4_Vec4\n{\n    var vec4Mutable: MathVector4_Vec4 = vec4\n    vec4Mutable.w = newW\n    return vec4Mutable\n}\n@Sendable public static func MathVector4_add(_ a: MathVector4_Vec4, _ b: MathVector4_Vec4)\n    -> MathVector4_Vec4\n{\n    a + b\n}\n@Sendable public static func MathVector4_sub(_ a: MathVector4_Vec4, _ b: MathVector4_Vec4)\n    -> MathVector4_Vec4\n{\n    a - b\n}\n@Sendable public static func MathVector4_negate(_ vec4: MathVector4_Vec4) -> MathVector4_Vec4 {\n    -vec4\n}\n@Sendable public static func MathVector4_scale(_ factor: Double, _ vec4: MathVector4_Vec4)\n    -> MathVector4_Vec4\n{\n    vec4 * factor\n}\n@Sendable public static func MathVector4_dot(_ a: MathVector4_Vec4, _ b: MathVector4_Vec4)\n    -> Double\n{\n    a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w\n}\n@Sendable public static func MathVector4_normalize(_ vec4: MathVector4_Vec4) -> MathVector4_Vec4\n{\n    vec4 / MathVector4_length(vec4)\n    // alternative: vec4 * vec4 / MathVector4_lengthSquared(vec4)\n}\n@Sendable public static func MathVector4_direction(_ a: MathVector4_Vec4, _ b: MathVector4_Vec4)\n    -> MathVector4_Vec4\n{\n    MathVector4_normalize(a - b)\n}\n@Sendable public static func MathVector4_length(_ vec4: MathVector4_Vec4) -> Double {\n    sqrt(vec4.x * vec4.x + vec4.y + vec4.y + vec4.z * vec4.z + vec4.w * vec4.w)\n}\n@Sendable public static func MathVector4_lengthSquared(_ vec4: MathVector4_Vec4) -> Double {\n    vec4.x * vec4.x + vec4.y + vec4.y + vec4.z * vec4.z + vec4.w * vec4.w\n}\n@Sendable public static func MathVector4_distance(_ a: MathVector4_Vec4, _ b: MathVector4_Vec4)\n    -> Double\n{\n    MathVector4_length(a - b)\n}\n@Sendable public static func MathVector4_distanceSquared(\n    _ a: MathVector4_Vec4,\n    _ b: MathVector4_Vec4\n) -> Double {\n    MathVector4_lengthSquared(a - b)\n}\n\nprivate static func stringUtf16CodePointAt(_ string: String, _ offset: Int)\n    -> Unicode.UTF16.CodeUnit\n{\n    string.utf16[\n        string.utf16.index(\n            string.utf16.startIndex,\n            offsetBy: offset\n        )\n    ]\n}\nprivate static func surrogatePairToUnicodeScalar(\n    _ left: Unicode.UTF16.CodeUnit,\n    _ right: Unicode.UTF16.CodeUnit\n) -> UnicodeScalar? {\n    UnicodeScalar(\n        String(\n            decoding: [left, right],\n            as: Unicode.UTF16.self\n        )\n    )\n}\n\n@Sendable public static func ElmKernelParser_isSubString(\n    _ smallString: String,\n    _ offsetOriginal: Double,\n    _ rowOriginal: Double,\n    _ colOriginal: Double,\n    _ bigString: String\n)\n    -> Triple<Double, Double, Double>\n{\n    let smallLength: Int = smallString.utf16.count\n    var row: Int = Int(rowOriginal)\n    var col: Int = Int(colOriginal)\n    var offset: Int = Int(offsetOriginal)\n    var isGood: Bool = Int(offset) + smallLength <= bigString.utf16.count\n    var i: Int = 0\n    while isGood && i < smallLength {\n        let code: Unicode.UTF16.CodeUnit =\n            stringUtf16CodePointAt(bigString, offset)\n        isGood =\n            stringUtf16CodePointAt(smallString, i)\n            == stringUtf16CodePointAt(bigString, offset)\n\n        if code == 0x000A /* \\n */ {\n            i = i + 1\n            row = row + 1\n            col = 1\n        } else {\n            col = col + 1\n            if Unicode.UTF16.isSurrogate(code) {\n                isGood =\n                    isGood\n                    && (stringUtf16CodePointAt(smallString, i + 1)\n                        == stringUtf16CodePointAt(bigString, offset + 1))\n                i = i + 2\n                offset = offset + 2\n            } else {\n                i = i + 1\n            }\n        }\n    }\n    return if isGood {\n        .Triple(Double(offset), Double(row), Double(col))\n    } else {\n        .Triple(-1, Double(row), Double(col))\n    }\n}\n\n@Sendable public static func ElmKernelParser_isSubChar(\n    _ predicate: (UnicodeScalar) -> Bool,\n    _ offset: Double,\n    _ string: String\n)\n    -> Double\n{\n    let offsetInt: Int = Int(offset)\n    return if string.utf16.count <= offsetInt {\n        -1\n    } else if Unicode.UTF16.isSurrogate(stringUtf16CodePointAt(string, offsetInt)) {\n        if predicate(\n            surrogatePairToUnicodeScalar(\n                stringUtf16CodePointAt(string, offsetInt),\n                stringUtf16CodePointAt(string, offsetInt + 1),\n            ) ?? \"\\0\"\n        ) {\n            offset + 2\n        } else {\n            -1\n        }\n    } else if predicate(\n        UnicodeScalar(stringUtf16CodePointAt(string, offsetInt)) ?? \"\\0\"\n    ) {\n        if stringUtf16CodePointAt(string, offsetInt) == 0x000A /* \\n */ {\n            -2\n        } else {\n            offset + 1\n        }\n    } else {\n        -1\n    }\n}\n\n@Sendable public static func ElmKernelParser_isAsciiCode(\n    _ code: Double,\n    _ offset: Double,\n    _ string: String\n) -> Bool {\n    Double(stringUtf16CodePointAt(string, Int(offset))) == code\n}\n\n@Sendable public static func ElmKernelParser_chompBase10(\n    _ offsetOriginal: Double,\n    _ string: String\n) -> Double {\n    var offset: Int = Int(offsetOriginal)\n    var foundNonBase10: Bool = false\n    while (offset < string.utf16.count) && !(foundNonBase10) {\n        let code: Unicode.UTF16.CodeUnit = stringUtf16CodePointAt(string, offset)\n        foundNonBase10 = !(code < 0x30 || 0x39 < code)\n        offset = offset + 1\n    }\n    return Double(offset)\n}\n\n@Sendable public static func ElmKernelParser_consumeBase(\n    _ baseAsDouble: Double,\n    _ offsetOriginal: Double,\n    _ string: String\n) -> Tuple<Double, Double> {\n    let base: Int = Int(baseAsDouble)\n    var offset: Int = Int(offsetOriginal)\n    var total: Int = 0\n    var foundNonBase: Bool = false\n    while (offset < string.utf16.count) && !(foundNonBase) {\n        let digit: Int = Int(stringUtf16CodePointAt(string, offset) - 0x30)\n        if digit < 0 || base <= digit {\n            foundNonBase = true\n        } else {\n            total = base * total + digit\n            offset = offset + 1\n        }\n    }\n    return .Tuple(Double(offset), Double(total))\n}\n\n@Sendable public static func ElmKernelParser_consumeBase16(\n    _ offsetOriginal: Double,\n    _ string: String\n) -> Tuple<Double, Double> {\n    var offset: Int = Int(offsetOriginal)\n    var total: Int = 0\n    var foundNonBase16: Bool = false\n    while (offset < string.utf16.count) && !(foundNonBase16) {\n        let code: Unicode.UTF16.CodeUnit = stringUtf16CodePointAt(string, offset)\n        if 0x30 <= code && code <= 0x39 {\n            total = 16 * total + Int(code) - 0x30\n            offset = offset + 1\n        } else if 0x41 <= code && code <= 0x46 {\n            total = 16 * total + Int(code) - 55\n            offset = offset + 1\n        } else if 0x61 <= code && code <= 0x66 {\n            total = 16 * total + Int(code) - 87\n            offset = offset + 1\n        } else {\n            foundNonBase16 = true\n        }\n    }\n    return .Tuple(Double(offset), Double(total))\n}\n\n@Sendable public static func ElmKernelParser_findSubString(\n    _ smallString: String,\n    _ offsetOriginalAsDouble: Double,\n    _ rowOriginal: Double,\n    _ colOriginal: Double,\n    _ bigString: String\n)\n    -> Triple<Double, Double, Double>\n{\n    let offsetOriginal: Int = Int(offsetOriginalAsDouble)\n    let bigStringStartingWithOffsetOriginal: Substring =\n        Substring(\n            bigString.utf16[\n                bigString.utf16.index(\n                    bigString.utf16.startIndex,\n                    offsetBy: offsetOriginal\n                )...\n            ]\n        )\n    let foundStartOffset: Int? =\n        switch bigStringStartingWithOffsetOriginal\n            .range(of: smallString)\n        {\n        case .none: .none\n        case let .some(foundRangeAfterOffsetOriginal):\n            offsetOriginal\n                + foundRangeAfterOffsetOriginal.lowerBound\n                .utf16Offset(in: bigStringStartingWithOffsetOriginal)\n        }\n    var row: Int = Int(rowOriginal)\n    var col: Int = Int(colOriginal)\n    var offset: Int = offsetOriginal\n    let foundEndOffsetOrBigStringEnd: Int =\n        switch foundStartOffset {\n        case .none: bigString.utf16.count\n        case let .some(foundIndexAfterOffsetOriginal):\n            foundIndexAfterOffsetOriginal\n                + smallString.utf16.count\n        }\n    while offset < foundEndOffsetOrBigStringEnd {\n        let code: Unicode.UTF16.CodeUnit =\n            stringUtf16CodePointAt(bigString, offset)\n        if code == 0x000A /* \\n */ {\n            offset = offset + 1\n            col = 1\n            row = row + 1\n        } else {\n            col = col + 1\n            offset =\n                if Unicode.UTF16.isSurrogate(code) {\n                    offset + 2\n                } else {\n                    offset + 1\n                }\n        }\n    }\n    let startOffsetOrNegative1ForNotFound: Double =\n        switch foundStartOffset {\n        case .none: -1.0\n        case let .some(startOffset): Double(startOffset)\n        }\n    return .Triple(\n        startOffsetOrNegative1ForNotFound, Double(row), Double(col)\n    )\n}\n\n@Sendable public static func VirtualDom_noJavaScriptUri(_ uri: String) -> String {\n    switch uri.wholeMatch(of: #/^\\s*j\\s*a\\s*v\\s*a\\s*s\\s*c\\s*r\\s*i\\s*p\\s*t\\s*:/#.ignoresCase()) {\n    case .some(_): \"\"\n    case .none:\n        uri\n    }\n}\n\n@Sendable public static func VirtualDom_noJavaScriptOrHtmlUri(_ uri: String) -> String {\n    switch uri.wholeMatch(\n        of:\n            #/^\\s*(j\\s*a\\s*v\\s*a\\s*s\\s*c\\s*r\\s*i\\s*p\\s*t\\s*:|d\\s*a\\s*t\\s*a\\s*:\\s*t\\s*e\\s*x\\s*t\\s*\\/\\s*h\\s*t\\s*m\\s*l\\s*(,|;))/#\n            .ignoresCase()\n    )\n    {\n    case .some(_): \"\"\n    case .none:\n        uri\n    }\n}\n\npublic enum Generated_message_preventDefault_stopPropagation<\n    message: Sendable, preventDefault: Sendable, stopPropagation: Sendable\n>: Sendable {\n    case Record(\n        message: message, preventDefault: preventDefault, stopPropagation: stopPropagation)\n    var message: message {\n        switch self {\n        case let .Record(result, _, _): result\n        }\n    }\n    var preventDefault: preventDefault {\n        switch self {\n        case let .Record(_, result, _): result\n        }\n    }\n    var stopPropagation: stopPropagation {\n        switch self {\n        case let .Record(_, _, result): result\n        }\n    }\n}\n\npublic typealias VirtualDom_CustomHandledEvent<event> =\n    Generated_message_preventDefault_stopPropagation<event, Bool, Bool>\n\npublic enum VirtualDom_Handler<event: Sendable>: Sendable {\n    case VirtualDom_Normal(JsonDecode_Decoder<event>)\n    case VirtualDom_MayStopPropagation(JsonDecode_Decoder<Tuple<event, Bool>>)\n    case VirtualDom_MayPreventDefault(JsonDecode_Decoder<Tuple<event, Bool>>)\n    case VirtualDom_Custom(JsonDecode_Decoder<VirtualDom_CustomHandledEvent<event>>)\n}\n\npublic indirect enum VirtualDom_Attribute<event: Sendable>: Sendable {\n    case VirtualDom_ModifierAttribute(\n        namespace: String?,\n        key: String,\n        value: String\n    )\n    case VirtualDom_ModifierStyle(key: String, value: String)\n    case VirtualDom_ModifierProperty(\n        key: String,\n        value: JsonDecode_Value\n    )\n    case VirtualDom_ModifierEventListener(\n        name: String,\n        handler: VirtualDom_Handler<event>\n    )\n}\n\npublic indirect enum VirtualDom_Node<event: Sendable>: Sendable {\n    case VirtualDom_Text(String)\n    case VirtualDom_Element(\n        tag: String,\n        namespace: String?,\n        subs: List_List<VirtualDom_Node<event>>,\n        modifiers: List_List<VirtualDom_Attribute<event>>\n    )\n    case VirtualDom_ElementKeyed(\n        tag: String,\n        namespace: String?,\n        subs: List_List<Tuple<String, VirtualDom_Node<event>>>,\n        modifiers: List_List<VirtualDom_Attribute<event>>\n    )\n    case VirtualDom_NodeLazy(\n        // to know when to construct:\n        // element-wise check for all pairs with typeErasedEq\n        keys: [any Equatable & Sendable],\n        construct: @Sendable () -> VirtualDom_Node<event>\n    )\n}\n\n@Sendable\npublic static func VirtualDom_customHandledEventMap<event: Sendable, eventMapped: Sendable>(\n    _ eventChange: (event) -> eventMapped,\n    _ handledEvent: VirtualDom_CustomHandledEvent<event>\n)\n    -> VirtualDom_CustomHandledEvent<eventMapped>\n{\n    .Record(\n        message: eventChange(handledEvent.message),\n        preventDefault: handledEvent.preventDefault,\n        stopPropagation: handledEvent.stopPropagation\n    )\n}\n\n@Sendable public static func VirtualDom_text<event>(_ string: String) -> VirtualDom_Node<event>\n{\n    .VirtualDom_Text(string)\n}\n\n@Sendable public static func VirtualDom_node<event>(\n    _ tag: String,\n    _ modifiers: List_List<VirtualDom_Attribute<event>>,\n    _ subs: List_List<VirtualDom_Node<event>>\n)\n    -> VirtualDom_Node<event>\n{\n    .VirtualDom_Element(\n        tag: tag,\n        namespace: .none,\n        subs: subs, modifiers: modifiers)\n}\n\n@Sendable public static func VirtualDom_nodeNS<event>(\n    namespace_: String,\n    _ tag: String,\n    _ modifiers: List_List<VirtualDom_Attribute<event>>,\n    _ subs: List_List<VirtualDom_Node<event>>\n)\n    -> VirtualDom_Node<event>\n{\n    .VirtualDom_Element(\n        tag: tag,\n        namespace: .some(namespace_),\n        subs: subs, modifiers: modifiers)\n}\n\n@Sendable public static func VirtualDom_KeyedNode<event>(\n    _ tag: String,\n    _ modifiers: List_List<VirtualDom_Attribute<event>>,\n    _ subs: List_List<Tuple<String, VirtualDom_Node<event>>>\n)\n    -> VirtualDom_Node<event>\n{\n    .VirtualDom_ElementKeyed(\n        tag: tag,\n        namespace: .none,\n        subs: subs, modifiers: modifiers)\n}\n\n@Sendable public static func VirtualDom_KeyedNodeNS<event>(\n    namespace_: String,\n    _ tag: String,\n    _ modifiers: List_List<VirtualDom_Attribute<event>>,\n    _ subs: List_List<Tuple<String, VirtualDom_Node<event>>>\n)\n    -> VirtualDom_Node<event>\n{\n    .VirtualDom_ElementKeyed(\n        tag: tag,\n        namespace: .some(namespace_),\n        subs: subs, modifiers: modifiers)\n}\n\n@Sendable public static func VirtualDom_style<event>(\n    _ key: String,\n    _ value: String\n)\n    -> VirtualDom_Attribute<event>\n{\n    .VirtualDom_ModifierStyle(\n        key: key,\n        value: value)\n}\n\n@Sendable public static func VirtualDom_property<event>(\n    _ key: String,\n    _ value: JsonDecode_Value\n)\n    -> VirtualDom_Attribute<event>\n{\n    .VirtualDom_ModifierProperty(\n        key: key,\n        value: value)\n}\n\n@Sendable public static func VirtualDom_attribute<event>(_ key: String, _ value: String)\n    -> VirtualDom_Attribute<event>\n{\n    .VirtualDom_ModifierAttribute(\n        namespace: .none,\n        key: key,\n        value: value)\n}\n\n@Sendable public static func VirtualDom_attributeNS<event>(\n    _ namespace_: String,\n    _ key: String,\n    _ value: String\n)\n    -> VirtualDom_Attribute<event>\n{\n    .VirtualDom_ModifierAttribute(\n        namespace: .some(namespace_),\n        key: key,\n        value: value)\n}\n@Sendable public static func VirtualDom_on<event>(\n    _ name: String,\n    _ handler: VirtualDom_Handler<event>\n)\n    -> VirtualDom_Attribute<event>\n{\n    .VirtualDom_ModifierEventListener(\n        name: name,\n        handler: handler)\n}\n\n@Sendable public static func VirtualDom_mapAttribute<event, eventMapped>(\n    _ eventChange: @escaping @Sendable (event) -> eventMapped,\n    _ modifier: VirtualDom_Attribute<event>\n)\n    -> VirtualDom_Attribute<eventMapped>\n{\n    switch modifier {\n    case let .VirtualDom_ModifierAttribute(namespace: namespace, key: key, value: value):\n        .VirtualDom_ModifierAttribute(namespace: namespace, key: key, value: value)\n    case let .VirtualDom_ModifierStyle(key: key, value: value):\n        .VirtualDom_ModifierStyle(key: key, value: value)\n    case let .VirtualDom_ModifierProperty(key: key, value: value):\n        .VirtualDom_ModifierProperty(key: key, value: value)\n    case let .VirtualDom_ModifierEventListener(name: name, handler: handler):\n        .VirtualDom_ModifierEventListener(\n            name: name,\n            handler: VirtualDom_handlerMap(eventChange, handler)\n        )\n    }\n}\nstatic func VirtualDom_handlerMap<event, eventMapped>(\n    _ eventChange: @escaping @Sendable (event) -> eventMapped,\n    _ handler: VirtualDom_Handler<event>\n)\n    -> VirtualDom_Handler<eventMapped>\n{\n    switch handler {\n    case let .VirtualDom_Normal(decoder):\n        .VirtualDom_Normal(JsonDecode_map(eventChange, decoder))\n    case let .VirtualDom_MayStopPropagation(decoder):\n        .VirtualDom_MayStopPropagation(\n            JsonDecode_map(\n                { decoded in\n                    .Tuple(eventChange(decoded.first), decoded.second)\n                },\n                decoder\n            )\n        )\n    case let .VirtualDom_MayPreventDefault(decoder):\n        .VirtualDom_MayPreventDefault(\n            JsonDecode_map(\n                { decoded in\n                    .Tuple(eventChange(decoded.first), decoded.second)\n                },\n                decoder\n            )\n        )\n    case let .VirtualDom_Custom(decoder):\n        .VirtualDom_Custom(\n            JsonDecode_map(\n                { custom in\n                    VirtualDom_customHandledEventMap(eventChange, custom)\n                },\n                decoder\n            )\n        )\n    }\n}\n\n@Sendable public static func VirtualDom_map<event, eventMapped>(\n    _ eventChange: @escaping @Sendable (event) -> eventMapped,\n    _ node: VirtualDom_Node<event>\n)\n    -> VirtualDom_Node<eventMapped>\n{\n    switch node {\n    case let .VirtualDom_Text(text): .VirtualDom_Text(text)\n    case let .VirtualDom_Element(\n        tag: tag, namespace: namespace, subs: subs, modifiers: modifiers):\n        .VirtualDom_Element(\n            tag: tag,\n            namespace: namespace,\n            subs: List_map({ sub in VirtualDom_map(eventChange, sub) }, subs),\n            modifiers:\n                List_map(\n                    { modifier in VirtualDom_mapAttribute(eventChange, modifier) },\n                    modifiers\n                )\n        )\n    case let .VirtualDom_ElementKeyed(\n        tag: tag, namespace: namespace, subs: subs, modifiers: modifiers):\n        .VirtualDom_ElementKeyed(\n            tag: tag,\n            namespace: namespace,\n            subs: List_map(\n                { sub in .Tuple(sub.first, VirtualDom_map(eventChange, sub.second)) },\n                subs),\n            modifiers:\n                List_map(\n                    { modifier in VirtualDom_mapAttribute(eventChange, modifier) },\n                    modifiers\n                )\n        )\n    case let .VirtualDom_NodeLazy(keys: keys, construct: construct):\n        .VirtualDom_NodeLazy(\n            keys: keys,\n            construct: { VirtualDom_map(eventChange, construct()) }\n        )\n    }\n}\n\n@Sendable public static func VirtualDom_lazy<a: Equatable & Sendable, event>(\n    _ construct: @escaping @Sendable (a) -> VirtualDom_Node<event>,\n    _ a: a\n)\n    -> VirtualDom_Node<event>\n{\n    .VirtualDom_NodeLazy(\n        keys: [a],\n        construct: { construct(a) }\n    )\n}\n@Sendable\npublic static func VirtualDom_lazy2<a: Equatable & Sendable, b: Equatable & Sendable, event>(\n    _ construct:\n        @escaping @Sendable (a) -> (b) ->\n        VirtualDom_Node<event>,\n    _ a: a,\n    _ b: b\n)\n    -> VirtualDom_Node<event>\n{\n    .VirtualDom_NodeLazy(\n        keys: [a, b],\n        construct: { construct(a)(b) }\n    )\n}\n@Sendable\npublic static func VirtualDom_lazy3<\n    a: Equatable & Sendable, b: Equatable & Sendable, c: Equatable & Sendable, event\n>(\n    _ construct:\n        @escaping @Sendable (a) -> (b) -> (c) ->\n        VirtualDom_Node<event>,\n    _ a: a,\n    _ b: b,\n    _ c: c\n)\n    -> VirtualDom_Node<event>\n{\n    .VirtualDom_NodeLazy(\n        keys: [a, b, c],\n        construct: { construct(a)(b)(c) }\n    )\n}\n@Sendable\npublic static func VirtualDom_lazy4<\n    a: Equatable & Sendable, b: Equatable & Sendable, c: Equatable & Sendable,\n    d: Equatable & Sendable, event\n>(\n    _ construct:\n        @escaping @Sendable (a) -> (b) -> (c) -> (d) ->\n        VirtualDom_Node<event>,\n    _ a: a,\n    _ b: b,\n    _ c: c,\n    _ d: d\n)\n    -> VirtualDom_Node<event>\n{\n    .VirtualDom_NodeLazy(\n        keys: [a, b, c, d],\n        construct: { construct(a)(b)(c)(d) }\n    )\n}\n@Sendable\npublic static func VirtualDom_lazy5<\n    a: Equatable & Sendable, b: Equatable & Sendable, c: Equatable & Sendable,\n    d: Equatable & Sendable, e: Equatable & Sendable, event\n>(\n    _ construct:\n        @escaping @Sendable (a) -> (b) -> (c) -> (d) -> (e) ->\n        VirtualDom_Node<event>,\n    _ a: a,\n    _ b: b,\n    _ c: c,\n    _ d: d,\n    _ e: e\n)\n    -> VirtualDom_Node<event>\n{\n    .VirtualDom_NodeLazy(\n        keys: [a, b, c, d, e],\n        construct: { construct(a)(b)(c)(d)(e) }\n    )\n}\n@Sendable\npublic static func VirtualDom_lazy6<\n    a: Equatable & Sendable, b: Equatable & Sendable, c: Equatable & Sendable,\n    d: Equatable & Sendable, e: Equatable & Sendable, f: Equatable & Sendable, event\n>(\n    _ construct:\n        @escaping @Sendable (a) -> (b) -> (c) -> (d) -> (e) -> (f) ->\n        VirtualDom_Node<event>,\n    _ a: a,\n    _ b: b,\n    _ c: c,\n    _ d: d,\n    _ e: e,\n    _ f: f\n)\n    -> VirtualDom_Node<event>\n{\n    .VirtualDom_NodeLazy(\n        keys: [a, b, c, d, e, f],\n        construct: { construct(a)(b)(c)(d)(e)(f) }\n    )\n}\n@Sendable\npublic static func VirtualDom_lazy7<\n    a: Equatable & Sendable, b: Equatable & Sendable, c: Equatable & Sendable,\n    d: Equatable & Sendable, e: Equatable & Sendable, f: Equatable & Sendable,\n    g: Equatable & Sendable, event\n>(\n    _ construct:\n        @escaping @Sendable (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> (g) ->\n        VirtualDom_Node<event>,\n    _ a: a,\n    _ b: b,\n    _ c: c,\n    _ d: d,\n    _ e: e,\n    _ f: f,\n    _ g: g\n)\n    -> VirtualDom_Node<event>\n{\n    .VirtualDom_NodeLazy(\n        keys: [a, b, c, d, e, f, g],\n        construct: { construct(a)(b)(c)(d)(e)(f)(g) }\n    )\n}\n@Sendable\npublic static func VirtualDom_lazy8<\n    a: Equatable & Sendable, b: Equatable & Sendable, c: Equatable & Sendable,\n    d: Equatable & Sendable, e: Equatable & Sendable, f: Equatable & Sendable,\n    g: Equatable & Sendable, h: Equatable & Sendable, event\n>(\n    _ construct:\n        @escaping @Sendable (a) -> (b) -> (c) -> (d) -> (e) -> (f) -> (g) -> (h) ->\n        VirtualDom_Node<event>,\n    _ a: a,\n    _ b: b,\n    _ c: c,\n    _ d: d,\n    _ e: e,\n    _ f: f,\n    _ g: g,\n    _ h: h\n)\n    -> VirtualDom_Node<event>\n{\n    .VirtualDom_NodeLazy(\n        keys: [a, b, c, d, e, f, g, h],\n        construct: { construct(a)(b)(c)(d)(e)(f)(g)(h) }\n    )\n}\n\npublic enum Random_Seed: Sendable, Equatable {\n    // FUTURE improvement: change to ints\n    // the first number is the state of the RNG and stepped with each random generation\n    // the second state is the increment which corresponds to an independent RNG\n    case Random_Seed(Double, Double)\n}\n\npublic struct Random_Generator<a: Sendable>: Sendable {\n    let step: @Sendable (Random_Seed) -> (a, Random_Seed)\n}\n\npublic static let Random_independentSeed: Random_Generator<Random_Seed> =\n    Random_Generator(step: { (seed0: Random_Seed) in\n        @Sendable func makeIndependentSeed(_ state: Double, _ b: Double, _ c: Double)\n            -> Random_Seed\n        {\n            // Although it probably doesn't hold water theoretically, xor two\n            // random numbers to make an increment less likely to be\n            // pathological. Then make sure that it's odd, which is required.\n            // Next make sure it is positive. Finally step it once before use.\n            Random_next(\n                .Random_Seed(\n                    state, Bitwise_shiftRightZfBy(0.0, Bitwise_or(1.0, Bitwise_xor(b, c)))\n                )\n            )\n        }\n        let gen: Random_Generator<Double> = Random_int(0.0, 4294967295.0)\n        return\n            Random_map3(\n                { state in { b in { c in makeIndependentSeed(state, b, c) } } },\n                gen,\n                gen,\n                gen\n            ).step(seed0)\n    })\n\npublic static let Random_maxInt: Double = 2147483647.0\npublic static let Random_minInt: Double = -2147483648.0\n\n@Sendable public static func Random_andThen<a: Sendable, b: Sendable>(\n    _ callback: @Sendable @escaping (a) -> Random_Generator<b>,\n    _ generator: Random_Generator<a>\n) -> Random_Generator<b> {\n    Random_Generator(step: { (seed: Random_Seed) in\n        let (result, newSeed) = generator.step(seed)\n        return callback(result).step(newSeed)\n    })\n}\n\n@Sendable public static func Random_constant<a: Sendable>(_ value: a) -> Random_Generator<a> {\n    Random_Generator(step: { (seed: Random_Seed) in (value, seed) })\n}\n\n@Sendable public static func Random_float(_ a: Double, _ b: Double) -> Random_Generator<Double>\n{\n    Random_Generator(step: { (seed0: Random_Seed) in\n        // Get 64 bits of randomness\n        let seed1: Random_Seed = Random_next(seed0)\n        let n1: Double = Random_peel(seed1)\n        let n0: Double = Random_peel(seed0)\n        // Get a uniformly distributed IEEE-754 double between 0.0 and 1.0\n        let lo: Double = Double(Bitwise_and(134217727.0, n1))\n        let hi: Double = Double(Bitwise_and(67108863.0, n0))\n        let val: Double =\n            // These magic constants are 2^27 and 2^53\n            Basics_fdiv((hi * 134217728.0) + lo, 9007199254740992.0)\n        // Scale it into our range\n        let range: Double = abs(b - a)\n        let scaled: Double = Basics_add(Basics_mul(val, range), a)\n        return (scaled, Random_next(seed1))\n    })\n}\n\n@Sendable public static func Random_getByWeight<a: Sendable>(\n    _ firstWeighted: Tuple<Double, a>,\n    _ others: List_List<Tuple<Double, a>>,\n    _ countdown: Double\n) -> a {\n    switch firstWeighted {\n    case let .Tuple(weight, value):\n        switch others {\n        case .List_Empty:\n            value\n        case let .List_Cons(second, otherOthers):\n            if countdown <= abs(weight) {\n                value\n            } else {\n                Random_getByWeight(second, otherOthers, countdown - abs(weight))\n            }\n        }\n    }\n}\n\n@Sendable public static func Random_initialSeed(_ x: Double) -> Random_Seed {\n    switch Random_next(.Random_Seed(0.0, 1013904223.0)) {\n    case let .Random_Seed(state1, incr):\n        let state2: Double =\n            Bitwise_shiftRightZfBy(0.0, Basics_add(state1, x))\n        return Random_next(.Random_Seed(state2, incr))\n    }\n}\n\n@Sendable public static func Random_int(_ a: Double, _ b: Double) -> Random_Generator<Double> {\n    Random_Generator(step: { (seed0: Random_Seed) in\n        let (lo, hi): (Double, Double) =\n            if a < b {\n                (a, b)\n            } else {\n                (b, a)\n            }\n        let range: Double = ((hi - lo) + 1.0)\n        // fast path for power of 2\n        if Bitwise_and(range - 1.0, range) == 0.0 {\n            return\n                (\n                    Bitwise_shiftRightZfBy(\n                        0.0,\n                        Bitwise_and(range - 1.0, Random_peel(seed0))\n                    )\n                        + lo,\n                    Random_next(seed0)\n                )\n        } else {\n            let threshold: Double =\n                // essentially: period % max\n                Bitwise_shiftRightZfBy(\n                    0.0,\n                    Basics_remainderBy(\n                        range,\n                        Bitwise_shiftRightZfBy(0.0, -range)\n                    )\n                )\n            @Sendable func accountForBias(_ seed: Random_Seed) -> (Double, Random_Seed) {\n                let x: Double = Random_peel(seed)\n                let seedN: Random_Seed = Random_next(seed)\n                return if x < threshold {\n                    // in practice this recurses almost never\n                    accountForBias(seedN)\n                } else {\n                    (Basics_remainderBy(range, x) + lo, seedN)\n                }\n            }\n            return accountForBias(seed0)\n        }\n    })\n}\n\n@Sendable public static func Random_lazy<a: Sendable>(\n    _ callback: @Sendable @escaping (Unit) -> Random_Generator<a>\n) -> Random_Generator<a> {\n    Random_Generator(step: { (seed: Random_Seed) in\n        callback(.Unit).step(seed)\n    })\n}\n\n@Sendable public static func Random_list<a: Sendable>(\n    _ n: Double, _ elementGenerator: Random_Generator<a>\n) -> Random_Generator<List_List<a>> {\n    let gen: @Sendable (Random_Seed) -> (a, Random_Seed) = elementGenerator.step\n    return Random_Generator(step: { (seed: Random_Seed) in\n        Random_listHelp(.List_Empty, n, gen, seed)\n    })\n}\n\n@Sendable public static func Random_listHelp<a: Sendable>(\n    _ revList: List_List<a>,\n    _ n: Double,\n    _ gen: @Sendable @escaping (Random_Seed) -> (a, Random_Seed),\n    _ seed: Random_Seed\n) -> (List_List<a>, Random_Seed) {\n    if Basics_lt(n, 1.0) {\n        return (revList, seed)\n    } else {\n        let (value, newSeed): (a, Random_Seed) = gen(seed)\n        return\n            Random_listHelp(\n                .List_Cons(value, revList),\n                n - 1.0,\n                gen,\n                newSeed\n            )\n    }\n}\n\n@Sendable public static func Random_map<a: Sendable, b: Sendable>(\n    _ valueChange: @Sendable @escaping (a) -> b,\n    _ generator: Random_Generator<a>\n) -> Random_Generator<b> {\n    Random_Generator(step: { (seed0: Random_Seed) in\n        let (value, seed1): (a, Random_Seed) = generator.step(seed0)\n        return (valueChange(value), seed1)\n    })\n}\n@Sendable\npublic static func Random_map2<\n    a: Sendable, b: Sendable, combined: Sendable\n>(\n    _ combine: @Sendable @escaping (a) -> (b) -> combined,\n    _ aGenerator: Random_Generator<a>,\n    _ bGenerator: Random_Generator<b>\n) -> Random_Generator<combined> {\n    Random_Generator(step: { (seed0: Random_Seed) in\n        let (a, seed1): (a, Random_Seed) = aGenerator.step(seed0)\n        let (b, seed2): (b, Random_Seed) = bGenerator.step(seed1)\n        return (combine(a)(b), seed2)\n    })\n}\n@Sendable\npublic static func Random_map3<\n    a: Sendable, b: Sendable, c: Sendable, combined: Sendable\n>(\n    _ combine: @Sendable @escaping (a) -> (b) -> (c) -> combined,\n    _ aGenerator: Random_Generator<a>,\n    _ bGenerator: Random_Generator<b>,\n    _ cGenerator: Random_Generator<c>\n) -> Random_Generator<combined> {\n    Random_Generator(step: { (seed0: Random_Seed) in\n        let (a, seed1): (a, Random_Seed) = aGenerator.step(seed0)\n        let (b, seed2): (b, Random_Seed) = bGenerator.step(seed1)\n        let (c, seed3): (c, Random_Seed) = cGenerator.step(seed2)\n        return (combine(a)(b)(c), seed3)\n    })\n}\n@Sendable\npublic static func Random_map4<\n    a: Sendable, b: Sendable, c: Sendable, d: Sendable, combined: Sendable\n>(\n    _ combine: @Sendable @escaping (a) -> (b) -> (c) -> (d) -> combined,\n    _ aGenerator: Random_Generator<a>,\n    _ bGenerator: Random_Generator<b>,\n    _ cGenerator: Random_Generator<c>,\n    _ dGenerator: Random_Generator<d>\n) -> Random_Generator<combined> {\n    Random_Generator(step: { (seed0: Random_Seed) in\n        let (a, seed1): (a, Random_Seed) = aGenerator.step(seed0)\n        let (b, seed2): (b, Random_Seed) = bGenerator.step(seed1)\n        let (c, seed3): (c, Random_Seed) = cGenerator.step(seed2)\n        let (d, seed4): (d, Random_Seed) = dGenerator.step(seed3)\n        return (combine(a)(b)(c)(d), seed4)\n    })\n}\n@Sendable\npublic static func Random_map5<\n    a: Sendable, b: Sendable, c: Sendable, d: Sendable, e: Sendable, combined: Sendable\n>(\n    _ combine: @Sendable @escaping (a) -> (b) -> (c) -> (d) -> (e) -> combined,\n    _ aGenerator: Random_Generator<a>,\n    _ bGenerator: Random_Generator<b>,\n    _ cGenerator: Random_Generator<c>,\n    _ dGenerator: Random_Generator<d>,\n    _ eGenerator: Random_Generator<e>\n) -> Random_Generator<combined> {\n    Random_Generator(step: { (seed0: Random_Seed) in\n        let (a, seed1): (a, Random_Seed) = aGenerator.step(seed0)\n        let (b, seed2): (b, Random_Seed) = bGenerator.step(seed1)\n        let (c, seed3): (c, Random_Seed) = cGenerator.step(seed2)\n        let (d, seed4): (d, Random_Seed) = dGenerator.step(seed3)\n        let (e, seed5): (e, Random_Seed) = eGenerator.step(seed4)\n        return (combine(a)(b)(c)(d)(e), seed5)\n    })\n}\n\n@Sendable public static func Random_next(_ generated_0: Random_Seed) -> Random_Seed {\n    // step the RNG to produce the next seed\n    // this is incredibly simple: multiply the state by a constant factor, modulus it\n    // by 2^32, and add a magic addend. The addend can be varied to produce independent\n    // RNGs, so it is stored as part of the seed. It is given to the new seed unchanged.\n    switch generated_0 {\n    case let .Random_Seed(state0, incr):\n        // The magic constant is from Numerical Recipes\n        .Random_Seed(Bitwise_shiftRightZfBy(0.0, (state0 * 1664525.0) + incr), incr)\n    }\n}\n\n@Sendable public static func Random_pair<a: Sendable, b: Sendable>(\n    _ genA: Random_Generator<a>,\n    _ genB: Random_Generator<b>\n) -> Random_Generator<Tuple<a, b>> {\n    Random_map2({ (a: a) in { (b: b) in .Tuple(a, b) } }, genA, genB)\n}\n\n// obtain a pseudorandom 32-bit integer from a seed\n@Sendable public static func Random_peel(_ seed: Random_Seed) -> Double {\n    // This is the RXS-M-SH version of PCG, see section 6.3.4 of the paper\n    // and line 184 of pcg_variants.h in the 0.94 (non-minimal) C implementation,\n    // the latter of which is the source of the magic constant.\n    switch seed {\n    case let .Random_Seed(state, _):\n        let word: Double =\n            Bitwise_xor(\n                state,\n                Bitwise_shiftRightZfBy(\n                    Bitwise_shiftRightZfBy(28.0, state) + 4.0,\n                    state\n                )\n            )\n            * 277803737.0\n        return Bitwise_shiftRightZfBy(\n            0.0,\n            Bitwise_xor(\n                Bitwise_shiftRightZfBy(22.0, word),\n                word\n            )\n        )\n    }\n}\n\n@Sendable public static func Random_step<a: Sendable>(\n    _ generator: Random_Generator<a>,\n    _ seed: Random_Seed\n) -> Tuple<a, Random_Seed> {\n    let (value, newSeed): (a, Random_Seed) = generator.step(seed)\n    return .Tuple(value, newSeed)\n}\n\n@Sendable public static func Random_uniform<a: Sendable>(_ value: a, _ valueList: List_List<a>)\n    -> Random_Generator<a>\n{\n    Random_weighted(Random_addOne(value), List_map(Random_addOne, valueList))\n}\n@Sendable public static func Random_addOne<a: Sendable>(_ value: a) -> Tuple<Double, a> {\n    .Tuple(1.0, value)\n}\n\n@Sendable public static func Random_weighted<a: Sendable>(\n    _ first: Tuple<Double, a>,\n    _ others: List_List<Tuple<Double, a>>\n) -> Random_Generator<a> {\n    @Sendable func normalize<ignored: Sendable>(_ weighted: Tuple<Double, ignored>) -> Double {\n        abs(weighted.first)\n    }\n    let total: Double = normalize(first) + List_sum(List_map(normalize, others))\n    return Random_map(\n        { (countdown: Double) in\n            Random_getByWeight(first, others, countdown)\n        },\n        Random_float(0.0, total)\n    )\n}\n";
var $author$project$ElmSyntaxToRust$deriveProtocolConformanceToString_fn = function (protocol, targetType) {
    return "extension " + (targetType.a + (": " + (protocol + ("" + (function () {
        var _v0 = targetType.o;
        if (!_v0.b) {
            return "";
        }
        else {
            var parameter0 = _v0.a;
            var parameter1Up = _v0.b;
            return " where " + $author$project$ElmSyntaxToRust$listFilledMapAndStringJoinWith_fn(", ", function (parameter) {
                return parameter + (": " + protocol);
            }, parameter0, parameter1Up);
        }
    }() + " {}")))));
}, $author$project$ElmSyntaxToRust$deriveProtocolConformanceToString = F2($author$project$ElmSyntaxToRust$deriveProtocolConformanceToString_fn);
var $author$project$Print$Exact_fn = function (a, b) {
    return { $: 0, a: a, b: b };
}, $author$project$Print$Exact = F2($author$project$Print$Exact_fn);
var $author$project$Print$exactly = function (exactNextString) {
    return $author$project$Print$Exact_fn(exactNextString, 0);
};
var $author$project$Print$empty = $author$project$Print$exactly("");
var $author$project$ElmSyntaxToRust$fastDictMapAndToList_fn = function (keyValueToElement, fastDict) {
    return $miniBill$elm_fast_dict$FastDict$foldr_fn(F3(function (key, value, soFar) {
        return _List_Cons(A2(keyValueToElement, key, value), soFar);
    }), _List_Nil, fastDict);
}, $author$project$ElmSyntaxToRust$fastDictMapAndToList_fn_unwrapped = function (keyValueToElement, fastDict) {
    return $miniBill$elm_fast_dict$FastDict$foldr_fn(F3(function (key, value, soFar) {
        return _List_Cons(keyValueToElement(key, value), soFar);
    }), _List_Nil, fastDict);
}, $author$project$ElmSyntaxToRust$fastDictMapAndToList = F2($author$project$ElmSyntaxToRust$fastDictMapAndToList_fn);
var $author$project$Print$FollowedBy_fn = function (a, b) {
    return { $: 1, a: a, b: b };
}, $author$project$Print$FollowedBy = F2($author$project$Print$FollowedBy_fn);
var $author$project$Print$followedBy = $author$project$Print$FollowedBy;
var $author$project$Print$listMapAndIntersperseAndFlatten_fn = function (elementToPrint, inBetweenPrint, prints) {
    if (!prints.b) {
        return $author$project$Print$empty;
    }
    else {
        var head = prints.a;
        var tail = prints.b;
        return $elm$core$List$foldl_fn_unwrapped(function (next, soFar) {
            return $author$project$Print$FollowedBy_fn(elementToPrint(next), $author$project$Print$FollowedBy_fn(inBetweenPrint, soFar));
        }, elementToPrint(head), tail);
    }
}, $author$project$Print$listMapAndIntersperseAndFlatten = F3($author$project$Print$listMapAndIntersperseAndFlatten_fn);
var $author$project$Print$Linebreak_fn = function (a, b) {
    return { $: 2, a: a, b: b };
}, $author$project$Print$Linebreak = F2($author$project$Print$Linebreak_fn);
var $author$project$Print$linebreak = $author$project$Print$Linebreak_fn(0, 0);
var $author$project$Print$LinebreakIndented_fn = function (a, b) {
    return { $: 3, a: a, b: b };
}, $author$project$Print$LinebreakIndented = F2($author$project$Print$LinebreakIndented_fn);
var $author$project$Print$linebreakIndented = $author$project$Print$LinebreakIndented_fn(0, 0);
var $author$project$ElmSyntaxToRust$printLinebreakLinebreakIndented = $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$linebreak);
var $author$project$ElmSyntaxToRust$printExactlyCurlyClosing = $author$project$Print$exactly("}");
var $author$project$Print$MultipleLines = 1;
var $author$project$Print$SingleLine = 0;
var $author$project$Print$lineSpreadWithRemaining_fn = function (print, remainingPrints) {
    lineSpreadWithRemaining: while (true) {
        switch (print.$) {
            case 0:
                if (!remainingPrints.b) {
                    return 0;
                }
                else {
                    var nextPrint = remainingPrints.a;
                    var nextRemainingPrints = remainingPrints.b;
                    var $temp$print = nextPrint, $temp$remainingPrints = nextRemainingPrints;
                    print = $temp$print;
                    remainingPrints = $temp$remainingPrints;
                    continue lineSpreadWithRemaining;
                }
            case 1:
                var b = print.a;
                var a = print.b;
                var $temp$print = a, $temp$remainingPrints = _List_Cons(b, remainingPrints);
                print = $temp$print;
                remainingPrints = $temp$remainingPrints;
                continue lineSpreadWithRemaining;
            case 2:
                return 1;
            case 3:
                return 1;
            case 4:
                var innerPrint = print.b;
                var $temp$print = innerPrint, $temp$remainingPrints = remainingPrints;
                print = $temp$print;
                remainingPrints = $temp$remainingPrints;
                continue lineSpreadWithRemaining;
            default:
                var innerPrint = print.a;
                var $temp$print = innerPrint, $temp$remainingPrints = remainingPrints;
                print = $temp$print;
                remainingPrints = $temp$remainingPrints;
                continue lineSpreadWithRemaining;
        }
    }
}, $author$project$Print$lineSpreadWithRemaining = F2($author$project$Print$lineSpreadWithRemaining_fn);
var $author$project$Print$lineSpread = function (print) {
    lineSpread: while (true) {
        switch (print.$) {
            case 0:
                return 0;
            case 1:
                var b = print.a;
                var a = print.b;
                return $author$project$Print$lineSpreadWithRemaining_fn(a, _List_fromArray([b]));
            case 2:
                return 1;
            case 3:
                return 1;
            case 4:
                var innerPrint = print.b;
                var $temp$print = innerPrint;
                print = $temp$print;
                continue lineSpread;
            default:
                var innerPrint = print.a;
                var $temp$print = innerPrint;
                print = $temp$print;
                continue lineSpread;
        }
    }
};
var $author$project$ElmSyntaxToRust$printExactlySpaceCurlyOpening = $author$project$Print$exactly(" {");
var $author$project$ElmSyntaxToRust$TypeIncoming = 0;
var $author$project$ElmSyntaxToRust$TypeOutgoing = 1;
var $elm$core$String$fromFloat = _String_fromNumber;
var $author$project$ElmSyntaxToRust$doubleLiteral = function (_double) {
    var asString = $elm$core$String$fromFloat(_double);
    return _String_contains_fn(".", asString) ? asString : (_String_contains_fn("e", asString) ? asString : (asString + ".0"));
};
var $author$project$Print$emptyOrLinebreakIndented = function (lineSpreadToUse) {
    if (!lineSpreadToUse) {
        return $author$project$Print$empty;
    }
    else {
        return $author$project$Print$linebreakIndented;
    }
};
var $author$project$Print$lineSpreadListMapAndCombine_fn = function (elementLineSpread, lineSpreads) {
    lineSpreadListMapAndCombine: while (true) {
        if (!lineSpreads.b) {
            return 0;
        }
        else {
            var head = lineSpreads.a;
            var tail = lineSpreads.b;
            var _v1 = elementLineSpread(head);
            if (_v1 === 1) {
                return 1;
            }
            else {
                var $temp$elementLineSpread = elementLineSpread, $temp$lineSpreads = tail;
                elementLineSpread = $temp$elementLineSpread;
                lineSpreads = $temp$lineSpreads;
                continue lineSpreadListMapAndCombine;
            }
        }
    }
}, $author$project$Print$lineSpreadListMapAndCombine = F2($author$project$Print$lineSpreadListMapAndCombine_fn);
var $author$project$Print$lineSpreadMergeWith_fn = function (bLineSpreadLazy, aLineSpread) {
    if (aLineSpread === 1) {
        return 1;
    }
    else {
        return bLineSpreadLazy(0);
    }
}, $author$project$Print$lineSpreadMergeWith = F2($author$project$Print$lineSpreadMergeWith_fn);
var $author$project$Print$listIntersperseAndFlatten_fn = function (inBetweenPrint, elements) {
    if (!elements.b) {
        return $author$project$Print$empty;
    }
    else {
        var head = elements.a;
        var tail = elements.b;
        return $elm$core$List$foldl_fn_unwrapped(function (next, soFar) {
            return $author$project$Print$FollowedBy_fn(next, $author$project$Print$FollowedBy_fn(inBetweenPrint, soFar));
        }, head, tail);
    }
}, $author$project$Print$listIntersperseAndFlatten = F2($author$project$Print$listIntersperseAndFlatten_fn);
var $author$project$ElmSyntaxToRust$printExactlyAngledClosing = $author$project$Print$exactly("]");
var $author$project$ElmSyntaxToRust$printExactlyAngledOpeningSpace = $author$project$Print$exactly("[ ");
var $author$project$ElmSyntaxToRust$printExactlyCaseSpace = $author$project$Print$exactly("case ");
var $author$project$ElmSyntaxToRust$printExactlyCaseSpaceLetSpace = $author$project$Print$exactly("case let ");
var $author$project$ElmSyntaxToRust$printExactlyColon = $author$project$Print$exactly(":");
var $author$project$ElmSyntaxToRust$printExactlyComma = $author$project$Print$exactly(",");
var $author$project$ElmSyntaxToRust$printExactlyCommaLinebreakIndented = $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$exactly(","));
var $author$project$ElmSyntaxToRust$printExactlyCommaSpace = $author$project$Print$exactly(", ");
var $author$project$ElmSyntaxToRust$printExactlyCurlyClosingSpaceElseSpaceCurlyOpening = $author$project$Print$exactly("} else {");
var $author$project$ElmSyntaxToRust$printExactlyCurlyOpening = $author$project$Print$exactly("{");
var $author$project$ElmSyntaxToRust$printExactlyCurlyOpeningSpace = $author$project$Print$exactly("{ ");
var $author$project$ElmSyntaxToRust$printExactlyIf = $author$project$Print$exactly("if");
var $author$project$ElmSyntaxToRust$printExactlyLetSpace = $author$project$Print$exactly("let ");
var $author$project$ElmSyntaxToRust$printExactlyMinus = $author$project$Print$exactly("-");
var $author$project$ElmSyntaxToRust$printExactlyParenClosing = $author$project$Print$exactly(")");
var $author$project$ElmSyntaxToRust$printExactlyParenOpening = $author$project$Print$exactly("(");
var $author$project$ElmSyntaxToRust$printExactlyParenOpeningParenClosing = $author$project$Print$exactly("()");
var $author$project$ElmSyntaxToRust$printExactlyParenOpeningSpace = $author$project$Print$exactly("( ");
var $author$project$ElmSyntaxToRust$printExactlyReturn = $author$project$Print$exactly("return");
var $author$project$ElmSyntaxToRust$printExactlySpaceEquals = $author$project$Print$exactly(" =");
var $author$project$ElmSyntaxToRust$printExactlySpaceEqualsLinebreakIndented = $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$ElmSyntaxToRust$printExactlySpaceEquals);
var $author$project$ElmSyntaxToRust$printExactlySpaceIn = $author$project$Print$exactly(" in");
var $author$project$ElmSyntaxToRust$printExactlySpaceMinusGreaterThanSpace = $author$project$Print$exactly(" -> ");
var $author$project$ElmSyntaxToRust$printExactlyRustExpressionRecordEmpty = $author$project$Print$exactly("()");
var $author$project$ElmSyntaxToRust$printExactlySwitch = $author$project$Print$exactly("switch");
var $author$project$Print$WithIndentIncreasedBy_fn = function (a, b) {
    return { $: 4, a: a, b: b };
}, $author$project$Print$WithIndentIncreasedBy = F2($author$project$Print$WithIndentIncreasedBy_fn);
var $author$project$Print$withIndentIncreasedBy = $author$project$Print$WithIndentIncreasedBy;
var $author$project$ElmSyntaxToRust$printParenthesized = function (inner) {
    return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyParenClosing, $author$project$Print$FollowedBy_fn($author$project$Print$emptyOrLinebreakIndented($author$project$Print$lineSpread(inner)), $author$project$Print$FollowedBy_fn($author$project$Print$WithIndentIncreasedBy_fn(1, inner), $author$project$ElmSyntaxToRust$printExactlyParenOpening)));
};
var $author$project$ElmSyntaxToRust$printRustExpressionArrayLiteralEmpty = $author$project$Print$exactly("[]");
var $author$project$ElmSyntaxToRust$printRustExpressionSelf = $author$project$Print$exactly("self");
var $author$project$ElmSyntaxToRust$patternIsSpaceSeparated = function (rustPattern) {
    switch (rustPattern.$) {
        case 0:
            return false;
        case 1:
            return false;
        case 2:
            return false;
        case 3:
            return false;
        case 4:
            return false;
        case 5:
            return false;
        case 6:
            return false;
        case 7:
            return false;
        default:
            return false;
    }
};
var $author$project$ElmSyntaxToRust$printExactlyUnderscore = $author$project$Print$exactly("_");
var $author$project$ElmSyntaxToRust$printRustPatternFalse = $author$project$Print$exactly("false");
var $author$project$ElmSyntaxToRust$printRustPatternTrue = $author$project$Print$exactly("true");
var $elm$core$String$foldl = _String_foldl;
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $author$project$ElmSyntaxToRust$unsafeHexDigitIntToString = function (_int) {
    switch (_int) {
        case 0:
            return "0";
        case 1:
            return "1";
        case 2:
            return "2";
        case 3:
            return "3";
        case 4:
            return "4";
        case 5:
            return "5";
        case 6:
            return "6";
        case 7:
            return "7";
        case 8:
            return "8";
        case 9:
            return "9";
        case 10:
            return "A";
        case 11:
            return "B";
        case 12:
            return "C";
        case 13:
            return "D";
        case 14:
            return "E";
        default:
            return "F";
    }
};
var $author$project$ElmSyntaxToRust$characterHex = function (character) {
    var charCode = $elm$core$Char$toCode(character);
    return $elm$core$String$toUpper($author$project$ElmSyntaxToRust$unsafeHexDigitIntToString((61440 & charCode) >> 12) + ($author$project$ElmSyntaxToRust$unsafeHexDigitIntToString((3840 & charCode) >> 8) + ($author$project$ElmSyntaxToRust$unsafeHexDigitIntToString((240 & charCode) >> 4) + ($author$project$ElmSyntaxToRust$unsafeHexDigitIntToString(15 & charCode) + ""))));
};
var $author$project$ElmSyntaxToRust$charCodeIsDigit = function (code) {
    return (code <= 57) && (48 <= code);
};
var $author$project$ElmSyntaxToRust$charCodeIsLower = function (code) {
    return (97 <= code) && (code <= 122);
};
var $author$project$ElmSyntaxToRust$charCodeIsUpper = function (code) {
    return (code <= 90) && (65 <= code);
};
var $author$project$ElmSyntaxToRust$charIsLatinAlphaNumOrUnderscoreFast = function (c) {
    var code = $elm$core$Char$toCode(c);
    return $author$project$ElmSyntaxToRust$charCodeIsLower(code) || ($author$project$ElmSyntaxToRust$charCodeIsUpper(code) || ($author$project$ElmSyntaxToRust$charCodeIsDigit(code) || (code === 95)));
};
var $miniBill$elm_unicode$Unicode$LetterLowercase = 1;
var $miniBill$elm_unicode$Unicode$LetterModifier = 17;
var $miniBill$elm_unicode$Unicode$LetterOther = 18;
var $miniBill$elm_unicode$Unicode$LetterTitlecase = 2;
var $miniBill$elm_unicode$Unicode$LetterUppercase = 0;
var $miniBill$elm_unicode$Unicode$MarkEnclosing = 5;
var $miniBill$elm_unicode$Unicode$MarkNonSpacing = 3;
var $miniBill$elm_unicode$Unicode$MarkSpacingCombining = 4;
var $miniBill$elm_unicode$Unicode$NumberDecimalDigit = 6;
var $miniBill$elm_unicode$Unicode$NumberLetter = 7;
var $miniBill$elm_unicode$Unicode$NumberOther = 8;
var $miniBill$elm_unicode$Unicode$OtherControl = 12;
var $miniBill$elm_unicode$Unicode$OtherFormat = 13;
var $miniBill$elm_unicode$Unicode$OtherPrivateUse = 15;
var $miniBill$elm_unicode$Unicode$OtherSurrogate = 14;
var $miniBill$elm_unicode$Unicode$PunctuationClose = 22;
var $miniBill$elm_unicode$Unicode$PunctuationConnector = 19;
var $miniBill$elm_unicode$Unicode$PunctuationDash = 20;
var $miniBill$elm_unicode$Unicode$PunctuationFinalQuote = 24;
var $miniBill$elm_unicode$Unicode$PunctuationInitialQuote = 23;
var $miniBill$elm_unicode$Unicode$PunctuationOpen = 21;
var $miniBill$elm_unicode$Unicode$PunctuationOther = 25;
var $miniBill$elm_unicode$Unicode$SeparatorLine = 10;
var $miniBill$elm_unicode$Unicode$SeparatorParagraph = 11;
var $miniBill$elm_unicode$Unicode$SeparatorSpace = 9;
var $miniBill$elm_unicode$Unicode$SymbolCurrency = 27;
var $miniBill$elm_unicode$Unicode$SymbolMath = 26;
var $miniBill$elm_unicode$Unicode$SymbolModifier = 28;
var $miniBill$elm_unicode$Unicode$SymbolOther = 29;
var $miniBill$elm_unicode$Unicode$getCategory = function (c) {
    var code = $elm$core$Char$toCode(c);
    var e = function (hex) {
        return _Utils_eq(hex, code);
    };
    var l = function (hex) {
        return _Utils_cmp(code, hex) < 0;
    };
    var r = F2(function (from, to) {
        return (_Utils_cmp(from, code) < 1) && (_Utils_cmp(code, to) < 1);
    });
    return l(256) ? (l(160) ? (l(59) ? (l(41) ? ((code <= 31) ? $elm$core$Maybe$Just(12) : (e(32) ? $elm$core$Maybe$Just(9) : ((A2(r, 33, 35) || A2(r, 37, 39)) ? $elm$core$Maybe$Just(25) : (e(36) ? $elm$core$Maybe$Just(27) : (e(40) ? $elm$core$Maybe$Just(21) : $elm$core$Maybe$Nothing))))) : (e(41) ? $elm$core$Maybe$Just(22) : ((e(42) || (e(44) || (A2(r, 46, 47) || e(58)))) ? $elm$core$Maybe$Just(25) : (e(43) ? $elm$core$Maybe$Just(26) : (e(45) ? $elm$core$Maybe$Just(20) : (A2(r, 48, 57) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing)))))) : (l(94) ? ((e(59) || (A2(r, 63, 64) || e(92))) ? $elm$core$Maybe$Just(25) : (A2(r, 60, 62) ? $elm$core$Maybe$Just(26) : (A2(r, 65, 90) ? $elm$core$Maybe$Just(0) : (e(91) ? $elm$core$Maybe$Just(21) : (e(93) ? $elm$core$Maybe$Just(22) : $elm$core$Maybe$Nothing))))) : ((e(94) || e(96)) ? $elm$core$Maybe$Just(28) : (e(95) ? $elm$core$Maybe$Just(19) : (A2(r, 97, 122) ? $elm$core$Maybe$Just(1) : (e(123) ? $elm$core$Maybe$Just(21) : ((e(124) || e(126)) ? $elm$core$Maybe$Just(26) : (e(125) ? $elm$core$Maybe$Just(22) : (A2(r, 127, 159) ? $elm$core$Maybe$Just(12) : $elm$core$Maybe$Nothing))))))))) : (l(177) ? (l(169) ? (e(160) ? $elm$core$Maybe$Just(9) : ((e(161) || e(167)) ? $elm$core$Maybe$Just(25) : (A2(r, 162, 165) ? $elm$core$Maybe$Just(27) : (e(166) ? $elm$core$Maybe$Just(29) : (e(168) ? $elm$core$Maybe$Just(28) : $elm$core$Maybe$Nothing))))) : ((e(169) || (e(174) || e(176))) ? $elm$core$Maybe$Just(29) : (e(170) ? $elm$core$Maybe$Just(18) : (e(171) ? $elm$core$Maybe$Just(23) : (e(172) ? $elm$core$Maybe$Just(26) : (e(173) ? $elm$core$Maybe$Just(13) : (e(175) ? $elm$core$Maybe$Just(28) : $elm$core$Maybe$Nothing))))))) : (l(186) ? (e(177) ? $elm$core$Maybe$Just(26) : ((A2(r, 178, 179) || e(185)) ? $elm$core$Maybe$Just(8) : ((e(180) || e(184)) ? $elm$core$Maybe$Just(28) : (e(181) ? $elm$core$Maybe$Just(1) : (A2(r, 182, 183) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))))) : (e(186) ? $elm$core$Maybe$Just(18) : (e(187) ? $elm$core$Maybe$Just(24) : (A2(r, 188, 190) ? $elm$core$Maybe$Just(8) : (e(191) ? $elm$core$Maybe$Just(25) : ((A2(r, 192, 214) || A2(r, 216, 222)) ? $elm$core$Maybe$Just(0) : ((e(215) || e(247)) ? $elm$core$Maybe$Just(26) : ((A2(r, 223, 246) || A2(r, 248, 255)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))))))))) : (l(9084) ? (l(3085) ? (l(1166) ? (l(488) ? (l(356) ? (l(304) ? (l(279) ? (l(266) ? ((e(256) || (e(258) || (e(260) || (e(262) || e(264))))) ? $elm$core$Maybe$Just(0) : ((e(257) || (e(259) || (e(261) || (e(263) || e(265))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(271) ? ((e(266) || (e(268) || e(270))) ? $elm$core$Maybe$Just(0) : ((e(267) || e(269)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(271) || (e(273) || (e(275) || e(277)))) ? $elm$core$Maybe$Just(1) : ((e(272) || (e(274) || (e(276) || e(278)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))) : (l(290) ? ((e(279) || (e(281) || (e(283) || (e(285) || (e(287) || e(289)))))) ? $elm$core$Maybe$Just(1) : ((e(280) || (e(282) || (e(284) || (e(286) || e(288))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(296) ? ((e(290) || (e(292) || e(294))) ? $elm$core$Maybe$Just(0) : ((e(291) || (e(293) || e(295))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(296) || (e(298) || (e(300) || e(302)))) ? $elm$core$Maybe$Just(0) : ((e(297) || (e(299) || (e(301) || e(303)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))) : (l(330) ? (l(316) ? ((e(304) || (e(306) || (e(308) || (e(310) || (e(313) || e(315)))))) ? $elm$core$Maybe$Just(0) : ((e(305) || (e(307) || (e(309) || (A2(r, 311, 312) || e(314))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(321) ? ((e(316) || (e(318) || e(320))) ? $elm$core$Maybe$Just(1) : ((e(317) || e(319)) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(321) || (e(323) || (e(325) || e(327)))) ? $elm$core$Maybe$Just(0) : ((e(322) || (e(324) || (e(326) || A2(r, 328, 329)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))) : (l(342) ? ((e(330) || (e(332) || (e(334) || (e(336) || (e(338) || e(340)))))) ? $elm$core$Maybe$Just(0) : ((e(331) || (e(333) || (e(335) || (e(337) || (e(339) || e(341)))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(348) ? ((e(342) || (e(344) || e(346))) ? $elm$core$Maybe$Just(0) : ((e(343) || (e(345) || e(347))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(348) || (e(350) || (e(352) || e(354)))) ? $elm$core$Maybe$Just(0) : ((e(349) || (e(351) || (e(353) || e(355)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))))) : (l(424) ? (l(380) ? (l(366) ? ((e(356) || (e(358) || (e(360) || (e(362) || e(364))))) ? $elm$core$Maybe$Just(0) : ((e(357) || (e(359) || (e(361) || (e(363) || e(365))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(371) ? ((e(366) || (e(368) || e(370))) ? $elm$core$Maybe$Just(0) : ((e(367) || e(369)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(371) || (e(373) || (e(375) || e(378)))) ? $elm$core$Maybe$Just(1) : ((e(372) || (e(374) || (A2(r, 376, 377) || e(379)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))) : (l(402) ? ((e(380) || (A2(r, 382, 384) || (e(387) || (e(389) || (e(392) || A2(r, 396, 397)))))) ? $elm$core$Maybe$Just(1) : ((e(381) || (A2(r, 385, 386) || (e(388) || (A2(r, 390, 391) || (A2(r, 393, 395) || A2(r, 398, 401)))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(414) ? ((e(402) || (e(405) || A2(r, 409, 411))) ? $elm$core$Maybe$Just(1) : ((A2(r, 403, 404) || (A2(r, 406, 408) || A2(r, 412, 413))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(414) || (e(417) || (e(419) || e(421)))) ? $elm$core$Maybe$Just(1) : ((A2(r, 415, 416) || (e(418) || (e(420) || A2(r, 422, 423)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))))) : (l(460) ? (l(440) ? ((e(424) || (A2(r, 426, 427) || (e(429) || (e(432) || (e(436) || e(438)))))) ? $elm$core$Maybe$Just(1) : ((e(425) || (e(428) || (A2(r, 430, 431) || (A2(r, 433, 435) || (e(437) || e(439)))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(452) ? ((e(440) || e(444)) ? $elm$core$Maybe$Just(0) : ((A2(r, 441, 442) || A2(r, 445, 447)) ? $elm$core$Maybe$Just(1) : ((e(443) || A2(r, 448, 451)) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))) : ((e(452) || (e(455) || e(458))) ? $elm$core$Maybe$Just(0) : ((e(453) || (e(456) || e(459))) ? $elm$core$Maybe$Just(2) : ((e(454) || e(457)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))) : (l(472) ? ((e(460) || (e(462) || (e(464) || (e(466) || (e(468) || e(470)))))) ? $elm$core$Maybe$Just(1) : ((e(461) || (e(463) || (e(465) || (e(467) || (e(469) || e(471)))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(479) ? ((e(472) || (e(474) || A2(r, 476, 477))) ? $elm$core$Maybe$Just(1) : ((e(473) || (e(475) || e(478))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(479) || (e(481) || (e(483) || (e(485) || e(487))))) ? $elm$core$Maybe$Just(1) : ((e(480) || (e(482) || (e(484) || e(486)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))))))) : (l(767) ? (l(540) ? (l(514) ? (l(499) ? ((e(488) || (e(490) || (e(492) || (e(494) || e(497))))) ? $elm$core$Maybe$Just(0) : ((e(489) || (e(491) || (e(493) || A2(r, 495, 496)))) ? $elm$core$Maybe$Just(1) : (e(498) ? $elm$core$Maybe$Just(2) : $elm$core$Maybe$Nothing))) : (l(506) ? ((e(499) || (e(501) || e(505))) ? $elm$core$Maybe$Just(1) : ((e(500) || A2(r, 502, 504)) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(506) || (e(508) || (e(510) || e(512)))) ? $elm$core$Maybe$Just(0) : ((e(507) || (e(509) || (e(511) || e(513)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))) : (l(526) ? ((e(514) || (e(516) || (e(518) || (e(520) || (e(522) || e(524)))))) ? $elm$core$Maybe$Just(0) : ((e(515) || (e(517) || (e(519) || (e(521) || (e(523) || e(525)))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(532) ? ((e(526) || (e(528) || e(530))) ? $elm$core$Maybe$Just(0) : ((e(527) || (e(529) || e(531))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(532) || (e(534) || (e(536) || e(538)))) ? $elm$core$Maybe$Just(0) : ((e(533) || (e(535) || (e(537) || e(539)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))) : (l(572) ? (l(551) ? ((e(540) || (e(542) || (e(544) || (e(546) || (e(548) || e(550)))))) ? $elm$core$Maybe$Just(0) : ((e(541) || (e(543) || (e(545) || (e(547) || e(549))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(557) ? ((e(551) || (e(553) || e(555))) ? $elm$core$Maybe$Just(1) : ((e(552) || (e(554) || e(556))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(557) || (e(559) || (e(561) || A2(r, 563, 569)))) ? $elm$core$Maybe$Just(1) : ((e(558) || (e(560) || (e(562) || A2(r, 570, 571)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))) : (l(589) ? ((e(572) || (A2(r, 575, 576) || (e(578) || (e(583) || (e(585) || e(587)))))) ? $elm$core$Maybe$Just(1) : ((A2(r, 573, 574) || (e(577) || (A2(r, 579, 582) || (e(584) || (e(586) || e(588)))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(709) ? ((e(589) || (A2(r, 591, 659) || A2(r, 661, 687))) ? $elm$core$Maybe$Just(1) : (e(590) ? $elm$core$Maybe$Just(0) : (e(660) ? $elm$core$Maybe$Just(18) : (A2(r, 688, 705) ? $elm$core$Maybe$Just(17) : (A2(r, 706, 708) ? $elm$core$Maybe$Just(28) : $elm$core$Maybe$Nothing))))) : ((e(709) || (A2(r, 722, 735) || (A2(r, 741, 747) || (e(749) || A2(r, 751, 766))))) ? $elm$core$Maybe$Just(28) : ((A2(r, 710, 721) || (A2(r, 736, 740) || (e(748) || e(750)))) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing)))))) : (l(1006) ? (l(975) ? (l(893) ? ((e(767) || e(885)) ? $elm$core$Maybe$Just(28) : (A2(r, 768, 879) ? $elm$core$Maybe$Just(3) : ((e(880) || (e(882) || e(886))) ? $elm$core$Maybe$Just(0) : ((e(881) || (e(883) || (e(887) || A2(r, 891, 892)))) ? $elm$core$Maybe$Just(1) : ((e(884) || e(890)) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))))) : (l(903) ? (e(893) ? $elm$core$Maybe$Just(1) : (e(894) ? $elm$core$Maybe$Just(25) : ((e(895) || e(902)) ? $elm$core$Maybe$Just(0) : (A2(r, 900, 901) ? $elm$core$Maybe$Just(28) : $elm$core$Maybe$Nothing)))) : (e(903) ? $elm$core$Maybe$Just(25) : ((A2(r, 904, 906) || (e(908) || (A2(r, 910, 911) || (A2(r, 913, 929) || A2(r, 931, 939))))) ? $elm$core$Maybe$Just(0) : ((e(912) || A2(r, 940, 974)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))) : (l(992) ? ((e(975) || (A2(r, 978, 980) || (e(984) || (e(986) || (e(988) || e(990)))))) ? $elm$core$Maybe$Just(0) : ((A2(r, 976, 977) || (A2(r, 981, 983) || (e(985) || (e(987) || (e(989) || e(991)))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(998) ? ((e(992) || (e(994) || e(996))) ? $elm$core$Maybe$Just(0) : ((e(993) || (e(995) || e(997))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(998) || (e(1000) || (e(1002) || e(1004)))) ? $elm$core$Maybe$Just(0) : ((e(999) || (e(1001) || (e(1003) || e(1005)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))) : (l(1134) ? (l(1120) ? ((e(1006) || (e(1012) || (e(1015) || (A2(r, 1017, 1018) || A2(r, 1021, 1071))))) ? $elm$core$Maybe$Just(0) : ((A2(r, 1007, 1011) || (e(1013) || (e(1016) || (A2(r, 1019, 1020) || A2(r, 1072, 1119))))) ? $elm$core$Maybe$Just(1) : (e(1014) ? $elm$core$Maybe$Just(26) : $elm$core$Maybe$Nothing))) : (l(1126) ? ((e(1120) || (e(1122) || e(1124))) ? $elm$core$Maybe$Just(0) : ((e(1121) || (e(1123) || e(1125))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(1126) || (e(1128) || (e(1130) || e(1132)))) ? $elm$core$Maybe$Just(0) : ((e(1127) || (e(1129) || (e(1131) || e(1133)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))) : (l(1146) ? ((e(1134) || (e(1136) || (e(1138) || (e(1140) || (e(1142) || e(1144)))))) ? $elm$core$Maybe$Just(0) : ((e(1135) || (e(1137) || (e(1139) || (e(1141) || (e(1143) || e(1145)))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(1152) ? ((e(1146) || (e(1148) || e(1150))) ? $elm$core$Maybe$Just(0) : ((e(1147) || (e(1149) || e(1151))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(1152) || (e(1162) || e(1164))) ? $elm$core$Maybe$Just(0) : ((e(1153) || (e(1163) || e(1165))) ? $elm$core$Maybe$Just(1) : (e(1154) ? $elm$core$Maybe$Just(29) : (A2(r, 1155, 1159) ? $elm$core$Maybe$Just(3) : (A2(r, 1160, 1161) ? $elm$core$Maybe$Just(5) : $elm$core$Maybe$Nothing))))))))))) : (l(1756) ? (l(1268) ? (l(1215) ? (l(1189) ? (l(1176) ? ((e(1166) || (e(1168) || (e(1170) || (e(1172) || e(1174))))) ? $elm$core$Maybe$Just(0) : ((e(1167) || (e(1169) || (e(1171) || (e(1173) || e(1175))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(1181) ? ((e(1176) || (e(1178) || e(1180))) ? $elm$core$Maybe$Just(0) : ((e(1177) || e(1179)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(1181) || (e(1183) || (e(1185) || e(1187)))) ? $elm$core$Maybe$Just(1) : ((e(1182) || (e(1184) || (e(1186) || e(1188)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))) : (l(1201) ? ((e(1189) || (e(1191) || (e(1193) || (e(1195) || (e(1197) || e(1199)))))) ? $elm$core$Maybe$Just(1) : ((e(1190) || (e(1192) || (e(1194) || (e(1196) || (e(1198) || e(1200)))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(1207) ? ((e(1201) || (e(1203) || e(1205))) ? $elm$core$Maybe$Just(1) : ((e(1202) || (e(1204) || e(1206))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(1207) || (e(1209) || (e(1211) || e(1213)))) ? $elm$core$Maybe$Just(1) : ((e(1208) || (e(1210) || (e(1212) || e(1214)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))))) : (l(1241) ? (l(1227) ? ((e(1215) || (e(1218) || (e(1220) || (e(1222) || (e(1224) || e(1226)))))) ? $elm$core$Maybe$Just(1) : ((A2(r, 1216, 1217) || (e(1219) || (e(1221) || (e(1223) || e(1225))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(1233) ? ((e(1227) || (e(1229) || e(1232))) ? $elm$core$Maybe$Just(0) : ((e(1228) || A2(r, 1230, 1231)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(1233) || (e(1235) || (e(1237) || e(1239)))) ? $elm$core$Maybe$Just(1) : ((e(1234) || (e(1236) || (e(1238) || e(1240)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))) : (l(1253) ? ((e(1241) || (e(1243) || (e(1245) || (e(1247) || (e(1249) || e(1251)))))) ? $elm$core$Maybe$Just(1) : ((e(1242) || (e(1244) || (e(1246) || (e(1248) || (e(1250) || e(1252)))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(1259) ? ((e(1253) || (e(1255) || e(1257))) ? $elm$core$Maybe$Just(1) : ((e(1254) || (e(1256) || e(1258))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(1259) || (e(1261) || (e(1263) || (e(1265) || e(1267))))) ? $elm$core$Maybe$Just(1) : ((e(1260) || (e(1262) || (e(1264) || e(1266)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))))) : (l(1318) ? (l(1292) ? (l(1279) ? ((e(1268) || (e(1270) || (e(1272) || (e(1274) || (e(1276) || e(1278)))))) ? $elm$core$Maybe$Just(0) : ((e(1269) || (e(1271) || (e(1273) || (e(1275) || e(1277))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(1284) ? ((e(1279) || (e(1281) || e(1283))) ? $elm$core$Maybe$Just(1) : ((e(1280) || e(1282)) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(1284) || (e(1286) || (e(1288) || e(1290)))) ? $elm$core$Maybe$Just(0) : ((e(1285) || (e(1287) || (e(1289) || e(1291)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))) : (l(1304) ? ((e(1292) || (e(1294) || (e(1296) || (e(1298) || (e(1300) || e(1302)))))) ? $elm$core$Maybe$Just(0) : ((e(1293) || (e(1295) || (e(1297) || (e(1299) || (e(1301) || e(1303)))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(1310) ? ((e(1304) || (e(1306) || e(1308))) ? $elm$core$Maybe$Just(0) : ((e(1305) || (e(1307) || e(1309))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(1310) || (e(1312) || (e(1314) || e(1316)))) ? $elm$core$Maybe$Just(0) : ((e(1311) || (e(1313) || (e(1315) || e(1317)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))) : (l(1478) ? (l(1369) ? ((e(1318) || (e(1320) || (e(1322) || (e(1324) || (e(1326) || A2(r, 1329, 1366)))))) ? $elm$core$Maybe$Just(0) : ((e(1319) || (e(1321) || (e(1323) || (e(1325) || e(1327))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(1424) ? (e(1369) ? $elm$core$Maybe$Just(17) : ((A2(r, 1370, 1375) || e(1417)) ? $elm$core$Maybe$Just(25) : (A2(r, 1376, 1416) ? $elm$core$Maybe$Just(1) : (e(1418) ? $elm$core$Maybe$Just(20) : (A2(r, 1421, 1422) ? $elm$core$Maybe$Just(29) : (e(1423) ? $elm$core$Maybe$Just(27) : $elm$core$Maybe$Nothing)))))) : ((A2(r, 1425, 1469) || (e(1471) || (A2(r, 1473, 1474) || A2(r, 1476, 1477)))) ? $elm$core$Maybe$Just(3) : (e(1470) ? $elm$core$Maybe$Just(20) : ((e(1472) || e(1475)) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))))) : (l(1563) ? ((e(1478) || (A2(r, 1523, 1524) || (A2(r, 1545, 1546) || A2(r, 1548, 1549)))) ? $elm$core$Maybe$Just(25) : ((e(1479) || A2(r, 1552, 1562)) ? $elm$core$Maybe$Just(3) : ((A2(r, 1488, 1514) || A2(r, 1519, 1522)) ? $elm$core$Maybe$Just(18) : (A2(r, 1536, 1541) ? $elm$core$Maybe$Just(13) : (A2(r, 1542, 1544) ? $elm$core$Maybe$Just(26) : (e(1547) ? $elm$core$Maybe$Just(27) : (A2(r, 1550, 1551) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing))))))) : (l(1631) ? ((e(1563) || A2(r, 1565, 1567)) ? $elm$core$Maybe$Just(25) : (e(1564) ? $elm$core$Maybe$Just(13) : ((A2(r, 1568, 1599) || A2(r, 1601, 1610)) ? $elm$core$Maybe$Just(18) : (e(1600) ? $elm$core$Maybe$Just(17) : (A2(r, 1611, 1630) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))))) : ((e(1631) || (e(1648) || A2(r, 1750, 1755))) ? $elm$core$Maybe$Just(3) : (A2(r, 1632, 1641) ? $elm$core$Maybe$Just(6) : ((A2(r, 1642, 1645) || e(1748)) ? $elm$core$Maybe$Just(25) : ((A2(r, 1646, 1647) || (A2(r, 1649, 1747) || e(1749))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))))))))) : (l(2556) ? (l(2248) ? (l(2035) ? (l(1790) ? ((e(1756) || (A2(r, 1759, 1764) || (A2(r, 1767, 1768) || A2(r, 1770, 1773)))) ? $elm$core$Maybe$Just(3) : (e(1757) ? $elm$core$Maybe$Just(13) : ((e(1758) || (e(1769) || e(1789))) ? $elm$core$Maybe$Just(29) : (A2(r, 1765, 1766) ? $elm$core$Maybe$Just(17) : ((A2(r, 1774, 1775) || A2(r, 1786, 1788)) ? $elm$core$Maybe$Just(18) : (A2(r, 1776, 1785) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing)))))) : (l(1839) ? (e(1790) ? $elm$core$Maybe$Just(29) : ((e(1791) || (e(1808) || A2(r, 1810, 1838))) ? $elm$core$Maybe$Just(18) : (A2(r, 1792, 1805) ? $elm$core$Maybe$Just(25) : (e(1807) ? $elm$core$Maybe$Just(13) : (e(1809) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))))) : ((e(1839) || (A2(r, 1869, 1957) || (e(1969) || A2(r, 1994, 2026)))) ? $elm$core$Maybe$Just(18) : ((A2(r, 1840, 1866) || (A2(r, 1958, 1968) || A2(r, 2027, 2034))) ? $elm$core$Maybe$Just(3) : (A2(r, 1984, 1993) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))))) : (l(2087) ? (l(2045) ? (e(2035) ? $elm$core$Maybe$Just(3) : ((A2(r, 2036, 2037) || e(2042)) ? $elm$core$Maybe$Just(17) : (e(2038) ? $elm$core$Maybe$Just(29) : (A2(r, 2039, 2041) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))) : ((e(2045) || (A2(r, 2070, 2073) || (A2(r, 2075, 2083) || A2(r, 2085, 2086)))) ? $elm$core$Maybe$Just(3) : (A2(r, 2046, 2047) ? $elm$core$Maybe$Just(27) : (A2(r, 2048, 2069) ? $elm$core$Maybe$Just(18) : ((e(2074) || e(2084)) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))))) : (l(2143) ? ((e(2087) || (A2(r, 2089, 2093) || A2(r, 2137, 2139))) ? $elm$core$Maybe$Just(3) : (e(2088) ? $elm$core$Maybe$Just(17) : ((A2(r, 2096, 2110) || e(2142)) ? $elm$core$Maybe$Just(25) : (A2(r, 2112, 2136) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))) : ((A2(r, 2144, 2154) || (A2(r, 2160, 2183) || (A2(r, 2185, 2190) || A2(r, 2208, 2247)))) ? $elm$core$Maybe$Just(18) : (e(2184) ? $elm$core$Maybe$Just(28) : (A2(r, 2192, 2193) ? $elm$core$Maybe$Just(13) : (A2(r, 2200, 2207) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))))))) : (l(2432) ? (l(2368) ? ((e(2248) || (A2(r, 2308, 2361) || e(2365))) ? $elm$core$Maybe$Just(18) : (e(2249) ? $elm$core$Maybe$Just(17) : ((A2(r, 2250, 2273) || (A2(r, 2275, 2306) || (e(2362) || e(2364)))) ? $elm$core$Maybe$Just(3) : (e(2274) ? $elm$core$Maybe$Just(13) : ((e(2307) || (e(2363) || A2(r, 2366, 2367))) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))))) : (l(2391) ? ((e(2368) || (A2(r, 2377, 2380) || A2(r, 2382, 2383))) ? $elm$core$Maybe$Just(4) : ((A2(r, 2369, 2376) || (e(2381) || A2(r, 2385, 2390))) ? $elm$core$Maybe$Just(3) : (e(2384) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))) : ((e(2391) || A2(r, 2402, 2403)) ? $elm$core$Maybe$Just(3) : ((A2(r, 2392, 2401) || A2(r, 2418, 2431)) ? $elm$core$Maybe$Just(18) : ((A2(r, 2404, 2405) || e(2416)) ? $elm$core$Maybe$Just(25) : (A2(r, 2406, 2415) ? $elm$core$Maybe$Just(6) : (e(2417) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))))))) : (l(2502) ? (l(2473) ? ((e(2432) || (A2(r, 2437, 2444) || (A2(r, 2447, 2448) || A2(r, 2451, 2472)))) ? $elm$core$Maybe$Just(18) : (e(2433) ? $elm$core$Maybe$Just(3) : (A2(r, 2434, 2435) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))) : ((A2(r, 2474, 2480) || (e(2482) || (A2(r, 2486, 2489) || e(2493)))) ? $elm$core$Maybe$Just(18) : ((e(2492) || A2(r, 2497, 2500)) ? $elm$core$Maybe$Just(3) : (A2(r, 2494, 2496) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing)))) : (l(2529) ? ((A2(r, 2503, 2504) || (A2(r, 2507, 2508) || e(2519))) ? $elm$core$Maybe$Just(4) : (e(2509) ? $elm$core$Maybe$Just(3) : ((e(2510) || (A2(r, 2524, 2525) || A2(r, 2527, 2528))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))) : ((e(2529) || A2(r, 2544, 2545)) ? $elm$core$Maybe$Just(18) : (A2(r, 2530, 2531) ? $elm$core$Maybe$Just(3) : (A2(r, 2534, 2543) ? $elm$core$Maybe$Just(6) : ((A2(r, 2546, 2547) || e(2555)) ? $elm$core$Maybe$Just(27) : (A2(r, 2548, 2553) ? $elm$core$Maybe$Just(8) : (e(2554) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing)))))))))) : (l(2820) ? (l(2688) ? (l(2619) ? ((e(2556) || (A2(r, 2565, 2570) || (A2(r, 2575, 2576) || (A2(r, 2579, 2600) || (A2(r, 2602, 2608) || (A2(r, 2610, 2611) || (A2(r, 2613, 2614) || A2(r, 2616, 2617)))))))) ? $elm$core$Maybe$Just(18) : (e(2557) ? $elm$core$Maybe$Just(25) : ((e(2558) || A2(r, 2561, 2562)) ? $elm$core$Maybe$Just(3) : (e(2563) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing)))) : (l(2648) ? ((e(2620) || (A2(r, 2625, 2626) || (A2(r, 2631, 2632) || (A2(r, 2635, 2637) || e(2641))))) ? $elm$core$Maybe$Just(3) : (A2(r, 2622, 2624) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing)) : ((A2(r, 2649, 2652) || (e(2654) || A2(r, 2674, 2676))) ? $elm$core$Maybe$Just(18) : (A2(r, 2662, 2671) ? $elm$core$Maybe$Just(6) : ((A2(r, 2672, 2673) || e(2677)) ? $elm$core$Maybe$Just(3) : (e(2678) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))))) : (l(2760) ? (l(2737) ? (A2(r, 2689, 2690) ? $elm$core$Maybe$Just(3) : (e(2691) ? $elm$core$Maybe$Just(4) : ((A2(r, 2693, 2701) || (A2(r, 2703, 2705) || (A2(r, 2707, 2728) || A2(r, 2730, 2736)))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))) : ((A2(r, 2738, 2739) || (A2(r, 2741, 2745) || e(2749))) ? $elm$core$Maybe$Just(18) : ((e(2748) || (A2(r, 2753, 2757) || e(2759))) ? $elm$core$Maybe$Just(3) : (A2(r, 2750, 2752) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing)))) : (l(2789) ? ((e(2760) || (e(2765) || A2(r, 2786, 2787))) ? $elm$core$Maybe$Just(3) : ((e(2761) || A2(r, 2763, 2764)) ? $elm$core$Maybe$Just(4) : ((e(2768) || A2(r, 2784, 2785)) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))) : (A2(r, 2790, 2799) ? $elm$core$Maybe$Just(6) : (e(2800) ? $elm$core$Maybe$Just(25) : (e(2801) ? $elm$core$Maybe$Just(27) : (e(2809) ? $elm$core$Maybe$Just(18) : ((A2(r, 2810, 2815) || e(2817)) ? $elm$core$Maybe$Just(3) : (A2(r, 2818, 2819) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))))))))) : (l(2948) ? (l(2890) ? (l(2875) ? ((A2(r, 2821, 2828) || (A2(r, 2831, 2832) || (A2(r, 2835, 2856) || (A2(r, 2858, 2864) || (A2(r, 2866, 2867) || A2(r, 2869, 2873)))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing) : ((e(2876) || (e(2879) || A2(r, 2881, 2884))) ? $elm$core$Maybe$Just(3) : (e(2877) ? $elm$core$Maybe$Just(18) : ((e(2878) || (e(2880) || A2(r, 2887, 2888))) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing)))) : (l(2913) ? ((A2(r, 2891, 2892) || e(2903)) ? $elm$core$Maybe$Just(4) : ((e(2893) || A2(r, 2901, 2902)) ? $elm$core$Maybe$Just(3) : ((A2(r, 2908, 2909) || A2(r, 2911, 2912)) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))) : ((e(2913) || (e(2929) || e(2947))) ? $elm$core$Maybe$Just(18) : ((A2(r, 2914, 2915) || e(2946)) ? $elm$core$Maybe$Just(3) : (A2(r, 2918, 2927) ? $elm$core$Maybe$Just(6) : (e(2928) ? $elm$core$Maybe$Just(29) : (A2(r, 2930, 2935) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing))))))) : (l(3017) ? (l(2978) ? ((A2(r, 2949, 2954) || (A2(r, 2958, 2960) || (A2(r, 2962, 2965) || (A2(r, 2969, 2970) || (e(2972) || A2(r, 2974, 2975)))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing) : ((A2(r, 2979, 2980) || (A2(r, 2984, 2986) || A2(r, 2990, 3001))) ? $elm$core$Maybe$Just(18) : ((A2(r, 3006, 3007) || (A2(r, 3009, 3010) || A2(r, 3014, 3016))) ? $elm$core$Maybe$Just(4) : (e(3008) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))) : (l(3058) ? ((A2(r, 3018, 3020) || e(3031)) ? $elm$core$Maybe$Just(4) : (e(3021) ? $elm$core$Maybe$Just(3) : (e(3024) ? $elm$core$Maybe$Just(18) : (A2(r, 3046, 3055) ? $elm$core$Maybe$Just(6) : (A2(r, 3056, 3057) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing))))) : (e(3058) ? $elm$core$Maybe$Just(8) : ((A2(r, 3059, 3064) || e(3066)) ? $elm$core$Maybe$Just(29) : (e(3065) ? $elm$core$Maybe$Just(27) : ((e(3072) || e(3076)) ? $elm$core$Maybe$Just(3) : (A2(r, 3073, 3075) ? $elm$core$Maybe$Just(4) : (A2(r, 3077, 3084) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))))))))))))) : (l(7695) ? (l(4881) ? (l(3763) ? (l(3389) ? (l(3217) ? (l(3167) ? ((A2(r, 3086, 3088) || (A2(r, 3090, 3112) || (A2(r, 3114, 3129) || (e(3133) || (A2(r, 3160, 3162) || e(3165)))))) ? $elm$core$Maybe$Just(18) : ((e(3132) || (A2(r, 3134, 3136) || (A2(r, 3142, 3144) || (A2(r, 3146, 3149) || A2(r, 3157, 3158))))) ? $elm$core$Maybe$Just(3) : (A2(r, 3137, 3140) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))) : ((A2(r, 3168, 3169) || (e(3200) || (A2(r, 3205, 3212) || A2(r, 3214, 3216)))) ? $elm$core$Maybe$Just(18) : ((A2(r, 3170, 3171) || e(3201)) ? $elm$core$Maybe$Just(3) : (A2(r, 3174, 3183) ? $elm$core$Maybe$Just(6) : ((e(3191) || e(3204)) ? $elm$core$Maybe$Just(25) : (A2(r, 3192, 3198) ? $elm$core$Maybe$Just(8) : (e(3199) ? $elm$core$Maybe$Just(29) : (A2(r, 3202, 3203) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing)))))))) : (l(3284) ? ((A2(r, 3218, 3240) || (A2(r, 3242, 3251) || (A2(r, 3253, 3257) || e(3261)))) ? $elm$core$Maybe$Just(18) : ((e(3260) || (e(3263) || (e(3270) || A2(r, 3276, 3277)))) ? $elm$core$Maybe$Just(3) : ((e(3262) || (A2(r, 3264, 3268) || (A2(r, 3271, 3272) || A2(r, 3274, 3275)))) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))) : (l(3314) ? (A2(r, 3285, 3286) ? $elm$core$Maybe$Just(4) : ((A2(r, 3293, 3294) || (A2(r, 3296, 3297) || e(3313))) ? $elm$core$Maybe$Just(18) : (A2(r, 3298, 3299) ? $elm$core$Maybe$Just(3) : (A2(r, 3302, 3311) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing)))) : ((e(3314) || (A2(r, 3332, 3340) || (A2(r, 3342, 3344) || A2(r, 3346, 3386)))) ? $elm$core$Maybe$Just(18) : ((e(3315) || A2(r, 3330, 3331)) ? $elm$core$Maybe$Just(4) : ((A2(r, 3328, 3329) || A2(r, 3387, 3388)) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))))) : (l(3534) ? (l(3425) ? ((e(3389) || (e(3406) || (A2(r, 3412, 3414) || A2(r, 3423, 3424)))) ? $elm$core$Maybe$Just(18) : ((A2(r, 3390, 3392) || (A2(r, 3398, 3400) || (A2(r, 3402, 3404) || e(3415)))) ? $elm$core$Maybe$Just(4) : ((A2(r, 3393, 3396) || e(3405)) ? $elm$core$Maybe$Just(3) : (e(3407) ? $elm$core$Maybe$Just(29) : (A2(r, 3416, 3422) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing))))) : (l(3457) ? ((e(3425) || A2(r, 3450, 3455)) ? $elm$core$Maybe$Just(18) : (A2(r, 3426, 3427) ? $elm$core$Maybe$Just(3) : (A2(r, 3430, 3439) ? $elm$core$Maybe$Just(6) : (A2(r, 3440, 3448) ? $elm$core$Maybe$Just(8) : (e(3449) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing))))) : ((e(3457) || e(3530)) ? $elm$core$Maybe$Just(3) : (A2(r, 3458, 3459) ? $elm$core$Maybe$Just(4) : ((A2(r, 3461, 3478) || (A2(r, 3482, 3505) || (A2(r, 3507, 3515) || (e(3517) || A2(r, 3520, 3526))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))))) : (l(3653) ? (l(3571) ? ((A2(r, 3535, 3537) || (A2(r, 3544, 3551) || e(3570))) ? $elm$core$Maybe$Just(4) : ((A2(r, 3538, 3540) || e(3542)) ? $elm$core$Maybe$Just(3) : (A2(r, 3558, 3567) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))) : (e(3571) ? $elm$core$Maybe$Just(4) : (e(3572) ? $elm$core$Maybe$Just(25) : ((A2(r, 3585, 3632) || (A2(r, 3634, 3635) || A2(r, 3648, 3652))) ? $elm$core$Maybe$Just(18) : ((e(3633) || A2(r, 3636, 3642)) ? $elm$core$Maybe$Just(3) : (e(3647) ? $elm$core$Maybe$Just(27) : $elm$core$Maybe$Nothing)))))) : (l(3715) ? ((e(3653) || A2(r, 3713, 3714)) ? $elm$core$Maybe$Just(18) : (e(3654) ? $elm$core$Maybe$Just(17) : (A2(r, 3655, 3662) ? $elm$core$Maybe$Just(3) : ((e(3663) || A2(r, 3674, 3675)) ? $elm$core$Maybe$Just(25) : (A2(r, 3664, 3673) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))))) : ((e(3716) || (A2(r, 3718, 3722) || (A2(r, 3724, 3747) || (e(3749) || (A2(r, 3751, 3760) || e(3762)))))) ? $elm$core$Maybe$Just(18) : (e(3761) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))))) : (l(4151) ? (l(3898) ? (l(3859) ? ((e(3763) || (e(3773) || (A2(r, 3776, 3780) || (A2(r, 3804, 3807) || e(3840))))) ? $elm$core$Maybe$Just(18) : ((A2(r, 3764, 3772) || A2(r, 3784, 3790)) ? $elm$core$Maybe$Just(3) : (e(3782) ? $elm$core$Maybe$Just(17) : (A2(r, 3792, 3801) ? $elm$core$Maybe$Just(6) : (A2(r, 3841, 3843) ? $elm$core$Maybe$Just(29) : (A2(r, 3844, 3858) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))))) : (l(3881) ? ((e(3859) || (A2(r, 3861, 3863) || A2(r, 3866, 3871))) ? $elm$core$Maybe$Just(29) : (e(3860) ? $elm$core$Maybe$Just(25) : (A2(r, 3864, 3865) ? $elm$core$Maybe$Just(3) : (A2(r, 3872, 3880) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing)))) : (e(3881) ? $elm$core$Maybe$Just(6) : (A2(r, 3882, 3891) ? $elm$core$Maybe$Just(8) : ((e(3892) || (e(3894) || e(3896))) ? $elm$core$Maybe$Just(29) : ((e(3893) || (e(3895) || e(3897))) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))))) : (l(3980) ? (l(3912) ? ((e(3898) || e(3900)) ? $elm$core$Maybe$Just(21) : ((e(3899) || e(3901)) ? $elm$core$Maybe$Just(22) : (A2(r, 3902, 3903) ? $elm$core$Maybe$Just(4) : (A2(r, 3904, 3911) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))) : ((A2(r, 3913, 3948) || A2(r, 3976, 3979)) ? $elm$core$Maybe$Just(18) : ((A2(r, 3953, 3966) || (A2(r, 3968, 3972) || A2(r, 3974, 3975))) ? $elm$core$Maybe$Just(3) : (e(3967) ? $elm$core$Maybe$Just(4) : (e(3973) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))))) : (l(4047) ? (e(3980) ? $elm$core$Maybe$Just(18) : ((A2(r, 3981, 3991) || (A2(r, 3993, 4028) || e(4038))) ? $elm$core$Maybe$Just(3) : ((A2(r, 4030, 4037) || (A2(r, 4039, 4044) || e(4046))) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing))) : ((e(4047) || A2(r, 4053, 4056)) ? $elm$core$Maybe$Just(29) : ((A2(r, 4048, 4052) || A2(r, 4057, 4058)) ? $elm$core$Maybe$Just(25) : (A2(r, 4096, 4138) ? $elm$core$Maybe$Just(18) : ((A2(r, 4139, 4140) || e(4145)) ? $elm$core$Maybe$Just(4) : ((A2(r, 4141, 4144) || A2(r, 4146, 4150)) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))))))) : (l(4238) ? (l(4189) ? ((e(4151) || (A2(r, 4153, 4154) || (A2(r, 4157, 4158) || A2(r, 4184, 4185)))) ? $elm$core$Maybe$Just(3) : ((e(4152) || (A2(r, 4155, 4156) || A2(r, 4182, 4183))) ? $elm$core$Maybe$Just(4) : ((e(4159) || (A2(r, 4176, 4181) || A2(r, 4186, 4188))) ? $elm$core$Maybe$Just(18) : (A2(r, 4160, 4169) ? $elm$core$Maybe$Just(6) : (A2(r, 4170, 4175) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))))) : (l(4208) ? ((e(4189) || (e(4193) || (A2(r, 4197, 4198) || A2(r, 4206, 4207)))) ? $elm$core$Maybe$Just(18) : (A2(r, 4190, 4192) ? $elm$core$Maybe$Just(3) : ((A2(r, 4194, 4196) || A2(r, 4199, 4205)) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))) : ((e(4208) || A2(r, 4213, 4225)) ? $elm$core$Maybe$Just(18) : ((A2(r, 4209, 4212) || (e(4226) || (A2(r, 4229, 4230) || e(4237)))) ? $elm$core$Maybe$Just(3) : ((A2(r, 4227, 4228) || A2(r, 4231, 4236)) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))))) : (l(4351) ? (l(4255) ? (e(4238) ? $elm$core$Maybe$Just(18) : ((e(4239) || A2(r, 4250, 4252)) ? $elm$core$Maybe$Just(4) : (A2(r, 4240, 4249) ? $elm$core$Maybe$Just(6) : (e(4253) ? $elm$core$Maybe$Just(3) : (e(4254) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing))))) : (e(4255) ? $elm$core$Maybe$Just(29) : ((A2(r, 4256, 4293) || (e(4295) || e(4301))) ? $elm$core$Maybe$Just(0) : ((A2(r, 4304, 4346) || A2(r, 4349, 4350)) ? $elm$core$Maybe$Just(1) : (e(4347) ? $elm$core$Maybe$Just(25) : (e(4348) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing)))))) : (l(4745) ? (e(4351) ? $elm$core$Maybe$Just(1) : ((A2(r, 4352, 4680) || (A2(r, 4682, 4685) || (A2(r, 4688, 4694) || (e(4696) || (A2(r, 4698, 4701) || A2(r, 4704, 4744)))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)) : ((A2(r, 4746, 4749) || (A2(r, 4752, 4784) || (A2(r, 4786, 4789) || (A2(r, 4792, 4798) || (e(4800) || (A2(r, 4802, 4805) || (A2(r, 4808, 4822) || A2(r, 4824, 4880)))))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))))) : (l(6764) ? (l(6143) ? (l(5918) ? (l(5741) ? ((A2(r, 4882, 4885) || (A2(r, 4888, 4954) || (A2(r, 4992, 5007) || A2(r, 5121, 5740)))) ? $elm$core$Maybe$Just(18) : (A2(r, 4957, 4959) ? $elm$core$Maybe$Just(3) : (A2(r, 4960, 4968) ? $elm$core$Maybe$Just(25) : (A2(r, 4969, 4988) ? $elm$core$Maybe$Just(8) : (A2(r, 5008, 5017) ? $elm$core$Maybe$Just(29) : (A2(r, 5024, 5109) ? $elm$core$Maybe$Just(0) : (A2(r, 5112, 5117) ? $elm$core$Maybe$Just(1) : (e(5120) ? $elm$core$Maybe$Just(20) : $elm$core$Maybe$Nothing)))))))) : (l(5791) ? (e(5741) ? $elm$core$Maybe$Just(29) : (e(5742) ? $elm$core$Maybe$Just(25) : ((A2(r, 5743, 5759) || A2(r, 5761, 5786)) ? $elm$core$Maybe$Just(18) : (e(5760) ? $elm$core$Maybe$Just(9) : (e(5787) ? $elm$core$Maybe$Just(21) : (e(5788) ? $elm$core$Maybe$Just(22) : $elm$core$Maybe$Nothing)))))) : ((A2(r, 5792, 5866) || (A2(r, 5873, 5880) || A2(r, 5888, 5905))) ? $elm$core$Maybe$Just(18) : (A2(r, 5867, 5869) ? $elm$core$Maybe$Just(25) : (A2(r, 5870, 5872) ? $elm$core$Maybe$Just(7) : (A2(r, 5906, 5908) ? $elm$core$Maybe$Just(3) : (e(5909) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))))))) : (l(6070) ? ((A2(r, 5919, 5937) || (A2(r, 5952, 5969) || (A2(r, 5984, 5996) || (A2(r, 5998, 6000) || A2(r, 6016, 6067))))) ? $elm$core$Maybe$Just(18) : ((A2(r, 5938, 5939) || (A2(r, 5970, 5971) || (A2(r, 6002, 6003) || A2(r, 6068, 6069)))) ? $elm$core$Maybe$Just(3) : (e(5940) ? $elm$core$Maybe$Just(4) : (A2(r, 5941, 5942) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))) : (l(6102) ? ((e(6070) || (A2(r, 6078, 6085) || A2(r, 6087, 6088))) ? $elm$core$Maybe$Just(4) : ((A2(r, 6071, 6077) || (e(6086) || A2(r, 6089, 6099))) ? $elm$core$Maybe$Just(3) : (A2(r, 6100, 6101) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))) : ((e(6102) || A2(r, 6104, 6106)) ? $elm$core$Maybe$Just(25) : (e(6103) ? $elm$core$Maybe$Just(17) : (e(6107) ? $elm$core$Maybe$Just(27) : (e(6108) ? $elm$core$Maybe$Just(18) : (e(6109) ? $elm$core$Maybe$Just(3) : (A2(r, 6112, 6121) ? $elm$core$Maybe$Just(6) : (A2(r, 6128, 6137) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing)))))))))) : (l(6463) ? (l(6278) ? ((A2(r, 6144, 6149) || A2(r, 6151, 6154)) ? $elm$core$Maybe$Just(25) : (e(6150) ? $elm$core$Maybe$Just(20) : ((A2(r, 6155, 6157) || (e(6159) || e(6277))) ? $elm$core$Maybe$Just(3) : (e(6158) ? $elm$core$Maybe$Just(13) : (A2(r, 6160, 6169) ? $elm$core$Maybe$Just(6) : ((A2(r, 6176, 6210) || (A2(r, 6212, 6264) || A2(r, 6272, 6276))) ? $elm$core$Maybe$Just(18) : (e(6211) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))))))) : (l(6434) ? ((e(6278) || (e(6313) || A2(r, 6432, 6433))) ? $elm$core$Maybe$Just(3) : ((A2(r, 6279, 6312) || (e(6314) || (A2(r, 6320, 6389) || A2(r, 6400, 6430)))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)) : ((e(6434) || (A2(r, 6439, 6440) || (e(6450) || A2(r, 6457, 6459)))) ? $elm$core$Maybe$Just(3) : ((A2(r, 6435, 6438) || (A2(r, 6441, 6443) || (A2(r, 6448, 6449) || A2(r, 6451, 6456)))) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing)))) : (l(6680) ? ((e(6464) || A2(r, 6622, 6655)) ? $elm$core$Maybe$Just(29) : (A2(r, 6468, 6469) ? $elm$core$Maybe$Just(25) : ((A2(r, 6470, 6479) || A2(r, 6608, 6617)) ? $elm$core$Maybe$Just(6) : ((A2(r, 6480, 6509) || (A2(r, 6512, 6516) || (A2(r, 6528, 6571) || (A2(r, 6576, 6601) || A2(r, 6656, 6678))))) ? $elm$core$Maybe$Just(18) : (e(6618) ? $elm$core$Maybe$Just(8) : (e(6679) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))))) : (l(6742) ? ((e(6680) || e(6683)) ? $elm$core$Maybe$Just(3) : ((A2(r, 6681, 6682) || e(6741)) ? $elm$core$Maybe$Just(4) : (A2(r, 6686, 6687) ? $elm$core$Maybe$Just(25) : (A2(r, 6688, 6740) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))) : ((e(6742) || (A2(r, 6744, 6750) || (e(6752) || (e(6754) || A2(r, 6757, 6763))))) ? $elm$core$Maybe$Just(3) : ((e(6743) || (e(6753) || A2(r, 6755, 6756))) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing)))))) : (l(7167) ? (l(7001) ? (l(6911) ? ((e(6764) || (A2(r, 6771, 6780) || (e(6783) || (A2(r, 6832, 6845) || A2(r, 6847, 6862))))) ? $elm$core$Maybe$Just(3) : (A2(r, 6765, 6770) ? $elm$core$Maybe$Just(4) : ((A2(r, 6784, 6793) || A2(r, 6800, 6809)) ? $elm$core$Maybe$Just(6) : ((A2(r, 6816, 6822) || A2(r, 6824, 6829)) ? $elm$core$Maybe$Just(25) : (e(6823) ? $elm$core$Maybe$Just(17) : (e(6846) ? $elm$core$Maybe$Just(5) : $elm$core$Maybe$Nothing)))))) : (l(6970) ? ((A2(r, 6912, 6915) || (e(6964) || A2(r, 6966, 6969))) ? $elm$core$Maybe$Just(3) : ((e(6916) || e(6965)) ? $elm$core$Maybe$Just(4) : (A2(r, 6917, 6963) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))) : ((e(6970) || (e(6972) || e(6978))) ? $elm$core$Maybe$Just(3) : ((e(6971) || (A2(r, 6973, 6977) || A2(r, 6979, 6980))) ? $elm$core$Maybe$Just(4) : (A2(r, 6981, 6988) ? $elm$core$Maybe$Just(18) : (A2(r, 6992, 7000) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing)))))) : (l(7081) ? (l(7039) ? (e(7001) ? $elm$core$Maybe$Just(6) : ((A2(r, 7002, 7008) || A2(r, 7037, 7038)) ? $elm$core$Maybe$Just(25) : ((A2(r, 7009, 7018) || A2(r, 7028, 7036)) ? $elm$core$Maybe$Just(29) : (A2(r, 7019, 7027) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))) : ((A2(r, 7040, 7041) || (A2(r, 7074, 7077) || e(7080))) ? $elm$core$Maybe$Just(3) : ((e(7042) || (e(7073) || A2(r, 7078, 7079))) ? $elm$core$Maybe$Just(4) : (A2(r, 7043, 7072) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))) : (l(7142) ? ((e(7081) || A2(r, 7083, 7085)) ? $elm$core$Maybe$Just(3) : (e(7082) ? $elm$core$Maybe$Just(4) : ((A2(r, 7086, 7087) || A2(r, 7098, 7141)) ? $elm$core$Maybe$Just(18) : (A2(r, 7088, 7097) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing)))) : ((e(7142) || (A2(r, 7144, 7145) || (e(7149) || A2(r, 7151, 7153)))) ? $elm$core$Maybe$Just(3) : ((e(7143) || (A2(r, 7146, 7148) || (e(7150) || A2(r, 7154, 7155)))) ? $elm$core$Maybe$Just(4) : (A2(r, 7164, 7166) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))))) : (l(7412) ? (l(7293) ? ((e(7167) || A2(r, 7227, 7231)) ? $elm$core$Maybe$Just(25) : ((A2(r, 7168, 7203) || (A2(r, 7245, 7247) || A2(r, 7258, 7287))) ? $elm$core$Maybe$Just(18) : ((A2(r, 7204, 7211) || A2(r, 7220, 7221)) ? $elm$core$Maybe$Just(4) : ((A2(r, 7212, 7219) || A2(r, 7222, 7223)) ? $elm$core$Maybe$Just(3) : ((A2(r, 7232, 7241) || A2(r, 7248, 7257)) ? $elm$core$Maybe$Just(6) : (A2(r, 7288, 7292) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing)))))) : (l(7378) ? (e(7293) ? $elm$core$Maybe$Just(17) : ((A2(r, 7294, 7295) || A2(r, 7360, 7367)) ? $elm$core$Maybe$Just(25) : (A2(r, 7296, 7304) ? $elm$core$Maybe$Just(1) : ((A2(r, 7312, 7354) || A2(r, 7357, 7359)) ? $elm$core$Maybe$Just(0) : (A2(r, 7376, 7377) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))))) : ((e(7378) || (A2(r, 7380, 7392) || (A2(r, 7394, 7400) || e(7405)))) ? $elm$core$Maybe$Just(3) : (e(7379) ? $elm$core$Maybe$Just(25) : (e(7393) ? $elm$core$Maybe$Just(4) : ((A2(r, 7401, 7404) || A2(r, 7406, 7411)) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))))) : (l(7680) ? ((e(7412) || (A2(r, 7416, 7417) || A2(r, 7616, 7679))) ? $elm$core$Maybe$Just(3) : ((A2(r, 7413, 7414) || e(7418)) ? $elm$core$Maybe$Just(18) : (e(7415) ? $elm$core$Maybe$Just(4) : ((A2(r, 7424, 7467) || (A2(r, 7531, 7543) || A2(r, 7545, 7578))) ? $elm$core$Maybe$Just(1) : ((A2(r, 7468, 7530) || (e(7544) || A2(r, 7579, 7615))) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))))) : (l(7686) ? ((e(7680) || (e(7682) || e(7684))) ? $elm$core$Maybe$Just(0) : ((e(7681) || (e(7683) || e(7685))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(7686) || (e(7688) || (e(7690) || (e(7692) || e(7694))))) ? $elm$core$Maybe$Just(0) : ((e(7687) || (e(7689) || (e(7691) || e(7693)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))))))) : (l(7904) ? (l(7794) ? (l(7743) ? (l(7718) ? (l(7705) ? ((e(7695) || (e(7697) || (e(7699) || (e(7701) || e(7703))))) ? $elm$core$Maybe$Just(1) : ((e(7696) || (e(7698) || (e(7700) || (e(7702) || e(7704))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(7710) ? ((e(7705) || (e(7707) || e(7709))) ? $elm$core$Maybe$Just(1) : ((e(7706) || e(7708)) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(7710) || (e(7712) || (e(7714) || e(7716)))) ? $elm$core$Maybe$Just(0) : ((e(7711) || (e(7713) || (e(7715) || e(7717)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))) : (l(7729) ? ((e(7718) || (e(7720) || (e(7722) || (e(7724) || (e(7726) || e(7728)))))) ? $elm$core$Maybe$Just(0) : ((e(7719) || (e(7721) || (e(7723) || (e(7725) || e(7727))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(7735) ? ((e(7729) || (e(7731) || e(7733))) ? $elm$core$Maybe$Just(1) : ((e(7730) || (e(7732) || e(7734))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(7735) || (e(7737) || (e(7739) || e(7741)))) ? $elm$core$Maybe$Just(1) : ((e(7736) || (e(7738) || (e(7740) || e(7742)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))))) : (l(7767) ? (l(7754) ? ((e(7743) || (e(7745) || (e(7747) || (e(7749) || (e(7751) || e(7753)))))) ? $elm$core$Maybe$Just(1) : ((e(7744) || (e(7746) || (e(7748) || (e(7750) || e(7752))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(7759) ? ((e(7754) || (e(7756) || e(7758))) ? $elm$core$Maybe$Just(0) : ((e(7755) || e(7757)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(7759) || (e(7761) || (e(7763) || e(7765)))) ? $elm$core$Maybe$Just(1) : ((e(7760) || (e(7762) || (e(7764) || e(7766)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))) : (l(7779) ? ((e(7767) || (e(7769) || (e(7771) || (e(7773) || (e(7775) || e(7777)))))) ? $elm$core$Maybe$Just(1) : ((e(7768) || (e(7770) || (e(7772) || (e(7774) || (e(7776) || e(7778)))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(7785) ? ((e(7779) || (e(7781) || e(7783))) ? $elm$core$Maybe$Just(1) : ((e(7780) || (e(7782) || e(7784))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(7785) || (e(7787) || (e(7789) || (e(7791) || e(7793))))) ? $elm$core$Maybe$Just(1) : ((e(7786) || (e(7788) || (e(7790) || e(7792)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))))) : (l(7852) ? (l(7818) ? (l(7805) ? ((e(7794) || (e(7796) || (e(7798) || (e(7800) || (e(7802) || e(7804)))))) ? $elm$core$Maybe$Just(0) : ((e(7795) || (e(7797) || (e(7799) || (e(7801) || e(7803))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(7810) ? ((e(7805) || (e(7807) || e(7809))) ? $elm$core$Maybe$Just(1) : ((e(7806) || e(7808)) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(7810) || (e(7812) || (e(7814) || e(7816)))) ? $elm$core$Maybe$Just(0) : ((e(7811) || (e(7813) || (e(7815) || e(7817)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))) : (l(7838) ? ((e(7818) || (e(7820) || (e(7822) || (e(7824) || (e(7826) || e(7828)))))) ? $elm$core$Maybe$Just(0) : ((e(7819) || (e(7821) || (e(7823) || (e(7825) || (e(7827) || A2(r, 7829, 7837)))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(7844) ? ((e(7838) || (e(7840) || e(7842))) ? $elm$core$Maybe$Just(0) : ((e(7839) || (e(7841) || e(7843))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(7844) || (e(7846) || (e(7848) || e(7850)))) ? $elm$core$Maybe$Just(0) : ((e(7845) || (e(7847) || (e(7849) || e(7851)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))) : (l(7877) ? (l(7863) ? ((e(7852) || (e(7854) || (e(7856) || (e(7858) || (e(7860) || e(7862)))))) ? $elm$core$Maybe$Just(0) : ((e(7853) || (e(7855) || (e(7857) || (e(7859) || e(7861))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(7869) ? ((e(7863) || (e(7865) || e(7867))) ? $elm$core$Maybe$Just(1) : ((e(7864) || (e(7866) || e(7868))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(7869) || (e(7871) || (e(7873) || e(7875)))) ? $elm$core$Maybe$Just(1) : ((e(7870) || (e(7872) || (e(7874) || e(7876)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))) : (l(7889) ? ((e(7877) || (e(7879) || (e(7881) || (e(7883) || (e(7885) || e(7887)))))) ? $elm$core$Maybe$Just(1) : ((e(7878) || (e(7880) || (e(7882) || (e(7884) || (e(7886) || e(7888)))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(7895) ? ((e(7889) || (e(7891) || e(7893))) ? $elm$core$Maybe$Just(1) : ((e(7890) || (e(7892) || e(7894))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(7895) || (e(7897) || (e(7899) || (e(7901) || e(7903))))) ? $elm$core$Maybe$Just(1) : ((e(7896) || (e(7898) || (e(7900) || e(7902)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))))))) : (l(8273) ? (l(8103) ? (l(7928) ? (l(7915) ? ((e(7904) || (e(7906) || (e(7908) || (e(7910) || (e(7912) || e(7914)))))) ? $elm$core$Maybe$Just(0) : ((e(7905) || (e(7907) || (e(7909) || (e(7911) || e(7913))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(7920) ? ((e(7915) || (e(7917) || e(7919))) ? $elm$core$Maybe$Just(1) : ((e(7916) || e(7918)) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(7920) || (e(7922) || (e(7924) || e(7926)))) ? $elm$core$Maybe$Just(0) : ((e(7921) || (e(7923) || (e(7925) || e(7927)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))) : (l(7983) ? (l(7933) ? ((e(7928) || (e(7930) || e(7932))) ? $elm$core$Maybe$Just(0) : ((e(7929) || e(7931)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(7933) || (A2(r, 7935, 7943) || (A2(r, 7952, 7957) || A2(r, 7968, 7975)))) ? $elm$core$Maybe$Just(1) : ((e(7934) || (A2(r, 7944, 7951) || (A2(r, 7960, 7965) || A2(r, 7976, 7982)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))) : (l(8039) ? ((e(7983) || (A2(r, 7992, 7999) || (A2(r, 8008, 8013) || ((_Basics_modBy_fn(2, code) === 1) && A2(r, 8025, 8031))))) ? $elm$core$Maybe$Just(0) : ((A2(r, 7984, 7991) || (A2(r, 8000, 8005) || (A2(r, 8016, 8023) || A2(r, 8032, 8038)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(8039) || (A2(r, 8048, 8061) || (A2(r, 8064, 8071) || (A2(r, 8080, 8087) || A2(r, 8096, 8102))))) ? $elm$core$Maybe$Just(1) : (A2(r, 8040, 8047) ? $elm$core$Maybe$Just(0) : ((A2(r, 8072, 8079) || A2(r, 8088, 8095)) ? $elm$core$Maybe$Just(2) : $elm$core$Maybe$Nothing)))))) : (l(8191) ? (l(8140) ? ((e(8103) || (A2(r, 8112, 8116) || (A2(r, 8118, 8119) || (e(8126) || (A2(r, 8130, 8132) || A2(r, 8134, 8135)))))) ? $elm$core$Maybe$Just(1) : ((A2(r, 8104, 8111) || e(8124)) ? $elm$core$Maybe$Just(2) : ((A2(r, 8120, 8123) || A2(r, 8136, 8139)) ? $elm$core$Maybe$Just(0) : ((e(8125) || A2(r, 8127, 8129)) ? $elm$core$Maybe$Just(28) : $elm$core$Maybe$Nothing)))) : (l(8167) ? (e(8140) ? $elm$core$Maybe$Just(2) : ((A2(r, 8141, 8143) || A2(r, 8157, 8159)) ? $elm$core$Maybe$Just(28) : ((A2(r, 8144, 8147) || (A2(r, 8150, 8151) || A2(r, 8160, 8166))) ? $elm$core$Maybe$Just(1) : (A2(r, 8152, 8155) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))) : ((e(8167) || (A2(r, 8178, 8180) || A2(r, 8182, 8183))) ? $elm$core$Maybe$Just(1) : ((A2(r, 8168, 8172) || A2(r, 8184, 8187)) ? $elm$core$Maybe$Just(0) : ((A2(r, 8173, 8175) || A2(r, 8189, 8190)) ? $elm$core$Maybe$Just(28) : (e(8188) ? $elm$core$Maybe$Just(2) : $elm$core$Maybe$Nothing)))))) : (l(8232) ? (A2(r, 8192, 8202) ? $elm$core$Maybe$Just(9) : (A2(r, 8203, 8207) ? $elm$core$Maybe$Just(13) : (A2(r, 8208, 8213) ? $elm$core$Maybe$Just(20) : ((A2(r, 8214, 8215) || A2(r, 8224, 8231)) ? $elm$core$Maybe$Just(25) : ((e(8216) || (A2(r, 8219, 8220) || e(8223))) ? $elm$core$Maybe$Just(23) : ((e(8217) || e(8221)) ? $elm$core$Maybe$Just(24) : ((e(8218) || e(8222)) ? $elm$core$Maybe$Just(21) : $elm$core$Maybe$Nothing))))))) : (l(8250) ? (e(8232) ? $elm$core$Maybe$Just(10) : (e(8233) ? $elm$core$Maybe$Just(11) : (A2(r, 8234, 8238) ? $elm$core$Maybe$Just(13) : (e(8239) ? $elm$core$Maybe$Just(9) : (A2(r, 8240, 8248) ? $elm$core$Maybe$Just(25) : (e(8249) ? $elm$core$Maybe$Just(23) : $elm$core$Maybe$Nothing)))))) : (e(8250) ? $elm$core$Maybe$Just(24) : ((A2(r, 8251, 8254) || (A2(r, 8257, 8259) || A2(r, 8263, 8272))) ? $elm$core$Maybe$Just(25) : (A2(r, 8255, 8256) ? $elm$core$Maybe$Just(19) : (e(8260) ? $elm$core$Maybe$Just(26) : (e(8261) ? $elm$core$Maybe$Just(21) : (e(8262) ? $elm$core$Maybe$Just(22) : $elm$core$Maybe$Nothing)))))))))) : (l(8495) ? (l(8420) ? (l(8316) ? ((e(8273) || (e(8275) || A2(r, 8277, 8286))) ? $elm$core$Maybe$Just(25) : ((e(8274) || A2(r, 8314, 8315)) ? $elm$core$Maybe$Just(26) : (e(8276) ? $elm$core$Maybe$Just(19) : (e(8287) ? $elm$core$Maybe$Just(9) : ((A2(r, 8288, 8292) || A2(r, 8294, 8303)) ? $elm$core$Maybe$Just(13) : ((e(8304) || A2(r, 8308, 8313)) ? $elm$core$Maybe$Just(8) : (e(8305) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))))))) : (l(8333) ? ((e(8316) || A2(r, 8330, 8332)) ? $elm$core$Maybe$Just(26) : (e(8317) ? $elm$core$Maybe$Just(21) : (e(8318) ? $elm$core$Maybe$Just(22) : (e(8319) ? $elm$core$Maybe$Just(17) : (A2(r, 8320, 8329) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing))))) : (e(8333) ? $elm$core$Maybe$Just(21) : (e(8334) ? $elm$core$Maybe$Just(22) : (A2(r, 8336, 8348) ? $elm$core$Maybe$Just(17) : (A2(r, 8352, 8384) ? $elm$core$Maybe$Just(27) : ((A2(r, 8400, 8412) || e(8417)) ? $elm$core$Maybe$Just(3) : ((A2(r, 8413, 8416) || A2(r, 8418, 8419)) ? $elm$core$Maybe$Just(5) : $elm$core$Maybe$Nothing)))))))) : (l(8468) ? (e(8420) ? $elm$core$Maybe$Just(5) : (A2(r, 8421, 8432) ? $elm$core$Maybe$Just(3) : ((A2(r, 8448, 8449) || (A2(r, 8451, 8454) || A2(r, 8456, 8457))) ? $elm$core$Maybe$Just(29) : ((e(8450) || (e(8455) || (A2(r, 8459, 8461) || A2(r, 8464, 8466)))) ? $elm$core$Maybe$Just(0) : ((e(8458) || (A2(r, 8462, 8463) || e(8467))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))) : (l(8484) ? ((e(8468) || (A2(r, 8470, 8471) || A2(r, 8478, 8483))) ? $elm$core$Maybe$Just(29) : ((e(8469) || A2(r, 8473, 8477)) ? $elm$core$Maybe$Just(0) : (e(8472) ? $elm$core$Maybe$Just(26) : $elm$core$Maybe$Nothing))) : ((e(8484) || (e(8486) || (e(8488) || A2(r, 8490, 8493)))) ? $elm$core$Maybe$Just(0) : ((e(8485) || (e(8487) || (e(8489) || e(8494)))) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing))))) : (l(8603) ? (l(8523) ? ((e(8495) || (e(8500) || (e(8505) || (A2(r, 8508, 8509) || A2(r, 8518, 8521))))) ? $elm$core$Maybe$Just(1) : ((A2(r, 8496, 8499) || (A2(r, 8510, 8511) || e(8517))) ? $elm$core$Maybe$Just(0) : (A2(r, 8501, 8504) ? $elm$core$Maybe$Just(18) : ((A2(r, 8506, 8507) || e(8522)) ? $elm$core$Maybe$Just(29) : (A2(r, 8512, 8516) ? $elm$core$Maybe$Just(26) : $elm$core$Maybe$Nothing))))) : (l(8579) ? (e(8523) ? $elm$core$Maybe$Just(26) : ((A2(r, 8524, 8525) || e(8527)) ? $elm$core$Maybe$Just(29) : (e(8526) ? $elm$core$Maybe$Just(1) : (A2(r, 8528, 8543) ? $elm$core$Maybe$Just(8) : (A2(r, 8544, 8578) ? $elm$core$Maybe$Just(7) : $elm$core$Maybe$Nothing))))) : (e(8579) ? $elm$core$Maybe$Just(0) : (e(8580) ? $elm$core$Maybe$Just(1) : (A2(r, 8581, 8584) ? $elm$core$Maybe$Just(7) : (e(8585) ? $elm$core$Maybe$Just(8) : ((A2(r, 8586, 8587) || A2(r, 8597, 8601)) ? $elm$core$Maybe$Just(29) : ((A2(r, 8592, 8596) || e(8602)) ? $elm$core$Maybe$Just(26) : $elm$core$Maybe$Nothing)))))))) : (l(8659) ? (l(8613) ? ((e(8603) || (e(8608) || e(8611))) ? $elm$core$Maybe$Just(26) : ((A2(r, 8604, 8607) || (A2(r, 8609, 8610) || e(8612))) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing)) : ((e(8613) || (A2(r, 8615, 8621) || (A2(r, 8623, 8653) || A2(r, 8656, 8657)))) ? $elm$core$Maybe$Just(29) : ((e(8614) || (e(8622) || (A2(r, 8654, 8655) || e(8658)))) ? $elm$core$Maybe$Just(26) : $elm$core$Maybe$Nothing))) : (l(8969) ? ((e(8659) || (A2(r, 8661, 8691) || A2(r, 8960, 8967))) ? $elm$core$Maybe$Just(29) : ((e(8660) || A2(r, 8692, 8959)) ? $elm$core$Maybe$Just(26) : (e(8968) ? $elm$core$Maybe$Just(21) : $elm$core$Maybe$Nothing))) : ((e(8969) || (e(8971) || e(9002))) ? $elm$core$Maybe$Just(22) : ((e(8970) || e(9001)) ? $elm$core$Maybe$Just(21) : ((A2(r, 8972, 8991) || (A2(r, 8994, 9000) || A2(r, 9003, 9083))) ? $elm$core$Maybe$Just(29) : (A2(r, 8992, 8993) ? $elm$core$Maybe$Just(26) : $elm$core$Maybe$Nothing)))))))))))) : (l(65103) ? (l(42587) ? (l(11483) ? (l(11370) ? (l(10223) ? (l(10092) ? (l(9654) ? ((e(9084) || (A2(r, 9115, 9139) || A2(r, 9180, 9185))) ? $elm$core$Maybe$Just(26) : ((A2(r, 9085, 9114) || (A2(r, 9140, 9179) || (A2(r, 9186, 9254) || (A2(r, 9280, 9290) || (A2(r, 9372, 9449) || A2(r, 9472, 9653)))))) ? $elm$core$Maybe$Just(29) : ((A2(r, 9312, 9371) || A2(r, 9450, 9471)) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing))) : (l(9727) ? ((e(9654) || (A2(r, 9656, 9664) || A2(r, 9666, 9719))) ? $elm$core$Maybe$Just(29) : ((e(9655) || (e(9665) || A2(r, 9720, 9726))) ? $elm$core$Maybe$Just(26) : $elm$core$Maybe$Nothing)) : ((e(9727) || e(9839)) ? $elm$core$Maybe$Just(26) : ((A2(r, 9728, 9838) || A2(r, 9840, 10087)) ? $elm$core$Maybe$Just(29) : ((e(10088) || e(10090)) ? $elm$core$Maybe$Just(21) : ((e(10089) || e(10091)) ? $elm$core$Maybe$Just(22) : $elm$core$Maybe$Nothing)))))) : (l(10175) ? ((e(10092) || (e(10094) || (e(10096) || (e(10098) || e(10100))))) ? $elm$core$Maybe$Just(21) : ((e(10093) || (e(10095) || (e(10097) || (e(10099) || e(10101))))) ? $elm$core$Maybe$Just(22) : (A2(r, 10102, 10131) ? $elm$core$Maybe$Just(8) : (A2(r, 10132, 10174) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing)))) : (l(10215) ? (e(10175) ? $elm$core$Maybe$Just(29) : ((A2(r, 10176, 10180) || A2(r, 10183, 10213)) ? $elm$core$Maybe$Just(26) : ((e(10181) || e(10214)) ? $elm$core$Maybe$Just(21) : (e(10182) ? $elm$core$Maybe$Just(22) : $elm$core$Maybe$Nothing)))) : ((e(10215) || (e(10217) || (e(10219) || e(10221)))) ? $elm$core$Maybe$Just(22) : ((e(10216) || (e(10218) || (e(10220) || e(10222)))) ? $elm$core$Maybe$Just(21) : $elm$core$Maybe$Nothing))))) : (l(10647) ? (l(10634) ? ((e(10223) || (e(10628) || (e(10630) || e(10632)))) ? $elm$core$Maybe$Just(22) : ((A2(r, 10224, 10239) || A2(r, 10496, 10626)) ? $elm$core$Maybe$Just(26) : (A2(r, 10240, 10495) ? $elm$core$Maybe$Just(29) : ((e(10627) || (e(10629) || (e(10631) || e(10633)))) ? $elm$core$Maybe$Just(21) : $elm$core$Maybe$Nothing)))) : (l(10639) ? ((e(10634) || (e(10636) || e(10638))) ? $elm$core$Maybe$Just(22) : ((e(10635) || e(10637)) ? $elm$core$Maybe$Just(21) : $elm$core$Maybe$Nothing)) : ((e(10639) || (e(10641) || (e(10643) || e(10645)))) ? $elm$core$Maybe$Just(21) : ((e(10640) || (e(10642) || (e(10644) || e(10646)))) ? $elm$core$Maybe$Just(22) : $elm$core$Maybe$Nothing)))) : (l(11076) ? (l(10714) ? ((e(10647) || e(10712)) ? $elm$core$Maybe$Just(21) : ((e(10648) || e(10713)) ? $elm$core$Maybe$Just(22) : (A2(r, 10649, 10711) ? $elm$core$Maybe$Just(26) : $elm$core$Maybe$Nothing))) : ((e(10714) || e(10748)) ? $elm$core$Maybe$Just(21) : ((e(10715) || e(10749)) ? $elm$core$Maybe$Just(22) : ((A2(r, 10716, 10747) || (A2(r, 10750, 11007) || A2(r, 11056, 11075))) ? $elm$core$Maybe$Just(26) : (A2(r, 11008, 11055) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing))))) : (l(11311) ? ((e(11076) || A2(r, 11079, 11084)) ? $elm$core$Maybe$Just(26) : ((A2(r, 11077, 11078) || (A2(r, 11085, 11123) || (A2(r, 11126, 11157) || A2(r, 11159, 11263)))) ? $elm$core$Maybe$Just(29) : (A2(r, 11264, 11310) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))) : ((e(11311) || (e(11360) || (A2(r, 11362, 11364) || (e(11367) || e(11369))))) ? $elm$core$Maybe$Just(0) : ((A2(r, 11312, 11359) || (e(11361) || (A2(r, 11365, 11366) || e(11368)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))))) : (l(11431) ? (l(11405) ? (l(11392) ? ((e(11370) || (e(11372) || (e(11377) || (A2(r, 11379, 11380) || A2(r, 11382, 11387))))) ? $elm$core$Maybe$Just(1) : ((e(11371) || (A2(r, 11373, 11376) || (e(11378) || (e(11381) || A2(r, 11390, 11391))))) ? $elm$core$Maybe$Just(0) : (A2(r, 11388, 11389) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))) : (l(11397) ? ((e(11392) || (e(11394) || e(11396))) ? $elm$core$Maybe$Just(0) : ((e(11393) || e(11395)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(11397) || (e(11399) || (e(11401) || e(11403)))) ? $elm$core$Maybe$Just(1) : ((e(11398) || (e(11400) || (e(11402) || e(11404)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))) : (l(11417) ? ((e(11405) || (e(11407) || (e(11409) || (e(11411) || (e(11413) || e(11415)))))) ? $elm$core$Maybe$Just(1) : ((e(11406) || (e(11408) || (e(11410) || (e(11412) || (e(11414) || e(11416)))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(11423) ? ((e(11417) || (e(11419) || e(11421))) ? $elm$core$Maybe$Just(1) : ((e(11418) || (e(11420) || e(11422))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(11423) || (e(11425) || (e(11427) || e(11429)))) ? $elm$core$Maybe$Just(1) : ((e(11424) || (e(11426) || (e(11428) || e(11430)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))))) : (l(11456) ? (l(11442) ? ((e(11431) || (e(11433) || (e(11435) || (e(11437) || (e(11439) || e(11441)))))) ? $elm$core$Maybe$Just(1) : ((e(11432) || (e(11434) || (e(11436) || (e(11438) || e(11440))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(11448) ? ((e(11442) || (e(11444) || e(11446))) ? $elm$core$Maybe$Just(0) : ((e(11443) || (e(11445) || e(11447))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(11448) || (e(11450) || (e(11452) || e(11454)))) ? $elm$core$Maybe$Just(0) : ((e(11449) || (e(11451) || (e(11453) || e(11455)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))) : (l(11468) ? ((e(11456) || (e(11458) || (e(11460) || (e(11462) || (e(11464) || e(11466)))))) ? $elm$core$Maybe$Just(0) : ((e(11457) || (e(11459) || (e(11461) || (e(11463) || (e(11465) || e(11467)))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(11474) ? ((e(11468) || (e(11470) || e(11472))) ? $elm$core$Maybe$Just(0) : ((e(11469) || (e(11471) || e(11473))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(11474) || (e(11476) || (e(11478) || (e(11480) || e(11482))))) ? $elm$core$Maybe$Just(0) : ((e(11475) || (e(11477) || (e(11479) || e(11481)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))))) : (l(12300) ? (l(11799) ? (l(11630) ? (l(11500) ? ((e(11483) || (e(11485) || (e(11487) || (e(11489) || A2(r, 11491, 11492))))) ? $elm$core$Maybe$Just(1) : ((e(11484) || (e(11486) || (e(11488) || (e(11490) || e(11499))))) ? $elm$core$Maybe$Just(0) : (A2(r, 11493, 11498) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing))) : (l(11512) ? ((e(11500) || (e(11502) || e(11507))) ? $elm$core$Maybe$Just(1) : ((e(11501) || e(11506)) ? $elm$core$Maybe$Just(0) : (A2(r, 11503, 11505) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))) : ((A2(r, 11513, 11516) || A2(r, 11518, 11519)) ? $elm$core$Maybe$Just(25) : (e(11517) ? $elm$core$Maybe$Just(8) : ((A2(r, 11520, 11557) || (e(11559) || e(11565))) ? $elm$core$Maybe$Just(1) : (A2(r, 11568, 11623) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))))) : (l(11743) ? (e(11631) ? $elm$core$Maybe$Just(17) : (e(11632) ? $elm$core$Maybe$Just(25) : (e(11647) ? $elm$core$Maybe$Just(3) : ((A2(r, 11648, 11670) || (A2(r, 11680, 11686) || (A2(r, 11688, 11694) || (A2(r, 11696, 11702) || (A2(r, 11704, 11710) || (A2(r, 11712, 11718) || (A2(r, 11720, 11726) || (A2(r, 11728, 11734) || A2(r, 11736, 11742))))))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))) : (l(11781) ? (A2(r, 11744, 11775) ? $elm$core$Maybe$Just(3) : (A2(r, 11776, 11777) ? $elm$core$Maybe$Just(25) : ((e(11778) || e(11780)) ? $elm$core$Maybe$Just(23) : (e(11779) ? $elm$core$Maybe$Just(24) : $elm$core$Maybe$Nothing)))) : ((e(11781) || (e(11786) || e(11789))) ? $elm$core$Maybe$Just(24) : ((A2(r, 11782, 11784) || (e(11787) || A2(r, 11790, 11798))) ? $elm$core$Maybe$Just(25) : ((e(11785) || e(11788)) ? $elm$core$Maybe$Just(23) : $elm$core$Maybe$Nothing)))))) : (l(11842) ? (l(11812) ? ((e(11799) || e(11802)) ? $elm$core$Maybe$Just(20) : ((A2(r, 11800, 11801) || (e(11803) || A2(r, 11806, 11807))) ? $elm$core$Maybe$Just(25) : ((e(11804) || e(11808)) ? $elm$core$Maybe$Just(23) : ((e(11805) || e(11809)) ? $elm$core$Maybe$Just(24) : (e(11810) ? $elm$core$Maybe$Just(21) : (e(11811) ? $elm$core$Maybe$Just(22) : $elm$core$Maybe$Nothing)))))) : (l(11817) ? ((e(11812) || (e(11814) || e(11816))) ? $elm$core$Maybe$Just(21) : ((e(11813) || e(11815)) ? $elm$core$Maybe$Just(22) : $elm$core$Maybe$Nothing)) : (e(11817) ? $elm$core$Maybe$Just(22) : ((A2(r, 11818, 11822) || (A2(r, 11824, 11833) || (A2(r, 11836, 11839) || e(11841)))) ? $elm$core$Maybe$Just(25) : (e(11823) ? $elm$core$Maybe$Just(17) : ((A2(r, 11834, 11835) || e(11840)) ? $elm$core$Maybe$Just(20) : $elm$core$Maybe$Nothing)))))) : (l(11903) ? (l(11862) ? ((e(11842) || e(11861)) ? $elm$core$Maybe$Just(21) : ((A2(r, 11843, 11855) || A2(r, 11858, 11860)) ? $elm$core$Maybe$Just(25) : (A2(r, 11856, 11857) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing))) : ((e(11862) || (e(11864) || (e(11866) || e(11868)))) ? $elm$core$Maybe$Just(22) : ((e(11863) || (e(11865) || e(11867))) ? $elm$core$Maybe$Just(21) : (e(11869) ? $elm$core$Maybe$Just(20) : $elm$core$Maybe$Nothing)))) : (l(12292) ? ((A2(r, 11904, 11929) || (A2(r, 11931, 12019) || (A2(r, 12032, 12245) || A2(r, 12272, 12287)))) ? $elm$core$Maybe$Just(29) : (e(12288) ? $elm$core$Maybe$Just(9) : (A2(r, 12289, 12291) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))) : (e(12292) ? $elm$core$Maybe$Just(29) : (e(12293) ? $elm$core$Maybe$Just(17) : (e(12294) ? $elm$core$Maybe$Just(18) : (e(12295) ? $elm$core$Maybe$Just(7) : ((e(12296) || e(12298)) ? $elm$core$Maybe$Just(21) : ((e(12297) || e(12299)) ? $elm$core$Maybe$Just(22) : $elm$core$Maybe$Nothing)))))))))) : (l(12841) ? (l(12343) ? (l(12312) ? ((e(12300) || (e(12302) || (e(12304) || (e(12308) || e(12310))))) ? $elm$core$Maybe$Just(21) : ((e(12301) || (e(12303) || (e(12305) || (e(12309) || e(12311))))) ? $elm$core$Maybe$Just(22) : (A2(r, 12306, 12307) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing))) : (l(12319) ? ((e(12312) || (e(12314) || e(12317))) ? $elm$core$Maybe$Just(21) : ((e(12313) || (e(12315) || e(12318))) ? $elm$core$Maybe$Just(22) : (e(12316) ? $elm$core$Maybe$Just(20) : $elm$core$Maybe$Nothing))) : (e(12319) ? $elm$core$Maybe$Just(22) : ((e(12320) || e(12342)) ? $elm$core$Maybe$Just(29) : (A2(r, 12321, 12329) ? $elm$core$Maybe$Just(7) : (A2(r, 12330, 12333) ? $elm$core$Maybe$Just(3) : (A2(r, 12334, 12335) ? $elm$core$Maybe$Just(4) : (e(12336) ? $elm$core$Maybe$Just(20) : (A2(r, 12337, 12341) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))))))))) : (l(12538) ? (l(12352) ? ((e(12343) || A2(r, 12350, 12351)) ? $elm$core$Maybe$Just(29) : (A2(r, 12344, 12346) ? $elm$core$Maybe$Just(7) : (e(12347) ? $elm$core$Maybe$Just(17) : (e(12348) ? $elm$core$Maybe$Just(18) : (e(12349) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))))) : ((A2(r, 12353, 12438) || (e(12447) || A2(r, 12449, 12537))) ? $elm$core$Maybe$Just(18) : (A2(r, 12441, 12442) ? $elm$core$Maybe$Just(3) : (A2(r, 12443, 12444) ? $elm$core$Maybe$Just(28) : (A2(r, 12445, 12446) ? $elm$core$Maybe$Just(17) : (e(12448) ? $elm$core$Maybe$Just(20) : $elm$core$Maybe$Nothing)))))) : (l(12689) ? ((e(12538) || (e(12543) || (A2(r, 12549, 12591) || A2(r, 12593, 12686)))) ? $elm$core$Maybe$Just(18) : (e(12539) ? $elm$core$Maybe$Just(25) : (A2(r, 12540, 12542) ? $elm$core$Maybe$Just(17) : (e(12688) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing)))) : ((e(12689) || (A2(r, 12694, 12703) || (A2(r, 12736, 12771) || (e(12783) || A2(r, 12800, 12830))))) ? $elm$core$Maybe$Just(29) : ((A2(r, 12690, 12693) || A2(r, 12832, 12840)) ? $elm$core$Maybe$Just(8) : ((A2(r, 12704, 12735) || A2(r, 12784, 12799)) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))))) : (l(42560) ? (l(19967) ? ((e(12841) || (A2(r, 12872, 12879) || (A2(r, 12881, 12895) || (A2(r, 12928, 12937) || A2(r, 12977, 12991))))) ? $elm$core$Maybe$Just(8) : ((A2(r, 12842, 12871) || (e(12880) || (A2(r, 12896, 12927) || (A2(r, 12938, 12976) || (A2(r, 12992, 13311) || A2(r, 19904, 19966)))))) ? $elm$core$Maybe$Just(29) : (A2(r, 13312, 19903) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))) : (l(42237) ? ((e(19967) || A2(r, 42128, 42182)) ? $elm$core$Maybe$Just(29) : ((A2(r, 19968, 40980) || (A2(r, 40982, 42124) || A2(r, 42192, 42231))) ? $elm$core$Maybe$Just(18) : ((e(40981) || A2(r, 42232, 42236)) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))) : ((e(42237) || e(42508)) ? $elm$core$Maybe$Just(17) : ((A2(r, 42238, 42239) || A2(r, 42509, 42511)) ? $elm$core$Maybe$Just(25) : ((A2(r, 42240, 42507) || (A2(r, 42512, 42527) || A2(r, 42538, 42539))) ? $elm$core$Maybe$Just(18) : (A2(r, 42528, 42537) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing)))))) : (l(42572) ? ((e(42560) || (e(42562) || (e(42564) || (e(42566) || (e(42568) || e(42570)))))) ? $elm$core$Maybe$Just(0) : ((e(42561) || (e(42563) || (e(42565) || (e(42567) || (e(42569) || e(42571)))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(42578) ? ((e(42572) || (e(42574) || e(42576))) ? $elm$core$Maybe$Just(0) : ((e(42573) || (e(42575) || e(42577))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(42578) || (e(42580) || (e(42582) || (e(42584) || e(42586))))) ? $elm$core$Maybe$Just(0) : ((e(42579) || (e(42581) || (e(42583) || e(42585)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))))))) : (l(42945) ? (l(42824) ? (l(42646) ? (l(42621) ? (l(42598) ? ((e(42587) || (e(42589) || (e(42591) || (e(42593) || (e(42595) || e(42597)))))) ? $elm$core$Maybe$Just(1) : ((e(42588) || (e(42590) || (e(42592) || (e(42594) || e(42596))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(42603) ? ((e(42598) || (e(42600) || e(42602))) ? $elm$core$Maybe$Just(0) : ((e(42599) || e(42601)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(42603) || e(42605)) ? $elm$core$Maybe$Just(1) : (e(42604) ? $elm$core$Maybe$Just(0) : (e(42606) ? $elm$core$Maybe$Just(18) : ((e(42607) || A2(r, 42612, 42620)) ? $elm$core$Maybe$Just(3) : (A2(r, 42608, 42610) ? $elm$core$Maybe$Just(5) : (e(42611) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))))))) : (l(42632) ? (e(42621) ? $elm$core$Maybe$Just(3) : (e(42622) ? $elm$core$Maybe$Just(25) : (e(42623) ? $elm$core$Maybe$Just(17) : ((e(42624) || (e(42626) || (e(42628) || e(42630)))) ? $elm$core$Maybe$Just(0) : ((e(42625) || (e(42627) || (e(42629) || e(42631)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))) : (l(42638) ? ((e(42632) || (e(42634) || e(42636))) ? $elm$core$Maybe$Just(0) : ((e(42633) || (e(42635) || e(42637))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(42638) || (e(42640) || (e(42642) || e(42644)))) ? $elm$core$Maybe$Just(0) : ((e(42639) || (e(42641) || (e(42643) || e(42645)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))) : (l(42795) ? (l(42751) ? ((e(42646) || (e(42648) || e(42650))) ? $elm$core$Maybe$Just(0) : ((e(42647) || (e(42649) || e(42651))) ? $elm$core$Maybe$Just(1) : (A2(r, 42652, 42653) ? $elm$core$Maybe$Just(17) : ((A2(r, 42654, 42655) || A2(r, 42736, 42737)) ? $elm$core$Maybe$Just(3) : (A2(r, 42656, 42725) ? $elm$core$Maybe$Just(18) : (A2(r, 42726, 42735) ? $elm$core$Maybe$Just(7) : (A2(r, 42738, 42743) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))))))) : ((A2(r, 42752, 42774) || A2(r, 42784, 42785)) ? $elm$core$Maybe$Just(28) : (A2(r, 42775, 42783) ? $elm$core$Maybe$Just(17) : ((e(42786) || (e(42788) || (e(42790) || (e(42792) || e(42794))))) ? $elm$core$Maybe$Just(0) : ((e(42787) || (e(42789) || (e(42791) || e(42793)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))) : (l(42809) ? ((e(42795) || (e(42797) || (A2(r, 42799, 42801) || (e(42803) || (e(42805) || e(42807)))))) ? $elm$core$Maybe$Just(1) : ((e(42796) || (e(42798) || (e(42802) || (e(42804) || (e(42806) || e(42808)))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(42815) ? ((e(42809) || (e(42811) || e(42813))) ? $elm$core$Maybe$Just(1) : ((e(42810) || (e(42812) || e(42814))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(42815) || (e(42817) || (e(42819) || (e(42821) || e(42823))))) ? $elm$core$Maybe$Just(1) : ((e(42816) || (e(42818) || (e(42820) || e(42822)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))))) : (l(42882) ? (l(42848) ? (l(42835) ? ((e(42824) || (e(42826) || (e(42828) || (e(42830) || (e(42832) || e(42834)))))) ? $elm$core$Maybe$Just(0) : ((e(42825) || (e(42827) || (e(42829) || (e(42831) || e(42833))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(42840) ? ((e(42835) || (e(42837) || e(42839))) ? $elm$core$Maybe$Just(1) : ((e(42836) || e(42838)) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((e(42840) || (e(42842) || (e(42844) || e(42846)))) ? $elm$core$Maybe$Just(0) : ((e(42841) || (e(42843) || (e(42845) || e(42847)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))) : (l(42860) ? ((e(42848) || (e(42850) || (e(42852) || (e(42854) || (e(42856) || e(42858)))))) ? $elm$core$Maybe$Just(0) : ((e(42849) || (e(42851) || (e(42853) || (e(42855) || (e(42857) || e(42859)))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(42873) ? ((e(42860) || e(42862)) ? $elm$core$Maybe$Just(0) : ((e(42861) || (e(42863) || A2(r, 42865, 42872))) ? $elm$core$Maybe$Just(1) : (e(42864) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))) : ((e(42873) || (e(42875) || (A2(r, 42877, 42878) || e(42880)))) ? $elm$core$Maybe$Just(0) : ((e(42874) || (e(42876) || (e(42879) || e(42881)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))) : (l(42910) ? (l(42894) ? ((e(42882) || (e(42884) || (e(42886) || (e(42891) || e(42893))))) ? $elm$core$Maybe$Just(0) : ((e(42883) || (e(42885) || (e(42887) || e(42892)))) ? $elm$core$Maybe$Just(1) : (e(42888) ? $elm$core$Maybe$Just(17) : (A2(r, 42889, 42890) ? $elm$core$Maybe$Just(28) : $elm$core$Maybe$Nothing)))) : (l(42902) ? ((e(42894) || (e(42897) || A2(r, 42899, 42901))) ? $elm$core$Maybe$Just(1) : (e(42895) ? $elm$core$Maybe$Just(18) : ((e(42896) || e(42898)) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))) : ((e(42902) || (e(42904) || (e(42906) || e(42908)))) ? $elm$core$Maybe$Just(0) : ((e(42903) || (e(42905) || (e(42907) || e(42909)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))) : (l(42926) ? (l(42915) ? ((e(42910) || (e(42912) || e(42914))) ? $elm$core$Maybe$Just(0) : ((e(42911) || e(42913)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(42915) || (e(42917) || (e(42919) || e(42921)))) ? $elm$core$Maybe$Just(1) : ((e(42916) || (e(42918) || (e(42920) || A2(r, 42922, 42925)))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))) : (l(42936) ? ((e(42926) || (A2(r, 42928, 42932) || e(42934))) ? $elm$core$Maybe$Just(0) : ((e(42927) || (e(42933) || e(42935))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : ((e(42936) || (e(42938) || (e(42940) || (e(42942) || e(42944))))) ? $elm$core$Maybe$Just(0) : ((e(42937) || (e(42939) || (e(42941) || e(42943)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))))) : (l(43697) ? (l(43273) ? (l(43042) ? (l(42993) ? ((e(42945) || (e(42947) || (e(42952) || (e(42954) || (e(42967) || (e(42969) || ((_Basics_modBy_fn(2, code) === 1) && A2(r, 42961, 42965)))))))) ? $elm$core$Maybe$Just(1) : ((e(42946) || (A2(r, 42948, 42951) || (e(42953) || (e(42960) || (e(42966) || e(42968)))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : (l(43002) ? ((A2(r, 42994, 42996) || A2(r, 43000, 43001)) ? $elm$core$Maybe$Just(17) : (e(42997) ? $elm$core$Maybe$Just(0) : (e(42998) ? $elm$core$Maybe$Just(1) : (e(42999) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))) : (e(43002) ? $elm$core$Maybe$Just(1) : ((A2(r, 43003, 43009) || (A2(r, 43011, 43013) || (A2(r, 43015, 43018) || A2(r, 43020, 43041)))) ? $elm$core$Maybe$Just(18) : ((e(43010) || (e(43014) || e(43019))) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))))) : (l(43137) ? (l(43055) ? (e(43042) ? $elm$core$Maybe$Just(18) : ((A2(r, 43043, 43044) || e(43047)) ? $elm$core$Maybe$Just(4) : ((A2(r, 43045, 43046) || e(43052)) ? $elm$core$Maybe$Just(3) : (A2(r, 43048, 43051) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing)))) : (A2(r, 43056, 43061) ? $elm$core$Maybe$Just(8) : ((A2(r, 43062, 43063) || e(43065)) ? $elm$core$Maybe$Just(29) : (e(43064) ? $elm$core$Maybe$Just(27) : (A2(r, 43072, 43123) ? $elm$core$Maybe$Just(18) : (A2(r, 43124, 43127) ? $elm$core$Maybe$Just(25) : (e(43136) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))))))) : (l(43249) ? ((e(43137) || A2(r, 43188, 43203)) ? $elm$core$Maybe$Just(4) : (A2(r, 43138, 43187) ? $elm$core$Maybe$Just(18) : ((A2(r, 43204, 43205) || A2(r, 43232, 43248)) ? $elm$core$Maybe$Just(3) : (A2(r, 43214, 43215) ? $elm$core$Maybe$Just(25) : (A2(r, 43216, 43225) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))))) : ((e(43249) || e(43263)) ? $elm$core$Maybe$Just(3) : ((A2(r, 43250, 43255) || (e(43259) || A2(r, 43261, 43262))) ? $elm$core$Maybe$Just(18) : ((A2(r, 43256, 43258) || e(43260)) ? $elm$core$Maybe$Just(25) : (A2(r, 43264, 43272) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))))))) : (l(43494) ? (l(43442) ? (e(43273) ? $elm$core$Maybe$Just(6) : ((A2(r, 43274, 43301) || (A2(r, 43312, 43334) || (A2(r, 43360, 43388) || A2(r, 43396, 43441)))) ? $elm$core$Maybe$Just(18) : ((A2(r, 43302, 43309) || (A2(r, 43335, 43345) || A2(r, 43392, 43394))) ? $elm$core$Maybe$Just(3) : ((A2(r, 43310, 43311) || e(43359)) ? $elm$core$Maybe$Just(25) : ((A2(r, 43346, 43347) || e(43395)) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))))) : (l(43453) ? (e(43442) ? $elm$core$Maybe$Just(18) : ((e(43443) || (A2(r, 43446, 43449) || e(43452))) ? $elm$core$Maybe$Just(3) : ((A2(r, 43444, 43445) || A2(r, 43450, 43451)) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))) : ((e(43453) || e(43493)) ? $elm$core$Maybe$Just(3) : (A2(r, 43454, 43456) ? $elm$core$Maybe$Just(4) : ((A2(r, 43457, 43469) || A2(r, 43486, 43487)) ? $elm$core$Maybe$Just(25) : (e(43471) ? $elm$core$Maybe$Just(17) : (A2(r, 43472, 43481) ? $elm$core$Maybe$Just(6) : (A2(r, 43488, 43492) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))))))) : (l(43595) ? (l(43566) ? (e(43494) ? $elm$core$Maybe$Just(17) : ((A2(r, 43495, 43503) || (A2(r, 43514, 43518) || A2(r, 43520, 43560))) ? $elm$core$Maybe$Just(18) : (A2(r, 43504, 43513) ? $elm$core$Maybe$Just(6) : (A2(r, 43561, 43565) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))) : ((e(43566) || (A2(r, 43569, 43570) || (A2(r, 43573, 43574) || e(43587)))) ? $elm$core$Maybe$Just(3) : ((A2(r, 43567, 43568) || A2(r, 43571, 43572)) ? $elm$core$Maybe$Just(4) : ((A2(r, 43584, 43586) || A2(r, 43588, 43594)) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))) : (l(43632) ? ((e(43595) || A2(r, 43616, 43631)) ? $elm$core$Maybe$Just(18) : (e(43596) ? $elm$core$Maybe$Just(3) : (e(43597) ? $elm$core$Maybe$Just(4) : (A2(r, 43600, 43609) ? $elm$core$Maybe$Just(6) : (A2(r, 43612, 43615) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))))) : (e(43632) ? $elm$core$Maybe$Just(17) : ((A2(r, 43633, 43638) || (e(43642) || A2(r, 43646, 43695))) ? $elm$core$Maybe$Just(18) : (A2(r, 43639, 43641) ? $elm$core$Maybe$Just(29) : ((e(43643) || e(43645)) ? $elm$core$Maybe$Just(4) : ((e(43644) || e(43696)) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))))))))) : (l(64274) ? (l(43815) ? (l(43743) ? ((e(43697) || (A2(r, 43701, 43702) || (A2(r, 43705, 43709) || (e(43712) || (e(43714) || A2(r, 43739, 43740)))))) ? $elm$core$Maybe$Just(18) : ((A2(r, 43698, 43700) || (A2(r, 43703, 43704) || (A2(r, 43710, 43711) || e(43713)))) ? $elm$core$Maybe$Just(3) : (e(43741) ? $elm$core$Maybe$Just(17) : (e(43742) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))) : (l(43762) ? ((e(43743) || A2(r, 43760, 43761)) ? $elm$core$Maybe$Just(25) : (A2(r, 43744, 43754) ? $elm$core$Maybe$Just(18) : ((e(43755) || A2(r, 43758, 43759)) ? $elm$core$Maybe$Just(4) : (A2(r, 43756, 43757) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))) : ((e(43762) || (A2(r, 43777, 43782) || (A2(r, 43785, 43790) || (A2(r, 43793, 43798) || A2(r, 43808, 43814))))) ? $elm$core$Maybe$Just(18) : (A2(r, 43763, 43764) ? $elm$core$Maybe$Just(17) : (e(43765) ? $elm$core$Maybe$Just(4) : (e(43766) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))))) : (l(44008) ? ((A2(r, 43816, 43822) || A2(r, 43968, 44002)) ? $elm$core$Maybe$Just(18) : ((A2(r, 43824, 43866) || (A2(r, 43872, 43880) || A2(r, 43888, 43967))) ? $elm$core$Maybe$Just(1) : ((e(43867) || A2(r, 43882, 43883)) ? $elm$core$Maybe$Just(28) : ((A2(r, 43868, 43871) || e(43881)) ? $elm$core$Maybe$Just(17) : ((A2(r, 44003, 44004) || A2(r, 44006, 44007)) ? $elm$core$Maybe$Just(4) : (e(44005) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))))) : (l(55215) ? ((e(44008) || e(44013)) ? $elm$core$Maybe$Just(3) : ((A2(r, 44009, 44010) || e(44012)) ? $elm$core$Maybe$Just(4) : (e(44011) ? $elm$core$Maybe$Just(25) : (A2(r, 44016, 44025) ? $elm$core$Maybe$Just(6) : (A2(r, 44032, 55203) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))))) : ((A2(r, 55216, 55238) || (A2(r, 55243, 55291) || (A2(r, 63744, 64109) || A2(r, 64112, 64217)))) ? $elm$core$Maybe$Just(18) : (A2(r, 55296, 57343) ? $elm$core$Maybe$Just(14) : (A2(r, 57344, 63743) ? $elm$core$Maybe$Just(15) : (A2(r, 64256, 64262) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))))) : (l(65048) ? (l(64466) ? (A2(r, 64275, 64279) ? $elm$core$Maybe$Just(1) : ((e(64285) || (A2(r, 64287, 64296) || (A2(r, 64298, 64310) || (A2(r, 64312, 64316) || (e(64318) || (A2(r, 64320, 64321) || (A2(r, 64323, 64324) || A2(r, 64326, 64433)))))))) ? $elm$core$Maybe$Just(18) : (e(64286) ? $elm$core$Maybe$Just(3) : (e(64297) ? $elm$core$Maybe$Just(26) : (A2(r, 64434, 64450) ? $elm$core$Maybe$Just(28) : $elm$core$Maybe$Nothing))))) : (l(64974) ? ((A2(r, 64467, 64829) || (A2(r, 64848, 64911) || A2(r, 64914, 64967))) ? $elm$core$Maybe$Just(18) : (e(64830) ? $elm$core$Maybe$Just(22) : (e(64831) ? $elm$core$Maybe$Just(21) : (A2(r, 64832, 64847) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing)))) : ((e(64975) || A2(r, 65021, 65023)) ? $elm$core$Maybe$Just(29) : (A2(r, 65008, 65019) ? $elm$core$Maybe$Just(18) : (e(65020) ? $elm$core$Maybe$Just(27) : (A2(r, 65024, 65039) ? $elm$core$Maybe$Just(3) : (A2(r, 65040, 65046) ? $elm$core$Maybe$Just(25) : (e(65047) ? $elm$core$Maybe$Just(21) : $elm$core$Maybe$Nothing)))))))) : (l(65083) ? ((e(65048) || (e(65078) || (e(65080) || e(65082)))) ? $elm$core$Maybe$Just(22) : ((e(65049) || e(65072)) ? $elm$core$Maybe$Just(25) : (A2(r, 65056, 65071) ? $elm$core$Maybe$Just(3) : (A2(r, 65073, 65074) ? $elm$core$Maybe$Just(20) : (A2(r, 65075, 65076) ? $elm$core$Maybe$Just(19) : ((e(65077) || (e(65079) || e(65081))) ? $elm$core$Maybe$Just(21) : $elm$core$Maybe$Nothing)))))) : (l(65089) ? ((e(65083) || (e(65085) || e(65087))) ? $elm$core$Maybe$Just(21) : ((e(65084) || (e(65086) || e(65088))) ? $elm$core$Maybe$Just(22) : $elm$core$Maybe$Nothing)) : ((e(65089) || (e(65091) || e(65095))) ? $elm$core$Maybe$Just(21) : ((e(65090) || (e(65092) || e(65096))) ? $elm$core$Maybe$Just(22) : ((A2(r, 65093, 65094) || A2(r, 65097, 65100)) ? $elm$core$Maybe$Just(25) : (A2(r, 65101, 65102) ? $elm$core$Maybe$Just(19) : $elm$core$Maybe$Nothing))))))))))) : (l(71996) ? (l(69404) ? (l(66421) ? (l(65378) ? (l(65288) ? (l(65121) ? (e(65103) ? $elm$core$Maybe$Just(19) : ((A2(r, 65104, 65106) || (A2(r, 65108, 65111) || A2(r, 65119, 65120))) ? $elm$core$Maybe$Just(25) : (e(65112) ? $elm$core$Maybe$Just(20) : ((e(65113) || (e(65115) || e(65117))) ? $elm$core$Maybe$Just(21) : ((e(65114) || (e(65116) || e(65118))) ? $elm$core$Maybe$Just(22) : $elm$core$Maybe$Nothing))))) : (l(65129) ? ((e(65121) || e(65128)) ? $elm$core$Maybe$Just(25) : ((e(65122) || A2(r, 65124, 65126)) ? $elm$core$Maybe$Just(26) : (e(65123) ? $elm$core$Maybe$Just(20) : $elm$core$Maybe$Nothing))) : ((e(65129) || e(65284)) ? $elm$core$Maybe$Just(27) : ((A2(r, 65130, 65131) || (A2(r, 65281, 65283) || A2(r, 65285, 65287))) ? $elm$core$Maybe$Just(25) : ((A2(r, 65136, 65140) || A2(r, 65142, 65276)) ? $elm$core$Maybe$Just(18) : (e(65279) ? $elm$core$Maybe$Just(13) : $elm$core$Maybe$Nothing)))))) : (l(65339) ? (e(65288) ? $elm$core$Maybe$Just(21) : (e(65289) ? $elm$core$Maybe$Just(22) : ((e(65290) || (e(65292) || (A2(r, 65294, 65295) || (A2(r, 65306, 65307) || A2(r, 65311, 65312))))) ? $elm$core$Maybe$Just(25) : ((e(65291) || A2(r, 65308, 65310)) ? $elm$core$Maybe$Just(26) : (e(65293) ? $elm$core$Maybe$Just(20) : (A2(r, 65296, 65305) ? $elm$core$Maybe$Just(6) : (A2(r, 65313, 65338) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))))))) : (l(65370) ? (e(65339) ? $elm$core$Maybe$Just(21) : (e(65340) ? $elm$core$Maybe$Just(25) : (e(65341) ? $elm$core$Maybe$Just(22) : ((e(65342) || e(65344)) ? $elm$core$Maybe$Just(28) : (e(65343) ? $elm$core$Maybe$Just(19) : (A2(r, 65345, 65369) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))))) : (e(65370) ? $elm$core$Maybe$Just(1) : ((e(65371) || e(65375)) ? $elm$core$Maybe$Just(21) : ((e(65372) || e(65374)) ? $elm$core$Maybe$Just(26) : ((e(65373) || e(65376)) ? $elm$core$Maybe$Just(22) : (e(65377) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))))))) : (l(65598) ? (l(65505) ? (l(65437) ? (e(65378) ? $elm$core$Maybe$Just(21) : (e(65379) ? $elm$core$Maybe$Just(22) : (A2(r, 65380, 65381) ? $elm$core$Maybe$Just(25) : ((A2(r, 65382, 65391) || A2(r, 65393, 65436)) ? $elm$core$Maybe$Just(18) : (e(65392) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))))) : ((e(65437) || (A2(r, 65440, 65470) || (A2(r, 65474, 65479) || (A2(r, 65482, 65487) || (A2(r, 65490, 65495) || A2(r, 65498, 65500)))))) ? $elm$core$Maybe$Just(18) : (A2(r, 65438, 65439) ? $elm$core$Maybe$Just(17) : (e(65504) ? $elm$core$Maybe$Just(27) : $elm$core$Maybe$Nothing)))) : (l(65516) ? ((e(65505) || A2(r, 65509, 65510)) ? $elm$core$Maybe$Just(27) : ((e(65506) || A2(r, 65513, 65515)) ? $elm$core$Maybe$Just(26) : (e(65507) ? $elm$core$Maybe$Just(28) : ((e(65508) || e(65512)) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing)))) : (e(65516) ? $elm$core$Maybe$Just(26) : ((A2(r, 65517, 65518) || A2(r, 65532, 65533)) ? $elm$core$Maybe$Just(29) : (A2(r, 65529, 65531) ? $elm$core$Maybe$Just(13) : ((A2(r, 65536, 65547) || (A2(r, 65549, 65574) || (A2(r, 65576, 65594) || A2(r, 65596, 65597)))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))))) : (l(65999) ? (l(65855) ? ((A2(r, 65599, 65613) || (A2(r, 65616, 65629) || A2(r, 65664, 65786))) ? $elm$core$Maybe$Just(18) : (A2(r, 65792, 65794) ? $elm$core$Maybe$Just(25) : (A2(r, 65799, 65843) ? $elm$core$Maybe$Just(8) : (A2(r, 65847, 65854) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing)))) : ((e(65855) || (A2(r, 65913, 65929) || (A2(r, 65932, 65934) || (A2(r, 65936, 65948) || e(65952))))) ? $elm$core$Maybe$Just(29) : (A2(r, 65856, 65908) ? $elm$core$Maybe$Just(7) : ((A2(r, 65909, 65912) || A2(r, 65930, 65931)) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing)))) : (l(66303) ? (A2(r, 66000, 66044) ? $elm$core$Maybe$Just(29) : ((e(66045) || e(66272)) ? $elm$core$Maybe$Just(3) : ((A2(r, 66176, 66204) || A2(r, 66208, 66256)) ? $elm$core$Maybe$Just(18) : (A2(r, 66273, 66299) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing)))) : ((A2(r, 66304, 66335) || (A2(r, 66349, 66368) || (A2(r, 66370, 66377) || A2(r, 66384, 66420)))) ? $elm$core$Maybe$Just(18) : (A2(r, 66336, 66339) ? $elm$core$Maybe$Just(8) : ((e(66369) || e(66378)) ? $elm$core$Maybe$Just(7) : $elm$core$Maybe$Nothing))))))) : (l(67902) ? (l(67071) ? (l(66735) ? ((e(66421) || (A2(r, 66432, 66461) || (A2(r, 66464, 66499) || (A2(r, 66504, 66511) || A2(r, 66640, 66717))))) ? $elm$core$Maybe$Just(18) : (A2(r, 66422, 66426) ? $elm$core$Maybe$Just(3) : ((e(66463) || e(66512)) ? $elm$core$Maybe$Just(25) : (A2(r, 66513, 66517) ? $elm$core$Maybe$Just(7) : (A2(r, 66560, 66599) ? $elm$core$Maybe$Just(0) : (A2(r, 66600, 66639) ? $elm$core$Maybe$Just(1) : (A2(r, 66720, 66729) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))))))) : (l(66939) ? ((A2(r, 66736, 66771) || A2(r, 66928, 66938)) ? $elm$core$Maybe$Just(0) : (A2(r, 66776, 66811) ? $elm$core$Maybe$Just(1) : ((A2(r, 66816, 66855) || A2(r, 66864, 66915)) ? $elm$core$Maybe$Just(18) : (e(66927) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))) : ((A2(r, 66940, 66954) || (A2(r, 66956, 66962) || A2(r, 66964, 66965))) ? $elm$core$Maybe$Just(0) : ((A2(r, 66967, 66977) || (A2(r, 66979, 66993) || (A2(r, 66995, 67001) || A2(r, 67003, 67004)))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))) : (l(67671) ? ((A2(r, 67072, 67382) || (A2(r, 67392, 67413) || (A2(r, 67424, 67431) || (A2(r, 67584, 67589) || (e(67592) || (A2(r, 67594, 67637) || (A2(r, 67639, 67640) || (e(67644) || A2(r, 67647, 67669))))))))) ? $elm$core$Maybe$Just(18) : ((A2(r, 67456, 67461) || (A2(r, 67463, 67504) || A2(r, 67506, 67514))) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing)) : (l(67807) ? (e(67671) ? $elm$core$Maybe$Just(25) : ((A2(r, 67672, 67679) || (A2(r, 67705, 67711) || A2(r, 67751, 67759))) ? $elm$core$Maybe$Just(8) : ((A2(r, 67680, 67702) || A2(r, 67712, 67742)) ? $elm$core$Maybe$Just(18) : (A2(r, 67703, 67704) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing)))) : ((A2(r, 67808, 67826) || (A2(r, 67828, 67829) || (A2(r, 67840, 67861) || A2(r, 67872, 67897)))) ? $elm$core$Maybe$Just(18) : ((A2(r, 67835, 67839) || A2(r, 67862, 67867)) ? $elm$core$Maybe$Just(8) : (e(67871) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))))) : (l(68324) ? (l(68120) ? (e(67903) ? $elm$core$Maybe$Just(25) : ((A2(r, 67968, 68023) || (A2(r, 68030, 68031) || (e(68096) || (A2(r, 68112, 68115) || A2(r, 68117, 68119))))) ? $elm$core$Maybe$Just(18) : ((A2(r, 68028, 68029) || (A2(r, 68032, 68047) || A2(r, 68050, 68095))) ? $elm$core$Maybe$Just(8) : ((A2(r, 68097, 68099) || (A2(r, 68101, 68102) || A2(r, 68108, 68111))) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))) : (l(68220) ? ((A2(r, 68121, 68149) || A2(r, 68192, 68219)) ? $elm$core$Maybe$Just(18) : ((A2(r, 68152, 68154) || e(68159)) ? $elm$core$Maybe$Just(3) : (A2(r, 68160, 68168) ? $elm$core$Maybe$Just(8) : (A2(r, 68176, 68184) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))) : ((e(68220) || (A2(r, 68224, 68252) || (A2(r, 68288, 68295) || A2(r, 68297, 68323)))) ? $elm$core$Maybe$Just(18) : ((A2(r, 68221, 68222) || A2(r, 68253, 68255)) ? $elm$core$Maybe$Just(8) : (e(68223) ? $elm$core$Maybe$Just(25) : (e(68296) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing)))))) : (l(68607) ? (l(68415) ? ((e(68324) || A2(r, 68352, 68405)) ? $elm$core$Maybe$Just(18) : (A2(r, 68325, 68326) ? $elm$core$Maybe$Just(3) : (A2(r, 68331, 68335) ? $elm$core$Maybe$Just(8) : ((A2(r, 68336, 68342) || A2(r, 68409, 68414)) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))) : ((e(68415) || A2(r, 68505, 68508)) ? $elm$core$Maybe$Just(25) : ((A2(r, 68416, 68437) || (A2(r, 68448, 68466) || A2(r, 68480, 68497))) ? $elm$core$Maybe$Just(18) : ((A2(r, 68440, 68447) || (A2(r, 68472, 68479) || A2(r, 68521, 68527))) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing)))) : (l(69215) ? ((A2(r, 68608, 68680) || A2(r, 68864, 68899)) ? $elm$core$Maybe$Just(18) : (A2(r, 68736, 68786) ? $elm$core$Maybe$Just(0) : (A2(r, 68800, 68850) ? $elm$core$Maybe$Just(1) : (A2(r, 68858, 68863) ? $elm$core$Maybe$Just(8) : (A2(r, 68900, 68903) ? $elm$core$Maybe$Just(3) : (A2(r, 68912, 68921) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing)))))) : (A2(r, 69216, 69246) ? $elm$core$Maybe$Just(8) : ((A2(r, 69248, 69289) || (A2(r, 69296, 69297) || A2(r, 69376, 69403))) ? $elm$core$Maybe$Just(18) : ((A2(r, 69291, 69292) || A2(r, 69373, 69375)) ? $elm$core$Maybe$Just(3) : (e(69293) ? $elm$core$Maybe$Just(20) : $elm$core$Maybe$Nothing))))))))) : (l(70452) ? (l(70002) ? (l(69758) ? (l(69599) ? ((e(69404) || (e(69415) || (A2(r, 69424, 69445) || (A2(r, 69488, 69505) || A2(r, 69552, 69572))))) ? $elm$core$Maybe$Just(18) : ((A2(r, 69405, 69414) || (A2(r, 69457, 69460) || A2(r, 69573, 69579))) ? $elm$core$Maybe$Just(8) : ((A2(r, 69446, 69456) || A2(r, 69506, 69509)) ? $elm$core$Maybe$Just(3) : ((A2(r, 69461, 69465) || A2(r, 69510, 69513)) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))) : (l(69702) ? ((A2(r, 69600, 69622) || A2(r, 69635, 69687)) ? $elm$core$Maybe$Just(18) : ((e(69632) || e(69634)) ? $elm$core$Maybe$Just(4) : ((e(69633) || A2(r, 69688, 69701)) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))) : ((e(69702) || (e(69744) || A2(r, 69747, 69748))) ? $elm$core$Maybe$Just(3) : (A2(r, 69703, 69709) ? $elm$core$Maybe$Just(25) : (A2(r, 69714, 69733) ? $elm$core$Maybe$Just(8) : (A2(r, 69734, 69743) ? $elm$core$Maybe$Just(6) : ((A2(r, 69745, 69746) || e(69749)) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))))))) : (l(69839) ? ((A2(r, 69759, 69761) || (A2(r, 69811, 69814) || (A2(r, 69817, 69818) || e(69826)))) ? $elm$core$Maybe$Just(3) : ((e(69762) || (A2(r, 69808, 69810) || A2(r, 69815, 69816))) ? $elm$core$Maybe$Just(4) : (A2(r, 69763, 69807) ? $elm$core$Maybe$Just(18) : ((A2(r, 69819, 69820) || A2(r, 69822, 69825)) ? $elm$core$Maybe$Just(25) : ((e(69821) || e(69837)) ? $elm$core$Maybe$Just(13) : $elm$core$Maybe$Nothing))))) : (l(69932) ? ((A2(r, 69840, 69864) || A2(r, 69891, 69926)) ? $elm$core$Maybe$Just(18) : (A2(r, 69872, 69881) ? $elm$core$Maybe$Just(6) : ((A2(r, 69888, 69890) || A2(r, 69927, 69931)) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))) : ((e(69932) || A2(r, 69957, 69958)) ? $elm$core$Maybe$Just(4) : (A2(r, 69933, 69940) ? $elm$core$Maybe$Just(3) : (A2(r, 69942, 69951) ? $elm$core$Maybe$Just(6) : (A2(r, 69952, 69955) ? $elm$core$Maybe$Just(25) : ((e(69956) || (e(69959) || A2(r, 69968, 70001))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))))))) : (l(70193) ? (l(70092) ? (l(70018) ? ((e(70002) || e(70006)) ? $elm$core$Maybe$Just(18) : ((e(70003) || A2(r, 70016, 70017)) ? $elm$core$Maybe$Just(3) : (A2(r, 70004, 70005) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))) : ((e(70018) || (A2(r, 70067, 70069) || A2(r, 70079, 70080))) ? $elm$core$Maybe$Just(4) : ((A2(r, 70019, 70066) || A2(r, 70081, 70084)) ? $elm$core$Maybe$Just(18) : ((A2(r, 70070, 70078) || A2(r, 70089, 70091)) ? $elm$core$Maybe$Just(3) : (A2(r, 70085, 70088) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))))) : (l(70107) ? ((e(70092) || e(70095)) ? $elm$core$Maybe$Just(3) : (e(70093) ? $elm$core$Maybe$Just(25) : (e(70094) ? $elm$core$Maybe$Just(4) : (A2(r, 70096, 70105) ? $elm$core$Maybe$Just(6) : (e(70106) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))))) : ((e(70107) || A2(r, 70109, 70111)) ? $elm$core$Maybe$Just(25) : ((e(70108) || (A2(r, 70144, 70161) || A2(r, 70163, 70187))) ? $elm$core$Maybe$Just(18) : (A2(r, 70113, 70132) ? $elm$core$Maybe$Just(8) : (A2(r, 70188, 70190) ? $elm$core$Maybe$Just(4) : (A2(r, 70191, 70192) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))))))) : (l(70302) ? (l(70205) ? ((e(70193) || (e(70196) || A2(r, 70198, 70199))) ? $elm$core$Maybe$Just(3) : ((A2(r, 70194, 70195) || e(70197)) ? $elm$core$Maybe$Just(4) : (A2(r, 70200, 70204) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))) : (e(70205) ? $elm$core$Maybe$Just(25) : ((e(70206) || e(70209)) ? $elm$core$Maybe$Just(3) : ((A2(r, 70207, 70208) || (A2(r, 70272, 70278) || (e(70280) || (A2(r, 70282, 70285) || A2(r, 70287, 70301))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))) : (l(70399) ? ((A2(r, 70303, 70312) || A2(r, 70320, 70366)) ? $elm$core$Maybe$Just(18) : (e(70313) ? $elm$core$Maybe$Just(25) : ((e(70367) || A2(r, 70371, 70378)) ? $elm$core$Maybe$Just(3) : (A2(r, 70368, 70370) ? $elm$core$Maybe$Just(4) : (A2(r, 70384, 70393) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))))) : (A2(r, 70400, 70401) ? $elm$core$Maybe$Just(3) : (A2(r, 70402, 70403) ? $elm$core$Maybe$Just(4) : ((A2(r, 70405, 70412) || (A2(r, 70415, 70416) || (A2(r, 70419, 70440) || (A2(r, 70442, 70448) || A2(r, 70450, 70451))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))))))) : (l(71167) ? (l(70748) ? (l(70501) ? ((A2(r, 70453, 70457) || (e(70461) || (e(70480) || A2(r, 70493, 70497)))) ? $elm$core$Maybe$Just(18) : ((A2(r, 70459, 70460) || e(70464)) ? $elm$core$Maybe$Just(3) : ((A2(r, 70462, 70463) || (A2(r, 70465, 70468) || (A2(r, 70471, 70472) || (A2(r, 70475, 70477) || (e(70487) || A2(r, 70498, 70499)))))) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))) : (l(70721) ? ((A2(r, 70502, 70508) || (A2(r, 70512, 70516) || A2(r, 70712, 70719))) ? $elm$core$Maybe$Just(3) : (A2(r, 70656, 70708) ? $elm$core$Maybe$Just(18) : ((A2(r, 70709, 70711) || e(70720)) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))) : ((e(70721) || e(70725)) ? $elm$core$Maybe$Just(4) : ((A2(r, 70722, 70724) || e(70726)) ? $elm$core$Maybe$Just(3) : (A2(r, 70727, 70730) ? $elm$core$Maybe$Just(18) : ((A2(r, 70731, 70735) || A2(r, 70746, 70747)) ? $elm$core$Maybe$Just(25) : (A2(r, 70736, 70745) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))))))) : (l(70853) ? (l(70840) ? (e(70749) ? $elm$core$Maybe$Just(25) : ((e(70750) || A2(r, 70835, 70839)) ? $elm$core$Maybe$Just(3) : ((A2(r, 70751, 70753) || A2(r, 70784, 70831)) ? $elm$core$Maybe$Just(18) : (A2(r, 70832, 70834) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing)))) : ((e(70840) || (e(70842) || (A2(r, 70847, 70848) || A2(r, 70850, 70851)))) ? $elm$core$Maybe$Just(3) : ((e(70841) || (A2(r, 70843, 70846) || e(70849))) ? $elm$core$Maybe$Just(4) : (e(70852) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))) : (l(71095) ? ((e(70853) || (e(70855) || A2(r, 71040, 71086))) ? $elm$core$Maybe$Just(18) : (e(70854) ? $elm$core$Maybe$Just(25) : (A2(r, 70864, 70873) ? $elm$core$Maybe$Just(6) : (A2(r, 71087, 71089) ? $elm$core$Maybe$Just(4) : (A2(r, 71090, 71093) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))))) : ((A2(r, 71096, 71099) || e(71102)) ? $elm$core$Maybe$Just(4) : ((A2(r, 71100, 71101) || (A2(r, 71103, 71104) || A2(r, 71132, 71133))) ? $elm$core$Maybe$Just(3) : (A2(r, 71105, 71127) ? $elm$core$Maybe$Just(25) : (A2(r, 71128, 71131) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))))))) : (l(71457) ? (l(71338) ? ((A2(r, 71168, 71215) || (e(71236) || A2(r, 71296, 71337))) ? $elm$core$Maybe$Just(18) : ((A2(r, 71216, 71218) || (A2(r, 71227, 71228) || e(71230))) ? $elm$core$Maybe$Just(4) : ((A2(r, 71219, 71226) || (e(71229) || A2(r, 71231, 71232))) ? $elm$core$Maybe$Just(3) : ((A2(r, 71233, 71235) || A2(r, 71264, 71276)) ? $elm$core$Maybe$Just(25) : (A2(r, 71248, 71257) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))))) : (l(71350) ? (e(71338) ? $elm$core$Maybe$Just(18) : ((e(71339) || (e(71341) || A2(r, 71344, 71349))) ? $elm$core$Maybe$Just(3) : ((e(71340) || A2(r, 71342, 71343)) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))) : ((e(71350) || e(71456)) ? $elm$core$Maybe$Just(4) : ((e(71351) || A2(r, 71453, 71455)) ? $elm$core$Maybe$Just(3) : ((e(71352) || A2(r, 71424, 71450)) ? $elm$core$Maybe$Just(18) : (e(71353) ? $elm$core$Maybe$Just(25) : (A2(r, 71360, 71369) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))))))) : (l(71736) ? ((e(71457) || (e(71462) || A2(r, 71724, 71726))) ? $elm$core$Maybe$Just(4) : ((A2(r, 71458, 71461) || (A2(r, 71463, 71467) || A2(r, 71727, 71735))) ? $elm$core$Maybe$Just(3) : (A2(r, 71472, 71481) ? $elm$core$Maybe$Just(6) : (A2(r, 71482, 71483) ? $elm$core$Maybe$Just(8) : (A2(r, 71484, 71486) ? $elm$core$Maybe$Just(25) : (e(71487) ? $elm$core$Maybe$Just(29) : ((A2(r, 71488, 71494) || A2(r, 71680, 71723)) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))))))) : (l(71934) ? (e(71736) ? $elm$core$Maybe$Just(4) : (A2(r, 71737, 71738) ? $elm$core$Maybe$Just(3) : (e(71739) ? $elm$core$Maybe$Just(25) : (A2(r, 71840, 71871) ? $elm$core$Maybe$Just(0) : (A2(r, 71872, 71903) ? $elm$core$Maybe$Just(1) : (A2(r, 71904, 71913) ? $elm$core$Maybe$Just(6) : (A2(r, 71914, 71922) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing))))))) : ((A2(r, 71935, 71942) || (e(71945) || (A2(r, 71948, 71955) || (A2(r, 71957, 71958) || A2(r, 71960, 71983))))) ? $elm$core$Maybe$Just(18) : ((A2(r, 71984, 71989) || A2(r, 71991, 71992)) ? $elm$core$Maybe$Just(4) : (e(71995) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))))))))) : (l(119893) ? (l(73647) ? (l(72767) ? (l(72242) ? (l(72144) ? ((e(71996) || (e(71998) || e(72003))) ? $elm$core$Maybe$Just(3) : ((e(71997) || (e(72000) || e(72002))) ? $elm$core$Maybe$Just(4) : ((e(71999) || (e(72001) || (A2(r, 72096, 72103) || A2(r, 72106, 72143)))) ? $elm$core$Maybe$Just(18) : (A2(r, 72004, 72006) ? $elm$core$Maybe$Just(25) : (A2(r, 72016, 72025) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))))) : (l(72160) ? (e(72144) ? $elm$core$Maybe$Just(18) : ((A2(r, 72145, 72147) || A2(r, 72156, 72159)) ? $elm$core$Maybe$Just(4) : ((A2(r, 72148, 72151) || A2(r, 72154, 72155)) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))) : ((e(72160) || A2(r, 72193, 72202)) ? $elm$core$Maybe$Just(3) : ((e(72161) || (e(72163) || (e(72192) || A2(r, 72203, 72241)))) ? $elm$core$Maybe$Just(18) : (e(72162) ? $elm$core$Maybe$Just(25) : (e(72164) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing)))))) : (l(72342) ? (l(72262) ? ((e(72242) || e(72250)) ? $elm$core$Maybe$Just(18) : ((A2(r, 72243, 72248) || A2(r, 72251, 72254)) ? $elm$core$Maybe$Just(3) : (e(72249) ? $elm$core$Maybe$Just(4) : (A2(r, 72255, 72261) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))) : (e(72262) ? $elm$core$Maybe$Just(25) : ((e(72263) || (A2(r, 72273, 72278) || (A2(r, 72281, 72283) || A2(r, 72330, 72341)))) ? $elm$core$Maybe$Just(3) : ((e(72272) || A2(r, 72284, 72329)) ? $elm$core$Maybe$Just(18) : (A2(r, 72279, 72280) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))))) : (l(72447) ? ((e(72342) || A2(r, 72344, 72345)) ? $elm$core$Maybe$Just(3) : (e(72343) ? $elm$core$Maybe$Just(4) : ((A2(r, 72346, 72348) || A2(r, 72350, 72354)) ? $elm$core$Maybe$Just(25) : ((e(72349) || A2(r, 72368, 72440)) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)))) : (A2(r, 72448, 72457) ? $elm$core$Maybe$Just(25) : ((A2(r, 72704, 72712) || A2(r, 72714, 72750)) ? $elm$core$Maybe$Just(18) : ((e(72751) || e(72766)) ? $elm$core$Maybe$Just(4) : ((A2(r, 72752, 72758) || A2(r, 72760, 72765)) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))))))) : (l(73065) ? (l(72884) ? ((e(72767) || (A2(r, 72850, 72871) || (A2(r, 72874, 72880) || A2(r, 72882, 72883)))) ? $elm$core$Maybe$Just(3) : ((e(72768) || A2(r, 72818, 72847)) ? $elm$core$Maybe$Just(18) : ((A2(r, 72769, 72773) || A2(r, 72816, 72817)) ? $elm$core$Maybe$Just(25) : (A2(r, 72784, 72793) ? $elm$core$Maybe$Just(6) : (A2(r, 72794, 72812) ? $elm$core$Maybe$Just(8) : ((e(72873) || e(72881)) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing)))))) : (l(73019) ? (e(72884) ? $elm$core$Maybe$Just(4) : ((A2(r, 72885, 72886) || (A2(r, 73009, 73014) || e(73018))) ? $elm$core$Maybe$Just(3) : ((A2(r, 72960, 72966) || (A2(r, 72968, 72969) || A2(r, 72971, 73008))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))) : ((A2(r, 73020, 73021) || (A2(r, 73023, 73029) || e(73031))) ? $elm$core$Maybe$Just(3) : ((e(73030) || (A2(r, 73056, 73061) || A2(r, 73063, 73064))) ? $elm$core$Maybe$Just(18) : (A2(r, 73040, 73049) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))))) : (l(73471) ? (l(73110) ? (A2(r, 73066, 73097) ? $elm$core$Maybe$Just(18) : ((A2(r, 73098, 73102) || A2(r, 73107, 73108)) ? $elm$core$Maybe$Just(4) : ((A2(r, 73104, 73105) || e(73109)) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))) : ((e(73110) || A2(r, 73461, 73462)) ? $elm$core$Maybe$Just(4) : ((e(73111) || A2(r, 73459, 73460)) ? $elm$core$Maybe$Just(3) : ((e(73112) || A2(r, 73440, 73458)) ? $elm$core$Maybe$Just(18) : (A2(r, 73120, 73129) ? $elm$core$Maybe$Just(6) : (A2(r, 73463, 73464) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))))) : (l(73525) ? (A2(r, 73472, 73473) ? $elm$core$Maybe$Just(3) : ((e(73474) || (A2(r, 73476, 73488) || A2(r, 73490, 73523))) ? $elm$core$Maybe$Just(18) : ((e(73475) || e(73524)) ? $elm$core$Maybe$Just(4) : $elm$core$Maybe$Nothing))) : ((e(73525) || (A2(r, 73534, 73535) || e(73537))) ? $elm$core$Maybe$Just(4) : ((A2(r, 73526, 73530) || (e(73536) || e(73538))) ? $elm$core$Maybe$Just(3) : (A2(r, 73539, 73551) ? $elm$core$Maybe$Just(25) : (A2(r, 73552, 73561) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing)))))))) : (l(94178) ? (l(92879) ? (l(77823) ? ((e(73648) || (A2(r, 73728, 74649) || (A2(r, 74880, 75075) || A2(r, 77712, 77808)))) ? $elm$core$Maybe$Just(18) : (A2(r, 73664, 73684) ? $elm$core$Maybe$Just(8) : ((A2(r, 73685, 73692) || A2(r, 73697, 73713)) ? $elm$core$Maybe$Just(29) : (A2(r, 73693, 73696) ? $elm$core$Maybe$Just(27) : ((e(73727) || (A2(r, 74864, 74868) || A2(r, 77809, 77810))) ? $elm$core$Maybe$Just(25) : (A2(r, 74752, 74862) ? $elm$core$Maybe$Just(7) : $elm$core$Maybe$Nothing)))))) : ((A2(r, 77824, 78895) || (A2(r, 78913, 78918) || (A2(r, 82944, 83526) || (A2(r, 92160, 92728) || (A2(r, 92736, 92766) || A2(r, 92784, 92862)))))) ? $elm$core$Maybe$Just(18) : (A2(r, 78896, 78911) ? $elm$core$Maybe$Just(13) : ((e(78912) || A2(r, 78919, 78933)) ? $elm$core$Maybe$Just(3) : ((A2(r, 92768, 92777) || A2(r, 92864, 92873)) ? $elm$core$Maybe$Just(6) : (A2(r, 92782, 92783) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing)))))) : (l(93026) ? ((A2(r, 92880, 92909) || A2(r, 92928, 92975)) ? $elm$core$Maybe$Just(18) : ((A2(r, 92912, 92916) || A2(r, 92976, 92982)) ? $elm$core$Maybe$Just(3) : ((e(92917) || (A2(r, 92983, 92987) || e(92996))) ? $elm$core$Maybe$Just(25) : ((A2(r, 92988, 92991) || e(92997)) ? $elm$core$Maybe$Just(29) : (A2(r, 92992, 92995) ? $elm$core$Maybe$Just(17) : (A2(r, 93008, 93017) ? $elm$core$Maybe$Just(6) : (A2(r, 93019, 93025) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing))))))) : (l(93951) ? ((A2(r, 93027, 93047) || A2(r, 93053, 93071)) ? $elm$core$Maybe$Just(18) : (A2(r, 93760, 93791) ? $elm$core$Maybe$Just(0) : (A2(r, 93792, 93823) ? $elm$core$Maybe$Just(1) : (A2(r, 93824, 93846) ? $elm$core$Maybe$Just(8) : (A2(r, 93847, 93850) ? $elm$core$Maybe$Just(25) : $elm$core$Maybe$Nothing))))) : ((A2(r, 93952, 94026) || e(94032)) ? $elm$core$Maybe$Just(18) : ((e(94031) || A2(r, 94095, 94098)) ? $elm$core$Maybe$Just(3) : (A2(r, 94033, 94087) ? $elm$core$Maybe$Just(4) : ((A2(r, 94099, 94111) || A2(r, 94176, 94177)) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))))))) : (l(118607) ? (l(110932) ? (l(101631) ? (e(94178) ? $elm$core$Maybe$Just(25) : (e(94179) ? $elm$core$Maybe$Just(17) : (e(94180) ? $elm$core$Maybe$Just(3) : (A2(r, 94192, 94193) ? $elm$core$Maybe$Just(4) : ((A2(r, 94208, 100343) || A2(r, 100352, 101589)) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing))))) : ((A2(r, 101632, 101640) || (A2(r, 110592, 110882) || (e(110898) || A2(r, 110928, 110930)))) ? $elm$core$Maybe$Just(18) : ((A2(r, 110576, 110579) || (A2(r, 110581, 110587) || A2(r, 110589, 110590))) ? $elm$core$Maybe$Just(17) : $elm$core$Maybe$Nothing))) : (l(113807) ? ((e(110933) || (A2(r, 110948, 110951) || (A2(r, 110960, 111355) || (A2(r, 113664, 113770) || (A2(r, 113776, 113788) || A2(r, 113792, 113800)))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing) : (A2(r, 113808, 113817) ? $elm$core$Maybe$Just(18) : (e(113820) ? $elm$core$Maybe$Just(29) : ((A2(r, 113821, 113822) || (A2(r, 118528, 118573) || A2(r, 118576, 118598))) ? $elm$core$Maybe$Just(3) : (e(113823) ? $elm$core$Maybe$Just(25) : (A2(r, 113824, 113827) ? $elm$core$Maybe$Just(13) : $elm$core$Maybe$Nothing))))))) : (l(119209) ? (l(119145) ? ((A2(r, 118608, 118723) || (A2(r, 118784, 119029) || (A2(r, 119040, 119078) || A2(r, 119081, 119140)))) ? $elm$core$Maybe$Just(29) : (A2(r, 119141, 119142) ? $elm$core$Maybe$Just(4) : (A2(r, 119143, 119144) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing))) : ((e(119145) || (A2(r, 119163, 119170) || A2(r, 119173, 119179))) ? $elm$core$Maybe$Just(3) : ((A2(r, 119146, 119148) || (A2(r, 119171, 119172) || A2(r, 119180, 119208))) ? $elm$core$Maybe$Just(29) : (A2(r, 119149, 119154) ? $elm$core$Maybe$Just(4) : (A2(r, 119155, 119162) ? $elm$core$Maybe$Just(13) : $elm$core$Maybe$Nothing))))) : (l(119519) ? ((e(119209) || (A2(r, 119214, 119274) || (A2(r, 119296, 119361) || e(119365)))) ? $elm$core$Maybe$Just(29) : ((A2(r, 119210, 119213) || A2(r, 119362, 119364)) ? $elm$core$Maybe$Just(3) : (A2(r, 119488, 119507) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing))) : ((A2(r, 119520, 119539) || A2(r, 119648, 119672)) ? $elm$core$Maybe$Just(8) : (A2(r, 119552, 119638) ? $elm$core$Maybe$Just(29) : ((A2(r, 119808, 119833) || A2(r, 119860, 119885)) ? $elm$core$Maybe$Just(0) : ((A2(r, 119834, 119859) || A2(r, 119886, 119892)) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing))))))))) : (l(124111) ? (l(120629) ? (l(120137) ? (l(120004) ? ((A2(r, 119894, 119911) || (A2(r, 119938, 119963) || (A2(r, 119990, 119993) || (e(119995) || A2(r, 119997, 120003))))) ? $elm$core$Maybe$Just(1) : ((A2(r, 119912, 119937) || (e(119964) || (A2(r, 119966, 119967) || (e(119970) || (A2(r, 119973, 119974) || (A2(r, 119977, 119980) || A2(r, 119982, 119989))))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)) : ((A2(r, 120005, 120015) || (A2(r, 120042, 120067) || A2(r, 120094, 120119))) ? $elm$core$Maybe$Just(1) : ((A2(r, 120016, 120041) || (A2(r, 120068, 120069) || (A2(r, 120071, 120074) || (A2(r, 120077, 120084) || (A2(r, 120086, 120092) || (A2(r, 120120, 120121) || (A2(r, 120123, 120126) || (A2(r, 120128, 120132) || e(120134))))))))) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))) : (l(120431) ? ((A2(r, 120138, 120144) || (A2(r, 120172, 120197) || (A2(r, 120224, 120249) || (A2(r, 120276, 120301) || (A2(r, 120328, 120353) || A2(r, 120380, 120405)))))) ? $elm$core$Maybe$Just(0) : ((A2(r, 120146, 120171) || (A2(r, 120198, 120223) || (A2(r, 120250, 120275) || (A2(r, 120302, 120327) || (A2(r, 120354, 120379) || A2(r, 120406, 120430)))))) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)) : (l(120539) ? ((e(120431) || (A2(r, 120458, 120485) || A2(r, 120514, 120538))) ? $elm$core$Maybe$Just(1) : ((A2(r, 120432, 120457) || A2(r, 120488, 120512)) ? $elm$core$Maybe$Just(0) : (e(120513) ? $elm$core$Maybe$Just(26) : $elm$core$Maybe$Nothing))) : ((e(120539) || (e(120571) || e(120597))) ? $elm$core$Maybe$Just(26) : ((A2(r, 120540, 120545) || (A2(r, 120572, 120596) || A2(r, 120598, 120603))) ? $elm$core$Maybe$Just(1) : ((A2(r, 120546, 120570) || A2(r, 120604, 120628)) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))))) : (l(121478) ? (l(120771) ? ((e(120629) || (e(120655) || (e(120687) || (e(120713) || e(120745))))) ? $elm$core$Maybe$Just(26) : ((A2(r, 120630, 120654) || (A2(r, 120656, 120661) || (A2(r, 120688, 120712) || (A2(r, 120714, 120719) || A2(r, 120746, 120770))))) ? $elm$core$Maybe$Just(1) : ((A2(r, 120662, 120686) || A2(r, 120720, 120744)) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing))) : (l(121398) ? (e(120771) ? $elm$core$Maybe$Just(26) : ((A2(r, 120772, 120777) || e(120779)) ? $elm$core$Maybe$Just(1) : (e(120778) ? $elm$core$Maybe$Just(0) : (A2(r, 120782, 120831) ? $elm$core$Maybe$Just(6) : (A2(r, 120832, 121343) ? $elm$core$Maybe$Just(29) : (A2(r, 121344, 121397) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))))) : ((e(121398) || (A2(r, 121403, 121452) || (e(121461) || e(121476)))) ? $elm$core$Maybe$Just(3) : ((A2(r, 121399, 121402) || (A2(r, 121453, 121460) || (A2(r, 121462, 121475) || e(121477)))) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing)))) : (l(122927) ? (l(122634) ? (e(121478) ? $elm$core$Maybe$Just(29) : (A2(r, 121479, 121483) ? $elm$core$Maybe$Just(25) : ((A2(r, 121499, 121503) || A2(r, 121505, 121519)) ? $elm$core$Maybe$Just(3) : (A2(r, 122624, 122633) ? $elm$core$Maybe$Just(1) : $elm$core$Maybe$Nothing)))) : (e(122634) ? $elm$core$Maybe$Just(18) : ((A2(r, 122635, 122654) || A2(r, 122661, 122666)) ? $elm$core$Maybe$Just(1) : ((A2(r, 122880, 122886) || (A2(r, 122888, 122904) || (A2(r, 122907, 122913) || (A2(r, 122915, 122916) || A2(r, 122918, 122922))))) ? $elm$core$Maybe$Just(3) : $elm$core$Maybe$Nothing)))) : (l(123214) ? ((A2(r, 122928, 122989) || A2(r, 123191, 123197)) ? $elm$core$Maybe$Just(17) : ((e(123023) || A2(r, 123184, 123190)) ? $elm$core$Maybe$Just(3) : (A2(r, 123136, 123180) ? $elm$core$Maybe$Just(18) : (A2(r, 123200, 123209) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing)))) : ((e(123214) || (A2(r, 123536, 123565) || A2(r, 123584, 123627))) ? $elm$core$Maybe$Just(18) : (e(123215) ? $elm$core$Maybe$Just(29) : ((e(123566) || A2(r, 123628, 123631)) ? $elm$core$Maybe$Just(3) : (A2(r, 123632, 123641) ? $elm$core$Maybe$Just(6) : (e(123647) ? $elm$core$Maybe$Just(27) : $elm$core$Maybe$Nothing))))))))) : (l(127135) ? (l(126463) ? (l(125217) ? ((A2(r, 124112, 124138) || (A2(r, 124896, 124902) || (A2(r, 124904, 124907) || (A2(r, 124909, 124910) || (A2(r, 124912, 124926) || A2(r, 124928, 125124)))))) ? $elm$core$Maybe$Just(18) : (e(124139) ? $elm$core$Maybe$Just(17) : ((A2(r, 124140, 124143) || A2(r, 125136, 125142)) ? $elm$core$Maybe$Just(3) : (A2(r, 124144, 124153) ? $elm$core$Maybe$Just(6) : (A2(r, 125127, 125135) ? $elm$core$Maybe$Just(8) : (A2(r, 125184, 125216) ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing)))))) : (l(126123) ? (e(125217) ? $elm$core$Maybe$Just(0) : (A2(r, 125218, 125251) ? $elm$core$Maybe$Just(1) : (A2(r, 125252, 125258) ? $elm$core$Maybe$Just(3) : (e(125259) ? $elm$core$Maybe$Just(17) : (A2(r, 125264, 125273) ? $elm$core$Maybe$Just(6) : (A2(r, 125278, 125279) ? $elm$core$Maybe$Just(25) : (A2(r, 126065, 126122) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing))))))) : ((e(126123) || (A2(r, 126125, 126127) || (A2(r, 126129, 126132) || (A2(r, 126209, 126253) || A2(r, 126255, 126269))))) ? $elm$core$Maybe$Just(8) : ((e(126124) || e(126254)) ? $elm$core$Maybe$Just(29) : (e(126128) ? $elm$core$Maybe$Just(27) : $elm$core$Maybe$Nothing))))) : (l(126566) ? (l(126515) ? ((A2(r, 126464, 126467) || (A2(r, 126469, 126495) || (A2(r, 126497, 126498) || (e(126500) || (e(126503) || A2(r, 126505, 126514)))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing) : ((A2(r, 126516, 126519) || (e(126530) || (A2(r, 126541, 126543) || (A2(r, 126545, 126546) || (e(126548) || (A2(r, 126561, 126562) || (e(126564) || ((_Basics_modBy_fn(2, code) === 1) && (A2(r, 126521, 126523) || (A2(r, 126535, 126539) || A2(r, 126551, 126559))))))))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing)) : (l(126602) ? ((A2(r, 126567, 126570) || (A2(r, 126572, 126578) || (A2(r, 126580, 126583) || (A2(r, 126585, 126588) || (e(126590) || A2(r, 126592, 126601)))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing) : ((A2(r, 126603, 126619) || (A2(r, 126625, 126627) || (A2(r, 126629, 126633) || A2(r, 126635, 126651)))) ? $elm$core$Maybe$Just(18) : (A2(r, 126704, 126705) ? $elm$core$Maybe$Just(26) : ((A2(r, 126976, 127019) || A2(r, 127024, 127123)) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing)))))) : (l(129199) ? (l(127994) ? ((A2(r, 127136, 127150) || (A2(r, 127153, 127167) || (A2(r, 127169, 127183) || (A2(r, 127185, 127221) || (A2(r, 127245, 127405) || (A2(r, 127462, 127490) || (A2(r, 127504, 127547) || (A2(r, 127552, 127560) || (A2(r, 127568, 127569) || (A2(r, 127584, 127589) || A2(r, 127744, 127993))))))))))) ? $elm$core$Maybe$Just(29) : (A2(r, 127232, 127244) ? $elm$core$Maybe$Just(8) : $elm$core$Maybe$Nothing)) : (l(128991) ? ((e(127994) || (A2(r, 128000, 128727) || (A2(r, 128732, 128748) || (A2(r, 128752, 128764) || (A2(r, 128768, 128886) || A2(r, 128891, 128985)))))) ? $elm$core$Maybe$Just(29) : (A2(r, 127995, 127999) ? $elm$core$Maybe$Just(28) : $elm$core$Maybe$Nothing)) : ((A2(r, 128992, 129003) || (e(129008) || (A2(r, 129024, 129035) || (A2(r, 129040, 129095) || (A2(r, 129104, 129113) || (A2(r, 129120, 129159) || A2(r, 129168, 129197))))))) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing))) : (l(131071) ? (l(129726) ? ((A2(r, 129200, 129201) || (A2(r, 129280, 129619) || (A2(r, 129632, 129645) || (A2(r, 129648, 129660) || (A2(r, 129664, 129672) || A2(r, 129680, 129725)))))) ? $elm$core$Maybe$Just(29) : $elm$core$Maybe$Nothing) : ((A2(r, 129727, 129733) || (A2(r, 129742, 129755) || (A2(r, 129760, 129768) || (A2(r, 129776, 129784) || (A2(r, 129792, 129938) || A2(r, 129940, 129994)))))) ? $elm$core$Maybe$Just(29) : (A2(r, 130032, 130041) ? $elm$core$Maybe$Just(6) : $elm$core$Maybe$Nothing))) : (l(194559) ? ((A2(r, 131072, 173791) || (A2(r, 173824, 177977) || (A2(r, 177984, 178205) || (A2(r, 178208, 183969) || (A2(r, 183984, 191456) || A2(r, 191472, 192093)))))) ? $elm$core$Maybe$Just(18) : $elm$core$Maybe$Nothing) : ((A2(r, 194560, 195101) || (A2(r, 196608, 201546) || A2(r, 201552, 205743))) ? $elm$core$Maybe$Just(18) : ((e(917505) || A2(r, 917536, 917631)) ? $elm$core$Maybe$Just(13) : (A2(r, 917760, 917999) ? $elm$core$Maybe$Just(3) : (A2(r, 983040, 1114109) ? $elm$core$Maybe$Just(15) : $elm$core$Maybe$Nothing)))))))))))));
};
var $author$project$ElmSyntaxToRust$characterIsNotPrint = function (character) {
    if ($author$project$ElmSyntaxToRust$charIsLatinAlphaNumOrUnderscoreFast(character) || function () {
        switch (character) {
            case " ":
                return true;
            case ".":
                return true;
            case "!":
                return true;
            case "?":
                return true;
            case "-":
                return true;
            case ":":
                return true;
            default:
                return false;
        }
    }()) {
        return false;
    }
    else {
        var _v1 = $miniBill$elm_unicode$Unicode$getCategory(character);
        if (_v1.$ === 1) {
            return true;
        }
        else {
            var category = _v1.a;
            switch (category) {
                case 10:
                    return true;
                case 11:
                    return true;
                case 12:
                    return true;
                case 13:
                    return true;
                case 14:
                    return true;
                case 15:
                    return true;
                case 16:
                    return true;
                case 0:
                    return false;
                case 1:
                    return false;
                case 2:
                    return false;
                case 3:
                    return false;
                case 4:
                    return false;
                case 5:
                    return false;
                case 6:
                    return false;
                case 7:
                    return false;
                case 8:
                    return false;
                case 9:
                    return true;
                case 17:
                    return false;
                case 18:
                    return false;
                case 19:
                    return false;
                case 20:
                    return false;
                case 21:
                    return false;
                case 22:
                    return false;
                case 23:
                    return false;
                case 24:
                    return false;
                case 25:
                    return false;
                case 26:
                    return false;
                case 27:
                    return false;
                case 28:
                    return false;
                default:
                    return false;
            }
        }
    }
};
var $author$project$ElmSyntaxToRust$singleDoubleQuotedStringCharToEscaped = function (character) {
    switch (character) {
        case "\"":
            return "\\\"";
        case "\\":
            return "\\\\";
        case "\t":
            return "\\t";
        case "\n":
            return "\\n";
        case "\r":
            return "\\r";
        default:
            var otherCharacter = character;
            return $author$project$ElmSyntaxToRust$characterIsNotPrint(otherCharacter) ? ("\\u" + $author$project$ElmSyntaxToRust$characterHex(otherCharacter)) : $elm$core$String$fromChar(otherCharacter);
    }
};
var $author$project$ElmSyntaxToRust$printRustStringLiteral = function (stringContent) {
    var singleDoubleQuotedStringContentEscaped = _String_foldl_fn_unwrapped(function (contentChar, soFar) {
        return soFar + ($author$project$ElmSyntaxToRust$singleDoubleQuotedStringCharToEscaped(contentChar) + "");
    }, "", stringContent);
    return $author$project$Print$exactly("\"" + (singleDoubleQuotedStringContentEscaped + "\""));
};
var $author$project$Print$space = $author$project$Print$exactly(" ");
var $author$project$Print$spaceOrLinebreakIndented = function (lineSpreadToUse) {
    if (!lineSpreadToUse) {
        return $author$project$Print$space;
    }
    else {
        return $author$project$Print$linebreakIndented;
    }
};
var $author$project$Print$WithIndentAtNextMultipleOf4_fn = function (a, b) {
    return { $: 5, a: a, b: b };
}, $author$project$Print$WithIndentAtNextMultipleOf4 = F2($author$project$Print$WithIndentAtNextMultipleOf4_fn);
var $author$project$Print$withIndentAtNextMultipleOf4 = function (print) {
    return $author$project$Print$WithIndentAtNextMultipleOf4_fn(print, 0);
};
var $author$project$ElmSyntaxToRust$printRustPatternNotParenthesized = function (rustPattern) {
    switch (rustPattern.$) {
        case 0:
            return $author$project$ElmSyntaxToRust$printExactlyUnderscore;
        case 1:
            var bool = rustPattern.a;
            return bool ? $author$project$ElmSyntaxToRust$printRustPatternTrue : $author$project$ElmSyntaxToRust$printRustPatternFalse;
        case 2:
            var int64 = rustPattern.a;
            return $author$project$Print$exactly($elm$core$String$fromFloat(int64));
        case 3:
            var _char = rustPattern.a;
            return $author$project$ElmSyntaxToRust$printRustStringLiteral($elm$core$String$fromChar(_char));
        case 4:
            var string = rustPattern.a;
            return $author$project$ElmSyntaxToRust$printRustStringLiteral(string);
        case 5:
            var name = rustPattern.a;
            return $author$project$Print$exactly(name);
        case 6:
            var recordFields = rustPattern.a;
            return $author$project$ElmSyntaxToRust$printRustPatternRecord(recordFields);
        case 7:
            var patternVariant = rustPattern.a;
            return $author$project$Print$FollowedBy_fn(function () {
                var _v2 = patternVariant.X;
                if (!_v2.b) {
                    return $author$project$Print$empty;
                }
                else {
                    var variantValue0 = _v2.a;
                    var variantValue1Up = _v2.b;
                    return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyParenClosing, $author$project$Print$FollowedBy_fn($author$project$Print$listMapAndIntersperseAndFlatten_fn(function (value) {
                        var valuePrint = $author$project$ElmSyntaxToRust$printRustPatternNotParenthesized(value.l);
                        var _v3 = value.v;
                        if (_v3.$ === 1) {
                            return valuePrint;
                        }
                        else {
                            var label = _v3.a;
                            return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(valuePrint, $author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpread(valuePrint)))), $author$project$Print$exactly(label + ":"));
                        }
                    }, $author$project$ElmSyntaxToRust$printExactlyCommaSpace, _List_Cons(variantValue0, variantValue1Up)), $author$project$ElmSyntaxToRust$printExactlyParenOpening));
                }
            }(), $author$project$Print$exactly(patternVariant.P + ("." + patternVariant.a)));
        default:
            var parts = rustPattern.a;
            return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyParenClosing, $author$project$Print$FollowedBy_fn($author$project$Print$listMapAndIntersperseAndFlatten_fn($author$project$ElmSyntaxToRust$printRustPatternParenthesizedIfSpaceSeparated, $author$project$ElmSyntaxToRust$printExactlyCommaSpace, _List_Cons(parts.s, _List_Cons(parts.t, parts.ao))), $author$project$ElmSyntaxToRust$printExactlyParenOpening));
    }
};
var $author$project$ElmSyntaxToRust$printRustPatternParenthesizedIfSpaceSeparated = function (rustPattern) {
    var notParenthesizedPrint = $author$project$ElmSyntaxToRust$printRustPatternNotParenthesized(rustPattern);
    return $author$project$ElmSyntaxToRust$patternIsSpaceSeparated(rustPattern) ? $author$project$ElmSyntaxToRust$printParenthesized(notParenthesizedPrint) : notParenthesizedPrint;
};
var $author$project$ElmSyntaxToRust$printRustPatternRecord = function (recordFields) {
    return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyParenClosing, $author$project$Print$FollowedBy_fn($author$project$Print$listMapAndIntersperseAndFlatten_fn(function (_v0) {
        var fieldName = _v0.a;
        var fieldValuePattern = _v0.b;
        return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printRustPatternNotParenthesized(fieldValuePattern), $author$project$Print$exactly(fieldName + ": "));
    }, $author$project$ElmSyntaxToRust$printExactlyComma, $miniBill$elm_fast_dict$FastDict$toList(recordFields)), $author$project$ElmSyntaxToRust$printExactlyParenOpening));
};
var $author$project$ElmSyntaxToRust$printExactlyGreaterThan = $author$project$Print$exactly(">");
var $author$project$ElmSyntaxToRust$printExactlyLessThan = $author$project$Print$exactly("<");
var $author$project$ElmSyntaxToRust$printExactlyMinusGreaterThanSpace = $author$project$Print$exactly("-> ");
var $author$project$ElmSyntaxToRust$printRustTypeRecordEmpty = $author$project$Print$exactly("()");
var $author$project$ElmSyntaxToRust$rustReferenceToString = function (reference) {
    var _v0 = reference.b;
    if (_v0.$ === 1) {
        return reference.a;
    }
    else {
        var moduleName = _v0.a;
        return moduleName + ("." + reference.a);
    }
};
var $author$project$ElmSyntaxToRust$RustTypeRecord = function (a) {
    return { $: 2, a: a };
};
var $author$project$ElmSyntaxToRust$RustTypeTuple = function (a) {
    return { $: 1, a: a };
};
var $author$project$ElmSyntaxToRust$rustTypeExpandFunctionIntoReverse_fn = function (soFarReverse, rustType) {
    rustTypeExpandFunctionIntoReverse: while (true) {
        switch (rustType.$) {
            case 4:
                var _function = rustType.a;
                var $temp$soFarReverse = _List_Cons(_function.e, soFarReverse), $temp$rustType = _function.d;
                soFarReverse = $temp$soFarReverse;
                rustType = $temp$rustType;
                continue rustTypeExpandFunctionIntoReverse;
            case 0:
                var construct = rustType.a;
                return {
                    aj: $elm$core$List$reverse(soFarReverse),
                    d: $author$project$ElmSyntaxToRust$RustTypeConstruct(construct)
                };
            case 1:
                var parts = rustType.a;
                return {
                    aj: $elm$core$List$reverse(soFarReverse),
                    d: $author$project$ElmSyntaxToRust$RustTypeTuple(parts)
                };
            case 2:
                var fields = rustType.a;
                return {
                    aj: $elm$core$List$reverse(soFarReverse),
                    d: $author$project$ElmSyntaxToRust$RustTypeRecord(fields)
                };
            default:
                var variable = rustType.a;
                return {
                    aj: $elm$core$List$reverse(soFarReverse),
                    d: $author$project$ElmSyntaxToRust$RustTypeVariable(variable)
                };
        }
    }
}, $author$project$ElmSyntaxToRust$rustTypeExpandFunctionIntoReverse = F2($author$project$ElmSyntaxToRust$rustTypeExpandFunctionIntoReverse_fn);
var $author$project$ElmSyntaxToRust$rustTypeExpandToFunction = function (rustType) {
    return $author$project$ElmSyntaxToRust$rustTypeExpandFunctionIntoReverse_fn(_List_Nil, rustType);
};
var $author$project$ElmSyntaxToRust$typeIsSpaceSeparated = function (rustType) {
    switch (rustType.$) {
        case 3:
            return false;
        case 0:
            return false;
        case 1:
            return false;
        case 2:
            return false;
        default:
            return true;
    }
};
var $author$project$ElmSyntaxToRust$printRustTypeConstruct_fn = function (positionOrNothing, typeConstruct) {
    var referencePrint = $author$project$Print$exactly(_Utils_ap(function () {
        if (positionOrNothing.$ === 1) {
            return "";
        }
        else {
            var position = positionOrNothing.a;
            if (!position) {
                return typeConstruct.a2 ? "@escaping " : "";
            }
            else {
                return "";
            }
        }
    }(), $author$project$ElmSyntaxToRust$rustReferenceToString({ b: typeConstruct.b, a: typeConstruct.a })));
    var _v10 = typeConstruct.c;
    if (!_v10.b) {
        return referencePrint;
    }
    else {
        var argument0 = _v10.a;
        var argument1Up = _v10.b;
        var argumentPrints = $elm$core$List$map_fn(function (argument) {
            return $author$project$ElmSyntaxToRust$printRustTypeNotParenthesized_fn($elm$core$Maybe$Nothing, argument);
        }, _List_Cons(argument0, argument1Up));
        var fullLineSpread = $author$project$Print$lineSpreadListMapAndCombine_fn($author$project$Print$lineSpread, argumentPrints);
        return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyGreaterThan, $author$project$Print$FollowedBy_fn($author$project$Print$emptyOrLinebreakIndented(fullLineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$Print$listIntersperseAndFlatten_fn($author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(fullLineSpread), $author$project$ElmSyntaxToRust$printExactlyComma), argumentPrints), $author$project$Print$emptyOrLinebreakIndented(fullLineSpread))), $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyLessThan, referencePrint))));
    }
}, $author$project$ElmSyntaxToRust$printRustTypeConstruct = F2($author$project$ElmSyntaxToRust$printRustTypeConstruct_fn);
var $author$project$ElmSyntaxToRust$printRustTypeFunction_fn = function (positionOrNothing, typeFunction) {
    var outputExpanded = $author$project$ElmSyntaxToRust$rustTypeExpandToFunction(typeFunction.d);
    var outputPrint = $author$project$ElmSyntaxToRust$printRustTypeParenthesizedIfSpaceSeparated_fn(function () {
        if (positionOrNothing.$ === 1) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            return $elm$core$Maybe$Just(1);
        }
    }(), outputExpanded.d);
    var inputIsEscaping = function () {
        if (positionOrNothing.$ === 1) {
            return false;
        }
        else {
            return true;
        }
    }();
    var input1UpPrints = $elm$core$List$map_fn(function (input) {
        return $author$project$ElmSyntaxToRust$printRustTypeFunctionInput_fn({ dx: inputIsEscaping }, input);
    }, outputExpanded.aj);
    var input0Print = $author$project$ElmSyntaxToRust$printRustTypeFunctionInput_fn({ dx: inputIsEscaping }, typeFunction.e);
    var fullLineSpread = $author$project$Print$lineSpreadMergeWith_fn(function (_v7) {
        return $author$project$Print$lineSpreadListMapAndCombine_fn($author$project$Print$lineSpread, input1UpPrints);
    }, $author$project$Print$lineSpreadMergeWith_fn(function (_v6) {
        return $author$project$Print$lineSpread(outputPrint);
    }, $author$project$Print$lineSpread(input0Print)));
    return $author$project$Print$FollowedBy_fn($author$project$Print$FollowedBy_fn($author$project$Print$listMapAndIntersperseAndFlatten_fn(function (typePrint) {
        return $author$project$Print$FollowedBy_fn($author$project$Print$WithIndentIncreasedBy_fn(3, typePrint), $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyMinusGreaterThanSpace, $author$project$Print$spaceOrLinebreakIndented(fullLineSpread)));
    }, $author$project$Print$empty, _Utils_ap(input1UpPrints, _List_fromArray([outputPrint]))), input0Print), $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(fullLineSpread), $author$project$Print$exactly(function () {
        if (positionOrNothing.$ === 1) {
            return "@Sendable";
        }
        else {
            var position = positionOrNothing.a;
            if (!position) {
                return "@Sendable @escaping";
            }
            else {
                return "@Sendable";
            }
        }
    }())));
}, $author$project$ElmSyntaxToRust$printRustTypeFunction = F2($author$project$ElmSyntaxToRust$printRustTypeFunction_fn);
var $author$project$ElmSyntaxToRust$printRustTypeFunctionInput_fn = function (config, input) {
    var input0PartPrints = $elm$core$List$map_fn(function (inputPart) {
        return $author$project$ElmSyntaxToRust$printRustTypeNotParenthesized_fn(config.dx ? $elm$core$Maybe$Just(0) : $elm$core$Maybe$Nothing, inputPart);
    }, input);
    var input0LineSpread = $author$project$Print$lineSpreadListMapAndCombine_fn($author$project$Print$lineSpread, input0PartPrints);
    return $author$project$ElmSyntaxToRust$printParenthesized($author$project$Print$listMapAndIntersperseAndFlatten_fn(function (inputPart) {
        return inputPart;
    }, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(input0LineSpread), $author$project$ElmSyntaxToRust$printExactlyComma), input0PartPrints));
}, $author$project$ElmSyntaxToRust$printRustTypeFunctionInput = F2($author$project$ElmSyntaxToRust$printRustTypeFunctionInput_fn);
var $author$project$ElmSyntaxToRust$printRustTypeNotParenthesized_fn = function (position, rustType) {
    switch (rustType.$) {
        case 3:
            var variable = rustType.a;
            return $author$project$Print$exactly(variable);
        case 0:
            var typeConstruct = rustType.a;
            return $author$project$ElmSyntaxToRust$printRustTypeConstruct_fn(position, typeConstruct);
        case 1:
            var parts = rustType.a;
            return $author$project$ElmSyntaxToRust$printRustTypeTuple(parts);
        case 2:
            var fields = rustType.a;
            return $author$project$ElmSyntaxToRust$printRustTypeRecord(fields);
        default:
            var typeFunction = rustType.a;
            return $author$project$ElmSyntaxToRust$printRustTypeFunction_fn(position, typeFunction);
    }
}, $author$project$ElmSyntaxToRust$printRustTypeNotParenthesized = F2($author$project$ElmSyntaxToRust$printRustTypeNotParenthesized_fn);
var $author$project$ElmSyntaxToRust$printRustTypeParenthesizedIfSpaceSeparated_fn = function (position, rustType) {
    var notParenthesizedPrint = $author$project$ElmSyntaxToRust$printRustTypeNotParenthesized_fn(position, rustType);
    return $author$project$ElmSyntaxToRust$typeIsSpaceSeparated(rustType) ? $author$project$ElmSyntaxToRust$printParenthesized(notParenthesizedPrint) : notParenthesizedPrint;
}, $author$project$ElmSyntaxToRust$printRustTypeParenthesizedIfSpaceSeparated = F2($author$project$ElmSyntaxToRust$printRustTypeParenthesizedIfSpaceSeparated_fn);
var $author$project$ElmSyntaxToRust$printRustTypeRecord = function (fields) {
    return $miniBill$elm_fast_dict$FastDict$isEmpty(fields) ? $author$project$ElmSyntaxToRust$printRustTypeRecordEmpty : $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyParenClosing, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$FollowedBy_fn($author$project$Print$WithIndentIncreasedBy_fn(1, $author$project$Print$listMapAndIntersperseAndFlatten_fn(function (_v2) {
        var fieldName = _v2.a;
        var fieldValue = _v2.b;
        var fieldValuePrint = $author$project$ElmSyntaxToRust$printRustTypeNotParenthesized_fn($elm$core$Maybe$Nothing, fieldValue);
        return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(fieldValuePrint, $author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpread(fieldValuePrint)))), $author$project$Print$exactly(fieldName + ":"));
    }, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$ElmSyntaxToRust$printExactlyComma), $miniBill$elm_fast_dict$FastDict$toList(fields))), $author$project$ElmSyntaxToRust$printExactlyParenOpening)));
};
var $author$project$ElmSyntaxToRust$printRustTypeTuple = function (parts) {
    var part2UpPrints = $elm$core$List$map_fn(function (part) {
        return $author$project$ElmSyntaxToRust$printRustTypeNotParenthesized_fn($elm$core$Maybe$Nothing, part);
    }, parts.ao);
    var part1Print = $author$project$ElmSyntaxToRust$printRustTypeNotParenthesized_fn($elm$core$Maybe$Nothing, parts.t);
    var part0Print = $author$project$ElmSyntaxToRust$printRustTypeNotParenthesized_fn($elm$core$Maybe$Nothing, parts.s);
    var lineSpread = $author$project$Print$lineSpreadMergeWith_fn(function (_v1) {
        return $author$project$Print$lineSpreadListMapAndCombine_fn($author$project$Print$lineSpread, part2UpPrints);
    }, $author$project$Print$lineSpreadMergeWith_fn(function (_v0) {
        return $author$project$Print$lineSpread(part1Print);
    }, $author$project$Print$lineSpread(part0Print)));
    return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyParenClosing, $author$project$Print$FollowedBy_fn($author$project$Print$emptyOrLinebreakIndented(lineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$WithIndentIncreasedBy_fn(3, $author$project$Print$listMapAndIntersperseAndFlatten_fn(function (partPrint) {
        return partPrint;
    }, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(lineSpread), $author$project$ElmSyntaxToRust$printExactlyComma), _List_Cons(part0Print, _List_Cons(part1Print, part2UpPrints)))), $author$project$ElmSyntaxToRust$printExactlyParenOpening)));
};
var $author$project$ElmSyntaxToRust$printRustStatementLetDeclarationUninitialized = function (letDeclarationUnassigned) {
    var typePrint = $author$project$ElmSyntaxToRust$printRustTypeNotParenthesized_fn($elm$core$Maybe$Nothing, letDeclarationUnassigned.n);
    return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(typePrint, $author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpread(typePrint)))), $author$project$Print$exactly("let " + (letDeclarationUnassigned.a + ":")));
};
var $author$project$ElmSyntaxToRust$qualifiedReferenceToRustName = function (reference) {
    var _v0 = reference.b;
    if (_v0.$ === 1) {
        return reference.a;
    }
    else {
        var moduleOrigin = _v0.a;
        return moduleOrigin + ("." + reference.a);
    }
};
var $author$project$ElmSyntaxToRust$rustExpressionIsSpaceSeparated = function (rustExpression) {
    switch (rustExpression.$) {
        case 1:
            return false;
        case 0:
            return false;
        case 2:
            return false;
        case 3:
            return false;
        case 4:
            return false;
        case 5:
            return false;
        case 6:
            return false;
        case 7:
            return false;
        case 8:
            return false;
        case 13:
            return true;
        case 14:
            return true;
        case 9:
            return false;
        case 10:
            return false;
        case 11:
            return false;
        default:
            return false;
    }
};
var $author$project$ElmSyntaxToRust$rustFuncGenericsToString = function (typeVariablesToDeclare) {
    if (!typeVariablesToDeclare.b) {
        return "";
    }
    else {
        var typeParameter0 = typeVariablesToDeclare.a;
        var typeParameter1Up = typeVariablesToDeclare.b;
        return "<" + ($author$project$ElmSyntaxToRust$listFilledMapAndStringJoinWith_fn(", ", function (typeParameter) {
            return _String_startsWith_fn("comparable", typeParameter) ? (typeParameter + ": Comparable & Sendable") : (typeParameter + ": Sendable");
        }, typeParameter0, typeParameter1Up) + ">");
    }
};
var $author$project$ElmSyntaxToRust$rustPatternContainsBindings = function (rustPattern) {
    switch (rustPattern.$) {
        case 5:
            return true;
        case 0:
            return false;
        case 1:
            return false;
        case 2:
            return false;
        case 3:
            return false;
        case 4:
            return false;
        case 8:
            var partPatterns = rustPattern.a;
            return $author$project$ElmSyntaxToRust$rustPatternContainsBindings(partPatterns.s) || ($author$project$ElmSyntaxToRust$rustPatternContainsBindings(partPatterns.t) || $elm$core$List$any_fn($author$project$ElmSyntaxToRust$rustPatternContainsBindings, partPatterns.ao));
        case 7:
            var patternVariant = rustPattern.a;
            return $elm$core$List$any_fn(function (value) {
                return $author$project$ElmSyntaxToRust$rustPatternContainsBindings(value.l);
            }, patternVariant.X);
        default:
            var recordPatternInexhaustiveFieldNames = rustPattern.a;
            return $miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (_v1, valuePattern, soFar) {
                return soFar || $author$project$ElmSyntaxToRust$rustPatternContainsBindings(valuePattern);
            }), false, recordPatternInexhaustiveFieldNames);
    }
};
var $author$project$ElmSyntaxToRust$printRustExpressionArrayLiteral = function (elements) {
    if (!elements.b) {
        return $author$project$ElmSyntaxToRust$printRustExpressionArrayLiteralEmpty;
    }
    else {
        var element0 = elements.a;
        var element1Up = elements.b;
        var elementsPrint = $author$project$Print$listMapAndIntersperseAndFlatten_fn($author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized, $author$project$ElmSyntaxToRust$printExactlyCommaLinebreakIndented, _List_Cons(element0, element1Up));
        return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyAngledClosing, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpread(elementsPrint)), $author$project$Print$FollowedBy_fn($author$project$Print$WithIndentIncreasedBy_fn(2, elementsPrint), $author$project$ElmSyntaxToRust$printExactlyAngledOpeningSpace)));
    }
};
var $author$project$ElmSyntaxToRust$printRustExpressionCall = function (call) {
    var calledPrint = $author$project$ElmSyntaxToRust$printRustExpressionParenthesizedIfSpaceSeparated(call.w);
    var _v10 = call.c;
    if (!_v10.b) {
        return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyParenOpeningParenClosing, calledPrint);
    }
    else {
        var argument0 = _v10.a;
        var argument1Up = _v10.b;
        var argumentPrints = $elm$core$List$map_fn(function (argument) {
            var valuePrint = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(argument.l);
            var _v11 = argument.v;
            if (_v11.$ === 1) {
                return valuePrint;
            }
            else {
                var label = _v11.a;
                return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(valuePrint, $author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpread(valuePrint)))), $author$project$Print$exactly(label + ":"));
            }
        }, _List_Cons(argument0, argument1Up));
        var argumentsLineSpread = $author$project$Print$lineSpreadListMapAndCombine_fn($author$project$Print$lineSpread, argumentPrints);
        return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyParenClosing, $author$project$Print$FollowedBy_fn($author$project$Print$emptyOrLinebreakIndented(argumentsLineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$Print$listIntersperseAndFlatten_fn($author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(argumentsLineSpread), $author$project$ElmSyntaxToRust$printExactlyComma), argumentPrints), $author$project$Print$emptyOrLinebreakIndented(argumentsLineSpread))), $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyParenOpening, calledPrint))));
    }
};
var $author$project$ElmSyntaxToRust$printRustExpressionIfElse = function (syntaxIfElse) {
    var conditionPrint = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(syntaxIfElse.aA);
    var conditionLineSpread = $author$project$Print$lineSpread(conditionPrint);
    return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyCurlyClosing, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(syntaxIfElse.aB), $author$project$Print$linebreakIndented)), $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyCurlyClosingSpaceElseSpaceCurlyOpening, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(syntaxIfElse.aC), $author$project$Print$linebreakIndented)), $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyCurlyOpening, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(conditionLineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(conditionPrint, $author$project$Print$spaceOrLinebreakIndented(conditionLineSpread))), $author$project$ElmSyntaxToRust$printExactlyIf)))))))));
};
var $author$project$ElmSyntaxToRust$printRustExpressionLambda = function (lambda) {
    var statementsAndResultPrint = function () {
        var _v9 = lambda.j;
        if (!_v9.b) {
            return $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(lambda.h);
        }
        else {
            var statement0 = _v9.a;
            var statement1Up = _v9.b;
            return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printRustReturn(lambda.h), $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$ElmSyntaxToRust$printRustStatements(_List_Cons(statement0, statement1Up))));
        }
    }();
    var statementsAndResultPrintLineSpread = $author$project$Print$lineSpread(statementsAndResultPrint);
    var _v7 = lambda.o;
    if (!_v7.b) {
        return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyCurlyClosing, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(statementsAndResultPrintLineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(statementsAndResultPrint, $author$project$Print$spaceOrLinebreakIndented(statementsAndResultPrintLineSpread))), $author$project$ElmSyntaxToRust$printExactlyCurlyOpening)));
    }
    else {
        var parameter0 = _v7.a;
        var parameter1Up = _v7.b;
        var parameterPrints = $elm$core$List$map_fn(function (lambdaParameter) {
            var parameterTypePrint = $author$project$ElmSyntaxToRust$printRustTypeNotParenthesized_fn($elm$core$Maybe$Just(0), lambdaParameter.n);
            return $author$project$ElmSyntaxToRust$printParenthesized($author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(parameterTypePrint, $author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpread(parameterTypePrint)))), $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyColon, $author$project$Print$exactly(lambdaParameter.a))));
        }, _List_Cons(parameter0, parameter1Up));
        var parametersLineSpread = $author$project$Print$lineSpreadListMapAndCombine_fn($author$project$Print$lineSpread, parameterPrints);
        var fullLineSpread = $author$project$Print$lineSpreadMergeWith_fn(function (_v8) {
            return parametersLineSpread;
        }, statementsAndResultPrintLineSpread);
        return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyCurlyClosing, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(fullLineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(statementsAndResultPrint, $author$project$Print$spaceOrLinebreakIndented(fullLineSpread))), $author$project$Print$FollowedBy_fn($author$project$Print$WithIndentIncreasedBy_fn(2, $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlySpaceIn, $author$project$Print$listMapAndIntersperseAndFlatten_fn(function (lambdaParameter) {
            return lambdaParameter;
        }, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(parametersLineSpread), $author$project$ElmSyntaxToRust$printExactlyComma), parameterPrints))), $author$project$ElmSyntaxToRust$printExactlyCurlyOpeningSpace))));
    }
};
var $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized = function (rustExpression) {
    switch (rustExpression.$) {
        case 11:
            var call = rustExpression.a;
            return $author$project$ElmSyntaxToRust$printRustExpressionCall(call);
        case 3:
            return $author$project$ElmSyntaxToRust$printRustExpressionSelf;
        case 4:
            var reference = rustExpression.a;
            return $author$project$Print$exactly($author$project$ElmSyntaxToRust$qualifiedReferenceToRustName(reference));
        case 5:
            var reference = rustExpression.a;
            return $author$project$Print$exactly(reference.P + ("." + reference.a));
        case 13:
            var ifElse = rustExpression.a;
            return $author$project$ElmSyntaxToRust$printRustExpressionIfElse(ifElse);
        case 1:
            var charValue = rustExpression.a;
            return $author$project$ElmSyntaxToRust$printRustStringLiteral($elm$core$String$fromChar(charValue));
        case 0:
            var _double = rustExpression.a;
            return $author$project$Print$exactly($author$project$ElmSyntaxToRust$doubleLiteral(_double));
        case 2:
            var string = rustExpression.a;
            return $author$project$ElmSyntaxToRust$printRustStringLiteral(string);
        case 8:
            var parts = rustExpression.a;
            return $author$project$ElmSyntaxToRust$printRustExpressionTuple(parts);
        case 12:
            var syntaxLambda = rustExpression.a;
            return $author$project$ElmSyntaxToRust$printRustExpressionLambda(syntaxLambda);
        case 10:
            var fields = rustExpression.a;
            return $author$project$ElmSyntaxToRust$printRustExpressionRecord(fields);
        case 9:
            var elements = rustExpression.a;
            return $author$project$ElmSyntaxToRust$printRustExpressionArrayLiteral(elements);
        case 6:
            var inNegation = rustExpression.a;
            return $author$project$Print$FollowedBy_fn($author$project$Print$WithIndentIncreasedBy_fn(1, $author$project$ElmSyntaxToRust$printRustExpressionParenthesizedIfSpaceSeparated(inNegation)), $author$project$ElmSyntaxToRust$printExactlyMinus);
        case 7:
            var syntaxRecordAccess = rustExpression.a;
            return $author$project$Print$FollowedBy_fn($author$project$Print$exactly("." + syntaxRecordAccess.bI), $author$project$ElmSyntaxToRust$printRustExpressionParenthesizedIfSpaceSeparated(syntaxRecordAccess.aY));
        default:
            var _switch = rustExpression.a;
            return $author$project$ElmSyntaxToRust$printRustExpressionSwitch(_switch);
    }
};
var $author$project$ElmSyntaxToRust$printRustExpressionParenthesizedIfSpaceSeparated = function (rustExpression) {
    var notParenthesizedPrint = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(rustExpression);
    return $author$project$ElmSyntaxToRust$rustExpressionIsSpaceSeparated(rustExpression) ? $author$project$ElmSyntaxToRust$printParenthesized(notParenthesizedPrint) : notParenthesizedPrint;
};
var $author$project$ElmSyntaxToRust$printRustExpressionRecord = function (rustRecordFields) {
    if ($miniBill$elm_fast_dict$FastDict$isEmpty(rustRecordFields)) {
        return $author$project$ElmSyntaxToRust$printExactlyRustExpressionRecordEmpty;
    }
    else {
        var fieldsPrint = $author$project$Print$listMapAndIntersperseAndFlatten_fn(function (_v5) {
            var fieldName = _v5.a;
            var fieldValue = _v5.b;
            var fieldValuePrint = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(fieldValue);
            return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(fieldValuePrint, $author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpread(fieldValuePrint)))), $author$project$Print$exactly(fieldName + ":"));
        }, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$ElmSyntaxToRust$printExactlyComma), $miniBill$elm_fast_dict$FastDict$toList(rustRecordFields));
        return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyParenClosing, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpread(fieldsPrint)), $author$project$Print$FollowedBy_fn($author$project$Print$WithIndentIncreasedBy_fn(1, fieldsPrint), $author$project$ElmSyntaxToRust$printExactlyParenOpening)));
    }
};
var $author$project$ElmSyntaxToRust$printRustExpressionSwitch = function (rustSwitch) {
    var matchedPrint = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(rustSwitch.at);
    var matchedPrintLineSpread = $author$project$Print$lineSpread(matchedPrint);
    return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyCurlyClosing, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$FollowedBy_fn($author$project$Print$FollowedBy_fn($author$project$Print$listMapAndIntersperseAndFlatten_fn($author$project$ElmSyntaxToRust$printRustExpressionSwitchCase, $author$project$Print$linebreakIndented, _List_Cons(rustSwitch.ar, rustSwitch.as)), $author$project$Print$linebreakIndented), $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlySpaceCurlyOpening, $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(matchedPrint, $author$project$Print$spaceOrLinebreakIndented(matchedPrintLineSpread))), $author$project$ElmSyntaxToRust$printExactlySwitch)))));
};
var $author$project$ElmSyntaxToRust$printRustExpressionSwitchCase = function (branch) {
    var patternPrint = $author$project$ElmSyntaxToRust$printRustPatternNotParenthesized(branch.m);
    return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(branch.h), $author$project$Print$linebreakIndented)), $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyColon, $author$project$Print$FollowedBy_fn($author$project$Print$WithIndentIncreasedBy_fn(2, patternPrint), $author$project$ElmSyntaxToRust$rustPatternContainsBindings(branch.m) ? $author$project$ElmSyntaxToRust$printExactlyCaseSpaceLetSpace : $author$project$ElmSyntaxToRust$printExactlyCaseSpace)));
};
var $author$project$ElmSyntaxToRust$printRustExpressionTuple = function (parts) {
    var part2UpPrints = $elm$core$List$map_fn($author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized, parts.ao);
    var part1Print = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(parts.t);
    var part0Print = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(parts.s);
    var lineSpread = $author$project$Print$lineSpreadMergeWith_fn(function (_v4) {
        return $author$project$Print$lineSpreadListMapAndCombine_fn($author$project$Print$lineSpread, part2UpPrints);
    }, $author$project$Print$lineSpreadMergeWith_fn(function (_v3) {
        return $author$project$Print$lineSpread(part1Print);
    }, $author$project$Print$lineSpread(part0Print)));
    return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyParenClosing, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(lineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$listMapAndIntersperseAndFlatten_fn(function (partPrint) {
        return $author$project$Print$WithIndentIncreasedBy_fn(2, partPrint);
    }, $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyCommaSpace, $author$project$Print$emptyOrLinebreakIndented(lineSpread)), _List_Cons(part0Print, _List_Cons(part1Print, part2UpPrints))), $author$project$ElmSyntaxToRust$printExactlyParenOpeningSpace)));
};
var $author$project$ElmSyntaxToRust$printRustLetDestructuring = function (letDestructuring) {
    return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(letDestructuring.O), $author$project$Print$linebreakIndented), $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlySpaceEquals, $author$project$ElmSyntaxToRust$printParenthesized($author$project$ElmSyntaxToRust$printRustPatternParenthesizedIfSpaceSeparated(letDestructuring.m))))), $author$project$ElmSyntaxToRust$printExactlyLetSpace);
};
var $author$project$ElmSyntaxToRust$printRustLocalFuncDeclaration = function (rustValueOrFunctionDeclaration) {
    var resultTypePrint = $author$project$ElmSyntaxToRust$printRustTypeNotParenthesized_fn($elm$core$Maybe$Just(1), rustValueOrFunctionDeclaration.Q);
    var parameterPrints = $elm$core$List$map_fn(function (parameter) {
        var parameterTypePrint = $author$project$ElmSyntaxToRust$printRustTypeNotParenthesized_fn($elm$core$Maybe$Just(0), parameter.n);
        return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(parameterTypePrint, $author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpread(parameterTypePrint)))), $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyColon, $author$project$Print$exactly("_ " + parameter.a)));
    }, rustValueOrFunctionDeclaration.o);
    var parametersLineSpread = $author$project$Print$lineSpreadListMapAndCombine_fn($author$project$Print$lineSpread, parameterPrints);
    var headerLineSpread = $author$project$Print$lineSpreadMergeWith_fn(function (_v2) {
        return $author$project$Print$lineSpread(resultTypePrint);
    }, parametersLineSpread);
    return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyCurlyClosing, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$FollowedBy_fn($author$project$Print$WithIndentIncreasedBy_fn(4, $author$project$Print$FollowedBy_fn(function () {
        var _v1 = rustValueOrFunctionDeclaration.j;
        if (!_v1.b) {
            return $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(rustValueOrFunctionDeclaration.h);
        }
        else {
            var statement0 = _v1.a;
            var statement1Up = _v1.b;
            return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printRustReturn(rustValueOrFunctionDeclaration.h), $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$ElmSyntaxToRust$printRustStatements(_List_Cons(statement0, statement1Up))));
        }
    }(), $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlySpaceCurlyOpening, $author$project$Print$FollowedBy_fn(resultTypePrint, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(headerLineSpread), $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlySpaceMinusGreaterThanSpace, $author$project$ElmSyntaxToRust$printParenthesized($author$project$Print$FollowedBy_fn($author$project$Print$emptyOrLinebreakIndented(parametersLineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$listMapAndIntersperseAndFlatten_fn(function (parameterPrint) {
        return parameterPrint;
    }, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(parametersLineSpread), $author$project$ElmSyntaxToRust$printExactlyComma), parameterPrints), $author$project$Print$emptyOrLinebreakIndented(parametersLineSpread))))))))))), $author$project$Print$exactly("@Sendable func " + (rustValueOrFunctionDeclaration.a + $author$project$ElmSyntaxToRust$rustFuncGenericsToString(rustValueOrFunctionDeclaration.b2))))));
};
var $author$project$ElmSyntaxToRust$printRustLocalLetDeclaration = function (rustLetDeclaration) {
    var resultTypePrint = $author$project$ElmSyntaxToRust$printRustTypeNotParenthesized_fn($elm$core$Maybe$Nothing, rustLetDeclaration.Q);
    return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(rustLetDeclaration.h), $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlySpaceEqualsLinebreakIndented, $author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(resultTypePrint, $author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpread(resultTypePrint))))))), $author$project$Print$exactly("let " + (rustLetDeclaration.a + ":")));
};
var $author$project$ElmSyntaxToRust$printRustReturn = function (rustResultExpression) {
    var rustResultExpressionPrint = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(rustResultExpression);
    return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(rustResultExpressionPrint, $author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpread(rustResultExpressionPrint)))), $author$project$ElmSyntaxToRust$printExactlyReturn);
};
var $author$project$ElmSyntaxToRust$printRustStatement = function (rustStatement) {
    switch (rustStatement.$) {
        case 0:
            var letDestructuring = rustStatement.a;
            return $author$project$ElmSyntaxToRust$printRustLetDestructuring(letDestructuring);
        case 2:
            var letValueOrFunction = rustStatement.a;
            return $author$project$ElmSyntaxToRust$printRustLocalFuncDeclaration(letValueOrFunction);
        case 1:
            var rustLetDeclaration = rustStatement.a;
            return $author$project$ElmSyntaxToRust$printRustLocalLetDeclaration(rustLetDeclaration);
        case 3:
            var letDeclarationUnassigned = rustStatement.a;
            return $author$project$ElmSyntaxToRust$printRustStatementLetDeclarationUninitialized(letDeclarationUnassigned);
        case 4:
            var varDeclarationInitialized = rustStatement.a;
            var assignedValuePrint = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(varDeclarationInitialized.l);
            return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(assignedValuePrint, $author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpread(assignedValuePrint)))), $author$project$Print$exactly("var " + (varDeclarationInitialized.a + " =")));
        case 5:
            var assignment = rustStatement.a;
            return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(assignment.av), $author$project$Print$linebreakIndented)), $author$project$Print$exactly(assignment.a + " ="));
        case 6:
            var assignment = rustStatement.a;
            var assignedValuePrint = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(assignment.av);
            return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(assignedValuePrint, $author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpread(assignedValuePrint)))), $author$project$Print$exactly(assignment.cU + ("." + (assignment.cs + " ="))));
        case 7:
            var ifElse = rustStatement.a;
            return $author$project$ElmSyntaxToRust$printRustStatementIfElse(ifElse);
        default:
            var syntaxSwitch = rustStatement.a;
            return $author$project$ElmSyntaxToRust$printRustStatementSwitch(syntaxSwitch);
    }
};
var $author$project$ElmSyntaxToRust$printRustStatementIfElse = function (ifElse) {
    var conditionPrint = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(ifElse.aA);
    var conditionLineSpread = $author$project$Print$lineSpread(conditionPrint);
    return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyCurlyClosing, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printRustStatements(ifElse.aB), $author$project$Print$linebreakIndented)), $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyCurlyClosingSpaceElseSpaceCurlyOpening, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printRustStatements(ifElse.aC), $author$project$Print$linebreakIndented)), $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyCurlyOpening, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(conditionLineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(conditionPrint, $author$project$Print$spaceOrLinebreakIndented(conditionLineSpread))), $author$project$ElmSyntaxToRust$printExactlyIf)))))))));
};
var $author$project$ElmSyntaxToRust$printRustStatementSwitch = function (rustSwitch) {
    var matchedPrint = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(rustSwitch.at);
    var matchedPrintLineSpread = $author$project$Print$lineSpread(matchedPrint);
    return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyCurlyClosing, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$FollowedBy_fn($author$project$Print$FollowedBy_fn($author$project$Print$listMapAndIntersperseAndFlatten_fn($author$project$ElmSyntaxToRust$printRustStatementSwitchCase, $author$project$Print$linebreakIndented, _List_Cons(rustSwitch.ar, rustSwitch.as)), $author$project$Print$linebreakIndented), $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlySpaceCurlyOpening, $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(matchedPrint, $author$project$Print$spaceOrLinebreakIndented(matchedPrintLineSpread))), $author$project$ElmSyntaxToRust$printExactlySwitch)))));
};
var $author$project$ElmSyntaxToRust$printRustStatementSwitchCase = function (branch) {
    var patternPrint = $author$project$ElmSyntaxToRust$printRustPatternNotParenthesized(branch.m);
    return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printRustStatements(branch.j), $author$project$Print$linebreakIndented)), $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyColon, $author$project$Print$FollowedBy_fn($author$project$Print$WithIndentIncreasedBy_fn(2, patternPrint), $author$project$ElmSyntaxToRust$rustPatternContainsBindings(branch.m) ? $author$project$ElmSyntaxToRust$printExactlyCaseSpaceLetSpace : $author$project$ElmSyntaxToRust$printExactlyCaseSpace)));
};
var $author$project$ElmSyntaxToRust$printRustStatements = function (rustStatements) {
    return $author$project$Print$listMapAndIntersperseAndFlatten_fn($author$project$ElmSyntaxToRust$printRustStatement, $author$project$Print$linebreakIndented, rustStatements);
};
var $author$project$ElmSyntaxToRust$printRustComputedProperty = function (computedProperty) {
    var resultTypePrint = $author$project$ElmSyntaxToRust$printRustTypeNotParenthesized_fn($elm$core$Maybe$Nothing, computedProperty.n);
    var assignedValuePrint = $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(computedProperty.l);
    return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyCurlyClosing, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpread(assignedValuePrint)), $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(assignedValuePrint, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpread(assignedValuePrint)), $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlySpaceCurlyOpening, $author$project$Print$FollowedBy_fn(resultTypePrint, $author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpread(resultTypePrint))))))), $author$project$Print$exactly("var " + (computedProperty.a + ":")))));
};
var $author$project$ElmSyntaxToRust$printRustEnumCaseDeclaration = function (rustVariant) {
    var _v0 = rustVariant.X;
    if (!_v0.b) {
        return $author$project$Print$exactly("case " + rustVariant.a);
    }
    else {
        var value0 = _v0.a;
        var value1Up = _v0.b;
        var valuePrints = $elm$core$List$map_fn(function (value) {
            var valuePrint = $author$project$ElmSyntaxToRust$printRustTypeNotParenthesized_fn($elm$core$Maybe$Nothing, value.l);
            var _v1 = value.v;
            if (_v1.$ === 1) {
                return valuePrint;
            }
            else {
                var label = _v1.a;
                return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(valuePrint, $author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpread(valuePrint)))), $author$project$Print$exactly(label + ":"));
            }
        }, _List_Cons(value0, value1Up));
        var fullLineSpread = $author$project$Print$lineSpreadListMapAndCombine_fn($author$project$Print$lineSpread, valuePrints);
        return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyParenClosing, $author$project$Print$FollowedBy_fn($author$project$Print$emptyOrLinebreakIndented(fullLineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$Print$listMapAndIntersperseAndFlatten_fn(function (valuePrint) {
            return $author$project$Print$withIndentAtNextMultipleOf4(valuePrint);
        }, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(fullLineSpread), $author$project$ElmSyntaxToRust$printExactlyComma), valuePrints), $author$project$Print$emptyOrLinebreakIndented(fullLineSpread))), $author$project$Print$exactly("case " + (rustVariant.a + "(")))));
    }
};
var $author$project$ElmSyntaxToRust$printRustEnumDeclaration = function (rustEnumType) {
    return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyCurlyClosing, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($miniBill$elm_fast_dict$FastDict$isEmpty(rustEnumType.aX) ? $author$project$Print$empty : $author$project$Print$FollowedBy_fn($author$project$Print$listMapAndIntersperseAndFlatten_fn(function (_v2) {
        var name = _v2.a;
        var computedProperty = _v2.b;
        return $author$project$ElmSyntaxToRust$printRustComputedProperty({ a: name, n: computedProperty.n, l: computedProperty.l });
    }, $author$project$Print$linebreakIndented, $miniBill$elm_fast_dict$FastDict$toList(rustEnumType.aX)), $author$project$Print$linebreakIndented), $author$project$Print$FollowedBy_fn($author$project$Print$listMapAndIntersperseAndFlatten_fn(function (_v1) {
        var name = _v1.a;
        var values = _v1.b;
        return $author$project$ElmSyntaxToRust$printRustEnumCaseDeclaration({ a: name, X: values });
    }, $author$project$Print$linebreakIndented, $miniBill$elm_fast_dict$FastDict$toList(rustEnumType.aL)), $author$project$Print$linebreakIndented))), $author$project$Print$exactly((rustEnumType.dd ? "public indirect enum " : "public enum ") + (rustEnumType.a + (function () {
        var _v0 = rustEnumType.o;
        if (!_v0.b) {
            return "";
        }
        else {
            var parameter0 = _v0.a;
            var parameter1Up = _v0.b;
            return "<" + ($elm$core$String$join_fn(", ", $elm$core$List$map_fn(function (parameter) {
                return parameter + ": Sendable";
            }, _List_Cons(parameter0, parameter1Up))) + ">");
        }
    }() + ": Sendable {"))))));
};
var $author$project$ElmSyntaxToRust$rustTypeContainedVariables = function (rustType) {
    switch (rustType.$) {
        case 3:
            var variable = rustType.a;
            return $miniBill$elm_fast_dict$FastSet$singleton(variable);
        case 1:
            var parts = rustType.a;
            return $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn($author$project$ElmSyntaxToRust$rustTypeContainedVariables, parts.ao), $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$rustTypeContainedVariables(parts.t), $author$project$ElmSyntaxToRust$rustTypeContainedVariables(parts.s)));
        case 2:
            var fields = rustType.a;
            return $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn($author$project$ElmSyntaxToRust$rustTypeContainedVariables, $miniBill$elm_fast_dict$FastDict$values(fields));
        case 0:
            var typeConstruct = rustType.a;
            return $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn($author$project$ElmSyntaxToRust$rustTypeContainedVariables, typeConstruct.c);
        default:
            var typeFunction = rustType.a;
            return $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn($author$project$ElmSyntaxToRust$rustTypeContainedVariables, typeFunction.e), $author$project$ElmSyntaxToRust$rustTypeContainedVariables(typeFunction.d));
    }
};
var $author$project$ElmSyntaxToRust$printRustFuncDeclaration = function (rustValueOrFunctionDeclaration) {
    var typeVariablesToDeclare = $miniBill$elm_fast_dict$FastSet$toList($miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn(function (parameter) {
        return $author$project$ElmSyntaxToRust$rustTypeContainedVariables(parameter.n);
    }, rustValueOrFunctionDeclaration.o), $author$project$ElmSyntaxToRust$rustTypeContainedVariables(rustValueOrFunctionDeclaration.Q)));
    var resultTypePrint = $author$project$ElmSyntaxToRust$printRustTypeNotParenthesized_fn($elm$core$Maybe$Just(1), rustValueOrFunctionDeclaration.Q);
    var parameterPrints = $elm$core$List$map_fn(function (parameter) {
        var parameterTypePrint = $author$project$ElmSyntaxToRust$printRustTypeNotParenthesized_fn($elm$core$Maybe$Just(0), parameter.n);
        return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(parameterTypePrint, $author$project$Print$spaceOrLinebreakIndented($author$project$Print$lineSpread(parameterTypePrint)))), $author$project$Print$exactly("_ " + (parameter.a + ":")));
    }, rustValueOrFunctionDeclaration.o);
    var parametersLineSpread = $author$project$Print$lineSpreadListMapAndCombine_fn($author$project$Print$lineSpread, parameterPrints);
    var headerLineSpread = $author$project$Print$lineSpreadMergeWith_fn(function (_v1) {
        return $author$project$Print$lineSpread(resultTypePrint);
    }, parametersLineSpread);
    return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlyCurlyClosing, $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$FollowedBy_fn($author$project$Print$WithIndentIncreasedBy_fn(4, $author$project$Print$FollowedBy_fn(function () {
        var _v0 = rustValueOrFunctionDeclaration.j;
        if (!_v0.b) {
            return $author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(rustValueOrFunctionDeclaration.h);
        }
        else {
            var statement0 = _v0.a;
            var statement1Up = _v0.b;
            return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printRustReturn(rustValueOrFunctionDeclaration.h), $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$ElmSyntaxToRust$printRustStatements(_List_Cons(statement0, statement1Up))));
        }
    }(), $author$project$Print$FollowedBy_fn($author$project$Print$linebreakIndented, $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlySpaceCurlyOpening, $author$project$Print$FollowedBy_fn(resultTypePrint, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(headerLineSpread), $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlySpaceMinusGreaterThanSpace, $author$project$ElmSyntaxToRust$printParenthesized($author$project$Print$FollowedBy_fn($author$project$Print$emptyOrLinebreakIndented(parametersLineSpread), $author$project$Print$FollowedBy_fn($author$project$Print$listMapAndIntersperseAndFlatten_fn(function (parameterPrint) {
        return parameterPrint;
    }, $author$project$Print$FollowedBy_fn($author$project$Print$spaceOrLinebreakIndented(parametersLineSpread), $author$project$ElmSyntaxToRust$printExactlyComma), parameterPrints), $author$project$Print$emptyOrLinebreakIndented(parametersLineSpread))))))))))), $author$project$Print$exactly("@Sendable public static func " + (rustValueOrFunctionDeclaration.a + $author$project$ElmSyntaxToRust$rustFuncGenericsToString(typeVariablesToDeclare))))));
};
var $author$project$ElmSyntaxToRust$printRustLetDeclaration = function (rustLetDeclaration) {
    var resultTypePrint = $author$project$ElmSyntaxToRust$printRustTypeNotParenthesized_fn($elm$core$Maybe$Nothing, rustLetDeclaration.Q);
    var resultTypeFullLineSpread = $author$project$Print$lineSpread(resultTypePrint);
    return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printRustExpressionNotParenthesized(rustLetDeclaration.h), $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printExactlySpaceEqualsLinebreakIndented, $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn(resultTypePrint, $author$project$Print$spaceOrLinebreakIndented(resultTypeFullLineSpread))), $author$project$ElmSyntaxToRust$printExactlyColon)))), $author$project$Print$exactly("public static let " + rustLetDeclaration.a));
};
var $author$project$ElmSyntaxToRust$rustTypeParametersToString = function (rustTypeParameters) {
    if (!rustTypeParameters.b) {
        return "";
    }
    else {
        var parameter0 = rustTypeParameters.a;
        var parameter1Up = rustTypeParameters.b;
        return "<" + ($author$project$ElmSyntaxToRust$listFilledMapAndStringJoinWith_fn(", ", function (parameter) {
            return parameter;
        }, parameter0, parameter1Up) + ">");
    }
};
var $author$project$ElmSyntaxToRust$printRustTypealiasDeclaration = function (rustTypeAliasDeclaration) {
    return $author$project$Print$FollowedBy_fn($author$project$Print$withIndentAtNextMultipleOf4($author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printRustTypeNotParenthesized_fn($elm$core$Maybe$Nothing, rustTypeAliasDeclaration.n), $author$project$Print$linebreakIndented)), $author$project$Print$exactly("public typealias " + (rustTypeAliasDeclaration.a + ($author$project$ElmSyntaxToRust$rustTypeParametersToString(rustTypeAliasDeclaration.o) + " ="))));
};
var $author$project$ElmSyntaxToRust$RustEnumTypeDeclaration = function (a) {
    return { $: 0, a: a };
};
var $author$project$ElmSyntaxToRust$RustTypeAliasDeclaration = function (a) {
    return { $: 1, a: a };
};
var $author$project$ElmSyntaxToRust$rustTypeContainedLocalReferences = function (rustType) {
    switch (rustType.$) {
        case 3:
            return $miniBill$elm_fast_dict$FastSet$empty;
        case 1:
            var parts = rustType.a;
            return $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn($author$project$ElmSyntaxToRust$rustTypeContainedLocalReferences, parts.ao), $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$rustTypeContainedLocalReferences(parts.t), $author$project$ElmSyntaxToRust$rustTypeContainedLocalReferences(parts.s)));
        case 2:
            var fields = rustType.a;
            return $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn($author$project$ElmSyntaxToRust$rustTypeContainedLocalReferences, $miniBill$elm_fast_dict$FastDict$values(fields));
        case 0:
            var typeConstruct = rustType.a;
            return $miniBill$elm_fast_dict$FastSet$union_fn(function () {
                var _v1 = typeConstruct.b;
                if (_v1.$ === 1) {
                    return $miniBill$elm_fast_dict$FastSet$singleton(typeConstruct.a);
                }
                else {
                    return $miniBill$elm_fast_dict$FastSet$empty;
                }
            }(), $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn($author$project$ElmSyntaxToRust$rustTypeContainedLocalReferences, typeConstruct.c));
        default:
            var typeFunction = rustType.a;
            return $miniBill$elm_fast_dict$FastSet$union_fn($author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn($author$project$ElmSyntaxToRust$rustTypeContainedLocalReferences, typeFunction.e), $author$project$ElmSyntaxToRust$rustTypeContainedLocalReferences(typeFunction.d));
    }
};
var $author$project$ElmSyntaxToRust$rustTypeDeclarationsGroupByDependencies = function (rustTypeDeclarations) {
    return {
        eo: $author$project$Graph$stronglyConnComponents($elm$core$List$foldl_fn_unwrapped(function (aliasDeclaration, soFar) {
            return _List_Cons(_Utils_Tuple3($author$project$ElmSyntaxToRust$RustTypeAliasDeclaration(aliasDeclaration), aliasDeclaration.a, $miniBill$elm_fast_dict$FastSet$toList($author$project$ElmSyntaxToRust$rustTypeContainedLocalReferences(aliasDeclaration.n))), soFar);
        }, $elm$core$List$map_fn(function (enumDeclaration) {
            return _Utils_Tuple3($author$project$ElmSyntaxToRust$RustEnumTypeDeclaration(enumDeclaration), enumDeclaration.a, $miniBill$elm_fast_dict$FastSet$toList($miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (_v0, variantValues, soFar) {
                return $miniBill$elm_fast_dict$FastSet$union_fn(soFar, $author$project$ElmSyntaxToRust$listMapToFastSetsAndUnify_fn(function (variantValue) {
                    return $author$project$ElmSyntaxToRust$rustTypeContainedLocalReferences(variantValue.l);
                }, variantValues));
            }), $miniBill$elm_fast_dict$FastSet$empty, enumDeclaration.aL)));
        }, rustTypeDeclarations.d0), rustTypeDeclarations.B))
    };
};
var $author$project$ElmSyntaxToRust$rustTypeIsEquatable = function (rustType) {
    switch (rustType.$) {
        case 4:
            return false;
        case 0:
            var construct = rustType.a;
            return construct.a2 || (function () {
                var _v1 = construct.b;
                if (!_v1.$) {
                    return true;
                }
                else {
                    var _v2 = construct.a;
                    switch (_v2) {
                        case "Platform_Program":
                            return false;
                        case "BytesDecode_Decoder":
                            return false;
                        case "JsonDecode_Decoder":
                            return false;
                        default:
                            return true;
                    }
                }
            }() && $elm$core$List$all_fn($author$project$ElmSyntaxToRust$rustTypeIsEquatable, construct.c));
        case 1:
            var parts = rustType.a;
            return $author$project$ElmSyntaxToRust$rustTypeIsEquatable(parts.s) && ($author$project$ElmSyntaxToRust$rustTypeIsEquatable(parts.t) && $elm$core$List$all_fn($author$project$ElmSyntaxToRust$rustTypeIsEquatable, parts.ao));
        case 2:
            var fields = rustType.a;
            return $author$project$ElmSyntaxToRust$fastDictAll_fn_unwrapped(function (_v3, fieldValue) {
                return $author$project$ElmSyntaxToRust$rustTypeIsEquatable(fieldValue);
            }, fields);
        default:
            return true;
    }
};
var $author$project$Print$indentAtMost4 = function (atMost4) {
    switch (atMost4) {
        case 1:
            return " ";
        case 2:
            return "  ";
        case 3:
            return "   ";
        default:
            return "    ";
    }
};
var $author$project$Print$indentInverseRemainderBy4 = function (inverseRemainderBy4) {
    switch (inverseRemainderBy4) {
        case 0:
            return "    ";
        case 1:
            return "   ";
        case 2:
            return "  ";
        default:
            return " ";
    }
};
var $author$project$Print$toStringWithIndentAndLinebreakIndentAsStringWithRight_fn = function (indentIgnoringMultiplesOfBy4, linebreakIndentAsString, right, print) {
    toStringWithIndentAndLinebreakIndentAsStringWithRight: while (true) {
        switch (print.$) {
            case 0:
                var string = print.a;
                return string + (right + "");
            case 1:
                var b = print.a;
                var a = print.b;
                var $temp$indentIgnoringMultiplesOfBy4 = indentIgnoringMultiplesOfBy4, $temp$linebreakIndentAsString = linebreakIndentAsString, $temp$right = $author$project$Print$toStringWithIndentAndLinebreakIndentAsStringWithRight_fn(indentIgnoringMultiplesOfBy4, linebreakIndentAsString, right, b), $temp$print = a;
                indentIgnoringMultiplesOfBy4 = $temp$indentIgnoringMultiplesOfBy4;
                linebreakIndentAsString = $temp$linebreakIndentAsString;
                right = $temp$right;
                print = $temp$print;
                continue toStringWithIndentAndLinebreakIndentAsStringWithRight;
            case 2:
                return "\n" + right;
            case 3:
                return linebreakIndentAsString + (right + "");
            case 4:
                var increase = print.a;
                var innerPrint = print.b;
                var $temp$indentIgnoringMultiplesOfBy4 = (indentIgnoringMultiplesOfBy4 + increase) + 0, $temp$linebreakIndentAsString = linebreakIndentAsString + ($author$project$Print$indentAtMost4(increase) + ""), $temp$right = right, $temp$print = innerPrint;
                indentIgnoringMultiplesOfBy4 = $temp$indentIgnoringMultiplesOfBy4;
                linebreakIndentAsString = $temp$linebreakIndentAsString;
                right = $temp$right;
                print = $temp$print;
                continue toStringWithIndentAndLinebreakIndentAsStringWithRight;
            default:
                var innerPrint = print.a;
                var $temp$indentIgnoringMultiplesOfBy4 = 0, $temp$linebreakIndentAsString = linebreakIndentAsString + ($author$project$Print$indentInverseRemainderBy4(indentIgnoringMultiplesOfBy4 - (((indentIgnoringMultiplesOfBy4 / 4) | 0) * 4)) + ""), $temp$right = right, $temp$print = innerPrint;
                indentIgnoringMultiplesOfBy4 = $temp$indentIgnoringMultiplesOfBy4;
                linebreakIndentAsString = $temp$linebreakIndentAsString;
                right = $temp$right;
                print = $temp$print;
                continue toStringWithIndentAndLinebreakIndentAsStringWithRight;
        }
    }
}, $author$project$Print$toStringWithIndentAndLinebreakIndentAsStringWithRight = F4($author$project$Print$toStringWithIndentAndLinebreakIndentAsStringWithRight_fn);
var $author$project$Print$toStringWithIndent_fn = function (indent, print) {
    return $author$project$Print$toStringWithIndentAndLinebreakIndentAsStringWithRight_fn(indent, "\n", "", print);
}, $author$project$Print$toStringWithIndent = F2($author$project$Print$toStringWithIndent_fn);
var $author$project$Print$toString = function (print) {
    return $author$project$Print$toStringWithIndent_fn(0, print);
};
var $author$project$ElmSyntaxToRust$rustDeclarationsToModuleString = function (rustDeclarations) {
    var rustEnumDeclarationList = $author$project$ElmSyntaxToRust$fastDictMapAndToList_fn_unwrapped(function (name, info) {
        return { aL: info.aL, aX: info.aX, a: name, o: info.o };
    }, rustDeclarations.aR);
    var typeDeclarationsOrdered = $author$project$ElmSyntaxToRust$rustTypeDeclarationsGroupByDependencies({
        d0: rustEnumDeclarationList,
        B: $author$project$ElmSyntaxToRust$fastDictMapAndToList_fn_unwrapped(function (name, info) {
            return { a: name, o: info.o, n: info.n };
        }, rustDeclarations.B)
    });
    var deriveProtocolConformances = $elm$core$List$filterMap_fn(function (rustEnumDeclaration) {
        return $author$project$ElmSyntaxToRust$fastDictAll_fn_unwrapped(function (_v5, enumCaseValues) {
            return $elm$core$List$all_fn(function (value) {
                return $author$project$ElmSyntaxToRust$rustTypeIsEquatable(value.l);
            }, enumCaseValues);
        }, rustEnumDeclaration.aL) ? $elm$core$Maybe$Just($author$project$ElmSyntaxToRust$deriveProtocolConformanceToString_fn("Equatable", { a: "Elm." + rustEnumDeclaration.a, o: rustEnumDeclaration.o })) : $elm$core$Maybe$Nothing;
    }, rustEnumDeclarationList);
    return "import CoreFoundation\nimport Foundation\n\nextension Elm.Maybe_Maybe: Equatable where a: Equatable {}\nextension Elm.Result_Result: Equatable where error: Equatable, success: Equatable {}\nextension Elm.List_List: Equatable where a: Equatable {}\nextension Elm.List_List: Hashable where a: Hashable {}\nextension Elm.List_List: Comparable where a: Comparable {}\nextension Elm.Tuple: Equatable where first: Equatable, second: Equatable {}\nextension Elm.Tuple: Hashable where first: Hashable, second: Hashable {}\nextension Elm.Tuple: Comparable where first: Comparable, second: Comparable {}\nextension Elm.Triple: Equatable where first: Equatable, second: Equatable, third: Equatable {}\nextension Elm.Triple: Hashable where first: Hashable, second: Hashable, third: Hashable {}\nextension Elm.Triple: Comparable where first: Comparable, second: Comparable, third: Comparable {}\nextension Elm.Generated_caseInsensitive_multiline: Equatable\nwhere caseInsensitive: Equatable, multiline: Equatable {}\nextension Elm.Generated_index_match_number_submatches\nwhere index: Equatable, match: Equatable, number: Equatable, submatches: Equatable {}\nextension Elm.Generated_offset_start: Equatable where offset: Equatable, start: Equatable {}\nextension Elm.Generated_x_y: Equatable where x: Equatable, y: Equatable {}\nextension Elm.Generated_x_y_z: Equatable where x: Equatable, y: Equatable, z: Equatable {}\nextension Elm.Generated_w_x_y_z: Equatable\nwhere x: Equatable, y: Equatable, z: Equatable, w: Equatable {}\nextension Elm.Generated_init__subscriptions_update: Equatable\nwhere init_: Equatable, update: Equatable, subscriptions: Equatable {}\n" + ($elm$core$String$join_fn("\n", deriveProtocolConformances) + ("\n\n// using enum to create a namespace can't be instantiated\npublic enum Elm {\n" + ($author$project$ElmSyntaxToRust$defaultDeclarations + ("\n\n" + ($author$project$Print$toString($author$project$Print$listMapAndIntersperseAndFlatten_fn(function (typeAliasDeclarationGroup) {
        if (!typeAliasDeclarationGroup.$) {
            var single = typeAliasDeclarationGroup.a;
            if (!single.$) {
                var rustEnumTypeDeclaration = single.a;
                return $author$project$ElmSyntaxToRust$printRustEnumDeclaration({ aL: rustEnumTypeDeclaration.aL, aX: rustEnumTypeDeclaration.aX, dd: false, a: rustEnumTypeDeclaration.a, o: rustEnumTypeDeclaration.o });
            }
            else {
                var aliasDeclaration = single.a;
                return $author$project$ElmSyntaxToRust$printRustTypealiasDeclaration(aliasDeclaration);
            }
        }
        else {
            var recursiveBucket = typeAliasDeclarationGroup.a;
            if (!recursiveBucket.b) {
                return $author$project$Print$empty;
            }
            else {
                var recursiveBucketMember0 = recursiveBucket.a;
                var recursiveBucketMember1Up = recursiveBucket.b;
                return $author$project$Print$FollowedBy_fn($author$project$Print$listMapAndIntersperseAndFlatten_fn(function (typeDeclaration) {
                    return $author$project$Print$FollowedBy_fn(function () {
                        if (!typeDeclaration.$) {
                            var rustEnumTypeDeclaration = typeDeclaration.a;
                            return $author$project$ElmSyntaxToRust$printRustEnumDeclaration({ aL: rustEnumTypeDeclaration.aL, aX: rustEnumTypeDeclaration.aX, dd: true, a: rustEnumTypeDeclaration.a, o: rustEnumTypeDeclaration.o });
                        }
                        else {
                            var aliasDeclaration = typeDeclaration.a;
                            return $author$project$ElmSyntaxToRust$printRustTypealiasDeclaration(aliasDeclaration);
                        }
                    }(), $author$project$ElmSyntaxToRust$printLinebreakLinebreakIndented);
                }, $author$project$Print$empty, recursiveBucketMember1Up), function () {
                    if (!recursiveBucketMember0.$) {
                        var rustEnumTypeDeclaration = recursiveBucketMember0.a;
                        return $author$project$ElmSyntaxToRust$printRustEnumDeclaration({ aL: rustEnumTypeDeclaration.aL, aX: rustEnumTypeDeclaration.aX, dd: true, a: rustEnumTypeDeclaration.a, o: rustEnumTypeDeclaration.o });
                    }
                    else {
                        var aliasDeclaration = recursiveBucketMember0.a;
                        return $author$project$ElmSyntaxToRust$printRustTypealiasDeclaration(aliasDeclaration);
                    }
                }());
            }
        }
    }, $author$project$ElmSyntaxToRust$printLinebreakLinebreakIndented, typeDeclarationsOrdered.eo)) + ("\n\n\n" + ($author$project$Print$toString($author$project$Print$listMapAndIntersperseAndFlatten_fn(function (rustValueOrFunctionPrint) {
        return $author$project$Print$FollowedBy_fn($author$project$ElmSyntaxToRust$printLinebreakLinebreakIndented, rustValueOrFunctionPrint);
    }, $author$project$Print$empty, _Utils_ap($elm$core$List$map_fn($author$project$ElmSyntaxToRust$printRustLetDeclaration, $author$project$ElmSyntaxToRust$fastDictMapAndToList_fn_unwrapped(function (name, valueOrFunctionInfo) {
        return { a: name, h: valueOrFunctionInfo.h, Q: valueOrFunctionInfo.Q };
    }, rustDeclarations.aT)), $elm$core$List$map_fn($author$project$ElmSyntaxToRust$printRustFuncDeclaration, $author$project$ElmSyntaxToRust$fastDictMapAndToList_fn_unwrapped(function (name, valueOrFunctionInfo) {
        return { a: name, o: valueOrFunctionInfo.o, h: valueOrFunctionInfo.h, Q: valueOrFunctionInfo.Q, j: valueOrFunctionInfo.j };
    }, rustDeclarations.aS))))) + "\n}\n")))))));
};
var $author$project$Main$runningInterface = function (state) {
    return $lue_bird$elm_state_interface_experimental$Node$interfaceBatch(_List_fromArray([
        function () {
            if ($miniBill$elm_fast_dict$FastSet$isEmpty(state.bQ) && $miniBill$elm_fast_dict$FastSet$isEmpty(state.bR)) {
                var transpiledDeclarationsAndErrors = $author$project$ElmSyntaxToRust$modules(state.ca);
                return $lue_bird$elm_state_interface_experimental$Node$interfaceBatch(_List_fromArray([
                    $lue_bird$elm_state_interface_experimental$Node$standardOutWrite($elm$core$String$join_fn("\n", transpiledDeclarationsAndErrors.ap) + "\n"),
                    $lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap_fn($author$project$Main$Finished, $lue_bird$elm_state_interface_experimental$Node$fileWrite({
                        fb: $elm$bytes$Bytes$Encode$encode($elm$bytes$Bytes$Encode$string($author$project$ElmSyntaxToRust$rustDeclarationsToModuleString(transpiledDeclarationsAndErrors.M))),
                        q: "src/elm.rs"
                    }))
                ]));
            }
            else {
                return $lue_bird$elm_state_interface_experimental$Node$interfaceNone;
            }
        }(),
        $lue_bird$elm_state_interface_experimental$Node$interfaceBatch($author$project$Main$fastSetToListAndMap_fn(function (sourceDirectoryPath) {
            return $lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap_fn(function (subPathsOrError) {
                if (subPathsOrError.$ === 1) {
                    var sourceDirectoryReadError = subPathsOrError.a;
                    return $author$project$Main$Running(function () {
                        var $r = state.$c();
                        $r.bv = _List_Cons({ b6: sourceDirectoryReadError.b6, q: sourceDirectoryPath }, state.bv);
                        return $r;
                    }());
                }
                else {
                    var subPaths = subPathsOrError.a;
                    return $author$project$Main$Running((new $$Record1(state.ca, $miniBill$elm_fast_dict$FastSet$remove_fn(sourceDirectoryPath, state.bQ), state.bv, state.bw, $elm$core$List$foldl_fn_unwrapped(function (subPath, soFar) {
                        return $miniBill$elm_fast_dict$FastSet$insert_fn(sourceDirectoryPath + ("/" + subPath), soFar);
                    }, state.bR, $elm$core$List$filterMap_fn(function (subPath) {
                        return (!_String_endsWith_fn(".elm", subPath)) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(subPath);
                    }, subPaths)))));
                }
            }, $lue_bird$elm_state_interface_experimental$Node$directorySubPathsRequest(sourceDirectoryPath));
        }, state.bQ)),
        $lue_bird$elm_state_interface_experimental$Node$interfaceBatch($author$project$Main$fastSetToListAndMap_fn(function (sourceFilePath) {
            return $lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap_fn(function (sourceBytesOrError) {
                var sourceBytesOrReadError = function () {
                    if (sourceBytesOrError.$ === 1) {
                        var sourceFileReadError = sourceBytesOrError.a;
                        return $elm$core$Result$Err(sourceFileReadError.b6);
                    }
                    else {
                        var sourceBytes = sourceBytesOrError.a;
                        return $author$project$Main$bytesToElmSyntaxModule(sourceBytes);
                    }
                }();
                if (sourceBytesOrReadError.$ === 1) {
                    var readError = sourceBytesOrReadError.a;
                    return $author$project$Main$Running(function () {
                        var $r = state.$c();
                        $r.bw = _List_Cons({ b6: readError, q: sourceFilePath }, state.bw);
                        return $r;
                    }());
                }
                else {
                    var syntaxModule = sourceBytesOrReadError.a;
                    return $author$project$Main$Running((new $$Record1(_List_Cons(syntaxModule, state.ca), state.bQ, state.bv, state.bw, $miniBill$elm_fast_dict$FastSet$remove_fn(sourceFilePath, state.bR))));
                }
            }, $lue_bird$elm_state_interface_experimental$Node$fileRequest(sourceFilePath));
        }, state.bR)),
        $lue_bird$elm_state_interface_experimental$Node$interfaceBatch($elm$core$List$map_fn(function (directoryReadError) {
            return $lue_bird$elm_state_interface_experimental$Node$standardOutWrite("failed to read the source directory " + (directoryReadError.q + (": " + (directoryReadError.b6 + "\n"))));
        }, state.bv)),
        $lue_bird$elm_state_interface_experimental$Node$interfaceBatch($elm$core$List$map_fn(function (fileReadError) {
            return $lue_bird$elm_state_interface_experimental$Node$standardOutWrite("failed to read the source file " + (fileReadError.q + (": " + (fileReadError.b6 + "\n"))));
        }, state.bw))
    ]));
};
var $elm$project_metadata_utils$Elm$Package$toString = function (_v0) {
    var user = _v0.a;
    var project = _v0.b;
    return user + ("/" + project);
};
var $elm$project_metadata_utils$Elm$Version$toString = function (_v0) {
    var major = _v0.a;
    var minor = _v0.b;
    var patch = _v0.c;
    return $elm$core$String$fromInt(major) + ("." + ($elm$core$String$fromInt(minor) + ("." + $elm$core$String$fromInt(patch))));
};
var $author$project$Main$interface = function (state) {
    switch (state.$) {
        case 0:
            return $lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap_fn(function (environmentVariables) {
                var _v1 = $elm$core$Dict$get_fn("ELM_HOME", environmentVariables);
                if (!_v1.$) {
                    var homeDirectory = _v1.a;
                    return $author$project$Main$WaitingForElmJson({ cN: homeDirectory });
                }
                else {
                    return $author$project$Main$WaitingForNodeHomeDirectoryBecauseElmHomeIsNotDefined;
                }
            }, $lue_bird$elm_state_interface_experimental$Node$environmentVariablesRequest);
        case 1:
            return $lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap_fn(function (homeDirectory) {
                return $author$project$Main$WaitingForElmJson({ cN: homeDirectory + "/.elm" });
            }, $lue_bird$elm_state_interface_experimental$Node$homeDirectoryPathRequest);
        case 2:
            var homeDirectory = state.a;
            return $lue_bird$elm_state_interface_experimental$Node$interfaceFutureMap_fn(function (elmJsonBytesOrError) {
                if (elmJsonBytesOrError.$ === 1) {
                    var elmJsonReadError = elmJsonBytesOrError.a;
                    return $author$project$Main$ElmJsonReadFailed(elmJsonReadError);
                }
                else {
                    var elmJson = elmJsonBytesOrError.a;
                    if (!elmJson.$) {
                        var application = elmJson.a;
                        return $author$project$Main$Running((new $$Record1(_List_Nil, $miniBill$elm_fast_dict$FastSet$fromList(_Utils_ap(application.fi, $elm$core$List$map_fn(function (_v4) {
                            var dependencyName = _v4.a;
                            var dependencyVersion = _v4.b;
                            return $author$project$Main$packageSourceDirectoryPath({
                                cN: homeDirectory.cN,
                                et: $elm$project_metadata_utils$Elm$Package$toString(dependencyName),
                                eu: $elm$project_metadata_utils$Elm$Version$toString(dependencyVersion)
                            });
                        }, _Utils_ap(application.ff, application.fg)))), _List_Nil, _List_Nil, $miniBill$elm_fast_dict$FastSet$empty)));
                    }
                    else {
                        return $author$project$Main$ElmJsonReadFailed("You're in a package but elm-to-rust only works for applications.");
                    }
                }
            }, $author$project$Main$nodeElmJsonRequest);
        case 3:
            var runningState = state.a;
            return $author$project$Main$runningInterface(runningState);
        case 5:
            var result = state.a;
            if (result.$ === 1) {
                var error = result.a;
                return $author$project$Main$errorInterface("Failed to write the bundled code into src/elm.rs.");
            }
            else {
                return $lue_bird$elm_state_interface_experimental$Node$standardOutWrite("Successfully wrote the bundled code into src/elm.rs.\n");
            }
        default:
            var elmJsonDecodeError = state.a;
            return $author$project$Main$errorInterface(elmJsonDecodeError);
    }
};
var $lue_bird$elm_state_interface_experimental$Node$Add = function (a) {
    return { $: 0, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$State = $elm$core$Basics$identity;
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $lue_bird$elm_state_interface_experimental$Json$Encode$LocalExtra$nullable_fn = function (valueToJson, maybe) {
    if (maybe.$ === 1) {
        return $elm$json$Json$Encode$null;
    }
    else {
        var value = maybe.a;
        return valueToJson(value);
    }
}, $lue_bird$elm_state_interface_experimental$Json$Encode$LocalExtra$nullable = F2($lue_bird$elm_state_interface_experimental$Json$Encode$LocalExtra$nullable_fn);
var $lue_bird$elm_state_interface_experimental$Json$Encode$LocalExtra$variant = function (tagAndValue) {
    return $elm$json$Json$Encode$object(_List_fromArray([
        _Utils_Tuple2("tag", $elm$json$Json$Encode$string(tagAndValue.eL)),
        _Utils_Tuple2("value", tagAndValue.l)
    ]));
};
var $lue_bird$elm_state_interface_experimental$Node$interfaceSingleToJson = function (interfaceSingle) {
    return $lue_bird$elm_state_interface_experimental$Json$Encode$LocalExtra$variant(function () {
        switch (interfaceSingle.$) {
            case 12:
                var send = interfaceSingle.a;
                return {
                    eL: "HttpRequestSend",
                    l: $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("url", $elm$json$Json$Encode$string(send.cG)),
                        _Utils_Tuple2("method", $elm$json$Json$Encode$string(send.cx)),
                        _Utils_Tuple2("headers", $elm$json$Json$Encode$list_fn(function (header) {
                            return $elm$json$Json$Encode$object(_List_fromArray([
                                _Utils_Tuple2("name", $elm$json$Json$Encode$string(header.a)),
                                _Utils_Tuple2("value", $elm$json$Json$Encode$string(header.l))
                            ]));
                        }, send.a1)),
                        _Utils_Tuple2("bodyAsciiString", $lue_bird$elm_state_interface_experimental$Json$Encode$LocalExtra$nullable_fn($elm$json$Json$Encode$string, send.c$))
                    ]))
                };
            case 13:
                var listen = interfaceSingle.a;
                return {
                    eL: "HttpRequestListen",
                    l: $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("port", $elm$json$Json$Encode$int(listen.bf))
                    ]))
                };
            case 14:
                var send = interfaceSingle.a;
                return {
                    eL: "HttpResponseSend",
                    l: $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("port", $elm$json$Json$Encode$int(send.bf)),
                        _Utils_Tuple2("statusCode", $elm$json$Json$Encode$int(send.cg)),
                        _Utils_Tuple2("headers", $elm$json$Json$Encode$list_fn(function (header) {
                            return $elm$json$Json$Encode$object(_List_fromArray([
                                _Utils_Tuple2("name", $elm$json$Json$Encode$string(header.a)),
                                _Utils_Tuple2("value", $elm$json$Json$Encode$string(header.l))
                            ]));
                        }, send.a1)),
                        _Utils_Tuple2("dataAsciiString", $elm$json$Json$Encode$string(send.dv))
                    ]))
                };
            case 15:
                return { eL: "TimePosixRequest", l: $elm$json$Json$Encode$null };
            case 16:
                return { eL: "TimezoneOffsetRequest", l: $elm$json$Json$Encode$null };
            case 19:
                return { eL: "TimezoneNameRequest", l: $elm$json$Json$Encode$null };
            case 17:
                var once = interfaceSingle.a;
                return {
                    eL: "TimeOnce",
                    l: $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("pointInTime", $elm$json$Json$Encode$int($elm$time$Time$posixToMillis(once.cT)))
                    ]))
                };
            case 20:
                var request = interfaceSingle.a;
                return {
                    eL: "RandomUnsignedInt32sRequest",
                    l: $elm$json$Json$Encode$int(request.cL)
                };
            case 18:
                var intervalDuration = interfaceSingle.a;
                return {
                    eL: "TimePeriodicallyListen",
                    l: $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("milliSeconds", $elm$json$Json$Encode$int(intervalDuration.cP))
                    ]))
                };
            case 21:
                var code = interfaceSingle.a;
                return {
                    eL: "Exit",
                    l: $elm$json$Json$Encode$int(code)
                };
            case 22:
                var make = interfaceSingle.a;
                return {
                    eL: "DirectoryMake",
                    l: $elm$json$Json$Encode$string(make.q)
                };
            case 23:
                var path = interfaceSingle.a;
                return {
                    eL: "FileRemove",
                    l: $elm$json$Json$Encode$string(path)
                };
            case 24:
                var write = interfaceSingle.a;
                return {
                    eL: "FileWrite",
                    l: $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("path", $elm$json$Json$Encode$string(write.q)),
                        _Utils_Tuple2("contentAsciiString", $elm$json$Json$Encode$string(write.cK))
                    ]))
                };
            case 25:
                var request = interfaceSingle.a;
                return {
                    eL: "FileRequest",
                    l: $elm$json$Json$Encode$string(request.q)
                };
            case 26:
                var listen = interfaceSingle.a;
                return {
                    eL: "FileChangeListen",
                    l: $elm$json$Json$Encode$string(listen.q)
                };
            case 27:
                var request = interfaceSingle.a;
                return {
                    eL: "FileInfoRequest",
                    l: $elm$json$Json$Encode$string(request.q)
                };
            case 28:
                var request = interfaceSingle.a;
                return {
                    eL: "DirectorySubPathsRequest",
                    l: $elm$json$Json$Encode$string(request.q)
                };
            case 0:
                return { eL: "WorkingDirectoryPathRequest", l: $elm$json$Json$Encode$null };
            case 1:
                return { eL: "HomeDirectoryPathRequest", l: $elm$json$Json$Encode$null };
            case 2:
                return { eL: "NullDevicePathRequest", l: $elm$json$Json$Encode$null };
            case 3:
                return { eL: "LaunchArgumentsRequest", l: $elm$json$Json$Encode$null };
            case 4:
                return { eL: "EnvironmentVariablesRequest", l: $elm$json$Json$Encode$null };
            case 10:
                return { eL: "TerminalSizeRequest", l: $elm$json$Json$Encode$null };
            case 11:
                return { eL: "TerminalSizeChangeListen", l: $elm$json$Json$Encode$null };
            case 5:
                var newTitle = interfaceSingle.a;
                return {
                    eL: "ProcessTitleSet",
                    l: $elm$json$Json$Encode$string(newTitle)
                };
            case 6:
                var text = interfaceSingle.a;
                return {
                    eL: "StandardOutWrite",
                    l: $elm$json$Json$Encode$string(text)
                };
            case 7:
                var text = interfaceSingle.a;
                return {
                    eL: "StandardErrWrite",
                    l: $elm$json$Json$Encode$string(text)
                };
            case 8:
                return { eL: "StandardInListen", l: $elm$json$Json$Encode$null };
            case 9:
                return { eL: "StandardInRawListen", l: $elm$json$Json$Encode$null };
            case 29:
                var spawn = interfaceSingle.a;
                return {
                    eL: "SubProcessSpawn",
                    l: $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("command", $elm$json$Json$Encode$string(spawn.bb)),
                        _Utils_Tuple2("arguments", $elm$json$Json$Encode$list_fn($elm$json$Json$Encode$string, spawn.c)),
                        _Utils_Tuple2("workingDirectoryPath", $elm$json$Json$Encode$string(spawn.bn)),
                        _Utils_Tuple2("environmentVariables", $lue_bird$elm_state_interface_experimental$Node$environmentVariablesToJson(spawn.bc))
                    ]))
                };
            default:
                var write = interfaceSingle.a;
                return {
                    eL: "SubProcessStandardInWrite",
                    l: $elm$json$Json$Encode$object(_List_fromArray([
                        _Utils_Tuple2("command", $elm$json$Json$Encode$string(write.bb)),
                        _Utils_Tuple2("arguments", $elm$json$Json$Encode$list_fn($elm$json$Json$Encode$string, write.c)),
                        _Utils_Tuple2("workingDirectoryPath", $elm$json$Json$Encode$string(write.bn)),
                        _Utils_Tuple2("environmentVariables", $lue_bird$elm_state_interface_experimental$Node$environmentVariablesToJson(write.bc)),
                        _Utils_Tuple2("data", $elm$json$Json$Encode$string($lue_bird$elm_state_interface_experimental$AsciiString$fromBytes(write.c3)))
                    ]))
                };
        }
    }());
};
var $lue_bird$elm_state_interface_experimental$Node$interfaceSingleDiffToJson = function (diff) {
    return $lue_bird$elm_state_interface_experimental$Json$Encode$LocalExtra$variant(function () {
        if (!diff.$) {
            var interfaceSingleInfo = diff.a;
            return {
                eL: "Add",
                l: $lue_bird$elm_state_interface_experimental$Node$interfaceSingleToJson(interfaceSingleInfo)
            };
        }
        else {
            return { eL: "Remove", l: $elm$json$Json$Encode$null };
        }
    }());
};
var $lue_bird$elm_state_interface_experimental$Node$idAndDiffToJson_fn = function (id, diff) {
    return $elm$json$Json$Encode$object(_List_fromArray([
        _Utils_Tuple2("id", $elm$json$Json$Encode$string(id)),
        _Utils_Tuple2("diff", $lue_bird$elm_state_interface_experimental$Node$interfaceSingleDiffToJson(diff))
    ]));
}, $lue_bird$elm_state_interface_experimental$Node$idAndDiffToJson = F2($lue_bird$elm_state_interface_experimental$Node$idAndDiffToJson_fn);
var $lue_bird$elm_state_interface_experimental$Node$programInit = function (appConfig) {
    var initialInterface = appConfig.fs(appConfig.fr);
    return _Utils_Tuple2({ dP: appConfig.fr, fs: initialInterface }, $elm$core$Platform$Cmd$batch($miniBill$elm_fast_dict$FastDict$foldl_fn(F3(function (id, _new, soFar) {
        return _List_Cons(appConfig.ex.gd($lue_bird$elm_state_interface_experimental$Node$idAndDiffToJson_fn(id, $lue_bird$elm_state_interface_experimental$Node$Add(_new))), soFar);
    }), _List_Nil, initialInterface)));
};
var $lue_bird$elm_state_interface_experimental$Node$JsEventCouldNotBeAssociated = { $: 1 };
var $lue_bird$elm_state_interface_experimental$Node$JsEventEnabledConstructionOfNewAppState = function (a) {
    return { $: 2, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$JsEventFailedToDecode = function (a) {
    return { $: 0, a: a };
};
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $lue_bird$elm_state_interface_experimental$Node$Associated = function (a) {
    return { $: 0, a: a };
};
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$null = _Json_decodeNull;
var $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$resultOkErr_fn = function (okJsonDecoder, errJsonDecoder) {
    var valueOkJsonDecoder = _Json_decodeField_fn("value", okJsonDecoder);
    var valueErrJsonDecoder = _Json_decodeField_fn("value", errJsonDecoder);
    return _Json_andThen_fn(function (tag) {
        switch (tag) {
            case "Ok":
                return valueOkJsonDecoder;
            case "Err":
                return valueErrJsonDecoder;
            default:
                return $elm$json$Json$Decode$fail("expected either \"Ok\" or \"Err\"");
        }
    }, _Json_decodeField_fn("tag", $elm$json$Json$Decode$string));
}, $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$resultOkErr = F2($lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$resultOkErr_fn);
var $lue_bird$elm_state_interface_experimental$Node$directoryMakeResultJsonDecoder = $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$resultOkErr_fn($elm$json$Json$Decode$null($elm$core$Result$Ok(0)), _Json_map2_fn(F2(function (code, message) {
    return $elm$core$Result$Err({ cI: code, b6: message });
}), $elm$json$Json$Decode$oneOf(_List_fromArray([
    _Json_decodeField_fn("code", $elm$json$Json$Decode$string),
    $elm$json$Json$Decode$succeed("")
])), $elm$json$Json$Decode$oneOf(_List_fromArray([
    _Json_decodeField_fn("message", $elm$json$Json$Decode$string),
    $elm$json$Json$Decode$succeed("")
]))));
var $lue_bird$elm_state_interface_experimental$Node$directorySubPathsResultJsonDecoder = $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$resultOkErr_fn(_Json_map1_fn($elm$core$Result$Ok, $elm$json$Json$Decode$list($elm$json$Json$Decode$string)), _Json_map2_fn(F2(function (code, message) {
    return $elm$core$Result$Err({ cI: code, b6: message });
}), $elm$json$Json$Decode$oneOf(_List_fromArray([
    _Json_decodeField_fn("code", $elm$json$Json$Decode$string),
    $elm$json$Json$Decode$succeed("")
])), $elm$json$Json$Decode$oneOf(_List_fromArray([
    _Json_decodeField_fn("message", $elm$json$Json$Decode$string),
    $elm$json$Json$Decode$succeed("")
]))));
var $elm$json$Json$Decode$dict = function (decoder) {
    return _Json_map1_fn($elm$core$Dict$fromList, $elm$json$Json$Decode$keyValuePairs(decoder));
};
var $lue_bird$elm_state_interface_experimental$Node$environmentVariablesJsonDecoder = $elm$json$Json$Decode$dict($elm$json$Json$Decode$string);
var $lue_bird$elm_state_interface_experimental$Node$FileAddedOrChanged = function (a) {
    return { $: 0, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$FileRemoved = function (a) {
    return { $: 1, a: a };
};
var $lue_bird$elm_state_interface_experimental$List$LocalExtra$firstJustMap_fn = function (elementToMaybeFound, list) {
    firstJustMap: while (true) {
        if (!list.b) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var head = list.a;
            var tail = list.b;
            var _v1 = elementToMaybeFound(head);
            if (_v1.$ === 1) {
                var $temp$elementToMaybeFound = elementToMaybeFound, $temp$list = tail;
                elementToMaybeFound = $temp$elementToMaybeFound;
                list = $temp$list;
                continue firstJustMap;
            }
            else {
                var found = _v1.a;
                return $elm$core$Maybe$Just(found);
            }
        }
    }
}, $lue_bird$elm_state_interface_experimental$List$LocalExtra$firstJustMap = F2($lue_bird$elm_state_interface_experimental$List$LocalExtra$firstJustMap_fn);
var $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$choice = function (variantDecoders) {
    return _Json_andThen_fn(function (tag) {
        var _v0 = $lue_bird$elm_state_interface_experimental$List$LocalExtra$firstJustMap_fn(function (variantDecoder) {
            return _Utils_eq(variantDecoder.eL, tag) ? $elm$core$Maybe$Just(variantDecoder.l) : $elm$core$Maybe$Nothing;
        }, variantDecoders);
        if (!_v0.$) {
            var valueDecoder = _v0.a;
            return _Json_decodeField_fn("value", valueDecoder);
        }
        else {
            return $elm$json$Json$Decode$fail("expected one of the following tags: " + $elm$core$String$join_fn(", ", $elm$core$List$map_fn(function (variantDecoder) {
                return "\"" + (variantDecoder.eL + "\"");
            }, variantDecoders)));
        }
    }, _Json_decodeField_fn("tag", $elm$json$Json$Decode$string));
};
var $lue_bird$elm_state_interface_experimental$Node$fileChangeJsonDecoder = $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$choice(_List_fromArray([
    {
        eL: "Removed",
        l: _Json_map1_fn($lue_bird$elm_state_interface_experimental$Node$FileRemoved, $elm$json$Json$Decode$string)
    },
    {
        eL: "AddedOrChanged",
        l: _Json_map1_fn($lue_bird$elm_state_interface_experimental$Node$FileAddedOrChanged, $elm$json$Json$Decode$string)
    }
]));
var $lue_bird$elm_state_interface_experimental$Node$KindDirectory = 0;
var $lue_bird$elm_state_interface_experimental$Node$KindFile = 1;
var $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$onlyString = function (specificAllowedString) {
    return _Json_andThen_fn(function (str) {
        return _Utils_eq(str, specificAllowedString) ? $elm$json$Json$Decode$succeed(0) : $elm$json$Json$Decode$fail("expected only \"" + (specificAllowedString + "\""));
    }, $elm$json$Json$Decode$string);
};
var $lue_bird$elm_state_interface_experimental$Node$fileKindJsonDecoder = $elm$json$Json$Decode$oneOf(_List_fromArray([
    _Json_map1_fn(function (_v0) {
        return 1;
    }, $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$onlyString("File")),
    _Json_map1_fn(function (_v1) {
        return 0;
    }, $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$onlyString("Directory"))
]));
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $elm$json$Json$Decode$map3 = _Json_map3;
var $elm$time$Time$Posix = $elm$core$Basics$identity;
var $elm$time$Time$millisToPosix = $elm$core$Basics$identity;
var $elm$json$Json$Decode$nullable = function (decoder) {
    return $elm$json$Json$Decode$oneOf(_List_fromArray([
        $elm$json$Json$Decode$null($elm$core$Maybe$Nothing),
        _Json_map1_fn($elm$core$Maybe$Just, decoder)
    ]));
};
var $lue_bird$elm_state_interface_experimental$Node$fileInfoJsonDecoder = $elm$json$Json$Decode$nullable(_Json_map3_fn(F3(function (kind, byteCount, lastContentChangeTime) {
    return { e6: byteCount, fv: kind, fx: lastContentChangeTime };
}), _Json_decodeField_fn("kind", $lue_bird$elm_state_interface_experimental$Node$fileKindJsonDecoder), _Json_decodeField_fn("byteCount", $elm$json$Json$Decode$int), _Json_decodeField_fn("lastContentChangePosixMilliseconds", _Json_map1_fn($elm$time$Time$millisToPosix, $elm$json$Json$Decode$int))));
var $lue_bird$elm_state_interface_experimental$AsciiString$asciiCharToInt = function (asciiChar) {
    return $elm$core$Char$toCode(asciiChar);
};
var $elm$core$Bitwise$or = _Bitwise_or;
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $elm$bytes$Bytes$Encode$U32_fn = function (a, b) {
    return { $: 5, a: a, b: b };
}, $elm$bytes$Bytes$Encode$U32 = F2($elm$bytes$Bytes$Encode$U32_fn);
var $elm$bytes$Bytes$Encode$unsignedInt32 = $elm$bytes$Bytes$Encode$U32;
var $elm$bytes$Bytes$Encode$U8 = function (a) {
    return { $: 3, a: a };
};
var $elm$bytes$Bytes$Encode$unsignedInt8 = $elm$bytes$Bytes$Encode$U8;
var $lue_bird$elm_state_interface_experimental$AsciiString$encodeChunks_fn = function (input, inputLength, soFar) {
    encodeChunks: while (true) {
        var _v0 = $elm$core$String$toList(_String_slice_fn(0, 4, input));
        if (_v0.b) {
            if (((_v0.b.b && _v0.b.b.b) && _v0.b.b.b.b) && (!_v0.b.b.b.b.b)) {
                var a = _v0.a;
                var _v1 = _v0.b;
                var b = _v1.a;
                var _v2 = _v1.b;
                var c = _v2.a;
                var _v3 = _v2.b;
                var d = _v3.a;
                var $temp$input = _String_slice_fn(4, inputLength, input), $temp$inputLength = inputLength, $temp$soFar = _List_Cons($elm$bytes$Bytes$Encode$U32_fn(1, (($lue_bird$elm_state_interface_experimental$AsciiString$asciiCharToInt(a) << 24) | ($lue_bird$elm_state_interface_experimental$AsciiString$asciiCharToInt(b) << 16)) | (($lue_bird$elm_state_interface_experimental$AsciiString$asciiCharToInt(c) << 8) | $lue_bird$elm_state_interface_experimental$AsciiString$asciiCharToInt(d))), soFar);
                input = $temp$input;
                inputLength = $temp$inputLength;
                soFar = $temp$soFar;
                continue encodeChunks;
            }
            else {
                var a = _v0.a;
                var $temp$input = _String_slice_fn(1, inputLength, input), $temp$inputLength = inputLength, $temp$soFar = _List_Cons($elm$bytes$Bytes$Encode$unsignedInt8($lue_bird$elm_state_interface_experimental$AsciiString$asciiCharToInt(a)), soFar);
                input = $temp$input;
                inputLength = $temp$inputLength;
                soFar = $temp$soFar;
                continue encodeChunks;
            }
        }
        else {
            return soFar;
        }
    }
}, $lue_bird$elm_state_interface_experimental$AsciiString$encodeChunks = F3($lue_bird$elm_state_interface_experimental$AsciiString$encodeChunks_fn);
var $elm$bytes$Bytes$Encode$Seq_fn = function (a, b) {
    return { $: 8, a: a, b: b };
}, $elm$bytes$Bytes$Encode$Seq = F2($elm$bytes$Bytes$Encode$Seq_fn);
var $elm$bytes$Bytes$Encode$getWidths_fn = function (width, builders) {
    getWidths: while (true) {
        if (!builders.b) {
            return width;
        }
        else {
            var b = builders.a;
            var bs = builders.b;
            var $temp$width = width + $elm$bytes$Bytes$Encode$getWidth(b), $temp$builders = bs;
            width = $temp$width;
            builders = $temp$builders;
            continue getWidths;
        }
    }
}, $elm$bytes$Bytes$Encode$getWidths = F2($elm$bytes$Bytes$Encode$getWidths_fn);
var $elm$bytes$Bytes$Encode$sequence = function (builders) {
    return $elm$bytes$Bytes$Encode$Seq_fn($elm$bytes$Bytes$Encode$getWidths_fn(0, builders), builders);
};
var $lue_bird$elm_state_interface_experimental$AsciiString$encoder = function (string) {
    return $elm$bytes$Bytes$Encode$sequence($elm$core$List$reverse($lue_bird$elm_state_interface_experimental$AsciiString$encodeChunks_fn(string, $elm$core$String$length(string), _List_Nil)));
};
var $lue_bird$elm_state_interface_experimental$AsciiString$toBytes = function (string) {
    return $elm$bytes$Bytes$Encode$encode($lue_bird$elm_state_interface_experimental$AsciiString$encoder(string));
};
var $lue_bird$elm_state_interface_experimental$Node$fileResultJsonDecoder = $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$resultOkErr_fn(_Json_map1_fn(function (asciiString) {
    return $elm$core$Result$Ok($lue_bird$elm_state_interface_experimental$AsciiString$toBytes(asciiString));
}, $elm$json$Json$Decode$string), _Json_map2_fn(F2(function (code, message) {
    return $elm$core$Result$Err({ cI: code, b6: message });
}), $elm$json$Json$Decode$oneOf(_List_fromArray([
    _Json_decodeField_fn("code", $elm$json$Json$Decode$string),
    $elm$json$Json$Decode$succeed("")
])), $elm$json$Json$Decode$oneOf(_List_fromArray([
    _Json_decodeField_fn("message", $elm$json$Json$Decode$string),
    $elm$json$Json$Decode$succeed("")
]))));
var $lue_bird$elm_state_interface_experimental$Node$fileWriteResultJsonDecoder = $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$resultOkErr_fn($elm$json$Json$Decode$null($elm$core$Result$Ok(0)), _Json_map2_fn(F2(function (code, message) {
    return $elm$core$Result$Err({ cI: code, b6: message });
}), $elm$json$Json$Decode$oneOf(_List_fromArray([
    _Json_decodeField_fn("code", $elm$json$Json$Decode$string),
    $elm$json$Json$Decode$succeed("")
])), $elm$json$Json$Decode$oneOf(_List_fromArray([
    _Json_decodeField_fn("message", $elm$json$Json$Decode$string),
    $elm$json$Json$Decode$succeed("")
]))));
var $lue_bird$elm_state_interface_experimental$Node$HttpBadUrl = { $: 0 };
var $lue_bird$elm_state_interface_experimental$Node$HttpNetworkError = function (a) {
    return { $: 1, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$httpErrorJsonDecoder = $elm$json$Json$Decode$oneOf(_List_fromArray([
    _Json_map1_fn(function (_v0) {
        return $lue_bird$elm_state_interface_experimental$Node$HttpBadUrl;
    }, _Json_decodeField_fn("cause", _Json_decodeField_fn("code", $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$onlyString("BAD_URL")))),
    _Json_map1_fn($lue_bird$elm_state_interface_experimental$Node$HttpNetworkError, $elm$json$Json$Decode$oneOf(_List_fromArray([
        _Json_decodeField_fn("message", $elm$json$Json$Decode$string),
        $elm$json$Json$Decode$succeed("")
    ])))
]));
var $lue_bird$elm_state_interface_experimental$Node$HttpRequestReceived = function (a) {
    return { $: 1, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$HttpResponseSent = { $: 2 };
var $lue_bird$elm_state_interface_experimental$Node$HttpServerFailed = function (a) {
    return { $: 3, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$HttpServerOpened = { $: 0 };
var $lue_bird$elm_state_interface_experimental$Node$httpServerEventJsonDecoder = $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$choice(_List_fromArray([
    {
        eL: "HttpServerOpened",
        l: $elm$json$Json$Decode$null($lue_bird$elm_state_interface_experimental$Node$HttpServerOpened)
    },
    {
        eL: "HttpRequestReceived",
        l: _Json_map3_fn(F3(function (method, headers, data) {
            return $lue_bird$elm_state_interface_experimental$Node$HttpRequestReceived({ c3: data, a1: headers, cx: method });
        }), _Json_decodeField_fn("method", $elm$json$Json$Decode$string), _Json_decodeField_fn("headers", $elm$json$Json$Decode$list(_Json_map2_fn(F2(function (name, value) {
            return { a: name, l: value };
        }), _Json_decodeField_fn("name", $elm$json$Json$Decode$string), _Json_decodeField_fn("value", $elm$json$Json$Decode$string)))), _Json_decodeField_fn("dataAsciiString", _Json_map1_fn($lue_bird$elm_state_interface_experimental$AsciiString$toBytes, $elm$json$Json$Decode$string)))
    },
    {
        eL: "HttpResponseSent",
        l: $elm$json$Json$Decode$null($lue_bird$elm_state_interface_experimental$Node$HttpResponseSent)
    },
    {
        eL: "HttpServerFailed",
        l: _Json_map2_fn(F2(function (code, message) {
            return $lue_bird$elm_state_interface_experimental$Node$HttpServerFailed({ cI: code, b6: message });
        }), _Json_decodeField_fn("code", $elm$json$Json$Decode$string), _Json_decodeField_fn("message", $elm$json$Json$Decode$string))
    }
]));
var $lue_bird$elm_state_interface_experimental$Node$HttpBadStatus = function (a) {
    return { $: 2, a: a };
};
var $elm$json$Json$Decode$map4 = _Json_map4;
var $lue_bird$elm_state_interface_experimental$Node$httpResponseJsonDecoder = _Json_map4_fn(F4(function (statusCode, statusText, headers, body) {
    return { du: body, a1: headers, cg: statusCode, f3: statusText };
}), _Json_decodeField_fn("statusCode", $elm$json$Json$Decode$int), _Json_decodeField_fn("statusText", $elm$json$Json$Decode$string), _Json_decodeField_fn("headers", $elm$json$Json$Decode$list(_Json_map2_fn(F2(function (name, value) {
    return { a: name, l: value };
}), _Json_decodeField_fn("name", $elm$json$Json$Decode$string), _Json_decodeField_fn("value", $elm$json$Json$Decode$string)))), _Json_decodeField_fn("bodyAsciiString", _Json_map1_fn($lue_bird$elm_state_interface_experimental$AsciiString$toBytes, $elm$json$Json$Decode$string)));
var $lue_bird$elm_state_interface_experimental$Node$httpSuccessResponseJsonDecoder = _Json_map1_fn(function (response) {
    return ((response.cg >= 200) && (response.cg < 300)) ? $elm$core$Result$Ok(response.du) : $elm$core$Result$Err($lue_bird$elm_state_interface_experimental$Node$HttpBadStatus(response));
}, $lue_bird$elm_state_interface_experimental$Node$httpResponseJsonDecoder);
var $lue_bird$elm_state_interface_experimental$Node$NotAssociated = { $: 1 };
var $lue_bird$elm_state_interface_experimental$Node$jsonDecodeSucceedNotAssociated = $elm$json$Json$Decode$succeed($lue_bird$elm_state_interface_experimental$Node$NotAssociated);
var $lue_bird$elm_state_interface_experimental$Node$launchArgumentsJsonDecoder = $elm$json$Json$Decode$list($elm$json$Json$Decode$string);
var $lue_bird$elm_state_interface_experimental$Time$LocalExtra$posixJsonDecoder = _Json_map1_fn($elm$time$Time$millisToPosix, $elm$json$Json$Decode$int);
var $lue_bird$elm_state_interface_experimental$Node$StreamDataEndReached = { $: 1 };
var $lue_bird$elm_state_interface_experimental$Node$StreamDataReceived = function (a) {
    return { $: 0, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$streamReadEventOfStringDataJsonDecoder = $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$choice(_List_fromArray([
    {
        eL: "StreamDataReceived",
        l: _Json_map1_fn($lue_bird$elm_state_interface_experimental$Node$StreamDataReceived, $elm$json$Json$Decode$string)
    },
    {
        eL: "StreamDataEndReached",
        l: $elm$json$Json$Decode$null($lue_bird$elm_state_interface_experimental$Node$StreamDataEndReached)
    }
]));
var $lue_bird$elm_state_interface_experimental$Node$SubProcessExited = function (a) {
    return { $: 0, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$SubProcessStandardErrEvent = function (a) {
    return { $: 2, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$SubProcessStandardOutEvent = function (a) {
    return { $: 1, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$streamReadEventOfBytesDataJsonDecoder = $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$choice(_List_fromArray([
    {
        eL: "StreamDataReceived",
        l: _Json_map1_fn(function (asciiString) {
            return $lue_bird$elm_state_interface_experimental$Node$StreamDataReceived($lue_bird$elm_state_interface_experimental$AsciiString$toBytes(asciiString));
        }, $elm$json$Json$Decode$string)
    },
    {
        eL: "StreamDataEndReached",
        l: $elm$json$Json$Decode$null($lue_bird$elm_state_interface_experimental$Node$StreamDataEndReached)
    }
]));
var $lue_bird$elm_state_interface_experimental$Node$subProcessEventJsonDecoder = $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$choice(_List_fromArray([
    {
        eL: "SubProcessExited",
        l: _Json_map1_fn($lue_bird$elm_state_interface_experimental$Node$SubProcessExited, $elm$json$Json$Decode$int)
    },
    {
        eL: "SubProcessStandardOutEvent",
        l: _Json_map1_fn($lue_bird$elm_state_interface_experimental$Node$SubProcessStandardOutEvent, $lue_bird$elm_state_interface_experimental$Node$streamReadEventOfBytesDataJsonDecoder)
    },
    {
        eL: "SubProcessStandardErrEvent",
        l: _Json_map1_fn($lue_bird$elm_state_interface_experimental$Node$SubProcessStandardErrEvent, $lue_bird$elm_state_interface_experimental$Node$streamReadEventOfStringDataJsonDecoder)
    }
]));
var $lue_bird$elm_state_interface_experimental$Node$terminalSizeJsonDecoder = _Json_map2_fn(F2(function (lines, columns) {
    return { e9: columns, fD: lines };
}), _Json_decodeField_fn("lines", $elm$json$Json$Decode$int), _Json_decodeField_fn("columns", $elm$json$Json$Decode$int));
var $lue_bird$elm_state_interface_experimental$Node$interfaceSingleFutureJsonDecoder = function (_interface) {
    switch (_interface.$) {
        case 12:
            var send = _interface.a;
            return _Json_map1_fn(function (result) {
                return $lue_bird$elm_state_interface_experimental$Node$Associated(send.G(result));
            }, $lue_bird$elm_state_interface_experimental$Json$Decode$LocalExtra$resultOkErr_fn($lue_bird$elm_state_interface_experimental$Node$httpSuccessResponseJsonDecoder, _Json_map1_fn($elm$core$Result$Err, $lue_bird$elm_state_interface_experimental$Node$httpErrorJsonDecoder)));
        case 13:
            var listen = _interface.a;
            return _Json_map1_fn(function (event) {
                return $lue_bird$elm_state_interface_experimental$Node$Associated(listen.G(event));
            }, $lue_bird$elm_state_interface_experimental$Node$httpServerEventJsonDecoder);
        case 14:
            return $lue_bird$elm_state_interface_experimental$Node$jsonDecodeSucceedNotAssociated;
        case 15:
            var toFuture = _interface.a;
            return _Json_map1_fn(function (posix) {
                return $lue_bird$elm_state_interface_experimental$Node$Associated(toFuture(posix));
            }, $lue_bird$elm_state_interface_experimental$Time$LocalExtra$posixJsonDecoder);
        case 16:
            var toFuture = _interface.a;
            return _Json_map1_fn(function (offset) {
                return $lue_bird$elm_state_interface_experimental$Node$Associated(toFuture(offset));
            }, $elm$json$Json$Decode$int);
        case 18:
            var periodicallyListen = _interface.a;
            return _Json_map1_fn(function (posix) {
                return $lue_bird$elm_state_interface_experimental$Node$Associated(periodicallyListen.G(posix));
            }, $lue_bird$elm_state_interface_experimental$Time$LocalExtra$posixJsonDecoder);
        case 17:
            var once = _interface.a;
            return _Json_map1_fn(function (posix) {
                return $lue_bird$elm_state_interface_experimental$Node$Associated(once.G(posix));
            }, $lue_bird$elm_state_interface_experimental$Time$LocalExtra$posixJsonDecoder);
        case 19:
            var toFuture = _interface.a;
            return _Json_map1_fn(function (zone) {
                return $lue_bird$elm_state_interface_experimental$Node$Associated(toFuture(zone));
            }, $elm$json$Json$Decode$string);
        case 20:
            var request = _interface.a;
            return _Json_map1_fn(function (randomness) {
                return $lue_bird$elm_state_interface_experimental$Node$Associated(request.G(randomness));
            }, $elm$json$Json$Decode$list($elm$json$Json$Decode$int));
        case 21:
            return $lue_bird$elm_state_interface_experimental$Node$jsonDecodeSucceedNotAssociated;
        case 22:
            var make = _interface.a;
            return _Json_map1_fn(function (result) {
                return $lue_bird$elm_state_interface_experimental$Node$Associated(make.G(result));
            }, $lue_bird$elm_state_interface_experimental$Node$directoryMakeResultJsonDecoder);
        case 23:
            return $lue_bird$elm_state_interface_experimental$Node$jsonDecodeSucceedNotAssociated;
        case 24:
            var write = _interface.a;
            return _Json_map1_fn(function (result) {
                return $lue_bird$elm_state_interface_experimental$Node$Associated(write.G(result));
            }, $lue_bird$elm_state_interface_experimental$Node$fileWriteResultJsonDecoder);
        case 25:
            var request = _interface.a;
            return _Json_map1_fn(function (result) {
                return $lue_bird$elm_state_interface_experimental$Node$Associated(request.G(result));
            }, $lue_bird$elm_state_interface_experimental$Node$fileResultJsonDecoder);
        case 26:
            var listen = _interface.a;
            return _Json_map1_fn(function (change) {
                return $lue_bird$elm_state_interface_experimental$Node$Associated(listen.G(change));
            }, $lue_bird$elm_state_interface_experimental$Node$fileChangeJsonDecoder);
        case 27:
            var request = _interface.a;
            return _Json_map1_fn(function (info) {
                return $lue_bird$elm_state_interface_experimental$Node$Associated(request.G(info));
            }, $lue_bird$elm_state_interface_experimental$Node$fileInfoJsonDecoder);
        case 28:
            var request = _interface.a;
            return _Json_map1_fn(function (subPaths) {
                return $lue_bird$elm_state_interface_experimental$Node$Associated(request.G(subPaths));
            }, $lue_bird$elm_state_interface_experimental$Node$directorySubPathsResultJsonDecoder);
        case 0:
            var on = _interface.a;
            return _Json_map1_fn(function (path) {
                return $lue_bird$elm_state_interface_experimental$Node$Associated(on(path));
            }, $elm$json$Json$Decode$string);
        case 1:
            var on = _interface.a;
            return _Json_map1_fn(function (path) {
                return $lue_bird$elm_state_interface_experimental$Node$Associated(on(path));
            }, $elm$json$Json$Decode$string);
        case 2:
            var on = _interface.a;
            return _Json_map1_fn(function (path) {
                return $lue_bird$elm_state_interface_experimental$Node$Associated(on(path));
            }, $elm$json$Json$Decode$string);
        case 3:
            var on = _interface.a;
            return _Json_map1_fn(function (launchArguments) {
                return $lue_bird$elm_state_interface_experimental$Node$Associated(on(launchArguments));
            }, $lue_bird$elm_state_interface_experimental$Node$launchArgumentsJsonDecoder);
        case 4:
            var on = _interface.a;
            return _Json_map1_fn(function (environmentVariables) {
                return $lue_bird$elm_state_interface_experimental$Node$Associated(on(environmentVariables));
            }, $lue_bird$elm_state_interface_experimental$Node$environmentVariablesJsonDecoder);
        case 10:
            var on = _interface.a;
            return _Json_map1_fn(function (size) {
                return $lue_bird$elm_state_interface_experimental$Node$Associated(on(size));
            }, $lue_bird$elm_state_interface_experimental$Node$terminalSizeJsonDecoder);
        case 11:
            var on = _interface.a;
            return _Json_map1_fn(function (size) {
                return $lue_bird$elm_state_interface_experimental$Node$Associated(on(size));
            }, $lue_bird$elm_state_interface_experimental$Node$terminalSizeJsonDecoder);
        case 5:
            return $lue_bird$elm_state_interface_experimental$Node$jsonDecodeSucceedNotAssociated;
        case 6:
            return $lue_bird$elm_state_interface_experimental$Node$jsonDecodeSucceedNotAssociated;
        case 7:
            return $lue_bird$elm_state_interface_experimental$Node$jsonDecodeSucceedNotAssociated;
        case 8:
            var on = _interface.a;
            return _Json_map1_fn(function (event) {
                return $lue_bird$elm_state_interface_experimental$Node$Associated(on(event));
            }, $elm$json$Json$Decode$string);
        case 9:
            var on = _interface.a;
            return _Json_map1_fn(function (event) {
                return $lue_bird$elm_state_interface_experimental$Node$Associated(on(event));
            }, $lue_bird$elm_state_interface_experimental$Node$streamReadEventOfStringDataJsonDecoder);
        case 29:
            var spawn = _interface.a;
            return _Json_map1_fn(function (event) {
                return $lue_bird$elm_state_interface_experimental$Node$Associated(spawn.G(event));
            }, $lue_bird$elm_state_interface_experimental$Node$subProcessEventJsonDecoder);
        default:
            return $lue_bird$elm_state_interface_experimental$Node$jsonDecodeSucceedNotAssociated;
    }
};
var $lue_bird$elm_state_interface_experimental$Node$jsonDecodeFieldIdString = _Json_decodeField_fn("id", $elm$json$Json$Decode$string);
var $lue_bird$elm_state_interface_experimental$Node$programSubscriptions_fn = function (appConfig, _v0) {
    var state = _v0;
    return appConfig.ex.fm(function (interfaceJson) {
        var newStateJsonDecoder = _Json_andThen_fn(function (originalInterfaceId) {
            var _v3 = $miniBill$elm_fast_dict$FastDict$get_fn(originalInterfaceId, state.fs);
            if (_v3.$ === 1) {
                return $lue_bird$elm_state_interface_experimental$Node$jsonDecodeSucceedNotAssociated;
            }
            else {
                var interfaceSingleAcceptingFuture = _v3.a;
                return _Json_decodeField_fn("eventData", $lue_bird$elm_state_interface_experimental$Node$interfaceSingleFutureJsonDecoder(interfaceSingleAcceptingFuture));
            }
        }, $lue_bird$elm_state_interface_experimental$Node$jsonDecodeFieldIdString);
        var _v1 = _Json_run_fn(newStateJsonDecoder, interfaceJson);
        if (!_v1.$) {
            var result = _v1.a;
            if (!result.$) {
                var associated = result.a;
                return $lue_bird$elm_state_interface_experimental$Node$JsEventEnabledConstructionOfNewAppState(associated);
            }
            else {
                return $lue_bird$elm_state_interface_experimental$Node$JsEventCouldNotBeAssociated;
            }
        }
        else {
            var error = _v1.a;
            return $lue_bird$elm_state_interface_experimental$Node$JsEventFailedToDecode(error);
        }
    });
}, $lue_bird$elm_state_interface_experimental$Node$programSubscriptions = F2($lue_bird$elm_state_interface_experimental$Node$programSubscriptions_fn);
var $lue_bird$elm_state_interface_experimental$Node$Remove = function (a) {
    return { $: 1, a: a };
};
var $lue_bird$elm_state_interface_experimental$Node$remove = $lue_bird$elm_state_interface_experimental$Node$Remove(0);
var $lue_bird$elm_state_interface_experimental$Node$interfacesDiffMap_fn = function (idAndDiffCombine, interfaces) {
    return $miniBill$elm_fast_dict$FastDict$merge_fn(F3(function (removedId, _v0, soFar) {
        return _List_Cons(A2(idAndDiffCombine, removedId, $lue_bird$elm_state_interface_experimental$Node$remove), soFar);
    }), F4(function (_v1, _v2, _v3, soFar) {
        return soFar;
    }), F3(function (addedId, onlyNew, soFar) {
        return _List_Cons(A2(idAndDiffCombine, addedId, $lue_bird$elm_state_interface_experimental$Node$Add(onlyNew)), soFar);
    }), interfaces.eq, interfaces.eU, _List_Nil);
}, $lue_bird$elm_state_interface_experimental$Node$interfacesDiffMap_fn_unwrapped = function (idAndDiffCombine, interfaces) {
    return $miniBill$elm_fast_dict$FastDict$merge_fn(F3(function (removedId, _v0, soFar) {
        return _List_Cons(idAndDiffCombine(removedId, $lue_bird$elm_state_interface_experimental$Node$remove), soFar);
    }), F4(function (_v1, _v2, _v3, soFar) {
        return soFar;
    }), F3(function (addedId, onlyNew, soFar) {
        return _List_Cons(idAndDiffCombine(addedId, $lue_bird$elm_state_interface_experimental$Node$Add(onlyNew)), soFar);
    }), interfaces.eq, interfaces.eU, _List_Nil);
}, $lue_bird$elm_state_interface_experimental$Node$interfacesDiffMap = F2($lue_bird$elm_state_interface_experimental$Node$interfacesDiffMap_fn);
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $lue_bird$elm_state_interface_experimental$Node$programUpdate_fn = function (appConfig, event, state) {
    switch (event.$) {
        case 0:
            var jsonError = event.a;
            return _Utils_Tuple2(state, function () {
                var notifyOfSkippedEventInterface = $lue_bird$elm_state_interface_experimental$Node$StandardErrWrite("js event skipped because: " + $elm$json$Json$Decode$errorToString(jsonError));
                return appConfig.ex.gd($lue_bird$elm_state_interface_experimental$Node$idAndDiffToJson_fn($lue_bird$elm_state_interface_experimental$StructuredId$toString($lue_bird$elm_state_interface_experimental$Node$interfaceSingleToStructuredId(notifyOfSkippedEventInterface)), $lue_bird$elm_state_interface_experimental$Node$Add(notifyOfSkippedEventInterface)));
            }());
        case 1:
            return _Utils_Tuple2(state, $elm$core$Platform$Cmd$none);
        default:
            var updatedAppState = event.a;
            var updatedInterface = appConfig.fs(updatedAppState);
            var _v1 = state;
            var oldState = _v1;
            return _Utils_Tuple2({ dP: updatedAppState, fs: updatedInterface }, $elm$core$Platform$Cmd$batch($lue_bird$elm_state_interface_experimental$Node$interfacesDiffMap_fn_unwrapped(function (id, diff) {
                return appConfig.ex.gd($lue_bird$elm_state_interface_experimental$Node$idAndDiffToJson_fn(id, diff));
            }, { eq: oldState.fs, eU: updatedInterface })));
    }
}, $lue_bird$elm_state_interface_experimental$Node$programUpdate = F3($lue_bird$elm_state_interface_experimental$Node$programUpdate_fn);
var $elm$core$Platform$worker = _Platform_worker;
var $lue_bird$elm_state_interface_experimental$Node$program = function (appConfig) {
    return $elm$core$Platform$worker({
        fq: function (_v0) {
            return $lue_bird$elm_state_interface_experimental$Node$programInit(appConfig);
        },
        f6: function (state) {
            return $lue_bird$elm_state_interface_experimental$Node$programSubscriptions_fn(appConfig, state);
        },
        gi: F2(function (event, state) {
            return $lue_bird$elm_state_interface_experimental$Node$programUpdate_fn(appConfig, event, state);
        })
    });
};
var $author$project$Main$toJs = _Platform_outgoingPort("toJs", $elm$core$Basics$identity);
var $author$project$Main$main = $lue_bird$elm_state_interface_experimental$Node$program({
    fr: $author$project$Main$initialState,
    fs: $author$project$Main$interface,
    ex: { fm: $author$project$Main$fromJs, gd: $author$project$Main$toJs }
});
/*
    _Platform_export({ "Main": { "init": $author$project$Main$main($elm$json$Json$Decode$succeed(0))(0) } });
}(this));
*/

export const Elm = { "Main": { "init": $author$project$Main$main($elm$json$Json$Decode$succeed(0))(0) } };
